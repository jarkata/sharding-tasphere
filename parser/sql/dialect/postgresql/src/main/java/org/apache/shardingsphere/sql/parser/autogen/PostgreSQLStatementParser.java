// Generated from /Users/code/gitcode/shardingsphere/parser/sql/dialect/postgresql/src/main/antlr4/org/apache/shardingsphere/sql/parser/autogen/PostgreSQLStatementParser.g4 by ANTLR 4.13.2
package org.apache.shardingsphere.sql.parser.autogen;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue", "this-escape"})
public class PostgreSQLStatementParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.13.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		BEGIN_DOLLAR_STRING_CONSTANT=1, AND_=2, OR_=3, NOT_=4, TILDE_=5, VERTICAL_BAR_=6, 
		AMPERSAND_=7, SIGNED_LEFT_SHIFT_=8, SIGNED_RIGHT_SHIFT_=9, CARET_=10, 
		MOD_=11, COLON_=12, PLUS_=13, MINUS_=14, ASTERISK_=15, SLASH_=16, BACKSLASH_=17, 
		DOT_=18, DOT_ASTERISK_=19, SAFE_EQ_=20, DEQ_=21, EQ_=22, CQ_=23, NEQ_=24, 
		GT_=25, GTE_=26, LT_=27, LTE_=28, POUND_=29, LP_=30, RP_=31, LBE_=32, 
		RBE_=33, LBT_=34, RBT_=35, COMMA_=36, DQ_=37, SQ_=38, BQ_=39, QUESTION_=40, 
		DOLLAR_=41, AT_=42, SEMI_=43, TILDE_TILDE_=44, NOT_TILDE_TILDE_=45, TYPE_CAST_=46, 
		ILIKE_=47, NOT_ILIKE_=48, UNICODE_ESCAPE=49, JSON_EXTRACT_=50, JSON_EXTRACT_TEXT_=51, 
		JSON_PATH_EXTRACT_=52, JSON_PATH_EXTRACT_TEXT_=53, JSONB_CONTAIN_RIGHT_=54, 
		JSONB_CONTAIN_LEFT_=55, JSONB_CONTAIN_ALL_TOP_KEY_=56, JSONB_PATH_DELETE_=57, 
		JSONB_PATH_CONTAIN_ANY_VALUE_=58, JSONB_PATH_PREDICATE_CHECK_=59, GEOMETRIC_LENGTH_=60, 
		GEOMETRIC_DISTANCE_=61, GEOMETRIC_EXTEND_RIGHT_=62, GEOMETRIC_EXTEND_LEFT_=63, 
		GEOMETRIC_STRICT_BELOW_=64, GEOMETRIC_STRICT_ABOVE_=65, GEOMETRIC_EXTEND_ABOVE_=66, 
		GEOMETRIC_EXTEND_BELOW_=67, GEOMETRIC_BELOW_=68, GEOMETRIC_ABOVE_=69, 
		GEOMETRIC_INTERSECT_=70, GEOMETRIC_PERPENDICULAR_=71, GEOMETRIC_SAME_AS_=72, 
		ADMIN=73, BINARY=74, ESCAPE=75, EXISTS=76, EXCLUDE=77, MOD=78, PARTITION=79, 
		ROW=80, UNKNOWN=81, ALWAYS=82, CASCADE=83, CHECK=84, GENERATED=85, ISOLATION=86, 
		LEVEL=87, NO=88, OPTION=89, PRIVILEGES=90, READ=91, REFERENCES=92, ROLE=93, 
		ROWS=94, START=95, TRANSACTION=96, USER=97, ACTION=98, CACHE=99, CHARACTERISTICS=100, 
		CLUSTER=101, COLLATE=102, COMMENTS=103, COMPRESSION=104, CONCURRENTLY=105, 
		FINALIZE=106, CONNECT=107, CONSTRAINTS=108, CURRENT_TIMESTAMP=109, CYCLE=110, 
		DATA=111, DATABASE=112, DEFAULTS=113, DEFERRABLE=114, DEFERRED=115, DEPENDS=116, 
		DOMAIN=117, EXCLUDING=118, EXECUTE=119, EXTENDED=120, EXTENSION=121, EXTERNAL=122, 
		EXTRACT=123, FILTER=124, FIRST=125, FOLLOWING=126, FORCE=127, GLOBAL=128, 
		IDENTITY=129, IMMEDIATE=130, INCLUDING=131, INCREMENT=132, INDEXES=133, 
		INHERIT=134, INHERITS=135, INITIALLY=136, INCLUDE=137, LANGUAGE=138, LARGE=139, 
		LAST=140, LOGGED=141, MAIN=142, MATCH=143, MAXVALUE=144, MINVALUE=145, 
		NOTHING=146, NULLS=147, OBJECT=148, OIDS=149, ONLY=150, OVER=151, OWNED=152, 
		OWNER=153, PARTIAL=154, PLAIN=155, PRECEDING=156, RANGE=157, RENAME=158, 
		REPLICA=159, RESET=160, RESTART=161, RESTRICT=162, ROUTINE=163, RULE=164, 
		SECURITY=165, SEQUENCE=166, SESSION=167, SESSION_USER=168, SHOW=169, SIMPLE=170, 
		STATISTICS=171, STORAGE=172, TABLESPACE=173, TEMP=174, TEMPORARY=175, 
		UNBOUNDED=176, UNLOGGED=177, USAGE=178, VALID=179, VALIDATE=180, WITHIN=181, 
		WITHOUT=182, ZONE=183, OF=184, UESCAPE=185, GROUPS=186, RECURSIVE=187, 
		INT=188, INT2=189, INT4=190, INT8=191, FLOAT=192, FLOAT4=193, FLOAT8=194, 
		SMALLSERIAL=195, SERIAL=196, BIGSERIAL=197, VARCHAR=198, BYTEA=199, ENUM=200, 
		POINT=201, LINE=202, LSEG=203, BOX=204, PATH=205, POLYGON=206, CIRCLE=207, 
		CIDR=208, INET=209, MACADDR=210, MACADDR8=211, BIT=212, VARBIT=213, TSVECTOR=214, 
		TSQUERY=215, XML=216, JSON=217, INT4RANGE=218, INT8RANGE=219, NUMRANGE=220, 
		TSRANGE=221, TSTZRANGE=222, DATERANGE=223, TABLESAMPLE=224, ORDINALITY=225, 
		CURRENT_ROLE=226, CURRENT_CATALOG=227, CURRENT_SCHEMA=228, NORMALIZE=229, 
		OVERLAY=230, XMLCONCAT=231, XMLELEMENT=232, XMLEXISTS=233, XMLFOREST=234, 
		XMLPARSE=235, XMLPI=236, XMLROOT=237, XMLSERIALIZE=238, TREAT=239, SETOF=240, 
		NFC=241, NFD=242, NFKC=243, NFKD=244, XMLATTRIBUTES=245, REF=246, PASSING=247, 
		VERSION=248, YES=249, STANDALONE=250, GREATEST=251, LEAST=252, MATERIALIZED=253, 
		OPERATOR=254, SHARE=255, ROLLUP=256, ILIKE=257, SIMILAR=258, ISNULL=259, 
		NOTNULL=260, SYMMETRIC=261, DOCUMENT=262, NORMALIZED=263, ASYMMETRIC=264, 
		VARIADIC=265, NOWAIT=266, LOCKED=267, XMLTABLE=268, COLUMNS=269, CONTENT=270, 
		STRIP=271, WHITESPACE=272, XMLNAMESPACES=273, PLACING=274, RETURNING=275, 
		LATERAL=276, NONE=277, ANALYSE=278, ANALYZE=279, CONFLICT=280, OVERRIDING=281, 
		SYSTEM=282, ABORT=283, ABSOLUTE=284, ACCESS=285, AFTER=286, AGGREGATE=287, 
		ALSO=288, ATTACH=289, ATTRIBUTE=290, BACKWARD=291, BEFORE=292, ASSERTION=293, 
		ASSIGNMENT=294, CONTINUE=295, CONVERSION=296, COPY=297, COST=298, CSV=299, 
		CALLED=300, CATALOG=301, CHAIN=302, CHECKPOINT=303, CLASS=304, CONFIGURATION=305, 
		COMMENT=306, DETACH=307, DICTIONARY=308, EXPRESSION=309, INSENSITIVE=310, 
		DISCARD=311, OFF=312, INSTEAD=313, EXPLAIN=314, INPUT=315, INLINE=316, 
		PARALLEL=317, LEAKPROOF=318, COMMITTED=319, ENCODING=320, IMPLICIT=321, 
		DELIMITER=322, CURSOR=323, EACH=324, EVENT=325, DEALLOCATE=326, CONNECTION=327, 
		DECLARE=328, FAMILY=329, FORWARD=330, EXCLUSIVE=331, FUNCTIONS=332, LOCATION=333, 
		LABEL=334, DELIMITERS=335, HANDLER=336, HEADER=337, IMMUTABLE=338, GRANTED=339, 
		HOLD=340, MAPPING=341, OLD=342, METHOD=343, LOAD=344, LISTEN=345, MODE=346, 
		MOVE=347, PROCEDURAL=348, PARSER=349, PROCEDURES=350, ENCRYPTED=351, PUBLICATION=352, 
		PROGRAM=353, REFERENCING=354, PLANS=355, REINDEX=356, PRIOR=357, PASSWORD=358, 
		RELATIVE=359, QUOTE=360, ROUTINES=361, REPLACE=362, SNAPSHOT=363, REFRESH=364, 
		PREPARE=365, OPTIONS=366, IMPORT=367, INVOKER=368, NEW=369, PREPARED=370, 
		SCROLL=371, SEQUENCES=372, SYSID=373, REASSIGN=374, SERVER=375, SUBSCRIPTION=376, 
		SEARCH=377, SCHEMAS=378, RECHECK=379, POLICY=380, NOTIFY=381, LOCK=382, 
		RELEASE=383, SERIALIZABLE=384, RETURNS=385, STATEMENT=386, STDIN=387, 
		STDOUT=388, TABLES=389, SUPPORT=390, STABLE=391, TEMPLATE=392, UNENCRYPTED=393, 
		VIEWS=394, UNCOMMITTED=395, TRANSFORM=396, UNLISTEN=397, TRUSTED=398, 
		VALIDATOR=399, UNTIL=400, VACUUM=401, VOLATILE=402, STORED=403, WRITE=404, 
		STRICT=405, TYPES=406, WRAPPER=407, WORK=408, FREEZE=409, AUTHORIZATION=410, 
		VERBOSE=411, PARAM=412, OUT=413, INOUT=414, FORMAT=415, FORCE_QUOTE=416, 
		FORCE_NOT_NULL=417, FORCE_NULL=418, SUPERUSER=419, NOSUPERUSER=420, CREATEDB=421, 
		NOCREATEDB=422, CREATEROLE=423, NOCREATEROLE=424, NOINHERIT=425, LOGIN=426, 
		NOLOGIN=427, REPLICATION=428, NOREPLICATION=429, BYPASSRLS=430, NOBYPASSRLS=431, 
		ASENSITIVE=432, DESCRIPTOR=433, FOR_GENERATOR=434, WS=435, SELECT=436, 
		INSERT=437, UPDATE=438, DELETE=439, CREATE=440, ALTER=441, DROP=442, TRUNCATE=443, 
		SCHEMA=444, GRANT=445, REVOKE=446, ADD=447, SET=448, TABLE=449, COLUMN=450, 
		INDEX=451, CONSTRAINT=452, PRIMARY=453, UNIQUE=454, FOREIGN=455, KEY=456, 
		POSITION=457, PRECISION=458, FUNCTION=459, TRIGGER=460, PROCEDURE=461, 
		VIEW=462, INTO=463, VALUES=464, WITH=465, UNION=466, DISTINCT=467, CASE=468, 
		WHEN=469, CAST=470, TRIM=471, SUBSTRING=472, FROM=473, NATURAL=474, JOIN=475, 
		FULL=476, INNER=477, OUTER=478, LEFT=479, RIGHT=480, CROSS=481, USING=482, 
		WHERE=483, AS=484, ON=485, IF=486, ELSE=487, THEN=488, FOR=489, TO=490, 
		AND=491, OR=492, IS=493, NOT=494, NULL=495, TRUE=496, FALSE=497, BETWEEN=498, 
		IN=499, ALL=500, ANY=501, LIKE=502, ORDER=503, GROUP=504, BY=505, ASC=506, 
		DESC=507, HAVING=508, LIMIT=509, OFFSET=510, BEGIN=511, COMMIT=512, ROLLBACK=513, 
		SAVEPOINT=514, BOOLEAN=515, DOUBLE=516, CHAR=517, CHARACTER=518, ARRAY=519, 
		INTERVAL=520, DATE=521, TIME=522, TIMESTAMP=523, LOCALTIME=524, LOCALTIMESTAMP=525, 
		YEAR=526, QUARTER=527, MONTH=528, WEEK=529, DAY=530, HOUR=531, MINUTE=532, 
		SECOND=533, MICROSECOND=534, DEFAULT=535, CURRENT=536, ENABLE=537, DISABLE=538, 
		CALL=539, INSTANCE=540, PRESERVE=541, DO=542, DEFINER=543, CURRENT_USER=544, 
		SQL=545, CASCADED=546, LOCAL=547, CLOSE=548, OPEN=549, NEXT=550, NAME=551, 
		COLLATION=552, NAMES=553, INTEGER=554, REAL=555, DECIMAL=556, TYPE=557, 
		SMALLINT=558, BIGINT=559, NUMERIC=560, TEXT=561, REPEATABLE=562, CURRENT_DATE=563, 
		CURRENT_TIME=564, NULLIF=565, VARYING=566, NATIONAL=567, NCHAR=568, VALUE=569, 
		BOTH=570, LEADING=571, TRAILING=572, COALESCE=573, INTERSECT=574, EXCEPT=575, 
		TIES=576, FETCH=577, CUBE=578, GROUPING=579, SETS=580, WINDOW=581, OTHERS=582, 
		OVERLAPS=583, SOME=584, AT=585, DEC=586, END=587, BLOCK_COMMENT=588, INLINE_COMMENT=589, 
		IDENTIFIER_=590, STRING_=591, NUMBER_=592, HEX_DIGIT_=593, BIT_NUM_=594, 
		DEFAULT_DOES_NOT_MATCH_ANYTHING=595, APOSTROPHE_SKIP=596, DOLLAR_TEXT=597, 
		END_DOLLAR_STRING_CONSTANT=598, PUBLIC=599, RECEIVE=600, SEND=601, TYPMOD_IN=602, 
		TYPMOD_OUT=603, SUBSCRIPT=604;
	public static final int
		RULE_execute = 0, RULE_setTransaction = 1, RULE_beginTransaction = 2, 
		RULE_commit = 3, RULE_savepoint = 4, RULE_abort = 5, RULE_startTransaction = 6, 
		RULE_end = 7, RULE_rollback = 8, RULE_releaseSavepoint = 9, RULE_rollbackToSavepoint = 10, 
		RULE_commitPrepared = 11, RULE_rollbackPrepared = 12, RULE_setConstraints = 13, 
		RULE_constraintsSetMode = 14, RULE_constraintsSetList = 15, RULE_lock = 16, 
		RULE_lockType = 17, RULE_prepareTransaction = 18, RULE_checkpoint = 19, 
		RULE_insert = 20, RULE_insertTarget = 21, RULE_insertRest = 22, RULE_overrideKind = 23, 
		RULE_insertColumnList = 24, RULE_insertColumnItem = 25, RULE_optOnConflict = 26, 
		RULE_optConfExpr = 27, RULE_update = 28, RULE_setClauseList = 29, RULE_setClause = 30, 
		RULE_setTarget = 31, RULE_setTargetList = 32, RULE_returningClause = 33, 
		RULE_delete = 34, RULE_relationExprOptAlias = 35, RULE_usingClause = 36, 
		RULE_select = 37, RULE_selectWithParens = 38, RULE_selectNoParens = 39, 
		RULE_selectClauseN = 40, RULE_simpleSelect = 41, RULE_withClause = 42, 
		RULE_intoClause = 43, RULE_optTempTableName = 44, RULE_cteList = 45, RULE_commonTableExpr = 46, 
		RULE_optMaterialized = 47, RULE_optNameList = 48, RULE_preparableStmt = 49, 
		RULE_forLockingClause = 50, RULE_forLockingItems = 51, RULE_forLockingItem = 52, 
		RULE_nowaitOrSkip = 53, RULE_forLockingStrength = 54, RULE_lockedRelsList = 55, 
		RULE_qualifiedNameList = 56, RULE_selectLimit = 57, RULE_valuesClause = 58, 
		RULE_limitClause = 59, RULE_offsetClause = 60, RULE_selectLimitValue = 61, 
		RULE_selectOffsetValue = 62, RULE_selectFetchValue = 63, RULE_rowOrRows = 64, 
		RULE_firstOrNext = 65, RULE_onlyOrWithTies = 66, RULE_targetList = 67, 
		RULE_targetEl = 68, RULE_groupClause = 69, RULE_groupByList = 70, RULE_groupByItem = 71, 
		RULE_emptyGroupingSet = 72, RULE_rollupClause = 73, RULE_cubeClause = 74, 
		RULE_groupingSetsClause = 75, RULE_windowClause = 76, RULE_windowDefinitionList = 77, 
		RULE_windowDefinition = 78, RULE_windowSpecification = 79, RULE_existingWindowName = 80, 
		RULE_partitionClause = 81, RULE_frameClause = 82, RULE_frameExtent = 83, 
		RULE_frameBound = 84, RULE_optWindowExclusionClause = 85, RULE_alias = 86, 
		RULE_fromClause = 87, RULE_fromList = 88, RULE_tableReference = 89, RULE_joinedTable = 90, 
		RULE_crossJoinType = 91, RULE_innerJoinType = 92, RULE_outerJoinType = 93, 
		RULE_naturalJoinType = 94, RULE_joinOuter = 95, RULE_joinQual = 96, RULE_relationExpr = 97, 
		RULE_whereClause = 98, RULE_whereOrCurrentClause = 99, RULE_havingClause = 100, 
		RULE_doStatement = 101, RULE_dostmtOptList = 102, RULE_dostmtOptItem = 103, 
		RULE_copy = 104, RULE_copyWithTableOrQuery = 105, RULE_copyOptionList = 106, 
		RULE_copyOption = 107, RULE_copyWithTableOrQueryBinaryCsv = 108, RULE_copyWithTableBinary = 109, 
		RULE_parameterMarker = 110, RULE_reservedKeyword = 111, RULE_numberLiterals = 112, 
		RULE_literalsType = 113, RULE_identifier = 114, RULE_uescape = 115, RULE_unreservedWord = 116, 
		RULE_typeFuncNameKeyword = 117, RULE_schemaName = 118, RULE_tableName = 119, 
		RULE_columnName = 120, RULE_owner = 121, RULE_name = 122, RULE_tableNames = 123, 
		RULE_columnNames = 124, RULE_collationName = 125, RULE_indexName = 126, 
		RULE_constraintName = 127, RULE_primaryKey = 128, RULE_andOperator = 129, 
		RULE_orOperator = 130, RULE_comparisonOperator = 131, RULE_patternMatchingOperator = 132, 
		RULE_cursorName = 133, RULE_aExpr = 134, RULE_bExpr = 135, RULE_cExpr = 136, 
		RULE_indirection = 137, RULE_optIndirection = 138, RULE_indirectionEl = 139, 
		RULE_sliceBound = 140, RULE_inExpr = 141, RULE_caseExpr = 142, RULE_whenClauseList = 143, 
		RULE_whenClause = 144, RULE_caseDefault = 145, RULE_caseArg = 146, RULE_columnref = 147, 
		RULE_qualOp = 148, RULE_subqueryOp = 149, RULE_allOp = 150, RULE_op = 151, 
		RULE_mathOperator = 152, RULE_jsonOperator = 153, RULE_geometricOperator = 154, 
		RULE_qualAllOp = 155, RULE_ascDesc = 156, RULE_anyOperator = 157, RULE_windowExclusionClause = 158, 
		RULE_row = 159, RULE_explicitRow = 160, RULE_implicitRow = 161, RULE_subType = 162, 
		RULE_arrayExpr = 163, RULE_arrayExprList = 164, RULE_funcArgList = 165, 
		RULE_paramName = 166, RULE_funcArgExpr = 167, RULE_typeList = 168, RULE_funcApplication = 169, 
		RULE_funcName = 170, RULE_aexprConst = 171, RULE_numberConst = 172, RULE_qualifiedName = 173, 
		RULE_colId = 174, RULE_channelName = 175, RULE_typeFunctionName = 176, 
		RULE_functionTable = 177, RULE_xmlTable = 178, RULE_xmlTableColumnList = 179, 
		RULE_xmlTableColumnEl = 180, RULE_xmlTableColumnOptionList = 181, RULE_xmlTableColumnOptionEl = 182, 
		RULE_xmlNamespaceList = 183, RULE_xmlNamespaceEl = 184, RULE_funcExpr = 185, 
		RULE_withinGroupClause = 186, RULE_filterClause = 187, RULE_functionExprWindowless = 188, 
		RULE_ordinality = 189, RULE_functionExprCommonSubexpr = 190, RULE_typeName = 191, 
		RULE_simpleTypeName = 192, RULE_constTypeName = 193, RULE_exprList = 194, 
		RULE_extractList = 195, RULE_extractArg = 196, RULE_genericType = 197, 
		RULE_typeModifiers = 198, RULE_numeric = 199, RULE_constDatetime = 200, 
		RULE_timezone = 201, RULE_character = 202, RULE_characterWithLength = 203, 
		RULE_characterWithoutLength = 204, RULE_characterClause = 205, RULE_optFloat = 206, 
		RULE_attrs = 207, RULE_attrName = 208, RULE_colLable = 209, RULE_bit = 210, 
		RULE_bitWithLength = 211, RULE_bitWithoutLength = 212, RULE_constInterval = 213, 
		RULE_optInterval = 214, RULE_optArrayBounds = 215, RULE_intervalSecond = 216, 
		RULE_unicodeNormalForm = 217, RULE_trimList = 218, RULE_overlayList = 219, 
		RULE_overlayPlacing = 220, RULE_substrFrom = 221, RULE_substrFor = 222, 
		RULE_positionList = 223, RULE_substrList = 224, RULE_xmlAttributes = 225, 
		RULE_xmlAttributeList = 226, RULE_xmlAttributeEl = 227, RULE_xmlExistsArgument = 228, 
		RULE_xmlPassingMech = 229, RULE_documentOrContent = 230, RULE_xmlWhitespaceOption = 231, 
		RULE_xmlRootVersion = 232, RULE_xmlRootStandalone = 233, RULE_rowsFromItem = 234, 
		RULE_rowsFromList = 235, RULE_columnDefList = 236, RULE_tableFuncElementList = 237, 
		RULE_tableFuncElement = 238, RULE_collateClause = 239, RULE_anyName = 240, 
		RULE_aliasClause = 241, RULE_nameList = 242, RULE_funcAliasClause = 243, 
		RULE_tablesampleClause = 244, RULE_repeatableClause = 245, RULE_allOrDistinct = 246, 
		RULE_sortClause = 247, RULE_sortbyList = 248, RULE_sortby = 249, RULE_nullsOrder = 250, 
		RULE_distinctClause = 251, RULE_distinct = 252, RULE_overClause = 253, 
		RULE_windowName = 254, RULE_indexParams = 255, RULE_indexElemOptions = 256, 
		RULE_indexElem = 257, RULE_collate = 258, RULE_optClass = 259, RULE_reloptions = 260, 
		RULE_reloptionList = 261, RULE_reloptionElem = 262, RULE_defArg = 263, 
		RULE_funcType = 264, RULE_dataType = 265, RULE_dataTypeName = 266, RULE_dataTypeLength = 267, 
		RULE_characterSet = 268, RULE_ignoredIdentifier = 269, RULE_ignoredIdentifiers = 270, 
		RULE_signedIconst = 271, RULE_booleanOrString = 272, RULE_nonReservedWord = 273, 
		RULE_colNameKeyword = 274, RULE_databaseName = 275, RULE_roleSpec = 276, 
		RULE_varName = 277, RULE_varList = 278, RULE_varValue = 279, RULE_zoneValue = 280, 
		RULE_numericOnly = 281, RULE_isoLevel = 282, RULE_columnDef = 283, RULE_colQualList = 284, 
		RULE_colConstraint = 285, RULE_constraintAttr = 286, RULE_colConstraintElem = 287, 
		RULE_parenthesizedSeqOptList = 288, RULE_seqOptList = 289, RULE_seqOptElem = 290, 
		RULE_optColumnList = 291, RULE_columnElem = 292, RULE_columnList = 293, 
		RULE_generatedWhen = 294, RULE_noInherit = 295, RULE_consTableSpace = 296, 
		RULE_definition = 297, RULE_defList = 298, RULE_defElem = 299, RULE_colLabel = 300, 
		RULE_keyActions = 301, RULE_keyDelete = 302, RULE_keyUpdate = 303, RULE_keyAction = 304, 
		RULE_keyMatch = 305, RULE_createGenericOptions = 306, RULE_genericOptionList = 307, 
		RULE_genericOptionElem = 308, RULE_genericOptionArg = 309, RULE_genericOptionName = 310, 
		RULE_replicaIdentity = 311, RULE_operArgtypes = 312, RULE_funcArg = 313, 
		RULE_argClass = 314, RULE_funcArgsList = 315, RULE_nonReservedWordOrSconst = 316, 
		RULE_fileName = 317, RULE_roleList = 318, RULE_setResetClause = 319, RULE_setRest = 320, 
		RULE_transactionModeList = 321, RULE_transactionModeItem = 322, RULE_setRestMore = 323, 
		RULE_encoding = 324, RULE_genericSet = 325, RULE_variableResetStmt = 326, 
		RULE_resetRest = 327, RULE_genericReset = 328, RULE_relationExprList = 329, 
		RULE_commonFuncOptItem = 330, RULE_functionSetResetClause = 331, RULE_rowSecurityCmd = 332, 
		RULE_event = 333, RULE_typeNameList = 334, RULE_ifNotExists = 335, RULE_ifExists = 336, 
		RULE_booleanValue = 337, RULE_hostVariable = 338, RULE_grant = 339, RULE_revoke = 340, 
		RULE_optionForClause = 341, RULE_createUser = 342, RULE_createOptRoleElem = 343, 
		RULE_alterOptRoleElem = 344, RULE_dropUser = 345, RULE_alterUser = 346, 
		RULE_alterUserClauses = 347, RULE_alterOptRoleList = 348, RULE_createRole = 349, 
		RULE_dropRole = 350, RULE_alterRole = 351, RULE_createGroup = 352, RULE_reassignOwned = 353, 
		RULE_dropDroup = 354, RULE_createTable = 355, RULE_executeParamClause = 356, 
		RULE_partitionBoundSpec = 357, RULE_hashPartbound = 358, RULE_hashPartboundElem = 359, 
		RULE_typedTableElementList = 360, RULE_typedTableElement = 361, RULE_columnOptions = 362, 
		RULE_withData = 363, RULE_tableSpace = 364, RULE_onCommitOption = 365, 
		RULE_withOption = 366, RULE_tableAccessMethodClause = 367, RULE_accessMethod = 368, 
		RULE_createIndex = 369, RULE_include = 370, RULE_indexIncludingParams = 371, 
		RULE_accessMethodClause = 372, RULE_createDatabase = 373, RULE_createView = 374, 
		RULE_dropDatabase = 375, RULE_dropGroup = 376, RULE_createDatabaseSpecification = 377, 
		RULE_createdbOptName = 378, RULE_alterTable = 379, RULE_alterIndex = 380, 
		RULE_dropTable = 381, RULE_dropTableOpt = 382, RULE_dropIndex = 383, RULE_dropIndexOpt = 384, 
		RULE_truncateTable = 385, RULE_restartSeqs = 386, RULE_createTableSpecification = 387, 
		RULE_createDefinitionClause = 388, RULE_createDefinition = 389, RULE_columnDefinition = 390, 
		RULE_columnConstraint = 391, RULE_constraintClause = 392, RULE_columnConstraintOption = 393, 
		RULE_checkOption = 394, RULE_defaultExpr = 395, RULE_sequenceOptions = 396, 
		RULE_sequenceOption = 397, RULE_indexParameters = 398, RULE_action = 399, 
		RULE_constraintOptionalParam = 400, RULE_likeOption = 401, RULE_tableConstraint = 402, 
		RULE_tableConstraintOption = 403, RULE_exclusionWhereClause = 404, RULE_exclusionConstraintList = 405, 
		RULE_exclusionConstraintElem = 406, RULE_inheritClause = 407, RULE_partitionSpec = 408, 
		RULE_partParams = 409, RULE_partElem = 410, RULE_funcExprWindowless = 411, 
		RULE_partStrategy = 412, RULE_createIndexSpecification = 413, RULE_concurrentlyClause = 414, 
		RULE_onlyClause = 415, RULE_asteriskClause = 416, RULE_alterDefinitionClause = 417, 
		RULE_partitionCmd = 418, RULE_alterIndexDefinitionClause = 419, RULE_indexPartitionCmd = 420, 
		RULE_renameIndexSpecification = 421, RULE_alterIndexDependsOnExtension = 422, 
		RULE_alterIndexSetTableSpace = 423, RULE_tableNamesClause = 424, RULE_tableNameClause = 425, 
		RULE_alterTableActions = 426, RULE_alterTableAction = 427, RULE_addColumnSpecification = 428, 
		RULE_dropColumnSpecification = 429, RULE_modifyColumnSpecification = 430, 
		RULE_modifyColumn = 431, RULE_alterColumnSetOption = 432, RULE_attributeOptions = 433, 
		RULE_attributeOption = 434, RULE_addConstraintSpecification = 435, RULE_tableConstraintUsingIndex = 436, 
		RULE_modifyConstraintSpecification = 437, RULE_validateConstraintSpecification = 438, 
		RULE_dropConstraintSpecification = 439, RULE_storageParameterWithValue = 440, 
		RULE_storageParameter = 441, RULE_renameColumnSpecification = 442, RULE_renameConstraint = 443, 
		RULE_renameTableSpecification = 444, RULE_indexNames = 445, RULE_alterDatabase = 446, 
		RULE_alterDatabaseClause = 447, RULE_createdbOptItems = 448, RULE_createdbOptItem = 449, 
		RULE_alterTableCmds = 450, RULE_alterTableCmd = 451, RULE_columnCompression = 452, 
		RULE_constraintAttributeSpec = 453, RULE_constraintAttributeElem = 454, 
		RULE_alterGenericOptions = 455, RULE_alterGenericOptionList = 456, RULE_alterGenericOptionElem = 457, 
		RULE_dropBehavior = 458, RULE_alterUsing = 459, RULE_setData = 460, RULE_alterIdentityColumnOptionList = 461, 
		RULE_alterIdentityColumnOption = 462, RULE_alterColumnDefault = 463, RULE_alterOperator = 464, 
		RULE_alterOperatorClass = 465, RULE_alterOperatorClassClauses = 466, RULE_alterOperatorFamily = 467, 
		RULE_alterOperatorFamilyClauses = 468, RULE_opclassItemList = 469, RULE_opclassItem = 470, 
		RULE_opclassPurpose = 471, RULE_alterOperatorClauses = 472, RULE_operatorDefList = 473, 
		RULE_operatorDefElem = 474, RULE_operatorDefArg = 475, RULE_operatorWithArgtypes = 476, 
		RULE_alterAggregate = 477, RULE_aggregateSignature = 478, RULE_aggrArgs = 479, 
		RULE_aggrArgsList = 480, RULE_aggrArg = 481, RULE_alterAggregateDefinitionClause = 482, 
		RULE_alterCollation = 483, RULE_alterCollationClause = 484, RULE_alterConversion = 485, 
		RULE_alterConversionClause = 486, RULE_alterDefaultPrivileges = 487, RULE_defACLAction = 488, 
		RULE_grantGrantOption = 489, RULE_granteeList = 490, RULE_grantee = 491, 
		RULE_defaclPrivilegeTarget = 492, RULE_privileges = 493, RULE_privilegeList = 494, 
		RULE_privilege = 495, RULE_defACLOptionList = 496, RULE_defACLOption = 497, 
		RULE_schemaNameList = 498, RULE_alterDomain = 499, RULE_alterDomainClause = 500, 
		RULE_alterEventTrigger = 501, RULE_alterEventTriggerClause = 502, RULE_tiggerName = 503, 
		RULE_alterExtension = 504, RULE_alterExtensionClauses = 505, RULE_functionWithArgtypes = 506, 
		RULE_funcArgs = 507, RULE_aggregateWithArgtypes = 508, RULE_alterExtensionOptList = 509, 
		RULE_alterExtensionOptItem = 510, RULE_alterForeignDataWrapper = 511, 
		RULE_alterForeignDataWrapperClauses = 512, RULE_fdwOptions = 513, RULE_fdwOption = 514, 
		RULE_handlerName = 515, RULE_alterGroup = 516, RULE_alterGroupClauses = 517, 
		RULE_alterLanguage = 518, RULE_alterLargeObject = 519, RULE_alterMaterializedView = 520, 
		RULE_alterMaterializedViewClauses = 521, RULE_executeStmt = 522, RULE_createMaterializedView = 523, 
		RULE_createMvTarget = 524, RULE_alterPolicy = 525, RULE_alterPolicyClauses = 526, 
		RULE_refreshMatViewStmt = 527, RULE_alterProcedure = 528, RULE_alterProcedureClauses = 529, 
		RULE_alterfuncOptList = 530, RULE_alterFunction = 531, RULE_alterFunctionClauses = 532, 
		RULE_alterPublication = 533, RULE_alterRoutine = 534, RULE_alterRule = 535, 
		RULE_alterSequence = 536, RULE_alterSequenceClauses = 537, RULE_alterServer = 538, 
		RULE_foreignServerVersion = 539, RULE_alterStatistics = 540, RULE_alterSubscription = 541, 
		RULE_publicationNameList = 542, RULE_publicationNameItem = 543, RULE_alterSystem = 544, 
		RULE_alterTablespace = 545, RULE_alterTextSearchConfiguration = 546, RULE_alterTextSearchConfigurationClauses = 547, 
		RULE_anyNameList = 548, RULE_alterTextSearchDictionary = 549, RULE_alterTextSearchParser = 550, 
		RULE_alterTextSearchTemplate = 551, RULE_alterTrigger = 552, RULE_alterType = 553, 
		RULE_alterTypeClauses = 554, RULE_alterTypeCmds = 555, RULE_alterTypeCmd = 556, 
		RULE_typeDefList = 557, RULE_typeDefElem = 558, RULE_typeDefArg = 559, 
		RULE_alterUserMapping = 560, RULE_authIdent = 561, RULE_alterView = 562, 
		RULE_alterViewClauses = 563, RULE_close = 564, RULE_cluster = 565, RULE_clusterVerboseSpecification = 566, 
		RULE_clusterIndexSpecification = 567, RULE_clusterVerboseOptionList = 568, 
		RULE_clusterVerboseOption = 569, RULE_comment = 570, RULE_commentClauses = 571, 
		RULE_objectTypeNameOnAnyName = 572, RULE_objectTypeName = 573, RULE_dropTypeName = 574, 
		RULE_objectTypeAnyName = 575, RULE_commentText = 576, RULE_createAccessMethod = 577, 
		RULE_createAggregate = 578, RULE_oldAggrDefinition = 579, RULE_oldAggrList = 580, 
		RULE_oldAggrElem = 581, RULE_createCast = 582, RULE_castContext = 583, 
		RULE_createCollation = 584, RULE_createConversion = 585, RULE_createDomain = 586, 
		RULE_createEventTrigger = 587, RULE_eventTriggerWhenList = 588, RULE_eventTriggerWhenItem = 589, 
		RULE_eventTriggerValueList = 590, RULE_createExtension = 591, RULE_createExtensionOptList = 592, 
		RULE_createExtensionOptItem = 593, RULE_createForeignDataWrapper = 594, 
		RULE_createForeignTable = 595, RULE_createForeignTableClauses = 596, RULE_tableElementList = 597, 
		RULE_tableElement = 598, RULE_tableLikeClause = 599, RULE_tableLikeOptionList = 600, 
		RULE_tableLikeOption = 601, RULE_createFunction = 602, RULE_tableFuncColumnList = 603, 
		RULE_tableFuncColumn = 604, RULE_createfuncOptList = 605, RULE_createfuncOptItem = 606, 
		RULE_transformTypeList = 607, RULE_funcAs = 608, RULE_funcReturn = 609, 
		RULE_funcArgsWithDefaults = 610, RULE_funcArgsWithDefaultsList = 611, 
		RULE_funcArgWithDefault = 612, RULE_createLanguage = 613, RULE_transformElementList = 614, 
		RULE_validatorClause = 615, RULE_createPolicy = 616, RULE_createProcedure = 617, 
		RULE_createPublication = 618, RULE_publicationForTables = 619, RULE_createRule = 620, 
		RULE_ruleActionList = 621, RULE_ruleActionStmt = 622, RULE_ruleActionMulti = 623, 
		RULE_createTrigger = 624, RULE_triggerEvents = 625, RULE_triggerOneEvent = 626, 
		RULE_triggerActionTime = 627, RULE_triggerFuncArgs = 628, RULE_triggerFuncArg = 629, 
		RULE_triggerWhen = 630, RULE_triggerForSpec = 631, RULE_triggerReferencing = 632, 
		RULE_triggerTransitions = 633, RULE_triggerTransition = 634, RULE_transitionRelName = 635, 
		RULE_transitionRowOrTable = 636, RULE_transitionOldOrNew = 637, RULE_createSequence = 638, 
		RULE_tempOption = 639, RULE_createServer = 640, RULE_createStatistics = 641, 
		RULE_createSubscription = 642, RULE_createTablespace = 643, RULE_createTextSearch = 644, 
		RULE_createTransform = 645, RULE_createType = 646, RULE_createTypeClauses = 647, 
		RULE_enumValList = 648, RULE_createUserMapping = 649, RULE_discard = 650, 
		RULE_dropAccessMethod = 651, RULE_dropAggregate = 652, RULE_aggregateWithArgtypesList = 653, 
		RULE_dropCast = 654, RULE_dropCollation = 655, RULE_dropConversion = 656, 
		RULE_dropDomain = 657, RULE_dropEventTrigger = 658, RULE_dropExtension = 659, 
		RULE_dropForeignDataWrapper = 660, RULE_dropForeignTable = 661, RULE_dropFunction = 662, 
		RULE_functionWithArgtypesList = 663, RULE_dropLanguage = 664, RULE_dropMaterializedView = 665, 
		RULE_dropOperator = 666, RULE_operatorWithArgtypesList = 667, RULE_dropOperatorClass = 668, 
		RULE_dropOperatorFamily = 669, RULE_dropOwned = 670, RULE_dropPolicy = 671, 
		RULE_dropProcedure = 672, RULE_dropPublication = 673, RULE_dropRoutine = 674, 
		RULE_dropRule = 675, RULE_dropSequence = 676, RULE_dropServer = 677, RULE_dropStatistics = 678, 
		RULE_dropSubscription = 679, RULE_dropTablespace = 680, RULE_dropTextSearch = 681, 
		RULE_dropTransform = 682, RULE_dropTrigger = 683, RULE_dropType = 684, 
		RULE_dropUserMapping = 685, RULE_dropView = 686, RULE_importForeignSchema = 687, 
		RULE_importQualification = 688, RULE_importQualificationType = 689, RULE_declare = 690, 
		RULE_cursorOption = 691, RULE_open = 692, RULE_usingValueClause = 693, 
		RULE_value = 694, RULE_usingSqlDescriptorClause = 695, RULE_descriptorName = 696, 
		RULE_move = 697, RULE_fetch = 698, RULE_listen = 699, RULE_unlisten = 700, 
		RULE_notifyStmt = 701, RULE_direction = 702, RULE_prepare = 703, RULE_reindex = 704, 
		RULE_reIndexClauses = 705, RULE_reindexOptionList = 706, RULE_reindexOptionElem = 707, 
		RULE_reindexTargetMultitable = 708, RULE_reindexTargetType = 709, RULE_deallocate = 710, 
		RULE_prepTypeClause = 711, RULE_refreshMaterializedView = 712, RULE_alterForeignTable = 713, 
		RULE_alterForeignTableClauses = 714, RULE_createOperator = 715, RULE_createOperatorClass = 716, 
		RULE_createOperatorFamily = 717, RULE_createSchema = 718, RULE_createSchemaClauses = 719, 
		RULE_schemaEltList = 720, RULE_schemaStmt = 721, RULE_securityLabelStmt = 722, 
		RULE_securityLabel = 723, RULE_securityLabelClausces = 724, RULE_privilegeClause = 725, 
		RULE_roleClause = 726, RULE_privilegeTypes = 727, RULE_onObjectClause = 728, 
		RULE_numericOnlyList = 729, RULE_privilegeLevel = 730, RULE_routineName = 731, 
		RULE_privilegeType = 732, RULE_alterSchema = 733, RULE_dropSchema = 734, 
		RULE_show = 735, RULE_set = 736, RULE_runtimeScope = 737, RULE_timeZoneClause = 738, 
		RULE_configurationParameterClause = 739, RULE_resetParameter = 740, RULE_explain = 741, 
		RULE_explainableStmt = 742, RULE_explainOptionList = 743, RULE_explainOptionElem = 744, 
		RULE_explainOptionArg = 745, RULE_explainOptionName = 746, RULE_analyzeKeyword = 747, 
		RULE_analyzeTable = 748, RULE_vacuumRelationList = 749, RULE_vacuumRelation = 750, 
		RULE_vacAnalyzeOptionList = 751, RULE_vacAnalyzeOptionElem = 752, RULE_vacAnalyzeOptionArg = 753, 
		RULE_vacAnalyzeOptionName = 754, RULE_load = 755, RULE_vacuum = 756, RULE_emptyStatement = 757, 
		RULE_call = 758, RULE_callArguments = 759, RULE_callArgument = 760, RULE_positionalNotation = 761, 
		RULE_namedNotation = 762;
	private static String[] makeRuleNames() {
		return new String[] {
			"execute", "setTransaction", "beginTransaction", "commit", "savepoint", 
			"abort", "startTransaction", "end", "rollback", "releaseSavepoint", "rollbackToSavepoint", 
			"commitPrepared", "rollbackPrepared", "setConstraints", "constraintsSetMode", 
			"constraintsSetList", "lock", "lockType", "prepareTransaction", "checkpoint", 
			"insert", "insertTarget", "insertRest", "overrideKind", "insertColumnList", 
			"insertColumnItem", "optOnConflict", "optConfExpr", "update", "setClauseList", 
			"setClause", "setTarget", "setTargetList", "returningClause", "delete", 
			"relationExprOptAlias", "usingClause", "select", "selectWithParens", 
			"selectNoParens", "selectClauseN", "simpleSelect", "withClause", "intoClause", 
			"optTempTableName", "cteList", "commonTableExpr", "optMaterialized", 
			"optNameList", "preparableStmt", "forLockingClause", "forLockingItems", 
			"forLockingItem", "nowaitOrSkip", "forLockingStrength", "lockedRelsList", 
			"qualifiedNameList", "selectLimit", "valuesClause", "limitClause", "offsetClause", 
			"selectLimitValue", "selectOffsetValue", "selectFetchValue", "rowOrRows", 
			"firstOrNext", "onlyOrWithTies", "targetList", "targetEl", "groupClause", 
			"groupByList", "groupByItem", "emptyGroupingSet", "rollupClause", "cubeClause", 
			"groupingSetsClause", "windowClause", "windowDefinitionList", "windowDefinition", 
			"windowSpecification", "existingWindowName", "partitionClause", "frameClause", 
			"frameExtent", "frameBound", "optWindowExclusionClause", "alias", "fromClause", 
			"fromList", "tableReference", "joinedTable", "crossJoinType", "innerJoinType", 
			"outerJoinType", "naturalJoinType", "joinOuter", "joinQual", "relationExpr", 
			"whereClause", "whereOrCurrentClause", "havingClause", "doStatement", 
			"dostmtOptList", "dostmtOptItem", "copy", "copyWithTableOrQuery", "copyOptionList", 
			"copyOption", "copyWithTableOrQueryBinaryCsv", "copyWithTableBinary", 
			"parameterMarker", "reservedKeyword", "numberLiterals", "literalsType", 
			"identifier", "uescape", "unreservedWord", "typeFuncNameKeyword", "schemaName", 
			"tableName", "columnName", "owner", "name", "tableNames", "columnNames", 
			"collationName", "indexName", "constraintName", "primaryKey", "andOperator", 
			"orOperator", "comparisonOperator", "patternMatchingOperator", "cursorName", 
			"aExpr", "bExpr", "cExpr", "indirection", "optIndirection", "indirectionEl", 
			"sliceBound", "inExpr", "caseExpr", "whenClauseList", "whenClause", "caseDefault", 
			"caseArg", "columnref", "qualOp", "subqueryOp", "allOp", "op", "mathOperator", 
			"jsonOperator", "geometricOperator", "qualAllOp", "ascDesc", "anyOperator", 
			"windowExclusionClause", "row", "explicitRow", "implicitRow", "subType", 
			"arrayExpr", "arrayExprList", "funcArgList", "paramName", "funcArgExpr", 
			"typeList", "funcApplication", "funcName", "aexprConst", "numberConst", 
			"qualifiedName", "colId", "channelName", "typeFunctionName", "functionTable", 
			"xmlTable", "xmlTableColumnList", "xmlTableColumnEl", "xmlTableColumnOptionList", 
			"xmlTableColumnOptionEl", "xmlNamespaceList", "xmlNamespaceEl", "funcExpr", 
			"withinGroupClause", "filterClause", "functionExprWindowless", "ordinality", 
			"functionExprCommonSubexpr", "typeName", "simpleTypeName", "constTypeName", 
			"exprList", "extractList", "extractArg", "genericType", "typeModifiers", 
			"numeric", "constDatetime", "timezone", "character", "characterWithLength", 
			"characterWithoutLength", "characterClause", "optFloat", "attrs", "attrName", 
			"colLable", "bit", "bitWithLength", "bitWithoutLength", "constInterval", 
			"optInterval", "optArrayBounds", "intervalSecond", "unicodeNormalForm", 
			"trimList", "overlayList", "overlayPlacing", "substrFrom", "substrFor", 
			"positionList", "substrList", "xmlAttributes", "xmlAttributeList", "xmlAttributeEl", 
			"xmlExistsArgument", "xmlPassingMech", "documentOrContent", "xmlWhitespaceOption", 
			"xmlRootVersion", "xmlRootStandalone", "rowsFromItem", "rowsFromList", 
			"columnDefList", "tableFuncElementList", "tableFuncElement", "collateClause", 
			"anyName", "aliasClause", "nameList", "funcAliasClause", "tablesampleClause", 
			"repeatableClause", "allOrDistinct", "sortClause", "sortbyList", "sortby", 
			"nullsOrder", "distinctClause", "distinct", "overClause", "windowName", 
			"indexParams", "indexElemOptions", "indexElem", "collate", "optClass", 
			"reloptions", "reloptionList", "reloptionElem", "defArg", "funcType", 
			"dataType", "dataTypeName", "dataTypeLength", "characterSet", "ignoredIdentifier", 
			"ignoredIdentifiers", "signedIconst", "booleanOrString", "nonReservedWord", 
			"colNameKeyword", "databaseName", "roleSpec", "varName", "varList", "varValue", 
			"zoneValue", "numericOnly", "isoLevel", "columnDef", "colQualList", "colConstraint", 
			"constraintAttr", "colConstraintElem", "parenthesizedSeqOptList", "seqOptList", 
			"seqOptElem", "optColumnList", "columnElem", "columnList", "generatedWhen", 
			"noInherit", "consTableSpace", "definition", "defList", "defElem", "colLabel", 
			"keyActions", "keyDelete", "keyUpdate", "keyAction", "keyMatch", "createGenericOptions", 
			"genericOptionList", "genericOptionElem", "genericOptionArg", "genericOptionName", 
			"replicaIdentity", "operArgtypes", "funcArg", "argClass", "funcArgsList", 
			"nonReservedWordOrSconst", "fileName", "roleList", "setResetClause", 
			"setRest", "transactionModeList", "transactionModeItem", "setRestMore", 
			"encoding", "genericSet", "variableResetStmt", "resetRest", "genericReset", 
			"relationExprList", "commonFuncOptItem", "functionSetResetClause", "rowSecurityCmd", 
			"event", "typeNameList", "ifNotExists", "ifExists", "booleanValue", "hostVariable", 
			"grant", "revoke", "optionForClause", "createUser", "createOptRoleElem", 
			"alterOptRoleElem", "dropUser", "alterUser", "alterUserClauses", "alterOptRoleList", 
			"createRole", "dropRole", "alterRole", "createGroup", "reassignOwned", 
			"dropDroup", "createTable", "executeParamClause", "partitionBoundSpec", 
			"hashPartbound", "hashPartboundElem", "typedTableElementList", "typedTableElement", 
			"columnOptions", "withData", "tableSpace", "onCommitOption", "withOption", 
			"tableAccessMethodClause", "accessMethod", "createIndex", "include", 
			"indexIncludingParams", "accessMethodClause", "createDatabase", "createView", 
			"dropDatabase", "dropGroup", "createDatabaseSpecification", "createdbOptName", 
			"alterTable", "alterIndex", "dropTable", "dropTableOpt", "dropIndex", 
			"dropIndexOpt", "truncateTable", "restartSeqs", "createTableSpecification", 
			"createDefinitionClause", "createDefinition", "columnDefinition", "columnConstraint", 
			"constraintClause", "columnConstraintOption", "checkOption", "defaultExpr", 
			"sequenceOptions", "sequenceOption", "indexParameters", "action", "constraintOptionalParam", 
			"likeOption", "tableConstraint", "tableConstraintOption", "exclusionWhereClause", 
			"exclusionConstraintList", "exclusionConstraintElem", "inheritClause", 
			"partitionSpec", "partParams", "partElem", "funcExprWindowless", "partStrategy", 
			"createIndexSpecification", "concurrentlyClause", "onlyClause", "asteriskClause", 
			"alterDefinitionClause", "partitionCmd", "alterIndexDefinitionClause", 
			"indexPartitionCmd", "renameIndexSpecification", "alterIndexDependsOnExtension", 
			"alterIndexSetTableSpace", "tableNamesClause", "tableNameClause", "alterTableActions", 
			"alterTableAction", "addColumnSpecification", "dropColumnSpecification", 
			"modifyColumnSpecification", "modifyColumn", "alterColumnSetOption", 
			"attributeOptions", "attributeOption", "addConstraintSpecification", 
			"tableConstraintUsingIndex", "modifyConstraintSpecification", "validateConstraintSpecification", 
			"dropConstraintSpecification", "storageParameterWithValue", "storageParameter", 
			"renameColumnSpecification", "renameConstraint", "renameTableSpecification", 
			"indexNames", "alterDatabase", "alterDatabaseClause", "createdbOptItems", 
			"createdbOptItem", "alterTableCmds", "alterTableCmd", "columnCompression", 
			"constraintAttributeSpec", "constraintAttributeElem", "alterGenericOptions", 
			"alterGenericOptionList", "alterGenericOptionElem", "dropBehavior", "alterUsing", 
			"setData", "alterIdentityColumnOptionList", "alterIdentityColumnOption", 
			"alterColumnDefault", "alterOperator", "alterOperatorClass", "alterOperatorClassClauses", 
			"alterOperatorFamily", "alterOperatorFamilyClauses", "opclassItemList", 
			"opclassItem", "opclassPurpose", "alterOperatorClauses", "operatorDefList", 
			"operatorDefElem", "operatorDefArg", "operatorWithArgtypes", "alterAggregate", 
			"aggregateSignature", "aggrArgs", "aggrArgsList", "aggrArg", "alterAggregateDefinitionClause", 
			"alterCollation", "alterCollationClause", "alterConversion", "alterConversionClause", 
			"alterDefaultPrivileges", "defACLAction", "grantGrantOption", "granteeList", 
			"grantee", "defaclPrivilegeTarget", "privileges", "privilegeList", "privilege", 
			"defACLOptionList", "defACLOption", "schemaNameList", "alterDomain", 
			"alterDomainClause", "alterEventTrigger", "alterEventTriggerClause", 
			"tiggerName", "alterExtension", "alterExtensionClauses", "functionWithArgtypes", 
			"funcArgs", "aggregateWithArgtypes", "alterExtensionOptList", "alterExtensionOptItem", 
			"alterForeignDataWrapper", "alterForeignDataWrapperClauses", "fdwOptions", 
			"fdwOption", "handlerName", "alterGroup", "alterGroupClauses", "alterLanguage", 
			"alterLargeObject", "alterMaterializedView", "alterMaterializedViewClauses", 
			"executeStmt", "createMaterializedView", "createMvTarget", "alterPolicy", 
			"alterPolicyClauses", "refreshMatViewStmt", "alterProcedure", "alterProcedureClauses", 
			"alterfuncOptList", "alterFunction", "alterFunctionClauses", "alterPublication", 
			"alterRoutine", "alterRule", "alterSequence", "alterSequenceClauses", 
			"alterServer", "foreignServerVersion", "alterStatistics", "alterSubscription", 
			"publicationNameList", "publicationNameItem", "alterSystem", "alterTablespace", 
			"alterTextSearchConfiguration", "alterTextSearchConfigurationClauses", 
			"anyNameList", "alterTextSearchDictionary", "alterTextSearchParser", 
			"alterTextSearchTemplate", "alterTrigger", "alterType", "alterTypeClauses", 
			"alterTypeCmds", "alterTypeCmd", "typeDefList", "typeDefElem", "typeDefArg", 
			"alterUserMapping", "authIdent", "alterView", "alterViewClauses", "close", 
			"cluster", "clusterVerboseSpecification", "clusterIndexSpecification", 
			"clusterVerboseOptionList", "clusterVerboseOption", "comment", "commentClauses", 
			"objectTypeNameOnAnyName", "objectTypeName", "dropTypeName", "objectTypeAnyName", 
			"commentText", "createAccessMethod", "createAggregate", "oldAggrDefinition", 
			"oldAggrList", "oldAggrElem", "createCast", "castContext", "createCollation", 
			"createConversion", "createDomain", "createEventTrigger", "eventTriggerWhenList", 
			"eventTriggerWhenItem", "eventTriggerValueList", "createExtension", "createExtensionOptList", 
			"createExtensionOptItem", "createForeignDataWrapper", "createForeignTable", 
			"createForeignTableClauses", "tableElementList", "tableElement", "tableLikeClause", 
			"tableLikeOptionList", "tableLikeOption", "createFunction", "tableFuncColumnList", 
			"tableFuncColumn", "createfuncOptList", "createfuncOptItem", "transformTypeList", 
			"funcAs", "funcReturn", "funcArgsWithDefaults", "funcArgsWithDefaultsList", 
			"funcArgWithDefault", "createLanguage", "transformElementList", "validatorClause", 
			"createPolicy", "createProcedure", "createPublication", "publicationForTables", 
			"createRule", "ruleActionList", "ruleActionStmt", "ruleActionMulti", 
			"createTrigger", "triggerEvents", "triggerOneEvent", "triggerActionTime", 
			"triggerFuncArgs", "triggerFuncArg", "triggerWhen", "triggerForSpec", 
			"triggerReferencing", "triggerTransitions", "triggerTransition", "transitionRelName", 
			"transitionRowOrTable", "transitionOldOrNew", "createSequence", "tempOption", 
			"createServer", "createStatistics", "createSubscription", "createTablespace", 
			"createTextSearch", "createTransform", "createType", "createTypeClauses", 
			"enumValList", "createUserMapping", "discard", "dropAccessMethod", "dropAggregate", 
			"aggregateWithArgtypesList", "dropCast", "dropCollation", "dropConversion", 
			"dropDomain", "dropEventTrigger", "dropExtension", "dropForeignDataWrapper", 
			"dropForeignTable", "dropFunction", "functionWithArgtypesList", "dropLanguage", 
			"dropMaterializedView", "dropOperator", "operatorWithArgtypesList", "dropOperatorClass", 
			"dropOperatorFamily", "dropOwned", "dropPolicy", "dropProcedure", "dropPublication", 
			"dropRoutine", "dropRule", "dropSequence", "dropServer", "dropStatistics", 
			"dropSubscription", "dropTablespace", "dropTextSearch", "dropTransform", 
			"dropTrigger", "dropType", "dropUserMapping", "dropView", "importForeignSchema", 
			"importQualification", "importQualificationType", "declare", "cursorOption", 
			"open", "usingValueClause", "value", "usingSqlDescriptorClause", "descriptorName", 
			"move", "fetch", "listen", "unlisten", "notifyStmt", "direction", "prepare", 
			"reindex", "reIndexClauses", "reindexOptionList", "reindexOptionElem", 
			"reindexTargetMultitable", "reindexTargetType", "deallocate", "prepTypeClause", 
			"refreshMaterializedView", "alterForeignTable", "alterForeignTableClauses", 
			"createOperator", "createOperatorClass", "createOperatorFamily", "createSchema", 
			"createSchemaClauses", "schemaEltList", "schemaStmt", "securityLabelStmt", 
			"securityLabel", "securityLabelClausces", "privilegeClause", "roleClause", 
			"privilegeTypes", "onObjectClause", "numericOnlyList", "privilegeLevel", 
			"routineName", "privilegeType", "alterSchema", "dropSchema", "show", 
			"set", "runtimeScope", "timeZoneClause", "configurationParameterClause", 
			"resetParameter", "explain", "explainableStmt", "explainOptionList", 
			"explainOptionElem", "explainOptionArg", "explainOptionName", "analyzeKeyword", 
			"analyzeTable", "vacuumRelationList", "vacuumRelation", "vacAnalyzeOptionList", 
			"vacAnalyzeOptionElem", "vacAnalyzeOptionArg", "vacAnalyzeOptionName", 
			"load", "vacuum", "emptyStatement", "call", "callArguments", "callArgument", 
			"positionalNotation", "namedNotation"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, "'&&'", "'||'", "'!'", "'~'", "'|'", "'&'", "'<<'", "'>>'", 
			"'^'", "'%'", "':'", "'+'", "'-'", "'*'", "'/'", "'\\'", "'.'", "'.*'", 
			"'<=>'", "'=='", "'='", "':='", null, "'>'", "'>='", "'<'", "'<='", "'#'", 
			"'('", "')'", "'{'", "'}'", "'['", "']'", "','", "'\"'", "'''", "'`'", 
			"'?'", "'$'", "'@'", "';'", "'~~'", "'!~~'", "'::'", "'~~*'", "'!~~*'", 
			null, "'->'", "'->>'", "'#>'", "'#>>'", "'@>'", "'<@'", "'?&'", "'#-'", 
			"'@?'", "'@@'", "'@-@'", "'<->'", "'&<'", "'&>'", "'<<|'", "'|>>'", "'&<|'", 
			"'|&>'", "'<^'", "'>^'", "'?#'", "'?-|'", "'~='", null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, "'DO NOT MATCH ANY THING, JUST FOR GENERATOR'", 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, "'Default does not match anything'", "'skip'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "BEGIN_DOLLAR_STRING_CONSTANT", "AND_", "OR_", "NOT_", "TILDE_", 
			"VERTICAL_BAR_", "AMPERSAND_", "SIGNED_LEFT_SHIFT_", "SIGNED_RIGHT_SHIFT_", 
			"CARET_", "MOD_", "COLON_", "PLUS_", "MINUS_", "ASTERISK_", "SLASH_", 
			"BACKSLASH_", "DOT_", "DOT_ASTERISK_", "SAFE_EQ_", "DEQ_", "EQ_", "CQ_", 
			"NEQ_", "GT_", "GTE_", "LT_", "LTE_", "POUND_", "LP_", "RP_", "LBE_", 
			"RBE_", "LBT_", "RBT_", "COMMA_", "DQ_", "SQ_", "BQ_", "QUESTION_", "DOLLAR_", 
			"AT_", "SEMI_", "TILDE_TILDE_", "NOT_TILDE_TILDE_", "TYPE_CAST_", "ILIKE_", 
			"NOT_ILIKE_", "UNICODE_ESCAPE", "JSON_EXTRACT_", "JSON_EXTRACT_TEXT_", 
			"JSON_PATH_EXTRACT_", "JSON_PATH_EXTRACT_TEXT_", "JSONB_CONTAIN_RIGHT_", 
			"JSONB_CONTAIN_LEFT_", "JSONB_CONTAIN_ALL_TOP_KEY_", "JSONB_PATH_DELETE_", 
			"JSONB_PATH_CONTAIN_ANY_VALUE_", "JSONB_PATH_PREDICATE_CHECK_", "GEOMETRIC_LENGTH_", 
			"GEOMETRIC_DISTANCE_", "GEOMETRIC_EXTEND_RIGHT_", "GEOMETRIC_EXTEND_LEFT_", 
			"GEOMETRIC_STRICT_BELOW_", "GEOMETRIC_STRICT_ABOVE_", "GEOMETRIC_EXTEND_ABOVE_", 
			"GEOMETRIC_EXTEND_BELOW_", "GEOMETRIC_BELOW_", "GEOMETRIC_ABOVE_", "GEOMETRIC_INTERSECT_", 
			"GEOMETRIC_PERPENDICULAR_", "GEOMETRIC_SAME_AS_", "ADMIN", "BINARY", 
			"ESCAPE", "EXISTS", "EXCLUDE", "MOD", "PARTITION", "ROW", "UNKNOWN", 
			"ALWAYS", "CASCADE", "CHECK", "GENERATED", "ISOLATION", "LEVEL", "NO", 
			"OPTION", "PRIVILEGES", "READ", "REFERENCES", "ROLE", "ROWS", "START", 
			"TRANSACTION", "USER", "ACTION", "CACHE", "CHARACTERISTICS", "CLUSTER", 
			"COLLATE", "COMMENTS", "COMPRESSION", "CONCURRENTLY", "FINALIZE", "CONNECT", 
			"CONSTRAINTS", "CURRENT_TIMESTAMP", "CYCLE", "DATA", "DATABASE", "DEFAULTS", 
			"DEFERRABLE", "DEFERRED", "DEPENDS", "DOMAIN", "EXCLUDING", "EXECUTE", 
			"EXTENDED", "EXTENSION", "EXTERNAL", "EXTRACT", "FILTER", "FIRST", "FOLLOWING", 
			"FORCE", "GLOBAL", "IDENTITY", "IMMEDIATE", "INCLUDING", "INCREMENT", 
			"INDEXES", "INHERIT", "INHERITS", "INITIALLY", "INCLUDE", "LANGUAGE", 
			"LARGE", "LAST", "LOGGED", "MAIN", "MATCH", "MAXVALUE", "MINVALUE", "NOTHING", 
			"NULLS", "OBJECT", "OIDS", "ONLY", "OVER", "OWNED", "OWNER", "PARTIAL", 
			"PLAIN", "PRECEDING", "RANGE", "RENAME", "REPLICA", "RESET", "RESTART", 
			"RESTRICT", "ROUTINE", "RULE", "SECURITY", "SEQUENCE", "SESSION", "SESSION_USER", 
			"SHOW", "SIMPLE", "STATISTICS", "STORAGE", "TABLESPACE", "TEMP", "TEMPORARY", 
			"UNBOUNDED", "UNLOGGED", "USAGE", "VALID", "VALIDATE", "WITHIN", "WITHOUT", 
			"ZONE", "OF", "UESCAPE", "GROUPS", "RECURSIVE", "INT", "INT2", "INT4", 
			"INT8", "FLOAT", "FLOAT4", "FLOAT8", "SMALLSERIAL", "SERIAL", "BIGSERIAL", 
			"VARCHAR", "BYTEA", "ENUM", "POINT", "LINE", "LSEG", "BOX", "PATH", "POLYGON", 
			"CIRCLE", "CIDR", "INET", "MACADDR", "MACADDR8", "BIT", "VARBIT", "TSVECTOR", 
			"TSQUERY", "XML", "JSON", "INT4RANGE", "INT8RANGE", "NUMRANGE", "TSRANGE", 
			"TSTZRANGE", "DATERANGE", "TABLESAMPLE", "ORDINALITY", "CURRENT_ROLE", 
			"CURRENT_CATALOG", "CURRENT_SCHEMA", "NORMALIZE", "OVERLAY", "XMLCONCAT", 
			"XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLPARSE", "XMLPI", "XMLROOT", 
			"XMLSERIALIZE", "TREAT", "SETOF", "NFC", "NFD", "NFKC", "NFKD", "XMLATTRIBUTES", 
			"REF", "PASSING", "VERSION", "YES", "STANDALONE", "GREATEST", "LEAST", 
			"MATERIALIZED", "OPERATOR", "SHARE", "ROLLUP", "ILIKE", "SIMILAR", "ISNULL", 
			"NOTNULL", "SYMMETRIC", "DOCUMENT", "NORMALIZED", "ASYMMETRIC", "VARIADIC", 
			"NOWAIT", "LOCKED", "XMLTABLE", "COLUMNS", "CONTENT", "STRIP", "WHITESPACE", 
			"XMLNAMESPACES", "PLACING", "RETURNING", "LATERAL", "NONE", "ANALYSE", 
			"ANALYZE", "CONFLICT", "OVERRIDING", "SYSTEM", "ABORT", "ABSOLUTE", "ACCESS", 
			"AFTER", "AGGREGATE", "ALSO", "ATTACH", "ATTRIBUTE", "BACKWARD", "BEFORE", 
			"ASSERTION", "ASSIGNMENT", "CONTINUE", "CONVERSION", "COPY", "COST", 
			"CSV", "CALLED", "CATALOG", "CHAIN", "CHECKPOINT", "CLASS", "CONFIGURATION", 
			"COMMENT", "DETACH", "DICTIONARY", "EXPRESSION", "INSENSITIVE", "DISCARD", 
			"OFF", "INSTEAD", "EXPLAIN", "INPUT", "INLINE", "PARALLEL", "LEAKPROOF", 
			"COMMITTED", "ENCODING", "IMPLICIT", "DELIMITER", "CURSOR", "EACH", "EVENT", 
			"DEALLOCATE", "CONNECTION", "DECLARE", "FAMILY", "FORWARD", "EXCLUSIVE", 
			"FUNCTIONS", "LOCATION", "LABEL", "DELIMITERS", "HANDLER", "HEADER", 
			"IMMUTABLE", "GRANTED", "HOLD", "MAPPING", "OLD", "METHOD", "LOAD", "LISTEN", 
			"MODE", "MOVE", "PROCEDURAL", "PARSER", "PROCEDURES", "ENCRYPTED", "PUBLICATION", 
			"PROGRAM", "REFERENCING", "PLANS", "REINDEX", "PRIOR", "PASSWORD", "RELATIVE", 
			"QUOTE", "ROUTINES", "REPLACE", "SNAPSHOT", "REFRESH", "PREPARE", "OPTIONS", 
			"IMPORT", "INVOKER", "NEW", "PREPARED", "SCROLL", "SEQUENCES", "SYSID", 
			"REASSIGN", "SERVER", "SUBSCRIPTION", "SEARCH", "SCHEMAS", "RECHECK", 
			"POLICY", "NOTIFY", "LOCK", "RELEASE", "SERIALIZABLE", "RETURNS", "STATEMENT", 
			"STDIN", "STDOUT", "TABLES", "SUPPORT", "STABLE", "TEMPLATE", "UNENCRYPTED", 
			"VIEWS", "UNCOMMITTED", "TRANSFORM", "UNLISTEN", "TRUSTED", "VALIDATOR", 
			"UNTIL", "VACUUM", "VOLATILE", "STORED", "WRITE", "STRICT", "TYPES", 
			"WRAPPER", "WORK", "FREEZE", "AUTHORIZATION", "VERBOSE", "PARAM", "OUT", 
			"INOUT", "FORMAT", "FORCE_QUOTE", "FORCE_NOT_NULL", "FORCE_NULL", "SUPERUSER", 
			"NOSUPERUSER", "CREATEDB", "NOCREATEDB", "CREATEROLE", "NOCREATEROLE", 
			"NOINHERIT", "LOGIN", "NOLOGIN", "REPLICATION", "NOREPLICATION", "BYPASSRLS", 
			"NOBYPASSRLS", "ASENSITIVE", "DESCRIPTOR", "FOR_GENERATOR", "WS", "SELECT", 
			"INSERT", "UPDATE", "DELETE", "CREATE", "ALTER", "DROP", "TRUNCATE", 
			"SCHEMA", "GRANT", "REVOKE", "ADD", "SET", "TABLE", "COLUMN", "INDEX", 
			"CONSTRAINT", "PRIMARY", "UNIQUE", "FOREIGN", "KEY", "POSITION", "PRECISION", 
			"FUNCTION", "TRIGGER", "PROCEDURE", "VIEW", "INTO", "VALUES", "WITH", 
			"UNION", "DISTINCT", "CASE", "WHEN", "CAST", "TRIM", "SUBSTRING", "FROM", 
			"NATURAL", "JOIN", "FULL", "INNER", "OUTER", "LEFT", "RIGHT", "CROSS", 
			"USING", "WHERE", "AS", "ON", "IF", "ELSE", "THEN", "FOR", "TO", "AND", 
			"OR", "IS", "NOT", "NULL", "TRUE", "FALSE", "BETWEEN", "IN", "ALL", "ANY", 
			"LIKE", "ORDER", "GROUP", "BY", "ASC", "DESC", "HAVING", "LIMIT", "OFFSET", 
			"BEGIN", "COMMIT", "ROLLBACK", "SAVEPOINT", "BOOLEAN", "DOUBLE", "CHAR", 
			"CHARACTER", "ARRAY", "INTERVAL", "DATE", "TIME", "TIMESTAMP", "LOCALTIME", 
			"LOCALTIMESTAMP", "YEAR", "QUARTER", "MONTH", "WEEK", "DAY", "HOUR", 
			"MINUTE", "SECOND", "MICROSECOND", "DEFAULT", "CURRENT", "ENABLE", "DISABLE", 
			"CALL", "INSTANCE", "PRESERVE", "DO", "DEFINER", "CURRENT_USER", "SQL", 
			"CASCADED", "LOCAL", "CLOSE", "OPEN", "NEXT", "NAME", "COLLATION", "NAMES", 
			"INTEGER", "REAL", "DECIMAL", "TYPE", "SMALLINT", "BIGINT", "NUMERIC", 
			"TEXT", "REPEATABLE", "CURRENT_DATE", "CURRENT_TIME", "NULLIF", "VARYING", 
			"NATIONAL", "NCHAR", "VALUE", "BOTH", "LEADING", "TRAILING", "COALESCE", 
			"INTERSECT", "EXCEPT", "TIES", "FETCH", "CUBE", "GROUPING", "SETS", "WINDOW", 
			"OTHERS", "OVERLAPS", "SOME", "AT", "DEC", "END", "BLOCK_COMMENT", "INLINE_COMMENT", 
			"IDENTIFIER_", "STRING_", "NUMBER_", "HEX_DIGIT_", "BIT_NUM_", "DEFAULT_DOES_NOT_MATCH_ANYTHING", 
			"APOSTROPHE_SKIP", "DOLLAR_TEXT", "END_DOLLAR_STRING_CONSTANT", "PUBLIC", 
			"RECEIVE", "SEND", "TYPMOD_IN", "TYPMOD_OUT", "SUBSCRIPT"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "PostgreSQLStatementParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public PostgreSQLStatementParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExecuteContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(PostgreSQLStatementParser.EOF, 0); }
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public InsertContext insert() {
			return getRuleContext(InsertContext.class,0);
		}
		public UpdateContext update() {
			return getRuleContext(UpdateContext.class,0);
		}
		public DeleteContext delete() {
			return getRuleContext(DeleteContext.class,0);
		}
		public CreateIndexContext createIndex() {
			return getRuleContext(CreateIndexContext.class,0);
		}
		public AlterIndexContext alterIndex() {
			return getRuleContext(AlterIndexContext.class,0);
		}
		public DropIndexContext dropIndex() {
			return getRuleContext(DropIndexContext.class,0);
		}
		public CreateTableContext createTable() {
			return getRuleContext(CreateTableContext.class,0);
		}
		public AlterTableContext alterTable() {
			return getRuleContext(AlterTableContext.class,0);
		}
		public DropTableContext dropTable() {
			return getRuleContext(DropTableContext.class,0);
		}
		public TruncateTableContext truncateTable() {
			return getRuleContext(TruncateTableContext.class,0);
		}
		public SetTransactionContext setTransaction() {
			return getRuleContext(SetTransactionContext.class,0);
		}
		public BeginTransactionContext beginTransaction() {
			return getRuleContext(BeginTransactionContext.class,0);
		}
		public StartTransactionContext startTransaction() {
			return getRuleContext(StartTransactionContext.class,0);
		}
		public EndContext end() {
			return getRuleContext(EndContext.class,0);
		}
		public CommitContext commit() {
			return getRuleContext(CommitContext.class,0);
		}
		public CommitPreparedContext commitPrepared() {
			return getRuleContext(CommitPreparedContext.class,0);
		}
		public RollbackContext rollback() {
			return getRuleContext(RollbackContext.class,0);
		}
		public RollbackPreparedContext rollbackPrepared() {
			return getRuleContext(RollbackPreparedContext.class,0);
		}
		public AbortContext abort() {
			return getRuleContext(AbortContext.class,0);
		}
		public SavepointContext savepoint() {
			return getRuleContext(SavepointContext.class,0);
		}
		public ReleaseSavepointContext releaseSavepoint() {
			return getRuleContext(ReleaseSavepointContext.class,0);
		}
		public RollbackToSavepointContext rollbackToSavepoint() {
			return getRuleContext(RollbackToSavepointContext.class,0);
		}
		public GrantContext grant() {
			return getRuleContext(GrantContext.class,0);
		}
		public RevokeContext revoke() {
			return getRuleContext(RevokeContext.class,0);
		}
		public CreateUserContext createUser() {
			return getRuleContext(CreateUserContext.class,0);
		}
		public DropUserContext dropUser() {
			return getRuleContext(DropUserContext.class,0);
		}
		public AlterUserContext alterUser() {
			return getRuleContext(AlterUserContext.class,0);
		}
		public CreateRoleContext createRole() {
			return getRuleContext(CreateRoleContext.class,0);
		}
		public DropRoleContext dropRole() {
			return getRuleContext(DropRoleContext.class,0);
		}
		public AlterRoleContext alterRole() {
			return getRuleContext(AlterRoleContext.class,0);
		}
		public ShowContext show() {
			return getRuleContext(ShowContext.class,0);
		}
		public SetContext set() {
			return getRuleContext(SetContext.class,0);
		}
		public ResetParameterContext resetParameter() {
			return getRuleContext(ResetParameterContext.class,0);
		}
		public CallContext call() {
			return getRuleContext(CallContext.class,0);
		}
		public AlterAggregateContext alterAggregate() {
			return getRuleContext(AlterAggregateContext.class,0);
		}
		public AlterCollationContext alterCollation() {
			return getRuleContext(AlterCollationContext.class,0);
		}
		public AlterFunctionContext alterFunction() {
			return getRuleContext(AlterFunctionContext.class,0);
		}
		public AlterDatabaseContext alterDatabase() {
			return getRuleContext(AlterDatabaseContext.class,0);
		}
		public AlterDomainContext alterDomain() {
			return getRuleContext(AlterDomainContext.class,0);
		}
		public AlterDefaultPrivilegesContext alterDefaultPrivileges() {
			return getRuleContext(AlterDefaultPrivilegesContext.class,0);
		}
		public AlterForeignDataWrapperContext alterForeignDataWrapper() {
			return getRuleContext(AlterForeignDataWrapperContext.class,0);
		}
		public AlterForeignTableContext alterForeignTable() {
			return getRuleContext(AlterForeignTableContext.class,0);
		}
		public AlterGroupContext alterGroup() {
			return getRuleContext(AlterGroupContext.class,0);
		}
		public AlterMaterializedViewContext alterMaterializedView() {
			return getRuleContext(AlterMaterializedViewContext.class,0);
		}
		public AlterProcedureContext alterProcedure() {
			return getRuleContext(AlterProcedureContext.class,0);
		}
		public AlterServerContext alterServer() {
			return getRuleContext(AlterServerContext.class,0);
		}
		public AlterSequenceContext alterSequence() {
			return getRuleContext(AlterSequenceContext.class,0);
		}
		public AlterViewContext alterView() {
			return getRuleContext(AlterViewContext.class,0);
		}
		public CommentContext comment() {
			return getRuleContext(CommentContext.class,0);
		}
		public CreateDatabaseContext createDatabase() {
			return getRuleContext(CreateDatabaseContext.class,0);
		}
		public CreateFunctionContext createFunction() {
			return getRuleContext(CreateFunctionContext.class,0);
		}
		public CreateProcedureContext createProcedure() {
			return getRuleContext(CreateProcedureContext.class,0);
		}
		public CreateServerContext createServer() {
			return getRuleContext(CreateServerContext.class,0);
		}
		public CreateTriggerContext createTrigger() {
			return getRuleContext(CreateTriggerContext.class,0);
		}
		public CreateViewContext createView() {
			return getRuleContext(CreateViewContext.class,0);
		}
		public CreateSequenceContext createSequence() {
			return getRuleContext(CreateSequenceContext.class,0);
		}
		public CreateDomainContext createDomain() {
			return getRuleContext(CreateDomainContext.class,0);
		}
		public CreateRuleContext createRule() {
			return getRuleContext(CreateRuleContext.class,0);
		}
		public CreateSchemaContext createSchema() {
			return getRuleContext(CreateSchemaContext.class,0);
		}
		public AlterSchemaContext alterSchema() {
			return getRuleContext(AlterSchemaContext.class,0);
		}
		public DropSchemaContext dropSchema() {
			return getRuleContext(DropSchemaContext.class,0);
		}
		public CreateTypeContext createType() {
			return getRuleContext(CreateTypeContext.class,0);
		}
		public CreateTextSearchContext createTextSearch() {
			return getRuleContext(CreateTextSearchContext.class,0);
		}
		public DeclareContext declare() {
			return getRuleContext(DeclareContext.class,0);
		}
		public DiscardContext discard() {
			return getRuleContext(DiscardContext.class,0);
		}
		public DropDatabaseContext dropDatabase() {
			return getRuleContext(DropDatabaseContext.class,0);
		}
		public DropFunctionContext dropFunction() {
			return getRuleContext(DropFunctionContext.class,0);
		}
		public DropProcedureContext dropProcedure() {
			return getRuleContext(DropProcedureContext.class,0);
		}
		public DropServerContext dropServer() {
			return getRuleContext(DropServerContext.class,0);
		}
		public DropTriggerContext dropTrigger() {
			return getRuleContext(DropTriggerContext.class,0);
		}
		public DropViewContext dropView() {
			return getRuleContext(DropViewContext.class,0);
		}
		public DropSequenceContext dropSequence() {
			return getRuleContext(DropSequenceContext.class,0);
		}
		public DropDomainContext dropDomain() {
			return getRuleContext(DropDomainContext.class,0);
		}
		public VacuumContext vacuum() {
			return getRuleContext(VacuumContext.class,0);
		}
		public PrepareContext prepare() {
			return getRuleContext(PrepareContext.class,0);
		}
		public ExecuteStmtContext executeStmt() {
			return getRuleContext(ExecuteStmtContext.class,0);
		}
		public DeallocateContext deallocate() {
			return getRuleContext(DeallocateContext.class,0);
		}
		public ExplainContext explain() {
			return getRuleContext(ExplainContext.class,0);
		}
		public AnalyzeTableContext analyzeTable() {
			return getRuleContext(AnalyzeTableContext.class,0);
		}
		public ListenContext listen() {
			return getRuleContext(ListenContext.class,0);
		}
		public NotifyStmtContext notifyStmt() {
			return getRuleContext(NotifyStmtContext.class,0);
		}
		public UnlistenContext unlisten() {
			return getRuleContext(UnlistenContext.class,0);
		}
		public LoadContext load() {
			return getRuleContext(LoadContext.class,0);
		}
		public LockContext lock() {
			return getRuleContext(LockContext.class,0);
		}
		public CreateTablespaceContext createTablespace() {
			return getRuleContext(CreateTablespaceContext.class,0);
		}
		public AlterTablespaceContext alterTablespace() {
			return getRuleContext(AlterTablespaceContext.class,0);
		}
		public DropTablespaceContext dropTablespace() {
			return getRuleContext(DropTablespaceContext.class,0);
		}
		public SetConstraintsContext setConstraints() {
			return getRuleContext(SetConstraintsContext.class,0);
		}
		public CopyContext copy() {
			return getRuleContext(CopyContext.class,0);
		}
		public CreateLanguageContext createLanguage() {
			return getRuleContext(CreateLanguageContext.class,0);
		}
		public AlterLanguageContext alterLanguage() {
			return getRuleContext(AlterLanguageContext.class,0);
		}
		public DropLanguageContext dropLanguage() {
			return getRuleContext(DropLanguageContext.class,0);
		}
		public CreateConversionContext createConversion() {
			return getRuleContext(CreateConversionContext.class,0);
		}
		public AlterConversionContext alterConversion() {
			return getRuleContext(AlterConversionContext.class,0);
		}
		public DropConversionContext dropConversion() {
			return getRuleContext(DropConversionContext.class,0);
		}
		public AlterTextSearchDictionaryContext alterTextSearchDictionary() {
			return getRuleContext(AlterTextSearchDictionaryContext.class,0);
		}
		public AlterTextSearchTemplateContext alterTextSearchTemplate() {
			return getRuleContext(AlterTextSearchTemplateContext.class,0);
		}
		public AlterTextSearchParserContext alterTextSearchParser() {
			return getRuleContext(AlterTextSearchParserContext.class,0);
		}
		public CreateExtensionContext createExtension() {
			return getRuleContext(CreateExtensionContext.class,0);
		}
		public AlterExtensionContext alterExtension() {
			return getRuleContext(AlterExtensionContext.class,0);
		}
		public DropExtensionContext dropExtension() {
			return getRuleContext(DropExtensionContext.class,0);
		}
		public DropPolicyContext dropPolicy() {
			return getRuleContext(DropPolicyContext.class,0);
		}
		public DropOwnedContext dropOwned() {
			return getRuleContext(DropOwnedContext.class,0);
		}
		public DropForeignTableContext dropForeignTable() {
			return getRuleContext(DropForeignTableContext.class,0);
		}
		public DropOperatorContext dropOperator() {
			return getRuleContext(DropOperatorContext.class,0);
		}
		public DropMaterializedViewContext dropMaterializedView() {
			return getRuleContext(DropMaterializedViewContext.class,0);
		}
		public DropGroupContext dropGroup() {
			return getRuleContext(DropGroupContext.class,0);
		}
		public DropCastContext dropCast() {
			return getRuleContext(DropCastContext.class,0);
		}
		public DropEventTriggerContext dropEventTrigger() {
			return getRuleContext(DropEventTriggerContext.class,0);
		}
		public DropAggregateContext dropAggregate() {
			return getRuleContext(DropAggregateContext.class,0);
		}
		public DropCollationContext dropCollation() {
			return getRuleContext(DropCollationContext.class,0);
		}
		public DropForeignDataWrapperContext dropForeignDataWrapper() {
			return getRuleContext(DropForeignDataWrapperContext.class,0);
		}
		public DropRuleContext dropRule() {
			return getRuleContext(DropRuleContext.class,0);
		}
		public DropTypeContext dropType() {
			return getRuleContext(DropTypeContext.class,0);
		}
		public DropRoutineContext dropRoutine() {
			return getRuleContext(DropRoutineContext.class,0);
		}
		public DropStatisticsContext dropStatistics() {
			return getRuleContext(DropStatisticsContext.class,0);
		}
		public DropPublicationContext dropPublication() {
			return getRuleContext(DropPublicationContext.class,0);
		}
		public DropOperatorClassContext dropOperatorClass() {
			return getRuleContext(DropOperatorClassContext.class,0);
		}
		public DropSubscriptionContext dropSubscription() {
			return getRuleContext(DropSubscriptionContext.class,0);
		}
		public DropTextSearchContext dropTextSearch() {
			return getRuleContext(DropTextSearchContext.class,0);
		}
		public DropOperatorFamilyContext dropOperatorFamily() {
			return getRuleContext(DropOperatorFamilyContext.class,0);
		}
		public DropAccessMethodContext dropAccessMethod() {
			return getRuleContext(DropAccessMethodContext.class,0);
		}
		public AlterPolicyContext alterPolicy() {
			return getRuleContext(AlterPolicyContext.class,0);
		}
		public CheckpointContext checkpoint() {
			return getRuleContext(CheckpointContext.class,0);
		}
		public FetchContext fetch() {
			return getRuleContext(FetchContext.class,0);
		}
		public MoveContext move() {
			return getRuleContext(MoveContext.class,0);
		}
		public CloseContext close() {
			return getRuleContext(CloseContext.class,0);
		}
		public ClusterContext cluster() {
			return getRuleContext(ClusterContext.class,0);
		}
		public AlterOperatorContext alterOperator() {
			return getRuleContext(AlterOperatorContext.class,0);
		}
		public CreateAccessMethodContext createAccessMethod() {
			return getRuleContext(CreateAccessMethodContext.class,0);
		}
		public AlterPublicationContext alterPublication() {
			return getRuleContext(AlterPublicationContext.class,0);
		}
		public CreateAggregateContext createAggregate() {
			return getRuleContext(CreateAggregateContext.class,0);
		}
		public CreateCastContext createCast() {
			return getRuleContext(CreateCastContext.class,0);
		}
		public AlterRoutineContext alterRoutine() {
			return getRuleContext(AlterRoutineContext.class,0);
		}
		public AlterRuleContext alterRule() {
			return getRuleContext(AlterRuleContext.class,0);
		}
		public CreateCollationContext createCollation() {
			return getRuleContext(CreateCollationContext.class,0);
		}
		public PrepareTransactionContext prepareTransaction() {
			return getRuleContext(PrepareTransactionContext.class,0);
		}
		public ReassignOwnedContext reassignOwned() {
			return getRuleContext(ReassignOwnedContext.class,0);
		}
		public RefreshMatViewStmtContext refreshMatViewStmt() {
			return getRuleContext(RefreshMatViewStmtContext.class,0);
		}
		public ReindexContext reindex() {
			return getRuleContext(ReindexContext.class,0);
		}
		public SecurityLabelStmtContext securityLabelStmt() {
			return getRuleContext(SecurityLabelStmtContext.class,0);
		}
		public CreateEventTriggerContext createEventTrigger() {
			return getRuleContext(CreateEventTriggerContext.class,0);
		}
		public CreateForeignDataWrapperContext createForeignDataWrapper() {
			return getRuleContext(CreateForeignDataWrapperContext.class,0);
		}
		public CreateForeignTableContext createForeignTable() {
			return getRuleContext(CreateForeignTableContext.class,0);
		}
		public AlterStatisticsContext alterStatistics() {
			return getRuleContext(AlterStatisticsContext.class,0);
		}
		public CreateGroupContext createGroup() {
			return getRuleContext(CreateGroupContext.class,0);
		}
		public AlterSubscriptionContext alterSubscription() {
			return getRuleContext(AlterSubscriptionContext.class,0);
		}
		public CreateMaterializedViewContext createMaterializedView() {
			return getRuleContext(CreateMaterializedViewContext.class,0);
		}
		public CreateOperatorContext createOperator() {
			return getRuleContext(CreateOperatorContext.class,0);
		}
		public AlterTextSearchConfigurationContext alterTextSearchConfiguration() {
			return getRuleContext(AlterTextSearchConfigurationContext.class,0);
		}
		public CreatePolicyContext createPolicy() {
			return getRuleContext(CreatePolicyContext.class,0);
		}
		public AlterTypeContext alterType() {
			return getRuleContext(AlterTypeContext.class,0);
		}
		public AlterTriggerContext alterTrigger() {
			return getRuleContext(AlterTriggerContext.class,0);
		}
		public CreatePublicationContext createPublication() {
			return getRuleContext(CreatePublicationContext.class,0);
		}
		public EmptyStatementContext emptyStatement() {
			return getRuleContext(EmptyStatementContext.class,0);
		}
		public OpenContext open() {
			return getRuleContext(OpenContext.class,0);
		}
		public TerminalNode SEMI_() { return getToken(PostgreSQLStatementParser.SEMI_, 0); }
		public ExecuteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterExecute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitExecute(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitExecute(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteContext execute() throws RecognitionException {
		ExecuteContext _localctx = new ExecuteContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_execute);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1684);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				setState(1526);
				select();
				}
				break;
			case 2:
				{
				setState(1527);
				insert();
				}
				break;
			case 3:
				{
				setState(1528);
				update();
				}
				break;
			case 4:
				{
				setState(1529);
				delete();
				}
				break;
			case 5:
				{
				setState(1530);
				createIndex();
				}
				break;
			case 6:
				{
				setState(1531);
				alterIndex();
				}
				break;
			case 7:
				{
				setState(1532);
				dropIndex();
				}
				break;
			case 8:
				{
				setState(1533);
				createTable();
				}
				break;
			case 9:
				{
				setState(1534);
				alterTable();
				}
				break;
			case 10:
				{
				setState(1535);
				dropTable();
				}
				break;
			case 11:
				{
				setState(1536);
				truncateTable();
				}
				break;
			case 12:
				{
				setState(1537);
				setTransaction();
				}
				break;
			case 13:
				{
				setState(1538);
				beginTransaction();
				}
				break;
			case 14:
				{
				setState(1539);
				startTransaction();
				}
				break;
			case 15:
				{
				setState(1540);
				end();
				}
				break;
			case 16:
				{
				setState(1541);
				commit();
				}
				break;
			case 17:
				{
				setState(1542);
				commitPrepared();
				}
				break;
			case 18:
				{
				setState(1543);
				rollback();
				}
				break;
			case 19:
				{
				setState(1544);
				rollbackPrepared();
				}
				break;
			case 20:
				{
				setState(1545);
				abort();
				}
				break;
			case 21:
				{
				setState(1546);
				savepoint();
				}
				break;
			case 22:
				{
				setState(1547);
				releaseSavepoint();
				}
				break;
			case 23:
				{
				setState(1548);
				rollbackToSavepoint();
				}
				break;
			case 24:
				{
				setState(1549);
				grant();
				}
				break;
			case 25:
				{
				setState(1550);
				revoke();
				}
				break;
			case 26:
				{
				setState(1551);
				createUser();
				}
				break;
			case 27:
				{
				setState(1552);
				dropUser();
				}
				break;
			case 28:
				{
				setState(1553);
				alterUser();
				}
				break;
			case 29:
				{
				setState(1554);
				createRole();
				}
				break;
			case 30:
				{
				setState(1555);
				dropRole();
				}
				break;
			case 31:
				{
				setState(1556);
				alterRole();
				}
				break;
			case 32:
				{
				setState(1557);
				show();
				}
				break;
			case 33:
				{
				setState(1558);
				set();
				}
				break;
			case 34:
				{
				setState(1559);
				resetParameter();
				}
				break;
			case 35:
				{
				setState(1560);
				call();
				}
				break;
			case 36:
				{
				setState(1561);
				alterAggregate();
				}
				break;
			case 37:
				{
				setState(1562);
				alterCollation();
				}
				break;
			case 38:
				{
				setState(1563);
				alterFunction();
				}
				break;
			case 39:
				{
				setState(1564);
				alterDatabase();
				}
				break;
			case 40:
				{
				setState(1565);
				alterDomain();
				}
				break;
			case 41:
				{
				setState(1566);
				alterDefaultPrivileges();
				}
				break;
			case 42:
				{
				setState(1567);
				alterForeignDataWrapper();
				}
				break;
			case 43:
				{
				setState(1568);
				alterForeignTable();
				}
				break;
			case 44:
				{
				setState(1569);
				alterGroup();
				}
				break;
			case 45:
				{
				setState(1570);
				alterMaterializedView();
				}
				break;
			case 46:
				{
				setState(1571);
				alterProcedure();
				}
				break;
			case 47:
				{
				setState(1572);
				alterServer();
				}
				break;
			case 48:
				{
				setState(1573);
				alterSequence();
				}
				break;
			case 49:
				{
				setState(1574);
				alterView();
				}
				break;
			case 50:
				{
				setState(1575);
				comment();
				}
				break;
			case 51:
				{
				setState(1576);
				createDatabase();
				}
				break;
			case 52:
				{
				setState(1577);
				createFunction();
				}
				break;
			case 53:
				{
				setState(1578);
				createProcedure();
				}
				break;
			case 54:
				{
				setState(1579);
				createServer();
				}
				break;
			case 55:
				{
				setState(1580);
				createTrigger();
				}
				break;
			case 56:
				{
				setState(1581);
				createView();
				}
				break;
			case 57:
				{
				setState(1582);
				createSequence();
				}
				break;
			case 58:
				{
				setState(1583);
				createDomain();
				}
				break;
			case 59:
				{
				setState(1584);
				createRule();
				}
				break;
			case 60:
				{
				setState(1585);
				createSchema();
				}
				break;
			case 61:
				{
				setState(1586);
				alterSchema();
				}
				break;
			case 62:
				{
				setState(1587);
				dropSchema();
				}
				break;
			case 63:
				{
				setState(1588);
				createType();
				}
				break;
			case 64:
				{
				setState(1589);
				createTextSearch();
				}
				break;
			case 65:
				{
				setState(1590);
				declare();
				}
				break;
			case 66:
				{
				setState(1591);
				discard();
				}
				break;
			case 67:
				{
				setState(1592);
				dropDatabase();
				}
				break;
			case 68:
				{
				setState(1593);
				dropFunction();
				}
				break;
			case 69:
				{
				setState(1594);
				dropProcedure();
				}
				break;
			case 70:
				{
				setState(1595);
				dropServer();
				}
				break;
			case 71:
				{
				setState(1596);
				dropTrigger();
				}
				break;
			case 72:
				{
				setState(1597);
				dropView();
				}
				break;
			case 73:
				{
				setState(1598);
				dropSequence();
				}
				break;
			case 74:
				{
				setState(1599);
				dropDomain();
				}
				break;
			case 75:
				{
				setState(1600);
				vacuum();
				}
				break;
			case 76:
				{
				setState(1601);
				prepare();
				}
				break;
			case 77:
				{
				setState(1602);
				executeStmt();
				}
				break;
			case 78:
				{
				setState(1603);
				deallocate();
				}
				break;
			case 79:
				{
				setState(1604);
				explain();
				}
				break;
			case 80:
				{
				setState(1605);
				analyzeTable();
				}
				break;
			case 81:
				{
				setState(1606);
				listen();
				}
				break;
			case 82:
				{
				setState(1607);
				notifyStmt();
				}
				break;
			case 83:
				{
				setState(1608);
				unlisten();
				}
				break;
			case 84:
				{
				setState(1609);
				load();
				}
				break;
			case 85:
				{
				setState(1610);
				lock();
				}
				break;
			case 86:
				{
				setState(1611);
				createTablespace();
				}
				break;
			case 87:
				{
				setState(1612);
				alterTablespace();
				}
				break;
			case 88:
				{
				setState(1613);
				dropTablespace();
				}
				break;
			case 89:
				{
				setState(1614);
				setConstraints();
				}
				break;
			case 90:
				{
				setState(1615);
				copy();
				}
				break;
			case 91:
				{
				setState(1616);
				createLanguage();
				}
				break;
			case 92:
				{
				setState(1617);
				alterLanguage();
				}
				break;
			case 93:
				{
				setState(1618);
				dropLanguage();
				}
				break;
			case 94:
				{
				setState(1619);
				createConversion();
				}
				break;
			case 95:
				{
				setState(1620);
				alterConversion();
				}
				break;
			case 96:
				{
				setState(1621);
				dropConversion();
				}
				break;
			case 97:
				{
				setState(1622);
				alterTextSearchDictionary();
				}
				break;
			case 98:
				{
				setState(1623);
				alterTextSearchTemplate();
				}
				break;
			case 99:
				{
				setState(1624);
				alterTextSearchParser();
				}
				break;
			case 100:
				{
				setState(1625);
				createExtension();
				}
				break;
			case 101:
				{
				setState(1626);
				alterExtension();
				}
				break;
			case 102:
				{
				setState(1627);
				dropExtension();
				}
				break;
			case 103:
				{
				setState(1628);
				dropPolicy();
				}
				break;
			case 104:
				{
				setState(1629);
				dropOwned();
				}
				break;
			case 105:
				{
				setState(1630);
				dropForeignTable();
				}
				break;
			case 106:
				{
				setState(1631);
				dropOperator();
				}
				break;
			case 107:
				{
				setState(1632);
				dropMaterializedView();
				}
				break;
			case 108:
				{
				setState(1633);
				dropGroup();
				}
				break;
			case 109:
				{
				setState(1634);
				dropCast();
				}
				break;
			case 110:
				{
				setState(1635);
				dropEventTrigger();
				}
				break;
			case 111:
				{
				setState(1636);
				dropAggregate();
				}
				break;
			case 112:
				{
				setState(1637);
				dropCollation();
				}
				break;
			case 113:
				{
				setState(1638);
				dropForeignDataWrapper();
				}
				break;
			case 114:
				{
				setState(1639);
				dropRule();
				}
				break;
			case 115:
				{
				setState(1640);
				dropType();
				}
				break;
			case 116:
				{
				setState(1641);
				dropRoutine();
				}
				break;
			case 117:
				{
				setState(1642);
				dropStatistics();
				}
				break;
			case 118:
				{
				setState(1643);
				dropPublication();
				}
				break;
			case 119:
				{
				setState(1644);
				dropOperatorClass();
				}
				break;
			case 120:
				{
				setState(1645);
				dropSubscription();
				}
				break;
			case 121:
				{
				setState(1646);
				dropTextSearch();
				}
				break;
			case 122:
				{
				setState(1647);
				dropOperatorFamily();
				}
				break;
			case 123:
				{
				setState(1648);
				dropAccessMethod();
				}
				break;
			case 124:
				{
				setState(1649);
				dropServer();
				}
				break;
			case 125:
				{
				setState(1650);
				alterPolicy();
				}
				break;
			case 126:
				{
				setState(1651);
				checkpoint();
				}
				break;
			case 127:
				{
				setState(1652);
				fetch();
				}
				break;
			case 128:
				{
				setState(1653);
				move();
				}
				break;
			case 129:
				{
				setState(1654);
				close();
				}
				break;
			case 130:
				{
				setState(1655);
				cluster();
				}
				break;
			case 131:
				{
				setState(1656);
				alterOperator();
				}
				break;
			case 132:
				{
				setState(1657);
				createAccessMethod();
				}
				break;
			case 133:
				{
				setState(1658);
				alterPublication();
				}
				break;
			case 134:
				{
				setState(1659);
				createAggregate();
				}
				break;
			case 135:
				{
				setState(1660);
				createCast();
				}
				break;
			case 136:
				{
				setState(1661);
				alterRoutine();
				}
				break;
			case 137:
				{
				setState(1662);
				alterRule();
				}
				break;
			case 138:
				{
				setState(1663);
				createCollation();
				}
				break;
			case 139:
				{
				setState(1664);
				prepareTransaction();
				}
				break;
			case 140:
				{
				setState(1665);
				reassignOwned();
				}
				break;
			case 141:
				{
				setState(1666);
				refreshMatViewStmt();
				}
				break;
			case 142:
				{
				setState(1667);
				reindex();
				}
				break;
			case 143:
				{
				setState(1668);
				securityLabelStmt();
				}
				break;
			case 144:
				{
				setState(1669);
				createEventTrigger();
				}
				break;
			case 145:
				{
				setState(1670);
				createForeignDataWrapper();
				}
				break;
			case 146:
				{
				setState(1671);
				createForeignTable();
				}
				break;
			case 147:
				{
				setState(1672);
				alterStatistics();
				}
				break;
			case 148:
				{
				setState(1673);
				createGroup();
				}
				break;
			case 149:
				{
				setState(1674);
				alterSubscription();
				}
				break;
			case 150:
				{
				setState(1675);
				createMaterializedView();
				}
				break;
			case 151:
				{
				setState(1676);
				createOperator();
				}
				break;
			case 152:
				{
				setState(1677);
				alterTextSearchConfiguration();
				}
				break;
			case 153:
				{
				setState(1678);
				createPolicy();
				}
				break;
			case 154:
				{
				setState(1679);
				alterType();
				}
				break;
			case 155:
				{
				setState(1680);
				alterTrigger();
				}
				break;
			case 156:
				{
				setState(1681);
				createPublication();
				}
				break;
			case 157:
				{
				setState(1682);
				emptyStatement();
				}
				break;
			case 158:
				{
				setState(1683);
				open();
				}
				break;
			}
			setState(1687);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMI_) {
				{
				setState(1686);
				match(SEMI_);
				}
			}

			setState(1689);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetTransactionContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLStatementParser.TRANSACTION, 0); }
		public TransactionModeListContext transactionModeList() {
			return getRuleContext(TransactionModeListContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(PostgreSQLStatementParser.SESSION, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(PostgreSQLStatementParser.CHARACTERISTICS, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PostgreSQLStatementParser.SNAPSHOT, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public SetTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setTransaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSetTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSetTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSetTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetTransactionContext setTransaction() throws RecognitionException {
		SetTransactionContext _localctx = new SetTransactionContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_setTransaction);
		int _la;
		try {
			setState(1703);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1691);
				match(SET);
				setState(1695);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SESSION) {
					{
					setState(1692);
					match(SESSION);
					setState(1693);
					match(CHARACTERISTICS);
					setState(1694);
					match(AS);
					}
				}

				setState(1697);
				match(TRANSACTION);
				setState(1698);
				transactionModeList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1699);
				match(SET);
				setState(1700);
				match(TRANSACTION);
				setState(1701);
				match(SNAPSHOT);
				setState(1702);
				match(STRING_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BeginTransactionContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(PostgreSQLStatementParser.BEGIN, 0); }
		public TransactionModeListContext transactionModeList() {
			return getRuleContext(TransactionModeListContext.class,0);
		}
		public TerminalNode WORK() { return getToken(PostgreSQLStatementParser.WORK, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLStatementParser.TRANSACTION, 0); }
		public BeginTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginTransaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterBeginTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitBeginTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitBeginTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BeginTransactionContext beginTransaction() throws RecognitionException {
		BeginTransactionContext _localctx = new BeginTransactionContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_beginTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1705);
			match(BEGIN);
			setState(1707);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TRANSACTION || _la==WORK) {
				{
				setState(1706);
				_la = _input.LA(1);
				if ( !(_la==TRANSACTION || _la==WORK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1710);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 268435489L) != 0) || _la==NOT) {
				{
				setState(1709);
				transactionModeList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CommitContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(PostgreSQLStatementParser.COMMIT, 0); }
		public TerminalNode AND() { return getToken(PostgreSQLStatementParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(PostgreSQLStatementParser.CHAIN, 0); }
		public TerminalNode WORK() { return getToken(PostgreSQLStatementParser.WORK, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLStatementParser.TRANSACTION, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public CommitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCommit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCommit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCommit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommitContext commit() throws RecognitionException {
		CommitContext _localctx = new CommitContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_commit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1712);
			match(COMMIT);
			setState(1714);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TRANSACTION || _la==WORK) {
				{
				setState(1713);
				_la = _input.LA(1);
				if ( !(_la==TRANSACTION || _la==WORK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1721);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(1716);
				match(AND);
				setState(1718);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(1717);
					match(NO);
					}
				}

				setState(1720);
				match(CHAIN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SavepointContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT() { return getToken(PostgreSQLStatementParser.SAVEPOINT, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public SavepointContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSavepoint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSavepoint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSavepoint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SavepointContext savepoint() throws RecognitionException {
		SavepointContext _localctx = new SavepointContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_savepoint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1723);
			match(SAVEPOINT);
			setState(1724);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AbortContext extends ParserRuleContext {
		public TerminalNode ABORT() { return getToken(PostgreSQLStatementParser.ABORT, 0); }
		public TerminalNode AND() { return getToken(PostgreSQLStatementParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(PostgreSQLStatementParser.CHAIN, 0); }
		public TerminalNode WORK() { return getToken(PostgreSQLStatementParser.WORK, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLStatementParser.TRANSACTION, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public AbortContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_abort; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAbort(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAbort(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAbort(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AbortContext abort() throws RecognitionException {
		AbortContext _localctx = new AbortContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_abort);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1726);
			match(ABORT);
			setState(1728);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TRANSACTION || _la==WORK) {
				{
				setState(1727);
				_la = _input.LA(1);
				if ( !(_la==TRANSACTION || _la==WORK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1735);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(1730);
				match(AND);
				setState(1732);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(1731);
					match(NO);
					}
				}

				setState(1734);
				match(CHAIN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StartTransactionContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(PostgreSQLStatementParser.START, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLStatementParser.TRANSACTION, 0); }
		public TransactionModeListContext transactionModeList() {
			return getRuleContext(TransactionModeListContext.class,0);
		}
		public StartTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startTransaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterStartTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitStartTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitStartTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartTransactionContext startTransaction() throws RecognitionException {
		StartTransactionContext _localctx = new StartTransactionContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_startTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1737);
			match(START);
			setState(1738);
			match(TRANSACTION);
			setState(1740);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 268435489L) != 0) || _la==NOT) {
				{
				setState(1739);
				transactionModeList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EndContext extends ParserRuleContext {
		public TerminalNode END() { return getToken(PostgreSQLStatementParser.END, 0); }
		public TerminalNode AND() { return getToken(PostgreSQLStatementParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(PostgreSQLStatementParser.CHAIN, 0); }
		public TerminalNode WORK() { return getToken(PostgreSQLStatementParser.WORK, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLStatementParser.TRANSACTION, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public EndContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_end; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterEnd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitEnd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitEnd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EndContext end() throws RecognitionException {
		EndContext _localctx = new EndContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_end);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1742);
			match(END);
			setState(1744);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TRANSACTION || _la==WORK) {
				{
				setState(1743);
				_la = _input.LA(1);
				if ( !(_la==TRANSACTION || _la==WORK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1751);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(1746);
				match(AND);
				setState(1748);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(1747);
					match(NO);
					}
				}

				setState(1750);
				match(CHAIN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RollbackContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(PostgreSQLStatementParser.ROLLBACK, 0); }
		public TerminalNode AND() { return getToken(PostgreSQLStatementParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(PostgreSQLStatementParser.CHAIN, 0); }
		public TerminalNode WORK() { return getToken(PostgreSQLStatementParser.WORK, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLStatementParser.TRANSACTION, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public RollbackContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterRollback(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitRollback(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitRollback(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollbackContext rollback() throws RecognitionException {
		RollbackContext _localctx = new RollbackContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_rollback);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1753);
			match(ROLLBACK);
			setState(1755);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TRANSACTION || _la==WORK) {
				{
				setState(1754);
				_la = _input.LA(1);
				if ( !(_la==TRANSACTION || _la==WORK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1762);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(1757);
				match(AND);
				setState(1759);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(1758);
					match(NO);
					}
				}

				setState(1761);
				match(CHAIN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReleaseSavepointContext extends ParserRuleContext {
		public TerminalNode RELEASE() { return getToken(PostgreSQLStatementParser.RELEASE, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode SAVEPOINT() { return getToken(PostgreSQLStatementParser.SAVEPOINT, 0); }
		public ReleaseSavepointContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_releaseSavepoint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterReleaseSavepoint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitReleaseSavepoint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitReleaseSavepoint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReleaseSavepointContext releaseSavepoint() throws RecognitionException {
		ReleaseSavepointContext _localctx = new ReleaseSavepointContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_releaseSavepoint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1764);
			match(RELEASE);
			setState(1766);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
			case 1:
				{
				setState(1765);
				match(SAVEPOINT);
				}
				break;
			}
			setState(1768);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RollbackToSavepointContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(PostgreSQLStatementParser.ROLLBACK, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode SAVEPOINT() { return getToken(PostgreSQLStatementParser.SAVEPOINT, 0); }
		public TerminalNode WORK() { return getToken(PostgreSQLStatementParser.WORK, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLStatementParser.TRANSACTION, 0); }
		public RollbackToSavepointContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollbackToSavepoint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterRollbackToSavepoint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitRollbackToSavepoint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitRollbackToSavepoint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollbackToSavepointContext rollbackToSavepoint() throws RecognitionException {
		RollbackToSavepointContext _localctx = new RollbackToSavepointContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_rollbackToSavepoint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1770);
			match(ROLLBACK);
			setState(1772);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TRANSACTION || _la==WORK) {
				{
				setState(1771);
				_la = _input.LA(1);
				if ( !(_la==TRANSACTION || _la==WORK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1774);
			match(TO);
			setState(1776);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {
			case 1:
				{
				setState(1775);
				match(SAVEPOINT);
				}
				break;
			}
			setState(1778);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CommitPreparedContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(PostgreSQLStatementParser.COMMIT, 0); }
		public TerminalNode PREPARED() { return getToken(PostgreSQLStatementParser.PREPARED, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public CommitPreparedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commitPrepared; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCommitPrepared(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCommitPrepared(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCommitPrepared(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommitPreparedContext commitPrepared() throws RecognitionException {
		CommitPreparedContext _localctx = new CommitPreparedContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_commitPrepared);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1780);
			match(COMMIT);
			setState(1781);
			match(PREPARED);
			setState(1782);
			match(STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RollbackPreparedContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(PostgreSQLStatementParser.ROLLBACK, 0); }
		public TerminalNode PREPARED() { return getToken(PostgreSQLStatementParser.PREPARED, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public RollbackPreparedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollbackPrepared; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterRollbackPrepared(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitRollbackPrepared(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitRollbackPrepared(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollbackPreparedContext rollbackPrepared() throws RecognitionException {
		RollbackPreparedContext _localctx = new RollbackPreparedContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_rollbackPrepared);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1784);
			match(ROLLBACK);
			setState(1785);
			match(PREPARED);
			setState(1786);
			match(STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetConstraintsContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PostgreSQLStatementParser.CONSTRAINTS, 0); }
		public ConstraintsSetListContext constraintsSetList() {
			return getRuleContext(ConstraintsSetListContext.class,0);
		}
		public ConstraintsSetModeContext constraintsSetMode() {
			return getRuleContext(ConstraintsSetModeContext.class,0);
		}
		public SetConstraintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setConstraints; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSetConstraints(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSetConstraints(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSetConstraints(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetConstraintsContext setConstraints() throws RecognitionException {
		SetConstraintsContext _localctx = new SetConstraintsContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_setConstraints);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1788);
			match(SET);
			setState(1789);
			match(CONSTRAINTS);
			setState(1790);
			constraintsSetList();
			setState(1791);
			constraintsSetMode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstraintsSetModeContext extends ParserRuleContext {
		public TerminalNode DEFERRED() { return getToken(PostgreSQLStatementParser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSQLStatementParser.IMMEDIATE, 0); }
		public ConstraintsSetModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintsSetMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterConstraintsSetMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitConstraintsSetMode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitConstraintsSetMode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintsSetModeContext constraintsSetMode() throws RecognitionException {
		ConstraintsSetModeContext _localctx = new ConstraintsSetModeContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_constraintsSetMode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1793);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstraintsSetListContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return getRuleContext(QualifiedNameListContext.class,0);
		}
		public ConstraintsSetListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintsSetList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterConstraintsSetList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitConstraintsSetList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitConstraintsSetList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintsSetListContext constraintsSetList() throws RecognitionException {
		ConstraintsSetListContext _localctx = new ConstraintsSetListContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_constraintsSetList);
		try {
			setState(1797);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1795);
				match(ALL);
				}
				break;
			case UNICODE_ESCAPE:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case XML:
			case JSON:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case PARAM:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case NATIONAL:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 2);
				{
				setState(1796);
				qualifiedNameList(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LockContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(PostgreSQLStatementParser.LOCK, 0); }
		public RelationExprListContext relationExprList() {
			return getRuleContext(RelationExprListContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public TerminalNode IN() { return getToken(PostgreSQLStatementParser.IN, 0); }
		public LockTypeContext lockType() {
			return getRuleContext(LockTypeContext.class,0);
		}
		public TerminalNode MODE() { return getToken(PostgreSQLStatementParser.MODE, 0); }
		public TerminalNode NOWAIT() { return getToken(PostgreSQLStatementParser.NOWAIT, 0); }
		public LockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterLock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitLock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitLock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockContext lock() throws RecognitionException {
		LockContext _localctx = new LockContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_lock);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1799);
			match(LOCK);
			setState(1801);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,23,_ctx) ) {
			case 1:
				{
				setState(1800);
				match(TABLE);
				}
				break;
			}
			setState(1803);
			relationExprList();
			setState(1808);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(1804);
				match(IN);
				setState(1805);
				lockType();
				setState(1806);
				match(MODE);
				}
			}

			setState(1811);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT) {
				{
				setState(1810);
				match(NOWAIT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LockTypeContext extends ParserRuleContext {
		public TerminalNode ACCESS() { return getToken(PostgreSQLStatementParser.ACCESS, 0); }
		public TerminalNode SHARE() { return getToken(PostgreSQLStatementParser.SHARE, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLStatementParser.ROW, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(PostgreSQLStatementParser.EXCLUSIVE, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLStatementParser.UPDATE, 0); }
		public LockTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterLockType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitLockType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitLockType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockTypeContext lockType() throws RecognitionException {
		LockTypeContext _localctx = new LockTypeContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_lockType);
		try {
			setState(1829);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1813);
				match(ACCESS);
				setState(1814);
				match(SHARE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1815);
				match(ROW);
				setState(1816);
				match(SHARE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1817);
				match(ROW);
				setState(1818);
				match(EXCLUSIVE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1819);
				match(SHARE);
				setState(1820);
				match(UPDATE);
				setState(1821);
				match(EXCLUSIVE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1822);
				match(SHARE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1823);
				match(SHARE);
				setState(1824);
				match(ROW);
				setState(1825);
				match(EXCLUSIVE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1826);
				match(EXCLUSIVE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1827);
				match(ACCESS);
				setState(1828);
				match(EXCLUSIVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrepareTransactionContext extends ParserRuleContext {
		public TerminalNode PREPARE() { return getToken(PostgreSQLStatementParser.PREPARE, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLStatementParser.TRANSACTION, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public PrepareTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepareTransaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterPrepareTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitPrepareTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitPrepareTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrepareTransactionContext prepareTransaction() throws RecognitionException {
		PrepareTransactionContext _localctx = new PrepareTransactionContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_prepareTransaction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1831);
			match(PREPARE);
			setState(1832);
			match(TRANSACTION);
			setState(1833);
			match(STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CheckpointContext extends ParserRuleContext {
		public TerminalNode CHECKPOINT() { return getToken(PostgreSQLStatementParser.CHECKPOINT, 0); }
		public CheckpointContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkpoint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCheckpoint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCheckpoint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCheckpoint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckpointContext checkpoint() throws RecognitionException {
		CheckpointContext _localctx = new CheckpointContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_checkpoint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1835);
			match(CHECKPOINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(PostgreSQLStatementParser.INSERT, 0); }
		public TerminalNode INTO() { return getToken(PostgreSQLStatementParser.INTO, 0); }
		public InsertTargetContext insertTarget() {
			return getRuleContext(InsertTargetContext.class,0);
		}
		public InsertRestContext insertRest() {
			return getRuleContext(InsertRestContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public OptOnConflictContext optOnConflict() {
			return getRuleContext(OptOnConflictContext.class,0);
		}
		public ReturningClauseContext returningClause() {
			return getRuleContext(ReturningClauseContext.class,0);
		}
		public InsertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterInsert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitInsert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitInsert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertContext insert() throws RecognitionException {
		InsertContext _localctx = new InsertContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1838);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1837);
				withClause();
				}
			}

			setState(1840);
			match(INSERT);
			setState(1841);
			match(INTO);
			setState(1842);
			insertTarget();
			setState(1843);
			insertRest();
			setState(1845);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(1844);
				optOnConflict();
				}
			}

			setState(1848);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING) {
				{
				setState(1847);
				returningClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertTargetContext extends ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public InsertTargetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertTarget; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterInsertTarget(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitInsertTarget(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitInsertTarget(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertTargetContext insertTarget() throws RecognitionException {
		InsertTargetContext _localctx = new InsertTargetContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_insertTarget);
		try {
			setState(1855);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1850);
				qualifiedName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1851);
				qualifiedName();
				setState(1852);
				match(AS);
				setState(1853);
				colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertRestContext extends ParserRuleContext {
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public TerminalNode OVERRIDING() { return getToken(PostgreSQLStatementParser.OVERRIDING, 0); }
		public OverrideKindContext overrideKind() {
			return getRuleContext(OverrideKindContext.class,0);
		}
		public TerminalNode VALUE() { return getToken(PostgreSQLStatementParser.VALUE, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public InsertColumnListContext insertColumnList() {
			return getRuleContext(InsertColumnListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public TerminalNode VALUES() { return getToken(PostgreSQLStatementParser.VALUES, 0); }
		public InsertRestContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertRest; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterInsertRest(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitInsertRest(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitInsertRest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertRestContext insertRest() throws RecognitionException {
		InsertRestContext _localctx = new InsertRestContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_insertRest);
		try {
			setState(1878);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,31,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1857);
				select();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1858);
				match(OVERRIDING);
				setState(1859);
				overrideKind();
				setState(1860);
				match(VALUE);
				setState(1861);
				select();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1863);
				match(LP_);
				setState(1864);
				insertColumnList(0);
				setState(1865);
				match(RP_);
				setState(1866);
				select();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1868);
				match(LP_);
				setState(1869);
				insertColumnList(0);
				setState(1870);
				match(RP_);
				setState(1871);
				match(OVERRIDING);
				setState(1872);
				overrideKind();
				setState(1873);
				match(VALUE);
				setState(1874);
				select();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1876);
				match(DEFAULT);
				setState(1877);
				match(VALUES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OverrideKindContext extends ParserRuleContext {
		public TerminalNode USER() { return getToken(PostgreSQLStatementParser.USER, 0); }
		public TerminalNode SYSTEM() { return getToken(PostgreSQLStatementParser.SYSTEM, 0); }
		public OverrideKindContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overrideKind; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOverrideKind(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOverrideKind(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOverrideKind(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OverrideKindContext overrideKind() throws RecognitionException {
		OverrideKindContext _localctx = new OverrideKindContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_overrideKind);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1880);
			_la = _input.LA(1);
			if ( !(_la==USER || _la==SYSTEM) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertColumnListContext extends ParserRuleContext {
		public InsertColumnItemContext insertColumnItem() {
			return getRuleContext(InsertColumnItemContext.class,0);
		}
		public InsertColumnListContext insertColumnList() {
			return getRuleContext(InsertColumnListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public InsertColumnListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertColumnList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterInsertColumnList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitInsertColumnList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitInsertColumnList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertColumnListContext insertColumnList() throws RecognitionException {
		return insertColumnList(0);
	}

	private InsertColumnListContext insertColumnList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		InsertColumnListContext _localctx = new InsertColumnListContext(_ctx, _parentState);
		InsertColumnListContext _prevctx = _localctx;
		int _startState = 48;
		enterRecursionRule(_localctx, 48, RULE_insertColumnList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1883);
			insertColumnItem();
			}
			_ctx.stop = _input.LT(-1);
			setState(1890);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,32,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InsertColumnListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_insertColumnList);
					setState(1885);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(1886);
					match(COMMA_);
					setState(1887);
					insertColumnItem();
					}
					} 
				}
				setState(1892);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,32,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertColumnItemContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public OptIndirectionContext optIndirection() {
			return getRuleContext(OptIndirectionContext.class,0);
		}
		public InsertColumnItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertColumnItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterInsertColumnItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitInsertColumnItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitInsertColumnItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertColumnItemContext insertColumnItem() throws RecognitionException {
		InsertColumnItemContext _localctx = new InsertColumnItemContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_insertColumnItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1893);
			colId();
			setState(1894);
			optIndirection(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptOnConflictContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public TerminalNode CONFLICT() { return getToken(PostgreSQLStatementParser.CONFLICT, 0); }
		public OptConfExprContext optConfExpr() {
			return getRuleContext(OptConfExprContext.class,0);
		}
		public TerminalNode DO() { return getToken(PostgreSQLStatementParser.DO, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLStatementParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public SetClauseListContext setClauseList() {
			return getRuleContext(SetClauseListContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public TerminalNode NOTHING() { return getToken(PostgreSQLStatementParser.NOTHING, 0); }
		public OptOnConflictContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optOnConflict; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOptOnConflict(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOptOnConflict(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOptOnConflict(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptOnConflictContext optOnConflict() throws RecognitionException {
		OptOnConflictContext _localctx = new OptOnConflictContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_optOnConflict);
		int _la;
		try {
			setState(1912);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,34,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1896);
				match(ON);
				setState(1897);
				match(CONFLICT);
				setState(1898);
				optConfExpr();
				setState(1899);
				match(DO);
				setState(1900);
				match(UPDATE);
				setState(1901);
				match(SET);
				setState(1902);
				setClauseList(0);
				setState(1904);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(1903);
					whereClause();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1906);
				match(ON);
				setState(1907);
				match(CONFLICT);
				setState(1908);
				optConfExpr();
				setState(1909);
				match(DO);
				setState(1910);
				match(NOTHING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptConfExprContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public IndexParamsContext indexParams() {
			return getRuleContext(IndexParamsContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLStatementParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OptConfExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optConfExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOptConfExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOptConfExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOptConfExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptConfExprContext optConfExpr() throws RecognitionException {
		OptConfExprContext _localctx = new OptConfExprContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_optConfExpr);
		int _la;
		try {
			setState(1924);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LP_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1914);
				match(LP_);
				setState(1915);
				indexParams();
				setState(1916);
				match(RP_);
				setState(1918);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(1917);
					whereClause();
					}
				}

				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				setState(1920);
				match(ON);
				setState(1921);
				match(CONSTRAINT);
				setState(1922);
				name();
				}
				break;
			case DO:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UpdateContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(PostgreSQLStatementParser.UPDATE, 0); }
		public RelationExprOptAliasContext relationExprOptAlias() {
			return getRuleContext(RelationExprOptAliasContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public SetClauseListContext setClauseList() {
			return getRuleContext(SetClauseListContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public WhereOrCurrentClauseContext whereOrCurrentClause() {
			return getRuleContext(WhereOrCurrentClauseContext.class,0);
		}
		public ReturningClauseContext returningClause() {
			return getRuleContext(ReturningClauseContext.class,0);
		}
		public UpdateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterUpdate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitUpdate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitUpdate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateContext update() throws RecognitionException {
		UpdateContext _localctx = new UpdateContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_update);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1927);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1926);
				withClause();
				}
			}

			setState(1929);
			match(UPDATE);
			setState(1930);
			relationExprOptAlias();
			setState(1931);
			match(SET);
			setState(1932);
			setClauseList(0);
			setState(1934);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(1933);
				fromClause();
				}
			}

			setState(1937);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(1936);
				whereOrCurrentClause();
				}
			}

			setState(1940);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING) {
				{
				setState(1939);
				returningClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetClauseListContext extends ParserRuleContext {
		public SetClauseContext setClause() {
			return getRuleContext(SetClauseContext.class,0);
		}
		public SetClauseListContext setClauseList() {
			return getRuleContext(SetClauseListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public SetClauseListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setClauseList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSetClauseList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSetClauseList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSetClauseList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetClauseListContext setClauseList() throws RecognitionException {
		return setClauseList(0);
	}

	private SetClauseListContext setClauseList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		SetClauseListContext _localctx = new SetClauseListContext(_ctx, _parentState);
		SetClauseListContext _prevctx = _localctx;
		int _startState = 58;
		enterRecursionRule(_localctx, 58, RULE_setClauseList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1943);
			setClause();
			}
			_ctx.stop = _input.LT(-1);
			setState(1950);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,41,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SetClauseListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_setClauseList);
					setState(1945);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(1946);
					match(COMMA_);
					setState(1947);
					setClause();
					}
					} 
				}
				setState(1952);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,41,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetClauseContext extends ParserRuleContext {
		public SetTargetContext setTarget() {
			return getRuleContext(SetTargetContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(PostgreSQLStatementParser.EQ_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public SetTargetListContext setTargetList() {
			return getRuleContext(SetTargetListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public SetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSetClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSetClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetClauseContext setClause() throws RecognitionException {
		SetClauseContext _localctx = new SetClauseContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_setClause);
		try {
			setState(1963);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNICODE_ESCAPE:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case XML:
			case JSON:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case PARAM:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case NATIONAL:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1953);
				setTarget();
				setState(1954);
				match(EQ_);
				setState(1955);
				aExpr(0);
				}
				break;
			case LP_:
				enterOuterAlt(_localctx, 2);
				{
				setState(1957);
				match(LP_);
				setState(1958);
				setTargetList(0);
				setState(1959);
				match(RP_);
				setState(1960);
				match(EQ_);
				setState(1961);
				aExpr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetTargetContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public SetTargetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setTarget; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSetTarget(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSetTarget(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSetTarget(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetTargetContext setTarget() throws RecognitionException {
		SetTargetContext _localctx = new SetTargetContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_setTarget);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1965);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetTargetListContext extends ParserRuleContext {
		public SetTargetContext setTarget() {
			return getRuleContext(SetTargetContext.class,0);
		}
		public SetTargetListContext setTargetList() {
			return getRuleContext(SetTargetListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public SetTargetListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setTargetList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSetTargetList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSetTargetList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSetTargetList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetTargetListContext setTargetList() throws RecognitionException {
		return setTargetList(0);
	}

	private SetTargetListContext setTargetList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		SetTargetListContext _localctx = new SetTargetListContext(_ctx, _parentState);
		SetTargetListContext _prevctx = _localctx;
		int _startState = 64;
		enterRecursionRule(_localctx, 64, RULE_setTargetList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1968);
			setTarget();
			}
			_ctx.stop = _input.LT(-1);
			setState(1975);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,43,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SetTargetListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_setTargetList);
					setState(1970);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(1971);
					match(COMMA_);
					setState(1972);
					setTarget();
					}
					} 
				}
				setState(1977);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,43,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReturningClauseContext extends ParserRuleContext {
		public TerminalNode RETURNING() { return getToken(PostgreSQLStatementParser.RETURNING, 0); }
		public TargetListContext targetList() {
			return getRuleContext(TargetListContext.class,0);
		}
		public ReturningClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returningClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterReturningClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitReturningClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitReturningClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReturningClauseContext returningClause() throws RecognitionException {
		ReturningClauseContext _localctx = new ReturningClauseContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_returningClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1978);
			match(RETURNING);
			setState(1979);
			targetList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DeleteContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(PostgreSQLStatementParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public RelationExprOptAliasContext relationExprOptAlias() {
			return getRuleContext(RelationExprOptAliasContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public UsingClauseContext usingClause() {
			return getRuleContext(UsingClauseContext.class,0);
		}
		public WhereOrCurrentClauseContext whereOrCurrentClause() {
			return getRuleContext(WhereOrCurrentClauseContext.class,0);
		}
		public ReturningClauseContext returningClause() {
			return getRuleContext(ReturningClauseContext.class,0);
		}
		public DeleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDelete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDelete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDelete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteContext delete() throws RecognitionException {
		DeleteContext _localctx = new DeleteContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_delete);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1982);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1981);
				withClause();
				}
			}

			setState(1984);
			match(DELETE);
			setState(1985);
			match(FROM);
			setState(1986);
			relationExprOptAlias();
			setState(1988);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(1987);
				usingClause();
				}
			}

			setState(1991);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(1990);
				whereOrCurrentClause();
				}
			}

			setState(1994);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING) {
				{
				setState(1993);
				returningClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RelationExprOptAliasContext extends ParserRuleContext {
		public RelationExprContext relationExpr() {
			return getRuleContext(RelationExprContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public RelationExprOptAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relationExprOptAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterRelationExprOptAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitRelationExprOptAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitRelationExprOptAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RelationExprOptAliasContext relationExprOptAlias() throws RecognitionException {
		RelationExprOptAliasContext _localctx = new RelationExprOptAliasContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_relationExprOptAlias);
		try {
			setState(2004);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1996);
				relationExpr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1997);
				relationExpr();
				setState(1998);
				colId();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2000);
				relationExpr();
				setState(2001);
				match(AS);
				setState(2002);
				colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UsingClauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public FromListContext fromList() {
			return getRuleContext(FromListContext.class,0);
		}
		public UsingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_usingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterUsingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitUsingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitUsingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UsingClauseContext usingClause() throws RecognitionException {
		UsingClauseContext _localctx = new UsingClauseContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_usingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2006);
			match(USING);
			setState(2007);
			fromList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectContext extends ParserRuleContext {
		public SelectNoParensContext selectNoParens() {
			return getRuleContext(SelectNoParensContext.class,0);
		}
		public SelectWithParensContext selectWithParens() {
			return getRuleContext(SelectWithParensContext.class,0);
		}
		public SelectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectContext select() throws RecognitionException {
		SelectContext _localctx = new SelectContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_select);
		try {
			setState(2011);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,49,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2009);
				selectNoParens();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2010);
				selectWithParens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectWithParensContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public SelectNoParensContext selectNoParens() {
			return getRuleContext(SelectNoParensContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public SelectWithParensContext selectWithParens() {
			return getRuleContext(SelectWithParensContext.class,0);
		}
		public SelectWithParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectWithParens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSelectWithParens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSelectWithParens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSelectWithParens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectWithParensContext selectWithParens() throws RecognitionException {
		SelectWithParensContext _localctx = new SelectWithParensContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_selectWithParens);
		try {
			setState(2021);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,50,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2013);
				match(LP_);
				setState(2014);
				selectNoParens();
				setState(2015);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2017);
				match(LP_);
				setState(2018);
				selectWithParens();
				setState(2019);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectNoParensContext extends ParserRuleContext {
		public SelectClauseNContext selectClauseN() {
			return getRuleContext(SelectClauseNContext.class,0);
		}
		public SortClauseContext sortClause() {
			return getRuleContext(SortClauseContext.class,0);
		}
		public ForLockingClauseContext forLockingClause() {
			return getRuleContext(ForLockingClauseContext.class,0);
		}
		public SelectLimitContext selectLimit() {
			return getRuleContext(SelectLimitContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public SelectNoParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectNoParens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSelectNoParens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSelectNoParens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSelectNoParens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectNoParensContext selectNoParens() throws RecognitionException {
		SelectNoParensContext _localctx = new SelectNoParensContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_selectNoParens);
		int _la;
		try {
			setState(2068);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,59,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2023);
				selectClauseN(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2024);
				selectClauseN(0);
				setState(2025);
				sortClause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2027);
				selectClauseN(0);
				setState(2029);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(2028);
					sortClause();
					}
				}

				setState(2031);
				forLockingClause();
				setState(2033);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT || _la==OFFSET || _la==FETCH) {
					{
					setState(2032);
					selectLimit();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2035);
				selectClauseN(0);
				setState(2037);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(2036);
					sortClause();
					}
				}

				setState(2039);
				selectLimit();
				setState(2041);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2040);
					forLockingClause();
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2043);
				withClause();
				setState(2044);
				selectClauseN(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2046);
				withClause();
				setState(2047);
				selectClauseN(0);
				setState(2048);
				sortClause();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2050);
				withClause();
				setState(2051);
				selectClauseN(0);
				setState(2053);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(2052);
					sortClause();
					}
				}

				setState(2055);
				forLockingClause();
				setState(2057);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT || _la==OFFSET || _la==FETCH) {
					{
					setState(2056);
					selectLimit();
					}
				}

				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2059);
				withClause();
				setState(2060);
				selectClauseN(0);
				setState(2062);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(2061);
					sortClause();
					}
				}

				setState(2064);
				selectLimit();
				setState(2066);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2065);
					forLockingClause();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectClauseNContext extends ParserRuleContext {
		public SimpleSelectContext simpleSelect() {
			return getRuleContext(SimpleSelectContext.class,0);
		}
		public SelectWithParensContext selectWithParens() {
			return getRuleContext(SelectWithParensContext.class,0);
		}
		public List<SelectClauseNContext> selectClauseN() {
			return getRuleContexts(SelectClauseNContext.class);
		}
		public SelectClauseNContext selectClauseN(int i) {
			return getRuleContext(SelectClauseNContext.class,i);
		}
		public TerminalNode INTERSECT() { return getToken(PostgreSQLStatementParser.INTERSECT, 0); }
		public AllOrDistinctContext allOrDistinct() {
			return getRuleContext(AllOrDistinctContext.class,0);
		}
		public TerminalNode UNION() { return getToken(PostgreSQLStatementParser.UNION, 0); }
		public TerminalNode EXCEPT() { return getToken(PostgreSQLStatementParser.EXCEPT, 0); }
		public SelectClauseNContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectClauseN; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSelectClauseN(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSelectClauseN(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSelectClauseN(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectClauseNContext selectClauseN() throws RecognitionException {
		return selectClauseN(0);
	}

	private SelectClauseNContext selectClauseN(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		SelectClauseNContext _localctx = new SelectClauseNContext(_ctx, _parentState);
		SelectClauseNContext _prevctx = _localctx;
		int _startState = 80;
		enterRecursionRule(_localctx, 80, RULE_selectClauseN, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2073);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case TABLE:
			case VALUES:
				{
				setState(2071);
				simpleSelect();
				}
				break;
			case LP_:
				{
				setState(2072);
				selectWithParens();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(2089);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,64,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(2087);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,63,_ctx) ) {
					case 1:
						{
						_localctx = new SelectClauseNContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_selectClauseN);
						setState(2075);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(2076);
						match(INTERSECT);
						setState(2078);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==DISTINCT || _la==ALL) {
							{
							setState(2077);
							allOrDistinct();
							}
						}

						setState(2080);
						selectClauseN(3);
						}
						break;
					case 2:
						{
						_localctx = new SelectClauseNContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_selectClauseN);
						setState(2081);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(2082);
						_la = _input.LA(1);
						if ( !(_la==UNION || _la==EXCEPT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(2084);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==DISTINCT || _la==ALL) {
							{
							setState(2083);
							allOrDistinct();
							}
						}

						setState(2086);
						selectClauseN(2);
						}
						break;
					}
					} 
				}
				setState(2091);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,64,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimpleSelectContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PostgreSQLStatementParser.SELECT, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TargetListContext targetList() {
			return getRuleContext(TargetListContext.class,0);
		}
		public IntoClauseContext intoClause() {
			return getRuleContext(IntoClauseContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public GroupClauseContext groupClause() {
			return getRuleContext(GroupClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public DistinctClauseContext distinctClause() {
			return getRuleContext(DistinctClauseContext.class,0);
		}
		public ValuesClauseContext valuesClause() {
			return getRuleContext(ValuesClauseContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public RelationExprContext relationExpr() {
			return getRuleContext(RelationExprContext.class,0);
		}
		public SimpleSelectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleSelect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSimpleSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSimpleSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSimpleSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleSelectContext simpleSelect() throws RecognitionException {
		SimpleSelectContext _localctx = new SimpleSelectContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_simpleSelect);
		try {
			setState(2141);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2092);
				match(SELECT);
				setState(2094);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,65,_ctx) ) {
				case 1:
					{
					setState(2093);
					match(ALL);
					}
					break;
				}
				setState(2097);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,66,_ctx) ) {
				case 1:
					{
					setState(2096);
					targetList(0);
					}
					break;
				}
				setState(2100);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,67,_ctx) ) {
				case 1:
					{
					setState(2099);
					intoClause();
					}
					break;
				}
				setState(2103);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,68,_ctx) ) {
				case 1:
					{
					setState(2102);
					fromClause();
					}
					break;
				}
				setState(2106);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,69,_ctx) ) {
				case 1:
					{
					setState(2105);
					whereClause();
					}
					break;
				}
				setState(2109);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,70,_ctx) ) {
				case 1:
					{
					setState(2108);
					groupClause();
					}
					break;
				}
				setState(2112);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,71,_ctx) ) {
				case 1:
					{
					setState(2111);
					havingClause();
					}
					break;
				}
				setState(2115);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,72,_ctx) ) {
				case 1:
					{
					setState(2114);
					windowClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2117);
				match(SELECT);
				setState(2118);
				distinctClause();
				setState(2119);
				targetList(0);
				setState(2121);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,73,_ctx) ) {
				case 1:
					{
					setState(2120);
					intoClause();
					}
					break;
				}
				setState(2124);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
				case 1:
					{
					setState(2123);
					fromClause();
					}
					break;
				}
				setState(2127);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
				case 1:
					{
					setState(2126);
					whereClause();
					}
					break;
				}
				setState(2130);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {
				case 1:
					{
					setState(2129);
					groupClause();
					}
					break;
				}
				setState(2133);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,77,_ctx) ) {
				case 1:
					{
					setState(2132);
					havingClause();
					}
					break;
				}
				setState(2136);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,78,_ctx) ) {
				case 1:
					{
					setState(2135);
					windowClause();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2138);
				valuesClause(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2139);
				match(TABLE);
				setState(2140);
				relationExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WithClauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public CteListContext cteList() {
			return getRuleContext(CteListContext.class,0);
		}
		public TerminalNode RECURSIVE() { return getToken(PostgreSQLStatementParser.RECURSIVE, 0); }
		public WithClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterWithClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitWithClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitWithClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithClauseContext withClause() throws RecognitionException {
		WithClauseContext _localctx = new WithClauseContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_withClause);
		try {
			setState(2148);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,80,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2143);
				match(WITH);
				setState(2144);
				cteList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2145);
				match(WITH);
				setState(2146);
				match(RECURSIVE);
				setState(2147);
				cteList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IntoClauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PostgreSQLStatementParser.INTO, 0); }
		public OptTempTableNameContext optTempTableName() {
			return getRuleContext(OptTempTableNameContext.class,0);
		}
		public IntoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intoClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterIntoClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitIntoClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitIntoClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntoClauseContext intoClause() throws RecognitionException {
		IntoClauseContext _localctx = new IntoClauseContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_intoClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2150);
			match(INTO);
			setState(2151);
			optTempTableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptTempTableNameContext extends ParserRuleContext {
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLStatementParser.TEMPORARY, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLStatementParser.TEMP, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLStatementParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(PostgreSQLStatementParser.GLOBAL, 0); }
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLStatementParser.UNLOGGED, 0); }
		public OptTempTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optTempTableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOptTempTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOptTempTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOptTempTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptTempTableNameContext optTempTableName() throws RecognitionException {
		OptTempTableNameContext _localctx = new OptTempTableNameContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_optTempTableName);
		try {
			setState(2197);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,89,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2153);
				match(TEMPORARY);
				setState(2155);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,81,_ctx) ) {
				case 1:
					{
					setState(2154);
					match(TABLE);
					}
					break;
				}
				setState(2157);
				qualifiedName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2158);
				match(TEMP);
				setState(2160);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,82,_ctx) ) {
				case 1:
					{
					setState(2159);
					match(TABLE);
					}
					break;
				}
				setState(2162);
				qualifiedName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2163);
				match(LOCAL);
				setState(2164);
				match(TEMPORARY);
				setState(2166);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,83,_ctx) ) {
				case 1:
					{
					setState(2165);
					match(TABLE);
					}
					break;
				}
				setState(2168);
				qualifiedName();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2169);
				match(LOCAL);
				setState(2170);
				match(TEMP);
				setState(2172);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,84,_ctx) ) {
				case 1:
					{
					setState(2171);
					match(TABLE);
					}
					break;
				}
				setState(2174);
				qualifiedName();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2175);
				match(GLOBAL);
				setState(2176);
				match(TEMPORARY);
				setState(2178);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,85,_ctx) ) {
				case 1:
					{
					setState(2177);
					match(TABLE);
					}
					break;
				}
				setState(2180);
				qualifiedName();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2181);
				match(GLOBAL);
				setState(2182);
				match(TEMP);
				setState(2184);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,86,_ctx) ) {
				case 1:
					{
					setState(2183);
					match(TABLE);
					}
					break;
				}
				setState(2186);
				qualifiedName();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2187);
				match(UNLOGGED);
				setState(2189);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,87,_ctx) ) {
				case 1:
					{
					setState(2188);
					match(TABLE);
					}
					break;
				}
				setState(2191);
				qualifiedName();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2193);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,88,_ctx) ) {
				case 1:
					{
					setState(2192);
					match(TABLE);
					}
					break;
				}
				setState(2195);
				qualifiedName();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2196);
				qualifiedName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CteListContext extends ParserRuleContext {
		public List<CommonTableExprContext> commonTableExpr() {
			return getRuleContexts(CommonTableExprContext.class);
		}
		public CommonTableExprContext commonTableExpr(int i) {
			return getRuleContext(CommonTableExprContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public CteListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cteList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCteList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCteList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCteList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CteListContext cteList() throws RecognitionException {
		CteListContext _localctx = new CteListContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_cteList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2199);
			commonTableExpr();
			setState(2204);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2200);
				match(COMMA_);
				setState(2201);
				commonTableExpr();
				}
				}
				setState(2206);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CommonTableExprContext extends ParserRuleContext {
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public OptNameListContext optNameList() {
			return getRuleContext(OptNameListContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public OptMaterializedContext optMaterialized() {
			return getRuleContext(OptMaterializedContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public PreparableStmtContext preparableStmt() {
			return getRuleContext(PreparableStmtContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public CommonTableExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commonTableExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCommonTableExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCommonTableExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCommonTableExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommonTableExprContext commonTableExpr() throws RecognitionException {
		CommonTableExprContext _localctx = new CommonTableExprContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_commonTableExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2207);
			alias();
			setState(2208);
			optNameList();
			setState(2209);
			match(AS);
			setState(2210);
			optMaterialized();
			setState(2211);
			match(LP_);
			setState(2212);
			preparableStmt();
			setState(2213);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptMaterializedContext extends ParserRuleContext {
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLStatementParser.MATERIALIZED, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public OptMaterializedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optMaterialized; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOptMaterialized(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOptMaterialized(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOptMaterialized(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptMaterializedContext optMaterialized() throws RecognitionException {
		OptMaterializedContext _localctx = new OptMaterializedContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_optMaterialized);
		try {
			setState(2219);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MATERIALIZED:
				enterOuterAlt(_localctx, 1);
				{
				setState(2215);
				match(MATERIALIZED);
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2216);
				match(NOT);
				setState(2217);
				match(MATERIALIZED);
				}
				break;
			case LP_:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptNameListContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public OptNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optNameList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOptNameList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOptNameList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOptNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptNameListContext optNameList() throws RecognitionException {
		OptNameListContext _localctx = new OptNameListContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_optNameList);
		try {
			setState(2226);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LP_:
				enterOuterAlt(_localctx, 1);
				{
				setState(2221);
				match(LP_);
				setState(2222);
				nameList(0);
				setState(2223);
				match(RP_);
				}
				break;
			case EOF:
			case COMMA_:
			case SEMI_:
			case AS:
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PreparableStmtContext extends ParserRuleContext {
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public InsertContext insert() {
			return getRuleContext(InsertContext.class,0);
		}
		public UpdateContext update() {
			return getRuleContext(UpdateContext.class,0);
		}
		public DeleteContext delete() {
			return getRuleContext(DeleteContext.class,0);
		}
		public PreparableStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparableStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterPreparableStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitPreparableStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitPreparableStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PreparableStmtContext preparableStmt() throws RecognitionException {
		PreparableStmtContext _localctx = new PreparableStmtContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_preparableStmt);
		try {
			setState(2232);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,93,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2228);
				select();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2229);
				insert();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2230);
				update();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2231);
				delete();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ForLockingClauseContext extends ParserRuleContext {
		public ForLockingItemsContext forLockingItems() {
			return getRuleContext(ForLockingItemsContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public TerminalNode READ() { return getToken(PostgreSQLStatementParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSQLStatementParser.ONLY, 0); }
		public ForLockingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forLockingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterForLockingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitForLockingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitForLockingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForLockingClauseContext forLockingClause() throws RecognitionException {
		ForLockingClauseContext _localctx = new ForLockingClauseContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_forLockingClause);
		try {
			setState(2238);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,94,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2234);
				forLockingItems(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2235);
				match(FOR);
				setState(2236);
				match(READ);
				setState(2237);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ForLockingItemsContext extends ParserRuleContext {
		public ForLockingItemContext forLockingItem() {
			return getRuleContext(ForLockingItemContext.class,0);
		}
		public ForLockingItemsContext forLockingItems() {
			return getRuleContext(ForLockingItemsContext.class,0);
		}
		public ForLockingItemsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forLockingItems; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterForLockingItems(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitForLockingItems(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitForLockingItems(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForLockingItemsContext forLockingItems() throws RecognitionException {
		return forLockingItems(0);
	}

	private ForLockingItemsContext forLockingItems(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ForLockingItemsContext _localctx = new ForLockingItemsContext(_ctx, _parentState);
		ForLockingItemsContext _prevctx = _localctx;
		int _startState = 102;
		enterRecursionRule(_localctx, 102, RULE_forLockingItems, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2241);
			forLockingItem();
			}
			_ctx.stop = _input.LT(-1);
			setState(2247);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,95,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ForLockingItemsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_forLockingItems);
					setState(2243);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2244);
					forLockingItem();
					}
					} 
				}
				setState(2249);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,95,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ForLockingItemContext extends ParserRuleContext {
		public ForLockingStrengthContext forLockingStrength() {
			return getRuleContext(ForLockingStrengthContext.class,0);
		}
		public LockedRelsListContext lockedRelsList() {
			return getRuleContext(LockedRelsListContext.class,0);
		}
		public NowaitOrSkipContext nowaitOrSkip() {
			return getRuleContext(NowaitOrSkipContext.class,0);
		}
		public ForLockingItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forLockingItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterForLockingItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitForLockingItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitForLockingItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForLockingItemContext forLockingItem() throws RecognitionException {
		ForLockingItemContext _localctx = new ForLockingItemContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_forLockingItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2250);
			forLockingStrength();
			setState(2252);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,96,_ctx) ) {
			case 1:
				{
				setState(2251);
				lockedRelsList();
				}
				break;
			}
			setState(2255);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,97,_ctx) ) {
			case 1:
				{
				setState(2254);
				nowaitOrSkip();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NowaitOrSkipContext extends ParserRuleContext {
		public TerminalNode NOWAIT() { return getToken(PostgreSQLStatementParser.NOWAIT, 0); }
		public TerminalNode APOSTROPHE_SKIP() { return getToken(PostgreSQLStatementParser.APOSTROPHE_SKIP, 0); }
		public TerminalNode LOCKED() { return getToken(PostgreSQLStatementParser.LOCKED, 0); }
		public NowaitOrSkipContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nowaitOrSkip; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterNowaitOrSkip(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitNowaitOrSkip(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitNowaitOrSkip(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NowaitOrSkipContext nowaitOrSkip() throws RecognitionException {
		NowaitOrSkipContext _localctx = new NowaitOrSkipContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_nowaitOrSkip);
		try {
			setState(2260);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOWAIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2257);
				match(NOWAIT);
				}
				break;
			case APOSTROPHE_SKIP:
				enterOuterAlt(_localctx, 2);
				{
				setState(2258);
				match(APOSTROPHE_SKIP);
				setState(2259);
				match(LOCKED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ForLockingStrengthContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLStatementParser.UPDATE, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode KEY() { return getToken(PostgreSQLStatementParser.KEY, 0); }
		public TerminalNode SHARE() { return getToken(PostgreSQLStatementParser.SHARE, 0); }
		public ForLockingStrengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forLockingStrength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterForLockingStrength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitForLockingStrength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitForLockingStrength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForLockingStrengthContext forLockingStrength() throws RecognitionException {
		ForLockingStrengthContext _localctx = new ForLockingStrengthContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_forLockingStrength);
		try {
			setState(2273);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,99,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2262);
				match(FOR);
				setState(2263);
				match(UPDATE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2264);
				match(FOR);
				setState(2265);
				match(NO);
				setState(2266);
				match(KEY);
				setState(2267);
				match(UPDATE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2268);
				match(FOR);
				setState(2269);
				match(SHARE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2270);
				match(FOR);
				setState(2271);
				match(KEY);
				setState(2272);
				match(SHARE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LockedRelsListContext extends ParserRuleContext {
		public TerminalNode OF() { return getToken(PostgreSQLStatementParser.OF, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return getRuleContext(QualifiedNameListContext.class,0);
		}
		public LockedRelsListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockedRelsList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterLockedRelsList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitLockedRelsList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitLockedRelsList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockedRelsListContext lockedRelsList() throws RecognitionException {
		LockedRelsListContext _localctx = new LockedRelsListContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_lockedRelsList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2275);
			match(OF);
			setState(2276);
			qualifiedNameList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QualifiedNameListContext extends ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public QualifiedNameListContext qualifiedNameList() {
			return getRuleContext(QualifiedNameListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public QualifiedNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifiedNameList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterQualifiedNameList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitQualifiedNameList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitQualifiedNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualifiedNameListContext qualifiedNameList() throws RecognitionException {
		return qualifiedNameList(0);
	}

	private QualifiedNameListContext qualifiedNameList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		QualifiedNameListContext _localctx = new QualifiedNameListContext(_ctx, _parentState);
		QualifiedNameListContext _prevctx = _localctx;
		int _startState = 112;
		enterRecursionRule(_localctx, 112, RULE_qualifiedNameList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2279);
			qualifiedName();
			}
			_ctx.stop = _input.LT(-1);
			setState(2286);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,100,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new QualifiedNameListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_qualifiedNameList);
					setState(2281);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2282);
					match(COMMA_);
					setState(2283);
					qualifiedName();
					}
					} 
				}
				setState(2288);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,100,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectLimitContext extends ParserRuleContext {
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public OffsetClauseContext offsetClause() {
			return getRuleContext(OffsetClauseContext.class,0);
		}
		public SelectLimitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectLimit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSelectLimit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSelectLimit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSelectLimit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectLimitContext selectLimit() throws RecognitionException {
		SelectLimitContext _localctx = new SelectLimitContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_selectLimit);
		int _la;
		try {
			setState(2297);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIMIT:
			case FETCH:
				enterOuterAlt(_localctx, 1);
				{
				setState(2289);
				limitClause();
				setState(2291);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OFFSET) {
					{
					setState(2290);
					offsetClause();
					}
				}

				}
				break;
			case OFFSET:
				enterOuterAlt(_localctx, 2);
				{
				setState(2293);
				offsetClause();
				setState(2295);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT || _la==FETCH) {
					{
					setState(2294);
					limitClause();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ValuesClauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(PostgreSQLStatementParser.VALUES, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public ValuesClauseContext valuesClause() {
			return getRuleContext(ValuesClauseContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public ValuesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterValuesClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitValuesClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitValuesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesClauseContext valuesClause() throws RecognitionException {
		return valuesClause(0);
	}

	private ValuesClauseContext valuesClause(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ValuesClauseContext _localctx = new ValuesClauseContext(_ctx, _parentState);
		ValuesClauseContext _prevctx = _localctx;
		int _startState = 116;
		enterRecursionRule(_localctx, 116, RULE_valuesClause, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2300);
			match(VALUES);
			setState(2301);
			match(LP_);
			setState(2302);
			exprList(0);
			setState(2303);
			match(RP_);
			}
			_ctx.stop = _input.LT(-1);
			setState(2313);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,104,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ValuesClauseContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_valuesClause);
					setState(2305);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2306);
					match(COMMA_);
					setState(2307);
					match(LP_);
					setState(2308);
					exprList(0);
					setState(2309);
					match(RP_);
					}
					} 
				}
				setState(2315);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,104,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LimitClauseContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(PostgreSQLStatementParser.LIMIT, 0); }
		public SelectLimitValueContext selectLimitValue() {
			return getRuleContext(SelectLimitValueContext.class,0);
		}
		public TerminalNode FETCH() { return getToken(PostgreSQLStatementParser.FETCH, 0); }
		public FirstOrNextContext firstOrNext() {
			return getRuleContext(FirstOrNextContext.class,0);
		}
		public RowOrRowsContext rowOrRows() {
			return getRuleContext(RowOrRowsContext.class,0);
		}
		public OnlyOrWithTiesContext onlyOrWithTies() {
			return getRuleContext(OnlyOrWithTiesContext.class,0);
		}
		public SelectFetchValueContext selectFetchValue() {
			return getRuleContext(SelectFetchValueContext.class,0);
		}
		public LimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterLimitClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitLimitClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitLimitClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseContext limitClause() throws RecognitionException {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_limitClause);
		try {
			setState(2326);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIMIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2316);
				match(LIMIT);
				setState(2317);
				selectLimitValue();
				}
				break;
			case FETCH:
				enterOuterAlt(_localctx, 2);
				{
				setState(2318);
				match(FETCH);
				setState(2319);
				firstOrNext();
				setState(2321);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
				case 1:
					{
					setState(2320);
					selectFetchValue();
					}
					break;
				}
				setState(2323);
				rowOrRows();
				setState(2324);
				onlyOrWithTies();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OffsetClauseContext extends ParserRuleContext {
		public TerminalNode OFFSET() { return getToken(PostgreSQLStatementParser.OFFSET, 0); }
		public SelectOffsetValueContext selectOffsetValue() {
			return getRuleContext(SelectOffsetValueContext.class,0);
		}
		public RowOrRowsContext rowOrRows() {
			return getRuleContext(RowOrRowsContext.class,0);
		}
		public OffsetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_offsetClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOffsetClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOffsetClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOffsetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OffsetClauseContext offsetClause() throws RecognitionException {
		OffsetClauseContext _localctx = new OffsetClauseContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_offsetClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2328);
			match(OFFSET);
			setState(2329);
			selectOffsetValue();
			setState(2331);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROW || _la==ROWS) {
				{
				setState(2330);
				rowOrRows();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectLimitValueContext extends ParserRuleContext {
		public CExprContext cExpr() {
			return getRuleContext(CExprContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public SelectLimitValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectLimitValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSelectLimitValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSelectLimitValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSelectLimitValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectLimitValueContext selectLimitValue() throws RecognitionException {
		SelectLimitValueContext _localctx = new SelectLimitValueContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_selectLimitValue);
		try {
			setState(2335);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEGIN_DOLLAR_STRING_CONSTANT:
			case PLUS_:
			case MINUS_:
			case LP_:
			case QUESTION_:
			case DOLLAR_:
			case UNICODE_ESCAPE:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXISTS:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case USER:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CURRENT_TIMESTAMP:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case INT2:
			case INT4:
			case INT8:
			case FLOAT:
			case FLOAT4:
			case FLOAT8:
			case VARCHAR:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case BIT:
			case XML:
			case JSON:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case CURRENT_SCHEMA:
			case NORMALIZE:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case KEY:
			case POSITION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case CASE:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case NULL:
			case TRUE:
			case FALSE:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case ARRAY:
			case INTERVAL:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(2333);
				cExpr();
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2334);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectOffsetValueContext extends ParserRuleContext {
		public CExprContext cExpr() {
			return getRuleContext(CExprContext.class,0);
		}
		public SelectOffsetValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectOffsetValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSelectOffsetValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSelectOffsetValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSelectOffsetValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectOffsetValueContext selectOffsetValue() throws RecognitionException {
		SelectOffsetValueContext _localctx = new SelectOffsetValueContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_selectOffsetValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2337);
			cExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectFetchValueContext extends ParserRuleContext {
		public CExprContext cExpr() {
			return getRuleContext(CExprContext.class,0);
		}
		public SelectFetchValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectFetchValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSelectFetchValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSelectFetchValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSelectFetchValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectFetchValueContext selectFetchValue() throws RecognitionException {
		SelectFetchValueContext _localctx = new SelectFetchValueContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_selectFetchValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2339);
			cExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RowOrRowsContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PostgreSQLStatementParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(PostgreSQLStatementParser.ROWS, 0); }
		public RowOrRowsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowOrRows; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterRowOrRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitRowOrRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitRowOrRows(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowOrRowsContext rowOrRows() throws RecognitionException {
		RowOrRowsContext _localctx = new RowOrRowsContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_rowOrRows);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2341);
			_la = _input.LA(1);
			if ( !(_la==ROW || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FirstOrNextContext extends ParserRuleContext {
		public TerminalNode FIRST() { return getToken(PostgreSQLStatementParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(PostgreSQLStatementParser.NEXT, 0); }
		public FirstOrNextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_firstOrNext; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterFirstOrNext(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitFirstOrNext(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitFirstOrNext(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FirstOrNextContext firstOrNext() throws RecognitionException {
		FirstOrNextContext _localctx = new FirstOrNextContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_firstOrNext);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2343);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==NEXT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OnlyOrWithTiesContext extends ParserRuleContext {
		public TerminalNode ONLY() { return getToken(PostgreSQLStatementParser.ONLY, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode TIES() { return getToken(PostgreSQLStatementParser.TIES, 0); }
		public OnlyOrWithTiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onlyOrWithTies; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOnlyOrWithTies(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOnlyOrWithTies(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOnlyOrWithTies(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnlyOrWithTiesContext onlyOrWithTies() throws RecognitionException {
		OnlyOrWithTiesContext _localctx = new OnlyOrWithTiesContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_onlyOrWithTies);
		try {
			setState(2348);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ONLY:
				enterOuterAlt(_localctx, 1);
				{
				setState(2345);
				match(ONLY);
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 2);
				{
				setState(2346);
				match(WITH);
				setState(2347);
				match(TIES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TargetListContext extends ParserRuleContext {
		public TargetElContext targetEl() {
			return getRuleContext(TargetElContext.class,0);
		}
		public TargetListContext targetList() {
			return getRuleContext(TargetListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public TargetListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_targetList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTargetList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTargetList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTargetList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TargetListContext targetList() throws RecognitionException {
		return targetList(0);
	}

	private TargetListContext targetList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TargetListContext _localctx = new TargetListContext(_ctx, _parentState);
		TargetListContext _prevctx = _localctx;
		int _startState = 134;
		enterRecursionRule(_localctx, 134, RULE_targetList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2351);
			targetEl();
			}
			_ctx.stop = _input.LT(-1);
			setState(2358);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,110,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TargetListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_targetList);
					setState(2353);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2354);
					match(COMMA_);
					setState(2355);
					targetEl();
					}
					} 
				}
				setState(2360);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,110,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TargetElContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode DOT_ASTERISK_() { return getToken(PostgreSQLStatementParser.DOT_ASTERISK_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ASTERISK_() { return getToken(PostgreSQLStatementParser.ASTERISK_, 0); }
		public TargetElContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_targetEl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTargetEl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTargetEl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTargetEl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TargetElContext targetEl() throws RecognitionException {
		TargetElContext _localctx = new TargetElContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_targetEl);
		try {
			setState(2378);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,111,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2361);
				colId();
				setState(2362);
				match(DOT_ASTERISK_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2364);
				aExpr(0);
				setState(2365);
				match(AS);
				setState(2366);
				identifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2368);
				aExpr(0);
				setState(2369);
				identifier();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2371);
				aExpr(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2372);
				match(ASTERISK_);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2373);
				colId();
				setState(2374);
				match(DOT_ASTERISK_);
				setState(2375);
				match(AS);
				setState(2376);
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupClauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(PostgreSQLStatementParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public GroupByListContext groupByList() {
			return getRuleContext(GroupByListContext.class,0);
		}
		public GroupClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterGroupClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitGroupClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitGroupClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupClauseContext groupClause() throws RecognitionException {
		GroupClauseContext _localctx = new GroupClauseContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_groupClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2380);
			match(GROUP);
			setState(2381);
			match(BY);
			setState(2382);
			groupByList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupByListContext extends ParserRuleContext {
		public List<GroupByItemContext> groupByItem() {
			return getRuleContexts(GroupByItemContext.class);
		}
		public GroupByItemContext groupByItem(int i) {
			return getRuleContext(GroupByItemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public GroupByListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterGroupByList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitGroupByList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitGroupByList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByListContext groupByList() throws RecognitionException {
		GroupByListContext _localctx = new GroupByListContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_groupByList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2384);
			groupByItem();
			setState(2389);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,112,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2385);
					match(COMMA_);
					setState(2386);
					groupByItem();
					}
					} 
				}
				setState(2391);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,112,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupByItemContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public EmptyGroupingSetContext emptyGroupingSet() {
			return getRuleContext(EmptyGroupingSetContext.class,0);
		}
		public CubeClauseContext cubeClause() {
			return getRuleContext(CubeClauseContext.class,0);
		}
		public RollupClauseContext rollupClause() {
			return getRuleContext(RollupClauseContext.class,0);
		}
		public GroupingSetsClauseContext groupingSetsClause() {
			return getRuleContext(GroupingSetsClauseContext.class,0);
		}
		public GroupByItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterGroupByItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitGroupByItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitGroupByItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByItemContext groupByItem() throws RecognitionException {
		GroupByItemContext _localctx = new GroupByItemContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_groupByItem);
		try {
			setState(2397);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,113,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2392);
				aExpr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2393);
				emptyGroupingSet();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2394);
				cubeClause();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2395);
				rollupClause();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2396);
				groupingSetsClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EmptyGroupingSetContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public EmptyGroupingSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_emptyGroupingSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterEmptyGroupingSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitEmptyGroupingSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitEmptyGroupingSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EmptyGroupingSetContext emptyGroupingSet() throws RecognitionException {
		EmptyGroupingSetContext _localctx = new EmptyGroupingSetContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_emptyGroupingSet);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2399);
			match(LP_);
			setState(2400);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RollupClauseContext extends ParserRuleContext {
		public TerminalNode ROLLUP() { return getToken(PostgreSQLStatementParser.ROLLUP, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public RollupClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollupClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterRollupClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitRollupClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitRollupClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollupClauseContext rollupClause() throws RecognitionException {
		RollupClauseContext _localctx = new RollupClauseContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_rollupClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2402);
			match(ROLLUP);
			setState(2403);
			match(LP_);
			setState(2404);
			exprList(0);
			setState(2405);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CubeClauseContext extends ParserRuleContext {
		public TerminalNode CUBE() { return getToken(PostgreSQLStatementParser.CUBE, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public CubeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cubeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCubeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCubeClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCubeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CubeClauseContext cubeClause() throws RecognitionException {
		CubeClauseContext _localctx = new CubeClauseContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_cubeClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2407);
			match(CUBE);
			setState(2408);
			match(LP_);
			setState(2409);
			exprList(0);
			setState(2410);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupingSetsClauseContext extends ParserRuleContext {
		public TerminalNode GROUPING() { return getToken(PostgreSQLStatementParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(PostgreSQLStatementParser.SETS, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public GroupByListContext groupByList() {
			return getRuleContext(GroupByListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public GroupingSetsClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingSetsClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterGroupingSetsClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitGroupingSetsClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitGroupingSetsClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupingSetsClauseContext groupingSetsClause() throws RecognitionException {
		GroupingSetsClauseContext _localctx = new GroupingSetsClauseContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_groupingSetsClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2412);
			match(GROUPING);
			setState(2413);
			match(SETS);
			setState(2414);
			match(LP_);
			setState(2415);
			groupByList();
			setState(2416);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowClauseContext extends ParserRuleContext {
		public TerminalNode WINDOW() { return getToken(PostgreSQLStatementParser.WINDOW, 0); }
		public WindowDefinitionListContext windowDefinitionList() {
			return getRuleContext(WindowDefinitionListContext.class,0);
		}
		public WindowClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterWindowClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitWindowClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitWindowClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowClauseContext windowClause() throws RecognitionException {
		WindowClauseContext _localctx = new WindowClauseContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_windowClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2418);
			match(WINDOW);
			setState(2419);
			windowDefinitionList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowDefinitionListContext extends ParserRuleContext {
		public WindowDefinitionContext windowDefinition() {
			return getRuleContext(WindowDefinitionContext.class,0);
		}
		public WindowDefinitionListContext windowDefinitionList() {
			return getRuleContext(WindowDefinitionListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public WindowDefinitionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowDefinitionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterWindowDefinitionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitWindowDefinitionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitWindowDefinitionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowDefinitionListContext windowDefinitionList() throws RecognitionException {
		return windowDefinitionList(0);
	}

	private WindowDefinitionListContext windowDefinitionList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		WindowDefinitionListContext _localctx = new WindowDefinitionListContext(_ctx, _parentState);
		WindowDefinitionListContext _prevctx = _localctx;
		int _startState = 154;
		enterRecursionRule(_localctx, 154, RULE_windowDefinitionList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2422);
			windowDefinition();
			}
			_ctx.stop = _input.LT(-1);
			setState(2429);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,114,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new WindowDefinitionListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_windowDefinitionList);
					setState(2424);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2425);
					match(COMMA_);
					setState(2426);
					windowDefinition();
					}
					} 
				}
				setState(2431);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,114,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowDefinitionContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public WindowSpecificationContext windowSpecification() {
			return getRuleContext(WindowSpecificationContext.class,0);
		}
		public WindowDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterWindowDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitWindowDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitWindowDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowDefinitionContext windowDefinition() throws RecognitionException {
		WindowDefinitionContext _localctx = new WindowDefinitionContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_windowDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2432);
			colId();
			setState(2433);
			match(AS);
			setState(2434);
			windowSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowSpecificationContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public ExistingWindowNameContext existingWindowName() {
			return getRuleContext(ExistingWindowNameContext.class,0);
		}
		public PartitionClauseContext partitionClause() {
			return getRuleContext(PartitionClauseContext.class,0);
		}
		public SortClauseContext sortClause() {
			return getRuleContext(SortClauseContext.class,0);
		}
		public FrameClauseContext frameClause() {
			return getRuleContext(FrameClauseContext.class,0);
		}
		public WindowSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterWindowSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitWindowSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitWindowSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowSpecificationContext windowSpecification() throws RecognitionException {
		WindowSpecificationContext _localctx = new WindowSpecificationContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_windowSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2436);
			match(LP_);
			setState(2438);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
			case 1:
				{
				setState(2437);
				existingWindowName();
				}
				break;
			}
			setState(2441);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2440);
				partitionClause();
				}
			}

			setState(2444);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(2443);
				sortClause();
				}
			}

			setState(2447);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROWS || _la==RANGE || _la==GROUPS) {
				{
				setState(2446);
				frameClause();
				}
			}

			setState(2449);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExistingWindowNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public ExistingWindowNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_existingWindowName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterExistingWindowName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitExistingWindowName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitExistingWindowName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExistingWindowNameContext existingWindowName() throws RecognitionException {
		ExistingWindowNameContext _localctx = new ExistingWindowNameContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_existingWindowName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2451);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionClauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PostgreSQLStatementParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public PartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterPartitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitPartitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitPartitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionClauseContext partitionClause() throws RecognitionException {
		PartitionClauseContext _localctx = new PartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_partitionClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2453);
			match(PARTITION);
			setState(2454);
			match(BY);
			setState(2455);
			exprList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FrameClauseContext extends ParserRuleContext {
		public TerminalNode RANGE() { return getToken(PostgreSQLStatementParser.RANGE, 0); }
		public FrameExtentContext frameExtent() {
			return getRuleContext(FrameExtentContext.class,0);
		}
		public OptWindowExclusionClauseContext optWindowExclusionClause() {
			return getRuleContext(OptWindowExclusionClauseContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(PostgreSQLStatementParser.ROWS, 0); }
		public TerminalNode GROUPS() { return getToken(PostgreSQLStatementParser.GROUPS, 0); }
		public FrameClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterFrameClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitFrameClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitFrameClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameClauseContext frameClause() throws RecognitionException {
		FrameClauseContext _localctx = new FrameClauseContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_frameClause);
		try {
			setState(2469);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RANGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2457);
				match(RANGE);
				setState(2458);
				frameExtent();
				setState(2459);
				optWindowExclusionClause();
				}
				break;
			case ROWS:
				enterOuterAlt(_localctx, 2);
				{
				setState(2461);
				match(ROWS);
				setState(2462);
				frameExtent();
				setState(2463);
				optWindowExclusionClause();
				}
				break;
			case GROUPS:
				enterOuterAlt(_localctx, 3);
				{
				setState(2465);
				match(GROUPS);
				setState(2466);
				frameExtent();
				setState(2467);
				optWindowExclusionClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FrameExtentContext extends ParserRuleContext {
		public List<FrameBoundContext> frameBound() {
			return getRuleContexts(FrameBoundContext.class);
		}
		public FrameBoundContext frameBound(int i) {
			return getRuleContext(FrameBoundContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(PostgreSQLStatementParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(PostgreSQLStatementParser.AND, 0); }
		public FrameExtentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameExtent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterFrameExtent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitFrameExtent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitFrameExtent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameExtentContext frameExtent() throws RecognitionException {
		FrameExtentContext _localctx = new FrameExtentContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_frameExtent);
		try {
			setState(2477);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEGIN_DOLLAR_STRING_CONSTANT:
			case OR_:
			case SIGNED_LEFT_SHIFT_:
			case SIGNED_RIGHT_SHIFT_:
			case PLUS_:
			case MINUS_:
			case POUND_:
			case LP_:
			case QUESTION_:
			case DOLLAR_:
			case UNICODE_ESCAPE:
			case JSON_EXTRACT_:
			case JSON_EXTRACT_TEXT_:
			case JSON_PATH_EXTRACT_:
			case JSON_PATH_EXTRACT_TEXT_:
			case JSONB_CONTAIN_RIGHT_:
			case JSONB_CONTAIN_LEFT_:
			case JSONB_CONTAIN_ALL_TOP_KEY_:
			case JSONB_PATH_DELETE_:
			case JSONB_PATH_CONTAIN_ANY_VALUE_:
			case JSONB_PATH_PREDICATE_CHECK_:
			case GEOMETRIC_LENGTH_:
			case GEOMETRIC_DISTANCE_:
			case GEOMETRIC_EXTEND_RIGHT_:
			case GEOMETRIC_EXTEND_LEFT_:
			case GEOMETRIC_STRICT_BELOW_:
			case GEOMETRIC_STRICT_ABOVE_:
			case GEOMETRIC_EXTEND_ABOVE_:
			case GEOMETRIC_EXTEND_BELOW_:
			case GEOMETRIC_BELOW_:
			case GEOMETRIC_ABOVE_:
			case GEOMETRIC_INTERSECT_:
			case GEOMETRIC_PERPENDICULAR_:
			case GEOMETRIC_SAME_AS_:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXISTS:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case USER:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CURRENT_TIMESTAMP:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case INT2:
			case INT4:
			case INT8:
			case FLOAT:
			case FLOAT4:
			case FLOAT8:
			case VARCHAR:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case BIT:
			case XML:
			case JSON:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case CURRENT_SCHEMA:
			case NORMALIZE:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case UNIQUE:
			case KEY:
			case POSITION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case CASE:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case NOT:
			case NULL:
			case TRUE:
			case FALSE:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case ARRAY:
			case INTERVAL:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case DEFAULT:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(2471);
				frameBound();
				}
				break;
			case BETWEEN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2472);
				match(BETWEEN);
				setState(2473);
				frameBound();
				setState(2474);
				match(AND);
				setState(2475);
				frameBound();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FrameBoundContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(PostgreSQLStatementParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(PostgreSQLStatementParser.PRECEDING, 0); }
		public TerminalNode FOLLOWING() { return getToken(PostgreSQLStatementParser.FOLLOWING, 0); }
		public TerminalNode CURRENT() { return getToken(PostgreSQLStatementParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLStatementParser.ROW, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public FrameBoundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameBound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterFrameBound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitFrameBound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitFrameBound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameBoundContext frameBound() throws RecognitionException {
		FrameBoundContext _localctx = new FrameBoundContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_frameBound);
		try {
			setState(2491);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,121,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2479);
				match(UNBOUNDED);
				setState(2480);
				match(PRECEDING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2481);
				match(UNBOUNDED);
				setState(2482);
				match(FOLLOWING);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2483);
				match(CURRENT);
				setState(2484);
				match(ROW);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2485);
				aExpr(0);
				setState(2486);
				match(PRECEDING);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2488);
				aExpr(0);
				setState(2489);
				match(FOLLOWING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptWindowExclusionClauseContext extends ParserRuleContext {
		public TerminalNode EXCLUDE() { return getToken(PostgreSQLStatementParser.EXCLUDE, 0); }
		public TerminalNode CURRENT() { return getToken(PostgreSQLStatementParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLStatementParser.ROW, 0); }
		public TerminalNode GROUP() { return getToken(PostgreSQLStatementParser.GROUP, 0); }
		public TerminalNode TIES() { return getToken(PostgreSQLStatementParser.TIES, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode OTHERS() { return getToken(PostgreSQLStatementParser.OTHERS, 0); }
		public OptWindowExclusionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optWindowExclusionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOptWindowExclusionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOptWindowExclusionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOptWindowExclusionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptWindowExclusionClauseContext optWindowExclusionClause() throws RecognitionException {
		OptWindowExclusionClauseContext _localctx = new OptWindowExclusionClauseContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_optWindowExclusionClause);
		try {
			setState(2504);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,122,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2493);
				match(EXCLUDE);
				setState(2494);
				match(CURRENT);
				setState(2495);
				match(ROW);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2496);
				match(EXCLUDE);
				setState(2497);
				match(GROUP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2498);
				match(EXCLUDE);
				setState(2499);
				match(TIES);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2500);
				match(EXCLUDE);
				setState(2501);
				match(NO);
				setState(2502);
				match(OTHERS);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public AliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AliasContext alias() throws RecognitionException {
		AliasContext _localctx = new AliasContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_alias);
		try {
			setState(2508);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNICODE_ESCAPE:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case XML:
			case JSON:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case PARAM:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case NATIONAL:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(2506);
				identifier();
				}
				break;
			case STRING_:
				enterOuterAlt(_localctx, 2);
				{
				setState(2507);
				match(STRING_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FromClauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public FromListContext fromList() {
			return getRuleContext(FromListContext.class,0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterFromClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitFromClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitFromClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_fromClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2510);
			match(FROM);
			setState(2511);
			fromList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FromListContext extends ParserRuleContext {
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public FromListContext fromList() {
			return getRuleContext(FromListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public FromListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterFromList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitFromList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitFromList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromListContext fromList() throws RecognitionException {
		return fromList(0);
	}

	private FromListContext fromList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		FromListContext _localctx = new FromListContext(_ctx, _parentState);
		FromListContext _prevctx = _localctx;
		int _startState = 176;
		enterRecursionRule(_localctx, 176, RULE_fromList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2514);
			tableReference(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(2521);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,124,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new FromListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_fromList);
					setState(2516);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2517);
					match(COMMA_);
					setState(2518);
					tableReference(0);
					}
					} 
				}
				setState(2523);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,124,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableReferenceContext extends ParserRuleContext {
		public RelationExprContext relationExpr() {
			return getRuleContext(RelationExprContext.class,0);
		}
		public AliasClauseContext aliasClause() {
			return getRuleContext(AliasClauseContext.class,0);
		}
		public TablesampleClauseContext tablesampleClause() {
			return getRuleContext(TablesampleClauseContext.class,0);
		}
		public FunctionTableContext functionTable() {
			return getRuleContext(FunctionTableContext.class,0);
		}
		public FuncAliasClauseContext funcAliasClause() {
			return getRuleContext(FuncAliasClauseContext.class,0);
		}
		public TerminalNode LATERAL() { return getToken(PostgreSQLStatementParser.LATERAL, 0); }
		public XmlTableContext xmlTable() {
			return getRuleContext(XmlTableContext.class,0);
		}
		public SelectWithParensContext selectWithParens() {
			return getRuleContext(SelectWithParensContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public JoinedTableContext joinedTable() {
			return getRuleContext(JoinedTableContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTableReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTableReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTableReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableReferenceContext tableReference() throws RecognitionException {
		return tableReference(0);
	}

	private TableReferenceContext tableReference(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TableReferenceContext _localctx = new TableReferenceContext(_ctx, _parentState);
		TableReferenceContext _prevctx = _localctx;
		int _startState = 178;
		enterRecursionRule(_localctx, 178, RULE_tableReference, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2569);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,134,_ctx) ) {
			case 1:
				{
				setState(2525);
				relationExpr();
				setState(2527);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,125,_ctx) ) {
				case 1:
					{
					setState(2526);
					aliasClause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(2529);
				relationExpr();
				setState(2531);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & -1702650966907551743L) != 0) || ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & -36028934466307075L) != 0) || ((((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & 283126353889277L) != 0) || ((((_la - 241)) & ~0x3f) == 0 && ((1L << (_la - 241)) & -545622264849L) != 0) || ((((_la - 305)) & ~0x3f) == 0 && ((1L << (_la - 305)) & -1L) != 0) || ((((_la - 369)) & ~0x3f) == 0 && ((1L << (_la - 369)) & 9895604649983L) != 0) || ((((_la - 437)) & ~0x3f) == 0 && ((1L << (_la - 437)) & 703687505272567L) != 0) || ((((_la - 505)) & ~0x3f) == 0 && ((1L << (_la - 505)) & 7138750043982826433L) != 0) || ((((_la - 569)) & ~0x3f) == 0 && ((1L << (_la - 569)) & 2173569L) != 0)) {
					{
					setState(2530);
					aliasClause();
					}
				}

				setState(2533);
				tablesampleClause();
				}
				break;
			case 3:
				{
				setState(2535);
				functionTable();
				setState(2537);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,127,_ctx) ) {
				case 1:
					{
					setState(2536);
					funcAliasClause();
					}
					break;
				}
				}
				break;
			case 4:
				{
				setState(2539);
				match(LATERAL);
				setState(2540);
				functionTable();
				setState(2542);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,128,_ctx) ) {
				case 1:
					{
					setState(2541);
					funcAliasClause();
					}
					break;
				}
				}
				break;
			case 5:
				{
				setState(2544);
				xmlTable();
				setState(2546);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,129,_ctx) ) {
				case 1:
					{
					setState(2545);
					aliasClause();
					}
					break;
				}
				}
				break;
			case 6:
				{
				setState(2548);
				match(LATERAL);
				setState(2549);
				xmlTable();
				setState(2551);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,130,_ctx) ) {
				case 1:
					{
					setState(2550);
					aliasClause();
					}
					break;
				}
				}
				break;
			case 7:
				{
				setState(2553);
				selectWithParens();
				setState(2555);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,131,_ctx) ) {
				case 1:
					{
					setState(2554);
					aliasClause();
					}
					break;
				}
				}
				break;
			case 8:
				{
				setState(2557);
				match(LATERAL);
				setState(2558);
				selectWithParens();
				setState(2560);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,132,_ctx) ) {
				case 1:
					{
					setState(2559);
					aliasClause();
					}
					break;
				}
				}
				break;
			case 9:
				{
				setState(2562);
				match(LP_);
				setState(2563);
				tableReference(0);
				setState(2564);
				joinedTable();
				setState(2565);
				match(RP_);
				setState(2567);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,133,_ctx) ) {
				case 1:
					{
					setState(2566);
					aliasClause();
					}
					break;
				}
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(2575);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,135,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TableReferenceContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_tableReference);
					setState(2571);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2572);
					joinedTable();
					}
					} 
				}
				setState(2577);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,135,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JoinedTableContext extends ParserRuleContext {
		public CrossJoinTypeContext crossJoinType() {
			return getRuleContext(CrossJoinTypeContext.class,0);
		}
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public InnerJoinTypeContext innerJoinType() {
			return getRuleContext(InnerJoinTypeContext.class,0);
		}
		public JoinQualContext joinQual() {
			return getRuleContext(JoinQualContext.class,0);
		}
		public OuterJoinTypeContext outerJoinType() {
			return getRuleContext(OuterJoinTypeContext.class,0);
		}
		public NaturalJoinTypeContext naturalJoinType() {
			return getRuleContext(NaturalJoinTypeContext.class,0);
		}
		public JoinedTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinedTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterJoinedTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitJoinedTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitJoinedTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinedTableContext joinedTable() throws RecognitionException {
		JoinedTableContext _localctx = new JoinedTableContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_joinedTable);
		try {
			setState(2592);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CROSS:
				enterOuterAlt(_localctx, 1);
				{
				setState(2578);
				crossJoinType();
				setState(2579);
				tableReference(0);
				}
				break;
			case JOIN:
			case INNER:
				enterOuterAlt(_localctx, 2);
				{
				setState(2581);
				innerJoinType();
				setState(2582);
				tableReference(0);
				setState(2583);
				joinQual();
				}
				break;
			case FULL:
			case LEFT:
			case RIGHT:
				enterOuterAlt(_localctx, 3);
				{
				setState(2585);
				outerJoinType();
				setState(2586);
				tableReference(0);
				setState(2587);
				joinQual();
				}
				break;
			case NATURAL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2589);
				naturalJoinType();
				setState(2590);
				tableReference(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CrossJoinTypeContext extends ParserRuleContext {
		public TerminalNode CROSS() { return getToken(PostgreSQLStatementParser.CROSS, 0); }
		public TerminalNode JOIN() { return getToken(PostgreSQLStatementParser.JOIN, 0); }
		public CrossJoinTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_crossJoinType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCrossJoinType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCrossJoinType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCrossJoinType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CrossJoinTypeContext crossJoinType() throws RecognitionException {
		CrossJoinTypeContext _localctx = new CrossJoinTypeContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_crossJoinType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2594);
			match(CROSS);
			setState(2595);
			match(JOIN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InnerJoinTypeContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(PostgreSQLStatementParser.JOIN, 0); }
		public TerminalNode INNER() { return getToken(PostgreSQLStatementParser.INNER, 0); }
		public InnerJoinTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_innerJoinType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterInnerJoinType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitInnerJoinType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitInnerJoinType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InnerJoinTypeContext innerJoinType() throws RecognitionException {
		InnerJoinTypeContext _localctx = new InnerJoinTypeContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_innerJoinType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2598);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INNER) {
				{
				setState(2597);
				match(INNER);
				}
			}

			setState(2600);
			match(JOIN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OuterJoinTypeContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(PostgreSQLStatementParser.JOIN, 0); }
		public TerminalNode FULL() { return getToken(PostgreSQLStatementParser.FULL, 0); }
		public TerminalNode LEFT() { return getToken(PostgreSQLStatementParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(PostgreSQLStatementParser.RIGHT, 0); }
		public TerminalNode OUTER() { return getToken(PostgreSQLStatementParser.OUTER, 0); }
		public OuterJoinTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outerJoinType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOuterJoinType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOuterJoinType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOuterJoinType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OuterJoinTypeContext outerJoinType() throws RecognitionException {
		OuterJoinTypeContext _localctx = new OuterJoinTypeContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_outerJoinType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2602);
			_la = _input.LA(1);
			if ( !(((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & 25L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2604);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTER) {
				{
				setState(2603);
				match(OUTER);
				}
			}

			setState(2606);
			match(JOIN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NaturalJoinTypeContext extends ParserRuleContext {
		public TerminalNode NATURAL() { return getToken(PostgreSQLStatementParser.NATURAL, 0); }
		public TerminalNode JOIN() { return getToken(PostgreSQLStatementParser.JOIN, 0); }
		public TerminalNode INNER() { return getToken(PostgreSQLStatementParser.INNER, 0); }
		public TerminalNode FULL() { return getToken(PostgreSQLStatementParser.FULL, 0); }
		public TerminalNode LEFT() { return getToken(PostgreSQLStatementParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(PostgreSQLStatementParser.RIGHT, 0); }
		public TerminalNode OUTER() { return getToken(PostgreSQLStatementParser.OUTER, 0); }
		public NaturalJoinTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_naturalJoinType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterNaturalJoinType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitNaturalJoinType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitNaturalJoinType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NaturalJoinTypeContext naturalJoinType() throws RecognitionException {
		NaturalJoinTypeContext _localctx = new NaturalJoinTypeContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_naturalJoinType);
		int _la;
		try {
			setState(2619);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,141,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2608);
				match(NATURAL);
				setState(2610);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INNER) {
					{
					setState(2609);
					match(INNER);
					}
				}

				setState(2612);
				match(JOIN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2613);
				match(NATURAL);
				setState(2614);
				_la = _input.LA(1);
				if ( !(((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & 25L) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2616);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(2615);
					match(OUTER);
					}
				}

				setState(2618);
				match(JOIN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JoinOuterContext extends ParserRuleContext {
		public TerminalNode OUTER() { return getToken(PostgreSQLStatementParser.OUTER, 0); }
		public JoinOuterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinOuter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterJoinOuter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitJoinOuter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitJoinOuter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinOuterContext joinOuter() throws RecognitionException {
		JoinOuterContext _localctx = new JoinOuterContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_joinOuter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2621);
			match(OUTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JoinQualContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public JoinQualContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinQual; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterJoinQual(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitJoinQual(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitJoinQual(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinQualContext joinQual() throws RecognitionException {
		JoinQualContext _localctx = new JoinQualContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_joinQual);
		try {
			setState(2630);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(2623);
				match(USING);
				setState(2624);
				match(LP_);
				setState(2625);
				nameList(0);
				setState(2626);
				match(RP_);
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				setState(2628);
				match(ON);
				setState(2629);
				aExpr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RelationExprContext extends ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode ASTERISK_() { return getToken(PostgreSQLStatementParser.ASTERISK_, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSQLStatementParser.ONLY, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public RelationExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relationExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterRelationExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitRelationExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitRelationExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RelationExprContext relationExpr() throws RecognitionException {
		RelationExprContext _localctx = new RelationExprContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_relationExpr);
		try {
			setState(2643);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,143,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2632);
				qualifiedName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2633);
				qualifiedName();
				setState(2634);
				match(ASTERISK_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2636);
				match(ONLY);
				setState(2637);
				qualifiedName();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2638);
				match(ONLY);
				setState(2639);
				match(LP_);
				setState(2640);
				qualifiedName();
				setState(2641);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PostgreSQLStatementParser.WHERE, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterWhereClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitWhereClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitWhereClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhereClauseContext whereClause() throws RecognitionException {
		WhereClauseContext _localctx = new WhereClauseContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_whereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2645);
			match(WHERE);
			setState(2646);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WhereOrCurrentClauseContext extends ParserRuleContext {
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(PostgreSQLStatementParser.WHERE, 0); }
		public TerminalNode CURRENT() { return getToken(PostgreSQLStatementParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLStatementParser.OF, 0); }
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public WhereOrCurrentClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereOrCurrentClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterWhereOrCurrentClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitWhereOrCurrentClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitWhereOrCurrentClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhereOrCurrentClauseContext whereOrCurrentClause() throws RecognitionException {
		WhereOrCurrentClauseContext _localctx = new WhereOrCurrentClauseContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_whereOrCurrentClause);
		try {
			setState(2653);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,144,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2648);
				whereClause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2649);
				match(WHERE);
				setState(2650);
				match(CURRENT);
				setState(2651);
				match(OF);
				setState(2652);
				cursorName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HavingClauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(PostgreSQLStatementParser.HAVING, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterHavingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitHavingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitHavingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2655);
			match(HAVING);
			setState(2656);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DoStatementContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(PostgreSQLStatementParser.DO, 0); }
		public DostmtOptListContext dostmtOptList() {
			return getRuleContext(DostmtOptListContext.class,0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDoStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDoStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDoStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DoStatementContext doStatement() throws RecognitionException {
		DoStatementContext _localctx = new DoStatementContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_doStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2658);
			match(DO);
			setState(2659);
			dostmtOptList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DostmtOptListContext extends ParserRuleContext {
		public List<DostmtOptItemContext> dostmtOptItem() {
			return getRuleContexts(DostmtOptItemContext.class);
		}
		public DostmtOptItemContext dostmtOptItem(int i) {
			return getRuleContext(DostmtOptItemContext.class,i);
		}
		public DostmtOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dostmtOptList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDostmtOptList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDostmtOptList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDostmtOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DostmtOptListContext dostmtOptList() throws RecognitionException {
		DostmtOptListContext _localctx = new DostmtOptListContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_dostmtOptList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2662); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2661);
				dostmtOptItem();
				}
				}
				setState(2664); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==LANGUAGE || _la==STRING_ );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DostmtOptItemContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLStatementParser.LANGUAGE, 0); }
		public NonReservedWordOrSconstContext nonReservedWordOrSconst() {
			return getRuleContext(NonReservedWordOrSconstContext.class,0);
		}
		public DostmtOptItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dostmtOptItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDostmtOptItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDostmtOptItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDostmtOptItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DostmtOptItemContext dostmtOptItem() throws RecognitionException {
		DostmtOptItemContext _localctx = new DostmtOptItemContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_dostmtOptItem);
		try {
			setState(2669);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_:
				enterOuterAlt(_localctx, 1);
				{
				setState(2666);
				match(STRING_);
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2667);
				match(LANGUAGE);
				setState(2668);
				nonReservedWordOrSconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CopyContext extends ParserRuleContext {
		public CopyWithTableOrQueryContext copyWithTableOrQuery() {
			return getRuleContext(CopyWithTableOrQueryContext.class,0);
		}
		public CopyWithTableOrQueryBinaryCsvContext copyWithTableOrQueryBinaryCsv() {
			return getRuleContext(CopyWithTableOrQueryBinaryCsvContext.class,0);
		}
		public CopyWithTableBinaryContext copyWithTableBinary() {
			return getRuleContext(CopyWithTableBinaryContext.class,0);
		}
		public CopyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCopy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCopy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCopy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyContext copy() throws RecognitionException {
		CopyContext _localctx = new CopyContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_copy);
		try {
			setState(2674);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,147,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2671);
				copyWithTableOrQuery();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2672);
				copyWithTableOrQueryBinaryCsv();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2673);
				copyWithTableBinary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CopyWithTableOrQueryContext extends ParserRuleContext {
		public TerminalNode COPY() { return getToken(PostgreSQLStatementParser.COPY, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public List<TerminalNode> LP_() { return getTokens(PostgreSQLStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(PostgreSQLStatementParser.LP_, i);
		}
		public PreparableStmtContext preparableStmt() {
			return getRuleContext(PreparableStmtContext.class,0);
		}
		public List<TerminalNode> RP_() { return getTokens(PostgreSQLStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(PostgreSQLStatementParser.RP_, i);
		}
		public FileNameContext fileName() {
			return getRuleContext(FileNameContext.class,0);
		}
		public TerminalNode PROGRAM() { return getToken(PostgreSQLStatementParser.PROGRAM, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public TerminalNode STDIN() { return getToken(PostgreSQLStatementParser.STDIN, 0); }
		public TerminalNode STDOUT() { return getToken(PostgreSQLStatementParser.STDOUT, 0); }
		public CopyOptionListContext copyOptionList() {
			return getRuleContext(CopyOptionListContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public CopyWithTableOrQueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyWithTableOrQuery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCopyWithTableOrQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCopyWithTableOrQuery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCopyWithTableOrQuery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyWithTableOrQueryContext copyWithTableOrQuery() throws RecognitionException {
		CopyWithTableOrQueryContext _localctx = new CopyWithTableOrQueryContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_copyWithTableOrQuery);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2676);
			match(COPY);
			setState(2685);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNICODE_ESCAPE:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case XML:
			case JSON:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case PARAM:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case NATIONAL:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case IDENTIFIER_:
				{
				setState(2677);
				qualifiedName();
				setState(2679);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(2678);
					columnNames();
					}
				}

				}
				break;
			case LP_:
				{
				setState(2681);
				match(LP_);
				setState(2682);
				preparableStmt();
				setState(2683);
				match(RP_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2687);
			_la = _input.LA(1);
			if ( !(_la==FROM || _la==TO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2693);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_:
				{
				setState(2688);
				fileName();
				}
				break;
			case PROGRAM:
				{
				setState(2689);
				match(PROGRAM);
				setState(2690);
				match(STRING_);
				}
				break;
			case STDIN:
				{
				setState(2691);
				match(STDIN);
				}
				break;
			case STDOUT:
				{
				setState(2692);
				match(STDOUT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2702);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_ || _la==WITH) {
				{
				setState(2696);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2695);
					match(WITH);
					}
				}

				setState(2698);
				match(LP_);
				setState(2699);
				copyOptionList();
				setState(2700);
				match(RP_);
				}
			}

			setState(2705);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(2704);
				whereClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CopyOptionListContext extends ParserRuleContext {
		public List<CopyOptionContext> copyOption() {
			return getRuleContexts(CopyOptionContext.class);
		}
		public CopyOptionContext copyOption(int i) {
			return getRuleContext(CopyOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public CopyOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCopyOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCopyOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCopyOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyOptionListContext copyOptionList() throws RecognitionException {
		CopyOptionListContext _localctx = new CopyOptionListContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_copyOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2707);
			copyOption();
			setState(2712);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2708);
				match(COMMA_);
				setState(2709);
				copyOption();
				}
				}
				setState(2714);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CopyOptionContext extends ParserRuleContext {
		public TerminalNode FORMAT() { return getToken(PostgreSQLStatementParser.FORMAT, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FREEZE() { return getToken(PostgreSQLStatementParser.FREEZE, 0); }
		public BooleanValueContext booleanValue() {
			return getRuleContext(BooleanValueContext.class,0);
		}
		public TerminalNode DELIMITER() { return getToken(PostgreSQLStatementParser.DELIMITER, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public TerminalNode NULL() { return getToken(PostgreSQLStatementParser.NULL, 0); }
		public TerminalNode HEADER() { return getToken(PostgreSQLStatementParser.HEADER, 0); }
		public TerminalNode QUOTE() { return getToken(PostgreSQLStatementParser.QUOTE, 0); }
		public TerminalNode ESCAPE() { return getToken(PostgreSQLStatementParser.ESCAPE, 0); }
		public TerminalNode FORCE_QUOTE() { return getToken(PostgreSQLStatementParser.FORCE_QUOTE, 0); }
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public TerminalNode ASTERISK_() { return getToken(PostgreSQLStatementParser.ASTERISK_, 0); }
		public TerminalNode FORCE_NOT_NULL() { return getToken(PostgreSQLStatementParser.FORCE_NOT_NULL, 0); }
		public TerminalNode FORCE_NULL() { return getToken(PostgreSQLStatementParser.FORCE_NULL, 0); }
		public TerminalNode ENCODING() { return getToken(PostgreSQLStatementParser.ENCODING, 0); }
		public CopyOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCopyOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCopyOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCopyOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyOptionContext copyOption() throws RecognitionException {
		CopyOptionContext _localctx = new CopyOptionContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_copyOption);
		int _la;
		try {
			setState(2744);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FORMAT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2715);
				match(FORMAT);
				setState(2716);
				identifier();
				}
				break;
			case FREEZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2717);
				match(FREEZE);
				setState(2719);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OFF || ((((_la - 485)) & ~0x3f) == 0 && ((1L << (_la - 485)) & 6145L) != 0) || _la==NUMBER_) {
					{
					setState(2718);
					booleanValue();
					}
				}

				}
				break;
			case DELIMITER:
				enterOuterAlt(_localctx, 3);
				{
				setState(2721);
				match(DELIMITER);
				setState(2722);
				match(STRING_);
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2723);
				match(NULL);
				setState(2724);
				match(STRING_);
				}
				break;
			case HEADER:
				enterOuterAlt(_localctx, 5);
				{
				setState(2725);
				match(HEADER);
				setState(2727);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OFF || ((((_la - 485)) & ~0x3f) == 0 && ((1L << (_la - 485)) & 6145L) != 0) || _la==NUMBER_) {
					{
					setState(2726);
					booleanValue();
					}
				}

				}
				break;
			case QUOTE:
				enterOuterAlt(_localctx, 6);
				{
				setState(2729);
				match(QUOTE);
				setState(2730);
				match(STRING_);
				}
				break;
			case ESCAPE:
				enterOuterAlt(_localctx, 7);
				{
				setState(2731);
				match(ESCAPE);
				setState(2732);
				match(STRING_);
				}
				break;
			case FORCE_QUOTE:
				enterOuterAlt(_localctx, 8);
				{
				setState(2733);
				match(FORCE_QUOTE);
				setState(2736);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LP_:
					{
					setState(2734);
					columnNames();
					}
					break;
				case ASTERISK_:
					{
					setState(2735);
					match(ASTERISK_);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case FORCE_NOT_NULL:
				enterOuterAlt(_localctx, 9);
				{
				setState(2738);
				match(FORCE_NOT_NULL);
				setState(2739);
				columnNames();
				}
				break;
			case FORCE_NULL:
				enterOuterAlt(_localctx, 10);
				{
				setState(2740);
				match(FORCE_NULL);
				setState(2741);
				columnNames();
				}
				break;
			case ENCODING:
				enterOuterAlt(_localctx, 11);
				{
				setState(2742);
				match(ENCODING);
				setState(2743);
				match(STRING_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CopyWithTableOrQueryBinaryCsvContext extends ParserRuleContext {
		public TerminalNode COPY() { return getToken(PostgreSQLStatementParser.COPY, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public PreparableStmtContext preparableStmt() {
			return getRuleContext(PreparableStmtContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public FileNameContext fileName() {
			return getRuleContext(FileNameContext.class,0);
		}
		public TerminalNode STDIN() { return getToken(PostgreSQLStatementParser.STDIN, 0); }
		public TerminalNode STDOUT() { return getToken(PostgreSQLStatementParser.STDOUT, 0); }
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode BINARY() { return getToken(PostgreSQLStatementParser.BINARY, 0); }
		public TerminalNode DELIMITER() { return getToken(PostgreSQLStatementParser.DELIMITER, 0); }
		public List<TerminalNode> STRING_() { return getTokens(PostgreSQLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(PostgreSQLStatementParser.STRING_, i);
		}
		public List<TerminalNode> NULL() { return getTokens(PostgreSQLStatementParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(PostgreSQLStatementParser.NULL, i);
		}
		public TerminalNode CSV() { return getToken(PostgreSQLStatementParser.CSV, 0); }
		public List<TerminalNode> AS() { return getTokens(PostgreSQLStatementParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(PostgreSQLStatementParser.AS, i);
		}
		public TerminalNode HEADER() { return getToken(PostgreSQLStatementParser.HEADER, 0); }
		public List<TerminalNode> QUOTE() { return getTokens(PostgreSQLStatementParser.QUOTE); }
		public TerminalNode QUOTE(int i) {
			return getToken(PostgreSQLStatementParser.QUOTE, i);
		}
		public TerminalNode ESCAPE() { return getToken(PostgreSQLStatementParser.ESCAPE, 0); }
		public List<TerminalNode> FORCE() { return getTokens(PostgreSQLStatementParser.FORCE); }
		public TerminalNode FORCE(int i) {
			return getToken(PostgreSQLStatementParser.FORCE, i);
		}
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode ASTERISK_() { return getToken(PostgreSQLStatementParser.ASTERISK_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public CopyWithTableOrQueryBinaryCsvContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyWithTableOrQueryBinaryCsv; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCopyWithTableOrQueryBinaryCsv(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCopyWithTableOrQueryBinaryCsv(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCopyWithTableOrQueryBinaryCsv(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyWithTableOrQueryBinaryCsvContext copyWithTableOrQueryBinaryCsv() throws RecognitionException {
		CopyWithTableOrQueryBinaryCsvContext _localctx = new CopyWithTableOrQueryBinaryCsvContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_copyWithTableOrQueryBinaryCsv);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2746);
			match(COPY);
			setState(2755);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNICODE_ESCAPE:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case XML:
			case JSON:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case PARAM:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case NATIONAL:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case IDENTIFIER_:
				{
				setState(2747);
				qualifiedName();
				setState(2749);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(2748);
					columnNames();
					}
				}

				}
				break;
			case LP_:
				{
				setState(2751);
				match(LP_);
				setState(2752);
				preparableStmt();
				setState(2753);
				match(RP_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2757);
			_la = _input.LA(1);
			if ( !(_la==FROM || _la==TO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2761);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_:
				{
				setState(2758);
				fileName();
				}
				break;
			case STDIN:
				{
				setState(2759);
				match(STDIN);
				}
				break;
			case STDOUT:
				{
				setState(2760);
				match(STDOUT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2831);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,179,_ctx) ) {
			case 1:
				{
				setState(2764);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2763);
					match(WITH);
					}
				}

				setState(2767);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(2766);
					match(BINARY);
					}
				}

				setState(2774);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DELIMITER) {
					{
					setState(2769);
					match(DELIMITER);
					setState(2771);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(2770);
						match(AS);
						}
					}

					setState(2773);
					match(STRING_);
					}
				}

				setState(2781);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULL) {
					{
					setState(2776);
					match(NULL);
					setState(2778);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(2777);
						match(AS);
						}
					}

					setState(2780);
					match(STRING_);
					}
				}

				setState(2829);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CSV) {
					{
					setState(2783);
					match(CSV);
					setState(2785);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==HEADER) {
						{
						setState(2784);
						match(HEADER);
						}
					}

					setState(2792);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==QUOTE) {
						{
						setState(2787);
						match(QUOTE);
						setState(2789);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==AS) {
							{
							setState(2788);
							match(AS);
							}
						}

						setState(2791);
						match(STRING_);
						}
					}

					setState(2799);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ESCAPE) {
						{
						setState(2794);
						match(ESCAPE);
						setState(2796);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==AS) {
							{
							setState(2795);
							match(AS);
							}
						}

						setState(2798);
						match(STRING_);
						}
					}

					setState(2812);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,174,_ctx) ) {
					case 1:
						{
						setState(2801);
						match(FORCE);
						setState(2802);
						match(NOT);
						setState(2803);
						match(NULL);
						setState(2804);
						columnName();
						setState(2809);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA_) {
							{
							{
							setState(2805);
							match(COMMA_);
							setState(2806);
							columnName();
							}
							}
							setState(2811);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					}
					setState(2827);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==FORCE) {
						{
						setState(2814);
						match(FORCE);
						setState(2815);
						match(QUOTE);
						setState(2825);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case UNICODE_ESCAPE:
						case ADMIN:
						case ESCAPE:
						case EXCLUDE:
						case MOD:
						case PARTITION:
						case UNKNOWN:
						case ALWAYS:
						case CASCADE:
						case GENERATED:
						case ISOLATION:
						case LEVEL:
						case NO:
						case OPTION:
						case PRIVILEGES:
						case READ:
						case ROLE:
						case ROWS:
						case START:
						case TRANSACTION:
						case ACTION:
						case CACHE:
						case CHARACTERISTICS:
						case CLUSTER:
						case COMMENTS:
						case CONSTRAINTS:
						case CYCLE:
						case DATA:
						case DATABASE:
						case DEFAULTS:
						case DEFERRED:
						case DEPENDS:
						case DOMAIN:
						case EXCLUDING:
						case EXECUTE:
						case EXTENDED:
						case EXTENSION:
						case EXTERNAL:
						case FILTER:
						case FIRST:
						case FOLLOWING:
						case FORCE:
						case GLOBAL:
						case IDENTITY:
						case IMMEDIATE:
						case INCLUDING:
						case INCREMENT:
						case INDEXES:
						case INHERIT:
						case INHERITS:
						case INCLUDE:
						case LANGUAGE:
						case LARGE:
						case LAST:
						case LOGGED:
						case MAIN:
						case MATCH:
						case MAXVALUE:
						case MINVALUE:
						case NOTHING:
						case NULLS:
						case OBJECT:
						case OIDS:
						case OVER:
						case OWNED:
						case OWNER:
						case PARTIAL:
						case PLAIN:
						case PRECEDING:
						case RANGE:
						case RENAME:
						case REPLICA:
						case RESET:
						case RESTART:
						case RESTRICT:
						case ROUTINE:
						case RULE:
						case SECURITY:
						case SEQUENCE:
						case SESSION:
						case SHOW:
						case SIMPLE:
						case STATISTICS:
						case STORAGE:
						case TABLESPACE:
						case TEMP:
						case TEMPORARY:
						case UNBOUNDED:
						case UNLOGGED:
						case VALID:
						case VALIDATE:
						case WITHIN:
						case WITHOUT:
						case ZONE:
						case OF:
						case UESCAPE:
						case GROUPS:
						case RECURSIVE:
						case BYTEA:
						case ENUM:
						case POINT:
						case LSEG:
						case BOX:
						case PATH:
						case POLYGON:
						case CIRCLE:
						case XML:
						case JSON:
						case ORDINALITY:
						case NFC:
						case NFD:
						case NFKC:
						case NFKD:
						case REF:
						case PASSING:
						case VERSION:
						case YES:
						case STANDALONE:
						case MATERIALIZED:
						case OPERATOR:
						case SHARE:
						case ROLLUP:
						case DOCUMENT:
						case NORMALIZED:
						case NOWAIT:
						case LOCKED:
						case COLUMNS:
						case CONTENT:
						case STRIP:
						case WHITESPACE:
						case CONFLICT:
						case OVERRIDING:
						case SYSTEM:
						case ABORT:
						case ABSOLUTE:
						case ACCESS:
						case AFTER:
						case AGGREGATE:
						case ALSO:
						case ATTACH:
						case ATTRIBUTE:
						case BACKWARD:
						case BEFORE:
						case ASSERTION:
						case ASSIGNMENT:
						case CONTINUE:
						case CONVERSION:
						case COPY:
						case COST:
						case CSV:
						case CALLED:
						case CATALOG:
						case CHAIN:
						case CHECKPOINT:
						case CLASS:
						case CONFIGURATION:
						case COMMENT:
						case DETACH:
						case DICTIONARY:
						case EXPRESSION:
						case INSENSITIVE:
						case DISCARD:
						case OFF:
						case INSTEAD:
						case EXPLAIN:
						case INPUT:
						case INLINE:
						case PARALLEL:
						case LEAKPROOF:
						case COMMITTED:
						case ENCODING:
						case IMPLICIT:
						case DELIMITER:
						case CURSOR:
						case EACH:
						case EVENT:
						case DEALLOCATE:
						case CONNECTION:
						case DECLARE:
						case FAMILY:
						case FORWARD:
						case EXCLUSIVE:
						case FUNCTIONS:
						case LOCATION:
						case LABEL:
						case DELIMITERS:
						case HANDLER:
						case HEADER:
						case IMMUTABLE:
						case GRANTED:
						case HOLD:
						case MAPPING:
						case OLD:
						case METHOD:
						case LOAD:
						case LISTEN:
						case MODE:
						case MOVE:
						case PROCEDURAL:
						case PARSER:
						case PROCEDURES:
						case ENCRYPTED:
						case PUBLICATION:
						case PROGRAM:
						case REFERENCING:
						case PLANS:
						case REINDEX:
						case PRIOR:
						case PASSWORD:
						case RELATIVE:
						case QUOTE:
						case ROUTINES:
						case REPLACE:
						case SNAPSHOT:
						case REFRESH:
						case PREPARE:
						case OPTIONS:
						case IMPORT:
						case INVOKER:
						case NEW:
						case PREPARED:
						case SCROLL:
						case SEQUENCES:
						case SYSID:
						case REASSIGN:
						case SERVER:
						case SUBSCRIPTION:
						case SEARCH:
						case SCHEMAS:
						case RECHECK:
						case POLICY:
						case NOTIFY:
						case LOCK:
						case RELEASE:
						case SERIALIZABLE:
						case RETURNS:
						case STATEMENT:
						case STDIN:
						case STDOUT:
						case TABLES:
						case SUPPORT:
						case STABLE:
						case TEMPLATE:
						case UNENCRYPTED:
						case VIEWS:
						case UNCOMMITTED:
						case TRANSFORM:
						case UNLISTEN:
						case TRUSTED:
						case VALIDATOR:
						case UNTIL:
						case VACUUM:
						case VOLATILE:
						case STORED:
						case WRITE:
						case STRICT:
						case TYPES:
						case WRAPPER:
						case WORK:
						case PARAM:
						case INSERT:
						case UPDATE:
						case DELETE:
						case ALTER:
						case DROP:
						case TRUNCATE:
						case SCHEMA:
						case REVOKE:
						case ADD:
						case SET:
						case TABLE:
						case INDEX:
						case CONSTRAINT:
						case KEY:
						case FUNCTION:
						case TRIGGER:
						case PROCEDURE:
						case VIEW:
						case IF:
						case BY:
						case BEGIN:
						case COMMIT:
						case ROLLBACK:
						case SAVEPOINT:
						case DOUBLE:
						case INTERVAL:
						case TIME:
						case TIMESTAMP:
						case YEAR:
						case QUARTER:
						case MONTH:
						case WEEK:
						case DAY:
						case HOUR:
						case MINUTE:
						case SECOND:
						case CURRENT:
						case ENABLE:
						case DISABLE:
						case CALL:
						case PRESERVE:
						case DEFINER:
						case SQL:
						case CASCADED:
						case LOCAL:
						case CLOSE:
						case NEXT:
						case NAME:
						case COLLATION:
						case NAMES:
						case TYPE:
						case TEXT:
						case REPEATABLE:
						case VARYING:
						case NATIONAL:
						case VALUE:
						case TIES:
						case CUBE:
						case SETS:
						case OTHERS:
						case AT:
						case IDENTIFIER_:
							{
							setState(2816);
							columnName();
							setState(2821);
							_errHandler.sync(this);
							_la = _input.LA(1);
							while (_la==COMMA_) {
								{
								{
								setState(2817);
								match(COMMA_);
								setState(2818);
								columnName();
								}
								}
								setState(2823);
								_errHandler.sync(this);
								_la = _input.LA(1);
							}
							}
							break;
						case ASTERISK_:
							{
							setState(2824);
							match(ASTERISK_);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}

					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CopyWithTableBinaryContext extends ParserRuleContext {
		public TerminalNode COPY() { return getToken(PostgreSQLStatementParser.COPY, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public FileNameContext fileName() {
			return getRuleContext(FileNameContext.class,0);
		}
		public TerminalNode STDIN() { return getToken(PostgreSQLStatementParser.STDIN, 0); }
		public TerminalNode STDOUT() { return getToken(PostgreSQLStatementParser.STDOUT, 0); }
		public TerminalNode BINARY() { return getToken(PostgreSQLStatementParser.BINARY, 0); }
		public TerminalNode DELIMITERS() { return getToken(PostgreSQLStatementParser.DELIMITERS, 0); }
		public List<TerminalNode> STRING_() { return getTokens(PostgreSQLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(PostgreSQLStatementParser.STRING_, i);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode NULL() { return getToken(PostgreSQLStatementParser.NULL, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public CopyWithTableBinaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyWithTableBinary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCopyWithTableBinary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCopyWithTableBinary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCopyWithTableBinary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyWithTableBinaryContext copyWithTableBinary() throws RecognitionException {
		CopyWithTableBinaryContext _localctx = new CopyWithTableBinaryContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_copyWithTableBinary);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2833);
			match(COPY);
			setState(2835);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BINARY) {
				{
				setState(2834);
				match(BINARY);
				}
			}

			setState(2837);
			qualifiedName();
			setState(2838);
			_la = _input.LA(1);
			if ( !(_la==FROM || _la==TO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2842);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_:
				{
				setState(2839);
				fileName();
				}
				break;
			case STDIN:
				{
				setState(2840);
				match(STDIN);
				}
				break;
			case STDOUT:
				{
				setState(2841);
				match(STDOUT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2849);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DELIMITERS || _la==USING) {
				{
				setState(2845);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2844);
					match(USING);
					}
				}

				setState(2847);
				match(DELIMITERS);
				setState(2848);
				match(STRING_);
				}
			}

			setState(2855);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2851);
				match(WITH);
				setState(2852);
				match(NULL);
				setState(2853);
				match(AS);
				setState(2854);
				match(STRING_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ParameterMarkerContext extends ParserRuleContext {
		public TerminalNode QUESTION_() { return getToken(PostgreSQLStatementParser.QUESTION_, 0); }
		public LiteralsTypeContext literalsType() {
			return getRuleContext(LiteralsTypeContext.class,0);
		}
		public TerminalNode DOLLAR_() { return getToken(PostgreSQLStatementParser.DOLLAR_, 0); }
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public ParameterMarkerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterMarker; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterParameterMarker(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitParameterMarker(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitParameterMarker(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterMarkerContext parameterMarker() throws RecognitionException {
		ParameterMarkerContext _localctx = new ParameterMarkerContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_parameterMarker);
		try {
			setState(2863);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case QUESTION_:
				enterOuterAlt(_localctx, 1);
				{
				setState(2857);
				match(QUESTION_);
				setState(2859);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,185,_ctx) ) {
				case 1:
					{
					setState(2858);
					literalsType();
					}
					break;
				}
				}
				break;
			case DOLLAR_:
				enterOuterAlt(_localctx, 2);
				{
				setState(2861);
				match(DOLLAR_);
				setState(2862);
				match(NUMBER_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReservedKeywordContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TerminalNode ANALYSE() { return getToken(PostgreSQLStatementParser.ANALYSE, 0); }
		public TerminalNode ANALYZE() { return getToken(PostgreSQLStatementParser.ANALYZE, 0); }
		public TerminalNode AND() { return getToken(PostgreSQLStatementParser.AND, 0); }
		public TerminalNode ANY() { return getToken(PostgreSQLStatementParser.ANY, 0); }
		public TerminalNode ARRAY() { return getToken(PostgreSQLStatementParser.ARRAY, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public TerminalNode ASC() { return getToken(PostgreSQLStatementParser.ASC, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(PostgreSQLStatementParser.ASYMMETRIC, 0); }
		public TerminalNode BOTH() { return getToken(PostgreSQLStatementParser.BOTH, 0); }
		public TerminalNode CASE() { return getToken(PostgreSQLStatementParser.CASE, 0); }
		public TerminalNode CAST() { return getToken(PostgreSQLStatementParser.CAST, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSQLStatementParser.CHECK, 0); }
		public TerminalNode COLLATE() { return getToken(PostgreSQLStatementParser.COLLATE, 0); }
		public TerminalNode COLUMN() { return getToken(PostgreSQLStatementParser.COLUMN, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLStatementParser.CONSTRAINT, 0); }
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode CURRENT_CATALOG() { return getToken(PostgreSQLStatementParser.CURRENT_CATALOG, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(PostgreSQLStatementParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_ROLE() { return getToken(PostgreSQLStatementParser.CURRENT_ROLE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(PostgreSQLStatementParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(PostgreSQLStatementParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLStatementParser.CURRENT_USER, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public TerminalNode DEFERRABLE() { return getToken(PostgreSQLStatementParser.DEFERRABLE, 0); }
		public TerminalNode DESC() { return getToken(PostgreSQLStatementParser.DESC, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLStatementParser.DISTINCT, 0); }
		public TerminalNode DO() { return getToken(PostgreSQLStatementParser.DO, 0); }
		public TerminalNode ELSE() { return getToken(PostgreSQLStatementParser.ELSE, 0); }
		public TerminalNode END() { return getToken(PostgreSQLStatementParser.END, 0); }
		public TerminalNode EXCEPT() { return getToken(PostgreSQLStatementParser.EXCEPT, 0); }
		public TerminalNode FALSE() { return getToken(PostgreSQLStatementParser.FALSE, 0); }
		public TerminalNode FETCH() { return getToken(PostgreSQLStatementParser.FETCH, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLStatementParser.FOREIGN, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public TerminalNode GRANT() { return getToken(PostgreSQLStatementParser.GRANT, 0); }
		public TerminalNode GROUP() { return getToken(PostgreSQLStatementParser.GROUP, 0); }
		public TerminalNode HAVING() { return getToken(PostgreSQLStatementParser.HAVING, 0); }
		public TerminalNode IN() { return getToken(PostgreSQLStatementParser.IN, 0); }
		public TerminalNode INITIALLY() { return getToken(PostgreSQLStatementParser.INITIALLY, 0); }
		public TerminalNode INTERSECT() { return getToken(PostgreSQLStatementParser.INTERSECT, 0); }
		public TerminalNode INTO() { return getToken(PostgreSQLStatementParser.INTO, 0); }
		public TerminalNode LATERAL() { return getToken(PostgreSQLStatementParser.LATERAL, 0); }
		public TerminalNode LEADING() { return getToken(PostgreSQLStatementParser.LEADING, 0); }
		public TerminalNode LIMIT() { return getToken(PostgreSQLStatementParser.LIMIT, 0); }
		public TerminalNode LOCALTIME() { return getToken(PostgreSQLStatementParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(PostgreSQLStatementParser.LOCALTIMESTAMP, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PostgreSQLStatementParser.NULL, 0); }
		public TerminalNode OFFSET() { return getToken(PostgreSQLStatementParser.OFFSET, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSQLStatementParser.ONLY, 0); }
		public TerminalNode OR() { return getToken(PostgreSQLStatementParser.OR, 0); }
		public TerminalNode ORDER() { return getToken(PostgreSQLStatementParser.ORDER, 0); }
		public TerminalNode PLACING() { return getToken(PostgreSQLStatementParser.PLACING, 0); }
		public TerminalNode PRIMARY() { return getToken(PostgreSQLStatementParser.PRIMARY, 0); }
		public TerminalNode REFERENCES() { return getToken(PostgreSQLStatementParser.REFERENCES, 0); }
		public TerminalNode RETURNING() { return getToken(PostgreSQLStatementParser.RETURNING, 0); }
		public TerminalNode SELECT() { return getToken(PostgreSQLStatementParser.SELECT, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLStatementParser.SESSION_USER, 0); }
		public TerminalNode SOME() { return getToken(PostgreSQLStatementParser.SOME, 0); }
		public TerminalNode SYMMETRIC() { return getToken(PostgreSQLStatementParser.SYMMETRIC, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public TerminalNode THEN() { return getToken(PostgreSQLStatementParser.THEN, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode TRAILING() { return getToken(PostgreSQLStatementParser.TRAILING, 0); }
		public TerminalNode TRUE() { return getToken(PostgreSQLStatementParser.TRUE, 0); }
		public TerminalNode UNION() { return getToken(PostgreSQLStatementParser.UNION, 0); }
		public TerminalNode UNIQUE() { return getToken(PostgreSQLStatementParser.UNIQUE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLStatementParser.USER, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public TerminalNode VARIADIC() { return getToken(PostgreSQLStatementParser.VARIADIC, 0); }
		public TerminalNode WHEN() { return getToken(PostgreSQLStatementParser.WHEN, 0); }
		public TerminalNode WHERE() { return getToken(PostgreSQLStatementParser.WHERE, 0); }
		public TerminalNode WINDOW() { return getToken(PostgreSQLStatementParser.WINDOW, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public ReservedKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reservedKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterReservedKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitReservedKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitReservedKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReservedKeywordContext reservedKeyword() throws RecognitionException {
		ReservedKeywordContext _localctx = new ReservedKeywordContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_reservedKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2865);
			_la = _input.LA(1);
			if ( !(((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 4503600734937345L) != 0) || _la==ONLY || _la==SESSION_USER || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & 15481982712545283L) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & -4756997303757217263L) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & -9223350012211623973L) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & 9579969L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NumberLiteralsContext extends ParserRuleContext {
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public TerminalNode MINUS_() { return getToken(PostgreSQLStatementParser.MINUS_, 0); }
		public LiteralsTypeContext literalsType() {
			return getRuleContext(LiteralsTypeContext.class,0);
		}
		public NumberLiteralsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numberLiterals; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterNumberLiterals(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitNumberLiterals(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitNumberLiterals(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumberLiteralsContext numberLiterals() throws RecognitionException {
		NumberLiteralsContext _localctx = new NumberLiteralsContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_numberLiterals);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2868);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MINUS_) {
				{
				setState(2867);
				match(MINUS_);
				}
			}

			setState(2870);
			match(NUMBER_);
			setState(2872);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TYPE_CAST_) {
				{
				setState(2871);
				literalsType();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LiteralsTypeContext extends ParserRuleContext {
		public TerminalNode TYPE_CAST_() { return getToken(PostgreSQLStatementParser.TYPE_CAST_, 0); }
		public TerminalNode IDENTIFIER_() { return getToken(PostgreSQLStatementParser.IDENTIFIER_, 0); }
		public LiteralsTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literalsType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterLiteralsType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitLiteralsType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitLiteralsType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LiteralsTypeContext literalsType() throws RecognitionException {
		LiteralsTypeContext _localctx = new LiteralsTypeContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_literalsType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2874);
			match(TYPE_CAST_);
			setState(2875);
			match(IDENTIFIER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentifierContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(PostgreSQLStatementParser.IDENTIFIER_, 0); }
		public TerminalNode UNICODE_ESCAPE() { return getToken(PostgreSQLStatementParser.UNICODE_ESCAPE, 0); }
		public UescapeContext uescape() {
			return getRuleContext(UescapeContext.class,0);
		}
		public UnreservedWordContext unreservedWord() {
			return getRuleContext(UnreservedWordContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_identifier);
		int _la;
		try {
			setState(2885);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNICODE_ESCAPE:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(2878);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNICODE_ESCAPE) {
					{
					setState(2877);
					match(UNICODE_ESCAPE);
					}
				}

				setState(2880);
				match(IDENTIFIER_);
				setState(2882);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,190,_ctx) ) {
				case 1:
					{
					setState(2881);
					uescape();
					}
					break;
				}
				}
				break;
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case XML:
			case JSON:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case PARAM:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case NATIONAL:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2884);
				unreservedWord();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UescapeContext extends ParserRuleContext {
		public TerminalNode UESCAPE() { return getToken(PostgreSQLStatementParser.UESCAPE, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public UescapeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uescape; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterUescape(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitUescape(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitUescape(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UescapeContext uescape() throws RecognitionException {
		UescapeContext _localctx = new UescapeContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_uescape);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2887);
			match(UESCAPE);
			setState(2888);
			match(STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnreservedWordContext extends ParserRuleContext {
		public TerminalNode ABORT() { return getToken(PostgreSQLStatementParser.ABORT, 0); }
		public TerminalNode ABSOLUTE() { return getToken(PostgreSQLStatementParser.ABSOLUTE, 0); }
		public TerminalNode ACCESS() { return getToken(PostgreSQLStatementParser.ACCESS, 0); }
		public TerminalNode ACTION() { return getToken(PostgreSQLStatementParser.ACTION, 0); }
		public TerminalNode ADD() { return getToken(PostgreSQLStatementParser.ADD, 0); }
		public TerminalNode ADMIN() { return getToken(PostgreSQLStatementParser.ADMIN, 0); }
		public TerminalNode AFTER() { return getToken(PostgreSQLStatementParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLStatementParser.AGGREGATE, 0); }
		public TerminalNode ALSO() { return getToken(PostgreSQLStatementParser.ALSO, 0); }
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode ALWAYS() { return getToken(PostgreSQLStatementParser.ALWAYS, 0); }
		public TerminalNode ASSERTION() { return getToken(PostgreSQLStatementParser.ASSERTION, 0); }
		public TerminalNode ASSIGNMENT() { return getToken(PostgreSQLStatementParser.ASSIGNMENT, 0); }
		public TerminalNode AT() { return getToken(PostgreSQLStatementParser.AT, 0); }
		public TerminalNode ATTACH() { return getToken(PostgreSQLStatementParser.ATTACH, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PostgreSQLStatementParser.ATTRIBUTE, 0); }
		public TerminalNode BACKWARD() { return getToken(PostgreSQLStatementParser.BACKWARD, 0); }
		public TerminalNode BEFORE() { return getToken(PostgreSQLStatementParser.BEFORE, 0); }
		public TerminalNode BEGIN() { return getToken(PostgreSQLStatementParser.BEGIN, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public TerminalNode BYTEA() { return getToken(PostgreSQLStatementParser.BYTEA, 0); }
		public TerminalNode BOX() { return getToken(PostgreSQLStatementParser.BOX, 0); }
		public TerminalNode CACHE() { return getToken(PostgreSQLStatementParser.CACHE, 0); }
		public TerminalNode CALL() { return getToken(PostgreSQLStatementParser.CALL, 0); }
		public TerminalNode CALLED() { return getToken(PostgreSQLStatementParser.CALLED, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLStatementParser.CASCADE, 0); }
		public TerminalNode CASCADED() { return getToken(PostgreSQLStatementParser.CASCADED, 0); }
		public TerminalNode CATALOG() { return getToken(PostgreSQLStatementParser.CATALOG, 0); }
		public TerminalNode CHAIN() { return getToken(PostgreSQLStatementParser.CHAIN, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(PostgreSQLStatementParser.CHARACTERISTICS, 0); }
		public TerminalNode CHECKPOINT() { return getToken(PostgreSQLStatementParser.CHECKPOINT, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLStatementParser.CLASS, 0); }
		public TerminalNode CLOSE() { return getToken(PostgreSQLStatementParser.CLOSE, 0); }
		public TerminalNode CLUSTER() { return getToken(PostgreSQLStatementParser.CLUSTER, 0); }
		public TerminalNode COLUMNS() { return getToken(PostgreSQLStatementParser.COLUMNS, 0); }
		public TerminalNode COMMENT() { return getToken(PostgreSQLStatementParser.COMMENT, 0); }
		public TerminalNode COMMENTS() { return getToken(PostgreSQLStatementParser.COMMENTS, 0); }
		public TerminalNode COMMIT() { return getToken(PostgreSQLStatementParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(PostgreSQLStatementParser.COMMITTED, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLStatementParser.CONFIGURATION, 0); }
		public TerminalNode CONFLICT() { return getToken(PostgreSQLStatementParser.CONFLICT, 0); }
		public TerminalNode CONNECTION() { return getToken(PostgreSQLStatementParser.CONNECTION, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PostgreSQLStatementParser.CONSTRAINTS, 0); }
		public TerminalNode CONTENT() { return getToken(PostgreSQLStatementParser.CONTENT, 0); }
		public TerminalNode CONTINUE() { return getToken(PostgreSQLStatementParser.CONTINUE, 0); }
		public TerminalNode CONVERSION() { return getToken(PostgreSQLStatementParser.CONVERSION, 0); }
		public TerminalNode COPY() { return getToken(PostgreSQLStatementParser.COPY, 0); }
		public TerminalNode COST() { return getToken(PostgreSQLStatementParser.COST, 0); }
		public TerminalNode CSV() { return getToken(PostgreSQLStatementParser.CSV, 0); }
		public TerminalNode CUBE() { return getToken(PostgreSQLStatementParser.CUBE, 0); }
		public TerminalNode CURRENT() { return getToken(PostgreSQLStatementParser.CURRENT, 0); }
		public TerminalNode CURSOR() { return getToken(PostgreSQLStatementParser.CURSOR, 0); }
		public TerminalNode CYCLE() { return getToken(PostgreSQLStatementParser.CYCLE, 0); }
		public TerminalNode CIRCLE() { return getToken(PostgreSQLStatementParser.CIRCLE, 0); }
		public TerminalNode DATA() { return getToken(PostgreSQLStatementParser.DATA, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLStatementParser.DATABASE, 0); }
		public TerminalNode DAY() { return getToken(PostgreSQLStatementParser.DAY, 0); }
		public TerminalNode DEALLOCATE() { return getToken(PostgreSQLStatementParser.DEALLOCATE, 0); }
		public TerminalNode DECLARE() { return getToken(PostgreSQLStatementParser.DECLARE, 0); }
		public TerminalNode DEFAULTS() { return getToken(PostgreSQLStatementParser.DEFAULTS, 0); }
		public TerminalNode DEFERRED() { return getToken(PostgreSQLStatementParser.DEFERRED, 0); }
		public TerminalNode DEFINER() { return getToken(PostgreSQLStatementParser.DEFINER, 0); }
		public TerminalNode DELETE() { return getToken(PostgreSQLStatementParser.DELETE, 0); }
		public TerminalNode DELIMITER() { return getToken(PostgreSQLStatementParser.DELIMITER, 0); }
		public TerminalNode DELIMITERS() { return getToken(PostgreSQLStatementParser.DELIMITERS, 0); }
		public TerminalNode DEPENDS() { return getToken(PostgreSQLStatementParser.DEPENDS, 0); }
		public TerminalNode DETACH() { return getToken(PostgreSQLStatementParser.DETACH, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLStatementParser.DICTIONARY, 0); }
		public TerminalNode DISABLE() { return getToken(PostgreSQLStatementParser.DISABLE, 0); }
		public TerminalNode DISCARD() { return getToken(PostgreSQLStatementParser.DISCARD, 0); }
		public TerminalNode DOCUMENT() { return getToken(PostgreSQLStatementParser.DOCUMENT, 0); }
		public TerminalNode DOMAIN() { return getToken(PostgreSQLStatementParser.DOMAIN, 0); }
		public TerminalNode DOUBLE() { return getToken(PostgreSQLStatementParser.DOUBLE, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode EACH() { return getToken(PostgreSQLStatementParser.EACH, 0); }
		public TerminalNode ENABLE() { return getToken(PostgreSQLStatementParser.ENABLE, 0); }
		public TerminalNode ENCODING() { return getToken(PostgreSQLStatementParser.ENCODING, 0); }
		public TerminalNode ENCRYPTED() { return getToken(PostgreSQLStatementParser.ENCRYPTED, 0); }
		public TerminalNode ENUM() { return getToken(PostgreSQLStatementParser.ENUM, 0); }
		public TerminalNode ESCAPE() { return getToken(PostgreSQLStatementParser.ESCAPE, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLStatementParser.EVENT, 0); }
		public TerminalNode EXCLUDE() { return getToken(PostgreSQLStatementParser.EXCLUDE, 0); }
		public TerminalNode EXCLUDING() { return getToken(PostgreSQLStatementParser.EXCLUDING, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(PostgreSQLStatementParser.EXCLUSIVE, 0); }
		public TerminalNode EXECUTE() { return getToken(PostgreSQLStatementParser.EXECUTE, 0); }
		public TerminalNode EXPLAIN() { return getToken(PostgreSQLStatementParser.EXPLAIN, 0); }
		public TerminalNode EXPRESSION() { return getToken(PostgreSQLStatementParser.EXPRESSION, 0); }
		public TerminalNode EXTENDED() { return getToken(PostgreSQLStatementParser.EXTENDED, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLStatementParser.EXTENSION, 0); }
		public TerminalNode EXTERNAL() { return getToken(PostgreSQLStatementParser.EXTERNAL, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLStatementParser.FAMILY, 0); }
		public TerminalNode FILTER() { return getToken(PostgreSQLStatementParser.FILTER, 0); }
		public TerminalNode FIRST() { return getToken(PostgreSQLStatementParser.FIRST, 0); }
		public TerminalNode FOLLOWING() { return getToken(PostgreSQLStatementParser.FOLLOWING, 0); }
		public TerminalNode FORCE() { return getToken(PostgreSQLStatementParser.FORCE, 0); }
		public TerminalNode FORWARD() { return getToken(PostgreSQLStatementParser.FORWARD, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLStatementParser.FUNCTION, 0); }
		public TerminalNode FUNCTIONS() { return getToken(PostgreSQLStatementParser.FUNCTIONS, 0); }
		public TerminalNode GENERATED() { return getToken(PostgreSQLStatementParser.GENERATED, 0); }
		public TerminalNode GLOBAL() { return getToken(PostgreSQLStatementParser.GLOBAL, 0); }
		public TerminalNode GRANTED() { return getToken(PostgreSQLStatementParser.GRANTED, 0); }
		public TerminalNode GROUPS() { return getToken(PostgreSQLStatementParser.GROUPS, 0); }
		public TerminalNode HANDLER() { return getToken(PostgreSQLStatementParser.HANDLER, 0); }
		public TerminalNode HEADER() { return getToken(PostgreSQLStatementParser.HEADER, 0); }
		public TerminalNode HOLD() { return getToken(PostgreSQLStatementParser.HOLD, 0); }
		public TerminalNode HOUR() { return getToken(PostgreSQLStatementParser.HOUR, 0); }
		public TerminalNode IDENTITY() { return getToken(PostgreSQLStatementParser.IDENTITY, 0); }
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSQLStatementParser.IMMEDIATE, 0); }
		public TerminalNode IMMUTABLE() { return getToken(PostgreSQLStatementParser.IMMUTABLE, 0); }
		public TerminalNode IMPLICIT() { return getToken(PostgreSQLStatementParser.IMPLICIT, 0); }
		public TerminalNode IMPORT() { return getToken(PostgreSQLStatementParser.IMPORT, 0); }
		public TerminalNode INCLUDE() { return getToken(PostgreSQLStatementParser.INCLUDE, 0); }
		public TerminalNode INCLUDING() { return getToken(PostgreSQLStatementParser.INCLUDING, 0); }
		public TerminalNode INCREMENT() { return getToken(PostgreSQLStatementParser.INCREMENT, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLStatementParser.INDEX, 0); }
		public TerminalNode INDEXES() { return getToken(PostgreSQLStatementParser.INDEXES, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLStatementParser.INHERIT, 0); }
		public TerminalNode INHERITS() { return getToken(PostgreSQLStatementParser.INHERITS, 0); }
		public TerminalNode INLINE() { return getToken(PostgreSQLStatementParser.INLINE, 0); }
		public TerminalNode INPUT() { return getToken(PostgreSQLStatementParser.INPUT, 0); }
		public TerminalNode INSENSITIVE() { return getToken(PostgreSQLStatementParser.INSENSITIVE, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLStatementParser.INSERT, 0); }
		public TerminalNode INSTEAD() { return getToken(PostgreSQLStatementParser.INSTEAD, 0); }
		public TerminalNode INVOKER() { return getToken(PostgreSQLStatementParser.INVOKER, 0); }
		public TerminalNode INTERVAL() { return getToken(PostgreSQLStatementParser.INTERVAL, 0); }
		public TerminalNode ISOLATION() { return getToken(PostgreSQLStatementParser.ISOLATION, 0); }
		public TerminalNode KEY() { return getToken(PostgreSQLStatementParser.KEY, 0); }
		public TerminalNode LABEL() { return getToken(PostgreSQLStatementParser.LABEL, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLStatementParser.LANGUAGE, 0); }
		public TerminalNode LARGE() { return getToken(PostgreSQLStatementParser.LARGE, 0); }
		public TerminalNode LAST() { return getToken(PostgreSQLStatementParser.LAST, 0); }
		public TerminalNode LEAKPROOF() { return getToken(PostgreSQLStatementParser.LEAKPROOF, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLStatementParser.LEVEL, 0); }
		public TerminalNode LISTEN() { return getToken(PostgreSQLStatementParser.LISTEN, 0); }
		public TerminalNode LOAD() { return getToken(PostgreSQLStatementParser.LOAD, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLStatementParser.LOCAL, 0); }
		public TerminalNode LOCATION() { return getToken(PostgreSQLStatementParser.LOCATION, 0); }
		public TerminalNode LOCK() { return getToken(PostgreSQLStatementParser.LOCK, 0); }
		public TerminalNode LOCKED() { return getToken(PostgreSQLStatementParser.LOCKED, 0); }
		public TerminalNode LOGGED() { return getToken(PostgreSQLStatementParser.LOGGED, 0); }
		public TerminalNode LSEG() { return getToken(PostgreSQLStatementParser.LSEG, 0); }
		public TerminalNode MAIN() { return getToken(PostgreSQLStatementParser.MAIN, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSQLStatementParser.MAPPING, 0); }
		public TerminalNode MATCH() { return getToken(PostgreSQLStatementParser.MATCH, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLStatementParser.MATERIALIZED, 0); }
		public TerminalNode MAXVALUE() { return getToken(PostgreSQLStatementParser.MAXVALUE, 0); }
		public TerminalNode METHOD() { return getToken(PostgreSQLStatementParser.METHOD, 0); }
		public TerminalNode MINUTE() { return getToken(PostgreSQLStatementParser.MINUTE, 0); }
		public TerminalNode MINVALUE() { return getToken(PostgreSQLStatementParser.MINVALUE, 0); }
		public TerminalNode MODE() { return getToken(PostgreSQLStatementParser.MODE, 0); }
		public TerminalNode MONTH() { return getToken(PostgreSQLStatementParser.MONTH, 0); }
		public TerminalNode MOVE() { return getToken(PostgreSQLStatementParser.MOVE, 0); }
		public TerminalNode MOD() { return getToken(PostgreSQLStatementParser.MOD, 0); }
		public TerminalNode NAME() { return getToken(PostgreSQLStatementParser.NAME, 0); }
		public TerminalNode NAMES() { return getToken(PostgreSQLStatementParser.NAMES, 0); }
		public TerminalNode NATIONAL() { return getToken(PostgreSQLStatementParser.NATIONAL, 0); }
		public TerminalNode NEW() { return getToken(PostgreSQLStatementParser.NEW, 0); }
		public TerminalNode NEXT() { return getToken(PostgreSQLStatementParser.NEXT, 0); }
		public TerminalNode NFC() { return getToken(PostgreSQLStatementParser.NFC, 0); }
		public TerminalNode NFD() { return getToken(PostgreSQLStatementParser.NFD, 0); }
		public TerminalNode NFKC() { return getToken(PostgreSQLStatementParser.NFKC, 0); }
		public TerminalNode NFKD() { return getToken(PostgreSQLStatementParser.NFKD, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode NORMALIZED() { return getToken(PostgreSQLStatementParser.NORMALIZED, 0); }
		public TerminalNode NOTHING() { return getToken(PostgreSQLStatementParser.NOTHING, 0); }
		public TerminalNode NOTIFY() { return getToken(PostgreSQLStatementParser.NOTIFY, 0); }
		public TerminalNode NOWAIT() { return getToken(PostgreSQLStatementParser.NOWAIT, 0); }
		public TerminalNode NULLS() { return getToken(PostgreSQLStatementParser.NULLS, 0); }
		public TerminalNode OBJECT() { return getToken(PostgreSQLStatementParser.OBJECT, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLStatementParser.OF, 0); }
		public TerminalNode OFF() { return getToken(PostgreSQLStatementParser.OFF, 0); }
		public TerminalNode OIDS() { return getToken(PostgreSQLStatementParser.OIDS, 0); }
		public TerminalNode OLD() { return getToken(PostgreSQLStatementParser.OLD, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLStatementParser.OPERATOR, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLStatementParser.OPTION, 0); }
		public TerminalNode OPTIONS() { return getToken(PostgreSQLStatementParser.OPTIONS, 0); }
		public TerminalNode ORDINALITY() { return getToken(PostgreSQLStatementParser.ORDINALITY, 0); }
		public TerminalNode OTHERS() { return getToken(PostgreSQLStatementParser.OTHERS, 0); }
		public TerminalNode OVER() { return getToken(PostgreSQLStatementParser.OVER, 0); }
		public TerminalNode OVERRIDING() { return getToken(PostgreSQLStatementParser.OVERRIDING, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLStatementParser.OWNED, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public TerminalNode PARALLEL() { return getToken(PostgreSQLStatementParser.PARALLEL, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLStatementParser.PARSER, 0); }
		public TerminalNode PARTIAL() { return getToken(PostgreSQLStatementParser.PARTIAL, 0); }
		public TerminalNode PARTITION() { return getToken(PostgreSQLStatementParser.PARTITION, 0); }
		public TerminalNode PASSING() { return getToken(PostgreSQLStatementParser.PASSING, 0); }
		public TerminalNode PASSWORD() { return getToken(PostgreSQLStatementParser.PASSWORD, 0); }
		public TerminalNode PATH() { return getToken(PostgreSQLStatementParser.PATH, 0); }
		public TerminalNode PLAIN() { return getToken(PostgreSQLStatementParser.PLAIN, 0); }
		public TerminalNode PLANS() { return getToken(PostgreSQLStatementParser.PLANS, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSQLStatementParser.POLICY, 0); }
		public TerminalNode POINT() { return getToken(PostgreSQLStatementParser.POINT, 0); }
		public TerminalNode POLYGON() { return getToken(PostgreSQLStatementParser.POLYGON, 0); }
		public TerminalNode PRECEDING() { return getToken(PostgreSQLStatementParser.PRECEDING, 0); }
		public TerminalNode PREPARE() { return getToken(PostgreSQLStatementParser.PREPARE, 0); }
		public TerminalNode PREPARED() { return getToken(PostgreSQLStatementParser.PREPARED, 0); }
		public TerminalNode PRESERVE() { return getToken(PostgreSQLStatementParser.PRESERVE, 0); }
		public TerminalNode PRIOR() { return getToken(PostgreSQLStatementParser.PRIOR, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PostgreSQLStatementParser.PRIVILEGES, 0); }
		public TerminalNode PROCEDURAL() { return getToken(PostgreSQLStatementParser.PROCEDURAL, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLStatementParser.PROCEDURE, 0); }
		public TerminalNode PROCEDURES() { return getToken(PostgreSQLStatementParser.PROCEDURES, 0); }
		public TerminalNode PROGRAM() { return getToken(PostgreSQLStatementParser.PROGRAM, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLStatementParser.PUBLICATION, 0); }
		public TerminalNode QUARTER() { return getToken(PostgreSQLStatementParser.QUARTER, 0); }
		public TerminalNode QUOTE() { return getToken(PostgreSQLStatementParser.QUOTE, 0); }
		public TerminalNode RANGE() { return getToken(PostgreSQLStatementParser.RANGE, 0); }
		public TerminalNode READ() { return getToken(PostgreSQLStatementParser.READ, 0); }
		public TerminalNode REASSIGN() { return getToken(PostgreSQLStatementParser.REASSIGN, 0); }
		public TerminalNode RECHECK() { return getToken(PostgreSQLStatementParser.RECHECK, 0); }
		public TerminalNode RECURSIVE() { return getToken(PostgreSQLStatementParser.RECURSIVE, 0); }
		public TerminalNode REF() { return getToken(PostgreSQLStatementParser.REF, 0); }
		public TerminalNode REFERENCING() { return getToken(PostgreSQLStatementParser.REFERENCING, 0); }
		public TerminalNode REFRESH() { return getToken(PostgreSQLStatementParser.REFRESH, 0); }
		public TerminalNode REINDEX() { return getToken(PostgreSQLStatementParser.REINDEX, 0); }
		public TerminalNode RELATIVE() { return getToken(PostgreSQLStatementParser.RELATIVE, 0); }
		public TerminalNode RELEASE() { return getToken(PostgreSQLStatementParser.RELEASE, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode REPEATABLE() { return getToken(PostgreSQLStatementParser.REPEATABLE, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLStatementParser.REPLACE, 0); }
		public TerminalNode REPLICA() { return getToken(PostgreSQLStatementParser.REPLICA, 0); }
		public TerminalNode RESET() { return getToken(PostgreSQLStatementParser.RESET, 0); }
		public TerminalNode RESTART() { return getToken(PostgreSQLStatementParser.RESTART, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLStatementParser.RESTRICT, 0); }
		public TerminalNode RETURNS() { return getToken(PostgreSQLStatementParser.RETURNS, 0); }
		public TerminalNode REVOKE() { return getToken(PostgreSQLStatementParser.REVOKE, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLStatementParser.ROLE, 0); }
		public TerminalNode ROLLBACK() { return getToken(PostgreSQLStatementParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(PostgreSQLStatementParser.ROLLUP, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLStatementParser.ROUTINE, 0); }
		public TerminalNode ROUTINES() { return getToken(PostgreSQLStatementParser.ROUTINES, 0); }
		public TerminalNode ROWS() { return getToken(PostgreSQLStatementParser.ROWS, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLStatementParser.RULE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(PostgreSQLStatementParser.SAVEPOINT, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public TerminalNode SCHEMAS() { return getToken(PostgreSQLStatementParser.SCHEMAS, 0); }
		public TerminalNode SCROLL() { return getToken(PostgreSQLStatementParser.SCROLL, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLStatementParser.SEARCH, 0); }
		public TerminalNode SECOND() { return getToken(PostgreSQLStatementParser.SECOND, 0); }
		public TerminalNode SECURITY() { return getToken(PostgreSQLStatementParser.SECURITY, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLStatementParser.SEQUENCE, 0); }
		public TerminalNode SEQUENCES() { return getToken(PostgreSQLStatementParser.SEQUENCES, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PostgreSQLStatementParser.SERIALIZABLE, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLStatementParser.SERVER, 0); }
		public TerminalNode SESSION() { return getToken(PostgreSQLStatementParser.SESSION, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode SETS() { return getToken(PostgreSQLStatementParser.SETS, 0); }
		public TerminalNode SHARE() { return getToken(PostgreSQLStatementParser.SHARE, 0); }
		public TerminalNode SHOW() { return getToken(PostgreSQLStatementParser.SHOW, 0); }
		public TerminalNode SIMPLE() { return getToken(PostgreSQLStatementParser.SIMPLE, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PostgreSQLStatementParser.SNAPSHOT, 0); }
		public TerminalNode SQL() { return getToken(PostgreSQLStatementParser.SQL, 0); }
		public TerminalNode STABLE() { return getToken(PostgreSQLStatementParser.STABLE, 0); }
		public TerminalNode STANDALONE() { return getToken(PostgreSQLStatementParser.STANDALONE, 0); }
		public TerminalNode START() { return getToken(PostgreSQLStatementParser.START, 0); }
		public TerminalNode STATEMENT() { return getToken(PostgreSQLStatementParser.STATEMENT, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLStatementParser.STATISTICS, 0); }
		public TerminalNode STDIN() { return getToken(PostgreSQLStatementParser.STDIN, 0); }
		public TerminalNode STDOUT() { return getToken(PostgreSQLStatementParser.STDOUT, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLStatementParser.STORAGE, 0); }
		public TerminalNode STORED() { return getToken(PostgreSQLStatementParser.STORED, 0); }
		public TerminalNode STRICT() { return getToken(PostgreSQLStatementParser.STRICT, 0); }
		public TerminalNode STRIP() { return getToken(PostgreSQLStatementParser.STRIP, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLStatementParser.SUBSCRIPTION, 0); }
		public TerminalNode SUPPORT() { return getToken(PostgreSQLStatementParser.SUPPORT, 0); }
		public TerminalNode SYSID() { return getToken(PostgreSQLStatementParser.SYSID, 0); }
		public TerminalNode SYSTEM() { return getToken(PostgreSQLStatementParser.SYSTEM, 0); }
		public TerminalNode TABLES() { return getToken(PostgreSQLStatementParser.TABLES, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLStatementParser.TABLESPACE, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLStatementParser.TEMP, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLStatementParser.TEMPLATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLStatementParser.TEMPORARY, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSQLStatementParser.TEXT, 0); }
		public TerminalNode TIES() { return getToken(PostgreSQLStatementParser.TIES, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLStatementParser.TRANSACTION, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLStatementParser.TRANSFORM, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLStatementParser.TRIGGER, 0); }
		public TerminalNode TRUNCATE() { return getToken(PostgreSQLStatementParser.TRUNCATE, 0); }
		public TerminalNode TRUSTED() { return getToken(PostgreSQLStatementParser.TRUSTED, 0); }
		public TerminalNode TYPE() { return getToken(PostgreSQLStatementParser.TYPE, 0); }
		public TerminalNode TYPES() { return getToken(PostgreSQLStatementParser.TYPES, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLStatementParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PostgreSQLStatementParser.TIMESTAMP, 0); }
		public TerminalNode UESCAPE() { return getToken(PostgreSQLStatementParser.UESCAPE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(PostgreSQLStatementParser.UNBOUNDED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(PostgreSQLStatementParser.UNCOMMITTED, 0); }
		public TerminalNode UNENCRYPTED() { return getToken(PostgreSQLStatementParser.UNENCRYPTED, 0); }
		public TerminalNode UNKNOWN() { return getToken(PostgreSQLStatementParser.UNKNOWN, 0); }
		public TerminalNode UNLISTEN() { return getToken(PostgreSQLStatementParser.UNLISTEN, 0); }
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLStatementParser.UNLOGGED, 0); }
		public TerminalNode UNTIL() { return getToken(PostgreSQLStatementParser.UNTIL, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLStatementParser.UPDATE, 0); }
		public TerminalNode VACUUM() { return getToken(PostgreSQLStatementParser.VACUUM, 0); }
		public TerminalNode VALID() { return getToken(PostgreSQLStatementParser.VALID, 0); }
		public TerminalNode VALIDATE() { return getToken(PostgreSQLStatementParser.VALIDATE, 0); }
		public TerminalNode VALIDATOR() { return getToken(PostgreSQLStatementParser.VALIDATOR, 0); }
		public TerminalNode VALUE() { return getToken(PostgreSQLStatementParser.VALUE, 0); }
		public TerminalNode VARYING() { return getToken(PostgreSQLStatementParser.VARYING, 0); }
		public TerminalNode VERSION() { return getToken(PostgreSQLStatementParser.VERSION, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLStatementParser.VIEW, 0); }
		public TerminalNode VIEWS() { return getToken(PostgreSQLStatementParser.VIEWS, 0); }
		public TerminalNode VOLATILE() { return getToken(PostgreSQLStatementParser.VOLATILE, 0); }
		public TerminalNode WEEK() { return getToken(PostgreSQLStatementParser.WEEK, 0); }
		public TerminalNode WHITESPACE() { return getToken(PostgreSQLStatementParser.WHITESPACE, 0); }
		public TerminalNode WITHIN() { return getToken(PostgreSQLStatementParser.WITHIN, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSQLStatementParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(PostgreSQLStatementParser.WORK, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLStatementParser.WRAPPER, 0); }
		public TerminalNode WRITE() { return getToken(PostgreSQLStatementParser.WRITE, 0); }
		public TerminalNode XML() { return getToken(PostgreSQLStatementParser.XML, 0); }
		public TerminalNode YEAR() { return getToken(PostgreSQLStatementParser.YEAR, 0); }
		public TerminalNode YES() { return getToken(PostgreSQLStatementParser.YES, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLStatementParser.ZONE, 0); }
		public TerminalNode JSON() { return getToken(PostgreSQLStatementParser.JSON, 0); }
		public TerminalNode PARAM() { return getToken(PostgreSQLStatementParser.PARAM, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLStatementParser.CONSTRAINT, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLStatementParser.COLLATION, 0); }
		public UnreservedWordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unreservedWord; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterUnreservedWord(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitUnreservedWord(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitUnreservedWord(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnreservedWordContext unreservedWord() throws RecognitionException {
		UnreservedWordContext _localctx = new UnreservedWordContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_unreservedWord);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2890);
			_la = _input.LA(1);
			if ( !(((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 9222243836438771573L) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & -4609436419784450049L) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & 6986190230277685373L) != 0) || ((((_la - 266)) & ~0x3f) == 0 && ((1L << (_la - 266)) & -16261L) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & -1L) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & 5113758212042293247L) != 0) || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & -6705789476276273137L) != 0) || ((((_la - 523)) & ~0x3f) == 0 && ((1L << (_la - 523)) & 5377395555994822649L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TypeFuncNameKeywordContext extends ParserRuleContext {
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLStatementParser.AUTHORIZATION, 0); }
		public TerminalNode BINARY() { return getToken(PostgreSQLStatementParser.BINARY, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLStatementParser.COLLATION, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(PostgreSQLStatementParser.CONCURRENTLY, 0); }
		public TerminalNode CROSS() { return getToken(PostgreSQLStatementParser.CROSS, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(PostgreSQLStatementParser.CURRENT_SCHEMA, 0); }
		public TerminalNode FREEZE() { return getToken(PostgreSQLStatementParser.FREEZE, 0); }
		public TerminalNode FULL() { return getToken(PostgreSQLStatementParser.FULL, 0); }
		public TerminalNode ILIKE() { return getToken(PostgreSQLStatementParser.ILIKE, 0); }
		public TerminalNode INNER() { return getToken(PostgreSQLStatementParser.INNER, 0); }
		public TerminalNode IS() { return getToken(PostgreSQLStatementParser.IS, 0); }
		public TerminalNode ISNULL() { return getToken(PostgreSQLStatementParser.ISNULL, 0); }
		public TerminalNode JOIN() { return getToken(PostgreSQLStatementParser.JOIN, 0); }
		public TerminalNode LEFT() { return getToken(PostgreSQLStatementParser.LEFT, 0); }
		public TerminalNode LIKE() { return getToken(PostgreSQLStatementParser.LIKE, 0); }
		public TerminalNode NATURAL() { return getToken(PostgreSQLStatementParser.NATURAL, 0); }
		public TerminalNode NOTNULL() { return getToken(PostgreSQLStatementParser.NOTNULL, 0); }
		public TerminalNode OUTER() { return getToken(PostgreSQLStatementParser.OUTER, 0); }
		public TerminalNode OVERLAPS() { return getToken(PostgreSQLStatementParser.OVERLAPS, 0); }
		public TerminalNode RIGHT() { return getToken(PostgreSQLStatementParser.RIGHT, 0); }
		public TerminalNode SIMILAR() { return getToken(PostgreSQLStatementParser.SIMILAR, 0); }
		public TerminalNode TABLESAMPLE() { return getToken(PostgreSQLStatementParser.TABLESAMPLE, 0); }
		public TerminalNode VERBOSE() { return getToken(PostgreSQLStatementParser.VERBOSE, 0); }
		public TypeFuncNameKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeFuncNameKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTypeFuncNameKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTypeFuncNameKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTypeFuncNameKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeFuncNameKeywordContext typeFuncNameKeyword() throws RecognitionException {
		TypeFuncNameKeywordContext _localctx = new TypeFuncNameKeywordContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_typeFuncNameKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2892);
			_la = _input.LA(1);
			if ( !(_la==BINARY || _la==CONCURRENTLY || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & 128849018897L) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & 7L) != 0) || ((((_la - 474)) & ~0x3f) == 0 && ((1L << (_la - 474)) & 268959999L) != 0) || _la==COLLATION || _la==OVERLAPS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SchemaNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(PostgreSQLStatementParser.DOT_, 0); }
		public SchemaNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSchemaName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSchemaName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSchemaName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaNameContext schemaName() throws RecognitionException {
		SchemaNameContext _localctx = new SchemaNameContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_schemaName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2897);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,192,_ctx) ) {
			case 1:
				{
				setState(2894);
				owner();
				setState(2895);
				match(DOT_);
				}
				break;
			}
			setState(2899);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableNameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(PostgreSQLStatementParser.DOT_, 0); }
		public TableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNameContext tableName() throws RecognitionException {
		TableNameContext _localctx = new TableNameContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_tableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2904);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,193,_ctx) ) {
			case 1:
				{
				setState(2901);
				owner();
				setState(2902);
				match(DOT_);
				}
				break;
			}
			setState(2906);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnNameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(PostgreSQLStatementParser.DOT_, 0); }
		public ColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNameContext columnName() throws RecognitionException {
		ColumnNameContext _localctx = new ColumnNameContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_columnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2911);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,194,_ctx) ) {
			case 1:
				{
				setState(2908);
				owner();
				setState(2909);
				match(DOT_);
				}
				break;
			}
			setState(2913);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OwnerContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public OwnerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_owner; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOwner(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOwner(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOwner(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OwnerContext owner() throws RecognitionException {
		OwnerContext _localctx = new OwnerContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_owner);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2915);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public NameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NameContext name() throws RecognitionException {
		NameContext _localctx = new NameContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2917);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableNamesContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TableNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableNames; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTableNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTableNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTableNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNamesContext tableNames() throws RecognitionException {
		TableNamesContext _localctx = new TableNamesContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_tableNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2920);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(2919);
				match(LP_);
				}
			}

			setState(2922);
			tableName();
			setState(2927);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2923);
				match(COMMA_);
				setState(2924);
				tableName();
				}
				}
				setState(2929);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2931);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RP_) {
				{
				setState(2930);
				match(RP_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnNamesContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public ColumnNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnNames; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterColumnNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitColumnNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitColumnNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNamesContext columnNames() throws RecognitionException {
		ColumnNamesContext _localctx = new ColumnNamesContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_columnNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2933);
			match(LP_);
			setState(2934);
			columnName();
			setState(2939);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2935);
				match(COMMA_);
				setState(2936);
				columnName();
				}
				}
				setState(2941);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2942);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CollationNameContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CollationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCollationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCollationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCollationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollationNameContext collationName() throws RecognitionException {
		CollationNameContext _localctx = new CollationNameContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_collationName);
		try {
			setState(2946);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_:
				enterOuterAlt(_localctx, 1);
				{
				setState(2944);
				match(STRING_);
				}
				break;
			case UNICODE_ESCAPE:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case XML:
			case JSON:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case PARAM:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case NATIONAL:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 2);
				{
				setState(2945);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public IndexNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterIndexName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitIndexName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitIndexName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexNameContext indexName() throws RecognitionException {
		IndexNameContext _localctx = new IndexNameContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_indexName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2948);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstraintNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ConstraintNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterConstraintName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitConstraintName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitConstraintName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintNameContext constraintName() throws RecognitionException {
		ConstraintNameContext _localctx = new ConstraintNameContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_constraintName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2950);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrimaryKeyContext extends ParserRuleContext {
		public TerminalNode KEY() { return getToken(PostgreSQLStatementParser.KEY, 0); }
		public TerminalNode PRIMARY() { return getToken(PostgreSQLStatementParser.PRIMARY, 0); }
		public PrimaryKeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primaryKey; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterPrimaryKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitPrimaryKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitPrimaryKey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrimaryKeyContext primaryKey() throws RecognitionException {
		PrimaryKeyContext _localctx = new PrimaryKeyContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_primaryKey);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2953);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PRIMARY) {
				{
				setState(2952);
				match(PRIMARY);
				}
			}

			setState(2955);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AndOperatorContext extends ParserRuleContext {
		public TerminalNode AND() { return getToken(PostgreSQLStatementParser.AND, 0); }
		public TerminalNode AND_() { return getToken(PostgreSQLStatementParser.AND_, 0); }
		public AndOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_andOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAndOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAndOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAndOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AndOperatorContext andOperator() throws RecognitionException {
		AndOperatorContext _localctx = new AndOperatorContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_andOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2957);
			_la = _input.LA(1);
			if ( !(_la==AND_ || _la==AND) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OrOperatorContext extends ParserRuleContext {
		public TerminalNode OR() { return getToken(PostgreSQLStatementParser.OR, 0); }
		public TerminalNode OR_() { return getToken(PostgreSQLStatementParser.OR_, 0); }
		public OrOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOrOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOrOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOrOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrOperatorContext orOperator() throws RecognitionException {
		OrOperatorContext _localctx = new OrOperatorContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_orOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2959);
			_la = _input.LA(1);
			if ( !(_la==OR_ || _la==OR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ComparisonOperatorContext extends ParserRuleContext {
		public TerminalNode EQ_() { return getToken(PostgreSQLStatementParser.EQ_, 0); }
		public TerminalNode GTE_() { return getToken(PostgreSQLStatementParser.GTE_, 0); }
		public TerminalNode GT_() { return getToken(PostgreSQLStatementParser.GT_, 0); }
		public TerminalNode LTE_() { return getToken(PostgreSQLStatementParser.LTE_, 0); }
		public TerminalNode LT_() { return getToken(PostgreSQLStatementParser.LT_, 0); }
		public TerminalNode NEQ_() { return getToken(PostgreSQLStatementParser.NEQ_, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterComparisonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitComparisonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitComparisonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_comparisonOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2961);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 524288000L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PatternMatchingOperatorContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(PostgreSQLStatementParser.LIKE, 0); }
		public TerminalNode TILDE_TILDE_() { return getToken(PostgreSQLStatementParser.TILDE_TILDE_, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode NOT_TILDE_TILDE_() { return getToken(PostgreSQLStatementParser.NOT_TILDE_TILDE_, 0); }
		public TerminalNode ILIKE() { return getToken(PostgreSQLStatementParser.ILIKE, 0); }
		public TerminalNode ILIKE_() { return getToken(PostgreSQLStatementParser.ILIKE_, 0); }
		public TerminalNode NOT_ILIKE_() { return getToken(PostgreSQLStatementParser.NOT_ILIKE_, 0); }
		public TerminalNode SIMILAR() { return getToken(PostgreSQLStatementParser.SIMILAR, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode TILDE_() { return getToken(PostgreSQLStatementParser.TILDE_, 0); }
		public TerminalNode NOT_() { return getToken(PostgreSQLStatementParser.NOT_, 0); }
		public TerminalNode ASTERISK_() { return getToken(PostgreSQLStatementParser.ASTERISK_, 0); }
		public PatternMatchingOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_patternMatchingOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterPatternMatchingOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitPatternMatchingOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitPatternMatchingOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PatternMatchingOperatorContext patternMatchingOperator() throws RecognitionException {
		PatternMatchingOperatorContext _localctx = new PatternMatchingOperatorContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_patternMatchingOperator);
		try {
			setState(2986);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,201,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2963);
				match(LIKE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2964);
				match(TILDE_TILDE_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2965);
				match(NOT);
				setState(2966);
				match(LIKE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2967);
				match(NOT_TILDE_TILDE_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2968);
				match(ILIKE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2969);
				match(ILIKE_);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2970);
				match(NOT);
				setState(2971);
				match(ILIKE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2972);
				match(NOT_ILIKE_);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2973);
				match(SIMILAR);
				setState(2974);
				match(TO);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2975);
				match(NOT);
				setState(2976);
				match(SIMILAR);
				setState(2977);
				match(TO);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2978);
				match(TILDE_);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2979);
				match(NOT_);
				setState(2980);
				match(TILDE_);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2981);
				match(TILDE_);
				setState(2982);
				match(ASTERISK_);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2983);
				match(NOT_);
				setState(2984);
				match(TILDE_);
				setState(2985);
				match(ASTERISK_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CursorNameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public CursorNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCursorName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCursorName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCursorName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorNameContext cursorName() throws RecognitionException {
		CursorNameContext _localctx = new CursorNameContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_cursorName);
		try {
			setState(2990);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,202,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2988);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2989);
				hostVariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AExprContext extends ParserRuleContext {
		public CExprContext cExpr() {
			return getRuleContext(CExprContext.class,0);
		}
		public TerminalNode PLUS_() { return getToken(PostgreSQLStatementParser.PLUS_, 0); }
		public List<AExprContext> aExpr() {
			return getRuleContexts(AExprContext.class);
		}
		public AExprContext aExpr(int i) {
			return getRuleContext(AExprContext.class,i);
		}
		public TerminalNode MINUS_() { return getToken(PostgreSQLStatementParser.MINUS_, 0); }
		public QualOpContext qualOp() {
			return getRuleContext(QualOpContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public List<RowContext> row() {
			return getRuleContexts(RowContext.class);
		}
		public RowContext row(int i) {
			return getRuleContext(RowContext.class,i);
		}
		public TerminalNode OVERLAPS() { return getToken(PostgreSQLStatementParser.OVERLAPS, 0); }
		public TerminalNode UNIQUE() { return getToken(PostgreSQLStatementParser.UNIQUE, 0); }
		public SelectWithParensContext selectWithParens() {
			return getRuleContext(SelectWithParensContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public TerminalNode AT() { return getToken(PostgreSQLStatementParser.AT, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLStatementParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLStatementParser.ZONE, 0); }
		public TerminalNode ASTERISK_() { return getToken(PostgreSQLStatementParser.ASTERISK_, 0); }
		public TerminalNode SLASH_() { return getToken(PostgreSQLStatementParser.SLASH_, 0); }
		public TerminalNode MOD_() { return getToken(PostgreSQLStatementParser.MOD_, 0); }
		public TerminalNode CARET_() { return getToken(PostgreSQLStatementParser.CARET_, 0); }
		public TerminalNode AMPERSAND_() { return getToken(PostgreSQLStatementParser.AMPERSAND_, 0); }
		public TerminalNode VERTICAL_BAR_() { return getToken(PostgreSQLStatementParser.VERTICAL_BAR_, 0); }
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public PatternMatchingOperatorContext patternMatchingOperator() {
			return getRuleContext(PatternMatchingOperatorContext.class,0);
		}
		public TerminalNode ESCAPE() { return getToken(PostgreSQLStatementParser.ESCAPE, 0); }
		public TerminalNode IS() { return getToken(PostgreSQLStatementParser.IS, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLStatementParser.DISTINCT, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public TerminalNode BETWEEN() { return getToken(PostgreSQLStatementParser.BETWEEN, 0); }
		public BExprContext bExpr() {
			return getRuleContext(BExprContext.class,0);
		}
		public TerminalNode AND() { return getToken(PostgreSQLStatementParser.AND, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(PostgreSQLStatementParser.ASYMMETRIC, 0); }
		public TerminalNode SYMMETRIC() { return getToken(PostgreSQLStatementParser.SYMMETRIC, 0); }
		public AndOperatorContext andOperator() {
			return getRuleContext(AndOperatorContext.class,0);
		}
		public OrOperatorContext orOperator() {
			return getRuleContext(OrOperatorContext.class,0);
		}
		public TerminalNode TYPE_CAST_() { return getToken(PostgreSQLStatementParser.TYPE_CAST_, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(PostgreSQLStatementParser.COLLATE, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode NULL() { return getToken(PostgreSQLStatementParser.NULL, 0); }
		public TerminalNode ISNULL() { return getToken(PostgreSQLStatementParser.ISNULL, 0); }
		public TerminalNode NOTNULL() { return getToken(PostgreSQLStatementParser.NOTNULL, 0); }
		public TerminalNode TRUE() { return getToken(PostgreSQLStatementParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(PostgreSQLStatementParser.FALSE, 0); }
		public TerminalNode UNKNOWN() { return getToken(PostgreSQLStatementParser.UNKNOWN, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLStatementParser.OF, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TypeListContext typeList() {
			return getRuleContext(TypeListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode IN() { return getToken(PostgreSQLStatementParser.IN, 0); }
		public InExprContext inExpr() {
			return getRuleContext(InExprContext.class,0);
		}
		public SubqueryOpContext subqueryOp() {
			return getRuleContext(SubqueryOpContext.class,0);
		}
		public SubTypeContext subType() {
			return getRuleContext(SubTypeContext.class,0);
		}
		public TerminalNode DOCUMENT() { return getToken(PostgreSQLStatementParser.DOCUMENT, 0); }
		public TerminalNode NORMALIZED() { return getToken(PostgreSQLStatementParser.NORMALIZED, 0); }
		public UnicodeNormalFormContext unicodeNormalForm() {
			return getRuleContext(UnicodeNormalFormContext.class,0);
		}
		public AExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AExprContext aExpr() throws RecognitionException {
		return aExpr(0);
	}

	private AExprContext aExpr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		AExprContext _localctx = new AExprContext(_ctx, _parentState);
		AExprContext _prevctx = _localctx;
		int _startState = 268;
		enterRecursionRule(_localctx, 268, RULE_aExpr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3010);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,203,_ctx) ) {
			case 1:
				{
				setState(2993);
				cExpr();
				}
				break;
			case 2:
				{
				setState(2994);
				match(PLUS_);
				setState(2995);
				aExpr(50);
				}
				break;
			case 3:
				{
				setState(2996);
				match(MINUS_);
				setState(2997);
				aExpr(49);
				}
				break;
			case 4:
				{
				setState(2998);
				qualOp();
				setState(2999);
				aExpr(39);
				}
				break;
			case 5:
				{
				setState(3001);
				match(NOT);
				setState(3002);
				aExpr(36);
				}
				break;
			case 6:
				{
				setState(3003);
				row();
				setState(3004);
				match(OVERLAPS);
				setState(3005);
				row();
				}
				break;
			case 7:
				{
				setState(3007);
				match(UNIQUE);
				setState(3008);
				selectWithParens();
				}
				break;
			case 8:
				{
				setState(3009);
				match(DEFAULT);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3213);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,207,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3211);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,206,_ctx) ) {
					case 1:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3012);
						if (!(precpred(_ctx, 51))) throw new FailedPredicateException(this, "precpred(_ctx, 51)");
						setState(3013);
						match(AT);
						setState(3014);
						match(TIME);
						setState(3015);
						match(ZONE);
						setState(3016);
						aExpr(52);
						}
						break;
					case 2:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3017);
						if (!(precpred(_ctx, 48))) throw new FailedPredicateException(this, "precpred(_ctx, 48)");
						setState(3018);
						match(PLUS_);
						setState(3019);
						aExpr(49);
						}
						break;
					case 3:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3020);
						if (!(precpred(_ctx, 47))) throw new FailedPredicateException(this, "precpred(_ctx, 47)");
						setState(3021);
						match(MINUS_);
						setState(3022);
						aExpr(48);
						}
						break;
					case 4:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3023);
						if (!(precpred(_ctx, 46))) throw new FailedPredicateException(this, "precpred(_ctx, 46)");
						setState(3024);
						match(ASTERISK_);
						setState(3025);
						aExpr(47);
						}
						break;
					case 5:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3026);
						if (!(precpred(_ctx, 45))) throw new FailedPredicateException(this, "precpred(_ctx, 45)");
						setState(3027);
						match(SLASH_);
						setState(3028);
						aExpr(46);
						}
						break;
					case 6:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3029);
						if (!(precpred(_ctx, 44))) throw new FailedPredicateException(this, "precpred(_ctx, 44)");
						setState(3030);
						match(MOD_);
						setState(3031);
						aExpr(45);
						}
						break;
					case 7:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3032);
						if (!(precpred(_ctx, 43))) throw new FailedPredicateException(this, "precpred(_ctx, 43)");
						setState(3033);
						match(CARET_);
						setState(3034);
						aExpr(44);
						}
						break;
					case 8:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3035);
						if (!(precpred(_ctx, 42))) throw new FailedPredicateException(this, "precpred(_ctx, 42)");
						setState(3036);
						match(AMPERSAND_);
						setState(3037);
						aExpr(43);
						}
						break;
					case 9:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3038);
						if (!(precpred(_ctx, 41))) throw new FailedPredicateException(this, "precpred(_ctx, 41)");
						setState(3039);
						match(VERTICAL_BAR_);
						setState(3040);
						aExpr(42);
						}
						break;
					case 10:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3041);
						if (!(precpred(_ctx, 40))) throw new FailedPredicateException(this, "precpred(_ctx, 40)");
						setState(3042);
						qualOp();
						setState(3043);
						aExpr(41);
						}
						break;
					case 11:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3045);
						if (!(precpred(_ctx, 37))) throw new FailedPredicateException(this, "precpred(_ctx, 37)");
						setState(3046);
						comparisonOperator();
						setState(3047);
						aExpr(38);
						}
						break;
					case 12:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3049);
						if (!(precpred(_ctx, 35))) throw new FailedPredicateException(this, "precpred(_ctx, 35)");
						setState(3050);
						patternMatchingOperator();
						setState(3051);
						aExpr(0);
						setState(3052);
						match(ESCAPE);
						setState(3053);
						aExpr(36);
						}
						break;
					case 13:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3055);
						if (!(precpred(_ctx, 34))) throw new FailedPredicateException(this, "precpred(_ctx, 34)");
						setState(3056);
						patternMatchingOperator();
						setState(3057);
						aExpr(35);
						}
						break;
					case 14:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3059);
						if (!(precpred(_ctx, 22))) throw new FailedPredicateException(this, "precpred(_ctx, 22)");
						setState(3060);
						match(IS);
						setState(3061);
						match(DISTINCT);
						setState(3062);
						match(FROM);
						setState(3063);
						aExpr(23);
						}
						break;
					case 15:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3064);
						if (!(precpred(_ctx, 21))) throw new FailedPredicateException(this, "precpred(_ctx, 21)");
						setState(3065);
						match(IS);
						setState(3066);
						match(NOT);
						setState(3067);
						match(DISTINCT);
						setState(3068);
						match(FROM);
						setState(3069);
						aExpr(22);
						}
						break;
					case 16:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3070);
						if (!(precpred(_ctx, 18))) throw new FailedPredicateException(this, "precpred(_ctx, 18)");
						setState(3071);
						match(BETWEEN);
						setState(3073);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==ASYMMETRIC) {
							{
							setState(3072);
							match(ASYMMETRIC);
							}
						}

						setState(3075);
						bExpr(0);
						setState(3076);
						match(AND);
						setState(3077);
						aExpr(19);
						}
						break;
					case 17:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3079);
						if (!(precpred(_ctx, 17))) throw new FailedPredicateException(this, "precpred(_ctx, 17)");
						setState(3080);
						match(NOT);
						setState(3081);
						match(BETWEEN);
						setState(3083);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==ASYMMETRIC) {
							{
							setState(3082);
							match(ASYMMETRIC);
							}
						}

						setState(3085);
						bExpr(0);
						setState(3086);
						match(AND);
						setState(3087);
						aExpr(18);
						}
						break;
					case 18:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3089);
						if (!(precpred(_ctx, 16))) throw new FailedPredicateException(this, "precpred(_ctx, 16)");
						setState(3090);
						match(BETWEEN);
						setState(3091);
						match(SYMMETRIC);
						setState(3092);
						bExpr(0);
						setState(3093);
						match(AND);
						setState(3094);
						aExpr(17);
						}
						break;
					case 19:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3096);
						if (!(precpred(_ctx, 15))) throw new FailedPredicateException(this, "precpred(_ctx, 15)");
						setState(3097);
						match(NOT);
						setState(3098);
						match(BETWEEN);
						setState(3099);
						match(SYMMETRIC);
						setState(3100);
						bExpr(0);
						setState(3101);
						match(AND);
						setState(3102);
						aExpr(16);
						}
						break;
					case 20:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3104);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(3105);
						andOperator();
						setState(3106);
						aExpr(4);
						}
						break;
					case 21:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3108);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(3109);
						orOperator();
						setState(3110);
						aExpr(3);
						}
						break;
					case 22:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3112);
						if (!(precpred(_ctx, 53))) throw new FailedPredicateException(this, "precpred(_ctx, 53)");
						setState(3113);
						match(TYPE_CAST_);
						setState(3114);
						typeName();
						}
						break;
					case 23:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3115);
						if (!(precpred(_ctx, 52))) throw new FailedPredicateException(this, "precpred(_ctx, 52)");
						setState(3116);
						match(COLLATE);
						setState(3117);
						anyName();
						}
						break;
					case 24:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3118);
						if (!(precpred(_ctx, 38))) throw new FailedPredicateException(this, "precpred(_ctx, 38)");
						setState(3119);
						qualOp();
						}
						break;
					case 25:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3120);
						if (!(precpred(_ctx, 33))) throw new FailedPredicateException(this, "precpred(_ctx, 33)");
						setState(3121);
						match(IS);
						setState(3122);
						match(NULL);
						}
						break;
					case 26:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3123);
						if (!(precpred(_ctx, 32))) throw new FailedPredicateException(this, "precpred(_ctx, 32)");
						setState(3124);
						match(ISNULL);
						}
						break;
					case 27:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3125);
						if (!(precpred(_ctx, 31))) throw new FailedPredicateException(this, "precpred(_ctx, 31)");
						setState(3126);
						match(IS);
						setState(3127);
						match(NOT);
						setState(3128);
						match(NULL);
						}
						break;
					case 28:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3129);
						if (!(precpred(_ctx, 30))) throw new FailedPredicateException(this, "precpred(_ctx, 30)");
						setState(3130);
						match(NOTNULL);
						}
						break;
					case 29:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3131);
						if (!(precpred(_ctx, 28))) throw new FailedPredicateException(this, "precpred(_ctx, 28)");
						setState(3132);
						match(IS);
						setState(3133);
						match(TRUE);
						}
						break;
					case 30:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3134);
						if (!(precpred(_ctx, 27))) throw new FailedPredicateException(this, "precpred(_ctx, 27)");
						setState(3135);
						match(IS);
						setState(3136);
						match(NOT);
						setState(3137);
						match(TRUE);
						}
						break;
					case 31:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3138);
						if (!(precpred(_ctx, 26))) throw new FailedPredicateException(this, "precpred(_ctx, 26)");
						setState(3139);
						match(IS);
						setState(3140);
						match(FALSE);
						}
						break;
					case 32:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3141);
						if (!(precpred(_ctx, 25))) throw new FailedPredicateException(this, "precpred(_ctx, 25)");
						setState(3142);
						match(IS);
						setState(3143);
						match(NOT);
						setState(3144);
						match(FALSE);
						}
						break;
					case 33:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3145);
						if (!(precpred(_ctx, 24))) throw new FailedPredicateException(this, "precpred(_ctx, 24)");
						setState(3146);
						match(IS);
						setState(3147);
						match(UNKNOWN);
						}
						break;
					case 34:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3148);
						if (!(precpred(_ctx, 23))) throw new FailedPredicateException(this, "precpred(_ctx, 23)");
						setState(3149);
						match(IS);
						setState(3150);
						match(NOT);
						setState(3151);
						match(UNKNOWN);
						}
						break;
					case 35:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3152);
						if (!(precpred(_ctx, 20))) throw new FailedPredicateException(this, "precpred(_ctx, 20)");
						setState(3153);
						match(IS);
						setState(3154);
						match(OF);
						setState(3155);
						match(LP_);
						setState(3156);
						typeList();
						setState(3157);
						match(RP_);
						}
						break;
					case 36:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3159);
						if (!(precpred(_ctx, 19))) throw new FailedPredicateException(this, "precpred(_ctx, 19)");
						setState(3160);
						match(IS);
						setState(3161);
						match(NOT);
						setState(3162);
						match(OF);
						setState(3163);
						match(LP_);
						setState(3164);
						typeList();
						setState(3165);
						match(RP_);
						}
						break;
					case 37:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3167);
						if (!(precpred(_ctx, 14))) throw new FailedPredicateException(this, "precpred(_ctx, 14)");
						setState(3168);
						match(IN);
						setState(3169);
						inExpr();
						}
						break;
					case 38:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3170);
						if (!(precpred(_ctx, 13))) throw new FailedPredicateException(this, "precpred(_ctx, 13)");
						setState(3171);
						match(NOT);
						setState(3172);
						match(IN);
						setState(3173);
						inExpr();
						}
						break;
					case 39:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3174);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(3175);
						subqueryOp();
						setState(3176);
						subType();
						setState(3177);
						selectWithParens();
						}
						break;
					case 40:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3179);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(3180);
						subqueryOp();
						setState(3181);
						subType();
						setState(3182);
						match(LP_);
						setState(3183);
						aExpr(0);
						setState(3184);
						match(RP_);
						}
						break;
					case 41:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3186);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(3187);
						match(IS);
						setState(3188);
						match(DOCUMENT);
						}
						break;
					case 42:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3189);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(3190);
						match(IS);
						setState(3191);
						match(NOT);
						setState(3192);
						match(DOCUMENT);
						}
						break;
					case 43:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3193);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(3194);
						match(IS);
						setState(3195);
						match(NORMALIZED);
						}
						break;
					case 44:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3196);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(3197);
						match(IS);
						setState(3198);
						unicodeNormalForm();
						setState(3199);
						match(NORMALIZED);
						}
						break;
					case 45:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3201);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(3202);
						match(IS);
						setState(3203);
						match(NOT);
						setState(3204);
						match(NORMALIZED);
						}
						break;
					case 46:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3205);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(3206);
						match(IS);
						setState(3207);
						match(NOT);
						setState(3208);
						unicodeNormalForm();
						setState(3209);
						match(NORMALIZED);
						}
						break;
					}
					} 
				}
				setState(3215);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,207,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BExprContext extends ParserRuleContext {
		public CExprContext cExpr() {
			return getRuleContext(CExprContext.class,0);
		}
		public TerminalNode PLUS_() { return getToken(PostgreSQLStatementParser.PLUS_, 0); }
		public List<BExprContext> bExpr() {
			return getRuleContexts(BExprContext.class);
		}
		public BExprContext bExpr(int i) {
			return getRuleContext(BExprContext.class,i);
		}
		public TerminalNode MINUS_() { return getToken(PostgreSQLStatementParser.MINUS_, 0); }
		public QualOpContext qualOp() {
			return getRuleContext(QualOpContext.class,0);
		}
		public TerminalNode IS() { return getToken(PostgreSQLStatementParser.IS, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLStatementParser.DISTINCT, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode TYPE_CAST_() { return getToken(PostgreSQLStatementParser.TYPE_CAST_, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TerminalNode OF() { return getToken(PostgreSQLStatementParser.OF, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TypeListContext typeList() {
			return getRuleContext(TypeListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode DOCUMENT() { return getToken(PostgreSQLStatementParser.DOCUMENT, 0); }
		public BExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterBExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitBExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitBExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BExprContext bExpr() throws RecognitionException {
		return bExpr(0);
	}

	private BExprContext bExpr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		BExprContext _localctx = new BExprContext(_ctx, _parentState);
		BExprContext _prevctx = _localctx;
		int _startState = 270;
		enterRecursionRule(_localctx, 270, RULE_bExpr, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3225);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,208,_ctx) ) {
			case 1:
				{
				setState(3217);
				cExpr();
				}
				break;
			case 2:
				{
				setState(3218);
				match(PLUS_);
				setState(3219);
				bExpr(11);
				}
				break;
			case 3:
				{
				setState(3220);
				match(MINUS_);
				setState(3221);
				bExpr(10);
				}
				break;
			case 4:
				{
				setState(3222);
				qualOp();
				setState(3223);
				bExpr(8);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3271);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,210,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3269);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,209,_ctx) ) {
					case 1:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(3227);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(3228);
						qualOp();
						setState(3229);
						bExpr(10);
						}
						break;
					case 2:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(3231);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(3232);
						match(IS);
						setState(3233);
						match(DISTINCT);
						setState(3234);
						match(FROM);
						setState(3235);
						bExpr(7);
						}
						break;
					case 3:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(3236);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(3237);
						match(IS);
						setState(3238);
						match(NOT);
						setState(3239);
						match(DISTINCT);
						setState(3240);
						match(FROM);
						setState(3241);
						bExpr(6);
						}
						break;
					case 4:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(3242);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(3243);
						match(TYPE_CAST_);
						setState(3244);
						typeName();
						}
						break;
					case 5:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(3245);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(3246);
						qualOp();
						}
						break;
					case 6:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(3247);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(3248);
						match(IS);
						setState(3249);
						match(OF);
						setState(3250);
						match(LP_);
						setState(3251);
						typeList();
						setState(3252);
						match(RP_);
						}
						break;
					case 7:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(3254);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(3255);
						match(IS);
						setState(3256);
						match(NOT);
						setState(3257);
						match(OF);
						setState(3258);
						match(LP_);
						setState(3259);
						typeList();
						setState(3260);
						match(RP_);
						}
						break;
					case 8:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(3262);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(3263);
						match(IS);
						setState(3264);
						match(DOCUMENT);
						}
						break;
					case 9:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(3265);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(3266);
						match(IS);
						setState(3267);
						match(NOT);
						setState(3268);
						match(DOCUMENT);
						}
						break;
					}
					} 
				}
				setState(3273);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,210,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CExprContext extends ParserRuleContext {
		public ParameterMarkerContext parameterMarker() {
			return getRuleContext(ParameterMarkerContext.class,0);
		}
		public ColumnrefContext columnref() {
			return getRuleContext(ColumnrefContext.class,0);
		}
		public AexprConstContext aexprConst() {
			return getRuleContext(AexprConstContext.class,0);
		}
		public TerminalNode PARAM() { return getToken(PostgreSQLStatementParser.PARAM, 0); }
		public IndirectionElContext indirectionEl() {
			return getRuleContext(IndirectionElContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public OptIndirectionContext optIndirection() {
			return getRuleContext(OptIndirectionContext.class,0);
		}
		public CaseExprContext caseExpr() {
			return getRuleContext(CaseExprContext.class,0);
		}
		public FuncExprContext funcExpr() {
			return getRuleContext(FuncExprContext.class,0);
		}
		public SelectWithParensContext selectWithParens() {
			return getRuleContext(SelectWithParensContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public TerminalNode ARRAY() { return getToken(PostgreSQLStatementParser.ARRAY, 0); }
		public ArrayExprContext arrayExpr() {
			return getRuleContext(ArrayExprContext.class,0);
		}
		public ExplicitRowContext explicitRow() {
			return getRuleContext(ExplicitRowContext.class,0);
		}
		public ImplicitRowContext implicitRow() {
			return getRuleContext(ImplicitRowContext.class,0);
		}
		public TerminalNode GROUPING() { return getToken(PostgreSQLStatementParser.GROUPING, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public CExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CExprContext cExpr() throws RecognitionException {
		CExprContext _localctx = new CExprContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_cExpr);
		try {
			setState(3305);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,212,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3274);
				parameterMarker();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3275);
				columnref();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3276);
				aexprConst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3277);
				match(PARAM);
				setState(3279);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,211,_ctx) ) {
				case 1:
					{
					setState(3278);
					indirectionEl();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3281);
				match(LP_);
				setState(3282);
				aExpr(0);
				setState(3283);
				match(RP_);
				setState(3284);
				optIndirection(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3286);
				caseExpr();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3287);
				funcExpr();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3288);
				selectWithParens();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3289);
				selectWithParens();
				setState(3290);
				indirection(0);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3292);
				match(EXISTS);
				setState(3293);
				selectWithParens();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3294);
				match(ARRAY);
				setState(3295);
				selectWithParens();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3296);
				match(ARRAY);
				setState(3297);
				arrayExpr();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3298);
				explicitRow();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(3299);
				implicitRow();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(3300);
				match(GROUPING);
				setState(3301);
				match(LP_);
				setState(3302);
				exprList(0);
				setState(3303);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndirectionContext extends ParserRuleContext {
		public IndirectionElContext indirectionEl() {
			return getRuleContext(IndirectionElContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public IndirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterIndirection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitIndirection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitIndirection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndirectionContext indirection() throws RecognitionException {
		return indirection(0);
	}

	private IndirectionContext indirection(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		IndirectionContext _localctx = new IndirectionContext(_ctx, _parentState);
		IndirectionContext _prevctx = _localctx;
		int _startState = 274;
		enterRecursionRule(_localctx, 274, RULE_indirection, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3308);
			indirectionEl();
			}
			_ctx.stop = _input.LT(-1);
			setState(3314);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,213,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new IndirectionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_indirection);
					setState(3310);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3311);
					indirectionEl();
					}
					} 
				}
				setState(3316);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,213,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptIndirectionContext extends ParserRuleContext {
		public OptIndirectionContext optIndirection() {
			return getRuleContext(OptIndirectionContext.class,0);
		}
		public IndirectionElContext indirectionEl() {
			return getRuleContext(IndirectionElContext.class,0);
		}
		public OptIndirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optIndirection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOptIndirection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOptIndirection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOptIndirection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptIndirectionContext optIndirection() throws RecognitionException {
		return optIndirection(0);
	}

	private OptIndirectionContext optIndirection(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		OptIndirectionContext _localctx = new OptIndirectionContext(_ctx, _parentState);
		OptIndirectionContext _prevctx = _localctx;
		int _startState = 276;
		enterRecursionRule(_localctx, 276, RULE_optIndirection, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(3322);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,214,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new OptIndirectionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_optIndirection);
					setState(3318);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(3319);
					indirectionEl();
					}
					} 
				}
				setState(3324);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,214,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndirectionElContext extends ParserRuleContext {
		public TerminalNode DOT_() { return getToken(PostgreSQLStatementParser.DOT_, 0); }
		public AttrNameContext attrName() {
			return getRuleContext(AttrNameContext.class,0);
		}
		public TerminalNode ASTERISK_() { return getToken(PostgreSQLStatementParser.ASTERISK_, 0); }
		public TerminalNode LBT_() { return getToken(PostgreSQLStatementParser.LBT_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RBT_() { return getToken(PostgreSQLStatementParser.RBT_, 0); }
		public TerminalNode COLON_() { return getToken(PostgreSQLStatementParser.COLON_, 0); }
		public List<SliceBoundContext> sliceBound() {
			return getRuleContexts(SliceBoundContext.class);
		}
		public SliceBoundContext sliceBound(int i) {
			return getRuleContext(SliceBoundContext.class,i);
		}
		public IndirectionElContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirectionEl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterIndirectionEl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitIndirectionEl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitIndirectionEl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndirectionElContext indirectionEl() throws RecognitionException {
		IndirectionElContext _localctx = new IndirectionElContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_indirectionEl);
		int _la;
		try {
			setState(3342);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,217,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3325);
				match(DOT_);
				setState(3326);
				attrName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3327);
				match(DOT_);
				setState(3328);
				match(ASTERISK_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3329);
				match(LBT_);
				setState(3330);
				aExpr(0);
				setState(3331);
				match(RBT_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3333);
				match(LBT_);
				setState(3335);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -559649807899894L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1140468705394689L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -1125899911037185L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -9288678474974265L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -16651041L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -1L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -2386907801969491969L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & -9060151442713576613L) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & 2594073246580080639L) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & 116445L) != 0)) {
					{
					setState(3334);
					sliceBound();
					}
				}

				setState(3337);
				match(COLON_);
				setState(3339);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -559649807899894L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1140468705394689L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -1125899911037185L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -9288678474974265L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -16651041L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -1L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -2386907801969491969L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & -9060151442713576613L) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & 2594073246580080639L) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & 116445L) != 0)) {
					{
					setState(3338);
					sliceBound();
					}
				}

				setState(3341);
				match(RBT_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SliceBoundContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public SliceBoundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sliceBound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSliceBound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSliceBound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSliceBound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SliceBoundContext sliceBound() throws RecognitionException {
		SliceBoundContext _localctx = new SliceBoundContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_sliceBound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3344);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InExprContext extends ParserRuleContext {
		public SelectWithParensContext selectWithParens() {
			return getRuleContext(SelectWithParensContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public InExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterInExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitInExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitInExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InExprContext inExpr() throws RecognitionException {
		InExprContext _localctx = new InExprContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_inExpr);
		try {
			setState(3351);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,218,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3346);
				selectWithParens();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3347);
				match(LP_);
				setState(3348);
				exprList(0);
				setState(3349);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CaseExprContext extends ParserRuleContext {
		public TerminalNode CASE() { return getToken(PostgreSQLStatementParser.CASE, 0); }
		public WhenClauseListContext whenClauseList() {
			return getRuleContext(WhenClauseListContext.class,0);
		}
		public TerminalNode END() { return getToken(PostgreSQLStatementParser.END, 0); }
		public CaseArgContext caseArg() {
			return getRuleContext(CaseArgContext.class,0);
		}
		public CaseDefaultContext caseDefault() {
			return getRuleContext(CaseDefaultContext.class,0);
		}
		public CaseExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCaseExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCaseExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCaseExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseExprContext caseExpr() throws RecognitionException {
		CaseExprContext _localctx = new CaseExprContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_caseExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3353);
			match(CASE);
			setState(3355);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -559649807899894L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1140468705394689L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -1125899911037185L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -9288678474974265L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -16651041L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -1L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -2386907801969491969L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & -9060151442713576613L) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & 2594073246580080639L) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & 116445L) != 0)) {
				{
				setState(3354);
				caseArg();
				}
			}

			setState(3357);
			whenClauseList();
			setState(3359);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(3358);
				caseDefault();
				}
			}

			setState(3361);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WhenClauseListContext extends ParserRuleContext {
		public List<WhenClauseContext> whenClause() {
			return getRuleContexts(WhenClauseContext.class);
		}
		public WhenClauseContext whenClause(int i) {
			return getRuleContext(WhenClauseContext.class,i);
		}
		public WhenClauseListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenClauseList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterWhenClauseList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitWhenClauseList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitWhenClauseList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhenClauseListContext whenClauseList() throws RecognitionException {
		WhenClauseListContext _localctx = new WhenClauseListContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_whenClauseList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3364); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3363);
				whenClause();
				}
				}
				setState(3366); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WhenClauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PostgreSQLStatementParser.WHEN, 0); }
		public List<AExprContext> aExpr() {
			return getRuleContexts(AExprContext.class);
		}
		public AExprContext aExpr(int i) {
			return getRuleContext(AExprContext.class,i);
		}
		public TerminalNode THEN() { return getToken(PostgreSQLStatementParser.THEN, 0); }
		public WhenClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterWhenClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitWhenClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitWhenClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhenClauseContext whenClause() throws RecognitionException {
		WhenClauseContext _localctx = new WhenClauseContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_whenClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3368);
			match(WHEN);
			setState(3369);
			aExpr(0);
			setState(3370);
			match(THEN);
			setState(3371);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CaseDefaultContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PostgreSQLStatementParser.ELSE, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public CaseDefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseDefault; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCaseDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCaseDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCaseDefault(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseDefaultContext caseDefault() throws RecognitionException {
		CaseDefaultContext _localctx = new CaseDefaultContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_caseDefault);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3373);
			match(ELSE);
			setState(3374);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CaseArgContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public CaseArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCaseArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCaseArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCaseArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseArgContext caseArg() throws RecognitionException {
		CaseArgContext _localctx = new CaseArgContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_caseArg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3376);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnrefContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public ColumnrefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterColumnref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitColumnref(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitColumnref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnrefContext columnref() throws RecognitionException {
		ColumnrefContext _localctx = new ColumnrefContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_columnref);
		try {
			setState(3382);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,222,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3378);
				colId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3379);
				colId();
				setState(3380);
				indirection(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QualOpContext extends ParserRuleContext {
		public JsonOperatorContext jsonOperator() {
			return getRuleContext(JsonOperatorContext.class,0);
		}
		public GeometricOperatorContext geometricOperator() {
			return getRuleContext(GeometricOperatorContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLStatementParser.OPERATOR, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public AnyOperatorContext anyOperator() {
			return getRuleContext(AnyOperatorContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public QualOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualOp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterQualOp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitQualOp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitQualOp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualOpContext qualOp() throws RecognitionException {
		QualOpContext _localctx = new QualOpContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_qualOp);
		try {
			setState(3391);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,223,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3384);
				jsonOperator();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3385);
				geometricOperator();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3386);
				match(OPERATOR);
				setState(3387);
				match(LP_);
				setState(3388);
				anyOperator();
				setState(3389);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SubqueryOpContext extends ParserRuleContext {
		public AllOpContext allOp() {
			return getRuleContext(AllOpContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLStatementParser.OPERATOR, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public AnyOperatorContext anyOperator() {
			return getRuleContext(AnyOperatorContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode LIKE() { return getToken(PostgreSQLStatementParser.LIKE, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode TILDE_() { return getToken(PostgreSQLStatementParser.TILDE_, 0); }
		public TerminalNode NOT_() { return getToken(PostgreSQLStatementParser.NOT_, 0); }
		public SubqueryOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subqueryOp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSubqueryOp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSubqueryOp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSubqueryOp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubqueryOpContext subqueryOp() throws RecognitionException {
		SubqueryOpContext _localctx = new SubqueryOpContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_subqueryOp);
		try {
			setState(3405);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,224,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3393);
				allOp();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3394);
				match(OPERATOR);
				setState(3395);
				match(LP_);
				setState(3396);
				anyOperator();
				setState(3397);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3399);
				match(LIKE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3400);
				match(NOT);
				setState(3401);
				match(LIKE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3402);
				match(TILDE_);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3403);
				match(NOT_);
				setState(3404);
				match(TILDE_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AllOpContext extends ParserRuleContext {
		public OpContext op() {
			return getRuleContext(OpContext.class,0);
		}
		public MathOperatorContext mathOperator() {
			return getRuleContext(MathOperatorContext.class,0);
		}
		public AllOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allOp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAllOp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAllOp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAllOp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AllOpContext allOp() throws RecognitionException {
		AllOpContext _localctx = new AllOpContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_allOp);
		try {
			setState(3409);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,225,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3407);
				op();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3408);
				mathOperator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OpContext extends ParserRuleContext {
		public List<TerminalNode> AND_() { return getTokens(PostgreSQLStatementParser.AND_); }
		public TerminalNode AND_(int i) {
			return getToken(PostgreSQLStatementParser.AND_, i);
		}
		public List<TerminalNode> OR_() { return getTokens(PostgreSQLStatementParser.OR_); }
		public TerminalNode OR_(int i) {
			return getToken(PostgreSQLStatementParser.OR_, i);
		}
		public List<TerminalNode> NOT_() { return getTokens(PostgreSQLStatementParser.NOT_); }
		public TerminalNode NOT_(int i) {
			return getToken(PostgreSQLStatementParser.NOT_, i);
		}
		public List<TerminalNode> TILDE_() { return getTokens(PostgreSQLStatementParser.TILDE_); }
		public TerminalNode TILDE_(int i) {
			return getToken(PostgreSQLStatementParser.TILDE_, i);
		}
		public List<TerminalNode> VERTICAL_BAR_() { return getTokens(PostgreSQLStatementParser.VERTICAL_BAR_); }
		public TerminalNode VERTICAL_BAR_(int i) {
			return getToken(PostgreSQLStatementParser.VERTICAL_BAR_, i);
		}
		public List<TerminalNode> AMPERSAND_() { return getTokens(PostgreSQLStatementParser.AMPERSAND_); }
		public TerminalNode AMPERSAND_(int i) {
			return getToken(PostgreSQLStatementParser.AMPERSAND_, i);
		}
		public List<TerminalNode> SIGNED_LEFT_SHIFT_() { return getTokens(PostgreSQLStatementParser.SIGNED_LEFT_SHIFT_); }
		public TerminalNode SIGNED_LEFT_SHIFT_(int i) {
			return getToken(PostgreSQLStatementParser.SIGNED_LEFT_SHIFT_, i);
		}
		public List<TerminalNode> SIGNED_RIGHT_SHIFT_() { return getTokens(PostgreSQLStatementParser.SIGNED_RIGHT_SHIFT_); }
		public TerminalNode SIGNED_RIGHT_SHIFT_(int i) {
			return getToken(PostgreSQLStatementParser.SIGNED_RIGHT_SHIFT_, i);
		}
		public List<TerminalNode> CARET_() { return getTokens(PostgreSQLStatementParser.CARET_); }
		public TerminalNode CARET_(int i) {
			return getToken(PostgreSQLStatementParser.CARET_, i);
		}
		public List<TerminalNode> MOD_() { return getTokens(PostgreSQLStatementParser.MOD_); }
		public TerminalNode MOD_(int i) {
			return getToken(PostgreSQLStatementParser.MOD_, i);
		}
		public List<TerminalNode> COLON_() { return getTokens(PostgreSQLStatementParser.COLON_); }
		public TerminalNode COLON_(int i) {
			return getToken(PostgreSQLStatementParser.COLON_, i);
		}
		public List<TerminalNode> PLUS_() { return getTokens(PostgreSQLStatementParser.PLUS_); }
		public TerminalNode PLUS_(int i) {
			return getToken(PostgreSQLStatementParser.PLUS_, i);
		}
		public List<TerminalNode> MINUS_() { return getTokens(PostgreSQLStatementParser.MINUS_); }
		public TerminalNode MINUS_(int i) {
			return getToken(PostgreSQLStatementParser.MINUS_, i);
		}
		public List<TerminalNode> ASTERISK_() { return getTokens(PostgreSQLStatementParser.ASTERISK_); }
		public TerminalNode ASTERISK_(int i) {
			return getToken(PostgreSQLStatementParser.ASTERISK_, i);
		}
		public List<TerminalNode> SLASH_() { return getTokens(PostgreSQLStatementParser.SLASH_); }
		public TerminalNode SLASH_(int i) {
			return getToken(PostgreSQLStatementParser.SLASH_, i);
		}
		public List<TerminalNode> BACKSLASH_() { return getTokens(PostgreSQLStatementParser.BACKSLASH_); }
		public TerminalNode BACKSLASH_(int i) {
			return getToken(PostgreSQLStatementParser.BACKSLASH_, i);
		}
		public List<TerminalNode> DOT_() { return getTokens(PostgreSQLStatementParser.DOT_); }
		public TerminalNode DOT_(int i) {
			return getToken(PostgreSQLStatementParser.DOT_, i);
		}
		public List<TerminalNode> DOT_ASTERISK_() { return getTokens(PostgreSQLStatementParser.DOT_ASTERISK_); }
		public TerminalNode DOT_ASTERISK_(int i) {
			return getToken(PostgreSQLStatementParser.DOT_ASTERISK_, i);
		}
		public List<TerminalNode> SAFE_EQ_() { return getTokens(PostgreSQLStatementParser.SAFE_EQ_); }
		public TerminalNode SAFE_EQ_(int i) {
			return getToken(PostgreSQLStatementParser.SAFE_EQ_, i);
		}
		public List<TerminalNode> DEQ_() { return getTokens(PostgreSQLStatementParser.DEQ_); }
		public TerminalNode DEQ_(int i) {
			return getToken(PostgreSQLStatementParser.DEQ_, i);
		}
		public List<TerminalNode> EQ_() { return getTokens(PostgreSQLStatementParser.EQ_); }
		public TerminalNode EQ_(int i) {
			return getToken(PostgreSQLStatementParser.EQ_, i);
		}
		public List<TerminalNode> CQ_() { return getTokens(PostgreSQLStatementParser.CQ_); }
		public TerminalNode CQ_(int i) {
			return getToken(PostgreSQLStatementParser.CQ_, i);
		}
		public List<TerminalNode> NEQ_() { return getTokens(PostgreSQLStatementParser.NEQ_); }
		public TerminalNode NEQ_(int i) {
			return getToken(PostgreSQLStatementParser.NEQ_, i);
		}
		public List<TerminalNode> GT_() { return getTokens(PostgreSQLStatementParser.GT_); }
		public TerminalNode GT_(int i) {
			return getToken(PostgreSQLStatementParser.GT_, i);
		}
		public List<TerminalNode> GTE_() { return getTokens(PostgreSQLStatementParser.GTE_); }
		public TerminalNode GTE_(int i) {
			return getToken(PostgreSQLStatementParser.GTE_, i);
		}
		public List<TerminalNode> LT_() { return getTokens(PostgreSQLStatementParser.LT_); }
		public TerminalNode LT_(int i) {
			return getToken(PostgreSQLStatementParser.LT_, i);
		}
		public List<TerminalNode> LTE_() { return getTokens(PostgreSQLStatementParser.LTE_); }
		public TerminalNode LTE_(int i) {
			return getToken(PostgreSQLStatementParser.LTE_, i);
		}
		public List<TerminalNode> POUND_() { return getTokens(PostgreSQLStatementParser.POUND_); }
		public TerminalNode POUND_(int i) {
			return getToken(PostgreSQLStatementParser.POUND_, i);
		}
		public List<TerminalNode> LP_() { return getTokens(PostgreSQLStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(PostgreSQLStatementParser.LP_, i);
		}
		public List<TerminalNode> RP_() { return getTokens(PostgreSQLStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(PostgreSQLStatementParser.RP_, i);
		}
		public List<TerminalNode> LBE_() { return getTokens(PostgreSQLStatementParser.LBE_); }
		public TerminalNode LBE_(int i) {
			return getToken(PostgreSQLStatementParser.LBE_, i);
		}
		public List<TerminalNode> RBE_() { return getTokens(PostgreSQLStatementParser.RBE_); }
		public TerminalNode RBE_(int i) {
			return getToken(PostgreSQLStatementParser.RBE_, i);
		}
		public List<TerminalNode> LBT_() { return getTokens(PostgreSQLStatementParser.LBT_); }
		public TerminalNode LBT_(int i) {
			return getToken(PostgreSQLStatementParser.LBT_, i);
		}
		public List<TerminalNode> RBT_() { return getTokens(PostgreSQLStatementParser.RBT_); }
		public TerminalNode RBT_(int i) {
			return getToken(PostgreSQLStatementParser.RBT_, i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public List<TerminalNode> DQ_() { return getTokens(PostgreSQLStatementParser.DQ_); }
		public TerminalNode DQ_(int i) {
			return getToken(PostgreSQLStatementParser.DQ_, i);
		}
		public List<TerminalNode> SQ_() { return getTokens(PostgreSQLStatementParser.SQ_); }
		public TerminalNode SQ_(int i) {
			return getToken(PostgreSQLStatementParser.SQ_, i);
		}
		public List<TerminalNode> BQ_() { return getTokens(PostgreSQLStatementParser.BQ_); }
		public TerminalNode BQ_(int i) {
			return getToken(PostgreSQLStatementParser.BQ_, i);
		}
		public List<TerminalNode> QUESTION_() { return getTokens(PostgreSQLStatementParser.QUESTION_); }
		public TerminalNode QUESTION_(int i) {
			return getToken(PostgreSQLStatementParser.QUESTION_, i);
		}
		public List<TerminalNode> DOLLAR_() { return getTokens(PostgreSQLStatementParser.DOLLAR_); }
		public TerminalNode DOLLAR_(int i) {
			return getToken(PostgreSQLStatementParser.DOLLAR_, i);
		}
		public List<TerminalNode> AT_() { return getTokens(PostgreSQLStatementParser.AT_); }
		public TerminalNode AT_(int i) {
			return getToken(PostgreSQLStatementParser.AT_, i);
		}
		public List<TerminalNode> SEMI_() { return getTokens(PostgreSQLStatementParser.SEMI_); }
		public TerminalNode SEMI_(int i) {
			return getToken(PostgreSQLStatementParser.SEMI_, i);
		}
		public List<TerminalNode> TILDE_TILDE_() { return getTokens(PostgreSQLStatementParser.TILDE_TILDE_); }
		public TerminalNode TILDE_TILDE_(int i) {
			return getToken(PostgreSQLStatementParser.TILDE_TILDE_, i);
		}
		public List<TerminalNode> NOT_TILDE_TILDE_() { return getTokens(PostgreSQLStatementParser.NOT_TILDE_TILDE_); }
		public TerminalNode NOT_TILDE_TILDE_(int i) {
			return getToken(PostgreSQLStatementParser.NOT_TILDE_TILDE_, i);
		}
		public List<TerminalNode> TYPE_CAST_() { return getTokens(PostgreSQLStatementParser.TYPE_CAST_); }
		public TerminalNode TYPE_CAST_(int i) {
			return getToken(PostgreSQLStatementParser.TYPE_CAST_, i);
		}
		public List<TerminalNode> ILIKE_() { return getTokens(PostgreSQLStatementParser.ILIKE_); }
		public TerminalNode ILIKE_(int i) {
			return getToken(PostgreSQLStatementParser.ILIKE_, i);
		}
		public List<TerminalNode> NOT_ILIKE_() { return getTokens(PostgreSQLStatementParser.NOT_ILIKE_); }
		public TerminalNode NOT_ILIKE_(int i) {
			return getToken(PostgreSQLStatementParser.NOT_ILIKE_, i);
		}
		public List<TerminalNode> UNICODE_ESCAPE() { return getTokens(PostgreSQLStatementParser.UNICODE_ESCAPE); }
		public TerminalNode UNICODE_ESCAPE(int i) {
			return getToken(PostgreSQLStatementParser.UNICODE_ESCAPE, i);
		}
		public List<TerminalNode> JSON_EXTRACT_() { return getTokens(PostgreSQLStatementParser.JSON_EXTRACT_); }
		public TerminalNode JSON_EXTRACT_(int i) {
			return getToken(PostgreSQLStatementParser.JSON_EXTRACT_, i);
		}
		public List<TerminalNode> JSON_EXTRACT_TEXT_() { return getTokens(PostgreSQLStatementParser.JSON_EXTRACT_TEXT_); }
		public TerminalNode JSON_EXTRACT_TEXT_(int i) {
			return getToken(PostgreSQLStatementParser.JSON_EXTRACT_TEXT_, i);
		}
		public List<TerminalNode> JSON_PATH_EXTRACT_() { return getTokens(PostgreSQLStatementParser.JSON_PATH_EXTRACT_); }
		public TerminalNode JSON_PATH_EXTRACT_(int i) {
			return getToken(PostgreSQLStatementParser.JSON_PATH_EXTRACT_, i);
		}
		public List<TerminalNode> JSON_PATH_EXTRACT_TEXT_() { return getTokens(PostgreSQLStatementParser.JSON_PATH_EXTRACT_TEXT_); }
		public TerminalNode JSON_PATH_EXTRACT_TEXT_(int i) {
			return getToken(PostgreSQLStatementParser.JSON_PATH_EXTRACT_TEXT_, i);
		}
		public List<TerminalNode> JSONB_CONTAIN_RIGHT_() { return getTokens(PostgreSQLStatementParser.JSONB_CONTAIN_RIGHT_); }
		public TerminalNode JSONB_CONTAIN_RIGHT_(int i) {
			return getToken(PostgreSQLStatementParser.JSONB_CONTAIN_RIGHT_, i);
		}
		public List<TerminalNode> JSONB_CONTAIN_LEFT_() { return getTokens(PostgreSQLStatementParser.JSONB_CONTAIN_LEFT_); }
		public TerminalNode JSONB_CONTAIN_LEFT_(int i) {
			return getToken(PostgreSQLStatementParser.JSONB_CONTAIN_LEFT_, i);
		}
		public List<TerminalNode> JSONB_CONTAIN_ALL_TOP_KEY_() { return getTokens(PostgreSQLStatementParser.JSONB_CONTAIN_ALL_TOP_KEY_); }
		public TerminalNode JSONB_CONTAIN_ALL_TOP_KEY_(int i) {
			return getToken(PostgreSQLStatementParser.JSONB_CONTAIN_ALL_TOP_KEY_, i);
		}
		public List<TerminalNode> JSONB_PATH_DELETE_() { return getTokens(PostgreSQLStatementParser.JSONB_PATH_DELETE_); }
		public TerminalNode JSONB_PATH_DELETE_(int i) {
			return getToken(PostgreSQLStatementParser.JSONB_PATH_DELETE_, i);
		}
		public List<TerminalNode> JSONB_PATH_CONTAIN_ANY_VALUE_() { return getTokens(PostgreSQLStatementParser.JSONB_PATH_CONTAIN_ANY_VALUE_); }
		public TerminalNode JSONB_PATH_CONTAIN_ANY_VALUE_(int i) {
			return getToken(PostgreSQLStatementParser.JSONB_PATH_CONTAIN_ANY_VALUE_, i);
		}
		public List<TerminalNode> JSONB_PATH_PREDICATE_CHECK_() { return getTokens(PostgreSQLStatementParser.JSONB_PATH_PREDICATE_CHECK_); }
		public TerminalNode JSONB_PATH_PREDICATE_CHECK_(int i) {
			return getToken(PostgreSQLStatementParser.JSONB_PATH_PREDICATE_CHECK_, i);
		}
		public List<TerminalNode> GEOMETRIC_LENGTH_() { return getTokens(PostgreSQLStatementParser.GEOMETRIC_LENGTH_); }
		public TerminalNode GEOMETRIC_LENGTH_(int i) {
			return getToken(PostgreSQLStatementParser.GEOMETRIC_LENGTH_, i);
		}
		public List<TerminalNode> GEOMETRIC_DISTANCE_() { return getTokens(PostgreSQLStatementParser.GEOMETRIC_DISTANCE_); }
		public TerminalNode GEOMETRIC_DISTANCE_(int i) {
			return getToken(PostgreSQLStatementParser.GEOMETRIC_DISTANCE_, i);
		}
		public List<TerminalNode> GEOMETRIC_EXTEND_RIGHT_() { return getTokens(PostgreSQLStatementParser.GEOMETRIC_EXTEND_RIGHT_); }
		public TerminalNode GEOMETRIC_EXTEND_RIGHT_(int i) {
			return getToken(PostgreSQLStatementParser.GEOMETRIC_EXTEND_RIGHT_, i);
		}
		public List<TerminalNode> GEOMETRIC_EXTEND_LEFT_() { return getTokens(PostgreSQLStatementParser.GEOMETRIC_EXTEND_LEFT_); }
		public TerminalNode GEOMETRIC_EXTEND_LEFT_(int i) {
			return getToken(PostgreSQLStatementParser.GEOMETRIC_EXTEND_LEFT_, i);
		}
		public List<TerminalNode> GEOMETRIC_STRICT_BELOW_() { return getTokens(PostgreSQLStatementParser.GEOMETRIC_STRICT_BELOW_); }
		public TerminalNode GEOMETRIC_STRICT_BELOW_(int i) {
			return getToken(PostgreSQLStatementParser.GEOMETRIC_STRICT_BELOW_, i);
		}
		public List<TerminalNode> GEOMETRIC_STRICT_ABOVE_() { return getTokens(PostgreSQLStatementParser.GEOMETRIC_STRICT_ABOVE_); }
		public TerminalNode GEOMETRIC_STRICT_ABOVE_(int i) {
			return getToken(PostgreSQLStatementParser.GEOMETRIC_STRICT_ABOVE_, i);
		}
		public List<TerminalNode> GEOMETRIC_EXTEND_ABOVE_() { return getTokens(PostgreSQLStatementParser.GEOMETRIC_EXTEND_ABOVE_); }
		public TerminalNode GEOMETRIC_EXTEND_ABOVE_(int i) {
			return getToken(PostgreSQLStatementParser.GEOMETRIC_EXTEND_ABOVE_, i);
		}
		public List<TerminalNode> GEOMETRIC_EXTEND_BELOW_() { return getTokens(PostgreSQLStatementParser.GEOMETRIC_EXTEND_BELOW_); }
		public TerminalNode GEOMETRIC_EXTEND_BELOW_(int i) {
			return getToken(PostgreSQLStatementParser.GEOMETRIC_EXTEND_BELOW_, i);
		}
		public List<TerminalNode> GEOMETRIC_BELOW_() { return getTokens(PostgreSQLStatementParser.GEOMETRIC_BELOW_); }
		public TerminalNode GEOMETRIC_BELOW_(int i) {
			return getToken(PostgreSQLStatementParser.GEOMETRIC_BELOW_, i);
		}
		public List<TerminalNode> GEOMETRIC_ABOVE_() { return getTokens(PostgreSQLStatementParser.GEOMETRIC_ABOVE_); }
		public TerminalNode GEOMETRIC_ABOVE_(int i) {
			return getToken(PostgreSQLStatementParser.GEOMETRIC_ABOVE_, i);
		}
		public List<TerminalNode> GEOMETRIC_INTERSECT_() { return getTokens(PostgreSQLStatementParser.GEOMETRIC_INTERSECT_); }
		public TerminalNode GEOMETRIC_INTERSECT_(int i) {
			return getToken(PostgreSQLStatementParser.GEOMETRIC_INTERSECT_, i);
		}
		public List<TerminalNode> GEOMETRIC_PERPENDICULAR_() { return getTokens(PostgreSQLStatementParser.GEOMETRIC_PERPENDICULAR_); }
		public TerminalNode GEOMETRIC_PERPENDICULAR_(int i) {
			return getToken(PostgreSQLStatementParser.GEOMETRIC_PERPENDICULAR_, i);
		}
		public List<TerminalNode> GEOMETRIC_SAME_AS_() { return getTokens(PostgreSQLStatementParser.GEOMETRIC_SAME_AS_); }
		public TerminalNode GEOMETRIC_SAME_AS_(int i) {
			return getToken(PostgreSQLStatementParser.GEOMETRIC_SAME_AS_, i);
		}
		public OpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpContext op() throws RecognitionException {
		OpContext _localctx = new OpContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_op);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3412); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(3411);
					_la = _input.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -4L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 511L) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3414); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,226,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MathOperatorContext extends ParserRuleContext {
		public TerminalNode PLUS_() { return getToken(PostgreSQLStatementParser.PLUS_, 0); }
		public TerminalNode MINUS_() { return getToken(PostgreSQLStatementParser.MINUS_, 0); }
		public TerminalNode ASTERISK_() { return getToken(PostgreSQLStatementParser.ASTERISK_, 0); }
		public TerminalNode SLASH_() { return getToken(PostgreSQLStatementParser.SLASH_, 0); }
		public TerminalNode MOD_() { return getToken(PostgreSQLStatementParser.MOD_, 0); }
		public TerminalNode CARET_() { return getToken(PostgreSQLStatementParser.CARET_, 0); }
		public TerminalNode LT_() { return getToken(PostgreSQLStatementParser.LT_, 0); }
		public TerminalNode GT_() { return getToken(PostgreSQLStatementParser.GT_, 0); }
		public TerminalNode EQ_() { return getToken(PostgreSQLStatementParser.EQ_, 0); }
		public TerminalNode LTE_() { return getToken(PostgreSQLStatementParser.LTE_, 0); }
		public TerminalNode GTE_() { return getToken(PostgreSQLStatementParser.GTE_, 0); }
		public TerminalNode NEQ_() { return getToken(PostgreSQLStatementParser.NEQ_, 0); }
		public MathOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mathOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterMathOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitMathOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitMathOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MathOperatorContext mathOperator() throws RecognitionException {
		MathOperatorContext _localctx = new MathOperatorContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_mathOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3416);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 524413952L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JsonOperatorContext extends ParserRuleContext {
		public JsonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonOperator; }
	 
		public JsonOperatorContext() { }
		public void copyFrom(JsonOperatorContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class JsonPathExtractContext extends JsonOperatorContext {
		public TerminalNode JSON_PATH_EXTRACT_() { return getToken(PostgreSQLStatementParser.JSON_PATH_EXTRACT_, 0); }
		public JsonPathExtractContext(JsonOperatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterJsonPathExtract(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitJsonPathExtract(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitJsonPathExtract(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class JsonbPathDeleteContext extends JsonOperatorContext {
		public TerminalNode JSONB_PATH_DELETE_() { return getToken(PostgreSQLStatementParser.JSONB_PATH_DELETE_, 0); }
		public JsonbPathDeleteContext(JsonOperatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterJsonbPathDelete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitJsonbPathDelete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitJsonbPathDelete(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class JsonbContainTopKeyContext extends JsonOperatorContext {
		public TerminalNode QUESTION_() { return getToken(PostgreSQLStatementParser.QUESTION_, 0); }
		public JsonbContainTopKeyContext(JsonOperatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterJsonbContainTopKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitJsonbContainTopKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitJsonbContainTopKey(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class JsonbConcatContext extends JsonOperatorContext {
		public TerminalNode OR_() { return getToken(PostgreSQLStatementParser.OR_, 0); }
		public JsonbConcatContext(JsonOperatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterJsonbConcat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitJsonbConcat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitJsonbConcat(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class JsonbContainLeftContext extends JsonOperatorContext {
		public TerminalNode JSONB_CONTAIN_LEFT_() { return getToken(PostgreSQLStatementParser.JSONB_CONTAIN_LEFT_, 0); }
		public JsonbContainLeftContext(JsonOperatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterJsonbContainLeft(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitJsonbContainLeft(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitJsonbContainLeft(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class JsonbDeleteContext extends JsonOperatorContext {
		public TerminalNode MINUS_() { return getToken(PostgreSQLStatementParser.MINUS_, 0); }
		public JsonbDeleteContext(JsonOperatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterJsonbDelete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitJsonbDelete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitJsonbDelete(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class JsonExtractContext extends JsonOperatorContext {
		public TerminalNode JSON_EXTRACT_() { return getToken(PostgreSQLStatementParser.JSON_EXTRACT_, 0); }
		public JsonExtractContext(JsonOperatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterJsonExtract(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitJsonExtract(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitJsonExtract(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class JsonbContainRightContext extends JsonOperatorContext {
		public TerminalNode JSONB_CONTAIN_RIGHT_() { return getToken(PostgreSQLStatementParser.JSONB_CONTAIN_RIGHT_, 0); }
		public JsonbContainRightContext(JsonOperatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterJsonbContainRight(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitJsonbContainRight(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitJsonbContainRight(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class JsonExtractTextContext extends JsonOperatorContext {
		public TerminalNode JSON_EXTRACT_TEXT_() { return getToken(PostgreSQLStatementParser.JSON_EXTRACT_TEXT_, 0); }
		public JsonExtractTextContext(JsonOperatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterJsonExtractText(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitJsonExtractText(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitJsonExtractText(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class JsonbPathPredicateCheckContext extends JsonOperatorContext {
		public TerminalNode JSONB_PATH_PREDICATE_CHECK_() { return getToken(PostgreSQLStatementParser.JSONB_PATH_PREDICATE_CHECK_, 0); }
		public JsonbPathPredicateCheckContext(JsonOperatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterJsonbPathPredicateCheck(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitJsonbPathPredicateCheck(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitJsonbPathPredicateCheck(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class JsonbPathContainAnyValueContext extends JsonOperatorContext {
		public TerminalNode JSONB_PATH_CONTAIN_ANY_VALUE_() { return getToken(PostgreSQLStatementParser.JSONB_PATH_CONTAIN_ANY_VALUE_, 0); }
		public JsonbPathContainAnyValueContext(JsonOperatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterJsonbPathContainAnyValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitJsonbPathContainAnyValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitJsonbPathContainAnyValue(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class JsonbContainAnyTopKeyContext extends JsonOperatorContext {
		public TerminalNode QUESTION_() { return getToken(PostgreSQLStatementParser.QUESTION_, 0); }
		public TerminalNode VERTICAL_BAR_() { return getToken(PostgreSQLStatementParser.VERTICAL_BAR_, 0); }
		public JsonbContainAnyTopKeyContext(JsonOperatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterJsonbContainAnyTopKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitJsonbContainAnyTopKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitJsonbContainAnyTopKey(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class JsonPathExtractTextContext extends JsonOperatorContext {
		public TerminalNode JSON_PATH_EXTRACT_TEXT_() { return getToken(PostgreSQLStatementParser.JSON_PATH_EXTRACT_TEXT_, 0); }
		public JsonPathExtractTextContext(JsonOperatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterJsonPathExtractText(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitJsonPathExtractText(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitJsonPathExtractText(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class JsonbContainAllTopKeyContext extends JsonOperatorContext {
		public TerminalNode JSONB_CONTAIN_ALL_TOP_KEY_() { return getToken(PostgreSQLStatementParser.JSONB_CONTAIN_ALL_TOP_KEY_, 0); }
		public JsonbContainAllTopKeyContext(JsonOperatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterJsonbContainAllTopKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitJsonbContainAllTopKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitJsonbContainAllTopKey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonOperatorContext jsonOperator() throws RecognitionException {
		JsonOperatorContext _localctx = new JsonOperatorContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_jsonOperator);
		try {
			setState(3433);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,227,_ctx) ) {
			case 1:
				_localctx = new JsonExtractContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3418);
				match(JSON_EXTRACT_);
				}
				break;
			case 2:
				_localctx = new JsonExtractTextContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3419);
				match(JSON_EXTRACT_TEXT_);
				}
				break;
			case 3:
				_localctx = new JsonPathExtractContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3420);
				match(JSON_PATH_EXTRACT_);
				}
				break;
			case 4:
				_localctx = new JsonPathExtractTextContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3421);
				match(JSON_PATH_EXTRACT_TEXT_);
				}
				break;
			case 5:
				_localctx = new JsonbContainRightContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(3422);
				match(JSONB_CONTAIN_RIGHT_);
				}
				break;
			case 6:
				_localctx = new JsonbContainLeftContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(3423);
				match(JSONB_CONTAIN_LEFT_);
				}
				break;
			case 7:
				_localctx = new JsonbContainTopKeyContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(3424);
				match(QUESTION_);
				}
				break;
			case 8:
				_localctx = new JsonbContainAnyTopKeyContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(3425);
				match(QUESTION_);
				setState(3426);
				match(VERTICAL_BAR_);
				}
				break;
			case 9:
				_localctx = new JsonbContainAllTopKeyContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(3427);
				match(JSONB_CONTAIN_ALL_TOP_KEY_);
				}
				break;
			case 10:
				_localctx = new JsonbConcatContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(3428);
				match(OR_);
				}
				break;
			case 11:
				_localctx = new JsonbDeleteContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(3429);
				match(MINUS_);
				}
				break;
			case 12:
				_localctx = new JsonbPathDeleteContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(3430);
				match(JSONB_PATH_DELETE_);
				}
				break;
			case 13:
				_localctx = new JsonbPathContainAnyValueContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(3431);
				match(JSONB_PATH_CONTAIN_ANY_VALUE_);
				}
				break;
			case 14:
				_localctx = new JsonbPathPredicateCheckContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(3432);
				match(JSONB_PATH_PREDICATE_CHECK_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GeometricOperatorContext extends ParserRuleContext {
		public TerminalNode GEOMETRIC_LENGTH_() { return getToken(PostgreSQLStatementParser.GEOMETRIC_LENGTH_, 0); }
		public TerminalNode GEOMETRIC_DISTANCE_() { return getToken(PostgreSQLStatementParser.GEOMETRIC_DISTANCE_, 0); }
		public TerminalNode GEOMETRIC_EXTEND_RIGHT_() { return getToken(PostgreSQLStatementParser.GEOMETRIC_EXTEND_RIGHT_, 0); }
		public TerminalNode GEOMETRIC_EXTEND_LEFT_() { return getToken(PostgreSQLStatementParser.GEOMETRIC_EXTEND_LEFT_, 0); }
		public TerminalNode GEOMETRIC_STRICT_BELOW_() { return getToken(PostgreSQLStatementParser.GEOMETRIC_STRICT_BELOW_, 0); }
		public TerminalNode GEOMETRIC_STRICT_ABOVE_() { return getToken(PostgreSQLStatementParser.GEOMETRIC_STRICT_ABOVE_, 0); }
		public TerminalNode GEOMETRIC_EXTEND_ABOVE_() { return getToken(PostgreSQLStatementParser.GEOMETRIC_EXTEND_ABOVE_, 0); }
		public TerminalNode GEOMETRIC_EXTEND_BELOW_() { return getToken(PostgreSQLStatementParser.GEOMETRIC_EXTEND_BELOW_, 0); }
		public TerminalNode GEOMETRIC_BELOW_() { return getToken(PostgreSQLStatementParser.GEOMETRIC_BELOW_, 0); }
		public TerminalNode GEOMETRIC_ABOVE_() { return getToken(PostgreSQLStatementParser.GEOMETRIC_ABOVE_, 0); }
		public TerminalNode GEOMETRIC_INTERSECT_() { return getToken(PostgreSQLStatementParser.GEOMETRIC_INTERSECT_, 0); }
		public TerminalNode GEOMETRIC_PERPENDICULAR_() { return getToken(PostgreSQLStatementParser.GEOMETRIC_PERPENDICULAR_, 0); }
		public TerminalNode GEOMETRIC_SAME_AS_() { return getToken(PostgreSQLStatementParser.GEOMETRIC_SAME_AS_, 0); }
		public TerminalNode QUESTION_() { return getToken(PostgreSQLStatementParser.QUESTION_, 0); }
		public TerminalNode MINUS_() { return getToken(PostgreSQLStatementParser.MINUS_, 0); }
		public TerminalNode OR_() { return getToken(PostgreSQLStatementParser.OR_, 0); }
		public TerminalNode POUND_() { return getToken(PostgreSQLStatementParser.POUND_, 0); }
		public TerminalNode SIGNED_LEFT_SHIFT_() { return getToken(PostgreSQLStatementParser.SIGNED_LEFT_SHIFT_, 0); }
		public TerminalNode SIGNED_RIGHT_SHIFT_() { return getToken(PostgreSQLStatementParser.SIGNED_RIGHT_SHIFT_, 0); }
		public GeometricOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_geometricOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterGeometricOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitGeometricOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitGeometricOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GeometricOperatorContext geometricOperator() throws RecognitionException {
		GeometricOperatorContext _localctx = new GeometricOperatorContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_geometricOperator);
		try {
			setState(3455);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,228,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3435);
				match(GEOMETRIC_LENGTH_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3436);
				match(GEOMETRIC_DISTANCE_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3437);
				match(GEOMETRIC_EXTEND_RIGHT_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3438);
				match(GEOMETRIC_EXTEND_LEFT_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3439);
				match(GEOMETRIC_STRICT_BELOW_);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3440);
				match(GEOMETRIC_STRICT_ABOVE_);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3441);
				match(GEOMETRIC_EXTEND_ABOVE_);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3442);
				match(GEOMETRIC_EXTEND_BELOW_);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3443);
				match(GEOMETRIC_BELOW_);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3444);
				match(GEOMETRIC_ABOVE_);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3445);
				match(GEOMETRIC_INTERSECT_);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3446);
				match(GEOMETRIC_PERPENDICULAR_);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3447);
				match(GEOMETRIC_SAME_AS_);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(3448);
				match(QUESTION_);
				setState(3449);
				match(MINUS_);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(3450);
				match(QUESTION_);
				setState(3451);
				match(OR_);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(3452);
				match(POUND_);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(3453);
				match(SIGNED_LEFT_SHIFT_);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(3454);
				match(SIGNED_RIGHT_SHIFT_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QualAllOpContext extends ParserRuleContext {
		public AllOpContext allOp() {
			return getRuleContext(AllOpContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLStatementParser.OPERATOR, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public AnyOperatorContext anyOperator() {
			return getRuleContext(AnyOperatorContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public QualAllOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualAllOp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterQualAllOp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitQualAllOp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitQualAllOp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualAllOpContext qualAllOp() throws RecognitionException {
		QualAllOpContext _localctx = new QualAllOpContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_qualAllOp);
		try {
			setState(3463);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND_:
			case OR_:
			case NOT_:
			case TILDE_:
			case VERTICAL_BAR_:
			case AMPERSAND_:
			case SIGNED_LEFT_SHIFT_:
			case SIGNED_RIGHT_SHIFT_:
			case CARET_:
			case MOD_:
			case COLON_:
			case PLUS_:
			case MINUS_:
			case ASTERISK_:
			case SLASH_:
			case BACKSLASH_:
			case DOT_:
			case DOT_ASTERISK_:
			case SAFE_EQ_:
			case DEQ_:
			case EQ_:
			case CQ_:
			case NEQ_:
			case GT_:
			case GTE_:
			case LT_:
			case LTE_:
			case POUND_:
			case LP_:
			case RP_:
			case LBE_:
			case RBE_:
			case LBT_:
			case RBT_:
			case COMMA_:
			case DQ_:
			case SQ_:
			case BQ_:
			case QUESTION_:
			case DOLLAR_:
			case AT_:
			case SEMI_:
			case TILDE_TILDE_:
			case NOT_TILDE_TILDE_:
			case TYPE_CAST_:
			case ILIKE_:
			case NOT_ILIKE_:
			case UNICODE_ESCAPE:
			case JSON_EXTRACT_:
			case JSON_EXTRACT_TEXT_:
			case JSON_PATH_EXTRACT_:
			case JSON_PATH_EXTRACT_TEXT_:
			case JSONB_CONTAIN_RIGHT_:
			case JSONB_CONTAIN_LEFT_:
			case JSONB_CONTAIN_ALL_TOP_KEY_:
			case JSONB_PATH_DELETE_:
			case JSONB_PATH_CONTAIN_ANY_VALUE_:
			case JSONB_PATH_PREDICATE_CHECK_:
			case GEOMETRIC_LENGTH_:
			case GEOMETRIC_DISTANCE_:
			case GEOMETRIC_EXTEND_RIGHT_:
			case GEOMETRIC_EXTEND_LEFT_:
			case GEOMETRIC_STRICT_BELOW_:
			case GEOMETRIC_STRICT_ABOVE_:
			case GEOMETRIC_EXTEND_ABOVE_:
			case GEOMETRIC_EXTEND_BELOW_:
			case GEOMETRIC_BELOW_:
			case GEOMETRIC_ABOVE_:
			case GEOMETRIC_INTERSECT_:
			case GEOMETRIC_PERPENDICULAR_:
			case GEOMETRIC_SAME_AS_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3457);
				allOp();
				}
				break;
			case OPERATOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(3458);
				match(OPERATOR);
				setState(3459);
				match(LP_);
				setState(3460);
				anyOperator();
				setState(3461);
				match(RP_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AscDescContext extends ParserRuleContext {
		public TerminalNode ASC() { return getToken(PostgreSQLStatementParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(PostgreSQLStatementParser.DESC, 0); }
		public AscDescContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ascDesc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAscDesc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAscDesc(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAscDesc(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AscDescContext ascDesc() throws RecognitionException {
		AscDescContext _localctx = new AscDescContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_ascDesc);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3465);
			_la = _input.LA(1);
			if ( !(_la==ASC || _la==DESC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AnyOperatorContext extends ParserRuleContext {
		public AllOpContext allOp() {
			return getRuleContext(AllOpContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(PostgreSQLStatementParser.DOT_, 0); }
		public AnyOperatorContext anyOperator() {
			return getRuleContext(AnyOperatorContext.class,0);
		}
		public AnyOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anyOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAnyOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAnyOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAnyOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnyOperatorContext anyOperator() throws RecognitionException {
		AnyOperatorContext _localctx = new AnyOperatorContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_anyOperator);
		try {
			setState(3472);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,230,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3467);
				allOp();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3468);
				colId();
				setState(3469);
				match(DOT_);
				setState(3470);
				anyOperator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowExclusionClauseContext extends ParserRuleContext {
		public TerminalNode EXCLUDE() { return getToken(PostgreSQLStatementParser.EXCLUDE, 0); }
		public TerminalNode CURRENT() { return getToken(PostgreSQLStatementParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLStatementParser.ROW, 0); }
		public TerminalNode GROUP() { return getToken(PostgreSQLStatementParser.GROUP, 0); }
		public TerminalNode TIES() { return getToken(PostgreSQLStatementParser.TIES, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode OTHERS() { return getToken(PostgreSQLStatementParser.OTHERS, 0); }
		public WindowExclusionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowExclusionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterWindowExclusionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitWindowExclusionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitWindowExclusionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowExclusionClauseContext windowExclusionClause() throws RecognitionException {
		WindowExclusionClauseContext _localctx = new WindowExclusionClauseContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_windowExclusionClause);
		try {
			setState(3484);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,231,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3474);
				match(EXCLUDE);
				setState(3475);
				match(CURRENT);
				setState(3476);
				match(ROW);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3477);
				match(EXCLUDE);
				setState(3478);
				match(GROUP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3479);
				match(EXCLUDE);
				setState(3480);
				match(TIES);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3481);
				match(EXCLUDE);
				setState(3482);
				match(NO);
				setState(3483);
				match(OTHERS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RowContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PostgreSQLStatementParser.ROW, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public RowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowContext row() throws RecognitionException {
		RowContext _localctx = new RowContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_row);
		try {
			setState(3500);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3486);
				match(ROW);
				setState(3487);
				match(LP_);
				setState(3488);
				exprList(0);
				setState(3489);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3491);
				match(ROW);
				setState(3492);
				match(LP_);
				setState(3493);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3494);
				match(LP_);
				setState(3495);
				exprList(0);
				setState(3496);
				match(COMMA_);
				setState(3497);
				aExpr(0);
				setState(3498);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExplicitRowContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PostgreSQLStatementParser.ROW, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public ExplicitRowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explicitRow; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterExplicitRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitExplicitRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitExplicitRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplicitRowContext explicitRow() throws RecognitionException {
		ExplicitRowContext _localctx = new ExplicitRowContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_explicitRow);
		try {
			setState(3510);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,233,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3502);
				match(ROW);
				setState(3503);
				match(LP_);
				setState(3504);
				exprList(0);
				setState(3505);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3507);
				match(ROW);
				setState(3508);
				match(LP_);
				setState(3509);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ImplicitRowContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public ImplicitRowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implicitRow; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterImplicitRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitImplicitRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitImplicitRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ImplicitRowContext implicitRow() throws RecognitionException {
		ImplicitRowContext _localctx = new ImplicitRowContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_implicitRow);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3512);
			match(LP_);
			setState(3513);
			exprList(0);
			setState(3514);
			match(COMMA_);
			setState(3515);
			aExpr(0);
			setState(3516);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SubTypeContext extends ParserRuleContext {
		public TerminalNode ANY() { return getToken(PostgreSQLStatementParser.ANY, 0); }
		public TerminalNode SOME() { return getToken(PostgreSQLStatementParser.SOME, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public SubTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSubType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSubType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSubType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubTypeContext subType() throws RecognitionException {
		SubTypeContext _localctx = new SubTypeContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_subType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3518);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ArrayExprContext extends ParserRuleContext {
		public TerminalNode LBT_() { return getToken(PostgreSQLStatementParser.LBT_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RBT_() { return getToken(PostgreSQLStatementParser.RBT_, 0); }
		public ArrayExprListContext arrayExprList() {
			return getRuleContext(ArrayExprListContext.class,0);
		}
		public ArrayExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterArrayExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitArrayExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitArrayExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayExprContext arrayExpr() throws RecognitionException {
		ArrayExprContext _localctx = new ArrayExprContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_arrayExpr);
		try {
			setState(3530);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,234,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3520);
				match(LBT_);
				setState(3521);
				exprList(0);
				setState(3522);
				match(RBT_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3524);
				match(LBT_);
				setState(3525);
				arrayExprList();
				setState(3526);
				match(RBT_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3528);
				match(LBT_);
				setState(3529);
				match(RBT_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ArrayExprListContext extends ParserRuleContext {
		public List<ArrayExprContext> arrayExpr() {
			return getRuleContexts(ArrayExprContext.class);
		}
		public ArrayExprContext arrayExpr(int i) {
			return getRuleContext(ArrayExprContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public ArrayExprListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayExprList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterArrayExprList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitArrayExprList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitArrayExprList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayExprListContext arrayExprList() throws RecognitionException {
		ArrayExprListContext _localctx = new ArrayExprListContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_arrayExprList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3532);
			arrayExpr();
			setState(3537);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3533);
				match(COMMA_);
				setState(3534);
				arrayExpr();
				}
				}
				setState(3539);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FuncArgListContext extends ParserRuleContext {
		public List<FuncArgExprContext> funcArgExpr() {
			return getRuleContexts(FuncArgExprContext.class);
		}
		public FuncArgExprContext funcArgExpr(int i) {
			return getRuleContext(FuncArgExprContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public FuncArgListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcArgList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterFuncArgList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitFuncArgList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitFuncArgList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncArgListContext funcArgList() throws RecognitionException {
		FuncArgListContext _localctx = new FuncArgListContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_funcArgList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3540);
			funcArgExpr();
			setState(3545);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,236,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3541);
					match(COMMA_);
					setState(3542);
					funcArgExpr();
					}
					} 
				}
				setState(3547);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,236,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ParamNameContext extends ParserRuleContext {
		public TypeFunctionNameContext typeFunctionName() {
			return getRuleContext(TypeFunctionNameContext.class,0);
		}
		public ParamNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_paramName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterParamName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitParamName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitParamName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParamNameContext paramName() throws RecognitionException {
		ParamNameContext _localctx = new ParamNameContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_paramName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3548);
			typeFunctionName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FuncArgExprContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public ParamNameContext paramName() {
			return getRuleContext(ParamNameContext.class,0);
		}
		public TerminalNode CQ_() { return getToken(PostgreSQLStatementParser.CQ_, 0); }
		public TerminalNode GTE_() { return getToken(PostgreSQLStatementParser.GTE_, 0); }
		public FuncArgExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcArgExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterFuncArgExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitFuncArgExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitFuncArgExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncArgExprContext funcArgExpr() throws RecognitionException {
		FuncArgExprContext _localctx = new FuncArgExprContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_funcArgExpr);
		try {
			setState(3559);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,237,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3550);
				aExpr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3551);
				paramName();
				setState(3552);
				match(CQ_);
				setState(3553);
				aExpr(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3555);
				paramName();
				setState(3556);
				match(GTE_);
				setState(3557);
				aExpr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TypeListContext extends ParserRuleContext {
		public List<TypeNameContext> typeName() {
			return getRuleContexts(TypeNameContext.class);
		}
		public TypeNameContext typeName(int i) {
			return getRuleContext(TypeNameContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public TypeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTypeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTypeList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTypeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeListContext typeList() throws RecognitionException {
		TypeListContext _localctx = new TypeListContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_typeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3561);
			typeName();
			setState(3566);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3562);
				match(COMMA_);
				setState(3563);
				typeName();
				}
				}
				setState(3568);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FuncApplicationContext extends ParserRuleContext {
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public FuncArgListContext funcArgList() {
			return getRuleContext(FuncArgListContext.class,0);
		}
		public SortClauseContext sortClause() {
			return getRuleContext(SortClauseContext.class,0);
		}
		public TerminalNode VARIADIC() { return getToken(PostgreSQLStatementParser.VARIADIC, 0); }
		public FuncArgExprContext funcArgExpr() {
			return getRuleContext(FuncArgExprContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLStatementParser.DISTINCT, 0); }
		public TerminalNode ASTERISK_() { return getToken(PostgreSQLStatementParser.ASTERISK_, 0); }
		public FuncApplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcApplication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterFuncApplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitFuncApplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitFuncApplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncApplicationContext funcApplication() throws RecognitionException {
		FuncApplicationContext _localctx = new FuncApplicationContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_funcApplication);
		int _la;
		try {
			setState(3624);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,244,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3569);
				funcName();
				setState(3570);
				match(LP_);
				setState(3571);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3573);
				funcName();
				setState(3574);
				match(LP_);
				setState(3575);
				funcArgList();
				setState(3577);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(3576);
					sortClause();
					}
				}

				setState(3579);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3581);
				funcName();
				setState(3582);
				match(LP_);
				setState(3583);
				match(VARIADIC);
				setState(3584);
				funcArgExpr();
				setState(3586);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(3585);
					sortClause();
					}
				}

				setState(3588);
				match(RP_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3590);
				funcName();
				setState(3591);
				match(LP_);
				setState(3592);
				funcArgList();
				setState(3593);
				match(COMMA_);
				setState(3594);
				match(VARIADIC);
				setState(3595);
				funcArgExpr();
				setState(3597);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(3596);
					sortClause();
					}
				}

				setState(3599);
				match(RP_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3601);
				funcName();
				setState(3602);
				match(LP_);
				setState(3603);
				match(ALL);
				setState(3604);
				funcArgList();
				setState(3606);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(3605);
					sortClause();
					}
				}

				setState(3608);
				match(RP_);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3610);
				funcName();
				setState(3611);
				match(LP_);
				setState(3612);
				match(DISTINCT);
				setState(3613);
				funcArgList();
				setState(3615);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(3614);
					sortClause();
					}
				}

				setState(3617);
				match(RP_);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3619);
				funcName();
				setState(3620);
				match(LP_);
				setState(3621);
				match(ASTERISK_);
				setState(3622);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FuncNameContext extends ParserRuleContext {
		public TypeFunctionNameContext typeFunctionName() {
			return getRuleContext(TypeFunctionNameContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public FuncNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterFuncName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitFuncName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitFuncName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncNameContext funcName() throws RecognitionException {
		FuncNameContext _localctx = new FuncNameContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_funcName);
		try {
			setState(3630);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,245,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3626);
				typeFunctionName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3627);
				colId();
				setState(3628);
				indirection(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AexprConstContext extends ParserRuleContext {
		public NumberConstContext numberConst() {
			return getRuleContext(NumberConstContext.class,0);
		}
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public TerminalNode BEGIN_DOLLAR_STRING_CONSTANT() { return getToken(PostgreSQLStatementParser.BEGIN_DOLLAR_STRING_CONSTANT, 0); }
		public TerminalNode END_DOLLAR_STRING_CONSTANT() { return getToken(PostgreSQLStatementParser.END_DOLLAR_STRING_CONSTANT, 0); }
		public List<TerminalNode> DOLLAR_TEXT() { return getTokens(PostgreSQLStatementParser.DOLLAR_TEXT); }
		public TerminalNode DOLLAR_TEXT(int i) {
			return getToken(PostgreSQLStatementParser.DOLLAR_TEXT, i);
		}
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public FuncArgListContext funcArgList() {
			return getRuleContext(FuncArgListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public SortClauseContext sortClause() {
			return getRuleContext(SortClauseContext.class,0);
		}
		public ConstTypeNameContext constTypeName() {
			return getRuleContext(ConstTypeNameContext.class,0);
		}
		public TerminalNode TRUE() { return getToken(PostgreSQLStatementParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(PostgreSQLStatementParser.FALSE, 0); }
		public TerminalNode NULL() { return getToken(PostgreSQLStatementParser.NULL, 0); }
		public AexprConstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aexprConst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAexprConst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAexprConst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAexprConst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AexprConstContext aexprConst() throws RecognitionException {
		AexprConstContext _localctx = new AexprConstContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_aexprConst);
		int _la;
		try {
			setState(3660);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,248,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3632);
				numberConst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3633);
				match(STRING_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3634);
				match(BEGIN_DOLLAR_STRING_CONSTANT);
				setState(3638);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DOLLAR_TEXT) {
					{
					{
					setState(3635);
					match(DOLLAR_TEXT);
					}
					}
					setState(3640);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3641);
				match(END_DOLLAR_STRING_CONSTANT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3642);
				funcName();
				setState(3643);
				match(STRING_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3645);
				funcName();
				setState(3646);
				match(LP_);
				setState(3647);
				funcArgList();
				setState(3649);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(3648);
					sortClause();
					}
				}

				setState(3651);
				match(RP_);
				setState(3652);
				match(STRING_);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3654);
				constTypeName();
				setState(3655);
				match(STRING_);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3657);
				match(TRUE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3658);
				match(FALSE);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3659);
				match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NumberConstContext extends ParserRuleContext {
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public TerminalNode PLUS_() { return getToken(PostgreSQLStatementParser.PLUS_, 0); }
		public TerminalNode MINUS_() { return getToken(PostgreSQLStatementParser.MINUS_, 0); }
		public NumberConstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numberConst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterNumberConst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitNumberConst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitNumberConst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumberConstContext numberConst() throws RecognitionException {
		NumberConstContext _localctx = new NumberConstContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_numberConst);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3663);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PLUS_ || _la==MINUS_) {
				{
				setState(3662);
				_la = _input.LA(1);
				if ( !(_la==PLUS_ || _la==MINUS_) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3665);
			match(NUMBER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QualifiedNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifiedName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterQualifiedName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitQualifiedName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitQualifiedName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualifiedNameContext qualifiedName() throws RecognitionException {
		QualifiedNameContext _localctx = new QualifiedNameContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_qualifiedName);
		try {
			setState(3671);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,250,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3667);
				colId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3668);
				colId();
				setState(3669);
				indirection(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColIdContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ColIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterColId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitColId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitColId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColIdContext colId() throws RecognitionException {
		ColIdContext _localctx = new ColIdContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_colId);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3673);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChannelNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ChannelNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_channelName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterChannelName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitChannelName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitChannelName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChannelNameContext channelName() throws RecognitionException {
		ChannelNameContext _localctx = new ChannelNameContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_channelName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3675);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TypeFunctionNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UnreservedWordContext unreservedWord() {
			return getRuleContext(UnreservedWordContext.class,0);
		}
		public TypeFuncNameKeywordContext typeFuncNameKeyword() {
			return getRuleContext(TypeFuncNameKeywordContext.class,0);
		}
		public TypeFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeFunctionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTypeFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTypeFunctionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTypeFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeFunctionNameContext typeFunctionName() throws RecognitionException {
		TypeFunctionNameContext _localctx = new TypeFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_typeFunctionName);
		try {
			setState(3680);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,251,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3677);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3678);
				unreservedWord();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3679);
				typeFuncNameKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionTableContext extends ParserRuleContext {
		public FunctionExprWindowlessContext functionExprWindowless() {
			return getRuleContext(FunctionExprWindowlessContext.class,0);
		}
		public OrdinalityContext ordinality() {
			return getRuleContext(OrdinalityContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(PostgreSQLStatementParser.ROWS, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public RowsFromListContext rowsFromList() {
			return getRuleContext(RowsFromListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public FunctionTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterFunctionTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitFunctionTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitFunctionTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionTableContext functionTable() throws RecognitionException {
		FunctionTableContext _localctx = new FunctionTableContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_functionTable);
		try {
			setState(3694);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3682);
				functionExprWindowless();
				setState(3684);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,252,_ctx) ) {
				case 1:
					{
					setState(3683);
					ordinality();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3686);
				match(ROWS);
				setState(3687);
				match(FROM);
				setState(3688);
				match(LP_);
				setState(3689);
				rowsFromList();
				setState(3690);
				match(RP_);
				setState(3692);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,253,_ctx) ) {
				case 1:
					{
					setState(3691);
					ordinality();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XmlTableContext extends ParserRuleContext {
		public TerminalNode XMLTABLE() { return getToken(PostgreSQLStatementParser.XMLTABLE, 0); }
		public List<TerminalNode> LP_() { return getTokens(PostgreSQLStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(PostgreSQLStatementParser.LP_, i);
		}
		public CExprContext cExpr() {
			return getRuleContext(CExprContext.class,0);
		}
		public XmlExistsArgumentContext xmlExistsArgument() {
			return getRuleContext(XmlExistsArgumentContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(PostgreSQLStatementParser.COLUMNS, 0); }
		public XmlTableColumnListContext xmlTableColumnList() {
			return getRuleContext(XmlTableColumnListContext.class,0);
		}
		public List<TerminalNode> RP_() { return getTokens(PostgreSQLStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(PostgreSQLStatementParser.RP_, i);
		}
		public TerminalNode XMLNAMESPACES() { return getToken(PostgreSQLStatementParser.XMLNAMESPACES, 0); }
		public XmlNamespaceListContext xmlNamespaceList() {
			return getRuleContext(XmlNamespaceListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public XmlTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterXmlTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitXmlTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitXmlTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTableContext xmlTable() throws RecognitionException {
		XmlTableContext _localctx = new XmlTableContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_xmlTable);
		try {
			setState(3717);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,255,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3696);
				match(XMLTABLE);
				setState(3697);
				match(LP_);
				setState(3698);
				cExpr();
				setState(3699);
				xmlExistsArgument();
				setState(3700);
				match(COLUMNS);
				setState(3701);
				xmlTableColumnList();
				setState(3702);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3704);
				match(XMLTABLE);
				setState(3705);
				match(LP_);
				setState(3706);
				match(XMLNAMESPACES);
				setState(3707);
				match(LP_);
				setState(3708);
				xmlNamespaceList();
				setState(3709);
				match(RP_);
				setState(3710);
				match(COMMA_);
				setState(3711);
				cExpr();
				setState(3712);
				xmlExistsArgument();
				setState(3713);
				match(COLUMNS);
				setState(3714);
				xmlTableColumnList();
				setState(3715);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XmlTableColumnListContext extends ParserRuleContext {
		public List<XmlTableColumnElContext> xmlTableColumnEl() {
			return getRuleContexts(XmlTableColumnElContext.class);
		}
		public XmlTableColumnElContext xmlTableColumnEl(int i) {
			return getRuleContext(XmlTableColumnElContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public XmlTableColumnListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTableColumnList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterXmlTableColumnList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitXmlTableColumnList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitXmlTableColumnList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTableColumnListContext xmlTableColumnList() throws RecognitionException {
		XmlTableColumnListContext _localctx = new XmlTableColumnListContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_xmlTableColumnList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3719);
			xmlTableColumnEl();
			setState(3724);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3720);
				match(COMMA_);
				setState(3721);
				xmlTableColumnEl();
				}
				}
				setState(3726);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XmlTableColumnElContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public XmlTableColumnOptionListContext xmlTableColumnOptionList() {
			return getRuleContext(XmlTableColumnOptionListContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public TerminalNode ORDINALITY() { return getToken(PostgreSQLStatementParser.ORDINALITY, 0); }
		public XmlTableColumnElContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTableColumnEl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterXmlTableColumnEl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitXmlTableColumnEl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitXmlTableColumnEl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTableColumnElContext xmlTableColumnEl() throws RecognitionException {
		XmlTableColumnElContext _localctx = new XmlTableColumnElContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_xmlTableColumnEl);
		try {
			setState(3738);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,257,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3727);
				colId();
				setState(3728);
				typeName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3730);
				colId();
				setState(3731);
				typeName();
				setState(3732);
				xmlTableColumnOptionList(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3734);
				colId();
				setState(3735);
				match(FOR);
				setState(3736);
				match(ORDINALITY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XmlTableColumnOptionListContext extends ParserRuleContext {
		public XmlTableColumnOptionElContext xmlTableColumnOptionEl() {
			return getRuleContext(XmlTableColumnOptionElContext.class,0);
		}
		public XmlTableColumnOptionListContext xmlTableColumnOptionList() {
			return getRuleContext(XmlTableColumnOptionListContext.class,0);
		}
		public XmlTableColumnOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTableColumnOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterXmlTableColumnOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitXmlTableColumnOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitXmlTableColumnOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTableColumnOptionListContext xmlTableColumnOptionList() throws RecognitionException {
		return xmlTableColumnOptionList(0);
	}

	private XmlTableColumnOptionListContext xmlTableColumnOptionList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		XmlTableColumnOptionListContext _localctx = new XmlTableColumnOptionListContext(_ctx, _parentState);
		XmlTableColumnOptionListContext _prevctx = _localctx;
		int _startState = 362;
		enterRecursionRule(_localctx, 362, RULE_xmlTableColumnOptionList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3741);
			xmlTableColumnOptionEl();
			}
			_ctx.stop = _input.LT(-1);
			setState(3747);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,258,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new XmlTableColumnOptionListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_xmlTableColumnOptionList);
					setState(3743);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3744);
					xmlTableColumnOptionEl();
					}
					} 
				}
				setState(3749);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,258,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XmlTableColumnOptionElContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public BExprContext bExpr() {
			return getRuleContext(BExprContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PostgreSQLStatementParser.NULL, 0); }
		public XmlTableColumnOptionElContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTableColumnOptionEl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterXmlTableColumnOptionEl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitXmlTableColumnOptionEl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitXmlTableColumnOptionEl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTableColumnOptionElContext xmlTableColumnOptionEl() throws RecognitionException {
		XmlTableColumnOptionElContext _localctx = new XmlTableColumnOptionElContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_xmlTableColumnOptionEl);
		try {
			setState(3758);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNICODE_ESCAPE:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case XML:
			case JSON:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case PARAM:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case NATIONAL:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3750);
				identifier();
				setState(3751);
				bExpr(0);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3753);
				match(DEFAULT);
				setState(3754);
				bExpr(0);
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 3);
				{
				setState(3755);
				match(NOT);
				setState(3756);
				match(NULL);
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 4);
				{
				setState(3757);
				match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XmlNamespaceListContext extends ParserRuleContext {
		public List<XmlNamespaceElContext> xmlNamespaceEl() {
			return getRuleContexts(XmlNamespaceElContext.class);
		}
		public XmlNamespaceElContext xmlNamespaceEl(int i) {
			return getRuleContext(XmlNamespaceElContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public XmlNamespaceListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlNamespaceList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterXmlNamespaceList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitXmlNamespaceList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitXmlNamespaceList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlNamespaceListContext xmlNamespaceList() throws RecognitionException {
		XmlNamespaceListContext _localctx = new XmlNamespaceListContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_xmlNamespaceList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3760);
			xmlNamespaceEl();
			setState(3765);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3761);
				match(COMMA_);
				setState(3762);
				xmlNamespaceEl();
				}
				}
				setState(3767);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XmlNamespaceElContext extends ParserRuleContext {
		public BExprContext bExpr() {
			return getRuleContext(BExprContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public XmlNamespaceElContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlNamespaceEl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterXmlNamespaceEl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitXmlNamespaceEl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitXmlNamespaceEl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlNamespaceElContext xmlNamespaceEl() throws RecognitionException {
		XmlNamespaceElContext _localctx = new XmlNamespaceElContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_xmlNamespaceEl);
		try {
			setState(3774);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEGIN_DOLLAR_STRING_CONSTANT:
			case OR_:
			case SIGNED_LEFT_SHIFT_:
			case SIGNED_RIGHT_SHIFT_:
			case PLUS_:
			case MINUS_:
			case POUND_:
			case LP_:
			case QUESTION_:
			case DOLLAR_:
			case UNICODE_ESCAPE:
			case JSON_EXTRACT_:
			case JSON_EXTRACT_TEXT_:
			case JSON_PATH_EXTRACT_:
			case JSON_PATH_EXTRACT_TEXT_:
			case JSONB_CONTAIN_RIGHT_:
			case JSONB_CONTAIN_LEFT_:
			case JSONB_CONTAIN_ALL_TOP_KEY_:
			case JSONB_PATH_DELETE_:
			case JSONB_PATH_CONTAIN_ANY_VALUE_:
			case JSONB_PATH_PREDICATE_CHECK_:
			case GEOMETRIC_LENGTH_:
			case GEOMETRIC_DISTANCE_:
			case GEOMETRIC_EXTEND_RIGHT_:
			case GEOMETRIC_EXTEND_LEFT_:
			case GEOMETRIC_STRICT_BELOW_:
			case GEOMETRIC_STRICT_ABOVE_:
			case GEOMETRIC_EXTEND_ABOVE_:
			case GEOMETRIC_EXTEND_BELOW_:
			case GEOMETRIC_BELOW_:
			case GEOMETRIC_ABOVE_:
			case GEOMETRIC_INTERSECT_:
			case GEOMETRIC_PERPENDICULAR_:
			case GEOMETRIC_SAME_AS_:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXISTS:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case USER:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CURRENT_TIMESTAMP:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case INT2:
			case INT4:
			case INT8:
			case FLOAT:
			case FLOAT4:
			case FLOAT8:
			case VARCHAR:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case BIT:
			case XML:
			case JSON:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case CURRENT_SCHEMA:
			case NORMALIZE:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case KEY:
			case POSITION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case CASE:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case NULL:
			case TRUE:
			case FALSE:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case ARRAY:
			case INTERVAL:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3768);
				bExpr(0);
				setState(3769);
				match(AS);
				setState(3770);
				identifier();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3772);
				match(DEFAULT);
				setState(3773);
				bExpr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FuncExprContext extends ParserRuleContext {
		public FuncApplicationContext funcApplication() {
			return getRuleContext(FuncApplicationContext.class,0);
		}
		public WithinGroupClauseContext withinGroupClause() {
			return getRuleContext(WithinGroupClauseContext.class,0);
		}
		public FilterClauseContext filterClause() {
			return getRuleContext(FilterClauseContext.class,0);
		}
		public OverClauseContext overClause() {
			return getRuleContext(OverClauseContext.class,0);
		}
		public FunctionExprCommonSubexprContext functionExprCommonSubexpr() {
			return getRuleContext(FunctionExprCommonSubexprContext.class,0);
		}
		public FuncExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterFuncExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitFuncExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitFuncExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncExprContext funcExpr() throws RecognitionException {
		FuncExprContext _localctx = new FuncExprContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_funcExpr);
		try {
			setState(3787);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,265,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3776);
				funcApplication();
				setState(3778);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,262,_ctx) ) {
				case 1:
					{
					setState(3777);
					withinGroupClause();
					}
					break;
				}
				setState(3781);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,263,_ctx) ) {
				case 1:
					{
					setState(3780);
					filterClause();
					}
					break;
				}
				setState(3784);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,264,_ctx) ) {
				case 1:
					{
					setState(3783);
					overClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3786);
				functionExprCommonSubexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WithinGroupClauseContext extends ParserRuleContext {
		public TerminalNode WITHIN() { return getToken(PostgreSQLStatementParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(PostgreSQLStatementParser.GROUP, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public SortClauseContext sortClause() {
			return getRuleContext(SortClauseContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public WithinGroupClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withinGroupClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterWithinGroupClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitWithinGroupClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitWithinGroupClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithinGroupClauseContext withinGroupClause() throws RecognitionException {
		WithinGroupClauseContext _localctx = new WithinGroupClauseContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_withinGroupClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3789);
			match(WITHIN);
			setState(3790);
			match(GROUP);
			setState(3791);
			match(LP_);
			setState(3792);
			sortClause();
			setState(3793);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FilterClauseContext extends ParserRuleContext {
		public TerminalNode FILTER() { return getToken(PostgreSQLStatementParser.FILTER, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode WHERE() { return getToken(PostgreSQLStatementParser.WHERE, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public FilterClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterFilterClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitFilterClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitFilterClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FilterClauseContext filterClause() throws RecognitionException {
		FilterClauseContext _localctx = new FilterClauseContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_filterClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3795);
			match(FILTER);
			setState(3796);
			match(LP_);
			setState(3797);
			match(WHERE);
			setState(3798);
			aExpr(0);
			setState(3799);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionExprWindowlessContext extends ParserRuleContext {
		public FuncApplicationContext funcApplication() {
			return getRuleContext(FuncApplicationContext.class,0);
		}
		public FunctionExprCommonSubexprContext functionExprCommonSubexpr() {
			return getRuleContext(FunctionExprCommonSubexprContext.class,0);
		}
		public FunctionExprWindowlessContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionExprWindowless; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterFunctionExprWindowless(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitFunctionExprWindowless(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitFunctionExprWindowless(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionExprWindowlessContext functionExprWindowless() throws RecognitionException {
		FunctionExprWindowlessContext _localctx = new FunctionExprWindowlessContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_functionExprWindowless);
		try {
			setState(3803);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,266,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3801);
				funcApplication();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3802);
				functionExprCommonSubexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OrdinalityContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode ORDINALITY() { return getToken(PostgreSQLStatementParser.ORDINALITY, 0); }
		public OrdinalityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ordinality; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOrdinality(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOrdinality(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOrdinality(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrdinalityContext ordinality() throws RecognitionException {
		OrdinalityContext _localctx = new OrdinalityContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_ordinality);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3805);
			match(WITH);
			setState(3806);
			match(ORDINALITY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionExprCommonSubexprContext extends ParserRuleContext {
		public TerminalNode COLLATION() { return getToken(PostgreSQLStatementParser.COLLATION, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public List<AExprContext> aExpr() {
			return getRuleContexts(AExprContext.class);
		}
		public AExprContext aExpr(int i) {
			return getRuleContext(AExprContext.class,i);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(PostgreSQLStatementParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(PostgreSQLStatementParser.CURRENT_TIME, 0); }
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(PostgreSQLStatementParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode LOCALTIME() { return getToken(PostgreSQLStatementParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(PostgreSQLStatementParser.LOCALTIMESTAMP, 0); }
		public TerminalNode CURRENT_ROLE() { return getToken(PostgreSQLStatementParser.CURRENT_ROLE, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLStatementParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLStatementParser.SESSION_USER, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLStatementParser.USER, 0); }
		public TerminalNode CURRENT_CATALOG() { return getToken(PostgreSQLStatementParser.CURRENT_CATALOG, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(PostgreSQLStatementParser.CURRENT_SCHEMA, 0); }
		public TerminalNode CAST() { return getToken(PostgreSQLStatementParser.CAST, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TerminalNode EXTRACT() { return getToken(PostgreSQLStatementParser.EXTRACT, 0); }
		public ExtractListContext extractList() {
			return getRuleContext(ExtractListContext.class,0);
		}
		public TerminalNode NORMALIZE() { return getToken(PostgreSQLStatementParser.NORMALIZE, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public UnicodeNormalFormContext unicodeNormalForm() {
			return getRuleContext(UnicodeNormalFormContext.class,0);
		}
		public TerminalNode OVERLAY() { return getToken(PostgreSQLStatementParser.OVERLAY, 0); }
		public OverlayListContext overlayList() {
			return getRuleContext(OverlayListContext.class,0);
		}
		public TerminalNode POSITION() { return getToken(PostgreSQLStatementParser.POSITION, 0); }
		public PositionListContext positionList() {
			return getRuleContext(PositionListContext.class,0);
		}
		public TerminalNode SUBSTRING() { return getToken(PostgreSQLStatementParser.SUBSTRING, 0); }
		public SubstrListContext substrList() {
			return getRuleContext(SubstrListContext.class,0);
		}
		public TerminalNode TREAT() { return getToken(PostgreSQLStatementParser.TREAT, 0); }
		public TerminalNode TRIM() { return getToken(PostgreSQLStatementParser.TRIM, 0); }
		public TerminalNode BOTH() { return getToken(PostgreSQLStatementParser.BOTH, 0); }
		public TrimListContext trimList() {
			return getRuleContext(TrimListContext.class,0);
		}
		public TerminalNode LEADING() { return getToken(PostgreSQLStatementParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(PostgreSQLStatementParser.TRAILING, 0); }
		public TerminalNode NULLIF() { return getToken(PostgreSQLStatementParser.NULLIF, 0); }
		public TerminalNode COALESCE() { return getToken(PostgreSQLStatementParser.COALESCE, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode GREATEST() { return getToken(PostgreSQLStatementParser.GREATEST, 0); }
		public TerminalNode LEAST() { return getToken(PostgreSQLStatementParser.LEAST, 0); }
		public TerminalNode XMLCONCAT() { return getToken(PostgreSQLStatementParser.XMLCONCAT, 0); }
		public TerminalNode XMLELEMENT() { return getToken(PostgreSQLStatementParser.XMLELEMENT, 0); }
		public TerminalNode NAME() { return getToken(PostgreSQLStatementParser.NAME, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public XmlAttributesContext xmlAttributes() {
			return getRuleContext(XmlAttributesContext.class,0);
		}
		public TerminalNode XMLEXISTS() { return getToken(PostgreSQLStatementParser.XMLEXISTS, 0); }
		public CExprContext cExpr() {
			return getRuleContext(CExprContext.class,0);
		}
		public XmlExistsArgumentContext xmlExistsArgument() {
			return getRuleContext(XmlExistsArgumentContext.class,0);
		}
		public TerminalNode XMLFOREST() { return getToken(PostgreSQLStatementParser.XMLFOREST, 0); }
		public XmlAttributeListContext xmlAttributeList() {
			return getRuleContext(XmlAttributeListContext.class,0);
		}
		public TerminalNode XMLPARSE() { return getToken(PostgreSQLStatementParser.XMLPARSE, 0); }
		public DocumentOrContentContext documentOrContent() {
			return getRuleContext(DocumentOrContentContext.class,0);
		}
		public XmlWhitespaceOptionContext xmlWhitespaceOption() {
			return getRuleContext(XmlWhitespaceOptionContext.class,0);
		}
		public TerminalNode XMLPI() { return getToken(PostgreSQLStatementParser.XMLPI, 0); }
		public TerminalNode XMLROOT() { return getToken(PostgreSQLStatementParser.XMLROOT, 0); }
		public XmlRootVersionContext xmlRootVersion() {
			return getRuleContext(XmlRootVersionContext.class,0);
		}
		public XmlRootStandaloneContext xmlRootStandalone() {
			return getRuleContext(XmlRootStandaloneContext.class,0);
		}
		public TerminalNode XMLSERIALIZE() { return getToken(PostgreSQLStatementParser.XMLSERIALIZE, 0); }
		public SimpleTypeNameContext simpleTypeName() {
			return getRuleContext(SimpleTypeNameContext.class,0);
		}
		public FunctionExprCommonSubexprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionExprCommonSubexpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterFunctionExprCommonSubexpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitFunctionExprCommonSubexpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitFunctionExprCommonSubexpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionExprCommonSubexprContext functionExprCommonSubexpr() throws RecognitionException {
		FunctionExprCommonSubexprContext _localctx = new FunctionExprCommonSubexprContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_functionExprCommonSubexpr);
		int _la;
		try {
			setState(4020);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,269,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3808);
				match(COLLATION);
				setState(3809);
				match(FOR);
				setState(3810);
				match(LP_);
				setState(3811);
				aExpr(0);
				setState(3812);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3814);
				match(CURRENT_DATE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3815);
				match(CURRENT_TIME);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3816);
				match(CURRENT_TIME);
				setState(3817);
				match(LP_);
				setState(3818);
				match(NUMBER_);
				setState(3819);
				match(RP_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3820);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3821);
				match(CURRENT_TIMESTAMP);
				setState(3822);
				match(LP_);
				setState(3823);
				match(NUMBER_);
				setState(3824);
				match(RP_);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3825);
				match(LOCALTIME);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3826);
				match(LOCALTIME);
				setState(3827);
				match(LP_);
				setState(3828);
				match(NUMBER_);
				setState(3829);
				match(RP_);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3830);
				match(LOCALTIMESTAMP);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3831);
				match(LOCALTIMESTAMP);
				setState(3832);
				match(LP_);
				setState(3833);
				match(NUMBER_);
				setState(3834);
				match(RP_);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3835);
				match(CURRENT_ROLE);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3836);
				match(CURRENT_USER);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3837);
				match(SESSION_USER);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(3838);
				match(USER);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(3839);
				match(CURRENT_CATALOG);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(3840);
				match(CURRENT_SCHEMA);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(3841);
				match(CAST);
				setState(3842);
				match(LP_);
				setState(3843);
				aExpr(0);
				setState(3844);
				match(AS);
				setState(3845);
				typeName();
				setState(3846);
				match(RP_);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(3848);
				match(EXTRACT);
				setState(3849);
				match(LP_);
				setState(3851);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & -1702650966907551743L) != 0) || ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & -36028934466307075L) != 0) || ((((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & 283126353889277L) != 0) || ((((_la - 241)) & ~0x3f) == 0 && ((1L << (_la - 241)) & -545622264849L) != 0) || ((((_la - 305)) & ~0x3f) == 0 && ((1L << (_la - 305)) & -1L) != 0) || ((((_la - 369)) & ~0x3f) == 0 && ((1L << (_la - 369)) & 9895604649983L) != 0) || ((((_la - 437)) & ~0x3f) == 0 && ((1L << (_la - 437)) & 562950016917239L) != 0) || ((((_la - 505)) & ~0x3f) == 0 && ((1L << (_la - 505)) & 7138750043982826433L) != 0) || ((((_la - 569)) & ~0x3f) == 0 && ((1L << (_la - 569)) & 2173569L) != 0)) {
					{
					setState(3850);
					extractList();
					}
				}

				setState(3853);
				match(RP_);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(3854);
				match(NORMALIZE);
				setState(3855);
				match(LP_);
				setState(3856);
				aExpr(0);
				setState(3857);
				match(RP_);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(3859);
				match(NORMALIZE);
				setState(3860);
				match(LP_);
				setState(3861);
				aExpr(0);
				setState(3862);
				match(COMMA_);
				setState(3863);
				unicodeNormalForm();
				setState(3864);
				match(RP_);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(3866);
				match(OVERLAY);
				setState(3867);
				match(LP_);
				setState(3868);
				overlayList();
				setState(3869);
				match(RP_);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(3871);
				match(POSITION);
				setState(3872);
				match(LP_);
				setState(3873);
				positionList();
				setState(3874);
				match(RP_);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(3876);
				match(SUBSTRING);
				setState(3877);
				match(LP_);
				setState(3878);
				substrList();
				setState(3879);
				match(RP_);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(3881);
				match(TREAT);
				setState(3882);
				match(LP_);
				setState(3883);
				aExpr(0);
				setState(3884);
				match(AS);
				setState(3885);
				typeName();
				setState(3886);
				match(RP_);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(3888);
				match(TRIM);
				setState(3889);
				match(LP_);
				setState(3890);
				match(BOTH);
				setState(3891);
				trimList();
				setState(3892);
				match(RP_);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(3894);
				match(TRIM);
				setState(3895);
				match(LP_);
				setState(3896);
				match(LEADING);
				setState(3897);
				trimList();
				setState(3898);
				match(RP_);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(3900);
				match(TRIM);
				setState(3901);
				match(LP_);
				setState(3902);
				match(TRAILING);
				setState(3903);
				trimList();
				setState(3904);
				match(RP_);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(3906);
				match(TRIM);
				setState(3907);
				match(LP_);
				setState(3908);
				trimList();
				setState(3909);
				match(RP_);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(3911);
				match(NULLIF);
				setState(3912);
				match(LP_);
				setState(3913);
				aExpr(0);
				setState(3914);
				match(COMMA_);
				setState(3915);
				aExpr(0);
				setState(3916);
				match(RP_);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(3918);
				match(COALESCE);
				setState(3919);
				match(LP_);
				setState(3920);
				exprList(0);
				setState(3921);
				match(RP_);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(3923);
				match(GREATEST);
				setState(3924);
				match(LP_);
				setState(3925);
				exprList(0);
				setState(3926);
				match(RP_);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(3928);
				match(LEAST);
				setState(3929);
				match(LP_);
				setState(3930);
				exprList(0);
				setState(3931);
				match(RP_);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(3933);
				match(XMLCONCAT);
				setState(3934);
				match(LP_);
				setState(3935);
				exprList(0);
				setState(3936);
				match(RP_);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(3938);
				match(XMLELEMENT);
				setState(3939);
				match(LP_);
				setState(3940);
				match(NAME);
				setState(3941);
				identifier();
				setState(3942);
				match(RP_);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(3944);
				match(XMLELEMENT);
				setState(3945);
				match(LP_);
				setState(3946);
				match(NAME);
				setState(3947);
				identifier();
				setState(3948);
				match(COMMA_);
				setState(3949);
				xmlAttributes();
				setState(3950);
				match(RP_);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(3952);
				match(XMLELEMENT);
				setState(3953);
				match(LP_);
				setState(3954);
				match(NAME);
				setState(3955);
				identifier();
				setState(3956);
				match(COMMA_);
				setState(3957);
				exprList(0);
				setState(3958);
				match(RP_);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(3960);
				match(XMLELEMENT);
				setState(3961);
				match(LP_);
				setState(3962);
				match(NAME);
				setState(3963);
				identifier();
				setState(3964);
				match(COMMA_);
				setState(3965);
				xmlAttributes();
				setState(3966);
				match(COMMA_);
				setState(3967);
				exprList(0);
				setState(3968);
				match(RP_);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(3970);
				match(XMLEXISTS);
				setState(3971);
				match(LP_);
				setState(3972);
				cExpr();
				setState(3973);
				xmlExistsArgument();
				setState(3974);
				match(RP_);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(3976);
				match(XMLFOREST);
				setState(3977);
				match(LP_);
				setState(3978);
				xmlAttributeList();
				setState(3979);
				match(RP_);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(3981);
				match(XMLPARSE);
				setState(3982);
				match(LP_);
				setState(3983);
				documentOrContent();
				setState(3984);
				aExpr(0);
				setState(3985);
				xmlWhitespaceOption();
				setState(3986);
				match(RP_);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(3988);
				match(XMLPI);
				setState(3989);
				match(LP_);
				setState(3990);
				match(NAME);
				setState(3991);
				identifier();
				setState(3992);
				match(RP_);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(3994);
				match(XMLPI);
				setState(3995);
				match(LP_);
				setState(3996);
				match(NAME);
				setState(3997);
				identifier();
				setState(3998);
				match(COMMA_);
				setState(3999);
				aExpr(0);
				setState(4000);
				match(RP_);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(4002);
				match(XMLROOT);
				setState(4003);
				match(LP_);
				setState(4004);
				aExpr(0);
				setState(4005);
				match(COMMA_);
				setState(4006);
				xmlRootVersion();
				setState(4008);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_) {
					{
					setState(4007);
					xmlRootStandalone();
					}
				}

				setState(4010);
				match(RP_);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(4012);
				match(XMLSERIALIZE);
				setState(4013);
				match(LP_);
				setState(4014);
				documentOrContent();
				setState(4015);
				aExpr(0);
				setState(4016);
				match(AS);
				setState(4017);
				simpleTypeName();
				setState(4018);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TypeNameContext extends ParserRuleContext {
		public SimpleTypeNameContext simpleTypeName() {
			return getRuleContext(SimpleTypeNameContext.class,0);
		}
		public OptArrayBoundsContext optArrayBounds() {
			return getRuleContext(OptArrayBoundsContext.class,0);
		}
		public TerminalNode SETOF() { return getToken(PostgreSQLStatementParser.SETOF, 0); }
		public TerminalNode ARRAY() { return getToken(PostgreSQLStatementParser.ARRAY, 0); }
		public TerminalNode LBT_() { return getToken(PostgreSQLStatementParser.LBT_, 0); }
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public TerminalNode RBT_() { return getToken(PostgreSQLStatementParser.RBT_, 0); }
		public TypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTypeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTypeName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeNameContext typeName() throws RecognitionException {
		TypeNameContext _localctx = new TypeNameContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_typeName);
		try {
			setState(4049);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,270,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4022);
				simpleTypeName();
				setState(4023);
				optArrayBounds(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4025);
				match(SETOF);
				setState(4026);
				simpleTypeName();
				setState(4027);
				optArrayBounds(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4029);
				simpleTypeName();
				setState(4030);
				match(ARRAY);
				setState(4031);
				match(LBT_);
				setState(4032);
				match(NUMBER_);
				setState(4033);
				match(RBT_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4035);
				match(SETOF);
				setState(4036);
				simpleTypeName();
				setState(4037);
				match(ARRAY);
				setState(4038);
				match(LBT_);
				setState(4039);
				match(NUMBER_);
				setState(4040);
				match(RBT_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4042);
				simpleTypeName();
				setState(4043);
				match(ARRAY);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4045);
				match(SETOF);
				setState(4046);
				simpleTypeName();
				setState(4047);
				match(ARRAY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimpleTypeNameContext extends ParserRuleContext {
		public GenericTypeContext genericType() {
			return getRuleContext(GenericTypeContext.class,0);
		}
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public BitContext bit() {
			return getRuleContext(BitContext.class,0);
		}
		public CharacterContext character() {
			return getRuleContext(CharacterContext.class,0);
		}
		public ConstDatetimeContext constDatetime() {
			return getRuleContext(ConstDatetimeContext.class,0);
		}
		public ConstIntervalContext constInterval() {
			return getRuleContext(ConstIntervalContext.class,0);
		}
		public OptIntervalContext optInterval() {
			return getRuleContext(OptIntervalContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public SimpleTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleTypeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSimpleTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSimpleTypeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSimpleTypeName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleTypeNameContext simpleTypeName() throws RecognitionException {
		SimpleTypeNameContext _localctx = new SimpleTypeNameContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_simpleTypeName);
		try {
			setState(4064);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,271,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4051);
				genericType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4052);
				numeric();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4053);
				bit();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4054);
				character();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4055);
				constDatetime();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4056);
				constInterval();
				setState(4057);
				optInterval();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4059);
				constInterval();
				setState(4060);
				match(LP_);
				setState(4061);
				match(NUMBER_);
				setState(4062);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstTypeNameContext extends ParserRuleContext {
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public BitContext bit() {
			return getRuleContext(BitContext.class,0);
		}
		public CharacterContext character() {
			return getRuleContext(CharacterContext.class,0);
		}
		public ConstDatetimeContext constDatetime() {
			return getRuleContext(ConstDatetimeContext.class,0);
		}
		public ConstTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constTypeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterConstTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitConstTypeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitConstTypeName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstTypeNameContext constTypeName() throws RecognitionException {
		ConstTypeNameContext _localctx = new ConstTypeNameContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_constTypeName);
		try {
			setState(4070);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT:
			case INT2:
			case INT4:
			case INT8:
			case FLOAT:
			case FLOAT4:
			case FLOAT8:
			case BOOLEAN:
			case DOUBLE:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case DEC:
				enterOuterAlt(_localctx, 1);
				{
				setState(4066);
				numeric();
				}
				break;
			case BIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4067);
				bit();
				}
				break;
			case VARCHAR:
			case CHAR:
			case CHARACTER:
			case NATIONAL:
			case NCHAR:
				enterOuterAlt(_localctx, 3);
				{
				setState(4068);
				character();
				}
				break;
			case DATE:
			case TIME:
			case TIMESTAMP:
				enterOuterAlt(_localctx, 4);
				{
				setState(4069);
				constDatetime();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExprListContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public ExprListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exprList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterExprList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitExprList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitExprList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExprListContext exprList() throws RecognitionException {
		return exprList(0);
	}

	private ExprListContext exprList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExprListContext _localctx = new ExprListContext(_ctx, _parentState);
		ExprListContext _prevctx = _localctx;
		int _startState = 388;
		enterRecursionRule(_localctx, 388, RULE_exprList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4073);
			aExpr(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(4080);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,273,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExprListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_exprList);
					setState(4075);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4076);
					match(COMMA_);
					setState(4077);
					aExpr(0);
					}
					} 
				}
				setState(4082);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,273,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExtractListContext extends ParserRuleContext {
		public ExtractArgContext extractArg() {
			return getRuleContext(ExtractArgContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public ExtractListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extractList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterExtractList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitExtractList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitExtractList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExtractListContext extractList() throws RecognitionException {
		ExtractListContext _localctx = new ExtractListContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_extractList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4083);
			extractArg();
			setState(4084);
			match(FROM);
			setState(4085);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExtractArgContext extends ParserRuleContext {
		public TerminalNode YEAR() { return getToken(PostgreSQLStatementParser.YEAR, 0); }
		public TerminalNode QUARTER() { return getToken(PostgreSQLStatementParser.QUARTER, 0); }
		public TerminalNode MONTH() { return getToken(PostgreSQLStatementParser.MONTH, 0); }
		public TerminalNode WEEK() { return getToken(PostgreSQLStatementParser.WEEK, 0); }
		public TerminalNode DAY() { return getToken(PostgreSQLStatementParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(PostgreSQLStatementParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(PostgreSQLStatementParser.MINUTE, 0); }
		public TerminalNode SECOND() { return getToken(PostgreSQLStatementParser.SECOND, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ExtractArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extractArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterExtractArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitExtractArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitExtractArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExtractArgContext extractArg() throws RecognitionException {
		ExtractArgContext _localctx = new ExtractArgContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_extractArg);
		try {
			setState(4096);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,274,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4087);
				match(YEAR);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4088);
				match(QUARTER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4089);
				match(MONTH);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4090);
				match(WEEK);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4091);
				match(DAY);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4092);
				match(HOUR);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4093);
				match(MINUTE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4094);
				match(SECOND);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4095);
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GenericTypeContext extends ParserRuleContext {
		public TypeFunctionNameContext typeFunctionName() {
			return getRuleContext(TypeFunctionNameContext.class,0);
		}
		public TypeModifiersContext typeModifiers() {
			return getRuleContext(TypeModifiersContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public GenericTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterGenericType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitGenericType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitGenericType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericTypeContext genericType() throws RecognitionException {
		GenericTypeContext _localctx = new GenericTypeContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_genericType);
		try {
			setState(4107);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,277,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4098);
				typeFunctionName();
				setState(4100);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,275,_ctx) ) {
				case 1:
					{
					setState(4099);
					typeModifiers();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4102);
				typeFunctionName();
				setState(4103);
				attrs(0);
				setState(4105);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
				case 1:
					{
					setState(4104);
					typeModifiers();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TypeModifiersContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TypeModifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeModifiers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTypeModifiers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTypeModifiers(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTypeModifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeModifiersContext typeModifiers() throws RecognitionException {
		TypeModifiersContext _localctx = new TypeModifiersContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_typeModifiers);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4109);
			match(LP_);
			setState(4110);
			exprList(0);
			setState(4111);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NumericContext extends ParserRuleContext {
		public TerminalNode INT() { return getToken(PostgreSQLStatementParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(PostgreSQLStatementParser.INTEGER, 0); }
		public TerminalNode SMALLINT() { return getToken(PostgreSQLStatementParser.SMALLINT, 0); }
		public TerminalNode BIGINT() { return getToken(PostgreSQLStatementParser.BIGINT, 0); }
		public TerminalNode REAL() { return getToken(PostgreSQLStatementParser.REAL, 0); }
		public TerminalNode FLOAT() { return getToken(PostgreSQLStatementParser.FLOAT, 0); }
		public OptFloatContext optFloat() {
			return getRuleContext(OptFloatContext.class,0);
		}
		public TerminalNode DOUBLE() { return getToken(PostgreSQLStatementParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(PostgreSQLStatementParser.PRECISION, 0); }
		public TerminalNode DECIMAL() { return getToken(PostgreSQLStatementParser.DECIMAL, 0); }
		public TypeModifiersContext typeModifiers() {
			return getRuleContext(TypeModifiersContext.class,0);
		}
		public TerminalNode DEC() { return getToken(PostgreSQLStatementParser.DEC, 0); }
		public TerminalNode NUMERIC() { return getToken(PostgreSQLStatementParser.NUMERIC, 0); }
		public TerminalNode BOOLEAN() { return getToken(PostgreSQLStatementParser.BOOLEAN, 0); }
		public TerminalNode FLOAT8() { return getToken(PostgreSQLStatementParser.FLOAT8, 0); }
		public TerminalNode FLOAT4() { return getToken(PostgreSQLStatementParser.FLOAT4, 0); }
		public TerminalNode INT2() { return getToken(PostgreSQLStatementParser.INT2, 0); }
		public TerminalNode INT4() { return getToken(PostgreSQLStatementParser.INT4, 0); }
		public TerminalNode INT8() { return getToken(PostgreSQLStatementParser.INT8, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterNumeric(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitNumeric(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitNumeric(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericContext numeric() throws RecognitionException {
		NumericContext _localctx = new NumericContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_numeric);
		try {
			setState(4140);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4113);
				match(INT);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4114);
				match(INTEGER);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 3);
				{
				setState(4115);
				match(SMALLINT);
				}
				break;
			case BIGINT:
				enterOuterAlt(_localctx, 4);
				{
				setState(4116);
				match(BIGINT);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 5);
				{
				setState(4117);
				match(REAL);
				}
				break;
			case FLOAT:
				enterOuterAlt(_localctx, 6);
				{
				setState(4118);
				match(FLOAT);
				setState(4119);
				optFloat();
				}
				break;
			case DOUBLE:
				enterOuterAlt(_localctx, 7);
				{
				setState(4120);
				match(DOUBLE);
				setState(4121);
				match(PRECISION);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 8);
				{
				setState(4122);
				match(DECIMAL);
				setState(4124);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,278,_ctx) ) {
				case 1:
					{
					setState(4123);
					typeModifiers();
					}
					break;
				}
				}
				break;
			case DEC:
				enterOuterAlt(_localctx, 9);
				{
				setState(4126);
				match(DEC);
				setState(4128);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,279,_ctx) ) {
				case 1:
					{
					setState(4127);
					typeModifiers();
					}
					break;
				}
				}
				break;
			case NUMERIC:
				enterOuterAlt(_localctx, 10);
				{
				setState(4130);
				match(NUMERIC);
				setState(4132);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,280,_ctx) ) {
				case 1:
					{
					setState(4131);
					typeModifiers();
					}
					break;
				}
				}
				break;
			case BOOLEAN:
				enterOuterAlt(_localctx, 11);
				{
				setState(4134);
				match(BOOLEAN);
				}
				break;
			case FLOAT8:
				enterOuterAlt(_localctx, 12);
				{
				setState(4135);
				match(FLOAT8);
				}
				break;
			case FLOAT4:
				enterOuterAlt(_localctx, 13);
				{
				setState(4136);
				match(FLOAT4);
				}
				break;
			case INT2:
				enterOuterAlt(_localctx, 14);
				{
				setState(4137);
				match(INT2);
				}
				break;
			case INT4:
				enterOuterAlt(_localctx, 15);
				{
				setState(4138);
				match(INT4);
				}
				break;
			case INT8:
				enterOuterAlt(_localctx, 16);
				{
				setState(4139);
				match(INT8);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstDatetimeContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP() { return getToken(PostgreSQLStatementParser.TIMESTAMP, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TimezoneContext timezone() {
			return getRuleContext(TimezoneContext.class,0);
		}
		public TerminalNode TIME() { return getToken(PostgreSQLStatementParser.TIME, 0); }
		public TerminalNode DATE() { return getToken(PostgreSQLStatementParser.DATE, 0); }
		public ConstDatetimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constDatetime; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterConstDatetime(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitConstDatetime(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitConstDatetime(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstDatetimeContext constDatetime() throws RecognitionException {
		ConstDatetimeContext _localctx = new ConstDatetimeContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_constDatetime);
		try {
			setState(4165);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,286,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4142);
				match(TIMESTAMP);
				setState(4143);
				match(LP_);
				setState(4144);
				match(NUMBER_);
				setState(4145);
				match(RP_);
				setState(4147);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,282,_ctx) ) {
				case 1:
					{
					setState(4146);
					timezone();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4149);
				match(TIMESTAMP);
				setState(4151);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,283,_ctx) ) {
				case 1:
					{
					setState(4150);
					timezone();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4153);
				match(TIME);
				setState(4154);
				match(LP_);
				setState(4155);
				match(NUMBER_);
				setState(4156);
				match(RP_);
				setState(4158);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,284,_ctx) ) {
				case 1:
					{
					setState(4157);
					timezone();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4160);
				match(TIME);
				setState(4162);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,285,_ctx) ) {
				case 1:
					{
					setState(4161);
					timezone();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4164);
				match(DATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TimezoneContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLStatementParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLStatementParser.ZONE, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSQLStatementParser.WITHOUT, 0); }
		public TimezoneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timezone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTimezone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTimezone(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTimezone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimezoneContext timezone() throws RecognitionException {
		TimezoneContext _localctx = new TimezoneContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_timezone);
		try {
			setState(4173);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(4167);
				match(WITH);
				setState(4168);
				match(TIME);
				setState(4169);
				match(ZONE);
				}
				break;
			case WITHOUT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4170);
				match(WITHOUT);
				setState(4171);
				match(TIME);
				setState(4172);
				match(ZONE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CharacterContext extends ParserRuleContext {
		public CharacterWithLengthContext characterWithLength() {
			return getRuleContext(CharacterWithLengthContext.class,0);
		}
		public CharacterWithoutLengthContext characterWithoutLength() {
			return getRuleContext(CharacterWithoutLengthContext.class,0);
		}
		public CharacterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCharacter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCharacter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCharacter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterContext character() throws RecognitionException {
		CharacterContext _localctx = new CharacterContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_character);
		try {
			setState(4177);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,288,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4175);
				characterWithLength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4176);
				characterWithoutLength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CharacterWithLengthContext extends ParserRuleContext {
		public CharacterClauseContext characterClause() {
			return getRuleContext(CharacterClauseContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public CharacterWithLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterWithLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCharacterWithLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCharacterWithLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCharacterWithLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterWithLengthContext characterWithLength() throws RecognitionException {
		CharacterWithLengthContext _localctx = new CharacterWithLengthContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_characterWithLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4179);
			characterClause();
			setState(4180);
			match(LP_);
			setState(4181);
			match(NUMBER_);
			setState(4182);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CharacterWithoutLengthContext extends ParserRuleContext {
		public CharacterClauseContext characterClause() {
			return getRuleContext(CharacterClauseContext.class,0);
		}
		public CharacterWithoutLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterWithoutLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCharacterWithoutLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCharacterWithoutLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCharacterWithoutLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterWithoutLengthContext characterWithoutLength() throws RecognitionException {
		CharacterWithoutLengthContext _localctx = new CharacterWithoutLengthContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_characterWithoutLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4184);
			characterClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CharacterClauseContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(PostgreSQLStatementParser.CHARACTER, 0); }
		public TerminalNode VARYING() { return getToken(PostgreSQLStatementParser.VARYING, 0); }
		public TerminalNode CHAR() { return getToken(PostgreSQLStatementParser.CHAR, 0); }
		public TerminalNode VARCHAR() { return getToken(PostgreSQLStatementParser.VARCHAR, 0); }
		public TerminalNode NATIONAL() { return getToken(PostgreSQLStatementParser.NATIONAL, 0); }
		public TerminalNode NCHAR() { return getToken(PostgreSQLStatementParser.NCHAR, 0); }
		public CharacterClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCharacterClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCharacterClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCharacterClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterClauseContext characterClause() throws RecognitionException {
		CharacterClauseContext _localctx = new CharacterClauseContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_characterClause);
		try {
			setState(4209);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,294,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4186);
				match(CHARACTER);
				setState(4188);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,289,_ctx) ) {
				case 1:
					{
					setState(4187);
					match(VARYING);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4190);
				match(CHAR);
				setState(4192);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,290,_ctx) ) {
				case 1:
					{
					setState(4191);
					match(VARYING);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4194);
				match(VARCHAR);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4195);
				match(NATIONAL);
				setState(4196);
				match(CHARACTER);
				setState(4198);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,291,_ctx) ) {
				case 1:
					{
					setState(4197);
					match(VARYING);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4200);
				match(NATIONAL);
				setState(4201);
				match(CHAR);
				setState(4203);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,292,_ctx) ) {
				case 1:
					{
					setState(4202);
					match(VARYING);
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4205);
				match(NCHAR);
				setState(4207);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,293,_ctx) ) {
				case 1:
					{
					setState(4206);
					match(VARYING);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptFloatContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public OptFloatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optFloat; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOptFloat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOptFloat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOptFloat(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptFloatContext optFloat() throws RecognitionException {
		OptFloatContext _localctx = new OptFloatContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_optFloat);
		try {
			setState(4215);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,295,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4211);
				match(LP_);
				setState(4212);
				match(NUMBER_);
				setState(4213);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AttrsContext extends ParserRuleContext {
		public TerminalNode DOT_() { return getToken(PostgreSQLStatementParser.DOT_, 0); }
		public AttrNameContext attrName() {
			return getRuleContext(AttrNameContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public AttrsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attrs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAttrs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAttrs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAttrs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AttrsContext attrs() throws RecognitionException {
		return attrs(0);
	}

	private AttrsContext attrs(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		AttrsContext _localctx = new AttrsContext(_ctx, _parentState);
		AttrsContext _prevctx = _localctx;
		int _startState = 414;
		enterRecursionRule(_localctx, 414, RULE_attrs, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4218);
			match(DOT_);
			setState(4219);
			attrName();
			}
			_ctx.stop = _input.LT(-1);
			setState(4226);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,296,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AttrsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_attrs);
					setState(4221);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4222);
					match(DOT_);
					setState(4223);
					attrName();
					}
					} 
				}
				setState(4228);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,296,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AttrNameContext extends ParserRuleContext {
		public ColLableContext colLable() {
			return getRuleContext(ColLableContext.class,0);
		}
		public AttrNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attrName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAttrName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAttrName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAttrName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AttrNameContext attrName() throws RecognitionException {
		AttrNameContext _localctx = new AttrNameContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_attrName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4229);
			colLable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColLableContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ColNameKeywordContext colNameKeyword() {
			return getRuleContext(ColNameKeywordContext.class,0);
		}
		public TypeFuncNameKeywordContext typeFuncNameKeyword() {
			return getRuleContext(TypeFuncNameKeywordContext.class,0);
		}
		public ReservedKeywordContext reservedKeyword() {
			return getRuleContext(ReservedKeywordContext.class,0);
		}
		public ColLableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colLable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterColLable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitColLable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitColLable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColLableContext colLable() throws RecognitionException {
		ColLableContext _localctx = new ColLableContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_colLable);
		try {
			setState(4235);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,297,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4231);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4232);
				colNameKeyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4233);
				typeFuncNameKeyword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4234);
				reservedKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BitContext extends ParserRuleContext {
		public BitWithLengthContext bitWithLength() {
			return getRuleContext(BitWithLengthContext.class,0);
		}
		public BitWithoutLengthContext bitWithoutLength() {
			return getRuleContext(BitWithoutLengthContext.class,0);
		}
		public BitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterBit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitBit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitBit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitContext bit() throws RecognitionException {
		BitContext _localctx = new BitContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_bit);
		try {
			setState(4239);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4237);
				bitWithLength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4238);
				bitWithoutLength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BitWithLengthContext extends ParserRuleContext {
		public TerminalNode BIT() { return getToken(PostgreSQLStatementParser.BIT, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode VARYING() { return getToken(PostgreSQLStatementParser.VARYING, 0); }
		public BitWithLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitWithLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterBitWithLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitBitWithLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitBitWithLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitWithLengthContext bitWithLength() throws RecognitionException {
		BitWithLengthContext _localctx = new BitWithLengthContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_bitWithLength);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4241);
			match(BIT);
			setState(4243);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VARYING) {
				{
				setState(4242);
				match(VARYING);
				}
			}

			setState(4245);
			match(LP_);
			setState(4246);
			exprList(0);
			setState(4247);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BitWithoutLengthContext extends ParserRuleContext {
		public TerminalNode BIT() { return getToken(PostgreSQLStatementParser.BIT, 0); }
		public TerminalNode VARYING() { return getToken(PostgreSQLStatementParser.VARYING, 0); }
		public BitWithoutLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitWithoutLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterBitWithoutLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitBitWithoutLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitBitWithoutLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitWithoutLengthContext bitWithoutLength() throws RecognitionException {
		BitWithoutLengthContext _localctx = new BitWithoutLengthContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_bitWithoutLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4249);
			match(BIT);
			setState(4251);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,300,_ctx) ) {
			case 1:
				{
				setState(4250);
				match(VARYING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstIntervalContext extends ParserRuleContext {
		public TerminalNode INTERVAL() { return getToken(PostgreSQLStatementParser.INTERVAL, 0); }
		public ConstIntervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constInterval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterConstInterval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitConstInterval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitConstInterval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstIntervalContext constInterval() throws RecognitionException {
		ConstIntervalContext _localctx = new ConstIntervalContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_constInterval);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4253);
			match(INTERVAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptIntervalContext extends ParserRuleContext {
		public TerminalNode YEAR() { return getToken(PostgreSQLStatementParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(PostgreSQLStatementParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(PostgreSQLStatementParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(PostgreSQLStatementParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(PostgreSQLStatementParser.MINUTE, 0); }
		public IntervalSecondContext intervalSecond() {
			return getRuleContext(IntervalSecondContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public OptIntervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optInterval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOptInterval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOptInterval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOptInterval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptIntervalContext optInterval() throws RecognitionException {
		OptIntervalContext _localctx = new OptIntervalContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_optInterval);
		try {
			setState(4283);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,301,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4255);
				match(YEAR);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4256);
				match(MONTH);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4257);
				match(DAY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4258);
				match(HOUR);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4259);
				match(MINUTE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4260);
				intervalSecond();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4261);
				match(YEAR);
				setState(4262);
				match(TO);
				setState(4263);
				match(MONTH);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4264);
				match(DAY);
				setState(4265);
				match(TO);
				setState(4266);
				match(HOUR);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4267);
				match(DAY);
				setState(4268);
				match(TO);
				setState(4269);
				match(MINUTE);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4270);
				match(DAY);
				setState(4271);
				match(TO);
				setState(4272);
				intervalSecond();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4273);
				match(HOUR);
				setState(4274);
				match(TO);
				setState(4275);
				match(MINUTE);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4276);
				match(HOUR);
				setState(4277);
				match(TO);
				setState(4278);
				intervalSecond();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4279);
				match(MINUTE);
				setState(4280);
				match(TO);
				setState(4281);
				intervalSecond();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptArrayBoundsContext extends ParserRuleContext {
		public OptArrayBoundsContext optArrayBounds() {
			return getRuleContext(OptArrayBoundsContext.class,0);
		}
		public TerminalNode LBT_() { return getToken(PostgreSQLStatementParser.LBT_, 0); }
		public TerminalNode RBT_() { return getToken(PostgreSQLStatementParser.RBT_, 0); }
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public OptArrayBoundsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optArrayBounds; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOptArrayBounds(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOptArrayBounds(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOptArrayBounds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptArrayBoundsContext optArrayBounds() throws RecognitionException {
		return optArrayBounds(0);
	}

	private OptArrayBoundsContext optArrayBounds(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		OptArrayBoundsContext _localctx = new OptArrayBoundsContext(_ctx, _parentState);
		OptArrayBoundsContext _prevctx = _localctx;
		int _startState = 430;
		enterRecursionRule(_localctx, 430, RULE_optArrayBounds, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(4295);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,303,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(4293);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,302,_ctx) ) {
					case 1:
						{
						_localctx = new OptArrayBoundsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_optArrayBounds);
						setState(4286);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(4287);
						match(LBT_);
						setState(4288);
						match(RBT_);
						}
						break;
					case 2:
						{
						_localctx = new OptArrayBoundsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_optArrayBounds);
						setState(4289);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(4290);
						match(LBT_);
						setState(4291);
						match(NUMBER_);
						setState(4292);
						match(RBT_);
						}
						break;
					}
					} 
				}
				setState(4297);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,303,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IntervalSecondContext extends ParserRuleContext {
		public TerminalNode SECOND() { return getToken(PostgreSQLStatementParser.SECOND, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public IntervalSecondContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalSecond; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterIntervalSecond(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitIntervalSecond(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitIntervalSecond(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalSecondContext intervalSecond() throws RecognitionException {
		IntervalSecondContext _localctx = new IntervalSecondContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_intervalSecond);
		try {
			setState(4303);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,304,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4298);
				match(SECOND);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4299);
				match(SECOND);
				setState(4300);
				match(LP_);
				setState(4301);
				match(NUMBER_);
				setState(4302);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnicodeNormalFormContext extends ParserRuleContext {
		public TerminalNode NFC() { return getToken(PostgreSQLStatementParser.NFC, 0); }
		public TerminalNode NFD() { return getToken(PostgreSQLStatementParser.NFD, 0); }
		public TerminalNode NFKC() { return getToken(PostgreSQLStatementParser.NFKC, 0); }
		public TerminalNode NFKD() { return getToken(PostgreSQLStatementParser.NFKD, 0); }
		public UnicodeNormalFormContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unicodeNormalForm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterUnicodeNormalForm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitUnicodeNormalForm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitUnicodeNormalForm(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnicodeNormalFormContext unicodeNormalForm() throws RecognitionException {
		UnicodeNormalFormContext _localctx = new UnicodeNormalFormContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_unicodeNormalForm);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4305);
			_la = _input.LA(1);
			if ( !(((((_la - 241)) & ~0x3f) == 0 && ((1L << (_la - 241)) & 15L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TrimListContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TrimListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trimList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTrimList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTrimList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTrimList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TrimListContext trimList() throws RecognitionException {
		TrimListContext _localctx = new TrimListContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_trimList);
		try {
			setState(4314);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,305,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4307);
				aExpr(0);
				setState(4308);
				match(FROM);
				setState(4309);
				exprList(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4311);
				match(FROM);
				setState(4312);
				exprList(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4313);
				exprList(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OverlayListContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public OverlayPlacingContext overlayPlacing() {
			return getRuleContext(OverlayPlacingContext.class,0);
		}
		public SubstrFromContext substrFrom() {
			return getRuleContext(SubstrFromContext.class,0);
		}
		public SubstrForContext substrFor() {
			return getRuleContext(SubstrForContext.class,0);
		}
		public OverlayListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overlayList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOverlayList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOverlayList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOverlayList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OverlayListContext overlayList() throws RecognitionException {
		OverlayListContext _localctx = new OverlayListContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_overlayList);
		try {
			setState(4325);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,306,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4316);
				aExpr(0);
				setState(4317);
				overlayPlacing();
				setState(4318);
				substrFrom();
				setState(4319);
				substrFor();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4321);
				aExpr(0);
				setState(4322);
				overlayPlacing();
				setState(4323);
				substrFrom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OverlayPlacingContext extends ParserRuleContext {
		public TerminalNode PLACING() { return getToken(PostgreSQLStatementParser.PLACING, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public OverlayPlacingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overlayPlacing; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOverlayPlacing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOverlayPlacing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOverlayPlacing(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OverlayPlacingContext overlayPlacing() throws RecognitionException {
		OverlayPlacingContext _localctx = new OverlayPlacingContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_overlayPlacing);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4327);
			match(PLACING);
			setState(4328);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SubstrFromContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public SubstrFromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substrFrom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSubstrFrom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSubstrFrom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSubstrFrom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubstrFromContext substrFrom() throws RecognitionException {
		SubstrFromContext _localctx = new SubstrFromContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_substrFrom);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4330);
			match(FROM);
			setState(4331);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SubstrForContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public SubstrForContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substrFor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSubstrFor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSubstrFor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSubstrFor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubstrForContext substrFor() throws RecognitionException {
		SubstrForContext _localctx = new SubstrForContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_substrFor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4333);
			match(FOR);
			setState(4334);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PositionListContext extends ParserRuleContext {
		public List<BExprContext> bExpr() {
			return getRuleContexts(BExprContext.class);
		}
		public BExprContext bExpr(int i) {
			return getRuleContext(BExprContext.class,i);
		}
		public TerminalNode IN() { return getToken(PostgreSQLStatementParser.IN, 0); }
		public PositionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_positionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterPositionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitPositionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitPositionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PositionListContext positionList() throws RecognitionException {
		PositionListContext _localctx = new PositionListContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_positionList);
		try {
			setState(4341);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEGIN_DOLLAR_STRING_CONSTANT:
			case OR_:
			case SIGNED_LEFT_SHIFT_:
			case SIGNED_RIGHT_SHIFT_:
			case PLUS_:
			case MINUS_:
			case POUND_:
			case LP_:
			case QUESTION_:
			case DOLLAR_:
			case UNICODE_ESCAPE:
			case JSON_EXTRACT_:
			case JSON_EXTRACT_TEXT_:
			case JSON_PATH_EXTRACT_:
			case JSON_PATH_EXTRACT_TEXT_:
			case JSONB_CONTAIN_RIGHT_:
			case JSONB_CONTAIN_LEFT_:
			case JSONB_CONTAIN_ALL_TOP_KEY_:
			case JSONB_PATH_DELETE_:
			case JSONB_PATH_CONTAIN_ANY_VALUE_:
			case JSONB_PATH_PREDICATE_CHECK_:
			case GEOMETRIC_LENGTH_:
			case GEOMETRIC_DISTANCE_:
			case GEOMETRIC_EXTEND_RIGHT_:
			case GEOMETRIC_EXTEND_LEFT_:
			case GEOMETRIC_STRICT_BELOW_:
			case GEOMETRIC_STRICT_ABOVE_:
			case GEOMETRIC_EXTEND_ABOVE_:
			case GEOMETRIC_EXTEND_BELOW_:
			case GEOMETRIC_BELOW_:
			case GEOMETRIC_ABOVE_:
			case GEOMETRIC_INTERSECT_:
			case GEOMETRIC_PERPENDICULAR_:
			case GEOMETRIC_SAME_AS_:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXISTS:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case USER:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CURRENT_TIMESTAMP:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case INT2:
			case INT4:
			case INT8:
			case FLOAT:
			case FLOAT4:
			case FLOAT8:
			case VARCHAR:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case BIT:
			case XML:
			case JSON:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case CURRENT_SCHEMA:
			case NORMALIZE:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case KEY:
			case POSITION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case CASE:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case NULL:
			case TRUE:
			case FALSE:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case ARRAY:
			case INTERVAL:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(4336);
				bExpr(0);
				setState(4337);
				match(IN);
				setState(4338);
				bExpr(0);
				}
				break;
			case RP_:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SubstrListContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public SubstrFromContext substrFrom() {
			return getRuleContext(SubstrFromContext.class,0);
		}
		public SubstrForContext substrFor() {
			return getRuleContext(SubstrForContext.class,0);
		}
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public SubstrListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substrList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSubstrList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSubstrList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSubstrList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubstrListContext substrList() throws RecognitionException {
		SubstrListContext _localctx = new SubstrListContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_substrList);
		try {
			setState(4359);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4343);
				aExpr(0);
				setState(4344);
				substrFrom();
				setState(4345);
				substrFor();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4347);
				aExpr(0);
				setState(4348);
				substrFor();
				setState(4349);
				substrFrom();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4351);
				aExpr(0);
				setState(4352);
				substrFrom();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4354);
				aExpr(0);
				setState(4355);
				substrFor();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4357);
				exprList(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XmlAttributesContext extends ParserRuleContext {
		public TerminalNode XMLATTRIBUTES() { return getToken(PostgreSQLStatementParser.XMLATTRIBUTES, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public XmlAttributeListContext xmlAttributeList() {
			return getRuleContext(XmlAttributeListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public XmlAttributesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlAttributes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterXmlAttributes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitXmlAttributes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitXmlAttributes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlAttributesContext xmlAttributes() throws RecognitionException {
		XmlAttributesContext _localctx = new XmlAttributesContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_xmlAttributes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4361);
			match(XMLATTRIBUTES);
			setState(4362);
			match(LP_);
			setState(4363);
			xmlAttributeList();
			setState(4364);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XmlAttributeListContext extends ParserRuleContext {
		public List<XmlAttributeElContext> xmlAttributeEl() {
			return getRuleContexts(XmlAttributeElContext.class);
		}
		public XmlAttributeElContext xmlAttributeEl(int i) {
			return getRuleContext(XmlAttributeElContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public XmlAttributeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlAttributeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterXmlAttributeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitXmlAttributeList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitXmlAttributeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlAttributeListContext xmlAttributeList() throws RecognitionException {
		XmlAttributeListContext _localctx = new XmlAttributeListContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_xmlAttributeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4366);
			xmlAttributeEl();
			setState(4371);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4367);
				match(COMMA_);
				setState(4368);
				xmlAttributeEl();
				}
				}
				setState(4373);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XmlAttributeElContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public XmlAttributeElContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlAttributeEl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterXmlAttributeEl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitXmlAttributeEl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitXmlAttributeEl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlAttributeElContext xmlAttributeEl() throws RecognitionException {
		XmlAttributeElContext _localctx = new XmlAttributeElContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_xmlAttributeEl);
		try {
			setState(4379);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4374);
				aExpr(0);
				setState(4375);
				match(AS);
				setState(4376);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4378);
				aExpr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XmlExistsArgumentContext extends ParserRuleContext {
		public TerminalNode PASSING() { return getToken(PostgreSQLStatementParser.PASSING, 0); }
		public CExprContext cExpr() {
			return getRuleContext(CExprContext.class,0);
		}
		public List<XmlPassingMechContext> xmlPassingMech() {
			return getRuleContexts(XmlPassingMechContext.class);
		}
		public XmlPassingMechContext xmlPassingMech(int i) {
			return getRuleContext(XmlPassingMechContext.class,i);
		}
		public XmlExistsArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlExistsArgument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterXmlExistsArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitXmlExistsArgument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitXmlExistsArgument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlExistsArgumentContext xmlExistsArgument() throws RecognitionException {
		XmlExistsArgumentContext _localctx = new XmlExistsArgumentContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_xmlExistsArgument);
		try {
			setState(4396);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,311,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4381);
				match(PASSING);
				setState(4382);
				cExpr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4383);
				match(PASSING);
				setState(4384);
				cExpr();
				setState(4385);
				xmlPassingMech();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4387);
				match(PASSING);
				setState(4388);
				xmlPassingMech();
				setState(4389);
				cExpr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4391);
				match(PASSING);
				setState(4392);
				xmlPassingMech();
				setState(4393);
				cExpr();
				setState(4394);
				xmlPassingMech();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XmlPassingMechContext extends ParserRuleContext {
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public TerminalNode REF() { return getToken(PostgreSQLStatementParser.REF, 0); }
		public TerminalNode VALUE() { return getToken(PostgreSQLStatementParser.VALUE, 0); }
		public XmlPassingMechContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlPassingMech; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterXmlPassingMech(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitXmlPassingMech(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitXmlPassingMech(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlPassingMechContext xmlPassingMech() throws RecognitionException {
		XmlPassingMechContext _localctx = new XmlPassingMechContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_xmlPassingMech);
		try {
			setState(4402);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4398);
				match(BY);
				setState(4399);
				match(REF);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4400);
				match(BY);
				setState(4401);
				match(VALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DocumentOrContentContext extends ParserRuleContext {
		public TerminalNode DOCUMENT() { return getToken(PostgreSQLStatementParser.DOCUMENT, 0); }
		public TerminalNode CONTENT() { return getToken(PostgreSQLStatementParser.CONTENT, 0); }
		public DocumentOrContentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_documentOrContent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDocumentOrContent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDocumentOrContent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDocumentOrContent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DocumentOrContentContext documentOrContent() throws RecognitionException {
		DocumentOrContentContext _localctx = new DocumentOrContentContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_documentOrContent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4404);
			_la = _input.LA(1);
			if ( !(_la==DOCUMENT || _la==CONTENT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XmlWhitespaceOptionContext extends ParserRuleContext {
		public TerminalNode PRESERVE() { return getToken(PostgreSQLStatementParser.PRESERVE, 0); }
		public TerminalNode WHITESPACE() { return getToken(PostgreSQLStatementParser.WHITESPACE, 0); }
		public TerminalNode STRIP() { return getToken(PostgreSQLStatementParser.STRIP, 0); }
		public XmlWhitespaceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlWhitespaceOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterXmlWhitespaceOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitXmlWhitespaceOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitXmlWhitespaceOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlWhitespaceOptionContext xmlWhitespaceOption() throws RecognitionException {
		XmlWhitespaceOptionContext _localctx = new XmlWhitespaceOptionContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_xmlWhitespaceOption);
		try {
			setState(4411);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRESERVE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4406);
				match(PRESERVE);
				setState(4407);
				match(WHITESPACE);
				}
				break;
			case STRIP:
				enterOuterAlt(_localctx, 2);
				{
				setState(4408);
				match(STRIP);
				setState(4409);
				match(WHITESPACE);
				}
				break;
			case RP_:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XmlRootVersionContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(PostgreSQLStatementParser.VERSION, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(PostgreSQLStatementParser.VALUE, 0); }
		public XmlRootVersionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlRootVersion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterXmlRootVersion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitXmlRootVersion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitXmlRootVersion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlRootVersionContext xmlRootVersion() throws RecognitionException {
		XmlRootVersionContext _localctx = new XmlRootVersionContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_xmlRootVersion);
		try {
			setState(4418);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4413);
				match(VERSION);
				setState(4414);
				aExpr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4415);
				match(VERSION);
				setState(4416);
				match(NO);
				setState(4417);
				match(VALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XmlRootStandaloneContext extends ParserRuleContext {
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public TerminalNode STANDALONE() { return getToken(PostgreSQLStatementParser.STANDALONE, 0); }
		public TerminalNode YES() { return getToken(PostgreSQLStatementParser.YES, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(PostgreSQLStatementParser.VALUE, 0); }
		public XmlRootStandaloneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlRootStandalone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterXmlRootStandalone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitXmlRootStandalone(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitXmlRootStandalone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlRootStandaloneContext xmlRootStandalone() throws RecognitionException {
		XmlRootStandaloneContext _localctx = new XmlRootStandaloneContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_xmlRootStandalone);
		try {
			setState(4430);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,315,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4420);
				match(COMMA_);
				setState(4421);
				match(STANDALONE);
				setState(4422);
				match(YES);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4423);
				match(COMMA_);
				setState(4424);
				match(STANDALONE);
				setState(4425);
				match(NO);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4426);
				match(COMMA_);
				setState(4427);
				match(STANDALONE);
				setState(4428);
				match(NO);
				setState(4429);
				match(VALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RowsFromItemContext extends ParserRuleContext {
		public FunctionExprWindowlessContext functionExprWindowless() {
			return getRuleContext(FunctionExprWindowlessContext.class,0);
		}
		public ColumnDefListContext columnDefList() {
			return getRuleContext(ColumnDefListContext.class,0);
		}
		public RowsFromItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsFromItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterRowsFromItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitRowsFromItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitRowsFromItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsFromItemContext rowsFromItem() throws RecognitionException {
		RowsFromItemContext _localctx = new RowsFromItemContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_rowsFromItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4432);
			functionExprWindowless();
			setState(4433);
			columnDefList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RowsFromListContext extends ParserRuleContext {
		public List<RowsFromItemContext> rowsFromItem() {
			return getRuleContexts(RowsFromItemContext.class);
		}
		public RowsFromItemContext rowsFromItem(int i) {
			return getRuleContext(RowsFromItemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public RowsFromListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsFromList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterRowsFromList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitRowsFromList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitRowsFromList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsFromListContext rowsFromList() throws RecognitionException {
		RowsFromListContext _localctx = new RowsFromListContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_rowsFromList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4435);
			rowsFromItem();
			setState(4440);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4436);
				match(COMMA_);
				setState(4437);
				rowsFromItem();
				}
				}
				setState(4442);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnDefListContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TableFuncElementListContext tableFuncElementList() {
			return getRuleContext(TableFuncElementListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public ColumnDefListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterColumnDefList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitColumnDefList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitColumnDefList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefListContext columnDefList() throws RecognitionException {
		ColumnDefListContext _localctx = new ColumnDefListContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_columnDefList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4443);
			match(AS);
			setState(4444);
			match(LP_);
			setState(4445);
			tableFuncElementList();
			setState(4446);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableFuncElementListContext extends ParserRuleContext {
		public List<TableFuncElementContext> tableFuncElement() {
			return getRuleContexts(TableFuncElementContext.class);
		}
		public TableFuncElementContext tableFuncElement(int i) {
			return getRuleContext(TableFuncElementContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public TableFuncElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFuncElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTableFuncElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTableFuncElementList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTableFuncElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFuncElementListContext tableFuncElementList() throws RecognitionException {
		TableFuncElementListContext _localctx = new TableFuncElementListContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_tableFuncElementList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4448);
			tableFuncElement();
			setState(4453);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4449);
				match(COMMA_);
				setState(4450);
				tableFuncElement();
				}
				}
				setState(4455);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableFuncElementContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public CollateClauseContext collateClause() {
			return getRuleContext(CollateClauseContext.class,0);
		}
		public TableFuncElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFuncElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTableFuncElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTableFuncElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTableFuncElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFuncElementContext tableFuncElement() throws RecognitionException {
		TableFuncElementContext _localctx = new TableFuncElementContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_tableFuncElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4456);
			colId();
			setState(4457);
			typeName();
			setState(4459);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(4458);
				collateClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CollateClauseContext extends ParserRuleContext {
		public TerminalNode COLLATE() { return getToken(PostgreSQLStatementParser.COLLATE, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(PostgreSQLStatementParser.EQ_, 0); }
		public CollateClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collateClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCollateClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCollateClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCollateClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollateClauseContext collateClause() throws RecognitionException {
		CollateClauseContext _localctx = new CollateClauseContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_collateClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4461);
			match(COLLATE);
			setState(4463);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQ_) {
				{
				setState(4462);
				match(EQ_);
				}
			}

			setState(4465);
			anyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AnyNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public AnyNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anyName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAnyName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAnyName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAnyName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnyNameContext anyName() throws RecognitionException {
		AnyNameContext _localctx = new AnyNameContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_anyName);
		try {
			setState(4471);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,320,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4467);
				colId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4468);
				colId();
				setState(4469);
				attrs(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AliasClauseContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public AliasClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aliasClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAliasClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAliasClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAliasClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AliasClauseContext aliasClause() throws RecognitionException {
		AliasClauseContext _localctx = new AliasClauseContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_aliasClause);
		try {
			setState(4487);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,321,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4473);
				match(AS);
				setState(4474);
				colId();
				setState(4475);
				match(LP_);
				setState(4476);
				nameList(0);
				setState(4477);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4479);
				match(AS);
				setState(4480);
				colId();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4481);
				colId();
				setState(4482);
				match(LP_);
				setState(4483);
				nameList(0);
				setState(4484);
				match(RP_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4486);
				colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NameListContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public NameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nameList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterNameList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitNameList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NameListContext nameList() throws RecognitionException {
		return nameList(0);
	}

	private NameListContext nameList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		NameListContext _localctx = new NameListContext(_ctx, _parentState);
		NameListContext _prevctx = _localctx;
		int _startState = 484;
		enterRecursionRule(_localctx, 484, RULE_nameList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4490);
			name();
			}
			_ctx.stop = _input.LT(-1);
			setState(4497);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,322,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NameListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_nameList);
					setState(4492);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4493);
					match(COMMA_);
					setState(4494);
					name();
					}
					} 
				}
				setState(4499);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,322,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FuncAliasClauseContext extends ParserRuleContext {
		public AliasClauseContext aliasClause() {
			return getRuleContext(AliasClauseContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TableFuncElementListContext tableFuncElementList() {
			return getRuleContext(TableFuncElementListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public FuncAliasClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcAliasClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterFuncAliasClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitFuncAliasClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitFuncAliasClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncAliasClauseContext funcAliasClause() throws RecognitionException {
		FuncAliasClauseContext _localctx = new FuncAliasClauseContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_funcAliasClause);
		try {
			setState(4517);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4500);
				aliasClause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4501);
				match(AS);
				setState(4502);
				match(LP_);
				setState(4503);
				tableFuncElementList();
				setState(4504);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4506);
				match(AS);
				setState(4507);
				colId();
				setState(4508);
				match(LP_);
				setState(4509);
				tableFuncElementList();
				setState(4510);
				match(RP_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4512);
				colId();
				setState(4513);
				match(LP_);
				setState(4514);
				tableFuncElementList();
				setState(4515);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TablesampleClauseContext extends ParserRuleContext {
		public TerminalNode TABLESAMPLE() { return getToken(PostgreSQLStatementParser.TABLESAMPLE, 0); }
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public RepeatableClauseContext repeatableClause() {
			return getRuleContext(RepeatableClauseContext.class,0);
		}
		public TablesampleClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablesampleClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTablesampleClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTablesampleClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTablesampleClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablesampleClauseContext tablesampleClause() throws RecognitionException {
		TablesampleClauseContext _localctx = new TablesampleClauseContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_tablesampleClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4519);
			match(TABLESAMPLE);
			setState(4520);
			funcName();
			setState(4521);
			match(LP_);
			setState(4522);
			exprList(0);
			setState(4523);
			match(RP_);
			setState(4525);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,324,_ctx) ) {
			case 1:
				{
				setState(4524);
				repeatableClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RepeatableClauseContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(PostgreSQLStatementParser.REPEATABLE, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public RepeatableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repeatableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterRepeatableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitRepeatableClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitRepeatableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RepeatableClauseContext repeatableClause() throws RecognitionException {
		RepeatableClauseContext _localctx = new RepeatableClauseContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_repeatableClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4527);
			match(REPEATABLE);
			setState(4528);
			match(LP_);
			setState(4529);
			aExpr(0);
			setState(4530);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AllOrDistinctContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLStatementParser.DISTINCT, 0); }
		public AllOrDistinctContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allOrDistinct; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAllOrDistinct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAllOrDistinct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAllOrDistinct(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AllOrDistinctContext allOrDistinct() throws RecognitionException {
		AllOrDistinctContext _localctx = new AllOrDistinctContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_allOrDistinct);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4532);
			_la = _input.LA(1);
			if ( !(_la==DISTINCT || _la==ALL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SortClauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(PostgreSQLStatementParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public SortbyListContext sortbyList() {
			return getRuleContext(SortbyListContext.class,0);
		}
		public SortClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSortClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSortClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSortClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SortClauseContext sortClause() throws RecognitionException {
		SortClauseContext _localctx = new SortClauseContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_sortClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4534);
			match(ORDER);
			setState(4535);
			match(BY);
			setState(4536);
			sortbyList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SortbyListContext extends ParserRuleContext {
		public List<SortbyContext> sortby() {
			return getRuleContexts(SortbyContext.class);
		}
		public SortbyContext sortby(int i) {
			return getRuleContext(SortbyContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public SortbyListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortbyList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSortbyList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSortbyList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSortbyList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SortbyListContext sortbyList() throws RecognitionException {
		SortbyListContext _localctx = new SortbyListContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_sortbyList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4538);
			sortby();
			setState(4543);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4539);
				match(COMMA_);
				setState(4540);
				sortby();
				}
				}
				setState(4545);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SortbyContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public QualAllOpContext qualAllOp() {
			return getRuleContext(QualAllOpContext.class,0);
		}
		public NullsOrderContext nullsOrder() {
			return getRuleContext(NullsOrderContext.class,0);
		}
		public AscDescContext ascDesc() {
			return getRuleContext(AscDescContext.class,0);
		}
		public SortbyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortby; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSortby(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSortby(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSortby(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SortbyContext sortby() throws RecognitionException {
		SortbyContext _localctx = new SortbyContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_sortby);
		int _la;
		try {
			setState(4559);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,329,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4546);
				aExpr(0);
				setState(4547);
				match(USING);
				setState(4548);
				qualAllOp();
				setState(4550);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULLS) {
					{
					setState(4549);
					nullsOrder();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4552);
				aExpr(0);
				setState(4554);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(4553);
					ascDesc();
					}
				}

				setState(4557);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULLS) {
					{
					setState(4556);
					nullsOrder();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NullsOrderContext extends ParserRuleContext {
		public TerminalNode NULLS() { return getToken(PostgreSQLStatementParser.NULLS, 0); }
		public TerminalNode FIRST() { return getToken(PostgreSQLStatementParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(PostgreSQLStatementParser.LAST, 0); }
		public NullsOrderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullsOrder; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterNullsOrder(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitNullsOrder(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitNullsOrder(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullsOrderContext nullsOrder() throws RecognitionException {
		NullsOrderContext _localctx = new NullsOrderContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_nullsOrder);
		try {
			setState(4565);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,330,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4561);
				match(NULLS);
				setState(4562);
				match(FIRST);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4563);
				match(NULLS);
				setState(4564);
				match(LAST);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DistinctClauseContext extends ParserRuleContext {
		public TerminalNode DISTINCT() { return getToken(PostgreSQLStatementParser.DISTINCT, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public DistinctClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distinctClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDistinctClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDistinctClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDistinctClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DistinctClauseContext distinctClause() throws RecognitionException {
		DistinctClauseContext _localctx = new DistinctClauseContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_distinctClause);
		try {
			setState(4574);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,331,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4567);
				match(DISTINCT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4568);
				match(DISTINCT);
				setState(4569);
				match(ON);
				setState(4570);
				match(LP_);
				setState(4571);
				exprList(0);
				setState(4572);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DistinctContext extends ParserRuleContext {
		public TerminalNode DISTINCT() { return getToken(PostgreSQLStatementParser.DISTINCT, 0); }
		public DistinctContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distinct; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDistinct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDistinct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDistinct(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DistinctContext distinct() throws RecognitionException {
		DistinctContext _localctx = new DistinctContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_distinct);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4576);
			match(DISTINCT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OverClauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(PostgreSQLStatementParser.OVER, 0); }
		public WindowSpecificationContext windowSpecification() {
			return getRuleContext(WindowSpecificationContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public OverClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOverClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOverClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOverClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OverClauseContext overClause() throws RecognitionException {
		OverClauseContext _localctx = new OverClauseContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_overClause);
		try {
			setState(4582);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,332,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4578);
				match(OVER);
				setState(4579);
				windowSpecification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4580);
				match(OVER);
				setState(4581);
				colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public WindowNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterWindowName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitWindowName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitWindowName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowNameContext windowName() throws RecognitionException {
		WindowNameContext _localctx = new WindowNameContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_windowName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4584);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexParamsContext extends ParserRuleContext {
		public List<IndexElemContext> indexElem() {
			return getRuleContexts(IndexElemContext.class);
		}
		public IndexElemContext indexElem(int i) {
			return getRuleContext(IndexElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public IndexParamsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexParams; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterIndexParams(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitIndexParams(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitIndexParams(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexParamsContext indexParams() throws RecognitionException {
		IndexParamsContext _localctx = new IndexParamsContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_indexParams);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4586);
			indexElem();
			setState(4591);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4587);
				match(COMMA_);
				setState(4588);
				indexElem();
				}
				}
				setState(4593);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexElemOptionsContext extends ParserRuleContext {
		public OptClassContext optClass() {
			return getRuleContext(OptClassContext.class,0);
		}
		public CollateContext collate() {
			return getRuleContext(CollateContext.class,0);
		}
		public AscDescContext ascDesc() {
			return getRuleContext(AscDescContext.class,0);
		}
		public NullsOrderContext nullsOrder() {
			return getRuleContext(NullsOrderContext.class,0);
		}
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public IndexElemOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexElemOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterIndexElemOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitIndexElemOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitIndexElemOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexElemOptionsContext indexElemOptions() throws RecognitionException {
		IndexElemOptionsContext _localctx = new IndexElemOptionsContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_indexElemOptions);
		int _la;
		try {
			setState(4615);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,340,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4595);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(4594);
					collate();
					}
				}

				setState(4597);
				optClass();
				setState(4599);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(4598);
					ascDesc();
					}
				}

				setState(4602);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULLS) {
					{
					setState(4601);
					nullsOrder();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4605);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(4604);
					collate();
					}
				}

				setState(4607);
				anyName();
				setState(4608);
				reloptions();
				setState(4610);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(4609);
					ascDesc();
					}
				}

				setState(4613);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULLS) {
					{
					setState(4612);
					nullsOrder();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexElemContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IndexElemOptionsContext indexElemOptions() {
			return getRuleContext(IndexElemOptionsContext.class,0);
		}
		public FunctionExprWindowlessContext functionExprWindowless() {
			return getRuleContext(FunctionExprWindowlessContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public IndexElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterIndexElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitIndexElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitIndexElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexElemContext indexElem() throws RecognitionException {
		IndexElemContext _localctx = new IndexElemContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_indexElem);
		try {
			setState(4628);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,341,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4617);
				colId();
				setState(4618);
				indexElemOptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4620);
				functionExprWindowless();
				setState(4621);
				indexElemOptions();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4623);
				match(LP_);
				setState(4624);
				aExpr(0);
				setState(4625);
				match(RP_);
				setState(4626);
				indexElemOptions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CollateContext extends ParserRuleContext {
		public TerminalNode COLLATE() { return getToken(PostgreSQLStatementParser.COLLATE, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public CollateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCollate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCollate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCollate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollateContext collate() throws RecognitionException {
		CollateContext _localctx = new CollateContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_collate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4630);
			match(COLLATE);
			setState(4631);
			anyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptClassContext extends ParserRuleContext {
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public OptClassContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optClass; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOptClass(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOptClass(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOptClass(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptClassContext optClass() throws RecognitionException {
		OptClassContext _localctx = new OptClassContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_optClass);
		try {
			setState(4635);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4633);
				anyName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReloptionsContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ReloptionListContext reloptionList() {
			return getRuleContext(ReloptionListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public ReloptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterReloptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitReloptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitReloptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReloptionsContext reloptions() throws RecognitionException {
		ReloptionsContext _localctx = new ReloptionsContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_reloptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4637);
			match(LP_);
			setState(4638);
			reloptionList();
			setState(4639);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReloptionListContext extends ParserRuleContext {
		public List<ReloptionElemContext> reloptionElem() {
			return getRuleContexts(ReloptionElemContext.class);
		}
		public ReloptionElemContext reloptionElem(int i) {
			return getRuleContext(ReloptionElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public ReloptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterReloptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitReloptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitReloptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReloptionListContext reloptionList() throws RecognitionException {
		ReloptionListContext _localctx = new ReloptionListContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_reloptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4641);
			reloptionElem();
			setState(4646);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4642);
				match(COMMA_);
				setState(4643);
				reloptionElem();
				}
				}
				setState(4648);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReloptionElemContext extends ParserRuleContext {
		public List<AliasContext> alias() {
			return getRuleContexts(AliasContext.class);
		}
		public AliasContext alias(int i) {
			return getRuleContext(AliasContext.class,i);
		}
		public TerminalNode EQ_() { return getToken(PostgreSQLStatementParser.EQ_, 0); }
		public DefArgContext defArg() {
			return getRuleContext(DefArgContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(PostgreSQLStatementParser.DOT_, 0); }
		public ReloptionElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloptionElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterReloptionElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitReloptionElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitReloptionElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReloptionElemContext reloptionElem() throws RecognitionException {
		ReloptionElemContext _localctx = new ReloptionElemContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_reloptionElem);
		try {
			setState(4664);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,344,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4649);
				alias();
				setState(4650);
				match(EQ_);
				setState(4651);
				defArg();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4653);
				alias();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4654);
				alias();
				setState(4655);
				match(DOT_);
				setState(4656);
				alias();
				setState(4657);
				match(EQ_);
				setState(4658);
				defArg();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4660);
				alias();
				setState(4661);
				match(DOT_);
				setState(4662);
				alias();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DefArgContext extends ParserRuleContext {
		public FuncTypeContext funcType() {
			return getRuleContext(FuncTypeContext.class,0);
		}
		public ReservedKeywordContext reservedKeyword() {
			return getRuleContext(ReservedKeywordContext.class,0);
		}
		public QualAllOpContext qualAllOp() {
			return getRuleContext(QualAllOpContext.class,0);
		}
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public TerminalNode NONE() { return getToken(PostgreSQLStatementParser.NONE, 0); }
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public FuncArgsListContext funcArgsList() {
			return getRuleContext(FuncArgsListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public DefArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDefArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDefArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDefArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefArgContext defArg() throws RecognitionException {
		DefArgContext _localctx = new DefArgContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_defArg);
		try {
			setState(4681);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4666);
				funcType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4667);
				reservedKeyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4668);
				qualAllOp();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4669);
				match(NUMBER_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4670);
				match(STRING_);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4671);
				match(NONE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4672);
				funcName();
				setState(4679);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,345,_ctx) ) {
				case 1:
					{
					setState(4673);
					match(LP_);
					setState(4674);
					funcArgsList();
					setState(4675);
					match(RP_);
					}
					break;
				case 2:
					{
					setState(4677);
					match(LP_);
					setState(4678);
					match(RP_);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FuncTypeContext extends ParserRuleContext {
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TypeFunctionNameContext typeFunctionName() {
			return getRuleContext(TypeFunctionNameContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public TerminalNode MOD_() { return getToken(PostgreSQLStatementParser.MOD_, 0); }
		public TerminalNode TYPE() { return getToken(PostgreSQLStatementParser.TYPE, 0); }
		public TerminalNode SETOF() { return getToken(PostgreSQLStatementParser.SETOF, 0); }
		public FuncTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterFuncType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitFuncType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitFuncType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncTypeContext funcType() throws RecognitionException {
		FuncTypeContext _localctx = new FuncTypeContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_funcType);
		try {
			setState(4695);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,347,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4683);
				typeName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4684);
				typeFunctionName();
				setState(4685);
				attrs(0);
				setState(4686);
				match(MOD_);
				setState(4687);
				match(TYPE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4689);
				match(SETOF);
				setState(4690);
				typeFunctionName();
				setState(4691);
				attrs(0);
				setState(4692);
				match(MOD_);
				setState(4693);
				match(TYPE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DataTypeContext extends ParserRuleContext {
		public DataTypeNameContext dataTypeName() {
			return getRuleContext(DataTypeNameContext.class,0);
		}
		public DataTypeLengthContext dataTypeLength() {
			return getRuleContext(DataTypeLengthContext.class,0);
		}
		public CharacterSetContext characterSet() {
			return getRuleContext(CharacterSetContext.class,0);
		}
		public CollateClauseContext collateClause() {
			return getRuleContext(CollateClauseContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public List<TerminalNode> STRING_() { return getTokens(PostgreSQLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(PostgreSQLStatementParser.STRING_, i);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_dataType);
		int _la;
		try {
			setState(4724);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,354,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4697);
				dataTypeName();
				setState(4699);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(4698);
					dataTypeLength();
					}
				}

				setState(4702);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHAR || _la==CHARACTER) {
					{
					setState(4701);
					characterSet();
					}
				}

				setState(4705);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,350,_ctx) ) {
				case 1:
					{
					setState(4704);
					collateClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4707);
				dataTypeName();
				setState(4708);
				match(LP_);
				setState(4709);
				match(STRING_);
				setState(4714);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(4710);
					match(COMMA_);
					setState(4711);
					match(STRING_);
					}
					}
					setState(4716);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4717);
				match(RP_);
				setState(4719);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHAR || _la==CHARACTER) {
					{
					setState(4718);
					characterSet();
					}
				}

				setState(4722);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,353,_ctx) ) {
				case 1:
					{
					setState(4721);
					collateClause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DataTypeNameContext extends ParserRuleContext {
		public TerminalNode INT() { return getToken(PostgreSQLStatementParser.INT, 0); }
		public TerminalNode INT2() { return getToken(PostgreSQLStatementParser.INT2, 0); }
		public TerminalNode INT4() { return getToken(PostgreSQLStatementParser.INT4, 0); }
		public TerminalNode INT8() { return getToken(PostgreSQLStatementParser.INT8, 0); }
		public TerminalNode SMALLINT() { return getToken(PostgreSQLStatementParser.SMALLINT, 0); }
		public TerminalNode INTEGER() { return getToken(PostgreSQLStatementParser.INTEGER, 0); }
		public TerminalNode BIGINT() { return getToken(PostgreSQLStatementParser.BIGINT, 0); }
		public TerminalNode DECIMAL() { return getToken(PostgreSQLStatementParser.DECIMAL, 0); }
		public TerminalNode NUMERIC() { return getToken(PostgreSQLStatementParser.NUMERIC, 0); }
		public TerminalNode REAL() { return getToken(PostgreSQLStatementParser.REAL, 0); }
		public TerminalNode FLOAT() { return getToken(PostgreSQLStatementParser.FLOAT, 0); }
		public TerminalNode FLOAT4() { return getToken(PostgreSQLStatementParser.FLOAT4, 0); }
		public TerminalNode FLOAT8() { return getToken(PostgreSQLStatementParser.FLOAT8, 0); }
		public TerminalNode DOUBLE() { return getToken(PostgreSQLStatementParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(PostgreSQLStatementParser.PRECISION, 0); }
		public TerminalNode SMALLSERIAL() { return getToken(PostgreSQLStatementParser.SMALLSERIAL, 0); }
		public TerminalNode SERIAL() { return getToken(PostgreSQLStatementParser.SERIAL, 0); }
		public TerminalNode BIGSERIAL() { return getToken(PostgreSQLStatementParser.BIGSERIAL, 0); }
		public TerminalNode VARCHAR() { return getToken(PostgreSQLStatementParser.VARCHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(PostgreSQLStatementParser.CHARACTER, 0); }
		public TerminalNode CHAR() { return getToken(PostgreSQLStatementParser.CHAR, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSQLStatementParser.TEXT, 0); }
		public TerminalNode NAME() { return getToken(PostgreSQLStatementParser.NAME, 0); }
		public TerminalNode BYTEA() { return getToken(PostgreSQLStatementParser.BYTEA, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PostgreSQLStatementParser.TIMESTAMP, 0); }
		public TerminalNode DATE() { return getToken(PostgreSQLStatementParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLStatementParser.TIME, 0); }
		public TerminalNode INTERVAL() { return getToken(PostgreSQLStatementParser.INTERVAL, 0); }
		public TerminalNode BOOLEAN() { return getToken(PostgreSQLStatementParser.BOOLEAN, 0); }
		public TerminalNode ENUM() { return getToken(PostgreSQLStatementParser.ENUM, 0); }
		public TerminalNode POINT() { return getToken(PostgreSQLStatementParser.POINT, 0); }
		public TerminalNode LINE() { return getToken(PostgreSQLStatementParser.LINE, 0); }
		public TerminalNode LSEG() { return getToken(PostgreSQLStatementParser.LSEG, 0); }
		public TerminalNode BOX() { return getToken(PostgreSQLStatementParser.BOX, 0); }
		public TerminalNode PATH() { return getToken(PostgreSQLStatementParser.PATH, 0); }
		public TerminalNode POLYGON() { return getToken(PostgreSQLStatementParser.POLYGON, 0); }
		public TerminalNode CIRCLE() { return getToken(PostgreSQLStatementParser.CIRCLE, 0); }
		public TerminalNode CIDR() { return getToken(PostgreSQLStatementParser.CIDR, 0); }
		public TerminalNode INET() { return getToken(PostgreSQLStatementParser.INET, 0); }
		public TerminalNode MACADDR() { return getToken(PostgreSQLStatementParser.MACADDR, 0); }
		public TerminalNode MACADDR8() { return getToken(PostgreSQLStatementParser.MACADDR8, 0); }
		public TerminalNode BIT() { return getToken(PostgreSQLStatementParser.BIT, 0); }
		public TerminalNode VARBIT() { return getToken(PostgreSQLStatementParser.VARBIT, 0); }
		public TerminalNode TSVECTOR() { return getToken(PostgreSQLStatementParser.TSVECTOR, 0); }
		public TerminalNode TSQUERY() { return getToken(PostgreSQLStatementParser.TSQUERY, 0); }
		public TerminalNode XML() { return getToken(PostgreSQLStatementParser.XML, 0); }
		public TerminalNode JSON() { return getToken(PostgreSQLStatementParser.JSON, 0); }
		public TerminalNode INT4RANGE() { return getToken(PostgreSQLStatementParser.INT4RANGE, 0); }
		public TerminalNode INT8RANGE() { return getToken(PostgreSQLStatementParser.INT8RANGE, 0); }
		public TerminalNode NUMRANGE() { return getToken(PostgreSQLStatementParser.NUMRANGE, 0); }
		public TerminalNode TSRANGE() { return getToken(PostgreSQLStatementParser.TSRANGE, 0); }
		public TerminalNode TSTZRANGE() { return getToken(PostgreSQLStatementParser.TSTZRANGE, 0); }
		public TerminalNode DATERANGE() { return getToken(PostgreSQLStatementParser.DATERANGE, 0); }
		public TerminalNode ARRAY() { return getToken(PostgreSQLStatementParser.ARRAY, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ConstDatetimeContext constDatetime() {
			return getRuleContext(ConstDatetimeContext.class,0);
		}
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public DataTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDataTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDataTypeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDataTypeName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeNameContext dataTypeName() throws RecognitionException {
		DataTypeNameContext _localctx = new DataTypeNameContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_dataTypeName);
		try {
			setState(4783);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,355,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4726);
				match(INT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4727);
				match(INT2);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4728);
				match(INT4);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4729);
				match(INT8);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4730);
				match(SMALLINT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4731);
				match(INTEGER);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4732);
				match(BIGINT);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4733);
				match(DECIMAL);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4734);
				match(NUMERIC);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4735);
				match(REAL);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4736);
				match(FLOAT);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4737);
				match(FLOAT4);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4738);
				match(FLOAT8);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4739);
				match(DOUBLE);
				setState(4740);
				match(PRECISION);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4741);
				match(SMALLSERIAL);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4742);
				match(SERIAL);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(4743);
				match(BIGSERIAL);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(4744);
				match(VARCHAR);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(4745);
				match(CHARACTER);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(4746);
				match(CHAR);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(4747);
				match(TEXT);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(4748);
				match(NAME);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(4749);
				match(BYTEA);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(4750);
				match(TIMESTAMP);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(4751);
				match(DATE);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(4752);
				match(TIME);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(4753);
				match(INTERVAL);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(4754);
				match(BOOLEAN);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(4755);
				match(ENUM);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(4756);
				match(POINT);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(4757);
				match(LINE);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(4758);
				match(LSEG);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(4759);
				match(BOX);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(4760);
				match(PATH);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(4761);
				match(POLYGON);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(4762);
				match(CIRCLE);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(4763);
				match(CIDR);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(4764);
				match(INET);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(4765);
				match(MACADDR);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(4766);
				match(MACADDR8);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(4767);
				match(BIT);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(4768);
				match(VARBIT);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(4769);
				match(TSVECTOR);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(4770);
				match(TSQUERY);
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(4771);
				match(XML);
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(4772);
				match(JSON);
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(4773);
				match(INT4RANGE);
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(4774);
				match(INT8RANGE);
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(4775);
				match(NUMRANGE);
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(4776);
				match(TSRANGE);
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(4777);
				match(TSTZRANGE);
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(4778);
				match(DATERANGE);
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(4779);
				match(ARRAY);
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(4780);
				identifier();
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(4781);
				constDatetime();
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(4782);
				typeName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DataTypeLengthContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public List<TerminalNode> NUMBER_() { return getTokens(PostgreSQLStatementParser.NUMBER_); }
		public TerminalNode NUMBER_(int i) {
			return getToken(PostgreSQLStatementParser.NUMBER_, i);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public DataTypeLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDataTypeLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDataTypeLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDataTypeLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeLengthContext dataTypeLength() throws RecognitionException {
		DataTypeLengthContext _localctx = new DataTypeLengthContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_dataTypeLength);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4785);
			match(LP_);
			setState(4786);
			match(NUMBER_);
			setState(4789);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_) {
				{
				setState(4787);
				match(COMMA_);
				setState(4788);
				match(NUMBER_);
				}
			}

			setState(4791);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CharacterSetContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(PostgreSQLStatementParser.CHARACTER, 0); }
		public TerminalNode CHAR() { return getToken(PostgreSQLStatementParser.CHAR, 0); }
		public TerminalNode EQ_() { return getToken(PostgreSQLStatementParser.EQ_, 0); }
		public CharacterSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCharacterSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCharacterSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCharacterSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterSetContext characterSet() throws RecognitionException {
		CharacterSetContext _localctx = new CharacterSetContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_characterSet);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4793);
			_la = _input.LA(1);
			if ( !(_la==CHAR || _la==CHARACTER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4794);
			match(SET);
			setState(4796);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQ_) {
				{
				setState(4795);
				match(EQ_);
				}
			}

			setState(4798);
			ignoredIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IgnoredIdentifierContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DOT_() { return getToken(PostgreSQLStatementParser.DOT_, 0); }
		public IgnoredIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ignoredIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterIgnoredIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitIgnoredIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitIgnoredIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IgnoredIdentifierContext ignoredIdentifier() throws RecognitionException {
		IgnoredIdentifierContext _localctx = new IgnoredIdentifierContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_ignoredIdentifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4800);
			identifier();
			setState(4803);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOT_) {
				{
				setState(4801);
				match(DOT_);
				setState(4802);
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IgnoredIdentifiersContext extends ParserRuleContext {
		public List<IgnoredIdentifierContext> ignoredIdentifier() {
			return getRuleContexts(IgnoredIdentifierContext.class);
		}
		public IgnoredIdentifierContext ignoredIdentifier(int i) {
			return getRuleContext(IgnoredIdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public IgnoredIdentifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ignoredIdentifiers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterIgnoredIdentifiers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitIgnoredIdentifiers(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitIgnoredIdentifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IgnoredIdentifiersContext ignoredIdentifiers() throws RecognitionException {
		IgnoredIdentifiersContext _localctx = new IgnoredIdentifiersContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_ignoredIdentifiers);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4805);
			ignoredIdentifier();
			setState(4810);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4806);
				match(COMMA_);
				setState(4807);
				ignoredIdentifier();
				}
				}
				setState(4812);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SignedIconstContext extends ParserRuleContext {
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public TerminalNode PLUS_() { return getToken(PostgreSQLStatementParser.PLUS_, 0); }
		public TerminalNode MINUS_() { return getToken(PostgreSQLStatementParser.MINUS_, 0); }
		public SignedIconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signedIconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSignedIconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSignedIconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSignedIconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignedIconstContext signedIconst() throws RecognitionException {
		SignedIconstContext _localctx = new SignedIconstContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_signedIconst);
		try {
			setState(4818);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(4813);
				match(NUMBER_);
				}
				break;
			case PLUS_:
				enterOuterAlt(_localctx, 2);
				{
				setState(4814);
				match(PLUS_);
				setState(4815);
				match(NUMBER_);
				}
				break;
			case MINUS_:
				enterOuterAlt(_localctx, 3);
				{
				setState(4816);
				match(MINUS_);
				setState(4817);
				match(NUMBER_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BooleanOrStringContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(PostgreSQLStatementParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(PostgreSQLStatementParser.FALSE, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public NonReservedWordContext nonReservedWord() {
			return getRuleContext(NonReservedWordContext.class,0);
		}
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public BooleanOrStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanOrString; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterBooleanOrString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitBooleanOrString(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitBooleanOrString(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanOrStringContext booleanOrString() throws RecognitionException {
		BooleanOrStringContext _localctx = new BooleanOrStringContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_booleanOrString);
		try {
			setState(4825);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TRUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4820);
				match(TRUE);
				}
				break;
			case FALSE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4821);
				match(FALSE);
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 3);
				{
				setState(4822);
				match(ON);
				}
				break;
			case UNICODE_ESCAPE:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXISTS:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case BIT:
			case XML:
			case JSON:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case OUT:
			case INOUT:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 4);
				{
				setState(4823);
				nonReservedWord();
				}
				break;
			case STRING_:
				enterOuterAlt(_localctx, 5);
				{
				setState(4824);
				match(STRING_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NonReservedWordContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UnreservedWordContext unreservedWord() {
			return getRuleContext(UnreservedWordContext.class,0);
		}
		public ColNameKeywordContext colNameKeyword() {
			return getRuleContext(ColNameKeywordContext.class,0);
		}
		public TypeFuncNameKeywordContext typeFuncNameKeyword() {
			return getRuleContext(TypeFuncNameKeywordContext.class,0);
		}
		public NonReservedWordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonReservedWord; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterNonReservedWord(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitNonReservedWord(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitNonReservedWord(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonReservedWordContext nonReservedWord() throws RecognitionException {
		NonReservedWordContext _localctx = new NonReservedWordContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_nonReservedWord);
		try {
			setState(4831);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,362,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4827);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4828);
				unreservedWord();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4829);
				colNameKeyword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4830);
				typeFuncNameKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColNameKeywordContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(PostgreSQLStatementParser.BETWEEN, 0); }
		public TerminalNode BIGINT() { return getToken(PostgreSQLStatementParser.BIGINT, 0); }
		public TerminalNode BIT() { return getToken(PostgreSQLStatementParser.BIT, 0); }
		public TerminalNode BOOLEAN() { return getToken(PostgreSQLStatementParser.BOOLEAN, 0); }
		public TerminalNode CHAR() { return getToken(PostgreSQLStatementParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(PostgreSQLStatementParser.CHARACTER, 0); }
		public TerminalNode COALESCE() { return getToken(PostgreSQLStatementParser.COALESCE, 0); }
		public TerminalNode DEC() { return getToken(PostgreSQLStatementParser.DEC, 0); }
		public TerminalNode DECIMAL() { return getToken(PostgreSQLStatementParser.DECIMAL, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public TerminalNode EXTRACT() { return getToken(PostgreSQLStatementParser.EXTRACT, 0); }
		public TerminalNode FLOAT() { return getToken(PostgreSQLStatementParser.FLOAT, 0); }
		public TerminalNode GREATEST() { return getToken(PostgreSQLStatementParser.GREATEST, 0); }
		public TerminalNode GROUPING() { return getToken(PostgreSQLStatementParser.GROUPING, 0); }
		public TerminalNode INOUT() { return getToken(PostgreSQLStatementParser.INOUT, 0); }
		public TerminalNode INT() { return getToken(PostgreSQLStatementParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(PostgreSQLStatementParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(PostgreSQLStatementParser.INTERVAL, 0); }
		public TerminalNode LEAST() { return getToken(PostgreSQLStatementParser.LEAST, 0); }
		public TerminalNode NATIONAL() { return getToken(PostgreSQLStatementParser.NATIONAL, 0); }
		public TerminalNode NCHAR() { return getToken(PostgreSQLStatementParser.NCHAR, 0); }
		public TerminalNode NONE() { return getToken(PostgreSQLStatementParser.NONE, 0); }
		public TerminalNode NULLIF() { return getToken(PostgreSQLStatementParser.NULLIF, 0); }
		public TerminalNode NUMERIC() { return getToken(PostgreSQLStatementParser.NUMERIC, 0); }
		public TerminalNode OUT() { return getToken(PostgreSQLStatementParser.OUT, 0); }
		public TerminalNode OVERLAY() { return getToken(PostgreSQLStatementParser.OVERLAY, 0); }
		public TerminalNode POSITION() { return getToken(PostgreSQLStatementParser.POSITION, 0); }
		public TerminalNode PRECISION() { return getToken(PostgreSQLStatementParser.PRECISION, 0); }
		public TerminalNode REAL() { return getToken(PostgreSQLStatementParser.REAL, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLStatementParser.ROW, 0); }
		public TerminalNode SETOF() { return getToken(PostgreSQLStatementParser.SETOF, 0); }
		public TerminalNode SMALLINT() { return getToken(PostgreSQLStatementParser.SMALLINT, 0); }
		public TerminalNode SUBSTRING() { return getToken(PostgreSQLStatementParser.SUBSTRING, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLStatementParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PostgreSQLStatementParser.TIMESTAMP, 0); }
		public TerminalNode TREAT() { return getToken(PostgreSQLStatementParser.TREAT, 0); }
		public TerminalNode TRIM() { return getToken(PostgreSQLStatementParser.TRIM, 0); }
		public TerminalNode VALUES() { return getToken(PostgreSQLStatementParser.VALUES, 0); }
		public TerminalNode VARCHAR() { return getToken(PostgreSQLStatementParser.VARCHAR, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(PostgreSQLStatementParser.XMLATTRIBUTES, 0); }
		public TerminalNode XMLCONCAT() { return getToken(PostgreSQLStatementParser.XMLCONCAT, 0); }
		public TerminalNode XMLELEMENT() { return getToken(PostgreSQLStatementParser.XMLELEMENT, 0); }
		public TerminalNode XMLEXISTS() { return getToken(PostgreSQLStatementParser.XMLEXISTS, 0); }
		public TerminalNode XMLFOREST() { return getToken(PostgreSQLStatementParser.XMLFOREST, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(PostgreSQLStatementParser.XMLNAMESPACES, 0); }
		public TerminalNode XMLPARSE() { return getToken(PostgreSQLStatementParser.XMLPARSE, 0); }
		public TerminalNode XMLPI() { return getToken(PostgreSQLStatementParser.XMLPI, 0); }
		public TerminalNode XMLROOT() { return getToken(PostgreSQLStatementParser.XMLROOT, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(PostgreSQLStatementParser.XMLSERIALIZE, 0); }
		public TerminalNode XMLTABLE() { return getToken(PostgreSQLStatementParser.XMLTABLE, 0); }
		public ColNameKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colNameKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterColNameKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitColNameKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitColNameKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColNameKeywordContext colNameKeyword() throws RecognitionException {
		ColNameKeywordContext _localctx = new ColNameKeywordContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_colNameKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4833);
			_la = _input.LA(1);
			if ( !(((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & 140737488355345L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & -9070254047553911791L) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & 35717121L) != 0) || ((((_la - 413)) & ~0x3f) == 0 && ((1L << (_la - 413)) & 866995704826953731L) != 0) || ((((_la - 498)) & ~0x3f) == 0 && ((1L << (_la - 498)) & 8574853690569654273L) != 0) || ((((_la - 565)) & ~0x3f) == 0 && ((1L << (_la - 565)) & 2113805L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DatabaseNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public DatabaseNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_databaseName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDatabaseName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDatabaseName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDatabaseName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatabaseNameContext databaseName() throws RecognitionException {
		DatabaseNameContext _localctx = new DatabaseNameContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_databaseName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4835);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RoleSpecContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public NonReservedWordContext nonReservedWord() {
			return getRuleContext(NonReservedWordContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLStatementParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLStatementParser.SESSION_USER, 0); }
		public TerminalNode CURRENT_ROLE() { return getToken(PostgreSQLStatementParser.CURRENT_ROLE, 0); }
		public TerminalNode PUBLIC() { return getToken(PostgreSQLStatementParser.PUBLIC, 0); }
		public RoleSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterRoleSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitRoleSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitRoleSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleSpecContext roleSpec() throws RecognitionException {
		RoleSpecContext _localctx = new RoleSpecContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_roleSpec);
		try {
			setState(4843);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,363,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4837);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4838);
				nonReservedWord();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4839);
				match(CURRENT_USER);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4840);
				match(SESSION_USER);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4841);
				match(CURRENT_ROLE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4842);
				match(PUBLIC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VarNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public VarNameContext varName() {
			return getRuleContext(VarNameContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(PostgreSQLStatementParser.DOT_, 0); }
		public VarNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterVarName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitVarName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitVarName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VarNameContext varName() throws RecognitionException {
		return varName(0);
	}

	private VarNameContext varName(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		VarNameContext _localctx = new VarNameContext(_ctx, _parentState);
		VarNameContext _prevctx = _localctx;
		int _startState = 554;
		enterRecursionRule(_localctx, 554, RULE_varName, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4846);
			colId();
			}
			_ctx.stop = _input.LT(-1);
			setState(4853);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,364,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new VarNameContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_varName);
					setState(4848);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4849);
					match(DOT_);
					setState(4850);
					colId();
					}
					} 
				}
				setState(4855);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,364,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VarListContext extends ParserRuleContext {
		public List<VarValueContext> varValue() {
			return getRuleContexts(VarValueContext.class);
		}
		public VarValueContext varValue(int i) {
			return getRuleContext(VarValueContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public VarListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterVarList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitVarList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitVarList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VarListContext varList() throws RecognitionException {
		VarListContext _localctx = new VarListContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_varList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4856);
			varValue();
			setState(4861);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4857);
				match(COMMA_);
				setState(4858);
				varValue();
				}
				}
				setState(4863);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VarValueContext extends ParserRuleContext {
		public BooleanOrStringContext booleanOrString() {
			return getRuleContext(BooleanOrStringContext.class,0);
		}
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public VarValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterVarValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitVarValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitVarValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VarValueContext varValue() throws RecognitionException {
		VarValueContext _localctx = new VarValueContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_varValue);
		try {
			setState(4866);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNICODE_ESCAPE:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXISTS:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case BIT:
			case XML:
			case JSON:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case OUT:
			case INOUT:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case ON:
			case IF:
			case IS:
			case TRUE:
			case FALSE:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case IDENTIFIER_:
			case STRING_:
				enterOuterAlt(_localctx, 1);
				{
				setState(4864);
				booleanOrString();
				}
				break;
			case PLUS_:
			case MINUS_:
			case NUMBER_:
				enterOuterAlt(_localctx, 2);
				{
				setState(4865);
				numericOnly();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ZoneValueContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode INTERVAL() { return getToken(PostgreSQLStatementParser.INTERVAL, 0); }
		public OptIntervalContext optInterval() {
			return getRuleContext(OptIntervalContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLStatementParser.LOCAL, 0); }
		public ZoneValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_zoneValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterZoneValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitZoneValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitZoneValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ZoneValueContext zoneValue() throws RecognitionException {
		ZoneValueContext _localctx = new ZoneValueContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_zoneValue);
		try {
			setState(4881);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,367,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4868);
				match(STRING_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4869);
				identifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4870);
				match(INTERVAL);
				setState(4871);
				match(STRING_);
				setState(4872);
				optInterval();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4873);
				match(INTERVAL);
				setState(4874);
				match(LP_);
				setState(4875);
				match(NUMBER_);
				setState(4876);
				match(RP_);
				setState(4877);
				match(STRING_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4878);
				numericOnly();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4879);
				match(DEFAULT);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4880);
				match(LOCAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NumericOnlyContext extends ParserRuleContext {
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public TerminalNode PLUS_() { return getToken(PostgreSQLStatementParser.PLUS_, 0); }
		public TerminalNode MINUS_() { return getToken(PostgreSQLStatementParser.MINUS_, 0); }
		public NumericOnlyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numericOnly; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterNumericOnly(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitNumericOnly(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitNumericOnly(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericOnlyContext numericOnly() throws RecognitionException {
		NumericOnlyContext _localctx = new NumericOnlyContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_numericOnly);
		try {
			setState(4888);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(4883);
				match(NUMBER_);
				}
				break;
			case PLUS_:
				enterOuterAlt(_localctx, 2);
				{
				setState(4884);
				match(PLUS_);
				setState(4885);
				match(NUMBER_);
				}
				break;
			case MINUS_:
				enterOuterAlt(_localctx, 3);
				{
				setState(4886);
				match(MINUS_);
				setState(4887);
				match(NUMBER_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IsoLevelContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(PostgreSQLStatementParser.READ, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(PostgreSQLStatementParser.UNCOMMITTED, 0); }
		public TerminalNode COMMITTED() { return getToken(PostgreSQLStatementParser.COMMITTED, 0); }
		public TerminalNode REPEATABLE() { return getToken(PostgreSQLStatementParser.REPEATABLE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PostgreSQLStatementParser.SERIALIZABLE, 0); }
		public IsoLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isoLevel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterIsoLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitIsoLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitIsoLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IsoLevelContext isoLevel() throws RecognitionException {
		IsoLevelContext _localctx = new IsoLevelContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_isoLevel);
		try {
			setState(4897);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,369,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4890);
				match(READ);
				setState(4891);
				match(UNCOMMITTED);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4892);
				match(READ);
				setState(4893);
				match(COMMITTED);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4894);
				match(REPEATABLE);
				setState(4895);
				match(READ);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4896);
				match(SERIALIZABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnDefContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public ColQualListContext colQualList() {
			return getRuleContext(ColQualListContext.class,0);
		}
		public CreateGenericOptionsContext createGenericOptions() {
			return getRuleContext(CreateGenericOptionsContext.class,0);
		}
		public ColumnDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterColumnDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitColumnDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitColumnDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefContext columnDef() throws RecognitionException {
		ColumnDefContext _localctx = new ColumnDefContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_columnDef);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4899);
			colId();
			setState(4900);
			typeName();
			setState(4902);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(4901);
				createGenericOptions();
				}
			}

			setState(4904);
			colQualList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColQualListContext extends ParserRuleContext {
		public List<ColConstraintContext> colConstraint() {
			return getRuleContexts(ColConstraintContext.class);
		}
		public ColConstraintContext colConstraint(int i) {
			return getRuleContext(ColConstraintContext.class,i);
		}
		public ColQualListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colQualList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterColQualList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitColQualList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitColQualList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColQualListContext colQualList() throws RecognitionException {
		ColQualListContext _localctx = new ColQualListContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_colQualList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4909);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 4503600701374723L) != 0) || ((((_la - 452)) & ~0x3f) == 0 && ((1L << (_la - 452)) & 13194139533319L) != 0) || _la==DEFAULT) {
				{
				{
				setState(4906);
				colConstraint();
				}
				}
				setState(4911);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColConstraintContext extends ParserRuleContext {
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLStatementParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ColConstraintElemContext colConstraintElem() {
			return getRuleContext(ColConstraintElemContext.class,0);
		}
		public ConstraintAttrContext constraintAttr() {
			return getRuleContext(ConstraintAttrContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(PostgreSQLStatementParser.COLLATE, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public ColConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterColConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitColConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitColConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColConstraintContext colConstraint() throws RecognitionException {
		ColConstraintContext _localctx = new ColConstraintContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_colConstraint);
		try {
			setState(4920);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4912);
				match(CONSTRAINT);
				setState(4913);
				name();
				setState(4914);
				colConstraintElem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4916);
				colConstraintElem();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4917);
				constraintAttr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4918);
				match(COLLATE);
				setState(4919);
				anyName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstraintAttrContext extends ParserRuleContext {
		public TerminalNode DEFERRABLE() { return getToken(PostgreSQLStatementParser.DEFERRABLE, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode INITIALLY() { return getToken(PostgreSQLStatementParser.INITIALLY, 0); }
		public TerminalNode DEFERRED() { return getToken(PostgreSQLStatementParser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSQLStatementParser.IMMEDIATE, 0); }
		public ConstraintAttrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintAttr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterConstraintAttr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitConstraintAttr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitConstraintAttr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintAttrContext constraintAttr() throws RecognitionException {
		ConstraintAttrContext _localctx = new ConstraintAttrContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_constraintAttr);
		try {
			setState(4929);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,373,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4922);
				match(DEFERRABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4923);
				match(NOT);
				setState(4924);
				match(DEFERRABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4925);
				match(INITIALLY);
				setState(4926);
				match(DEFERRED);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4927);
				match(INITIALLY);
				setState(4928);
				match(IMMEDIATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColConstraintElemContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PostgreSQLStatementParser.NULL, 0); }
		public TerminalNode UNIQUE() { return getToken(PostgreSQLStatementParser.UNIQUE, 0); }
		public ConsTableSpaceContext consTableSpace() {
			return getRuleContext(ConsTableSpaceContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(PostgreSQLStatementParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(PostgreSQLStatementParser.KEY, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSQLStatementParser.CHECK, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public NoInheritContext noInherit() {
			return getRuleContext(NoInheritContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public BExprContext bExpr() {
			return getRuleContext(BExprContext.class,0);
		}
		public TerminalNode GENERATED() { return getToken(PostgreSQLStatementParser.GENERATED, 0); }
		public GeneratedWhenContext generatedWhen() {
			return getRuleContext(GeneratedWhenContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public TerminalNode IDENTITY() { return getToken(PostgreSQLStatementParser.IDENTITY, 0); }
		public ParenthesizedSeqOptListContext parenthesizedSeqOptList() {
			return getRuleContext(ParenthesizedSeqOptListContext.class,0);
		}
		public TerminalNode STORED() { return getToken(PostgreSQLStatementParser.STORED, 0); }
		public TerminalNode REFERENCES() { return getToken(PostgreSQLStatementParser.REFERENCES, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public OptColumnListContext optColumnList() {
			return getRuleContext(OptColumnListContext.class,0);
		}
		public KeyMatchContext keyMatch() {
			return getRuleContext(KeyMatchContext.class,0);
		}
		public KeyActionsContext keyActions() {
			return getRuleContext(KeyActionsContext.class,0);
		}
		public ColConstraintElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colConstraintElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterColConstraintElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitColConstraintElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitColConstraintElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColConstraintElemContext colConstraintElem() throws RecognitionException {
		ColConstraintElemContext _localctx = new ColConstraintElemContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_colConstraintElem);
		int _la;
		try {
			setState(4982);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,381,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4931);
				match(NOT);
				setState(4932);
				match(NULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4933);
				match(NULL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4934);
				match(UNIQUE);
				setState(4937);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4935);
					match(WITH);
					setState(4936);
					definition();
					}
				}

				setState(4939);
				consTableSpace();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4940);
				match(PRIMARY);
				setState(4941);
				match(KEY);
				setState(4944);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4942);
					match(WITH);
					setState(4943);
					definition();
					}
				}

				setState(4946);
				consTableSpace();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4947);
				match(CHECK);
				setState(4948);
				match(LP_);
				setState(4949);
				aExpr(0);
				setState(4950);
				match(RP_);
				setState(4952);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(4951);
					noInherit();
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4954);
				match(DEFAULT);
				setState(4955);
				bExpr(0);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4956);
				match(GENERATED);
				setState(4957);
				generatedWhen();
				setState(4958);
				match(AS);
				setState(4959);
				match(IDENTITY);
				setState(4961);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(4960);
					parenthesizedSeqOptList();
					}
				}

				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4963);
				match(GENERATED);
				setState(4964);
				generatedWhen();
				setState(4965);
				match(AS);
				setState(4966);
				match(LP_);
				setState(4967);
				aExpr(0);
				setState(4968);
				match(RP_);
				setState(4969);
				match(STORED);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4971);
				match(REFERENCES);
				setState(4972);
				qualifiedName();
				setState(4974);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(4973);
					optColumnList();
					}
				}

				setState(4977);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MATCH) {
					{
					setState(4976);
					keyMatch();
					}
				}

				setState(4980);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(4979);
					keyActions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ParenthesizedSeqOptListContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public SeqOptListContext seqOptList() {
			return getRuleContext(SeqOptListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public ParenthesizedSeqOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parenthesizedSeqOptList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterParenthesizedSeqOptList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitParenthesizedSeqOptList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitParenthesizedSeqOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParenthesizedSeqOptListContext parenthesizedSeqOptList() throws RecognitionException {
		ParenthesizedSeqOptListContext _localctx = new ParenthesizedSeqOptListContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_parenthesizedSeqOptList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4984);
			match(LP_);
			setState(4985);
			seqOptList();
			setState(4986);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SeqOptListContext extends ParserRuleContext {
		public List<SeqOptElemContext> seqOptElem() {
			return getRuleContexts(SeqOptElemContext.class);
		}
		public SeqOptElemContext seqOptElem(int i) {
			return getRuleContext(SeqOptElemContext.class,i);
		}
		public SeqOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seqOptList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSeqOptList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSeqOptList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSeqOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SeqOptListContext seqOptList() throws RecognitionException {
		SeqOptListContext _localctx = new SeqOptListContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_seqOptList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4989); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4988);
				seqOptElem();
				}
				}
				setState(4991); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & 216190374304024705L) != 0) || ((((_la - 152)) & ~0x3f) == 0 && ((1L << (_la - 152)) & 16897L) != 0) || _la==AS );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SeqOptElemContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public SimpleTypeNameContext simpleTypeName() {
			return getRuleContext(SimpleTypeNameContext.class,0);
		}
		public TerminalNode CACHE() { return getToken(PostgreSQLStatementParser.CACHE, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode CYCLE() { return getToken(PostgreSQLStatementParser.CYCLE, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode INCREMENT() { return getToken(PostgreSQLStatementParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public TerminalNode MAXVALUE() { return getToken(PostgreSQLStatementParser.MAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(PostgreSQLStatementParser.MINVALUE, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLStatementParser.OWNED, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode NONE() { return getToken(PostgreSQLStatementParser.NONE, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLStatementParser.SEQUENCE, 0); }
		public TerminalNode NAME() { return getToken(PostgreSQLStatementParser.NAME, 0); }
		public TerminalNode START() { return getToken(PostgreSQLStatementParser.START, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode RESTART() { return getToken(PostgreSQLStatementParser.RESTART, 0); }
		public SeqOptElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seqOptElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSeqOptElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSeqOptElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSeqOptElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SeqOptElemContext seqOptElem() throws RecognitionException {
		SeqOptElemContext _localctx = new SeqOptElemContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_seqOptElem);
		int _la;
		try {
			setState(5030);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,388,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4993);
				match(AS);
				setState(4994);
				simpleTypeName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4995);
				match(CACHE);
				setState(4996);
				numericOnly();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4998);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(4997);
					match(NO);
					}
				}

				setState(5000);
				match(CYCLE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5001);
				match(INCREMENT);
				setState(5003);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(5002);
					match(BY);
					}
				}

				setState(5005);
				numericOnly();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5006);
				_la = _input.LA(1);
				if ( !(_la==MAXVALUE || _la==MINVALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5007);
				numericOnly();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5008);
				match(NO);
				setState(5009);
				_la = _input.LA(1);
				if ( !(_la==MAXVALUE || _la==MINVALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5010);
				match(OWNED);
				setState(5011);
				match(BY);
				setState(5014);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UNICODE_ESCAPE:
				case ADMIN:
				case ESCAPE:
				case EXCLUDE:
				case MOD:
				case PARTITION:
				case UNKNOWN:
				case ALWAYS:
				case CASCADE:
				case GENERATED:
				case ISOLATION:
				case LEVEL:
				case NO:
				case OPTION:
				case PRIVILEGES:
				case READ:
				case ROLE:
				case ROWS:
				case START:
				case TRANSACTION:
				case ACTION:
				case CACHE:
				case CHARACTERISTICS:
				case CLUSTER:
				case COMMENTS:
				case CONSTRAINTS:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DEFAULTS:
				case DEFERRED:
				case DEPENDS:
				case DOMAIN:
				case EXCLUDING:
				case EXECUTE:
				case EXTENDED:
				case EXTENSION:
				case EXTERNAL:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case GLOBAL:
				case IDENTITY:
				case IMMEDIATE:
				case INCLUDING:
				case INCREMENT:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INCLUDE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LOGGED:
				case MAIN:
				case MATCH:
				case MAXVALUE:
				case MINVALUE:
				case NOTHING:
				case NULLS:
				case OBJECT:
				case OIDS:
				case OVER:
				case OWNED:
				case OWNER:
				case PARTIAL:
				case PLAIN:
				case PRECEDING:
				case RANGE:
				case RENAME:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case ROUTINE:
				case RULE:
				case SECURITY:
				case SEQUENCE:
				case SESSION:
				case SHOW:
				case SIMPLE:
				case STATISTICS:
				case STORAGE:
				case TABLESPACE:
				case TEMP:
				case TEMPORARY:
				case UNBOUNDED:
				case UNLOGGED:
				case VALID:
				case VALIDATE:
				case WITHIN:
				case WITHOUT:
				case ZONE:
				case OF:
				case UESCAPE:
				case GROUPS:
				case RECURSIVE:
				case BYTEA:
				case ENUM:
				case POINT:
				case LSEG:
				case BOX:
				case PATH:
				case POLYGON:
				case CIRCLE:
				case XML:
				case JSON:
				case ORDINALITY:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case REF:
				case PASSING:
				case VERSION:
				case YES:
				case STANDALONE:
				case MATERIALIZED:
				case OPERATOR:
				case SHARE:
				case ROLLUP:
				case DOCUMENT:
				case NORMALIZED:
				case NOWAIT:
				case LOCKED:
				case COLUMNS:
				case CONTENT:
				case STRIP:
				case WHITESPACE:
				case CONFLICT:
				case OVERRIDING:
				case SYSTEM:
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case ASSERTION:
				case ASSIGNMENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CALLED:
				case CATALOG:
				case CHAIN:
				case CHECKPOINT:
				case CLASS:
				case CONFIGURATION:
				case COMMENT:
				case DETACH:
				case DICTIONARY:
				case EXPRESSION:
				case INSENSITIVE:
				case DISCARD:
				case OFF:
				case INSTEAD:
				case EXPLAIN:
				case INPUT:
				case INLINE:
				case PARALLEL:
				case LEAKPROOF:
				case COMMITTED:
				case ENCODING:
				case IMPLICIT:
				case DELIMITER:
				case CURSOR:
				case EACH:
				case EVENT:
				case DEALLOCATE:
				case CONNECTION:
				case DECLARE:
				case FAMILY:
				case FORWARD:
				case EXCLUSIVE:
				case FUNCTIONS:
				case LOCATION:
				case LABEL:
				case DELIMITERS:
				case HANDLER:
				case HEADER:
				case IMMUTABLE:
				case GRANTED:
				case HOLD:
				case MAPPING:
				case OLD:
				case METHOD:
				case LOAD:
				case LISTEN:
				case MODE:
				case MOVE:
				case PROCEDURAL:
				case PARSER:
				case PROCEDURES:
				case ENCRYPTED:
				case PUBLICATION:
				case PROGRAM:
				case REFERENCING:
				case PLANS:
				case REINDEX:
				case PRIOR:
				case PASSWORD:
				case RELATIVE:
				case QUOTE:
				case ROUTINES:
				case REPLACE:
				case SNAPSHOT:
				case REFRESH:
				case PREPARE:
				case OPTIONS:
				case IMPORT:
				case INVOKER:
				case NEW:
				case PREPARED:
				case SCROLL:
				case SEQUENCES:
				case SYSID:
				case REASSIGN:
				case SERVER:
				case SUBSCRIPTION:
				case SEARCH:
				case SCHEMAS:
				case RECHECK:
				case POLICY:
				case NOTIFY:
				case LOCK:
				case RELEASE:
				case SERIALIZABLE:
				case RETURNS:
				case STATEMENT:
				case STDIN:
				case STDOUT:
				case TABLES:
				case SUPPORT:
				case STABLE:
				case TEMPLATE:
				case UNENCRYPTED:
				case VIEWS:
				case UNCOMMITTED:
				case TRANSFORM:
				case UNLISTEN:
				case TRUSTED:
				case VALIDATOR:
				case UNTIL:
				case VACUUM:
				case VOLATILE:
				case STORED:
				case WRITE:
				case STRICT:
				case TYPES:
				case WRAPPER:
				case WORK:
				case PARAM:
				case INSERT:
				case UPDATE:
				case DELETE:
				case ALTER:
				case DROP:
				case TRUNCATE:
				case SCHEMA:
				case REVOKE:
				case ADD:
				case SET:
				case TABLE:
				case INDEX:
				case CONSTRAINT:
				case KEY:
				case FUNCTION:
				case TRIGGER:
				case PROCEDURE:
				case VIEW:
				case IF:
				case BY:
				case BEGIN:
				case COMMIT:
				case ROLLBACK:
				case SAVEPOINT:
				case DOUBLE:
				case INTERVAL:
				case TIME:
				case TIMESTAMP:
				case YEAR:
				case QUARTER:
				case MONTH:
				case WEEK:
				case DAY:
				case HOUR:
				case MINUTE:
				case SECOND:
				case CURRENT:
				case ENABLE:
				case DISABLE:
				case CALL:
				case PRESERVE:
				case DEFINER:
				case SQL:
				case CASCADED:
				case LOCAL:
				case CLOSE:
				case NEXT:
				case NAME:
				case COLLATION:
				case NAMES:
				case TYPE:
				case TEXT:
				case REPEATABLE:
				case VARYING:
				case NATIONAL:
				case VALUE:
				case TIES:
				case CUBE:
				case SETS:
				case OTHERS:
				case AT:
				case IDENTIFIER_:
					{
					setState(5012);
					anyName();
					}
					break;
				case NONE:
					{
					setState(5013);
					match(NONE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5016);
				match(SEQUENCE);
				setState(5017);
				match(NAME);
				setState(5018);
				anyName();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5019);
				match(START);
				setState(5021);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(5020);
					match(WITH);
					}
				}

				setState(5023);
				numericOnly();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5024);
				match(RESTART);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5025);
				match(RESTART);
				setState(5027);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(5026);
					match(WITH);
					}
				}

				setState(5029);
				numericOnly();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptColumnListContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public OptColumnListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optColumnList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOptColumnList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOptColumnList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOptColumnList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptColumnListContext optColumnList() throws RecognitionException {
		OptColumnListContext _localctx = new OptColumnListContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_optColumnList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5032);
			match(LP_);
			setState(5033);
			columnList();
			setState(5034);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnElemContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public ColumnElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterColumnElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitColumnElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitColumnElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnElemContext columnElem() throws RecognitionException {
		ColumnElemContext _localctx = new ColumnElemContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_columnElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5036);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnListContext extends ParserRuleContext {
		public List<ColumnElemContext> columnElem() {
			return getRuleContexts(ColumnElemContext.class);
		}
		public ColumnElemContext columnElem(int i) {
			return getRuleContext(ColumnElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public ColumnListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterColumnList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitColumnList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitColumnList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnListContext columnList() throws RecognitionException {
		ColumnListContext _localctx = new ColumnListContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_columnList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5038);
			columnElem();
			setState(5043);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,389,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5039);
					match(COMMA_);
					setState(5040);
					columnElem();
					}
					} 
				}
				setState(5045);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,389,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GeneratedWhenContext extends ParserRuleContext {
		public TerminalNode ALWAYS() { return getToken(PostgreSQLStatementParser.ALWAYS, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public GeneratedWhenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generatedWhen; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterGeneratedWhen(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitGeneratedWhen(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitGeneratedWhen(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GeneratedWhenContext generatedWhen() throws RecognitionException {
		GeneratedWhenContext _localctx = new GeneratedWhenContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_generatedWhen);
		try {
			setState(5049);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALWAYS:
				enterOuterAlt(_localctx, 1);
				{
				setState(5046);
				match(ALWAYS);
				}
				break;
			case BY:
				enterOuterAlt(_localctx, 2);
				{
				setState(5047);
				match(BY);
				setState(5048);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NoInheritContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLStatementParser.INHERIT, 0); }
		public NoInheritContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_noInherit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterNoInherit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitNoInherit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitNoInherit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NoInheritContext noInherit() throws RecognitionException {
		NoInheritContext _localctx = new NoInheritContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_noInherit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5051);
			match(NO);
			setState(5052);
			match(INHERIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConsTableSpaceContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLStatementParser.INDEX, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLStatementParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ConsTableSpaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_consTableSpace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterConsTableSpace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitConsTableSpace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitConsTableSpace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConsTableSpaceContext consTableSpace() throws RecognitionException {
		ConsTableSpaceContext _localctx = new ConsTableSpaceContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_consTableSpace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5054);
			match(USING);
			setState(5055);
			match(INDEX);
			setState(5056);
			match(TABLESPACE);
			setState(5057);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DefinitionContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public DefListContext defList() {
			return getRuleContext(DefListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public DefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefinitionContext definition() throws RecognitionException {
		DefinitionContext _localctx = new DefinitionContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5059);
			match(LP_);
			setState(5060);
			defList();
			setState(5061);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DefListContext extends ParserRuleContext {
		public List<DefElemContext> defElem() {
			return getRuleContexts(DefElemContext.class);
		}
		public DefElemContext defElem(int i) {
			return getRuleContext(DefElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public DefListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDefList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDefList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDefList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefListContext defList() throws RecognitionException {
		DefListContext _localctx = new DefListContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_defList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5063);
			defElem();
			setState(5068);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5064);
				match(COMMA_);
				setState(5065);
				defElem();
				}
				}
				setState(5070);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DefElemContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(PostgreSQLStatementParser.EQ_, 0); }
		public DefArgContext defArg() {
			return getRuleContext(DefArgContext.class,0);
		}
		public DefElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDefElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDefElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDefElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefElemContext defElem() throws RecognitionException {
		DefElemContext _localctx = new DefElemContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_defElem);
		try {
			setState(5076);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,392,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(5071);
				colLabel();
				setState(5072);
				match(EQ_);
				setState(5073);
				defArg();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5075);
				colLabel();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColLabelContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UnreservedWordContext unreservedWord() {
			return getRuleContext(UnreservedWordContext.class,0);
		}
		public ColNameKeywordContext colNameKeyword() {
			return getRuleContext(ColNameKeywordContext.class,0);
		}
		public TypeFuncNameKeywordContext typeFuncNameKeyword() {
			return getRuleContext(TypeFuncNameKeywordContext.class,0);
		}
		public ReservedKeywordContext reservedKeyword() {
			return getRuleContext(ReservedKeywordContext.class,0);
		}
		public ColLabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colLabel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterColLabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitColLabel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitColLabel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColLabelContext colLabel() throws RecognitionException {
		ColLabelContext _localctx = new ColLabelContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_colLabel);
		try {
			setState(5083);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,393,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5078);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5079);
				unreservedWord();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5080);
				colNameKeyword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5081);
				typeFuncNameKeyword();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5082);
				reservedKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class KeyActionsContext extends ParserRuleContext {
		public KeyUpdateContext keyUpdate() {
			return getRuleContext(KeyUpdateContext.class,0);
		}
		public KeyDeleteContext keyDelete() {
			return getRuleContext(KeyDeleteContext.class,0);
		}
		public KeyActionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyActions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterKeyActions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitKeyActions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitKeyActions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyActionsContext keyActions() throws RecognitionException {
		KeyActionsContext _localctx = new KeyActionsContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_keyActions);
		try {
			setState(5093);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,394,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5085);
				keyUpdate();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5086);
				keyDelete();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5087);
				keyUpdate();
				setState(5088);
				keyDelete();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5090);
				keyDelete();
				setState(5091);
				keyUpdate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class KeyDeleteContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(PostgreSQLStatementParser.DELETE, 0); }
		public KeyActionContext keyAction() {
			return getRuleContext(KeyActionContext.class,0);
		}
		public KeyDeleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyDelete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterKeyDelete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitKeyDelete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitKeyDelete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyDeleteContext keyDelete() throws RecognitionException {
		KeyDeleteContext _localctx = new KeyDeleteContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_keyDelete);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5095);
			match(ON);
			setState(5096);
			match(DELETE);
			setState(5097);
			keyAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class KeyUpdateContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLStatementParser.UPDATE, 0); }
		public KeyActionContext keyAction() {
			return getRuleContext(KeyActionContext.class,0);
		}
		public KeyUpdateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyUpdate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterKeyUpdate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitKeyUpdate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitKeyUpdate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyUpdateContext keyUpdate() throws RecognitionException {
		KeyUpdateContext _localctx = new KeyUpdateContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_keyUpdate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5099);
			match(ON);
			setState(5100);
			match(UPDATE);
			setState(5101);
			keyAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class KeyActionContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(PostgreSQLStatementParser.ACTION, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLStatementParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLStatementParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode NULL() { return getToken(PostgreSQLStatementParser.NULL, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public KeyActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterKeyAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitKeyAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitKeyAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyActionContext keyAction() throws RecognitionException {
		KeyActionContext _localctx = new KeyActionContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_keyAction);
		try {
			setState(5111);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,395,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5103);
				match(NO);
				setState(5104);
				match(ACTION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5105);
				match(RESTRICT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5106);
				match(CASCADE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5107);
				match(SET);
				setState(5108);
				match(NULL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5109);
				match(SET);
				setState(5110);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class KeyMatchContext extends ParserRuleContext {
		public TerminalNode MATCH() { return getToken(PostgreSQLStatementParser.MATCH, 0); }
		public TerminalNode FULL() { return getToken(PostgreSQLStatementParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(PostgreSQLStatementParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(PostgreSQLStatementParser.SIMPLE, 0); }
		public KeyMatchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyMatch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterKeyMatch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitKeyMatch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitKeyMatch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyMatchContext keyMatch() throws RecognitionException {
		KeyMatchContext _localctx = new KeyMatchContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_keyMatch);
		try {
			setState(5119);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,396,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5113);
				match(MATCH);
				setState(5114);
				match(FULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5115);
				match(MATCH);
				setState(5116);
				match(PARTIAL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5117);
				match(MATCH);
				setState(5118);
				match(SIMPLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateGenericOptionsContext extends ParserRuleContext {
		public TerminalNode OPTIONS() { return getToken(PostgreSQLStatementParser.OPTIONS, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public GenericOptionListContext genericOptionList() {
			return getRuleContext(GenericOptionListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public CreateGenericOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createGenericOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateGenericOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateGenericOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateGenericOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateGenericOptionsContext createGenericOptions() throws RecognitionException {
		CreateGenericOptionsContext _localctx = new CreateGenericOptionsContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_createGenericOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5121);
			match(OPTIONS);
			setState(5122);
			match(LP_);
			setState(5123);
			genericOptionList();
			setState(5124);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GenericOptionListContext extends ParserRuleContext {
		public List<GenericOptionElemContext> genericOptionElem() {
			return getRuleContexts(GenericOptionElemContext.class);
		}
		public GenericOptionElemContext genericOptionElem(int i) {
			return getRuleContext(GenericOptionElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public GenericOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterGenericOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitGenericOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitGenericOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericOptionListContext genericOptionList() throws RecognitionException {
		GenericOptionListContext _localctx = new GenericOptionListContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_genericOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5126);
			genericOptionElem();
			setState(5131);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5127);
				match(COMMA_);
				setState(5128);
				genericOptionElem();
				}
				}
				setState(5133);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GenericOptionElemContext extends ParserRuleContext {
		public GenericOptionNameContext genericOptionName() {
			return getRuleContext(GenericOptionNameContext.class,0);
		}
		public GenericOptionArgContext genericOptionArg() {
			return getRuleContext(GenericOptionArgContext.class,0);
		}
		public GenericOptionElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericOptionElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterGenericOptionElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitGenericOptionElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitGenericOptionElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericOptionElemContext genericOptionElem() throws RecognitionException {
		GenericOptionElemContext _localctx = new GenericOptionElemContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_genericOptionElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5134);
			genericOptionName();
			setState(5135);
			genericOptionArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GenericOptionArgContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public GenericOptionArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericOptionArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterGenericOptionArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitGenericOptionArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitGenericOptionArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericOptionArgContext genericOptionArg() throws RecognitionException {
		GenericOptionArgContext _localctx = new GenericOptionArgContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_genericOptionArg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5137);
			match(STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GenericOptionNameContext extends ParserRuleContext {
		public ColLableContext colLable() {
			return getRuleContext(ColLableContext.class,0);
		}
		public GenericOptionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericOptionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterGenericOptionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitGenericOptionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitGenericOptionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericOptionNameContext genericOptionName() throws RecognitionException {
		GenericOptionNameContext _localctx = new GenericOptionNameContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_genericOptionName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5139);
			colLable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReplicaIdentityContext extends ParserRuleContext {
		public TerminalNode NOTHING() { return getToken(PostgreSQLStatementParser.NOTHING, 0); }
		public TerminalNode FULL() { return getToken(PostgreSQLStatementParser.FULL, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLStatementParser.INDEX, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ReplicaIdentityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicaIdentity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterReplicaIdentity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitReplicaIdentity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitReplicaIdentity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplicaIdentityContext replicaIdentity() throws RecognitionException {
		ReplicaIdentityContext _localctx = new ReplicaIdentityContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_replicaIdentity);
		try {
			setState(5147);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOTHING:
				enterOuterAlt(_localctx, 1);
				{
				setState(5141);
				match(NOTHING);
				}
				break;
			case FULL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5142);
				match(FULL);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5143);
				match(DEFAULT);
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 4);
				{
				setState(5144);
				match(USING);
				setState(5145);
				match(INDEX);
				setState(5146);
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OperArgtypesContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public List<TypeNameContext> typeName() {
			return getRuleContexts(TypeNameContext.class);
		}
		public TypeNameContext typeName(int i) {
			return getRuleContext(TypeNameContext.class,i);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode NONE() { return getToken(PostgreSQLStatementParser.NONE, 0); }
		public OperArgtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operArgtypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOperArgtypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOperArgtypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOperArgtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperArgtypesContext operArgtypes() throws RecognitionException {
		OperArgtypesContext _localctx = new OperArgtypesContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_operArgtypes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5149);
			match(LP_);
			setState(5152);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNICODE_ESCAPE:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case INT2:
			case INT4:
			case INT8:
			case FLOAT:
			case FLOAT4:
			case FLOAT8:
			case VARCHAR:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case BIT:
			case XML:
			case JSON:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case IDENTIFIER_:
				{
				setState(5150);
				typeName();
				}
				break;
			case NONE:
				{
				setState(5151);
				match(NONE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5154);
			match(COMMA_);
			setState(5155);
			typeName();
			setState(5156);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FuncArgContext extends ParserRuleContext {
		public ArgClassContext argClass() {
			return getRuleContext(ArgClassContext.class,0);
		}
		public ParamNameContext paramName() {
			return getRuleContext(ParamNameContext.class,0);
		}
		public FuncTypeContext funcType() {
			return getRuleContext(FuncTypeContext.class,0);
		}
		public FuncArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterFuncArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitFuncArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitFuncArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncArgContext funcArg() throws RecognitionException {
		FuncArgContext _localctx = new FuncArgContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_funcArg);
		try {
			setState(5173);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5158);
				argClass();
				setState(5159);
				paramName();
				setState(5160);
				funcType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5162);
				paramName();
				setState(5163);
				argClass();
				setState(5164);
				funcType();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5166);
				paramName();
				setState(5167);
				funcType();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5169);
				argClass();
				setState(5170);
				funcType();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5172);
				funcType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ArgClassContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(PostgreSQLStatementParser.IN, 0); }
		public TerminalNode OUT() { return getToken(PostgreSQLStatementParser.OUT, 0); }
		public TerminalNode INOUT() { return getToken(PostgreSQLStatementParser.INOUT, 0); }
		public TerminalNode VARIADIC() { return getToken(PostgreSQLStatementParser.VARIADIC, 0); }
		public ArgClassContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argClass; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterArgClass(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitArgClass(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitArgClass(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArgClassContext argClass() throws RecognitionException {
		ArgClassContext _localctx = new ArgClassContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_argClass);
		try {
			setState(5181);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,401,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5175);
				match(IN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5176);
				match(OUT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5177);
				match(INOUT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5178);
				match(IN);
				setState(5179);
				match(OUT);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5180);
				match(VARIADIC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FuncArgsListContext extends ParserRuleContext {
		public List<FuncArgContext> funcArg() {
			return getRuleContexts(FuncArgContext.class);
		}
		public FuncArgContext funcArg(int i) {
			return getRuleContext(FuncArgContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public FuncArgsListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcArgsList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterFuncArgsList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitFuncArgsList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitFuncArgsList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncArgsListContext funcArgsList() throws RecognitionException {
		FuncArgsListContext _localctx = new FuncArgsListContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_funcArgsList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5183);
			funcArg();
			setState(5188);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5184);
				match(COMMA_);
				setState(5185);
				funcArg();
				}
				}
				setState(5190);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NonReservedWordOrSconstContext extends ParserRuleContext {
		public NonReservedWordContext nonReservedWord() {
			return getRuleContext(NonReservedWordContext.class,0);
		}
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public NonReservedWordOrSconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonReservedWordOrSconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterNonReservedWordOrSconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitNonReservedWordOrSconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitNonReservedWordOrSconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonReservedWordOrSconstContext nonReservedWordOrSconst() throws RecognitionException {
		NonReservedWordOrSconstContext _localctx = new NonReservedWordOrSconstContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_nonReservedWordOrSconst);
		try {
			setState(5193);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNICODE_ESCAPE:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXISTS:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case BIT:
			case XML:
			case JSON:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case OUT:
			case INOUT:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(5191);
				nonReservedWord();
				}
				break;
			case STRING_:
				enterOuterAlt(_localctx, 2);
				{
				setState(5192);
				match(STRING_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FileNameContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public FileNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fileName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterFileName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitFileName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitFileName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FileNameContext fileName() throws RecognitionException {
		FileNameContext _localctx = new FileNameContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_fileName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5195);
			match(STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RoleListContext extends ParserRuleContext {
		public List<RoleSpecContext> roleSpec() {
			return getRuleContexts(RoleSpecContext.class);
		}
		public RoleSpecContext roleSpec(int i) {
			return getRuleContext(RoleSpecContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public RoleListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterRoleList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitRoleList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitRoleList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleListContext roleList() throws RecognitionException {
		RoleListContext _localctx = new RoleListContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_roleList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5197);
			roleSpec();
			setState(5202);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5198);
				match(COMMA_);
				setState(5199);
				roleSpec();
				}
				}
				setState(5204);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetResetClauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public SetRestContext setRest() {
			return getRuleContext(SetRestContext.class,0);
		}
		public VariableResetStmtContext variableResetStmt() {
			return getRuleContext(VariableResetStmtContext.class,0);
		}
		public SetResetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setResetClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSetResetClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSetResetClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSetResetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetResetClauseContext setResetClause() throws RecognitionException {
		SetResetClauseContext _localctx = new SetResetClauseContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_setResetClause);
		try {
			setState(5208);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(5205);
				match(SET);
				setState(5206);
				setRest();
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 2);
				{
				setState(5207);
				variableResetStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetRestContext extends ParserRuleContext {
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLStatementParser.TRANSACTION, 0); }
		public TransactionModeListContext transactionModeList() {
			return getRuleContext(TransactionModeListContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(PostgreSQLStatementParser.SESSION, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(PostgreSQLStatementParser.CHARACTERISTICS, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public SetRestMoreContext setRestMore() {
			return getRuleContext(SetRestMoreContext.class,0);
		}
		public SetRestContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setRest; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSetRest(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSetRest(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSetRest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetRestContext setRest() throws RecognitionException {
		SetRestContext _localctx = new SetRestContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_setRest);
		try {
			setState(5218);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,406,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5210);
				match(TRANSACTION);
				setState(5211);
				transactionModeList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5212);
				match(SESSION);
				setState(5213);
				match(CHARACTERISTICS);
				setState(5214);
				match(AS);
				setState(5215);
				match(TRANSACTION);
				setState(5216);
				transactionModeList();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5217);
				setRestMore();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransactionModeListContext extends ParserRuleContext {
		public List<TransactionModeItemContext> transactionModeItem() {
			return getRuleContexts(TransactionModeItemContext.class);
		}
		public TransactionModeItemContext transactionModeItem(int i) {
			return getRuleContext(TransactionModeItemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public TransactionModeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionModeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTransactionModeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTransactionModeList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTransactionModeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionModeListContext transactionModeList() throws RecognitionException {
		TransactionModeListContext _localctx = new TransactionModeListContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_transactionModeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5220);
			transactionModeItem();
			setState(5227);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_ || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 268435489L) != 0) || _la==NOT) {
				{
				{
				setState(5222);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_) {
					{
					setState(5221);
					match(COMMA_);
					}
				}

				setState(5224);
				transactionModeItem();
				}
				}
				setState(5229);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransactionModeItemContext extends ParserRuleContext {
		public TerminalNode ISOLATION() { return getToken(PostgreSQLStatementParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLStatementParser.LEVEL, 0); }
		public IsoLevelContext isoLevel() {
			return getRuleContext(IsoLevelContext.class,0);
		}
		public TerminalNode READ() { return getToken(PostgreSQLStatementParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSQLStatementParser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(PostgreSQLStatementParser.WRITE, 0); }
		public TerminalNode DEFERRABLE() { return getToken(PostgreSQLStatementParser.DEFERRABLE, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TransactionModeItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionModeItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTransactionModeItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTransactionModeItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTransactionModeItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionModeItemContext transactionModeItem() throws RecognitionException {
		TransactionModeItemContext _localctx = new TransactionModeItemContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_transactionModeItem);
		try {
			setState(5240);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,409,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5230);
				match(ISOLATION);
				setState(5231);
				match(LEVEL);
				setState(5232);
				isoLevel();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5233);
				match(READ);
				setState(5234);
				match(ONLY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5235);
				match(READ);
				setState(5236);
				match(WRITE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5237);
				match(DEFERRABLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5238);
				match(NOT);
				setState(5239);
				match(DEFERRABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetRestMoreContext extends ParserRuleContext {
		public GenericSetContext genericSet() {
			return getRuleContext(GenericSetContext.class,0);
		}
		public VarNameContext varName() {
			return getRuleContext(VarNameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public TerminalNode CURRENT() { return getToken(PostgreSQLStatementParser.CURRENT, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLStatementParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLStatementParser.ZONE, 0); }
		public ZoneValueContext zoneValue() {
			return getRuleContext(ZoneValueContext.class,0);
		}
		public TerminalNode CATALOG() { return getToken(PostgreSQLStatementParser.CATALOG, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public TerminalNode NAMES() { return getToken(PostgreSQLStatementParser.NAMES, 0); }
		public EncodingContext encoding() {
			return getRuleContext(EncodingContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(PostgreSQLStatementParser.ROLE, 0); }
		public NonReservedWordContext nonReservedWord() {
			return getRuleContext(NonReservedWordContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(PostgreSQLStatementParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLStatementParser.AUTHORIZATION, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public TerminalNode XML() { return getToken(PostgreSQLStatementParser.XML, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLStatementParser.OPTION, 0); }
		public DocumentOrContentContext documentOrContent() {
			return getRuleContext(DocumentOrContentContext.class,0);
		}
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLStatementParser.TRANSACTION, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PostgreSQLStatementParser.SNAPSHOT, 0); }
		public SetRestMoreContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setRestMore; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSetRestMore(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSetRestMore(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSetRestMore(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetRestMoreContext setRestMore() throws RecognitionException {
		SetRestMoreContext _localctx = new SetRestMoreContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_setRestMore);
		int _la;
		try {
			setState(5274);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,411,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5242);
				genericSet();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5243);
				varName(0);
				setState(5244);
				match(FROM);
				setState(5245);
				match(CURRENT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5247);
				match(TIME);
				setState(5248);
				match(ZONE);
				setState(5249);
				zoneValue();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5250);
				match(CATALOG);
				setState(5251);
				match(STRING_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5252);
				match(SCHEMA);
				setState(5253);
				match(STRING_);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5254);
				match(NAMES);
				setState(5256);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT || _la==STRING_) {
					{
					setState(5255);
					encoding();
					}
				}

				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5258);
				match(ROLE);
				setState(5259);
				nonReservedWord();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5260);
				match(STRING_);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5261);
				match(SESSION);
				setState(5262);
				match(AUTHORIZATION);
				setState(5263);
				nonReservedWord();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5264);
				match(STRING_);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5265);
				match(SESSION);
				setState(5266);
				match(AUTHORIZATION);
				setState(5267);
				match(DEFAULT);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5268);
				match(XML);
				setState(5269);
				match(OPTION);
				setState(5270);
				documentOrContent();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5271);
				match(TRANSACTION);
				setState(5272);
				match(SNAPSHOT);
				setState(5273);
				match(STRING_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EncodingContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public EncodingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_encoding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterEncoding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitEncoding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitEncoding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EncodingContext encoding() throws RecognitionException {
		EncodingContext _localctx = new EncodingContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_encoding);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5276);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==STRING_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GenericSetContext extends ParserRuleContext {
		public VarNameContext varName() {
			return getRuleContext(VarNameContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(PostgreSQLStatementParser.EQ_, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public VarListContext varList() {
			return getRuleContext(VarListContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public GenericSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterGenericSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitGenericSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitGenericSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericSetContext genericSet() throws RecognitionException {
		GenericSetContext _localctx = new GenericSetContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_genericSet);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5278);
			varName(0);
			setState(5279);
			_la = _input.LA(1);
			if ( !(_la==EQ_ || _la==TO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5282);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PLUS_:
			case MINUS_:
			case UNICODE_ESCAPE:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXISTS:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case BIT:
			case XML:
			case JSON:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case OUT:
			case INOUT:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case ON:
			case IF:
			case IS:
			case TRUE:
			case FALSE:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
				{
				setState(5280);
				varList();
				}
				break;
			case DEFAULT:
				{
				setState(5281);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VariableResetStmtContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(PostgreSQLStatementParser.RESET, 0); }
		public ResetRestContext resetRest() {
			return getRuleContext(ResetRestContext.class,0);
		}
		public VariableResetStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableResetStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterVariableResetStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitVariableResetStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitVariableResetStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableResetStmtContext variableResetStmt() throws RecognitionException {
		VariableResetStmtContext _localctx = new VariableResetStmtContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_variableResetStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5284);
			match(RESET);
			setState(5285);
			resetRest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ResetRestContext extends ParserRuleContext {
		public GenericResetContext genericReset() {
			return getRuleContext(GenericResetContext.class,0);
		}
		public TerminalNode TIME() { return getToken(PostgreSQLStatementParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLStatementParser.ZONE, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLStatementParser.TRANSACTION, 0); }
		public TerminalNode ISOLATION() { return getToken(PostgreSQLStatementParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLStatementParser.LEVEL, 0); }
		public TerminalNode SESSION() { return getToken(PostgreSQLStatementParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLStatementParser.AUTHORIZATION, 0); }
		public ResetRestContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetRest; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterResetRest(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitResetRest(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitResetRest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetRestContext resetRest() throws RecognitionException {
		ResetRestContext _localctx = new ResetRestContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_resetRest);
		try {
			setState(5295);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,413,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5287);
				genericReset();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5288);
				match(TIME);
				setState(5289);
				match(ZONE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5290);
				match(TRANSACTION);
				setState(5291);
				match(ISOLATION);
				setState(5292);
				match(LEVEL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5293);
				match(SESSION);
				setState(5294);
				match(AUTHORIZATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GenericResetContext extends ParserRuleContext {
		public VarNameContext varName() {
			return getRuleContext(VarNameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public GenericResetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericReset; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterGenericReset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitGenericReset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitGenericReset(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericResetContext genericReset() throws RecognitionException {
		GenericResetContext _localctx = new GenericResetContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_genericReset);
		try {
			setState(5299);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNICODE_ESCAPE:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case XML:
			case JSON:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case PARAM:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case NATIONAL:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(5297);
				varName(0);
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5298);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RelationExprListContext extends ParserRuleContext {
		public List<RelationExprContext> relationExpr() {
			return getRuleContexts(RelationExprContext.class);
		}
		public RelationExprContext relationExpr(int i) {
			return getRuleContext(RelationExprContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public RelationExprListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relationExprList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterRelationExprList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitRelationExprList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitRelationExprList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RelationExprListContext relationExprList() throws RecognitionException {
		RelationExprListContext _localctx = new RelationExprListContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_relationExprList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5301);
			relationExpr();
			setState(5306);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5302);
				match(COMMA_);
				setState(5303);
				relationExpr();
				}
				}
				setState(5308);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CommonFuncOptItemContext extends ParserRuleContext {
		public TerminalNode CALLED() { return getToken(PostgreSQLStatementParser.CALLED, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public List<TerminalNode> NULL() { return getTokens(PostgreSQLStatementParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(PostgreSQLStatementParser.NULL, i);
		}
		public TerminalNode INPUT() { return getToken(PostgreSQLStatementParser.INPUT, 0); }
		public TerminalNode RETURNS() { return getToken(PostgreSQLStatementParser.RETURNS, 0); }
		public TerminalNode STRICT() { return getToken(PostgreSQLStatementParser.STRICT, 0); }
		public TerminalNode IMMUTABLE() { return getToken(PostgreSQLStatementParser.IMMUTABLE, 0); }
		public TerminalNode STABLE() { return getToken(PostgreSQLStatementParser.STABLE, 0); }
		public TerminalNode VOLATILE() { return getToken(PostgreSQLStatementParser.VOLATILE, 0); }
		public TerminalNode EXTERNAL() { return getToken(PostgreSQLStatementParser.EXTERNAL, 0); }
		public TerminalNode SECURITY() { return getToken(PostgreSQLStatementParser.SECURITY, 0); }
		public TerminalNode DEFINER() { return getToken(PostgreSQLStatementParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(PostgreSQLStatementParser.INVOKER, 0); }
		public TerminalNode LEAKPROOF() { return getToken(PostgreSQLStatementParser.LEAKPROOF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode COST() { return getToken(PostgreSQLStatementParser.COST, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(PostgreSQLStatementParser.ROWS, 0); }
		public TerminalNode SUPPORT() { return getToken(PostgreSQLStatementParser.SUPPORT, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public FunctionSetResetClauseContext functionSetResetClause() {
			return getRuleContext(FunctionSetResetClauseContext.class,0);
		}
		public TerminalNode PARALLEL() { return getToken(PostgreSQLStatementParser.PARALLEL, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public CommonFuncOptItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commonFuncOptItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCommonFuncOptItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCommonFuncOptItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCommonFuncOptItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommonFuncOptItemContext commonFuncOptItem() throws RecognitionException {
		CommonFuncOptItemContext _localctx = new CommonFuncOptItemContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_commonFuncOptItem);
		try {
			setState(5344);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,416,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5309);
				match(CALLED);
				setState(5310);
				match(ON);
				setState(5311);
				match(NULL);
				setState(5312);
				match(INPUT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5313);
				match(RETURNS);
				setState(5314);
				match(NULL);
				setState(5315);
				match(ON);
				setState(5316);
				match(NULL);
				setState(5317);
				match(INPUT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5318);
				match(STRICT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5319);
				match(IMMUTABLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5320);
				match(STABLE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5321);
				match(VOLATILE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5322);
				match(EXTERNAL);
				setState(5323);
				match(SECURITY);
				setState(5324);
				match(DEFINER);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5325);
				match(EXTERNAL);
				setState(5326);
				match(SECURITY);
				setState(5327);
				match(INVOKER);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5328);
				match(SECURITY);
				setState(5329);
				match(DEFINER);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5330);
				match(SECURITY);
				setState(5331);
				match(INVOKER);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5332);
				match(LEAKPROOF);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5333);
				match(NOT);
				setState(5334);
				match(LEAKPROOF);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5335);
				match(COST);
				setState(5336);
				numericOnly();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5337);
				match(ROWS);
				setState(5338);
				numericOnly();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5339);
				match(SUPPORT);
				setState(5340);
				anyName();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5341);
				functionSetResetClause();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(5342);
				match(PARALLEL);
				setState(5343);
				colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionSetResetClauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public SetRestMoreContext setRestMore() {
			return getRuleContext(SetRestMoreContext.class,0);
		}
		public VariableResetStmtContext variableResetStmt() {
			return getRuleContext(VariableResetStmtContext.class,0);
		}
		public FunctionSetResetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionSetResetClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterFunctionSetResetClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitFunctionSetResetClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitFunctionSetResetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionSetResetClauseContext functionSetResetClause() throws RecognitionException {
		FunctionSetResetClauseContext _localctx = new FunctionSetResetClauseContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_functionSetResetClause);
		try {
			setState(5349);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(5346);
				match(SET);
				setState(5347);
				setRestMore();
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 2);
				{
				setState(5348);
				variableResetStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RowSecurityCmdContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TerminalNode SELECT() { return getToken(PostgreSQLStatementParser.SELECT, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLStatementParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLStatementParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(PostgreSQLStatementParser.DELETE, 0); }
		public RowSecurityCmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowSecurityCmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterRowSecurityCmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitRowSecurityCmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitRowSecurityCmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowSecurityCmdContext rowSecurityCmd() throws RecognitionException {
		RowSecurityCmdContext _localctx = new RowSecurityCmdContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_rowSecurityCmd);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5351);
			_la = _input.LA(1);
			if ( !(((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & 15L) != 0) || _la==ALL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EventContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PostgreSQLStatementParser.SELECT, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLStatementParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(PostgreSQLStatementParser.DELETE, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLStatementParser.INSERT, 0); }
		public EventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EventContext event() throws RecognitionException {
		EventContext _localctx = new EventContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_event);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5353);
			_la = _input.LA(1);
			if ( !(((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & 15L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TypeNameListContext extends ParserRuleContext {
		public List<TypeNameContext> typeName() {
			return getRuleContexts(TypeNameContext.class);
		}
		public TypeNameContext typeName(int i) {
			return getRuleContext(TypeNameContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public TypeNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeNameList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTypeNameList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTypeNameList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTypeNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeNameListContext typeNameList() throws RecognitionException {
		TypeNameListContext _localctx = new TypeNameListContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_typeNameList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5355);
			typeName();
			setState(5360);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5356);
				match(COMMA_);
				setState(5357);
				typeName();
				}
				}
				setState(5362);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IfNotExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifNotExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterIfNotExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitIfNotExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitIfNotExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfNotExistsContext ifNotExists() throws RecognitionException {
		IfNotExistsContext _localctx = new IfNotExistsContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_ifNotExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5363);
			match(IF);
			setState(5364);
			match(NOT);
			setState(5365);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IfExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterIfExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitIfExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitIfExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfExistsContext ifExists() throws RecognitionException {
		IfExistsContext _localctx = new IfExistsContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_ifExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5367);
			match(IF);
			setState(5368);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BooleanValueContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(PostgreSQLStatementParser.TRUE, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public TerminalNode FALSE() { return getToken(PostgreSQLStatementParser.FALSE, 0); }
		public TerminalNode OFF() { return getToken(PostgreSQLStatementParser.OFF, 0); }
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public BooleanValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterBooleanValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitBooleanValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitBooleanValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanValueContext booleanValue() throws RecognitionException {
		BooleanValueContext _localctx = new BooleanValueContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_booleanValue);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5370);
			_la = _input.LA(1);
			if ( !(_la==OFF || ((((_la - 485)) & ~0x3f) == 0 && ((1L << (_la - 485)) & 6145L) != 0) || _la==NUMBER_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HostVariableContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode COLON_() { return getToken(PostgreSQLStatementParser.COLON_, 0); }
		public HostVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hostVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterHostVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitHostVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitHostVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HostVariableContext hostVariable() throws RecognitionException {
		HostVariableContext _localctx = new HostVariableContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_hostVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5373);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLON_) {
				{
				setState(5372);
				match(COLON_);
				}
			}

			setState(5375);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GrantContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(PostgreSQLStatementParser.GRANT, 0); }
		public PrivilegeClauseContext privilegeClause() {
			return getRuleContext(PrivilegeClauseContext.class,0);
		}
		public RoleClauseContext roleClause() {
			return getRuleContext(RoleClauseContext.class,0);
		}
		public GrantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterGrant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitGrant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitGrant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantContext grant() throws RecognitionException {
		GrantContext _localctx = new GrantContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_grant);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5377);
			match(GRANT);
			setState(5380);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,420,_ctx) ) {
			case 1:
				{
				setState(5378);
				privilegeClause();
				}
				break;
			case 2:
				{
				setState(5379);
				roleClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RevokeContext extends ParserRuleContext {
		public TerminalNode REVOKE() { return getToken(PostgreSQLStatementParser.REVOKE, 0); }
		public PrivilegeClauseContext privilegeClause() {
			return getRuleContext(PrivilegeClauseContext.class,0);
		}
		public RoleClauseContext roleClause() {
			return getRuleContext(RoleClauseContext.class,0);
		}
		public OptionForClauseContext optionForClause() {
			return getRuleContext(OptionForClauseContext.class,0);
		}
		public TerminalNode CASCADE() { return getToken(PostgreSQLStatementParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLStatementParser.RESTRICT, 0); }
		public RevokeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterRevoke(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitRevoke(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitRevoke(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeContext revoke() throws RecognitionException {
		RevokeContext _localctx = new RevokeContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_revoke);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5382);
			match(REVOKE);
			setState(5384);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,421,_ctx) ) {
			case 1:
				{
				setState(5383);
				optionForClause();
				}
				break;
			}
			setState(5388);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,422,_ctx) ) {
			case 1:
				{
				setState(5386);
				privilegeClause();
				}
				break;
			case 2:
				{
				setState(5387);
				roleClause();
				}
				break;
			}
			setState(5391);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5390);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptionForClauseContext extends ParserRuleContext {
		public TerminalNode OPTION() { return getToken(PostgreSQLStatementParser.OPTION, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public TerminalNode GRANT() { return getToken(PostgreSQLStatementParser.GRANT, 0); }
		public TerminalNode ADMIN() { return getToken(PostgreSQLStatementParser.ADMIN, 0); }
		public OptionForClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionForClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOptionForClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOptionForClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOptionForClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptionForClauseContext optionForClause() throws RecognitionException {
		OptionForClauseContext _localctx = new OptionForClauseContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_optionForClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5393);
			_la = _input.LA(1);
			if ( !(_la==ADMIN || _la==GRANT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5394);
			match(OPTION);
			setState(5395);
			match(FOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateUserContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLStatementParser.USER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public List<CreateOptRoleElemContext> createOptRoleElem() {
			return getRuleContexts(CreateOptRoleElemContext.class);
		}
		public CreateOptRoleElemContext createOptRoleElem(int i) {
			return getRuleContext(CreateOptRoleElemContext.class,i);
		}
		public CreateUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserContext createUser() throws RecognitionException {
		CreateUserContext _localctx = new CreateUserContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_createUser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5397);
			match(CREATE);
			setState(5398);
			match(USER);
			setState(5399);
			roleSpec();
			setState(5401);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5400);
				match(WITH);
				}
			}

			setState(5406);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & -1702369491930841087L) != 0) || ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & -36028934466307075L) != 0) || ((((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & 283126353889277L) != 0) || ((((_la - 241)) & ~0x3f) == 0 && ((1L << (_la - 241)) & -545622264849L) != 0) || ((((_la - 305)) & ~0x3f) == 0 && ((1L << (_la - 305)) & -1L) != 0) || ((((_la - 369)) & ~0x3f) == 0 && ((1L << (_la - 369)) & 9222256032552583167L) != 0) || ((((_la - 437)) & ~0x3f) == 0 && ((1L << (_la - 437)) & 4612248968444305143L) != 0) || ((((_la - 505)) & ~0x3f) == 0 && ((1L << (_la - 505)) & 7138750043982826433L) != 0) || ((((_la - 569)) & ~0x3f) == 0 && ((1L << (_la - 569)) & 2173569L) != 0)) {
				{
				{
				setState(5403);
				createOptRoleElem();
				}
				}
				setState(5408);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateOptRoleElemContext extends ParserRuleContext {
		public AlterOptRoleElemContext alterOptRoleElem() {
			return getRuleContext(AlterOptRoleElemContext.class,0);
		}
		public TerminalNode SYSID() { return getToken(PostgreSQLStatementParser.SYSID, 0); }
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public TerminalNode ADMIN() { return getToken(PostgreSQLStatementParser.ADMIN, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(PostgreSQLStatementParser.ROLE, 0); }
		public TerminalNode IN() { return getToken(PostgreSQLStatementParser.IN, 0); }
		public TerminalNode GROUP() { return getToken(PostgreSQLStatementParser.GROUP, 0); }
		public CreateOptRoleElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOptRoleElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateOptRoleElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateOptRoleElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateOptRoleElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOptRoleElemContext createOptRoleElem() throws RecognitionException {
		CreateOptRoleElemContext _localctx = new CreateOptRoleElemContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_createOptRoleElem);
		try {
			setState(5422);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,426,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5409);
				alterOptRoleElem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5410);
				match(SYSID);
				setState(5411);
				match(NUMBER_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5412);
				match(ADMIN);
				setState(5413);
				roleList();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5414);
				match(ROLE);
				setState(5415);
				roleList();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5416);
				match(IN);
				setState(5417);
				match(ROLE);
				setState(5418);
				roleList();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5419);
				match(IN);
				setState(5420);
				match(GROUP);
				setState(5421);
				roleList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterOptRoleElemContext extends ParserRuleContext {
		public TerminalNode PASSWORD() { return getToken(PostgreSQLStatementParser.PASSWORD, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public TerminalNode NULL() { return getToken(PostgreSQLStatementParser.NULL, 0); }
		public TerminalNode ENCRYPTED() { return getToken(PostgreSQLStatementParser.ENCRYPTED, 0); }
		public TerminalNode UNENCRYPTED() { return getToken(PostgreSQLStatementParser.UNENCRYPTED, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLStatementParser.INHERIT, 0); }
		public TerminalNode CONNECTION() { return getToken(PostgreSQLStatementParser.CONNECTION, 0); }
		public TerminalNode LIMIT() { return getToken(PostgreSQLStatementParser.LIMIT, 0); }
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public TerminalNode VALID() { return getToken(PostgreSQLStatementParser.VALID, 0); }
		public TerminalNode UNTIL() { return getToken(PostgreSQLStatementParser.UNTIL, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLStatementParser.USER, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode SUPERUSER() { return getToken(PostgreSQLStatementParser.SUPERUSER, 0); }
		public TerminalNode NOSUPERUSER() { return getToken(PostgreSQLStatementParser.NOSUPERUSER, 0); }
		public TerminalNode CREATEDB() { return getToken(PostgreSQLStatementParser.CREATEDB, 0); }
		public TerminalNode NOCREATEDB() { return getToken(PostgreSQLStatementParser.NOCREATEDB, 0); }
		public TerminalNode CREATEROLE() { return getToken(PostgreSQLStatementParser.CREATEROLE, 0); }
		public TerminalNode NOCREATEROLE() { return getToken(PostgreSQLStatementParser.NOCREATEROLE, 0); }
		public TerminalNode NOINHERIT() { return getToken(PostgreSQLStatementParser.NOINHERIT, 0); }
		public TerminalNode LOGIN() { return getToken(PostgreSQLStatementParser.LOGIN, 0); }
		public TerminalNode NOLOGIN() { return getToken(PostgreSQLStatementParser.NOLOGIN, 0); }
		public TerminalNode REPLICATION() { return getToken(PostgreSQLStatementParser.REPLICATION, 0); }
		public TerminalNode NOREPLICATION() { return getToken(PostgreSQLStatementParser.NOREPLICATION, 0); }
		public TerminalNode BYPASSRLS() { return getToken(PostgreSQLStatementParser.BYPASSRLS, 0); }
		public TerminalNode NOBYPASSRLS() { return getToken(PostgreSQLStatementParser.NOBYPASSRLS, 0); }
		public AlterOptRoleElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOptRoleElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterOptRoleElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterOptRoleElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterOptRoleElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOptRoleElemContext alterOptRoleElem() throws RecognitionException {
		AlterOptRoleElemContext _localctx = new AlterOptRoleElemContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_alterOptRoleElem);
		try {
			setState(5458);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,427,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5424);
				match(PASSWORD);
				setState(5425);
				match(STRING_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5426);
				match(PASSWORD);
				setState(5427);
				match(NULL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5428);
				match(ENCRYPTED);
				setState(5429);
				match(PASSWORD);
				setState(5430);
				match(STRING_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5431);
				match(UNENCRYPTED);
				setState(5432);
				match(PASSWORD);
				setState(5433);
				match(STRING_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5434);
				match(INHERIT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5435);
				match(CONNECTION);
				setState(5436);
				match(LIMIT);
				setState(5437);
				signedIconst();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5438);
				match(VALID);
				setState(5439);
				match(UNTIL);
				setState(5440);
				match(STRING_);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5441);
				match(USER);
				setState(5442);
				roleList();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5443);
				identifier();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5444);
				match(SUPERUSER);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5445);
				match(NOSUPERUSER);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5446);
				match(CREATEDB);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5447);
				match(NOCREATEDB);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5448);
				match(CREATEROLE);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5449);
				match(NOCREATEROLE);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5450);
				match(INHERIT);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(5451);
				match(NOINHERIT);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(5452);
				match(LOGIN);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(5453);
				match(NOLOGIN);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(5454);
				match(REPLICATION);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(5455);
				match(NOREPLICATION);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(5456);
				match(BYPASSRLS);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(5457);
				match(NOBYPASSRLS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropUserContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLStatementParser.USER, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropUserContext dropUser() throws RecognitionException {
		DropUserContext _localctx = new DropUserContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_dropUser);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5460);
			match(DROP);
			setState(5461);
			match(USER);
			setState(5463);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,428,_ctx) ) {
			case 1:
				{
				setState(5462);
				ifExists();
				}
				break;
			}
			setState(5465);
			roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterUserContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLStatementParser.USER, 0); }
		public AlterUserClausesContext alterUserClauses() {
			return getRuleContext(AlterUserClausesContext.class,0);
		}
		public AlterUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserContext alterUser() throws RecognitionException {
		AlterUserContext _localctx = new AlterUserContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_alterUser);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5467);
			match(ALTER);
			setState(5468);
			match(USER);
			setState(5469);
			alterUserClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterUserClausesContext extends ParserRuleContext {
		public List<RoleSpecContext> roleSpec() {
			return getRuleContexts(RoleSpecContext.class);
		}
		public RoleSpecContext roleSpec(int i) {
			return getRuleContext(RoleSpecContext.class,i);
		}
		public AlterOptRoleListContext alterOptRoleList() {
			return getRuleContext(AlterOptRoleListContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public SetResetClauseContext setResetClause() {
			return getRuleContext(SetResetClauseContext.class,0);
		}
		public TerminalNode IN() { return getToken(PostgreSQLStatementParser.IN, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLStatementParser.DATABASE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public AlterUserClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUserClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterUserClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterUserClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterUserClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserClausesContext alterUserClauses() throws RecognitionException {
		AlterUserClausesContext _localctx = new AlterUserClausesContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_alterUserClauses);
		int _la;
		try {
			setState(5497);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,432,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5471);
				roleSpec();
				setState(5473);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(5472);
					match(WITH);
					}
				}

				setState(5475);
				alterOptRoleList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5477);
				roleSpec();
				setState(5481);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(5478);
					match(IN);
					setState(5479);
					match(DATABASE);
					setState(5480);
					name();
					}
				}

				setState(5483);
				setResetClause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5485);
				match(ALL);
				setState(5489);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(5486);
					match(IN);
					setState(5487);
					match(DATABASE);
					setState(5488);
					name();
					}
				}

				setState(5491);
				setResetClause();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5492);
				roleSpec();
				setState(5493);
				match(RENAME);
				setState(5494);
				match(TO);
				setState(5495);
				roleSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterOptRoleListContext extends ParserRuleContext {
		public List<AlterOptRoleElemContext> alterOptRoleElem() {
			return getRuleContexts(AlterOptRoleElemContext.class);
		}
		public AlterOptRoleElemContext alterOptRoleElem(int i) {
			return getRuleContext(AlterOptRoleElemContext.class,i);
		}
		public AlterOptRoleListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOptRoleList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterOptRoleList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterOptRoleList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterOptRoleList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOptRoleListContext alterOptRoleList() throws RecognitionException {
		AlterOptRoleListContext _localctx = new AlterOptRoleListContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_alterOptRoleList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5502);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & -1702369491930841087L) != 0) || ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & -36028934466307075L) != 0) || ((((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & 283126353889277L) != 0) || ((((_la - 241)) & ~0x3f) == 0 && ((1L << (_la - 241)) & -545622264849L) != 0) || ((((_la - 305)) & ~0x3f) == 0 && ((1L << (_la - 305)) & -1L) != 0) || ((((_la - 369)) & ~0x3f) == 0 && ((1L << (_la - 369)) & 9222256032552583167L) != 0) || ((((_la - 437)) & ~0x3f) == 0 && ((1L << (_la - 437)) & 562950016917239L) != 0) || ((((_la - 505)) & ~0x3f) == 0 && ((1L << (_la - 505)) & 7138750043982826433L) != 0) || ((((_la - 569)) & ~0x3f) == 0 && ((1L << (_la - 569)) & 2173569L) != 0)) {
				{
				{
				setState(5499);
				alterOptRoleElem();
				}
				}
				setState(5504);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateRoleContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLStatementParser.ROLE, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public List<CreateOptRoleElemContext> createOptRoleElem() {
			return getRuleContexts(CreateOptRoleElemContext.class);
		}
		public CreateOptRoleElemContext createOptRoleElem(int i) {
			return getRuleContext(CreateOptRoleElemContext.class,i);
		}
		public CreateRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createRole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateRole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateRole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateRoleContext createRole() throws RecognitionException {
		CreateRoleContext _localctx = new CreateRoleContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_createRole);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5505);
			match(CREATE);
			setState(5506);
			match(ROLE);
			setState(5507);
			roleSpec();
			setState(5509);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5508);
				match(WITH);
				}
			}

			setState(5514);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & -1702369491930841087L) != 0) || ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & -36028934466307075L) != 0) || ((((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & 283126353889277L) != 0) || ((((_la - 241)) & ~0x3f) == 0 && ((1L << (_la - 241)) & -545622264849L) != 0) || ((((_la - 305)) & ~0x3f) == 0 && ((1L << (_la - 305)) & -1L) != 0) || ((((_la - 369)) & ~0x3f) == 0 && ((1L << (_la - 369)) & 9222256032552583167L) != 0) || ((((_la - 437)) & ~0x3f) == 0 && ((1L << (_la - 437)) & 4612248968444305143L) != 0) || ((((_la - 505)) & ~0x3f) == 0 && ((1L << (_la - 505)) & 7138750043982826433L) != 0) || ((((_la - 569)) & ~0x3f) == 0 && ((1L << (_la - 569)) & 2173569L) != 0)) {
				{
				{
				setState(5511);
				createOptRoleElem();
				}
				}
				setState(5516);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropRoleContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLStatementParser.ROLE, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropRole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropRole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropRole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropRoleContext dropRole() throws RecognitionException {
		DropRoleContext _localctx = new DropRoleContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_dropRole);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5517);
			match(DROP);
			setState(5518);
			match(ROLE);
			setState(5520);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,436,_ctx) ) {
			case 1:
				{
				setState(5519);
				ifExists();
				}
				break;
			}
			setState(5522);
			roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterRoleContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLStatementParser.ROLE, 0); }
		public AlterUserClausesContext alterUserClauses() {
			return getRuleContext(AlterUserClausesContext.class,0);
		}
		public AlterRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterRole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterRole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterRole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterRoleContext alterRole() throws RecognitionException {
		AlterRoleContext _localctx = new AlterRoleContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_alterRole);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5524);
			match(ALTER);
			setState(5525);
			match(ROLE);
			setState(5526);
			alterUserClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateGroupContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode GROUP() { return getToken(PostgreSQLStatementParser.GROUP, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public List<CreateOptRoleElemContext> createOptRoleElem() {
			return getRuleContexts(CreateOptRoleElemContext.class);
		}
		public CreateOptRoleElemContext createOptRoleElem(int i) {
			return getRuleContext(CreateOptRoleElemContext.class,i);
		}
		public CreateGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateGroupContext createGroup() throws RecognitionException {
		CreateGroupContext _localctx = new CreateGroupContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_createGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5528);
			match(CREATE);
			setState(5529);
			match(GROUP);
			setState(5530);
			roleSpec();
			setState(5532);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5531);
				match(WITH);
				}
			}

			setState(5537);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & -1702369491930841087L) != 0) || ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & -36028934466307075L) != 0) || ((((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & 283126353889277L) != 0) || ((((_la - 241)) & ~0x3f) == 0 && ((1L << (_la - 241)) & -545622264849L) != 0) || ((((_la - 305)) & ~0x3f) == 0 && ((1L << (_la - 305)) & -1L) != 0) || ((((_la - 369)) & ~0x3f) == 0 && ((1L << (_la - 369)) & 9222256032552583167L) != 0) || ((((_la - 437)) & ~0x3f) == 0 && ((1L << (_la - 437)) & 4612248968444305143L) != 0) || ((((_la - 505)) & ~0x3f) == 0 && ((1L << (_la - 505)) & 7138750043982826433L) != 0) || ((((_la - 569)) & ~0x3f) == 0 && ((1L << (_la - 569)) & 2173569L) != 0)) {
				{
				{
				setState(5534);
				createOptRoleElem();
				}
				}
				setState(5539);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReassignOwnedContext extends ParserRuleContext {
		public TerminalNode REASSIGN() { return getToken(PostgreSQLStatementParser.REASSIGN, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLStatementParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public ReassignOwnedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reassignOwned; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterReassignOwned(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitReassignOwned(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitReassignOwned(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReassignOwnedContext reassignOwned() throws RecognitionException {
		ReassignOwnedContext _localctx = new ReassignOwnedContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_reassignOwned);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5540);
			match(REASSIGN);
			setState(5541);
			match(OWNED);
			setState(5542);
			match(BY);
			setState(5543);
			roleList();
			setState(5544);
			match(TO);
			setState(5545);
			roleSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropDroupContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode GROUP() { return getToken(PostgreSQLStatementParser.GROUP, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropDroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropDroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropDroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropDroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropDroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropDroupContext dropDroup() throws RecognitionException {
		DropDroupContext _localctx = new DropDroupContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_dropDroup);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5547);
			match(DROP);
			setState(5548);
			match(GROUP);
			setState(5550);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
			case 1:
				{
				setState(5549);
				ifExists();
				}
				break;
			}
			setState(5552);
			roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateTableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public CreateTableSpecificationContext createTableSpecification() {
			return getRuleContext(CreateTableSpecificationContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public InheritClauseContext inheritClause() {
			return getRuleContext(InheritClauseContext.class,0);
		}
		public CreateDefinitionClauseContext createDefinitionClause() {
			return getRuleContext(CreateDefinitionClauseContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public TableAccessMethodClauseContext tableAccessMethodClause() {
			return getRuleContext(TableAccessMethodClauseContext.class,0);
		}
		public WithOptionContext withOption() {
			return getRuleContext(WithOptionContext.class,0);
		}
		public OnCommitOptionContext onCommitOption() {
			return getRuleContext(OnCommitOptionContext.class,0);
		}
		public TableSpaceContext tableSpace() {
			return getRuleContext(TableSpaceContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(PostgreSQLStatementParser.EXECUTE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ExecuteParamClauseContext executeParamClause() {
			return getRuleContext(ExecuteParamClauseContext.class,0);
		}
		public TerminalNode OF() { return getToken(PostgreSQLStatementParser.OF, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(PostgreSQLStatementParser.PARTITION, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public PartitionBoundSpecContext partitionBoundSpec() {
			return getRuleContext(PartitionBoundSpecContext.class,0);
		}
		public List<WithDataContext> withData() {
			return getRuleContexts(WithDataContext.class);
		}
		public WithDataContext withData(int i) {
			return getRuleContext(WithDataContext.class,i);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TypedTableElementListContext typedTableElementList() {
			return getRuleContext(TypedTableElementListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public CreateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableContext createTable() throws RecognitionException {
		CreateTableContext _localctx = new CreateTableContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_createTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5554);
			match(CREATE);
			setState(5555);
			createTableSpecification();
			setState(5556);
			match(TABLE);
			setState(5558);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,440,_ctx) ) {
			case 1:
				{
				setState(5557);
				ifNotExists();
				}
				break;
			}
			setState(5560);
			tableName();
			setState(5581);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LP_:
				{
				setState(5561);
				createDefinitionClause();
				}
				break;
			case OF:
				{
				{
				setState(5562);
				match(OF);
				setState(5563);
				anyName();
				setState(5568);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(5564);
					match(LP_);
					setState(5565);
					typedTableElementList();
					setState(5566);
					match(RP_);
					}
				}

				}
				}
				break;
			case PARTITION:
				{
				{
				setState(5570);
				match(PARTITION);
				setState(5571);
				match(OF);
				setState(5572);
				qualifiedName();
				setState(5577);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(5573);
					match(LP_);
					setState(5574);
					typedTableElementList();
					setState(5575);
					match(RP_);
					}
				}

				setState(5579);
				partitionBoundSpec();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5583);
			inheritClause();
			setState(5585);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(5584);
				partitionSpec();
				}
			}

			setState(5588);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(5587);
				tableAccessMethodClause();
				}
			}

			setState(5591);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITHOUT || _la==WITH) {
				{
				setState(5590);
				withOption();
				}
			}

			setState(5594);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(5593);
				onCommitOption();
				}
			}

			setState(5597);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(5596);
				tableSpace();
				}
			}

			setState(5604);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(5599);
				match(AS);
				setState(5600);
				select();
				setState(5602);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(5601);
					withData();
					}
				}

				}
			}

			setState(5612);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXECUTE) {
				{
				setState(5606);
				match(EXECUTE);
				setState(5607);
				name();
				setState(5608);
				executeParamClause();
				setState(5610);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(5609);
					withData();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExecuteParamClauseContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public ExecuteParamClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeParamClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterExecuteParamClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitExecuteParamClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitExecuteParamClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteParamClauseContext executeParamClause() throws RecognitionException {
		ExecuteParamClauseContext _localctx = new ExecuteParamClauseContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_executeParamClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5614);
			match(LP_);
			setState(5615);
			exprList(0);
			setState(5616);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionBoundSpecContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public TerminalNode VALUES() { return getToken(PostgreSQLStatementParser.VALUES, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public List<TerminalNode> LP_() { return getTokens(PostgreSQLStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(PostgreSQLStatementParser.LP_, i);
		}
		public HashPartboundContext hashPartbound() {
			return getRuleContext(HashPartboundContext.class,0);
		}
		public List<TerminalNode> RP_() { return getTokens(PostgreSQLStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(PostgreSQLStatementParser.RP_, i);
		}
		public TerminalNode IN() { return getToken(PostgreSQLStatementParser.IN, 0); }
		public List<ExprListContext> exprList() {
			return getRuleContexts(ExprListContext.class);
		}
		public ExprListContext exprList(int i) {
			return getRuleContext(ExprListContext.class,i);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public PartitionBoundSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionBoundSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterPartitionBoundSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitPartitionBoundSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitPartitionBoundSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionBoundSpecContext partitionBoundSpec() throws RecognitionException {
		PartitionBoundSpecContext _localctx = new PartitionBoundSpecContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_partitionBoundSpec);
		try {
			setState(5644);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,453,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5618);
				match(FOR);
				setState(5619);
				match(VALUES);
				setState(5620);
				match(WITH);
				setState(5621);
				match(LP_);
				setState(5622);
				hashPartbound();
				setState(5623);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5625);
				match(FOR);
				setState(5626);
				match(VALUES);
				setState(5627);
				match(IN);
				setState(5628);
				match(LP_);
				setState(5629);
				exprList(0);
				setState(5630);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5632);
				match(FOR);
				setState(5633);
				match(VALUES);
				setState(5634);
				match(FROM);
				setState(5635);
				match(LP_);
				setState(5636);
				exprList(0);
				setState(5637);
				match(RP_);
				setState(5638);
				match(TO);
				setState(5639);
				match(LP_);
				setState(5640);
				exprList(0);
				setState(5641);
				match(RP_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5643);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HashPartboundContext extends ParserRuleContext {
		public List<HashPartboundElemContext> hashPartboundElem() {
			return getRuleContexts(HashPartboundElemContext.class);
		}
		public HashPartboundElemContext hashPartboundElem(int i) {
			return getRuleContext(HashPartboundElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public HashPartboundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hashPartbound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterHashPartbound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitHashPartbound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitHashPartbound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HashPartboundContext hashPartbound() throws RecognitionException {
		HashPartboundContext _localctx = new HashPartboundContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_hashPartbound);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5646);
			hashPartboundElem();
			setState(5651);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5647);
				match(COMMA_);
				setState(5648);
				hashPartboundElem();
				}
				}
				setState(5653);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HashPartboundElemContext extends ParserRuleContext {
		public NonReservedWordContext nonReservedWord() {
			return getRuleContext(NonReservedWordContext.class,0);
		}
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public HashPartboundElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hashPartboundElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterHashPartboundElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitHashPartboundElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitHashPartboundElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HashPartboundElemContext hashPartboundElem() throws RecognitionException {
		HashPartboundElemContext _localctx = new HashPartboundElemContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_hashPartboundElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5654);
			nonReservedWord();
			setState(5655);
			match(NUMBER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TypedTableElementListContext extends ParserRuleContext {
		public List<TypedTableElementContext> typedTableElement() {
			return getRuleContexts(TypedTableElementContext.class);
		}
		public TypedTableElementContext typedTableElement(int i) {
			return getRuleContext(TypedTableElementContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public TypedTableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typedTableElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTypedTableElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTypedTableElementList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTypedTableElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypedTableElementListContext typedTableElementList() throws RecognitionException {
		TypedTableElementListContext _localctx = new TypedTableElementListContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_typedTableElementList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5657);
			typedTableElement();
			setState(5662);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5658);
				match(COMMA_);
				setState(5659);
				typedTableElement();
				}
				}
				setState(5664);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TypedTableElementContext extends ParserRuleContext {
		public ColumnOptionsContext columnOptions() {
			return getRuleContext(ColumnOptionsContext.class,0);
		}
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TypedTableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typedTableElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTypedTableElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTypedTableElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTypedTableElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypedTableElementContext typedTableElement() throws RecognitionException {
		TypedTableElementContext _localctx = new TypedTableElementContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_typedTableElement);
		try {
			setState(5667);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,456,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5665);
				columnOptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5666);
				tableConstraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnOptionsContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public ColQualListContext colQualList() {
			return getRuleContext(ColQualListContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode OPTIONS() { return getToken(PostgreSQLStatementParser.OPTIONS, 0); }
		public ColumnOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterColumnOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitColumnOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitColumnOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnOptionsContext columnOptions() throws RecognitionException {
		ColumnOptionsContext _localctx = new ColumnOptionsContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_columnOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5669);
			colId();
			setState(5672);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5670);
				match(WITH);
				setState(5671);
				match(OPTIONS);
				}
			}

			setState(5674);
			colQualList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WithDataContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode DATA() { return getToken(PostgreSQLStatementParser.DATA, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public WithDataContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withData; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterWithData(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitWithData(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitWithData(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithDataContext withData() throws RecognitionException {
		WithDataContext _localctx = new WithDataContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_withData);
		try {
			setState(5681);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,458,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5676);
				match(WITH);
				setState(5677);
				match(DATA);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5678);
				match(WITH);
				setState(5679);
				match(NO);
				setState(5680);
				match(DATA);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableSpaceContext extends ParserRuleContext {
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLStatementParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TableSpaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSpace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTableSpace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTableSpace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTableSpace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSpaceContext tableSpace() throws RecognitionException {
		TableSpaceContext _localctx = new TableSpaceContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_tableSpace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5683);
			match(TABLESPACE);
			setState(5684);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OnCommitOptionContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public TerminalNode COMMIT() { return getToken(PostgreSQLStatementParser.COMMIT, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode DELETE() { return getToken(PostgreSQLStatementParser.DELETE, 0); }
		public TerminalNode ROWS() { return getToken(PostgreSQLStatementParser.ROWS, 0); }
		public TerminalNode PRESERVE() { return getToken(PostgreSQLStatementParser.PRESERVE, 0); }
		public OnCommitOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onCommitOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOnCommitOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOnCommitOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOnCommitOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnCommitOptionContext onCommitOption() throws RecognitionException {
		OnCommitOptionContext _localctx = new OnCommitOptionContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_onCommitOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5686);
			match(ON);
			setState(5687);
			match(COMMIT);
			setState(5693);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DROP:
				{
				setState(5688);
				match(DROP);
				}
				break;
			case DELETE:
				{
				setState(5689);
				match(DELETE);
				setState(5690);
				match(ROWS);
				}
				break;
			case PRESERVE:
				{
				setState(5691);
				match(PRESERVE);
				setState(5692);
				match(ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WithOptionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode WITHOUT() { return getToken(PostgreSQLStatementParser.WITHOUT, 0); }
		public TerminalNode OIDS() { return getToken(PostgreSQLStatementParser.OIDS, 0); }
		public WithOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterWithOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitWithOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitWithOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithOptionContext withOption() throws RecognitionException {
		WithOptionContext _localctx = new WithOptionContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_withOption);
		try {
			setState(5699);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(5695);
				match(WITH);
				setState(5696);
				reloptions();
				}
				break;
			case WITHOUT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5697);
				match(WITHOUT);
				setState(5698);
				match(OIDS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableAccessMethodClauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public AccessMethodContext accessMethod() {
			return getRuleContext(AccessMethodContext.class,0);
		}
		public TableAccessMethodClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableAccessMethodClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTableAccessMethodClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTableAccessMethodClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTableAccessMethodClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableAccessMethodClauseContext tableAccessMethodClause() throws RecognitionException {
		TableAccessMethodClauseContext _localctx = new TableAccessMethodClauseContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_tableAccessMethodClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5701);
			match(USING);
			setState(5702);
			accessMethod();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AccessMethodContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UnreservedWordContext unreservedWord() {
			return getRuleContext(UnreservedWordContext.class,0);
		}
		public ColNameKeywordContext colNameKeyword() {
			return getRuleContext(ColNameKeywordContext.class,0);
		}
		public AccessMethodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accessMethod; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAccessMethod(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAccessMethod(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAccessMethod(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AccessMethodContext accessMethod() throws RecognitionException {
		AccessMethodContext _localctx = new AccessMethodContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_accessMethod);
		try {
			setState(5707);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,461,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5704);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5705);
				unreservedWord();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5706);
				colNameKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateIndexContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public CreateIndexSpecificationContext createIndexSpecification() {
			return getRuleContext(CreateIndexSpecificationContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(PostgreSQLStatementParser.INDEX, 0); }
		public ConcurrentlyClauseContext concurrentlyClause() {
			return getRuleContext(ConcurrentlyClauseContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public OnlyClauseContext onlyClause() {
			return getRuleContext(OnlyClauseContext.class,0);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public IndexParamsContext indexParams() {
			return getRuleContext(IndexParamsContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public AccessMethodClauseContext accessMethodClause() {
			return getRuleContext(AccessMethodClauseContext.class,0);
		}
		public IncludeContext include() {
			return getRuleContext(IncludeContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TableSpaceContext tableSpace() {
			return getRuleContext(TableSpaceContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexContext createIndex() throws RecognitionException {
		CreateIndexContext _localctx = new CreateIndexContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_createIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5709);
			match(CREATE);
			setState(5710);
			createIndexSpecification();
			setState(5711);
			match(INDEX);
			setState(5712);
			concurrentlyClause();
			setState(5717);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & -1702650966907551743L) != 0) || ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & -36028934466307075L) != 0) || ((((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & 283126353889277L) != 0) || ((((_la - 241)) & ~0x3f) == 0 && ((1L << (_la - 241)) & -545622264849L) != 0) || ((((_la - 305)) & ~0x3f) == 0 && ((1L << (_la - 305)) & -1L) != 0) || ((((_la - 369)) & ~0x3f) == 0 && ((1L << (_la - 369)) & 9895604649983L) != 0) || ((((_la - 437)) & ~0x3f) == 0 && ((1L << (_la - 437)) & 562950016917239L) != 0) || ((((_la - 505)) & ~0x3f) == 0 && ((1L << (_la - 505)) & 7138750043982826433L) != 0) || ((((_la - 569)) & ~0x3f) == 0 && ((1L << (_la - 569)) & 2173569L) != 0)) {
				{
				setState(5714);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,462,_ctx) ) {
				case 1:
					{
					setState(5713);
					ifNotExists();
					}
					break;
				}
				setState(5716);
				indexName();
				}
			}

			setState(5719);
			match(ON);
			setState(5720);
			onlyClause();
			setState(5721);
			tableName();
			setState(5723);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(5722);
				accessMethodClause();
				}
			}

			setState(5725);
			match(LP_);
			setState(5726);
			indexParams();
			setState(5727);
			match(RP_);
			setState(5729);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUDE) {
				{
				setState(5728);
				include();
				}
			}

			setState(5733);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5731);
				match(WITH);
				setState(5732);
				reloptions();
				}
			}

			setState(5736);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(5735);
				tableSpace();
				}
			}

			setState(5739);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(5738);
				whereClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IncludeContext extends ParserRuleContext {
		public TerminalNode INCLUDE() { return getToken(PostgreSQLStatementParser.INCLUDE, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public IndexIncludingParamsContext indexIncludingParams() {
			return getRuleContext(IndexIncludingParamsContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public IncludeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_include; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterInclude(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitInclude(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitInclude(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IncludeContext include() throws RecognitionException {
		IncludeContext _localctx = new IncludeContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_include);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5741);
			match(INCLUDE);
			setState(5742);
			match(LP_);
			setState(5743);
			indexIncludingParams();
			setState(5744);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexIncludingParamsContext extends ParserRuleContext {
		public List<IndexElemContext> indexElem() {
			return getRuleContexts(IndexElemContext.class);
		}
		public IndexElemContext indexElem(int i) {
			return getRuleContext(IndexElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public IndexIncludingParamsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexIncludingParams; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterIndexIncludingParams(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitIndexIncludingParams(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitIndexIncludingParams(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexIncludingParamsContext indexIncludingParams() throws RecognitionException {
		IndexIncludingParamsContext _localctx = new IndexIncludingParamsContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_indexIncludingParams);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5746);
			indexElem();
			setState(5751);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5747);
				match(COMMA_);
				setState(5748);
				indexElem();
				}
				}
				setState(5753);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AccessMethodClauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public AccessMethodContext accessMethod() {
			return getRuleContext(AccessMethodContext.class,0);
		}
		public AccessMethodClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accessMethodClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAccessMethodClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAccessMethodClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAccessMethodClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AccessMethodClauseContext accessMethodClause() throws RecognitionException {
		AccessMethodClauseContext _localctx = new AccessMethodClauseContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_accessMethodClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5754);
			match(USING);
			setState(5755);
			accessMethod();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateDatabaseContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLStatementParser.DATABASE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public List<CreateDatabaseSpecificationContext> createDatabaseSpecification() {
			return getRuleContexts(CreateDatabaseSpecificationContext.class);
		}
		public CreateDatabaseSpecificationContext createDatabaseSpecification(int i) {
			return getRuleContext(CreateDatabaseSpecificationContext.class,i);
		}
		public CreateDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseContext createDatabase() throws RecognitionException {
		CreateDatabaseContext _localctx = new CreateDatabaseContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_createDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5757);
			match(CREATE);
			setState(5758);
			match(DATABASE);
			setState(5759);
			name();
			setState(5761);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5760);
				match(WITH);
				}
			}

			setState(5766);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & -1702650966907551743L) != 0) || ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & -36028934466307075L) != 0) || ((((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & 283126353889277L) != 0) || ((((_la - 241)) & ~0x3f) == 0 && ((1L << (_la - 241)) & -545622264849L) != 0) || ((((_la - 305)) & ~0x3f) == 0 && ((1L << (_la - 305)) & -1L) != 0) || ((((_la - 369)) & ~0x3f) == 0 && ((1L << (_la - 369)) & 9895604649983L) != 0) || ((((_la - 437)) & ~0x3f) == 0 && ((1L << (_la - 437)) & 562950016917239L) != 0) || ((((_la - 505)) & ~0x3f) == 0 && ((1L << (_la - 505)) & 7138750043982826433L) != 0) || ((((_la - 569)) & ~0x3f) == 0 && ((1L << (_la - 569)) & 2173569L) != 0)) {
				{
				{
				setState(5763);
				createDatabaseSpecification();
				}
				}
				setState(5768);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateViewContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLStatementParser.VIEW, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public TerminalNode OR() { return getToken(PostgreSQLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLStatementParser.REPLACE, 0); }
		public TerminalNode RECURSIVE() { return getToken(PostgreSQLStatementParser.RECURSIVE, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public List<TerminalNode> WITH() { return getTokens(PostgreSQLStatementParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(PostgreSQLStatementParser.WITH, i);
		}
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode CHECK() { return getToken(PostgreSQLStatementParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLStatementParser.OPTION, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLStatementParser.TEMP, 0); }
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLStatementParser.TEMPORARY, 0); }
		public List<ColumnListContext> columnList() {
			return getRuleContexts(ColumnListContext.class);
		}
		public ColumnListContext columnList(int i) {
			return getRuleContext(ColumnListContext.class,i);
		}
		public TerminalNode CASCADE() { return getToken(PostgreSQLStatementParser.CASCADE, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLStatementParser.LOCAL, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public CreateViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateViewContext createView() throws RecognitionException {
		CreateViewContext _localctx = new CreateViewContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_createView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5769);
			match(CREATE);
			setState(5772);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(5770);
				match(OR);
				setState(5771);
				match(REPLACE);
				}
			}

			setState(5775);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				setState(5774);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5778);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RECURSIVE) {
				{
				setState(5777);
				match(RECURSIVE);
				}
			}

			setState(5780);
			match(VIEW);
			setState(5781);
			qualifiedName();
			setState(5794);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(5782);
				match(LP_);
				setState(5791);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & -1702650966907551743L) != 0) || ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & -36028934466307075L) != 0) || ((((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & 283126353889277L) != 0) || ((((_la - 241)) & ~0x3f) == 0 && ((1L << (_la - 241)) & -545622264849L) != 0) || ((((_la - 305)) & ~0x3f) == 0 && ((1L << (_la - 305)) & -1L) != 0) || ((((_la - 369)) & ~0x3f) == 0 && ((1L << (_la - 369)) & 9895604649983L) != 0) || ((((_la - 437)) & ~0x3f) == 0 && ((1L << (_la - 437)) & 562950016917239L) != 0) || ((((_la - 505)) & ~0x3f) == 0 && ((1L << (_la - 505)) & 7138750043982826433L) != 0) || ((((_la - 569)) & ~0x3f) == 0 && ((1L << (_la - 569)) & 2173569L) != 0)) {
					{
					setState(5783);
					columnList();
					setState(5788);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA_) {
						{
						{
						setState(5784);
						match(COMMA_);
						setState(5785);
						columnList();
						}
						}
						setState(5790);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(5793);
				match(RP_);
				}
			}

			setState(5798);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5796);
				match(WITH);
				setState(5797);
				reloptions();
				}
			}

			setState(5800);
			match(AS);
			setState(5801);
			select();
			setState(5808);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5802);
				match(WITH);
				setState(5804);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==LOCAL) {
					{
					setState(5803);
					_la = _input.LA(1);
					if ( !(_la==CASCADE || _la==LOCAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5806);
				match(CHECK);
				setState(5807);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropDatabaseContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLStatementParser.DATABASE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropDatabaseContext dropDatabase() throws RecognitionException {
		DropDatabaseContext _localctx = new DropDatabaseContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_dropDatabase);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5810);
			match(DROP);
			setState(5811);
			match(DATABASE);
			setState(5813);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,481,_ctx) ) {
			case 1:
				{
				setState(5812);
				ifExists();
				}
				break;
			}
			setState(5815);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropGroupContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode GROUP() { return getToken(PostgreSQLStatementParser.GROUP, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public DropGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropGroupContext dropGroup() throws RecognitionException {
		DropGroupContext _localctx = new DropGroupContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_dropGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5817);
			match(DROP);
			setState(5818);
			match(GROUP);
			setState(5820);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,482,_ctx) ) {
			case 1:
				{
				setState(5819);
				ifExists();
				}
				break;
			}
			setState(5822);
			name();
			setState(5827);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5823);
				match(COMMA_);
				setState(5824);
				name();
				}
				}
				setState(5829);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateDatabaseSpecificationContext extends ParserRuleContext {
		public CreatedbOptNameContext createdbOptName() {
			return getRuleContext(CreatedbOptNameContext.class,0);
		}
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public BooleanOrStringContext booleanOrString() {
			return getRuleContext(BooleanOrStringContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public TerminalNode EQ_() { return getToken(PostgreSQLStatementParser.EQ_, 0); }
		public CreateDatabaseSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabaseSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateDatabaseSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateDatabaseSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateDatabaseSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseSpecificationContext createDatabaseSpecification() throws RecognitionException {
		CreateDatabaseSpecificationContext _localctx = new CreateDatabaseSpecificationContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_createDatabaseSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5830);
			createdbOptName();
			setState(5832);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQ_) {
				{
				setState(5831);
				match(EQ_);
				}
			}

			setState(5837);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PLUS_:
			case MINUS_:
			case NUMBER_:
				{
				setState(5834);
				signedIconst();
				}
				break;
			case UNICODE_ESCAPE:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXISTS:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case BIT:
			case XML:
			case JSON:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case OUT:
			case INOUT:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case ON:
			case IF:
			case IS:
			case TRUE:
			case FALSE:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case IDENTIFIER_:
			case STRING_:
				{
				setState(5835);
				booleanOrString();
				}
				break;
			case DEFAULT:
				{
				setState(5836);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatedbOptNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(PostgreSQLStatementParser.CONNECTION, 0); }
		public TerminalNode LIMIT() { return getToken(PostgreSQLStatementParser.LIMIT, 0); }
		public TerminalNode ENCODING() { return getToken(PostgreSQLStatementParser.ENCODING, 0); }
		public TerminalNode LOCATION() { return getToken(PostgreSQLStatementParser.LOCATION, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLStatementParser.TABLESPACE, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLStatementParser.TEMPLATE, 0); }
		public CreatedbOptNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdbOptName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreatedbOptName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreatedbOptName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreatedbOptName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatedbOptNameContext createdbOptName() throws RecognitionException {
		CreatedbOptNameContext _localctx = new CreatedbOptNameContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_createdbOptName);
		try {
			setState(5847);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,486,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5839);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5840);
				match(CONNECTION);
				setState(5841);
				match(LIMIT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5842);
				match(ENCODING);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5843);
				match(LOCATION);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5844);
				match(OWNER);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5845);
				match(TABLESPACE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5846);
				match(TEMPLATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterTableContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public OnlyClauseContext onlyClause() {
			return getRuleContext(OnlyClauseContext.class,0);
		}
		public TableNameClauseContext tableNameClause() {
			return getRuleContext(TableNameClauseContext.class,0);
		}
		public AlterDefinitionClauseContext alterDefinitionClause() {
			return getRuleContext(AlterDefinitionClauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TerminalNode IN() { return getToken(PostgreSQLStatementParser.IN, 0); }
		public List<TerminalNode> TABLESPACE() { return getTokens(PostgreSQLStatementParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(PostgreSQLStatementParser.TABLESPACE, i);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode OWNED() { return getToken(PostgreSQLStatementParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode NOWAIT() { return getToken(PostgreSQLStatementParser.NOWAIT, 0); }
		public AlterTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableContext alterTable() throws RecognitionException {
		AlterTableContext _localctx = new AlterTableContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_alterTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5849);
			match(ALTER);
			setState(5850);
			match(TABLE);
			setState(5873);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNICODE_ESCAPE:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case ONLY:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case XML:
			case JSON:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case PARAM:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case NATIONAL:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case IDENTIFIER_:
				{
				setState(5852);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,487,_ctx) ) {
				case 1:
					{
					setState(5851);
					ifExists();
					}
					break;
				}
				setState(5854);
				onlyClause();
				setState(5855);
				tableNameClause();
				setState(5856);
				alterDefinitionClause();
				}
				break;
			case ALL:
				{
				setState(5858);
				match(ALL);
				setState(5859);
				match(IN);
				setState(5860);
				match(TABLESPACE);
				setState(5861);
				tableNameClause();
				setState(5865);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OWNED) {
					{
					setState(5862);
					match(OWNED);
					setState(5863);
					match(BY);
					setState(5864);
					roleList();
					}
				}

				setState(5867);
				match(SET);
				setState(5868);
				match(TABLESPACE);
				setState(5869);
				name();
				setState(5871);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOWAIT) {
					{
					setState(5870);
					match(NOWAIT);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterIndexContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLStatementParser.INDEX, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public AlterIndexDefinitionClauseContext alterIndexDefinitionClause() {
			return getRuleContext(AlterIndexDefinitionClauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TerminalNode IN() { return getToken(PostgreSQLStatementParser.IN, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLStatementParser.TABLESPACE, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public AlterIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIndexContext alterIndex() throws RecognitionException {
		AlterIndexContext _localctx = new AlterIndexContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_alterIndex);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5875);
			match(ALTER);
			setState(5876);
			match(INDEX);
			setState(5883);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNICODE_ESCAPE:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case XML:
			case JSON:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case PARAM:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case NATIONAL:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case IDENTIFIER_:
				{
				setState(5878);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,491,_ctx) ) {
				case 1:
					{
					setState(5877);
					ifExists();
					}
					break;
				}
				}
				break;
			case ALL:
				{
				setState(5880);
				match(ALL);
				setState(5881);
				match(IN);
				setState(5882);
				match(TABLESPACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5885);
			qualifiedName();
			setState(5886);
			alterIndexDefinitionClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropTableContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public TableNamesContext tableNames() {
			return getRuleContext(TableNamesContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropTableOptContext dropTableOpt() {
			return getRuleContext(DropTableOptContext.class,0);
		}
		public DropTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTableContext dropTable() throws RecognitionException {
		DropTableContext _localctx = new DropTableContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_dropTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5888);
			match(DROP);
			setState(5889);
			match(TABLE);
			setState(5891);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,493,_ctx) ) {
			case 1:
				{
				setState(5890);
				ifExists();
				}
				break;
			}
			setState(5893);
			tableNames();
			setState(5895);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5894);
				dropTableOpt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropTableOptContext extends ParserRuleContext {
		public TerminalNode CASCADE() { return getToken(PostgreSQLStatementParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLStatementParser.RESTRICT, 0); }
		public DropTableOptContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTableOpt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropTableOpt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropTableOpt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropTableOpt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTableOptContext dropTableOpt() throws RecognitionException {
		DropTableOptContext _localctx = new DropTableOptContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_dropTableOpt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5897);
			_la = _input.LA(1);
			if ( !(_la==CASCADE || _la==RESTRICT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropIndexContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLStatementParser.INDEX, 0); }
		public ConcurrentlyClauseContext concurrentlyClause() {
			return getRuleContext(ConcurrentlyClauseContext.class,0);
		}
		public QualifiedNameListContext qualifiedNameList() {
			return getRuleContext(QualifiedNameListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropIndexOptContext dropIndexOpt() {
			return getRuleContext(DropIndexOptContext.class,0);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropIndexContext dropIndex() throws RecognitionException {
		DropIndexContext _localctx = new DropIndexContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_dropIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5899);
			match(DROP);
			setState(5900);
			match(INDEX);
			setState(5901);
			concurrentlyClause();
			setState(5903);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,495,_ctx) ) {
			case 1:
				{
				setState(5902);
				ifExists();
				}
				break;
			}
			setState(5905);
			qualifiedNameList(0);
			setState(5907);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5906);
				dropIndexOpt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropIndexOptContext extends ParserRuleContext {
		public TerminalNode CASCADE() { return getToken(PostgreSQLStatementParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLStatementParser.RESTRICT, 0); }
		public DropIndexOptContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropIndexOpt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropIndexOpt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropIndexOpt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropIndexOpt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropIndexOptContext dropIndexOpt() throws RecognitionException {
		DropIndexOptContext _localctx = new DropIndexOptContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_dropIndexOpt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5909);
			_la = _input.LA(1);
			if ( !(_la==CASCADE || _la==RESTRICT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TruncateTableContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(PostgreSQLStatementParser.TRUNCATE, 0); }
		public OnlyClauseContext onlyClause() {
			return getRuleContext(OnlyClauseContext.class,0);
		}
		public TableNamesClauseContext tableNamesClause() {
			return getRuleContext(TableNamesClauseContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public RestartSeqsContext restartSeqs() {
			return getRuleContext(RestartSeqsContext.class,0);
		}
		public DropTableOptContext dropTableOpt() {
			return getRuleContext(DropTableOptContext.class,0);
		}
		public TruncateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncateTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTruncateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTruncateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTruncateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TruncateTableContext truncateTable() throws RecognitionException {
		TruncateTableContext _localctx = new TruncateTableContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_truncateTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5911);
			match(TRUNCATE);
			setState(5913);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,497,_ctx) ) {
			case 1:
				{
				setState(5912);
				match(TABLE);
				}
				break;
			}
			setState(5915);
			onlyClause();
			setState(5916);
			tableNamesClause();
			setState(5918);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESTART || _la==CONTINUE) {
				{
				setState(5917);
				restartSeqs();
				}
			}

			setState(5921);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5920);
				dropTableOpt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RestartSeqsContext extends ParserRuleContext {
		public TerminalNode CONTINUE() { return getToken(PostgreSQLStatementParser.CONTINUE, 0); }
		public TerminalNode IDENTITY() { return getToken(PostgreSQLStatementParser.IDENTITY, 0); }
		public TerminalNode RESTART() { return getToken(PostgreSQLStatementParser.RESTART, 0); }
		public RestartSeqsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_restartSeqs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterRestartSeqs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitRestartSeqs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitRestartSeqs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RestartSeqsContext restartSeqs() throws RecognitionException {
		RestartSeqsContext _localctx = new RestartSeqsContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_restartSeqs);
		try {
			setState(5927);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONTINUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5923);
				match(CONTINUE);
				setState(5924);
				match(IDENTITY);
				}
				break;
			case RESTART:
				enterOuterAlt(_localctx, 2);
				{
				setState(5925);
				match(RESTART);
				setState(5926);
				match(IDENTITY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateTableSpecificationContext extends ParserRuleContext {
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLStatementParser.UNLOGGED, 0); }
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLStatementParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLStatementParser.TEMP, 0); }
		public TerminalNode GLOBAL() { return getToken(PostgreSQLStatementParser.GLOBAL, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLStatementParser.LOCAL, 0); }
		public CreateTableSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateTableSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateTableSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateTableSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableSpecificationContext createTableSpecification() throws RecognitionException {
		CreateTableSpecificationContext _localctx = new CreateTableSpecificationContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_createTableSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5934);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GLOBAL:
			case TEMP:
			case TEMPORARY:
			case LOCAL:
				{
				setState(5930);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL || _la==LOCAL) {
					{
					setState(5929);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==LOCAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5932);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case UNLOGGED:
				{
				setState(5933);
				match(UNLOGGED);
				}
				break;
			case TABLE:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateDefinitionClauseContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public List<CreateDefinitionContext> createDefinition() {
			return getRuleContexts(CreateDefinitionContext.class);
		}
		public CreateDefinitionContext createDefinition(int i) {
			return getRuleContext(CreateDefinitionContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public CreateDefinitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateDefinitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateDefinitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateDefinitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDefinitionClauseContext createDefinitionClause() throws RecognitionException {
		CreateDefinitionClauseContext _localctx = new CreateDefinitionClauseContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_createDefinitionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5936);
			match(LP_);
			setState(5945);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & -1702650932547813375L) != 0) || ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & -36028934466307075L) != 0) || ((((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & 283126353889277L) != 0) || ((((_la - 241)) & ~0x3f) == 0 && ((1L << (_la - 241)) & -545622264849L) != 0) || ((((_la - 305)) & ~0x3f) == 0 && ((1L << (_la - 305)) & -1L) != 0) || ((((_la - 369)) & ~0x3f) == 0 && ((1L << (_la - 369)) & 9895604649983L) != 0) || ((((_la - 437)) & ~0x3f) == 0 && ((1L << (_la - 437)) & 562950017375991L) != 0) || ((((_la - 502)) & ~0x3f) == 0 && ((1L << (_la - 502)) & 1769768130733956617L) != 0) || ((((_la - 566)) & ~0x3f) == 0 && ((1L << (_la - 566)) & 17388555L) != 0)) {
				{
				setState(5937);
				createDefinition();
				setState(5942);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(5938);
					match(COMMA_);
					setState(5939);
					createDefinition();
					}
					}
					setState(5944);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(5947);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateDefinitionContext extends ParserRuleContext {
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(PostgreSQLStatementParser.LIKE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<LikeOptionContext> likeOption() {
			return getRuleContexts(LikeOptionContext.class);
		}
		public LikeOptionContext likeOption(int i) {
			return getRuleContext(LikeOptionContext.class,i);
		}
		public CreateDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDefinitionContext createDefinition() throws RecognitionException {
		CreateDefinitionContext _localctx = new CreateDefinitionContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_createDefinition);
		int _la;
		try {
			setState(5959);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,506,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5949);
				columnDefinition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5950);
				tableConstraint();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5951);
				match(LIKE);
				setState(5952);
				tableName();
				setState(5956);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==EXCLUDING || _la==INCLUDING) {
					{
					{
					setState(5953);
					likeOption();
					}
					}
					setState(5958);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnDefinitionContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public CollateClauseContext collateClause() {
			return getRuleContext(CollateClauseContext.class,0);
		}
		public List<ColumnConstraintContext> columnConstraint() {
			return getRuleContexts(ColumnConstraintContext.class);
		}
		public ColumnConstraintContext columnConstraint(int i) {
			return getRuleContext(ColumnConstraintContext.class,i);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefinitionContext columnDefinition() throws RecognitionException {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_columnDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5961);
			columnName();
			setState(5962);
			dataType();
			setState(5964);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(5963);
				collateClause();
				}
			}

			setState(5969);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 259L) != 0) || ((((_la - 452)) & ~0x3f) == 0 && ((1L << (_la - 452)) & 13194139533335L) != 0) || _la==DEFAULT) {
				{
				{
				setState(5966);
				columnConstraint();
				}
				}
				setState(5971);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnConstraintContext extends ParserRuleContext {
		public ColumnConstraintOptionContext columnConstraintOption() {
			return getRuleContext(ColumnConstraintOptionContext.class,0);
		}
		public ConstraintOptionalParamContext constraintOptionalParam() {
			return getRuleContext(ConstraintOptionalParamContext.class,0);
		}
		public ConstraintClauseContext constraintClause() {
			return getRuleContext(ConstraintClauseContext.class,0);
		}
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnConstraintContext columnConstraint() throws RecognitionException {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_columnConstraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5973);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(5972);
				constraintClause();
				}
			}

			setState(5975);
			columnConstraintOption();
			setState(5976);
			constraintOptionalParam();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstraintClauseContext extends ParserRuleContext {
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLStatementParser.CONSTRAINT, 0); }
		public ConstraintNameContext constraintName() {
			return getRuleContext(ConstraintNameContext.class,0);
		}
		public ConstraintClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterConstraintClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitConstraintClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitConstraintClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintClauseContext constraintClause() throws RecognitionException {
		ConstraintClauseContext _localctx = new ConstraintClauseContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_constraintClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5978);
			match(CONSTRAINT);
			setState(5979);
			constraintName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnConstraintOptionContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(PostgreSQLStatementParser.NULL, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public CheckOptionContext checkOption() {
			return getRuleContext(CheckOptionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public DefaultExprContext defaultExpr() {
			return getRuleContext(DefaultExprContext.class,0);
		}
		public TerminalNode GENERATED() { return getToken(PostgreSQLStatementParser.GENERATED, 0); }
		public TerminalNode ALWAYS() { return getToken(PostgreSQLStatementParser.ALWAYS, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode STORED() { return getToken(PostgreSQLStatementParser.STORED, 0); }
		public TerminalNode IDENTITY() { return getToken(PostgreSQLStatementParser.IDENTITY, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public SequenceOptionsContext sequenceOptions() {
			return getRuleContext(SequenceOptionsContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(PostgreSQLStatementParser.UNIQUE, 0); }
		public IndexParametersContext indexParameters() {
			return getRuleContext(IndexParametersContext.class,0);
		}
		public PrimaryKeyContext primaryKey() {
			return getRuleContext(PrimaryKeyContext.class,0);
		}
		public TerminalNode REFERENCES() { return getToken(PostgreSQLStatementParser.REFERENCES, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public TerminalNode MATCH() { return getToken(PostgreSQLStatementParser.MATCH, 0); }
		public TerminalNode FULL() { return getToken(PostgreSQLStatementParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(PostgreSQLStatementParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(PostgreSQLStatementParser.SIMPLE, 0); }
		public List<TerminalNode> ON() { return getTokens(PostgreSQLStatementParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(PostgreSQLStatementParser.ON, i);
		}
		public List<ActionContext> action() {
			return getRuleContexts(ActionContext.class);
		}
		public ActionContext action(int i) {
			return getRuleContext(ActionContext.class,i);
		}
		public List<TerminalNode> DELETE() { return getTokens(PostgreSQLStatementParser.DELETE); }
		public TerminalNode DELETE(int i) {
			return getToken(PostgreSQLStatementParser.DELETE, i);
		}
		public List<TerminalNode> UPDATE() { return getTokens(PostgreSQLStatementParser.UPDATE); }
		public TerminalNode UPDATE(int i) {
			return getToken(PostgreSQLStatementParser.UPDATE, i);
		}
		public ColumnConstraintOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraintOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterColumnConstraintOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitColumnConstraintOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitColumnConstraintOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnConstraintOptionContext columnConstraintOption() throws RecognitionException {
		ColumnConstraintOptionContext _localctx = new ColumnConstraintOptionContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_columnConstraintOption);
		int _la;
		try {
			setState(6036);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,516,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5982);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(5981);
					match(NOT);
					}
				}

				setState(5984);
				match(NULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5985);
				checkOption();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5986);
				match(DEFAULT);
				setState(5987);
				defaultExpr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5988);
				match(GENERATED);
				setState(5989);
				match(ALWAYS);
				setState(5990);
				match(AS);
				setState(5991);
				match(LP_);
				setState(5992);
				aExpr(0);
				setState(5993);
				match(RP_);
				setState(5994);
				match(STORED);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5996);
				match(GENERATED);
				setState(6000);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALWAYS:
					{
					setState(5997);
					match(ALWAYS);
					}
					break;
				case BY:
					{
					setState(5998);
					match(BY);
					setState(5999);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6002);
				match(AS);
				setState(6003);
				match(IDENTITY);
				setState(6008);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(6004);
					match(LP_);
					setState(6005);
					sequenceOptions();
					setState(6006);
					match(RP_);
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6010);
				match(UNIQUE);
				setState(6011);
				indexParameters();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6012);
				primaryKey();
				setState(6013);
				indexParameters();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6015);
				match(REFERENCES);
				setState(6016);
				tableName();
				setState(6018);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(6017);
					columnNames();
					}
				}

				setState(6026);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,514,_ctx) ) {
				case 1:
					{
					setState(6020);
					match(MATCH);
					setState(6021);
					match(FULL);
					}
					break;
				case 2:
					{
					setState(6022);
					match(MATCH);
					setState(6023);
					match(PARTIAL);
					}
					break;
				case 3:
					{
					setState(6024);
					match(MATCH);
					setState(6025);
					match(SIMPLE);
					}
					break;
				}
				setState(6033);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ON) {
					{
					{
					setState(6028);
					match(ON);
					setState(6029);
					_la = _input.LA(1);
					if ( !(_la==UPDATE || _la==DELETE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(6030);
					action();
					}
					}
					setState(6035);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CheckOptionContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(PostgreSQLStatementParser.CHECK, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLStatementParser.INHERIT, 0); }
		public CheckOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCheckOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCheckOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCheckOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckOptionContext checkOption() throws RecognitionException {
		CheckOptionContext _localctx = new CheckOptionContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_checkOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6038);
			match(CHECK);
			setState(6039);
			aExpr(0);
			setState(6042);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO) {
				{
				setState(6040);
				match(NO);
				setState(6041);
				match(INHERIT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DefaultExprContext extends ParserRuleContext {
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(PostgreSQLStatementParser.CURRENT_TIMESTAMP, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public DefaultExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDefaultExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDefaultExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDefaultExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultExprContext defaultExpr() throws RecognitionException {
		DefaultExprContext _localctx = new DefaultExprContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_defaultExpr);
		try {
			setState(6046);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,518,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6044);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6045);
				aExpr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SequenceOptionsContext extends ParserRuleContext {
		public List<SequenceOptionContext> sequenceOption() {
			return getRuleContexts(SequenceOptionContext.class);
		}
		public SequenceOptionContext sequenceOption(int i) {
			return getRuleContext(SequenceOptionContext.class,i);
		}
		public SequenceOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequenceOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSequenceOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSequenceOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSequenceOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceOptionsContext sequenceOptions() throws RecognitionException {
		SequenceOptionsContext _localctx = new SequenceOptionsContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_sequenceOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6049); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(6048);
				sequenceOption();
				}
				}
				setState(6051); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & 216190374304024705L) != 0) || _la==OWNED );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SequenceOptionContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(PostgreSQLStatementParser.START, 0); }
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode INCREMENT() { return getToken(PostgreSQLStatementParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public TerminalNode MAXVALUE() { return getToken(PostgreSQLStatementParser.MAXVALUE, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode MINVALUE() { return getToken(PostgreSQLStatementParser.MINVALUE, 0); }
		public TerminalNode CYCLE() { return getToken(PostgreSQLStatementParser.CYCLE, 0); }
		public TerminalNode CACHE() { return getToken(PostgreSQLStatementParser.CACHE, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLStatementParser.OWNED, 0); }
		public SequenceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequenceOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSequenceOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSequenceOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSequenceOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceOptionContext sequenceOption() throws RecognitionException {
		SequenceOptionContext _localctx = new SequenceOptionContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_sequenceOption);
		int _la;
		try {
			setState(6078);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,522,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6053);
				match(START);
				setState(6055);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(6054);
					match(WITH);
					}
				}

				setState(6057);
				match(NUMBER_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6058);
				match(INCREMENT);
				setState(6060);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(6059);
					match(BY);
					}
				}

				setState(6062);
				match(NUMBER_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6063);
				match(MAXVALUE);
				setState(6064);
				match(NUMBER_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6065);
				match(NO);
				setState(6066);
				match(MAXVALUE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6067);
				match(MINVALUE);
				setState(6068);
				match(NUMBER_);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6069);
				match(NO);
				setState(6070);
				match(MINVALUE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6071);
				match(CYCLE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6072);
				match(NO);
				setState(6073);
				match(CYCLE);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6074);
				match(CACHE);
				setState(6075);
				match(NUMBER_);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6076);
				match(OWNED);
				setState(6077);
				match(BY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexParametersContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLStatementParser.INDEX, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLStatementParser.TABLESPACE, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public TerminalNode INCLUDE() { return getToken(PostgreSQLStatementParser.INCLUDE, 0); }
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public IndexParametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexParameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterIndexParameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitIndexParameters(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitIndexParameters(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexParametersContext indexParameters() throws RecognitionException {
		IndexParametersContext _localctx = new IndexParametersContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_indexParameters);
		int _la;
		try {
			setState(6090);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case RP_:
			case COMMA_:
			case SEMI_:
			case CHECK:
			case GENERATED:
			case REFERENCES:
			case DEFERRABLE:
			case INITIALLY:
			case CONSTRAINT:
			case PRIMARY:
			case UNIQUE:
			case KEY:
			case USING:
			case WHERE:
			case NOT:
			case NULL:
			case DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6084);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(6080);
					match(USING);
					setState(6081);
					match(INDEX);
					setState(6082);
					match(TABLESPACE);
					setState(6083);
					ignoredIdentifier();
					}
				}

				}
				break;
			case INCLUDE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6086);
				match(INCLUDE);
				setState(6087);
				columnNames();
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 3);
				{
				setState(6088);
				match(WITH);
				setState(6089);
				definition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ActionContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(PostgreSQLStatementParser.ACTION, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLStatementParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLStatementParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode NULL() { return getToken(PostgreSQLStatementParser.NULL, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public ActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ActionContext action() throws RecognitionException {
		ActionContext _localctx = new ActionContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_action);
		int _la;
		try {
			setState(6098);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(6092);
				match(NO);
				setState(6093);
				match(ACTION);
				}
				break;
			case RESTRICT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6094);
				match(RESTRICT);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 3);
				{
				setState(6095);
				match(CASCADE);
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 4);
				{
				setState(6096);
				match(SET);
				setState(6097);
				_la = _input.LA(1);
				if ( !(_la==NULL || _la==DEFAULT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstraintOptionalParamContext extends ParserRuleContext {
		public TerminalNode DEFERRABLE() { return getToken(PostgreSQLStatementParser.DEFERRABLE, 0); }
		public TerminalNode INITIALLY() { return getToken(PostgreSQLStatementParser.INITIALLY, 0); }
		public TerminalNode DEFERRED() { return getToken(PostgreSQLStatementParser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSQLStatementParser.IMMEDIATE, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public ConstraintOptionalParamContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintOptionalParam; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterConstraintOptionalParam(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitConstraintOptionalParam(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitConstraintOptionalParam(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintOptionalParamContext constraintOptionalParam() throws RecognitionException {
		ConstraintOptionalParamContext _localctx = new ConstraintOptionalParamContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_constraintOptionalParam);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6104);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,527,_ctx) ) {
			case 1:
				{
				setState(6101);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(6100);
					match(NOT);
					}
				}

				setState(6103);
				match(DEFERRABLE);
				}
				break;
			}
			setState(6108);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIALLY) {
				{
				setState(6106);
				match(INITIALLY);
				setState(6107);
				_la = _input.LA(1);
				if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LikeOptionContext extends ParserRuleContext {
		public TerminalNode INCLUDING() { return getToken(PostgreSQLStatementParser.INCLUDING, 0); }
		public TerminalNode EXCLUDING() { return getToken(PostgreSQLStatementParser.EXCLUDING, 0); }
		public TerminalNode COMMENTS() { return getToken(PostgreSQLStatementParser.COMMENTS, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PostgreSQLStatementParser.CONSTRAINTS, 0); }
		public TerminalNode DEFAULTS() { return getToken(PostgreSQLStatementParser.DEFAULTS, 0); }
		public TerminalNode IDENTITY() { return getToken(PostgreSQLStatementParser.IDENTITY, 0); }
		public TerminalNode INDEXES() { return getToken(PostgreSQLStatementParser.INDEXES, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLStatementParser.STATISTICS, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLStatementParser.STORAGE, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public LikeOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_likeOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterLikeOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitLikeOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitLikeOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LikeOptionContext likeOption() throws RecognitionException {
		LikeOptionContext _localctx = new LikeOptionContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_likeOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6110);
			_la = _input.LA(1);
			if ( !(_la==EXCLUDING || _la==INCLUDING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6111);
			_la = _input.LA(1);
			if ( !(((((_la - 103)) & ~0x3f) == 0 && ((1L << (_la - 103)) & 1140851745L) != 0) || _la==STATISTICS || _la==STORAGE || _la==ALL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableConstraintContext extends ParserRuleContext {
		public TableConstraintOptionContext tableConstraintOption() {
			return getRuleContext(TableConstraintOptionContext.class,0);
		}
		public ConstraintOptionalParamContext constraintOptionalParam() {
			return getRuleContext(ConstraintOptionalParamContext.class,0);
		}
		public ConstraintClauseContext constraintClause() {
			return getRuleContext(ConstraintClauseContext.class,0);
		}
		public TableConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintContext tableConstraint() throws RecognitionException {
		TableConstraintContext _localctx = new TableConstraintContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_tableConstraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6114);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(6113);
				constraintClause();
				}
			}

			setState(6116);
			tableConstraintOption();
			setState(6117);
			constraintOptionalParam();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableConstraintOptionContext extends ParserRuleContext {
		public CheckOptionContext checkOption() {
			return getRuleContext(CheckOptionContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(PostgreSQLStatementParser.UNIQUE, 0); }
		public List<ColumnNamesContext> columnNames() {
			return getRuleContexts(ColumnNamesContext.class);
		}
		public ColumnNamesContext columnNames(int i) {
			return getRuleContext(ColumnNamesContext.class,i);
		}
		public IndexParametersContext indexParameters() {
			return getRuleContext(IndexParametersContext.class,0);
		}
		public PrimaryKeyContext primaryKey() {
			return getRuleContext(PrimaryKeyContext.class,0);
		}
		public TerminalNode EXCLUDE() { return getToken(PostgreSQLStatementParser.EXCLUDE, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ExclusionConstraintListContext exclusionConstraintList() {
			return getRuleContext(ExclusionConstraintListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public ExclusionWhereClauseContext exclusionWhereClause() {
			return getRuleContext(ExclusionWhereClauseContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(PostgreSQLStatementParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(PostgreSQLStatementParser.KEY, 0); }
		public TerminalNode REFERENCES() { return getToken(PostgreSQLStatementParser.REFERENCES, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode MATCH() { return getToken(PostgreSQLStatementParser.MATCH, 0); }
		public TerminalNode FULL() { return getToken(PostgreSQLStatementParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(PostgreSQLStatementParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(PostgreSQLStatementParser.SIMPLE, 0); }
		public List<TerminalNode> ON() { return getTokens(PostgreSQLStatementParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(PostgreSQLStatementParser.ON, i);
		}
		public List<ActionContext> action() {
			return getRuleContexts(ActionContext.class);
		}
		public ActionContext action(int i) {
			return getRuleContext(ActionContext.class,i);
		}
		public List<TerminalNode> DELETE() { return getTokens(PostgreSQLStatementParser.DELETE); }
		public TerminalNode DELETE(int i) {
			return getToken(PostgreSQLStatementParser.DELETE, i);
		}
		public List<TerminalNode> UPDATE() { return getTokens(PostgreSQLStatementParser.UPDATE); }
		public TerminalNode UPDATE(int i) {
			return getToken(PostgreSQLStatementParser.UPDATE, i);
		}
		public TableConstraintOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraintOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTableConstraintOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTableConstraintOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTableConstraintOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintOptionContext tableConstraintOption() throws RecognitionException {
		TableConstraintOptionContext _localctx = new TableConstraintOptionContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_tableConstraintOption);
		int _la;
		try {
			setState(6164);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHECK:
				enterOuterAlt(_localctx, 1);
				{
				setState(6119);
				checkOption();
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6120);
				match(UNIQUE);
				setState(6121);
				columnNames();
				setState(6122);
				indexParameters();
				}
				break;
			case PRIMARY:
			case KEY:
				enterOuterAlt(_localctx, 3);
				{
				setState(6124);
				primaryKey();
				setState(6125);
				columnNames();
				setState(6126);
				indexParameters();
				}
				break;
			case EXCLUDE:
				enterOuterAlt(_localctx, 4);
				{
				setState(6128);
				match(EXCLUDE);
				setState(6131);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(6129);
					match(USING);
					setState(6130);
					ignoredIdentifier();
					}
				}

				setState(6133);
				match(LP_);
				setState(6134);
				exclusionConstraintList();
				setState(6135);
				match(RP_);
				setState(6136);
				indexParameters();
				setState(6138);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(6137);
					exclusionWhereClause();
					}
				}

				}
				break;
			case FOREIGN:
				enterOuterAlt(_localctx, 5);
				{
				setState(6140);
				match(FOREIGN);
				setState(6141);
				match(KEY);
				setState(6142);
				columnNames();
				setState(6143);
				match(REFERENCES);
				setState(6144);
				tableName();
				setState(6146);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(6145);
					columnNames();
					}
				}

				setState(6154);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,533,_ctx) ) {
				case 1:
					{
					setState(6148);
					match(MATCH);
					setState(6149);
					match(FULL);
					}
					break;
				case 2:
					{
					setState(6150);
					match(MATCH);
					setState(6151);
					match(PARTIAL);
					}
					break;
				case 3:
					{
					setState(6152);
					match(MATCH);
					setState(6153);
					match(SIMPLE);
					}
					break;
				}
				setState(6161);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ON) {
					{
					{
					setState(6156);
					match(ON);
					setState(6157);
					_la = _input.LA(1);
					if ( !(_la==UPDATE || _la==DELETE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(6158);
					action();
					}
					}
					setState(6163);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExclusionWhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PostgreSQLStatementParser.WHERE, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public ExclusionWhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionWhereClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterExclusionWhereClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitExclusionWhereClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitExclusionWhereClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExclusionWhereClauseContext exclusionWhereClause() throws RecognitionException {
		ExclusionWhereClauseContext _localctx = new ExclusionWhereClauseContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_exclusionWhereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6166);
			match(WHERE);
			setState(6167);
			match(LP_);
			setState(6168);
			aExpr(0);
			setState(6169);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExclusionConstraintListContext extends ParserRuleContext {
		public List<ExclusionConstraintElemContext> exclusionConstraintElem() {
			return getRuleContexts(ExclusionConstraintElemContext.class);
		}
		public ExclusionConstraintElemContext exclusionConstraintElem(int i) {
			return getRuleContext(ExclusionConstraintElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public ExclusionConstraintListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionConstraintList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterExclusionConstraintList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitExclusionConstraintList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitExclusionConstraintList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExclusionConstraintListContext exclusionConstraintList() throws RecognitionException {
		ExclusionConstraintListContext _localctx = new ExclusionConstraintListContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_exclusionConstraintList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6171);
			exclusionConstraintElem();
			setState(6176);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(6172);
				match(COMMA_);
				setState(6173);
				exclusionConstraintElem();
				}
				}
				setState(6178);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExclusionConstraintElemContext extends ParserRuleContext {
		public IndexElemContext indexElem() {
			return getRuleContext(IndexElemContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public AnyOperatorContext anyOperator() {
			return getRuleContext(AnyOperatorContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLStatementParser.OPERATOR, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public ExclusionConstraintElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionConstraintElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterExclusionConstraintElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitExclusionConstraintElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitExclusionConstraintElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExclusionConstraintElemContext exclusionConstraintElem() throws RecognitionException {
		ExclusionConstraintElemContext _localctx = new ExclusionConstraintElemContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_exclusionConstraintElem);
		try {
			setState(6190);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,537,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6179);
				indexElem();
				setState(6180);
				match(WITH);
				setState(6181);
				anyOperator();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6183);
				indexElem();
				setState(6184);
				match(WITH);
				setState(6185);
				match(OPERATOR);
				setState(6186);
				match(LP_);
				setState(6187);
				anyOperator();
				setState(6188);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InheritClauseContext extends ParserRuleContext {
		public TerminalNode INHERITS() { return getToken(PostgreSQLStatementParser.INHERITS, 0); }
		public TableNamesContext tableNames() {
			return getRuleContext(TableNamesContext.class,0);
		}
		public InheritClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inheritClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterInheritClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitInheritClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitInheritClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InheritClauseContext inheritClause() throws RecognitionException {
		InheritClauseContext _localctx = new InheritClauseContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_inheritClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6194);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INHERITS) {
				{
				setState(6192);
				match(INHERITS);
				setState(6193);
				tableNames();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionSpecContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PostgreSQLStatementParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public PartStrategyContext partStrategy() {
			return getRuleContext(PartStrategyContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public PartParamsContext partParams() {
			return getRuleContext(PartParamsContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public PartitionSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterPartitionSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitPartitionSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitPartitionSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionSpecContext partitionSpec() throws RecognitionException {
		PartitionSpecContext _localctx = new PartitionSpecContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_partitionSpec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6196);
			match(PARTITION);
			setState(6197);
			match(BY);
			setState(6198);
			partStrategy();
			setState(6199);
			match(LP_);
			setState(6200);
			partParams();
			setState(6201);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartParamsContext extends ParserRuleContext {
		public List<PartElemContext> partElem() {
			return getRuleContexts(PartElemContext.class);
		}
		public PartElemContext partElem(int i) {
			return getRuleContext(PartElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public PartParamsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partParams; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterPartParams(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitPartParams(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitPartParams(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartParamsContext partParams() throws RecognitionException {
		PartParamsContext _localctx = new PartParamsContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_partParams);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6203);
			partElem();
			setState(6208);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(6204);
				match(COMMA_);
				setState(6205);
				partElem();
				}
				}
				setState(6210);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartElemContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(PostgreSQLStatementParser.COLLATE, 0); }
		public List<AnyNameContext> anyName() {
			return getRuleContexts(AnyNameContext.class);
		}
		public AnyNameContext anyName(int i) {
			return getRuleContext(AnyNameContext.class,i);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public FuncExprWindowlessContext funcExprWindowless() {
			return getRuleContext(FuncExprWindowlessContext.class,0);
		}
		public PartElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterPartElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitPartElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitPartElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartElemContext partElem() throws RecognitionException {
		PartElemContext _localctx = new PartElemContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_partElem);
		int _la;
		try {
			setState(6237);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,546,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6211);
				colId();
				setState(6214);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(6212);
					match(COLLATE);
					setState(6213);
					anyName();
					}
				}

				setState(6217);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & -1702650966907551743L) != 0) || ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & -36028934466307075L) != 0) || ((((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & 283126353889277L) != 0) || ((((_la - 241)) & ~0x3f) == 0 && ((1L << (_la - 241)) & -545622264849L) != 0) || ((((_la - 305)) & ~0x3f) == 0 && ((1L << (_la - 305)) & -1L) != 0) || ((((_la - 369)) & ~0x3f) == 0 && ((1L << (_la - 369)) & 9895604649983L) != 0) || ((((_la - 437)) & ~0x3f) == 0 && ((1L << (_la - 437)) & 562950016917239L) != 0) || ((((_la - 505)) & ~0x3f) == 0 && ((1L << (_la - 505)) & 7138750043982826433L) != 0) || ((((_la - 569)) & ~0x3f) == 0 && ((1L << (_la - 569)) & 2173569L) != 0)) {
					{
					setState(6216);
					anyName();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6219);
				match(LP_);
				setState(6220);
				aExpr(0);
				setState(6221);
				match(RP_);
				setState(6224);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(6222);
					match(COLLATE);
					setState(6223);
					anyName();
					}
				}

				setState(6227);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & -1702650966907551743L) != 0) || ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & -36028934466307075L) != 0) || ((((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & 283126353889277L) != 0) || ((((_la - 241)) & ~0x3f) == 0 && ((1L << (_la - 241)) & -545622264849L) != 0) || ((((_la - 305)) & ~0x3f) == 0 && ((1L << (_la - 305)) & -1L) != 0) || ((((_la - 369)) & ~0x3f) == 0 && ((1L << (_la - 369)) & 9895604649983L) != 0) || ((((_la - 437)) & ~0x3f) == 0 && ((1L << (_la - 437)) & 562950016917239L) != 0) || ((((_la - 505)) & ~0x3f) == 0 && ((1L << (_la - 505)) & 7138750043982826433L) != 0) || ((((_la - 569)) & ~0x3f) == 0 && ((1L << (_la - 569)) & 2173569L) != 0)) {
					{
					setState(6226);
					anyName();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6229);
				funcExprWindowless();
				setState(6232);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(6230);
					match(COLLATE);
					setState(6231);
					anyName();
					}
				}

				setState(6235);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & -1702650966907551743L) != 0) || ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & -36028934466307075L) != 0) || ((((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & 283126353889277L) != 0) || ((((_la - 241)) & ~0x3f) == 0 && ((1L << (_la - 241)) & -545622264849L) != 0) || ((((_la - 305)) & ~0x3f) == 0 && ((1L << (_la - 305)) & -1L) != 0) || ((((_la - 369)) & ~0x3f) == 0 && ((1L << (_la - 369)) & 9895604649983L) != 0) || ((((_la - 437)) & ~0x3f) == 0 && ((1L << (_la - 437)) & 562950016917239L) != 0) || ((((_la - 505)) & ~0x3f) == 0 && ((1L << (_la - 505)) & 7138750043982826433L) != 0) || ((((_la - 569)) & ~0x3f) == 0 && ((1L << (_la - 569)) & 2173569L) != 0)) {
					{
					setState(6234);
					anyName();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FuncExprWindowlessContext extends ParserRuleContext {
		public FuncApplicationContext funcApplication() {
			return getRuleContext(FuncApplicationContext.class,0);
		}
		public FunctionExprCommonSubexprContext functionExprCommonSubexpr() {
			return getRuleContext(FunctionExprCommonSubexprContext.class,0);
		}
		public FuncExprWindowlessContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcExprWindowless; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterFuncExprWindowless(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitFuncExprWindowless(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitFuncExprWindowless(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncExprWindowlessContext funcExprWindowless() throws RecognitionException {
		FuncExprWindowlessContext _localctx = new FuncExprWindowlessContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_funcExprWindowless);
		try {
			setState(6241);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,547,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6239);
				funcApplication();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6240);
				functionExprCommonSubexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartStrategyContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UnreservedWordContext unreservedWord() {
			return getRuleContext(UnreservedWordContext.class,0);
		}
		public PartStrategyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partStrategy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterPartStrategy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitPartStrategy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitPartStrategy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartStrategyContext partStrategy() throws RecognitionException {
		PartStrategyContext _localctx = new PartStrategyContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_partStrategy);
		try {
			setState(6245);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,548,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6243);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6244);
				unreservedWord();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateIndexSpecificationContext extends ParserRuleContext {
		public TerminalNode UNIQUE() { return getToken(PostgreSQLStatementParser.UNIQUE, 0); }
		public CreateIndexSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndexSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateIndexSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateIndexSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateIndexSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexSpecificationContext createIndexSpecification() throws RecognitionException {
		CreateIndexSpecificationContext _localctx = new CreateIndexSpecificationContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_createIndexSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6248);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNIQUE) {
				{
				setState(6247);
				match(UNIQUE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConcurrentlyClauseContext extends ParserRuleContext {
		public TerminalNode CONCURRENTLY() { return getToken(PostgreSQLStatementParser.CONCURRENTLY, 0); }
		public ConcurrentlyClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concurrentlyClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterConcurrentlyClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitConcurrentlyClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitConcurrentlyClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConcurrentlyClauseContext concurrentlyClause() throws RecognitionException {
		ConcurrentlyClauseContext _localctx = new ConcurrentlyClauseContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_concurrentlyClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6251);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONCURRENTLY) {
				{
				setState(6250);
				match(CONCURRENTLY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OnlyClauseContext extends ParserRuleContext {
		public TerminalNode ONLY() { return getToken(PostgreSQLStatementParser.ONLY, 0); }
		public OnlyClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onlyClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOnlyClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOnlyClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOnlyClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnlyClauseContext onlyClause() throws RecognitionException {
		OnlyClauseContext _localctx = new OnlyClauseContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_onlyClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6254);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ONLY) {
				{
				setState(6253);
				match(ONLY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AsteriskClauseContext extends ParserRuleContext {
		public TerminalNode ASTERISK_() { return getToken(PostgreSQLStatementParser.ASTERISK_, 0); }
		public AsteriskClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asteriskClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAsteriskClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAsteriskClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAsteriskClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsteriskClauseContext asteriskClause() throws RecognitionException {
		AsteriskClauseContext _localctx = new AsteriskClauseContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_asteriskClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6257);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASTERISK_) {
				{
				setState(6256);
				match(ASTERISK_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterDefinitionClauseContext extends ParserRuleContext {
		public AlterTableActionsContext alterTableActions() {
			return getRuleContext(AlterTableActionsContext.class,0);
		}
		public RenameColumnSpecificationContext renameColumnSpecification() {
			return getRuleContext(RenameColumnSpecificationContext.class,0);
		}
		public RenameConstraintContext renameConstraint() {
			return getRuleContext(RenameConstraintContext.class,0);
		}
		public RenameTableSpecificationContext renameTableSpecification() {
			return getRuleContext(RenameTableSpecificationContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public PartitionCmdContext partitionCmd() {
			return getRuleContext(PartitionCmdContext.class,0);
		}
		public AlterDefinitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDefinitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterDefinitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterDefinitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterDefinitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDefinitionClauseContext alterDefinitionClause() throws RecognitionException {
		AlterDefinitionClauseContext _localctx = new AlterDefinitionClauseContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_alterDefinitionClause);
		try {
			setState(6267);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,553,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6259);
				alterTableActions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6260);
				renameColumnSpecification();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6261);
				renameConstraint();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6262);
				renameTableSpecification();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6263);
				match(SET);
				setState(6264);
				match(SCHEMA);
				setState(6265);
				name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6266);
				partitionCmd();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionCmdContext extends ParserRuleContext {
		public TerminalNode ATTACH() { return getToken(PostgreSQLStatementParser.ATTACH, 0); }
		public TerminalNode PARTITION() { return getToken(PostgreSQLStatementParser.PARTITION, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public PartitionBoundSpecContext partitionBoundSpec() {
			return getRuleContext(PartitionBoundSpecContext.class,0);
		}
		public TerminalNode DETACH() { return getToken(PostgreSQLStatementParser.DETACH, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(PostgreSQLStatementParser.CONCURRENTLY, 0); }
		public TerminalNode FINALIZE() { return getToken(PostgreSQLStatementParser.FINALIZE, 0); }
		public PartitionCmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionCmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterPartitionCmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitPartitionCmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitPartitionCmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionCmdContext partitionCmd() throws RecognitionException {
		PartitionCmdContext _localctx = new PartitionCmdContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_partitionCmd);
		int _la;
		try {
			setState(6280);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ATTACH:
				enterOuterAlt(_localctx, 1);
				{
				setState(6269);
				match(ATTACH);
				setState(6270);
				match(PARTITION);
				setState(6271);
				qualifiedName();
				setState(6272);
				partitionBoundSpec();
				}
				break;
			case DETACH:
				enterOuterAlt(_localctx, 2);
				{
				setState(6274);
				match(DETACH);
				setState(6275);
				match(PARTITION);
				setState(6276);
				qualifiedName();
				setState(6278);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONCURRENTLY || _la==FINALIZE) {
					{
					setState(6277);
					_la = _input.LA(1);
					if ( !(_la==CONCURRENTLY || _la==FINALIZE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterIndexDefinitionClauseContext extends ParserRuleContext {
		public RenameIndexSpecificationContext renameIndexSpecification() {
			return getRuleContext(RenameIndexSpecificationContext.class,0);
		}
		public AlterIndexDependsOnExtensionContext alterIndexDependsOnExtension() {
			return getRuleContext(AlterIndexDependsOnExtensionContext.class,0);
		}
		public AlterIndexSetTableSpaceContext alterIndexSetTableSpace() {
			return getRuleContext(AlterIndexSetTableSpaceContext.class,0);
		}
		public AlterTableCmdsContext alterTableCmds() {
			return getRuleContext(AlterTableCmdsContext.class,0);
		}
		public IndexPartitionCmdContext indexPartitionCmd() {
			return getRuleContext(IndexPartitionCmdContext.class,0);
		}
		public AlterIndexDefinitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIndexDefinitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterIndexDefinitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterIndexDefinitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterIndexDefinitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIndexDefinitionClauseContext alterIndexDefinitionClause() throws RecognitionException {
		AlterIndexDefinitionClauseContext _localctx = new AlterIndexDefinitionClauseContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_alterIndexDefinitionClause);
		try {
			setState(6287);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,556,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6282);
				renameIndexSpecification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6283);
				alterIndexDependsOnExtension();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6284);
				alterIndexSetTableSpace();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6285);
				alterTableCmds();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6286);
				indexPartitionCmd();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexPartitionCmdContext extends ParserRuleContext {
		public TerminalNode ATTACH() { return getToken(PostgreSQLStatementParser.ATTACH, 0); }
		public TerminalNode PARTITION() { return getToken(PostgreSQLStatementParser.PARTITION, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public IndexPartitionCmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexPartitionCmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterIndexPartitionCmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitIndexPartitionCmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitIndexPartitionCmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexPartitionCmdContext indexPartitionCmd() throws RecognitionException {
		IndexPartitionCmdContext _localctx = new IndexPartitionCmdContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_indexPartitionCmd);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6289);
			match(ATTACH);
			setState(6290);
			match(PARTITION);
			setState(6291);
			qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RenameIndexSpecificationContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public RenameIndexSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameIndexSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterRenameIndexSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitRenameIndexSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitRenameIndexSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameIndexSpecificationContext renameIndexSpecification() throws RecognitionException {
		RenameIndexSpecificationContext _localctx = new RenameIndexSpecificationContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_renameIndexSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6293);
			match(RENAME);
			setState(6294);
			match(TO);
			setState(6295);
			indexName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterIndexDependsOnExtensionContext extends ParserRuleContext {
		public TerminalNode DEPENDS() { return getToken(PostgreSQLStatementParser.DEPENDS, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLStatementParser.EXTENSION, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public AlterIndexDependsOnExtensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIndexDependsOnExtension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterIndexDependsOnExtension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterIndexDependsOnExtension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterIndexDependsOnExtension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIndexDependsOnExtensionContext alterIndexDependsOnExtension() throws RecognitionException {
		AlterIndexDependsOnExtensionContext _localctx = new AlterIndexDependsOnExtensionContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_alterIndexDependsOnExtension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6297);
			match(DEPENDS);
			setState(6298);
			match(ON);
			setState(6299);
			match(EXTENSION);
			setState(6300);
			ignoredIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterIndexSetTableSpaceContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLStatementParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OWNED() { return getToken(PostgreSQLStatementParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public IgnoredIdentifiersContext ignoredIdentifiers() {
			return getRuleContext(IgnoredIdentifiersContext.class,0);
		}
		public TerminalNode NOWAIT() { return getToken(PostgreSQLStatementParser.NOWAIT, 0); }
		public AlterIndexSetTableSpaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIndexSetTableSpace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterIndexSetTableSpace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterIndexSetTableSpace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterIndexSetTableSpace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIndexSetTableSpaceContext alterIndexSetTableSpace() throws RecognitionException {
		AlterIndexSetTableSpaceContext _localctx = new AlterIndexSetTableSpaceContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_alterIndexSetTableSpace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6305);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OWNED) {
				{
				setState(6302);
				match(OWNED);
				setState(6303);
				match(BY);
				setState(6304);
				ignoredIdentifiers();
				}
			}

			setState(6307);
			match(SET);
			setState(6308);
			match(TABLESPACE);
			setState(6309);
			name();
			setState(6311);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT) {
				{
				setState(6310);
				match(NOWAIT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableNamesClauseContext extends ParserRuleContext {
		public List<TableNameClauseContext> tableNameClause() {
			return getRuleContexts(TableNameClauseContext.class);
		}
		public TableNameClauseContext tableNameClause(int i) {
			return getRuleContext(TableNameClauseContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public TableNamesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableNamesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTableNamesClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTableNamesClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTableNamesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNamesClauseContext tableNamesClause() throws RecognitionException {
		TableNamesClauseContext _localctx = new TableNamesClauseContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_tableNamesClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6313);
			tableNameClause();
			setState(6318);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(6314);
				match(COMMA_);
				setState(6315);
				tableNameClause();
				}
				}
				setState(6320);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableNameClauseContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode ASTERISK_() { return getToken(PostgreSQLStatementParser.ASTERISK_, 0); }
		public TableNameClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableNameClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTableNameClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTableNameClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTableNameClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNameClauseContext tableNameClause() throws RecognitionException {
		TableNameClauseContext _localctx = new TableNameClauseContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_tableNameClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6321);
			tableName();
			setState(6323);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASTERISK_) {
				{
				setState(6322);
				match(ASTERISK_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterTableActionsContext extends ParserRuleContext {
		public List<AlterTableActionContext> alterTableAction() {
			return getRuleContexts(AlterTableActionContext.class);
		}
		public AlterTableActionContext alterTableAction(int i) {
			return getRuleContext(AlterTableActionContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public AlterTableActionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableActions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterTableActions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterTableActions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableActions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableActionsContext alterTableActions() throws RecognitionException {
		AlterTableActionsContext _localctx = new AlterTableActionsContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_alterTableActions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6325);
			alterTableAction();
			setState(6330);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(6326);
				match(COMMA_);
				setState(6327);
				alterTableAction();
				}
				}
				setState(6332);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterTableActionContext extends ParserRuleContext {
		public AddColumnSpecificationContext addColumnSpecification() {
			return getRuleContext(AddColumnSpecificationContext.class,0);
		}
		public DropColumnSpecificationContext dropColumnSpecification() {
			return getRuleContext(DropColumnSpecificationContext.class,0);
		}
		public ModifyColumnSpecificationContext modifyColumnSpecification() {
			return getRuleContext(ModifyColumnSpecificationContext.class,0);
		}
		public AddConstraintSpecificationContext addConstraintSpecification() {
			return getRuleContext(AddConstraintSpecificationContext.class,0);
		}
		public ModifyConstraintSpecificationContext modifyConstraintSpecification() {
			return getRuleContext(ModifyConstraintSpecificationContext.class,0);
		}
		public ValidateConstraintSpecificationContext validateConstraintSpecification() {
			return getRuleContext(ValidateConstraintSpecificationContext.class,0);
		}
		public DropConstraintSpecificationContext dropConstraintSpecification() {
			return getRuleContext(DropConstraintSpecificationContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public List<ColIdContext> colId() {
			return getRuleContexts(ColIdContext.class);
		}
		public ColIdContext colId(int i) {
			return getRuleContext(ColIdContext.class,i);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLStatementParser.STATISTICS, 0); }
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(PostgreSQLStatementParser.COLUMN, 0); }
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode RESET() { return getToken(PostgreSQLStatementParser.RESET, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLStatementParser.STORAGE, 0); }
		public ColumnCompressionContext columnCompression() {
			return getRuleContext(ColumnCompressionContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode EXPRESSION() { return getToken(PostgreSQLStatementParser.EXPRESSION, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode TRIGGER() { return getToken(PostgreSQLStatementParser.TRIGGER, 0); }
		public TerminalNode DISABLE() { return getToken(PostgreSQLStatementParser.DISABLE, 0); }
		public TerminalNode ENABLE() { return getToken(PostgreSQLStatementParser.ENABLE, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLStatementParser.USER, 0); }
		public TerminalNode REPLICA() { return getToken(PostgreSQLStatementParser.REPLICA, 0); }
		public TerminalNode ALWAYS() { return getToken(PostgreSQLStatementParser.ALWAYS, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLStatementParser.RULE, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLStatementParser.ROW, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLStatementParser.LEVEL, 0); }
		public TerminalNode SECURITY() { return getToken(PostgreSQLStatementParser.SECURITY, 0); }
		public TerminalNode FORCE() { return getToken(PostgreSQLStatementParser.FORCE, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode CLUSTER() { return getToken(PostgreSQLStatementParser.CLUSTER, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public List<TerminalNode> ACCESS() { return getTokens(PostgreSQLStatementParser.ACCESS); }
		public TerminalNode ACCESS(int i) {
			return getToken(PostgreSQLStatementParser.ACCESS, i);
		}
		public List<TerminalNode> METHOD() { return getTokens(PostgreSQLStatementParser.METHOD); }
		public TerminalNode METHOD(int i) {
			return getToken(PostgreSQLStatementParser.METHOD, i);
		}
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public TerminalNode WITHOUT() { return getToken(PostgreSQLStatementParser.WITHOUT, 0); }
		public TerminalNode OIDS() { return getToken(PostgreSQLStatementParser.OIDS, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLStatementParser.TABLESPACE, 0); }
		public TerminalNode LOGGED() { return getToken(PostgreSQLStatementParser.LOGGED, 0); }
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLStatementParser.UNLOGGED, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public List<StorageParameterWithValueContext> storageParameterWithValue() {
			return getRuleContexts(StorageParameterWithValueContext.class);
		}
		public StorageParameterWithValueContext storageParameterWithValue(int i) {
			return getRuleContext(StorageParameterWithValueContext.class,i);
		}
		public List<StorageParameterContext> storageParameter() {
			return getRuleContexts(StorageParameterContext.class);
		}
		public StorageParameterContext storageParameter(int i) {
			return getRuleContext(StorageParameterContext.class,i);
		}
		public TerminalNode INHERIT() { return getToken(PostgreSQLStatementParser.INHERIT, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode OF() { return getToken(PostgreSQLStatementParser.OF, 0); }
		public DataTypeNameContext dataTypeName() {
			return getRuleContext(DataTypeNameContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLStatementParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLStatementParser.SESSION_USER, 0); }
		public TerminalNode IDENTITY() { return getToken(PostgreSQLStatementParser.IDENTITY, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public TerminalNode FULL() { return getToken(PostgreSQLStatementParser.FULL, 0); }
		public TerminalNode NOTHING() { return getToken(PostgreSQLStatementParser.NOTHING, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLStatementParser.INDEX, 0); }
		public AlterTableActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterTableAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterTableAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableActionContext alterTableAction() throws RecognitionException {
		AlterTableActionContext _localctx = new AlterTableActionContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_alterTableAction);
		int _la;
		try {
			int _alt;
			setState(6522);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,579,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6333);
				addColumnSpecification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6334);
				dropColumnSpecification();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6335);
				modifyColumnSpecification();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6336);
				addConstraintSpecification();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6337);
				modifyConstraintSpecification();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6338);
				validateConstraintSpecification();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6339);
				dropConstraintSpecification();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6340);
				match(ALTER);
				setState(6342);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6341);
					match(COLUMN);
					}
				}

				setState(6344);
				colId();
				setState(6345);
				match(SET);
				setState(6346);
				match(STATISTICS);
				setState(6347);
				signedIconst();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6349);
				match(ALTER);
				setState(6351);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6350);
					match(COLUMN);
					}
				}

				setState(6353);
				match(NUMBER_);
				setState(6354);
				match(SET);
				setState(6355);
				match(STATISTICS);
				setState(6356);
				signedIconst();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6357);
				match(ALTER);
				setState(6359);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6358);
					match(COLUMN);
					}
				}

				setState(6361);
				colId();
				setState(6362);
				match(SET);
				setState(6363);
				reloptions();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6365);
				match(ALTER);
				setState(6367);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6366);
					match(COLUMN);
					}
				}

				setState(6369);
				colId();
				setState(6370);
				match(RESET);
				setState(6371);
				reloptions();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6373);
				match(ALTER);
				setState(6375);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6374);
					match(COLUMN);
					}
				}

				setState(6377);
				colId();
				setState(6378);
				match(SET);
				setState(6379);
				match(STORAGE);
				setState(6380);
				colId();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6382);
				match(ALTER);
				setState(6384);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6383);
					match(COLUMN);
					}
				}

				setState(6386);
				colId();
				setState(6387);
				match(SET);
				setState(6388);
				columnCompression();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6390);
				match(ALTER);
				setState(6392);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6391);
					match(COLUMN);
					}
				}

				setState(6394);
				colId();
				setState(6395);
				match(DROP);
				setState(6396);
				match(EXPRESSION);
				setState(6398);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(6397);
					ifExists();
					}
				}

				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6400);
				_la = _input.LA(1);
				if ( !(_la==ENABLE || _la==DISABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6401);
				match(TRIGGER);
				setState(6405);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UNICODE_ESCAPE:
				case ADMIN:
				case ESCAPE:
				case EXCLUDE:
				case MOD:
				case PARTITION:
				case UNKNOWN:
				case ALWAYS:
				case CASCADE:
				case GENERATED:
				case ISOLATION:
				case LEVEL:
				case NO:
				case OPTION:
				case PRIVILEGES:
				case READ:
				case ROLE:
				case ROWS:
				case START:
				case TRANSACTION:
				case ACTION:
				case CACHE:
				case CHARACTERISTICS:
				case CLUSTER:
				case COMMENTS:
				case CONSTRAINTS:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DEFAULTS:
				case DEFERRED:
				case DEPENDS:
				case DOMAIN:
				case EXCLUDING:
				case EXECUTE:
				case EXTENDED:
				case EXTENSION:
				case EXTERNAL:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case GLOBAL:
				case IDENTITY:
				case IMMEDIATE:
				case INCLUDING:
				case INCREMENT:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INCLUDE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LOGGED:
				case MAIN:
				case MATCH:
				case MAXVALUE:
				case MINVALUE:
				case NOTHING:
				case NULLS:
				case OBJECT:
				case OIDS:
				case OVER:
				case OWNED:
				case OWNER:
				case PARTIAL:
				case PLAIN:
				case PRECEDING:
				case RANGE:
				case RENAME:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case ROUTINE:
				case RULE:
				case SECURITY:
				case SEQUENCE:
				case SESSION:
				case SHOW:
				case SIMPLE:
				case STATISTICS:
				case STORAGE:
				case TABLESPACE:
				case TEMP:
				case TEMPORARY:
				case UNBOUNDED:
				case UNLOGGED:
				case VALID:
				case VALIDATE:
				case WITHIN:
				case WITHOUT:
				case ZONE:
				case OF:
				case UESCAPE:
				case GROUPS:
				case RECURSIVE:
				case BYTEA:
				case ENUM:
				case POINT:
				case LSEG:
				case BOX:
				case PATH:
				case POLYGON:
				case CIRCLE:
				case XML:
				case JSON:
				case ORDINALITY:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case REF:
				case PASSING:
				case VERSION:
				case YES:
				case STANDALONE:
				case MATERIALIZED:
				case OPERATOR:
				case SHARE:
				case ROLLUP:
				case DOCUMENT:
				case NORMALIZED:
				case NOWAIT:
				case LOCKED:
				case COLUMNS:
				case CONTENT:
				case STRIP:
				case WHITESPACE:
				case CONFLICT:
				case OVERRIDING:
				case SYSTEM:
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case ASSERTION:
				case ASSIGNMENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CALLED:
				case CATALOG:
				case CHAIN:
				case CHECKPOINT:
				case CLASS:
				case CONFIGURATION:
				case COMMENT:
				case DETACH:
				case DICTIONARY:
				case EXPRESSION:
				case INSENSITIVE:
				case DISCARD:
				case OFF:
				case INSTEAD:
				case EXPLAIN:
				case INPUT:
				case INLINE:
				case PARALLEL:
				case LEAKPROOF:
				case COMMITTED:
				case ENCODING:
				case IMPLICIT:
				case DELIMITER:
				case CURSOR:
				case EACH:
				case EVENT:
				case DEALLOCATE:
				case CONNECTION:
				case DECLARE:
				case FAMILY:
				case FORWARD:
				case EXCLUSIVE:
				case FUNCTIONS:
				case LOCATION:
				case LABEL:
				case DELIMITERS:
				case HANDLER:
				case HEADER:
				case IMMUTABLE:
				case GRANTED:
				case HOLD:
				case MAPPING:
				case OLD:
				case METHOD:
				case LOAD:
				case LISTEN:
				case MODE:
				case MOVE:
				case PROCEDURAL:
				case PARSER:
				case PROCEDURES:
				case ENCRYPTED:
				case PUBLICATION:
				case PROGRAM:
				case REFERENCING:
				case PLANS:
				case REINDEX:
				case PRIOR:
				case PASSWORD:
				case RELATIVE:
				case QUOTE:
				case ROUTINES:
				case REPLACE:
				case SNAPSHOT:
				case REFRESH:
				case PREPARE:
				case OPTIONS:
				case IMPORT:
				case INVOKER:
				case NEW:
				case PREPARED:
				case SCROLL:
				case SEQUENCES:
				case SYSID:
				case REASSIGN:
				case SERVER:
				case SUBSCRIPTION:
				case SEARCH:
				case SCHEMAS:
				case RECHECK:
				case POLICY:
				case NOTIFY:
				case LOCK:
				case RELEASE:
				case SERIALIZABLE:
				case RETURNS:
				case STATEMENT:
				case STDIN:
				case STDOUT:
				case TABLES:
				case SUPPORT:
				case STABLE:
				case TEMPLATE:
				case UNENCRYPTED:
				case VIEWS:
				case UNCOMMITTED:
				case TRANSFORM:
				case UNLISTEN:
				case TRUSTED:
				case VALIDATOR:
				case UNTIL:
				case VACUUM:
				case VOLATILE:
				case STORED:
				case WRITE:
				case STRICT:
				case TYPES:
				case WRAPPER:
				case WORK:
				case PARAM:
				case INSERT:
				case UPDATE:
				case DELETE:
				case ALTER:
				case DROP:
				case TRUNCATE:
				case SCHEMA:
				case REVOKE:
				case ADD:
				case SET:
				case TABLE:
				case INDEX:
				case CONSTRAINT:
				case KEY:
				case FUNCTION:
				case TRIGGER:
				case PROCEDURE:
				case VIEW:
				case IF:
				case BY:
				case BEGIN:
				case COMMIT:
				case ROLLBACK:
				case SAVEPOINT:
				case DOUBLE:
				case INTERVAL:
				case TIME:
				case TIMESTAMP:
				case YEAR:
				case QUARTER:
				case MONTH:
				case WEEK:
				case DAY:
				case HOUR:
				case MINUTE:
				case SECOND:
				case CURRENT:
				case ENABLE:
				case DISABLE:
				case CALL:
				case PRESERVE:
				case DEFINER:
				case SQL:
				case CASCADED:
				case LOCAL:
				case CLOSE:
				case NEXT:
				case NAME:
				case COLLATION:
				case NAMES:
				case TYPE:
				case TEXT:
				case REPEATABLE:
				case VARYING:
				case NATIONAL:
				case VALUE:
				case TIES:
				case CUBE:
				case SETS:
				case OTHERS:
				case AT:
				case IDENTIFIER_:
					{
					setState(6402);
					ignoredIdentifier();
					}
					break;
				case ALL:
					{
					setState(6403);
					match(ALL);
					}
					break;
				case USER:
					{
					setState(6404);
					match(USER);
					}
					break;
				case EOF:
				case COMMA_:
				case SEMI_:
					break;
				default:
					break;
				}
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6407);
				match(ENABLE);
				setState(6408);
				_la = _input.LA(1);
				if ( !(_la==ALWAYS || _la==REPLICA) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6409);
				match(TRIGGER);
				setState(6410);
				ignoredIdentifier();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6411);
				_la = _input.LA(1);
				if ( !(_la==ENABLE || _la==DISABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6412);
				match(RULE);
				setState(6413);
				ignoredIdentifier();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(6414);
				match(ENABLE);
				setState(6415);
				_la = _input.LA(1);
				if ( !(_la==ALWAYS || _la==REPLICA) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6416);
				match(RULE);
				setState(6417);
				ignoredIdentifier();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(6424);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DISABLE:
					{
					setState(6418);
					match(DISABLE);
					}
					break;
				case ENABLE:
					{
					setState(6419);
					match(ENABLE);
					}
					break;
				case NO:
				case FORCE:
					{
					{
					setState(6421);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NO) {
						{
						setState(6420);
						match(NO);
						}
					}

					setState(6423);
					match(FORCE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6426);
				match(ROW);
				setState(6427);
				match(LEVEL);
				setState(6428);
				match(SECURITY);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(6429);
				match(CLUSTER);
				setState(6430);
				match(ON);
				setState(6431);
				indexName();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(6432);
				match(SET);
				{
				setState(6433);
				match(ACCESS);
				setState(6434);
				match(METHOD);
				setState(6435);
				name();
				}
				setState(6443);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,573,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6437);
						match(COMMA_);
						setState(6438);
						match(ACCESS);
						setState(6439);
						match(METHOD);
						setState(6440);
						name();
						}
						} 
					}
					setState(6445);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,573,_ctx);
				}
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(6446);
				match(SET);
				setState(6447);
				match(WITHOUT);
				setState(6448);
				match(CLUSTER);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(6449);
				match(SET);
				setState(6450);
				_la = _input.LA(1);
				if ( !(_la==WITHOUT || _la==WITH) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6451);
				match(OIDS);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(6452);
				match(SET);
				setState(6453);
				match(STATISTICS);
				setState(6454);
				signedIconst();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(6455);
				match(SET);
				setState(6456);
				match(TABLESPACE);
				setState(6457);
				ignoredIdentifier();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(6458);
				match(SET);
				setState(6459);
				_la = _input.LA(1);
				if ( !(_la==LOGGED || _la==UNLOGGED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(6460);
				match(SET);
				setState(6461);
				match(LP_);
				{
				setState(6462);
				storageParameterWithValue();
				}
				setState(6467);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(6463);
					match(COMMA_);
					setState(6464);
					storageParameterWithValue();
					}
					}
					setState(6469);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6470);
				match(RP_);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(6472);
				match(SET);
				setState(6473);
				match(LP_);
				{
				setState(6474);
				storageParameter();
				}
				setState(6479);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(6475);
					match(COMMA_);
					setState(6476);
					storageParameter();
					}
					}
					setState(6481);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6482);
				match(RP_);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(6484);
				match(RESET);
				setState(6485);
				match(LP_);
				setState(6486);
				storageParameterWithValue();
				setState(6491);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(6487);
					match(COMMA_);
					setState(6488);
					storageParameterWithValue();
					}
					}
					setState(6493);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6494);
				match(RP_);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(6496);
				match(INHERIT);
				setState(6497);
				tableName();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(6498);
				match(NO);
				setState(6499);
				match(INHERIT);
				setState(6500);
				tableName();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(6501);
				match(OF);
				setState(6502);
				dataTypeName();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(6503);
				match(NOT);
				setState(6504);
				match(OF);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(6505);
				match(OWNER);
				setState(6506);
				match(TO);
				setState(6510);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UNICODE_ESCAPE:
				case ADMIN:
				case ESCAPE:
				case EXCLUDE:
				case MOD:
				case PARTITION:
				case UNKNOWN:
				case ALWAYS:
				case CASCADE:
				case GENERATED:
				case ISOLATION:
				case LEVEL:
				case NO:
				case OPTION:
				case PRIVILEGES:
				case READ:
				case ROLE:
				case ROWS:
				case START:
				case TRANSACTION:
				case ACTION:
				case CACHE:
				case CHARACTERISTICS:
				case CLUSTER:
				case COMMENTS:
				case CONSTRAINTS:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DEFAULTS:
				case DEFERRED:
				case DEPENDS:
				case DOMAIN:
				case EXCLUDING:
				case EXECUTE:
				case EXTENDED:
				case EXTENSION:
				case EXTERNAL:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case GLOBAL:
				case IDENTITY:
				case IMMEDIATE:
				case INCLUDING:
				case INCREMENT:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INCLUDE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LOGGED:
				case MAIN:
				case MATCH:
				case MAXVALUE:
				case MINVALUE:
				case NOTHING:
				case NULLS:
				case OBJECT:
				case OIDS:
				case OVER:
				case OWNED:
				case OWNER:
				case PARTIAL:
				case PLAIN:
				case PRECEDING:
				case RANGE:
				case RENAME:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case ROUTINE:
				case RULE:
				case SECURITY:
				case SEQUENCE:
				case SESSION:
				case SHOW:
				case SIMPLE:
				case STATISTICS:
				case STORAGE:
				case TABLESPACE:
				case TEMP:
				case TEMPORARY:
				case UNBOUNDED:
				case UNLOGGED:
				case VALID:
				case VALIDATE:
				case WITHIN:
				case WITHOUT:
				case ZONE:
				case OF:
				case UESCAPE:
				case GROUPS:
				case RECURSIVE:
				case BYTEA:
				case ENUM:
				case POINT:
				case LSEG:
				case BOX:
				case PATH:
				case POLYGON:
				case CIRCLE:
				case XML:
				case JSON:
				case ORDINALITY:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case REF:
				case PASSING:
				case VERSION:
				case YES:
				case STANDALONE:
				case MATERIALIZED:
				case OPERATOR:
				case SHARE:
				case ROLLUP:
				case DOCUMENT:
				case NORMALIZED:
				case NOWAIT:
				case LOCKED:
				case COLUMNS:
				case CONTENT:
				case STRIP:
				case WHITESPACE:
				case CONFLICT:
				case OVERRIDING:
				case SYSTEM:
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case ASSERTION:
				case ASSIGNMENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CALLED:
				case CATALOG:
				case CHAIN:
				case CHECKPOINT:
				case CLASS:
				case CONFIGURATION:
				case COMMENT:
				case DETACH:
				case DICTIONARY:
				case EXPRESSION:
				case INSENSITIVE:
				case DISCARD:
				case OFF:
				case INSTEAD:
				case EXPLAIN:
				case INPUT:
				case INLINE:
				case PARALLEL:
				case LEAKPROOF:
				case COMMITTED:
				case ENCODING:
				case IMPLICIT:
				case DELIMITER:
				case CURSOR:
				case EACH:
				case EVENT:
				case DEALLOCATE:
				case CONNECTION:
				case DECLARE:
				case FAMILY:
				case FORWARD:
				case EXCLUSIVE:
				case FUNCTIONS:
				case LOCATION:
				case LABEL:
				case DELIMITERS:
				case HANDLER:
				case HEADER:
				case IMMUTABLE:
				case GRANTED:
				case HOLD:
				case MAPPING:
				case OLD:
				case METHOD:
				case LOAD:
				case LISTEN:
				case MODE:
				case MOVE:
				case PROCEDURAL:
				case PARSER:
				case PROCEDURES:
				case ENCRYPTED:
				case PUBLICATION:
				case PROGRAM:
				case REFERENCING:
				case PLANS:
				case REINDEX:
				case PRIOR:
				case PASSWORD:
				case RELATIVE:
				case QUOTE:
				case ROUTINES:
				case REPLACE:
				case SNAPSHOT:
				case REFRESH:
				case PREPARE:
				case OPTIONS:
				case IMPORT:
				case INVOKER:
				case NEW:
				case PREPARED:
				case SCROLL:
				case SEQUENCES:
				case SYSID:
				case REASSIGN:
				case SERVER:
				case SUBSCRIPTION:
				case SEARCH:
				case SCHEMAS:
				case RECHECK:
				case POLICY:
				case NOTIFY:
				case LOCK:
				case RELEASE:
				case SERIALIZABLE:
				case RETURNS:
				case STATEMENT:
				case STDIN:
				case STDOUT:
				case TABLES:
				case SUPPORT:
				case STABLE:
				case TEMPLATE:
				case UNENCRYPTED:
				case VIEWS:
				case UNCOMMITTED:
				case TRANSFORM:
				case UNLISTEN:
				case TRUSTED:
				case VALIDATOR:
				case UNTIL:
				case VACUUM:
				case VOLATILE:
				case STORED:
				case WRITE:
				case STRICT:
				case TYPES:
				case WRAPPER:
				case WORK:
				case PARAM:
				case INSERT:
				case UPDATE:
				case DELETE:
				case ALTER:
				case DROP:
				case TRUNCATE:
				case SCHEMA:
				case REVOKE:
				case ADD:
				case SET:
				case TABLE:
				case INDEX:
				case CONSTRAINT:
				case KEY:
				case FUNCTION:
				case TRIGGER:
				case PROCEDURE:
				case VIEW:
				case IF:
				case BY:
				case BEGIN:
				case COMMIT:
				case ROLLBACK:
				case SAVEPOINT:
				case DOUBLE:
				case INTERVAL:
				case TIME:
				case TIMESTAMP:
				case YEAR:
				case QUARTER:
				case MONTH:
				case WEEK:
				case DAY:
				case HOUR:
				case MINUTE:
				case SECOND:
				case CURRENT:
				case ENABLE:
				case DISABLE:
				case CALL:
				case PRESERVE:
				case DEFINER:
				case SQL:
				case CASCADED:
				case LOCAL:
				case CLOSE:
				case NEXT:
				case NAME:
				case COLLATION:
				case NAMES:
				case TYPE:
				case TEXT:
				case REPEATABLE:
				case VARYING:
				case NATIONAL:
				case VALUE:
				case TIES:
				case CUBE:
				case SETS:
				case OTHERS:
				case AT:
				case IDENTIFIER_:
					{
					setState(6507);
					ignoredIdentifier();
					}
					break;
				case CURRENT_USER:
					{
					setState(6508);
					match(CURRENT_USER);
					}
					break;
				case SESSION_USER:
					{
					setState(6509);
					match(SESSION_USER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(6512);
				match(REPLICA);
				setState(6513);
				match(IDENTITY);
				setState(6520);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DEFAULT:
					{
					setState(6514);
					match(DEFAULT);
					}
					break;
				case USING:
					{
					{
					setState(6515);
					match(USING);
					setState(6516);
					match(INDEX);
					setState(6517);
					indexName();
					}
					}
					break;
				case FULL:
					{
					setState(6518);
					match(FULL);
					}
					break;
				case NOTHING:
					{
					setState(6519);
					match(NOTHING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AddColumnSpecificationContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(PostgreSQLStatementParser.ADD, 0); }
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(PostgreSQLStatementParser.COLUMN, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public AddColumnSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_addColumnSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAddColumnSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAddColumnSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAddColumnSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AddColumnSpecificationContext addColumnSpecification() throws RecognitionException {
		AddColumnSpecificationContext _localctx = new AddColumnSpecificationContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_addColumnSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6524);
			match(ADD);
			setState(6526);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(6525);
				match(COLUMN);
				}
			}

			setState(6529);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,581,_ctx) ) {
			case 1:
				{
				setState(6528);
				ifNotExists();
				}
				break;
			}
			setState(6531);
			columnDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropColumnSpecificationContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(PostgreSQLStatementParser.COLUMN, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(PostgreSQLStatementParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLStatementParser.CASCADE, 0); }
		public DropColumnSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropColumnSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropColumnSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropColumnSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropColumnSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropColumnSpecificationContext dropColumnSpecification() throws RecognitionException {
		DropColumnSpecificationContext _localctx = new DropColumnSpecificationContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_dropColumnSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6533);
			match(DROP);
			setState(6535);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(6534);
				match(COLUMN);
				}
			}

			setState(6538);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,583,_ctx) ) {
			case 1:
				{
				setState(6537);
				ifExists();
				}
				break;
			}
			setState(6540);
			columnName();
			setState(6542);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(6541);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ModifyColumnSpecificationContext extends ParserRuleContext {
		public ModifyColumnContext modifyColumn() {
			return getRuleContext(ModifyColumnContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(PostgreSQLStatementParser.TYPE, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode DATA() { return getToken(PostgreSQLStatementParser.DATA, 0); }
		public CollateClauseContext collateClause() {
			return getRuleContext(CollateClauseContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PostgreSQLStatementParser.NULL, 0); }
		public TerminalNode ADD() { return getToken(PostgreSQLStatementParser.ADD, 0); }
		public TerminalNode GENERATED() { return getToken(PostgreSQLStatementParser.GENERATED, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public TerminalNode IDENTITY() { return getToken(PostgreSQLStatementParser.IDENTITY, 0); }
		public TerminalNode ALWAYS() { return getToken(PostgreSQLStatementParser.ALWAYS, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public SequenceOptionsContext sequenceOptions() {
			return getRuleContext(SequenceOptionsContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public List<AlterColumnSetOptionContext> alterColumnSetOption() {
			return getRuleContexts(AlterColumnSetOptionContext.class);
		}
		public AlterColumnSetOptionContext alterColumnSetOption(int i) {
			return getRuleContext(AlterColumnSetOptionContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode STATISTICS() { return getToken(PostgreSQLStatementParser.STATISTICS, 0); }
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public AttributeOptionsContext attributeOptions() {
			return getRuleContext(AttributeOptionsContext.class,0);
		}
		public TerminalNode RESET() { return getToken(PostgreSQLStatementParser.RESET, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLStatementParser.STORAGE, 0); }
		public TerminalNode PLAIN() { return getToken(PostgreSQLStatementParser.PLAIN, 0); }
		public TerminalNode EXTERNAL() { return getToken(PostgreSQLStatementParser.EXTERNAL, 0); }
		public TerminalNode EXTENDED() { return getToken(PostgreSQLStatementParser.EXTENDED, 0); }
		public TerminalNode MAIN() { return getToken(PostgreSQLStatementParser.MAIN, 0); }
		public ModifyColumnSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modifyColumnSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterModifyColumnSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitModifyColumnSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitModifyColumnSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ModifyColumnSpecificationContext modifyColumnSpecification() throws RecognitionException {
		ModifyColumnSpecificationContext _localctx = new ModifyColumnSpecificationContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_modifyColumnSpecification);
		int _la;
		try {
			setState(6624);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,592,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6544);
				modifyColumn();
				setState(6547);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SET) {
					{
					setState(6545);
					match(SET);
					setState(6546);
					match(DATA);
					}
				}

				setState(6549);
				match(TYPE);
				setState(6550);
				dataType();
				setState(6552);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(6551);
					collateClause();
					}
				}

				setState(6556);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(6554);
					match(USING);
					setState(6555);
					aExpr(0);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6558);
				modifyColumn();
				setState(6559);
				match(SET);
				setState(6560);
				match(DEFAULT);
				setState(6561);
				aExpr(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6563);
				modifyColumn();
				setState(6564);
				match(DROP);
				setState(6565);
				match(DEFAULT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6567);
				modifyColumn();
				setState(6568);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==SET) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6569);
				match(NOT);
				setState(6570);
				match(NULL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6572);
				modifyColumn();
				setState(6573);
				match(ADD);
				setState(6574);
				match(GENERATED);
				setState(6578);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALWAYS:
					{
					setState(6575);
					match(ALWAYS);
					}
					break;
				case BY:
					{
					{
					setState(6576);
					match(BY);
					setState(6577);
					match(DEFAULT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6580);
				match(AS);
				setState(6581);
				match(IDENTITY);
				setState(6586);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(6582);
					match(LP_);
					setState(6583);
					sequenceOptions();
					setState(6584);
					match(RP_);
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6588);
				modifyColumn();
				setState(6589);
				alterColumnSetOption();
				setState(6593);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==RESTART || _la==SET) {
					{
					{
					setState(6590);
					alterColumnSetOption();
					}
					}
					setState(6595);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6596);
				modifyColumn();
				setState(6597);
				match(DROP);
				setState(6598);
				match(IDENTITY);
				setState(6600);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(6599);
					ifExists();
					}
				}

				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6602);
				modifyColumn();
				setState(6603);
				match(SET);
				setState(6604);
				match(STATISTICS);
				setState(6605);
				match(NUMBER_);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6607);
				modifyColumn();
				setState(6608);
				match(SET);
				setState(6609);
				match(LP_);
				setState(6610);
				attributeOptions();
				setState(6611);
				match(RP_);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6613);
				modifyColumn();
				setState(6614);
				match(RESET);
				setState(6615);
				match(LP_);
				setState(6616);
				attributeOptions();
				setState(6617);
				match(RP_);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6619);
				modifyColumn();
				setState(6620);
				match(SET);
				setState(6621);
				match(STORAGE);
				setState(6622);
				_la = _input.LA(1);
				if ( !(((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 34363932677L) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ModifyColumnContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(PostgreSQLStatementParser.COLUMN, 0); }
		public ModifyColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modifyColumn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterModifyColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitModifyColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitModifyColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ModifyColumnContext modifyColumn() throws RecognitionException {
		ModifyColumnContext _localctx = new ModifyColumnContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_modifyColumn);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6626);
			match(ALTER);
			setState(6628);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(6627);
				match(COLUMN);
				}
			}

			setState(6630);
			columnName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterColumnSetOptionContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode GENERATED() { return getToken(PostgreSQLStatementParser.GENERATED, 0); }
		public SequenceOptionContext sequenceOption() {
			return getRuleContext(SequenceOptionContext.class,0);
		}
		public TerminalNode ALWAYS() { return getToken(PostgreSQLStatementParser.ALWAYS, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public TerminalNode RESTART() { return getToken(PostgreSQLStatementParser.RESTART, 0); }
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public AlterColumnSetOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterColumnSetOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterColumnSetOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterColumnSetOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterColumnSetOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterColumnSetOptionContext alterColumnSetOption() throws RecognitionException {
		AlterColumnSetOptionContext _localctx = new AlterColumnSetOptionContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_alterColumnSetOption);
		int _la;
		try {
			setState(6649);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(6632);
				match(SET);
				setState(6640);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case GENERATED:
					{
					setState(6633);
					match(GENERATED);
					setState(6637);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALWAYS:
						{
						setState(6634);
						match(ALWAYS);
						}
						break;
					case BY:
						{
						setState(6635);
						match(BY);
						setState(6636);
						match(DEFAULT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case NO:
				case START:
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case MAXVALUE:
				case MINVALUE:
				case OWNED:
					{
					setState(6639);
					sequenceOption();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case RESTART:
				enterOuterAlt(_localctx, 2);
				{
				setState(6642);
				match(RESTART);
				setState(6647);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==NUMBER_) {
					{
					setState(6644);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH) {
						{
						setState(6643);
						match(WITH);
						}
					}

					setState(6646);
					match(NUMBER_);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AttributeOptionsContext extends ParserRuleContext {
		public List<AttributeOptionContext> attributeOption() {
			return getRuleContexts(AttributeOptionContext.class);
		}
		public AttributeOptionContext attributeOption(int i) {
			return getRuleContext(AttributeOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public AttributeOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attributeOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAttributeOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAttributeOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAttributeOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AttributeOptionsContext attributeOptions() throws RecognitionException {
		AttributeOptionsContext _localctx = new AttributeOptionsContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_attributeOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6651);
			attributeOption();
			setState(6656);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(6652);
				match(COMMA_);
				setState(6653);
				attributeOption();
				}
				}
				setState(6658);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AttributeOptionContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(PostgreSQLStatementParser.IDENTIFIER_, 0); }
		public TerminalNode EQ_() { return getToken(PostgreSQLStatementParser.EQ_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public AttributeOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attributeOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAttributeOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAttributeOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAttributeOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AttributeOptionContext attributeOption() throws RecognitionException {
		AttributeOptionContext _localctx = new AttributeOptionContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_attributeOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6659);
			match(IDENTIFIER_);
			setState(6660);
			match(EQ_);
			setState(6661);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AddConstraintSpecificationContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(PostgreSQLStatementParser.ADD, 0); }
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TableConstraintUsingIndexContext tableConstraintUsingIndex() {
			return getRuleContext(TableConstraintUsingIndexContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode VALID() { return getToken(PostgreSQLStatementParser.VALID, 0); }
		public AddConstraintSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_addConstraintSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAddConstraintSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAddConstraintSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAddConstraintSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AddConstraintSpecificationContext addConstraintSpecification() throws RecognitionException {
		AddConstraintSpecificationContext _localctx = new AddConstraintSpecificationContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_addConstraintSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6663);
			match(ADD);
			setState(6670);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,601,_ctx) ) {
			case 1:
				{
				setState(6664);
				tableConstraint();
				setState(6667);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(6665);
					match(NOT);
					setState(6666);
					match(VALID);
					}
				}

				}
				break;
			case 2:
				{
				setState(6669);
				tableConstraintUsingIndex();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableConstraintUsingIndexContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLStatementParser.INDEX, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public ConstraintOptionalParamContext constraintOptionalParam() {
			return getRuleContext(ConstraintOptionalParamContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(PostgreSQLStatementParser.UNIQUE, 0); }
		public PrimaryKeyContext primaryKey() {
			return getRuleContext(PrimaryKeyContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLStatementParser.CONSTRAINT, 0); }
		public ConstraintNameContext constraintName() {
			return getRuleContext(ConstraintNameContext.class,0);
		}
		public TableConstraintUsingIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraintUsingIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTableConstraintUsingIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTableConstraintUsingIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTableConstraintUsingIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintUsingIndexContext tableConstraintUsingIndex() throws RecognitionException {
		TableConstraintUsingIndexContext _localctx = new TableConstraintUsingIndexContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_tableConstraintUsingIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6674);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(6672);
				match(CONSTRAINT);
				setState(6673);
				constraintName();
				}
			}

			setState(6678);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNIQUE:
				{
				setState(6676);
				match(UNIQUE);
				}
				break;
			case PRIMARY:
			case KEY:
				{
				setState(6677);
				primaryKey();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6680);
			match(USING);
			setState(6681);
			match(INDEX);
			setState(6682);
			indexName();
			setState(6683);
			constraintOptionalParam();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ModifyConstraintSpecificationContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLStatementParser.CONSTRAINT, 0); }
		public ConstraintNameContext constraintName() {
			return getRuleContext(ConstraintNameContext.class,0);
		}
		public ConstraintOptionalParamContext constraintOptionalParam() {
			return getRuleContext(ConstraintOptionalParamContext.class,0);
		}
		public ModifyConstraintSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modifyConstraintSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterModifyConstraintSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitModifyConstraintSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitModifyConstraintSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ModifyConstraintSpecificationContext modifyConstraintSpecification() throws RecognitionException {
		ModifyConstraintSpecificationContext _localctx = new ModifyConstraintSpecificationContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_modifyConstraintSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6685);
			match(ALTER);
			setState(6686);
			match(CONSTRAINT);
			setState(6687);
			constraintName();
			setState(6688);
			constraintOptionalParam();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ValidateConstraintSpecificationContext extends ParserRuleContext {
		public TerminalNode VALIDATE() { return getToken(PostgreSQLStatementParser.VALIDATE, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLStatementParser.CONSTRAINT, 0); }
		public ConstraintNameContext constraintName() {
			return getRuleContext(ConstraintNameContext.class,0);
		}
		public ValidateConstraintSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_validateConstraintSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterValidateConstraintSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitValidateConstraintSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitValidateConstraintSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValidateConstraintSpecificationContext validateConstraintSpecification() throws RecognitionException {
		ValidateConstraintSpecificationContext _localctx = new ValidateConstraintSpecificationContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_validateConstraintSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6690);
			match(VALIDATE);
			setState(6691);
			match(CONSTRAINT);
			setState(6692);
			constraintName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropConstraintSpecificationContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLStatementParser.CONSTRAINT, 0); }
		public ConstraintNameContext constraintName() {
			return getRuleContext(ConstraintNameContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(PostgreSQLStatementParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLStatementParser.CASCADE, 0); }
		public DropConstraintSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropConstraintSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropConstraintSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropConstraintSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropConstraintSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropConstraintSpecificationContext dropConstraintSpecification() throws RecognitionException {
		DropConstraintSpecificationContext _localctx = new DropConstraintSpecificationContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_dropConstraintSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6694);
			match(DROP);
			setState(6695);
			match(CONSTRAINT);
			setState(6697);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,604,_ctx) ) {
			case 1:
				{
				setState(6696);
				ifExists();
				}
				break;
			}
			setState(6699);
			constraintName();
			setState(6701);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(6700);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StorageParameterWithValueContext extends ParserRuleContext {
		public StorageParameterContext storageParameter() {
			return getRuleContext(StorageParameterContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(PostgreSQLStatementParser.EQ_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public StorageParameterWithValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storageParameterWithValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterStorageParameterWithValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitStorageParameterWithValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitStorageParameterWithValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StorageParameterWithValueContext storageParameterWithValue() throws RecognitionException {
		StorageParameterWithValueContext _localctx = new StorageParameterWithValueContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_storageParameterWithValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6703);
			storageParameter();
			setState(6704);
			match(EQ_);
			setState(6705);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StorageParameterContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(PostgreSQLStatementParser.IDENTIFIER_, 0); }
		public StorageParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storageParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterStorageParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitStorageParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitStorageParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StorageParameterContext storageParameter() throws RecognitionException {
		StorageParameterContext _localctx = new StorageParameterContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_storageParameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6707);
			match(IDENTIFIER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RenameColumnSpecificationContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode COLUMN() { return getToken(PostgreSQLStatementParser.COLUMN, 0); }
		public RenameColumnSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameColumnSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterRenameColumnSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitRenameColumnSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitRenameColumnSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameColumnSpecificationContext renameColumnSpecification() throws RecognitionException {
		RenameColumnSpecificationContext _localctx = new RenameColumnSpecificationContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_renameColumnSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6709);
			match(RENAME);
			setState(6711);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(6710);
				match(COLUMN);
				}
			}

			setState(6713);
			columnName();
			setState(6714);
			match(TO);
			setState(6715);
			columnName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RenameConstraintContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLStatementParser.CONSTRAINT, 0); }
		public List<IgnoredIdentifierContext> ignoredIdentifier() {
			return getRuleContexts(IgnoredIdentifierContext.class);
		}
		public IgnoredIdentifierContext ignoredIdentifier(int i) {
			return getRuleContext(IgnoredIdentifierContext.class,i);
		}
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public RenameConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterRenameConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitRenameConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitRenameConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameConstraintContext renameConstraint() throws RecognitionException {
		RenameConstraintContext _localctx = new RenameConstraintContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_renameConstraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6717);
			match(RENAME);
			setState(6718);
			match(CONSTRAINT);
			setState(6719);
			ignoredIdentifier();
			setState(6720);
			match(TO);
			setState(6721);
			ignoredIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RenameTableSpecificationContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public RenameTableSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTableSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterRenameTableSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitRenameTableSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitRenameTableSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameTableSpecificationContext renameTableSpecification() throws RecognitionException {
		RenameTableSpecificationContext _localctx = new RenameTableSpecificationContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_renameTableSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6723);
			match(RENAME);
			setState(6724);
			match(TO);
			setState(6725);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexNamesContext extends ParserRuleContext {
		public List<IndexNameContext> indexName() {
			return getRuleContexts(IndexNameContext.class);
		}
		public IndexNameContext indexName(int i) {
			return getRuleContext(IndexNameContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public IndexNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexNames; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterIndexNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitIndexNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitIndexNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexNamesContext indexNames() throws RecognitionException {
		IndexNamesContext _localctx = new IndexNamesContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_indexNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6727);
			indexName();
			setState(6732);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(6728);
				match(COMMA_);
				setState(6729);
				indexName();
				}
				}
				setState(6734);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterDatabaseContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLStatementParser.DATABASE, 0); }
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public AlterDatabaseClauseContext alterDatabaseClause() {
			return getRuleContext(AlterDatabaseClauseContext.class,0);
		}
		public AlterDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseContext alterDatabase() throws RecognitionException {
		AlterDatabaseContext _localctx = new AlterDatabaseContext(_ctx, getState());
		enterRule(_localctx, 892, RULE_alterDatabase);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6735);
			match(ALTER);
			setState(6736);
			match(DATABASE);
			setState(6737);
			databaseName();
			setState(6738);
			alterDatabaseClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterDatabaseClauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public CreatedbOptItemsContext createdbOptItems() {
			return getRuleContext(CreatedbOptItemsContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLStatementParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public SetResetClauseContext setResetClause() {
			return getRuleContext(SetResetClauseContext.class,0);
		}
		public AlterDatabaseClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabaseClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterDatabaseClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterDatabaseClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterDatabaseClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseClauseContext alterDatabaseClause() throws RecognitionException {
		AlterDatabaseClauseContext _localctx = new AlterDatabaseClauseContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_alterDatabaseClause);
		int _la;
		try {
			setState(6756);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,610,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6741);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(6740);
					match(WITH);
					}
				}

				setState(6744);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & -1702650966907551743L) != 0) || ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & -36028934466307075L) != 0) || ((((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & 283126353889277L) != 0) || ((((_la - 241)) & ~0x3f) == 0 && ((1L << (_la - 241)) & -545622264849L) != 0) || ((((_la - 305)) & ~0x3f) == 0 && ((1L << (_la - 305)) & -1L) != 0) || ((((_la - 369)) & ~0x3f) == 0 && ((1L << (_la - 369)) & 9895604649983L) != 0) || ((((_la - 437)) & ~0x3f) == 0 && ((1L << (_la - 437)) & 562950016917239L) != 0) || ((((_la - 505)) & ~0x3f) == 0 && ((1L << (_la - 505)) & 7138750043982826433L) != 0) || ((((_la - 569)) & ~0x3f) == 0 && ((1L << (_la - 569)) & 2173569L) != 0)) {
					{
					setState(6743);
					createdbOptItems();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6746);
				match(RENAME);
				setState(6747);
				match(TO);
				setState(6748);
				databaseName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6749);
				match(OWNER);
				setState(6750);
				match(TO);
				setState(6751);
				roleSpec();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6752);
				match(SET);
				setState(6753);
				match(TABLESPACE);
				setState(6754);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6755);
				setResetClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatedbOptItemsContext extends ParserRuleContext {
		public List<CreatedbOptItemContext> createdbOptItem() {
			return getRuleContexts(CreatedbOptItemContext.class);
		}
		public CreatedbOptItemContext createdbOptItem(int i) {
			return getRuleContext(CreatedbOptItemContext.class,i);
		}
		public CreatedbOptItemsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdbOptItems; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreatedbOptItems(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreatedbOptItems(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreatedbOptItems(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatedbOptItemsContext createdbOptItems() throws RecognitionException {
		CreatedbOptItemsContext _localctx = new CreatedbOptItemsContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_createdbOptItems);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6759); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(6758);
				createdbOptItem();
				}
				}
				setState(6761); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & -1702650966907551743L) != 0) || ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & -36028934466307075L) != 0) || ((((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & 283126353889277L) != 0) || ((((_la - 241)) & ~0x3f) == 0 && ((1L << (_la - 241)) & -545622264849L) != 0) || ((((_la - 305)) & ~0x3f) == 0 && ((1L << (_la - 305)) & -1L) != 0) || ((((_la - 369)) & ~0x3f) == 0 && ((1L << (_la - 369)) & 9895604649983L) != 0) || ((((_la - 437)) & ~0x3f) == 0 && ((1L << (_la - 437)) & 562950016917239L) != 0) || ((((_la - 505)) & ~0x3f) == 0 && ((1L << (_la - 505)) & 7138750043982826433L) != 0) || ((((_la - 569)) & ~0x3f) == 0 && ((1L << (_la - 569)) & 2173569L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatedbOptItemContext extends ParserRuleContext {
		public CreatedbOptNameContext createdbOptName() {
			return getRuleContext(CreatedbOptNameContext.class,0);
		}
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(PostgreSQLStatementParser.EQ_, 0); }
		public BooleanOrStringContext booleanOrString() {
			return getRuleContext(BooleanOrStringContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public CreatedbOptItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdbOptItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreatedbOptItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreatedbOptItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreatedbOptItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatedbOptItemContext createdbOptItem() throws RecognitionException {
		CreatedbOptItemContext _localctx = new CreatedbOptItemContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_createdbOptItem);
		int _la;
		try {
			setState(6781);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,615,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6763);
				createdbOptName();
				setState(6765);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(6764);
					match(EQ_);
					}
				}

				setState(6767);
				signedIconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6769);
				createdbOptName();
				setState(6771);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(6770);
					match(EQ_);
					}
				}

				setState(6773);
				booleanOrString();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6775);
				createdbOptName();
				setState(6777);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(6776);
					match(EQ_);
					}
				}

				setState(6779);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterTableCmdsContext extends ParserRuleContext {
		public List<AlterTableCmdContext> alterTableCmd() {
			return getRuleContexts(AlterTableCmdContext.class);
		}
		public AlterTableCmdContext alterTableCmd(int i) {
			return getRuleContext(AlterTableCmdContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public AlterTableCmdsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableCmds; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterTableCmds(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterTableCmds(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableCmds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableCmdsContext alterTableCmds() throws RecognitionException {
		AlterTableCmdsContext _localctx = new AlterTableCmdsContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_alterTableCmds);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6783);
			alterTableCmd();
			setState(6788);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(6784);
				match(COMMA_);
				setState(6785);
				alterTableCmd();
				}
				}
				setState(6790);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterTableCmdContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(PostgreSQLStatementParser.ADD, 0); }
		public ColumnDefContext columnDef() {
			return getRuleContext(ColumnDefContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(PostgreSQLStatementParser.COLUMN, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public List<ColIdContext> colId() {
			return getRuleContexts(ColIdContext.class);
		}
		public ColIdContext colId(int i) {
			return getRuleContext(ColIdContext.class,i);
		}
		public AlterColumnDefaultContext alterColumnDefault() {
			return getRuleContext(AlterColumnDefaultContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PostgreSQLStatementParser.NULL, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLStatementParser.STATISTICS, 0); }
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode RESET() { return getToken(PostgreSQLStatementParser.RESET, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLStatementParser.STORAGE, 0); }
		public ColumnCompressionContext columnCompression() {
			return getRuleContext(ColumnCompressionContext.class,0);
		}
		public TerminalNode GENERATED() { return getToken(PostgreSQLStatementParser.GENERATED, 0); }
		public GeneratedWhenContext generatedWhen() {
			return getRuleContext(GeneratedWhenContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public TerminalNode IDENTITY() { return getToken(PostgreSQLStatementParser.IDENTITY, 0); }
		public ParenthesizedSeqOptListContext parenthesizedSeqOptList() {
			return getRuleContext(ParenthesizedSeqOptListContext.class,0);
		}
		public AlterIdentityColumnOptionListContext alterIdentityColumnOptionList() {
			return getRuleContext(AlterIdentityColumnOptionListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(PostgreSQLStatementParser.TYPE, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public SetDataContext setData() {
			return getRuleContext(SetDataContext.class,0);
		}
		public CollateClauseContext collateClause() {
			return getRuleContext(CollateClauseContext.class,0);
		}
		public AlterUsingContext alterUsing() {
			return getRuleContext(AlterUsingContext.class,0);
		}
		public AlterGenericOptionsContext alterGenericOptions() {
			return getRuleContext(AlterGenericOptionsContext.class,0);
		}
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TerminalNode VALID() { return getToken(PostgreSQLStatementParser.VALID, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLStatementParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ConstraintAttributeSpecContext constraintAttributeSpec() {
			return getRuleContext(ConstraintAttributeSpecContext.class,0);
		}
		public TerminalNode VALIDATE() { return getToken(PostgreSQLStatementParser.VALIDATE, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSQLStatementParser.WITHOUT, 0); }
		public TerminalNode OIDS() { return getToken(PostgreSQLStatementParser.OIDS, 0); }
		public TerminalNode CLUSTER() { return getToken(PostgreSQLStatementParser.CLUSTER, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public TerminalNode LOGGED() { return getToken(PostgreSQLStatementParser.LOGGED, 0); }
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLStatementParser.UNLOGGED, 0); }
		public TerminalNode ENABLE() { return getToken(PostgreSQLStatementParser.ENABLE, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLStatementParser.TRIGGER, 0); }
		public TerminalNode ALWAYS() { return getToken(PostgreSQLStatementParser.ALWAYS, 0); }
		public TerminalNode REPLICA() { return getToken(PostgreSQLStatementParser.REPLICA, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLStatementParser.USER, 0); }
		public TerminalNode DISABLE() { return getToken(PostgreSQLStatementParser.DISABLE, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLStatementParser.RULE, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLStatementParser.INHERIT, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLStatementParser.OF, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLStatementParser.TABLESPACE, 0); }
		public ReplicaIdentityContext replicaIdentity() {
			return getRuleContext(ReplicaIdentityContext.class,0);
		}
		public TerminalNode ROW() { return getToken(PostgreSQLStatementParser.ROW, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLStatementParser.LEVEL, 0); }
		public TerminalNode SECURITY() { return getToken(PostgreSQLStatementParser.SECURITY, 0); }
		public TerminalNode FORCE() { return getToken(PostgreSQLStatementParser.FORCE, 0); }
		public AlterTableCmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableCmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterTableCmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterTableCmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableCmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableCmdContext alterTableCmd() throws RecognitionException {
		AlterTableCmdContext _localctx = new AlterTableCmdContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_alterTableCmd);
		int _la;
		try {
			setState(7071);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,645,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6791);
				match(ADD);
				setState(6793);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6792);
					match(COLUMN);
					}
				}

				setState(6796);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,618,_ctx) ) {
				case 1:
					{
					setState(6795);
					ifNotExists();
					}
					break;
				}
				setState(6798);
				columnDef();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6799);
				match(ALTER);
				setState(6801);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6800);
					match(COLUMN);
					}
				}

				setState(6803);
				colId();
				setState(6804);
				alterColumnDefault();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6806);
				match(ALTER);
				setState(6808);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6807);
					match(COLUMN);
					}
				}

				setState(6810);
				colId();
				setState(6811);
				match(DROP);
				setState(6812);
				match(NOT);
				setState(6813);
				match(NULL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6815);
				match(ALTER);
				setState(6817);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6816);
					match(COLUMN);
					}
				}

				setState(6819);
				colId();
				setState(6820);
				match(SET);
				setState(6821);
				match(NOT);
				setState(6822);
				match(NULL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6824);
				match(ALTER);
				setState(6826);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6825);
					match(COLUMN);
					}
				}

				setState(6828);
				colId();
				setState(6829);
				match(SET);
				setState(6830);
				match(STATISTICS);
				setState(6831);
				signedIconst();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6833);
				match(ALTER);
				setState(6835);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6834);
					match(COLUMN);
					}
				}

				setState(6837);
				match(NUMBER_);
				setState(6838);
				match(SET);
				setState(6839);
				match(STATISTICS);
				setState(6840);
				signedIconst();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6841);
				match(ALTER);
				setState(6843);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6842);
					match(COLUMN);
					}
				}

				setState(6845);
				colId();
				setState(6846);
				match(SET);
				setState(6847);
				reloptions();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6849);
				match(ALTER);
				setState(6851);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6850);
					match(COLUMN);
					}
				}

				setState(6853);
				colId();
				setState(6854);
				match(RESET);
				setState(6855);
				reloptions();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6857);
				match(ALTER);
				setState(6859);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6858);
					match(COLUMN);
					}
				}

				setState(6861);
				colId();
				setState(6862);
				match(SET);
				setState(6863);
				match(STORAGE);
				setState(6864);
				colId();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6866);
				match(ALTER);
				setState(6868);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6867);
					match(COLUMN);
					}
				}

				setState(6870);
				colId();
				setState(6871);
				match(SET);
				setState(6872);
				columnCompression();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6874);
				match(ALTER);
				setState(6876);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6875);
					match(COLUMN);
					}
				}

				setState(6878);
				colId();
				setState(6879);
				match(ADD);
				setState(6880);
				match(GENERATED);
				setState(6881);
				generatedWhen();
				setState(6882);
				match(AS);
				setState(6883);
				match(IDENTITY);
				setState(6885);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(6884);
					parenthesizedSeqOptList();
					}
				}

				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6887);
				match(ALTER);
				setState(6889);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6888);
					match(COLUMN);
					}
				}

				setState(6891);
				colId();
				setState(6892);
				alterIdentityColumnOptionList();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6894);
				match(ALTER);
				setState(6896);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6895);
					match(COLUMN);
					}
				}

				setState(6898);
				colId();
				setState(6899);
				match(DROP);
				setState(6900);
				match(IDENTITY);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6902);
				match(ALTER);
				setState(6904);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6903);
					match(COLUMN);
					}
				}

				setState(6906);
				colId();
				setState(6907);
				match(DROP);
				setState(6908);
				match(IDENTITY);
				setState(6909);
				ifExists();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6911);
				match(DROP);
				setState(6913);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6912);
					match(COLUMN);
					}
				}

				setState(6915);
				ifExists();
				setState(6916);
				colId();
				setState(6918);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(6917);
					dropBehavior();
					}
				}

				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6920);
				match(DROP);
				setState(6922);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6921);
					match(COLUMN);
					}
				}

				setState(6924);
				colId();
				setState(6926);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(6925);
					dropBehavior();
					}
				}

				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6928);
				match(ALTER);
				setState(6930);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6929);
					match(COLUMN);
					}
				}

				setState(6932);
				colId();
				setState(6934);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SET) {
					{
					setState(6933);
					setData();
					}
				}

				setState(6936);
				match(TYPE);
				setState(6937);
				typeName();
				setState(6939);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(6938);
					collateClause();
					}
				}

				setState(6942);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(6941);
					alterUsing();
					}
				}

				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(6944);
				match(ALTER);
				setState(6946);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6945);
					match(COLUMN);
					}
				}

				setState(6948);
				colId();
				setState(6949);
				alterGenericOptions();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(6951);
				match(ADD);
				setState(6952);
				tableConstraint();
				setState(6955);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(6953);
					match(NOT);
					setState(6954);
					match(VALID);
					}
				}

				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(6957);
				match(ALTER);
				setState(6958);
				match(CONSTRAINT);
				setState(6959);
				name();
				setState(6960);
				constraintAttributeSpec();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(6962);
				match(VALIDATE);
				setState(6963);
				match(CONSTRAINT);
				setState(6964);
				name();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(6965);
				match(DROP);
				setState(6966);
				match(CONSTRAINT);
				setState(6967);
				ifExists();
				setState(6968);
				name();
				setState(6970);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(6969);
					dropBehavior();
					}
				}

				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(6972);
				match(DROP);
				setState(6973);
				match(CONSTRAINT);
				setState(6974);
				name();
				setState(6976);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(6975);
					dropBehavior();
					}
				}

				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(6978);
				match(SET);
				setState(6979);
				match(WITHOUT);
				setState(6980);
				match(OIDS);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(6981);
				match(CLUSTER);
				setState(6982);
				match(ON);
				setState(6983);
				name();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(6984);
				match(SET);
				setState(6985);
				match(WITHOUT);
				setState(6986);
				match(CLUSTER);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(6987);
				match(SET);
				setState(6988);
				match(LOGGED);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(6989);
				match(SET);
				setState(6990);
				match(UNLOGGED);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(6991);
				match(ENABLE);
				setState(6992);
				match(TRIGGER);
				setState(6993);
				name();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(6994);
				match(ENABLE);
				setState(6995);
				match(ALWAYS);
				setState(6996);
				match(TRIGGER);
				setState(6997);
				name();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(6998);
				match(ENABLE);
				setState(6999);
				match(REPLICA);
				setState(7000);
				match(TRIGGER);
				setState(7001);
				name();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(7002);
				match(ENABLE);
				setState(7003);
				match(TRIGGER);
				setState(7004);
				match(ALL);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(7005);
				match(ENABLE);
				setState(7006);
				match(TRIGGER);
				setState(7007);
				match(USER);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(7008);
				match(DISABLE);
				setState(7009);
				match(TRIGGER);
				setState(7010);
				name();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(7011);
				match(DISABLE);
				setState(7012);
				match(TRIGGER);
				setState(7013);
				match(ALL);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(7014);
				match(DISABLE);
				setState(7015);
				match(TRIGGER);
				setState(7016);
				match(USER);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(7017);
				match(ENABLE);
				setState(7018);
				match(RULE);
				setState(7019);
				name();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(7020);
				match(ENABLE);
				setState(7021);
				match(ALWAYS);
				setState(7022);
				match(RULE);
				setState(7023);
				name();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(7024);
				match(ENABLE);
				setState(7025);
				match(REPLICA);
				setState(7026);
				match(RULE);
				setState(7027);
				name();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(7028);
				match(DISABLE);
				setState(7029);
				match(RULE);
				setState(7030);
				name();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(7031);
				match(INHERIT);
				setState(7032);
				qualifiedName();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(7033);
				match(NO);
				setState(7034);
				match(INHERIT);
				setState(7035);
				qualifiedName();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(7036);
				match(OF);
				setState(7037);
				anyName();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(7038);
				match(NOT);
				setState(7039);
				match(OF);
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(7040);
				match(OWNER);
				setState(7041);
				match(TO);
				setState(7042);
				roleSpec();
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(7043);
				match(SET);
				setState(7044);
				match(TABLESPACE);
				setState(7045);
				name();
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(7046);
				match(SET);
				setState(7047);
				reloptions();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(7048);
				match(RESET);
				setState(7049);
				reloptions();
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(7050);
				match(REPLICA);
				setState(7051);
				match(IDENTITY);
				setState(7052);
				replicaIdentity();
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(7053);
				match(ENABLE);
				setState(7054);
				match(ROW);
				setState(7055);
				match(LEVEL);
				setState(7056);
				match(SECURITY);
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(7057);
				match(DISABLE);
				setState(7058);
				match(ROW);
				setState(7059);
				match(LEVEL);
				setState(7060);
				match(SECURITY);
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(7061);
				match(FORCE);
				setState(7062);
				match(ROW);
				setState(7063);
				match(LEVEL);
				setState(7064);
				match(SECURITY);
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(7065);
				match(NO);
				setState(7066);
				match(FORCE);
				setState(7067);
				match(ROW);
				setState(7068);
				match(LEVEL);
				setState(7069);
				match(SECURITY);
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(7070);
				alterGenericOptions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnCompressionContext extends ParserRuleContext {
		public TerminalNode COMPRESSION() { return getToken(PostgreSQLStatementParser.COMPRESSION, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public ColumnCompressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnCompression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterColumnCompression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitColumnCompression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitColumnCompression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnCompressionContext columnCompression() throws RecognitionException {
		ColumnCompressionContext _localctx = new ColumnCompressionContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_columnCompression);
		try {
			setState(7077);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,646,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7073);
				match(COMPRESSION);
				setState(7074);
				colId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7075);
				match(COMPRESSION);
				setState(7076);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstraintAttributeSpecContext extends ParserRuleContext {
		public List<ConstraintAttributeElemContext> constraintAttributeElem() {
			return getRuleContexts(ConstraintAttributeElemContext.class);
		}
		public ConstraintAttributeElemContext constraintAttributeElem(int i) {
			return getRuleContext(ConstraintAttributeElemContext.class,i);
		}
		public ConstraintAttributeSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintAttributeSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterConstraintAttributeSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitConstraintAttributeSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitConstraintAttributeSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintAttributeSpecContext constraintAttributeSpec() throws RecognitionException {
		ConstraintAttributeSpecContext _localctx = new ConstraintAttributeSpecContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_constraintAttributeSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7082);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & 281475043819521L) != 0) || _la==NOT) {
				{
				{
				setState(7079);
				constraintAttributeElem();
				}
				}
				setState(7084);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstraintAttributeElemContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode DEFERRABLE() { return getToken(PostgreSQLStatementParser.DEFERRABLE, 0); }
		public TerminalNode INITIALLY() { return getToken(PostgreSQLStatementParser.INITIALLY, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSQLStatementParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(PostgreSQLStatementParser.DEFERRED, 0); }
		public TerminalNode VALID() { return getToken(PostgreSQLStatementParser.VALID, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLStatementParser.INHERIT, 0); }
		public ConstraintAttributeElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintAttributeElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterConstraintAttributeElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitConstraintAttributeElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitConstraintAttributeElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintAttributeElemContext constraintAttributeElem() throws RecognitionException {
		ConstraintAttributeElemContext _localctx = new ConstraintAttributeElemContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_constraintAttributeElem);
		try {
			setState(7096);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,648,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7085);
				match(NOT);
				setState(7086);
				match(DEFERRABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7087);
				match(DEFERRABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7088);
				match(INITIALLY);
				setState(7089);
				match(IMMEDIATE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7090);
				match(INITIALLY);
				setState(7091);
				match(DEFERRED);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7092);
				match(NOT);
				setState(7093);
				match(VALID);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7094);
				match(NO);
				setState(7095);
				match(INHERIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterGenericOptionsContext extends ParserRuleContext {
		public TerminalNode OPTIONS() { return getToken(PostgreSQLStatementParser.OPTIONS, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public AlterGenericOptionListContext alterGenericOptionList() {
			return getRuleContext(AlterGenericOptionListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public AlterGenericOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterGenericOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterGenericOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterGenericOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterGenericOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterGenericOptionsContext alterGenericOptions() throws RecognitionException {
		AlterGenericOptionsContext _localctx = new AlterGenericOptionsContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_alterGenericOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7098);
			match(OPTIONS);
			setState(7099);
			match(LP_);
			setState(7100);
			alterGenericOptionList();
			setState(7101);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterGenericOptionListContext extends ParserRuleContext {
		public List<AlterGenericOptionElemContext> alterGenericOptionElem() {
			return getRuleContexts(AlterGenericOptionElemContext.class);
		}
		public AlterGenericOptionElemContext alterGenericOptionElem(int i) {
			return getRuleContext(AlterGenericOptionElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public AlterGenericOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterGenericOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterGenericOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterGenericOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterGenericOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterGenericOptionListContext alterGenericOptionList() throws RecognitionException {
		AlterGenericOptionListContext _localctx = new AlterGenericOptionListContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_alterGenericOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7103);
			alterGenericOptionElem();
			setState(7108);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(7104);
				match(COMMA_);
				setState(7105);
				alterGenericOptionElem();
				}
				}
				setState(7110);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterGenericOptionElemContext extends ParserRuleContext {
		public GenericOptionElemContext genericOptionElem() {
			return getRuleContext(GenericOptionElemContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode ADD() { return getToken(PostgreSQLStatementParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public GenericOptionNameContext genericOptionName() {
			return getRuleContext(GenericOptionNameContext.class,0);
		}
		public AlterGenericOptionElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterGenericOptionElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterGenericOptionElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterGenericOptionElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterGenericOptionElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterGenericOptionElemContext alterGenericOptionElem() throws RecognitionException {
		AlterGenericOptionElemContext _localctx = new AlterGenericOptionElemContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_alterGenericOptionElem);
		try {
			setState(7118);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,650,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7111);
				genericOptionElem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7112);
				match(SET);
				setState(7113);
				genericOptionElem();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7114);
				match(ADD);
				setState(7115);
				genericOptionElem();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7116);
				match(DROP);
				setState(7117);
				genericOptionName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropBehaviorContext extends ParserRuleContext {
		public TerminalNode CASCADE() { return getToken(PostgreSQLStatementParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLStatementParser.RESTRICT, 0); }
		public DropBehaviorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropBehavior; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropBehavior(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropBehavior(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropBehavior(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropBehaviorContext dropBehavior() throws RecognitionException {
		DropBehaviorContext _localctx = new DropBehaviorContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_dropBehavior);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7120);
			_la = _input.LA(1);
			if ( !(_la==CASCADE || _la==RESTRICT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterUsingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public AlterUsingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUsing; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterUsing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterUsing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterUsing(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUsingContext alterUsing() throws RecognitionException {
		AlterUsingContext _localctx = new AlterUsingContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_alterUsing);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7122);
			match(USING);
			setState(7123);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetDataContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode DATA() { return getToken(PostgreSQLStatementParser.DATA, 0); }
		public SetDataContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setData; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSetData(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSetData(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSetData(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetDataContext setData() throws RecognitionException {
		SetDataContext _localctx = new SetDataContext(_ctx, getState());
		enterRule(_localctx, 920, RULE_setData);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7125);
			match(SET);
			setState(7126);
			match(DATA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterIdentityColumnOptionListContext extends ParserRuleContext {
		public List<AlterIdentityColumnOptionContext> alterIdentityColumnOption() {
			return getRuleContexts(AlterIdentityColumnOptionContext.class);
		}
		public AlterIdentityColumnOptionContext alterIdentityColumnOption(int i) {
			return getRuleContext(AlterIdentityColumnOptionContext.class,i);
		}
		public AlterIdentityColumnOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIdentityColumnOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterIdentityColumnOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterIdentityColumnOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterIdentityColumnOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIdentityColumnOptionListContext alterIdentityColumnOptionList() throws RecognitionException {
		AlterIdentityColumnOptionListContext _localctx = new AlterIdentityColumnOptionListContext(_ctx, getState());
		enterRule(_localctx, 922, RULE_alterIdentityColumnOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7129); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(7128);
				alterIdentityColumnOption();
				}
				}
				setState(7131); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==RESTART || _la==SET );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterIdentityColumnOptionContext extends ParserRuleContext {
		public TerminalNode RESTART() { return getToken(PostgreSQLStatementParser.RESTART, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public SeqOptElemContext seqOptElem() {
			return getRuleContext(SeqOptElemContext.class,0);
		}
		public TerminalNode GENERATED() { return getToken(PostgreSQLStatementParser.GENERATED, 0); }
		public GeneratedWhenContext generatedWhen() {
			return getRuleContext(GeneratedWhenContext.class,0);
		}
		public AlterIdentityColumnOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIdentityColumnOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterIdentityColumnOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterIdentityColumnOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterIdentityColumnOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIdentityColumnOptionContext alterIdentityColumnOption() throws RecognitionException {
		AlterIdentityColumnOptionContext _localctx = new AlterIdentityColumnOptionContext(_ctx, getState());
		enterRule(_localctx, 924, RULE_alterIdentityColumnOption);
		int _la;
		try {
			setState(7144);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,653,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7133);
				match(RESTART);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7134);
				match(RESTART);
				setState(7136);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(7135);
					match(WITH);
					}
				}

				setState(7138);
				numericOnly();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7139);
				match(SET);
				setState(7140);
				seqOptElem();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7141);
				match(SET);
				setState(7142);
				match(GENERATED);
				setState(7143);
				generatedWhen();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterColumnDefaultContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public AlterColumnDefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterColumnDefault; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterColumnDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterColumnDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterColumnDefault(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterColumnDefaultContext alterColumnDefault() throws RecognitionException {
		AlterColumnDefaultContext _localctx = new AlterColumnDefaultContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_alterColumnDefault);
		try {
			setState(7151);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(7146);
				match(SET);
				setState(7147);
				match(DEFAULT);
				setState(7148);
				aExpr(0);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 2);
				{
				setState(7149);
				match(DROP);
				setState(7150);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterOperatorContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLStatementParser.OPERATOR, 0); }
		public AlterOperatorClausesContext alterOperatorClauses() {
			return getRuleContext(AlterOperatorClausesContext.class,0);
		}
		public AlterOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOperatorContext alterOperator() throws RecognitionException {
		AlterOperatorContext _localctx = new AlterOperatorContext(_ctx, getState());
		enterRule(_localctx, 928, RULE_alterOperator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7153);
			match(ALTER);
			setState(7154);
			match(OPERATOR);
			setState(7155);
			alterOperatorClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterOperatorClassContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLStatementParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLStatementParser.CLASS, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AlterOperatorClassClausesContext alterOperatorClassClauses() {
			return getRuleContext(AlterOperatorClassClausesContext.class,0);
		}
		public AlterOperatorClassContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOperatorClass; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterOperatorClass(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterOperatorClass(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterOperatorClass(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOperatorClassContext alterOperatorClass() throws RecognitionException {
		AlterOperatorClassContext _localctx = new AlterOperatorClassContext(_ctx, getState());
		enterRule(_localctx, 930, RULE_alterOperatorClass);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7157);
			match(ALTER);
			setState(7158);
			match(OPERATOR);
			setState(7159);
			match(CLASS);
			setState(7160);
			anyName();
			setState(7161);
			match(USING);
			setState(7162);
			name();
			setState(7163);
			alterOperatorClassClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterOperatorClassClausesContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public AlterOperatorClassClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOperatorClassClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterOperatorClassClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterOperatorClassClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterOperatorClassClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOperatorClassClausesContext alterOperatorClassClauses() throws RecognitionException {
		AlterOperatorClassClausesContext _localctx = new AlterOperatorClassClausesContext(_ctx, getState());
		enterRule(_localctx, 932, RULE_alterOperatorClassClauses);
		try {
			setState(7174);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(7165);
				match(RENAME);
				setState(7166);
				match(TO);
				setState(7167);
				name();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 2);
				{
				setState(7168);
				match(SET);
				setState(7169);
				match(SCHEMA);
				setState(7170);
				name();
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 3);
				{
				setState(7171);
				match(OWNER);
				setState(7172);
				match(TO);
				setState(7173);
				roleSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterOperatorFamilyContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLStatementParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLStatementParser.FAMILY, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AlterOperatorFamilyClausesContext alterOperatorFamilyClauses() {
			return getRuleContext(AlterOperatorFamilyClausesContext.class,0);
		}
		public AlterOperatorFamilyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOperatorFamily; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterOperatorFamily(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterOperatorFamily(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterOperatorFamily(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOperatorFamilyContext alterOperatorFamily() throws RecognitionException {
		AlterOperatorFamilyContext _localctx = new AlterOperatorFamilyContext(_ctx, getState());
		enterRule(_localctx, 934, RULE_alterOperatorFamily);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7176);
			match(ALTER);
			setState(7177);
			match(OPERATOR);
			setState(7178);
			match(FAMILY);
			setState(7179);
			anyName();
			setState(7180);
			match(USING);
			setState(7181);
			name();
			setState(7182);
			alterOperatorFamilyClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterOperatorFamilyClausesContext extends ParserRuleContext {
		public OpclassItemListContext opclassItemList() {
			return getRuleContext(OpclassItemListContext.class,0);
		}
		public TerminalNode ADD() { return getToken(PostgreSQLStatementParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public AlterOperatorClassClausesContext alterOperatorClassClauses() {
			return getRuleContext(AlterOperatorClassClausesContext.class,0);
		}
		public AlterOperatorFamilyClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOperatorFamilyClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterOperatorFamilyClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterOperatorFamilyClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterOperatorFamilyClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOperatorFamilyClausesContext alterOperatorFamilyClauses() throws RecognitionException {
		AlterOperatorFamilyClausesContext _localctx = new AlterOperatorFamilyClausesContext(_ctx, getState());
		enterRule(_localctx, 936, RULE_alterOperatorFamilyClauses);
		int _la;
		try {
			setState(7187);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DROP:
			case ADD:
				enterOuterAlt(_localctx, 1);
				{
				setState(7184);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7185);
				opclassItemList();
				}
				break;
			case OWNER:
			case RENAME:
			case SET:
				enterOuterAlt(_localctx, 2);
				{
				setState(7186);
				alterOperatorClassClauses();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OpclassItemListContext extends ParserRuleContext {
		public List<OpclassItemContext> opclassItem() {
			return getRuleContexts(OpclassItemContext.class);
		}
		public OpclassItemContext opclassItem(int i) {
			return getRuleContext(OpclassItemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public OpclassItemListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclassItemList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOpclassItemList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOpclassItemList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOpclassItemList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpclassItemListContext opclassItemList() throws RecognitionException {
		OpclassItemListContext _localctx = new OpclassItemListContext(_ctx, getState());
		enterRule(_localctx, 938, RULE_opclassItemList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7189);
			opclassItem();
			setState(7194);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(7190);
				match(COMMA_);
				setState(7191);
				opclassItem();
				}
				}
				setState(7196);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OpclassItemContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(PostgreSQLStatementParser.OPERATOR, 0); }
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public AnyOperatorContext anyOperator() {
			return getRuleContext(AnyOperatorContext.class,0);
		}
		public OpclassPurposeContext opclassPurpose() {
			return getRuleContext(OpclassPurposeContext.class,0);
		}
		public TerminalNode RECHECK() { return getToken(PostgreSQLStatementParser.RECHECK, 0); }
		public OperatorWithArgtypesContext operatorWithArgtypes() {
			return getRuleContext(OperatorWithArgtypesContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PostgreSQLStatementParser.FUNCTION, 0); }
		public FunctionWithArgtypesContext functionWithArgtypes() {
			return getRuleContext(FunctionWithArgtypesContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TypeListContext typeList() {
			return getRuleContext(TypeListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLStatementParser.STORAGE, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public OpclassItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclassItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOpclassItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOpclassItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOpclassItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpclassItemContext opclassItem() throws RecognitionException {
		OpclassItemContext _localctx = new OpclassItemContext(_ctx, getState());
		enterRule(_localctx, 940, RULE_opclassItem);
		int _la;
		try {
			setState(7227);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,662,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7197);
				match(OPERATOR);
				setState(7198);
				match(NUMBER_);
				setState(7199);
				anyOperator();
				setState(7201);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(7200);
					opclassPurpose();
					}
				}

				setState(7204);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RECHECK) {
					{
					setState(7203);
					match(RECHECK);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7206);
				match(OPERATOR);
				setState(7207);
				match(NUMBER_);
				setState(7208);
				operatorWithArgtypes();
				setState(7210);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(7209);
					opclassPurpose();
					}
				}

				setState(7213);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RECHECK) {
					{
					setState(7212);
					match(RECHECK);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7215);
				match(FUNCTION);
				setState(7216);
				match(NUMBER_);
				setState(7217);
				functionWithArgtypes();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7218);
				match(FUNCTION);
				setState(7219);
				match(NUMBER_);
				setState(7220);
				match(LP_);
				setState(7221);
				typeList();
				setState(7222);
				match(RP_);
				setState(7223);
				functionWithArgtypes();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7225);
				match(STORAGE);
				setState(7226);
				typeName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OpclassPurposeContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLStatementParser.SEARCH, 0); }
		public TerminalNode ORDER() { return getToken(PostgreSQLStatementParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public OpclassPurposeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclassPurpose; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOpclassPurpose(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOpclassPurpose(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOpclassPurpose(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpclassPurposeContext opclassPurpose() throws RecognitionException {
		OpclassPurposeContext _localctx = new OpclassPurposeContext(_ctx, getState());
		enterRule(_localctx, 942, RULE_opclassPurpose);
		try {
			setState(7235);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,663,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7229);
				match(FOR);
				setState(7230);
				match(SEARCH);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7231);
				match(FOR);
				setState(7232);
				match(ORDER);
				setState(7233);
				match(BY);
				setState(7234);
				anyName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterOperatorClausesContext extends ParserRuleContext {
		public OperatorWithArgtypesContext operatorWithArgtypes() {
			return getRuleContext(OperatorWithArgtypesContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public OperatorDefListContext operatorDefList() {
			return getRuleContext(OperatorDefListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public AlterOperatorClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOperatorClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterOperatorClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterOperatorClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterOperatorClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOperatorClausesContext alterOperatorClauses() throws RecognitionException {
		AlterOperatorClausesContext _localctx = new AlterOperatorClausesContext(_ctx, getState());
		enterRule(_localctx, 944, RULE_alterOperatorClauses);
		try {
			setState(7253);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,664,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7237);
				operatorWithArgtypes();
				setState(7238);
				match(SET);
				setState(7239);
				match(SCHEMA);
				setState(7240);
				schemaName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7242);
				operatorWithArgtypes();
				setState(7243);
				match(SET);
				setState(7244);
				match(LP_);
				setState(7245);
				operatorDefList();
				setState(7246);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7248);
				operatorWithArgtypes();
				setState(7249);
				match(OWNER);
				setState(7250);
				match(TO);
				setState(7251);
				roleSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OperatorDefListContext extends ParserRuleContext {
		public List<OperatorDefElemContext> operatorDefElem() {
			return getRuleContexts(OperatorDefElemContext.class);
		}
		public OperatorDefElemContext operatorDefElem(int i) {
			return getRuleContext(OperatorDefElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public OperatorDefListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operatorDefList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOperatorDefList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOperatorDefList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOperatorDefList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperatorDefListContext operatorDefList() throws RecognitionException {
		OperatorDefListContext _localctx = new OperatorDefListContext(_ctx, getState());
		enterRule(_localctx, 946, RULE_operatorDefList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7255);
			operatorDefElem();
			setState(7260);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(7256);
				match(COMMA_);
				setState(7257);
				operatorDefElem();
				}
				}
				setState(7262);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OperatorDefElemContext extends ParserRuleContext {
		public TerminalNode EQ_() { return getToken(PostgreSQLStatementParser.EQ_, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLStatementParser.RESTRICT, 0); }
		public TerminalNode JOIN() { return getToken(PostgreSQLStatementParser.JOIN, 0); }
		public TerminalNode NONE() { return getToken(PostgreSQLStatementParser.NONE, 0); }
		public OperatorDefArgContext operatorDefArg() {
			return getRuleContext(OperatorDefArgContext.class,0);
		}
		public OperatorDefElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operatorDefElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOperatorDefElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOperatorDefElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOperatorDefElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperatorDefElemContext operatorDefElem() throws RecognitionException {
		OperatorDefElemContext _localctx = new OperatorDefElemContext(_ctx, getState());
		enterRule(_localctx, 948, RULE_operatorDefElem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7263);
			_la = _input.LA(1);
			if ( !(_la==RESTRICT || _la==JOIN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7264);
			match(EQ_);
			setState(7267);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NONE:
				{
				setState(7265);
				match(NONE);
				}
				break;
			case AND_:
			case OR_:
			case NOT_:
			case TILDE_:
			case VERTICAL_BAR_:
			case AMPERSAND_:
			case SIGNED_LEFT_SHIFT_:
			case SIGNED_RIGHT_SHIFT_:
			case CARET_:
			case MOD_:
			case COLON_:
			case PLUS_:
			case MINUS_:
			case ASTERISK_:
			case SLASH_:
			case BACKSLASH_:
			case DOT_:
			case DOT_ASTERISK_:
			case SAFE_EQ_:
			case DEQ_:
			case EQ_:
			case CQ_:
			case NEQ_:
			case GT_:
			case GTE_:
			case LT_:
			case LTE_:
			case POUND_:
			case LP_:
			case RP_:
			case LBE_:
			case RBE_:
			case LBT_:
			case RBT_:
			case COMMA_:
			case DQ_:
			case SQ_:
			case BQ_:
			case QUESTION_:
			case DOLLAR_:
			case AT_:
			case SEMI_:
			case TILDE_TILDE_:
			case NOT_TILDE_TILDE_:
			case TYPE_CAST_:
			case ILIKE_:
			case NOT_ILIKE_:
			case UNICODE_ESCAPE:
			case JSON_EXTRACT_:
			case JSON_EXTRACT_TEXT_:
			case JSON_PATH_EXTRACT_:
			case JSON_PATH_EXTRACT_TEXT_:
			case JSONB_CONTAIN_RIGHT_:
			case JSONB_CONTAIN_LEFT_:
			case JSONB_CONTAIN_ALL_TOP_KEY_:
			case JSONB_PATH_DELETE_:
			case JSONB_PATH_CONTAIN_ANY_VALUE_:
			case JSONB_PATH_PREDICATE_CHECK_:
			case GEOMETRIC_LENGTH_:
			case GEOMETRIC_DISTANCE_:
			case GEOMETRIC_EXTEND_RIGHT_:
			case GEOMETRIC_EXTEND_LEFT_:
			case GEOMETRIC_STRICT_BELOW_:
			case GEOMETRIC_STRICT_ABOVE_:
			case GEOMETRIC_EXTEND_ABOVE_:
			case GEOMETRIC_EXTEND_BELOW_:
			case GEOMETRIC_BELOW_:
			case GEOMETRIC_ABOVE_:
			case GEOMETRIC_INTERSECT_:
			case GEOMETRIC_PERPENDICULAR_:
			case GEOMETRIC_SAME_AS_:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case CHECK:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case REFERENCES:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case USER:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COLLATE:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CURRENT_TIMESTAMP:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRABLE:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INITIALLY:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case ONLY:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case INT2:
			case INT4:
			case INT8:
			case FLOAT:
			case FLOAT4:
			case FLOAT8:
			case VARCHAR:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case BIT:
			case XML:
			case JSON:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case CURRENT_SCHEMA:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case SYMMETRIC:
			case DOCUMENT:
			case NORMALIZED:
			case ASYMMETRIC:
			case VARIADIC:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case PLACING:
			case RETURNING:
			case LATERAL:
			case ANALYSE:
			case ANALYZE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case SELECT:
			case INSERT:
			case UPDATE:
			case DELETE:
			case CREATE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case GRANT:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case COLUMN:
			case INDEX:
			case CONSTRAINT:
			case PRIMARY:
			case UNIQUE:
			case FOREIGN:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case INTO:
			case WITH:
			case UNION:
			case DISTINCT:
			case CASE:
			case WHEN:
			case CAST:
			case FROM:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case USING:
			case WHERE:
			case AS:
			case ON:
			case IF:
			case ELSE:
			case THEN:
			case FOR:
			case TO:
			case AND:
			case OR:
			case IS:
			case NOT:
			case NULL:
			case TRUE:
			case FALSE:
			case IN:
			case ALL:
			case ANY:
			case LIKE:
			case ORDER:
			case GROUP:
			case BY:
			case ASC:
			case DESC:
			case HAVING:
			case LIMIT:
			case OFFSET:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case ARRAY:
			case INTERVAL:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case DEFAULT:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DO:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case BOTH:
			case LEADING:
			case TRAILING:
			case INTERSECT:
			case EXCEPT:
			case TIES:
			case FETCH:
			case CUBE:
			case SETS:
			case WINDOW:
			case OTHERS:
			case OVERLAPS:
			case SOME:
			case AT:
			case DEC:
			case END:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
				{
				setState(7266);
				operatorDefArg();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OperatorDefArgContext extends ParserRuleContext {
		public FuncTypeContext funcType() {
			return getRuleContext(FuncTypeContext.class,0);
		}
		public ReservedKeywordContext reservedKeyword() {
			return getRuleContext(ReservedKeywordContext.class,0);
		}
		public QualAllOpContext qualAllOp() {
			return getRuleContext(QualAllOpContext.class,0);
		}
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public OperatorDefArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operatorDefArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOperatorDefArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOperatorDefArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOperatorDefArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperatorDefArgContext operatorDefArg() throws RecognitionException {
		OperatorDefArgContext _localctx = new OperatorDefArgContext(_ctx, getState());
		enterRule(_localctx, 950, RULE_operatorDefArg);
		try {
			setState(7274);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,667,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7269);
				funcType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7270);
				reservedKeyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7271);
				qualAllOp();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7272);
				numericOnly();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7273);
				match(STRING_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OperatorWithArgtypesContext extends ParserRuleContext {
		public AnyOperatorContext anyOperator() {
			return getRuleContext(AnyOperatorContext.class,0);
		}
		public OperArgtypesContext operArgtypes() {
			return getRuleContext(OperArgtypesContext.class,0);
		}
		public OperatorWithArgtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operatorWithArgtypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOperatorWithArgtypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOperatorWithArgtypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOperatorWithArgtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperatorWithArgtypesContext operatorWithArgtypes() throws RecognitionException {
		OperatorWithArgtypesContext _localctx = new OperatorWithArgtypesContext(_ctx, getState());
		enterRule(_localctx, 952, RULE_operatorWithArgtypes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7276);
			anyOperator();
			setState(7277);
			operArgtypes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterAggregateContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLStatementParser.AGGREGATE, 0); }
		public AggregateSignatureContext aggregateSignature() {
			return getRuleContext(AggregateSignatureContext.class,0);
		}
		public AlterAggregateDefinitionClauseContext alterAggregateDefinitionClause() {
			return getRuleContext(AlterAggregateDefinitionClauseContext.class,0);
		}
		public AlterAggregateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterAggregate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterAggregate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterAggregate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterAggregate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterAggregateContext alterAggregate() throws RecognitionException {
		AlterAggregateContext _localctx = new AlterAggregateContext(_ctx, getState());
		enterRule(_localctx, 954, RULE_alterAggregate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7279);
			match(ALTER);
			setState(7280);
			match(AGGREGATE);
			setState(7281);
			aggregateSignature();
			setState(7282);
			alterAggregateDefinitionClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AggregateSignatureContext extends ParserRuleContext {
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public AggrArgsContext aggrArgs() {
			return getRuleContext(AggrArgsContext.class,0);
		}
		public AggregateSignatureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateSignature; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAggregateSignature(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAggregateSignature(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAggregateSignature(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateSignatureContext aggregateSignature() throws RecognitionException {
		AggregateSignatureContext _localctx = new AggregateSignatureContext(_ctx, getState());
		enterRule(_localctx, 956, RULE_aggregateSignature);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7284);
			funcName();
			setState(7285);
			aggrArgs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AggrArgsContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode ASTERISK_() { return getToken(PostgreSQLStatementParser.ASTERISK_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public List<AggrArgsListContext> aggrArgsList() {
			return getRuleContexts(AggrArgsListContext.class);
		}
		public AggrArgsListContext aggrArgsList(int i) {
			return getRuleContext(AggrArgsListContext.class,i);
		}
		public TerminalNode ORDER() { return getToken(PostgreSQLStatementParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public AggrArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggrArgs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAggrArgs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAggrArgs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAggrArgs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggrArgsContext aggrArgs() throws RecognitionException {
		AggrArgsContext _localctx = new AggrArgsContext(_ctx, getState());
		enterRule(_localctx, 958, RULE_aggrArgs);
		try {
			setState(7307);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,668,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7287);
				match(LP_);
				setState(7288);
				match(ASTERISK_);
				setState(7289);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7290);
				match(LP_);
				setState(7291);
				aggrArgsList();
				setState(7292);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7294);
				match(LP_);
				setState(7295);
				match(ORDER);
				setState(7296);
				match(BY);
				setState(7297);
				aggrArgsList();
				setState(7298);
				match(RP_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7300);
				match(LP_);
				setState(7301);
				aggrArgsList();
				setState(7302);
				match(ORDER);
				setState(7303);
				match(BY);
				setState(7304);
				aggrArgsList();
				setState(7305);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AggrArgsListContext extends ParserRuleContext {
		public List<AggrArgContext> aggrArg() {
			return getRuleContexts(AggrArgContext.class);
		}
		public AggrArgContext aggrArg(int i) {
			return getRuleContext(AggrArgContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public AggrArgsListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggrArgsList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAggrArgsList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAggrArgsList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAggrArgsList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggrArgsListContext aggrArgsList() throws RecognitionException {
		AggrArgsListContext _localctx = new AggrArgsListContext(_ctx, getState());
		enterRule(_localctx, 960, RULE_aggrArgsList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7309);
			aggrArg();
			setState(7314);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(7310);
				match(COMMA_);
				setState(7311);
				aggrArg();
				}
				}
				setState(7316);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AggrArgContext extends ParserRuleContext {
		public FuncArgContext funcArg() {
			return getRuleContext(FuncArgContext.class,0);
		}
		public AggrArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggrArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAggrArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAggrArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAggrArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggrArgContext aggrArg() throws RecognitionException {
		AggrArgContext _localctx = new AggrArgContext(_ctx, getState());
		enterRule(_localctx, 962, RULE_aggrArg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7317);
			funcArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterAggregateDefinitionClauseContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public AlterAggregateDefinitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterAggregateDefinitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterAggregateDefinitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterAggregateDefinitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterAggregateDefinitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterAggregateDefinitionClauseContext alterAggregateDefinitionClause() throws RecognitionException {
		AlterAggregateDefinitionClauseContext _localctx = new AlterAggregateDefinitionClauseContext(_ctx, getState());
		enterRule(_localctx, 964, RULE_alterAggregateDefinitionClause);
		try {
			setState(7328);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(7319);
				match(RENAME);
				setState(7320);
				match(TO);
				setState(7321);
				name();
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 2);
				{
				setState(7322);
				match(OWNER);
				setState(7323);
				match(TO);
				setState(7324);
				roleSpec();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 3);
				{
				setState(7325);
				match(SET);
				setState(7326);
				match(SCHEMA);
				setState(7327);
				schemaName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterCollationContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLStatementParser.COLLATION, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public AlterCollationClauseContext alterCollationClause() {
			return getRuleContext(AlterCollationClauseContext.class,0);
		}
		public AlterCollationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterCollation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterCollation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterCollation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterCollation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterCollationContext alterCollation() throws RecognitionException {
		AlterCollationContext _localctx = new AlterCollationContext(_ctx, getState());
		enterRule(_localctx, 966, RULE_alterCollation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7330);
			match(ALTER);
			setState(7331);
			match(COLLATION);
			setState(7332);
			anyName();
			setState(7333);
			alterCollationClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterCollationClauseContext extends ParserRuleContext {
		public TerminalNode REFRESH() { return getToken(PostgreSQLStatementParser.REFRESH, 0); }
		public TerminalNode VERSION() { return getToken(PostgreSQLStatementParser.VERSION, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public AlterCollationClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterCollationClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterCollationClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterCollationClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterCollationClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterCollationClauseContext alterCollationClause() throws RecognitionException {
		AlterCollationClauseContext _localctx = new AlterCollationClauseContext(_ctx, getState());
		enterRule(_localctx, 968, RULE_alterCollationClause);
		try {
			setState(7346);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REFRESH:
				enterOuterAlt(_localctx, 1);
				{
				setState(7335);
				match(REFRESH);
				setState(7336);
				match(VERSION);
				}
				break;
			case RENAME:
				enterOuterAlt(_localctx, 2);
				{
				setState(7337);
				match(RENAME);
				setState(7338);
				match(TO);
				setState(7339);
				name();
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 3);
				{
				setState(7340);
				match(OWNER);
				setState(7341);
				match(TO);
				setState(7342);
				roleSpec();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 4);
				{
				setState(7343);
				match(SET);
				setState(7344);
				match(SCHEMA);
				setState(7345);
				schemaName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterConversionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode CONVERSION() { return getToken(PostgreSQLStatementParser.CONVERSION, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public AlterConversionClauseContext alterConversionClause() {
			return getRuleContext(AlterConversionClauseContext.class,0);
		}
		public AlterConversionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterConversion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterConversion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterConversion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterConversion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterConversionContext alterConversion() throws RecognitionException {
		AlterConversionContext _localctx = new AlterConversionContext(_ctx, getState());
		enterRule(_localctx, 970, RULE_alterConversion);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7348);
			match(ALTER);
			setState(7349);
			match(CONVERSION);
			setState(7350);
			anyName();
			setState(7351);
			alterConversionClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterConversionClauseContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public AlterConversionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterConversionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterConversionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterConversionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterConversionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterConversionClauseContext alterConversionClause() throws RecognitionException {
		AlterConversionClauseContext _localctx = new AlterConversionClauseContext(_ctx, getState());
		enterRule(_localctx, 972, RULE_alterConversionClause);
		try {
			setState(7362);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(7353);
				match(RENAME);
				setState(7354);
				match(TO);
				setState(7355);
				name();
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 2);
				{
				setState(7356);
				match(OWNER);
				setState(7357);
				match(TO);
				setState(7358);
				roleSpec();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 3);
				{
				setState(7359);
				match(SET);
				setState(7360);
				match(SCHEMA);
				setState(7361);
				schemaName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterDefaultPrivilegesContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PostgreSQLStatementParser.PRIVILEGES, 0); }
		public DefACLActionContext defACLAction() {
			return getRuleContext(DefACLActionContext.class,0);
		}
		public DefACLOptionListContext defACLOptionList() {
			return getRuleContext(DefACLOptionListContext.class,0);
		}
		public AlterDefaultPrivilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDefaultPrivileges; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterDefaultPrivileges(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterDefaultPrivileges(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterDefaultPrivileges(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDefaultPrivilegesContext alterDefaultPrivileges() throws RecognitionException {
		AlterDefaultPrivilegesContext _localctx = new AlterDefaultPrivilegesContext(_ctx, getState());
		enterRule(_localctx, 974, RULE_alterDefaultPrivileges);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7364);
			match(ALTER);
			setState(7365);
			match(DEFAULT);
			setState(7366);
			match(PRIVILEGES);
			setState(7368);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR || _la==IN) {
				{
				setState(7367);
				defACLOptionList();
				}
			}

			setState(7370);
			defACLAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DefACLActionContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(PostgreSQLStatementParser.GRANT, 0); }
		public PrivilegesContext privileges() {
			return getRuleContext(PrivilegesContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public DefaclPrivilegeTargetContext defaclPrivilegeTarget() {
			return getRuleContext(DefaclPrivilegeTargetContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public GranteeListContext granteeList() {
			return getRuleContext(GranteeListContext.class,0);
		}
		public GrantGrantOptionContext grantGrantOption() {
			return getRuleContext(GrantGrantOptionContext.class,0);
		}
		public TerminalNode REVOKE() { return getToken(PostgreSQLStatementParser.REVOKE, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public TerminalNode OPTION() { return getToken(PostgreSQLStatementParser.OPTION, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public DefACLActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defACLAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDefACLAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDefACLAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDefACLAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefACLActionContext defACLAction() throws RecognitionException {
		DefACLActionContext _localctx = new DefACLActionContext(_ctx, getState());
		enterRule(_localctx, 976, RULE_defACLAction);
		int _la;
		try {
			setState(7402);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,677,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7372);
				match(GRANT);
				setState(7373);
				privileges();
				setState(7374);
				match(ON);
				setState(7375);
				defaclPrivilegeTarget();
				setState(7376);
				match(TO);
				setState(7377);
				granteeList();
				setState(7379);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(7378);
					grantGrantOption();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7381);
				match(REVOKE);
				setState(7382);
				privileges();
				setState(7383);
				match(ON);
				setState(7384);
				defaclPrivilegeTarget();
				setState(7385);
				match(FROM);
				setState(7386);
				granteeList();
				setState(7388);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(7387);
					dropBehavior();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7390);
				match(REVOKE);
				setState(7391);
				match(GRANT);
				setState(7392);
				match(OPTION);
				setState(7393);
				match(FOR);
				setState(7394);
				privileges();
				setState(7395);
				match(ON);
				setState(7396);
				defaclPrivilegeTarget();
				setState(7397);
				match(FROM);
				setState(7398);
				granteeList();
				setState(7400);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(7399);
					dropBehavior();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GrantGrantOptionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode GRANT() { return getToken(PostgreSQLStatementParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLStatementParser.OPTION, 0); }
		public GrantGrantOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantGrantOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterGrantGrantOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitGrantGrantOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitGrantGrantOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantGrantOptionContext grantGrantOption() throws RecognitionException {
		GrantGrantOptionContext _localctx = new GrantGrantOptionContext(_ctx, getState());
		enterRule(_localctx, 978, RULE_grantGrantOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7404);
			match(WITH);
			setState(7405);
			match(GRANT);
			setState(7406);
			match(OPTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GranteeListContext extends ParserRuleContext {
		public List<GranteeContext> grantee() {
			return getRuleContexts(GranteeContext.class);
		}
		public GranteeContext grantee(int i) {
			return getRuleContext(GranteeContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public GranteeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_granteeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterGranteeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitGranteeList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitGranteeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GranteeListContext granteeList() throws RecognitionException {
		GranteeListContext _localctx = new GranteeListContext(_ctx, getState());
		enterRule(_localctx, 980, RULE_granteeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7408);
			grantee();
			setState(7413);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(7409);
				match(COMMA_);
				setState(7410);
				grantee();
				}
				}
				setState(7415);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GranteeContext extends ParserRuleContext {
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode GROUP() { return getToken(PostgreSQLStatementParser.GROUP, 0); }
		public GranteeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantee; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterGrantee(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitGrantee(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitGrantee(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GranteeContext grantee() throws RecognitionException {
		GranteeContext _localctx = new GranteeContext(_ctx, getState());
		enterRule(_localctx, 982, RULE_grantee);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7417);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GROUP) {
				{
				setState(7416);
				match(GROUP);
				}
			}

			setState(7419);
			roleSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DefaclPrivilegeTargetContext extends ParserRuleContext {
		public TerminalNode TABLES() { return getToken(PostgreSQLStatementParser.TABLES, 0); }
		public TerminalNode FUNCTIONS() { return getToken(PostgreSQLStatementParser.FUNCTIONS, 0); }
		public TerminalNode ROUTINES() { return getToken(PostgreSQLStatementParser.ROUTINES, 0); }
		public TerminalNode SEQUENCES() { return getToken(PostgreSQLStatementParser.SEQUENCES, 0); }
		public TerminalNode TYPES() { return getToken(PostgreSQLStatementParser.TYPES, 0); }
		public TerminalNode SCHEMAS() { return getToken(PostgreSQLStatementParser.SCHEMAS, 0); }
		public DefaclPrivilegeTargetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaclPrivilegeTarget; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDefaclPrivilegeTarget(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDefaclPrivilegeTarget(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDefaclPrivilegeTarget(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaclPrivilegeTargetContext defaclPrivilegeTarget() throws RecognitionException {
		DefaclPrivilegeTargetContext _localctx = new DefaclPrivilegeTargetContext(_ctx, getState());
		enterRule(_localctx, 984, RULE_defaclPrivilegeTarget);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7421);
			_la = _input.LA(1);
			if ( !(((((_la - 332)) & ~0x3f) == 0 && ((1L << (_la - 332)) & 144186656868532225L) != 0) || _la==TYPES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrivilegesContext extends ParserRuleContext {
		public PrivilegeListContext privilegeList() {
			return getRuleContext(PrivilegeListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PostgreSQLStatementParser.PRIVILEGES, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public PrivilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privileges; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterPrivileges(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitPrivileges(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitPrivileges(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegesContext privileges() throws RecognitionException {
		PrivilegesContext _localctx = new PrivilegesContext(_ctx, getState());
		enterRule(_localctx, 986, RULE_privileges);
		try {
			setState(7438);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,680,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7423);
				privilegeList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7424);
				match(ALL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7425);
				match(ALL);
				setState(7426);
				match(PRIVILEGES);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7427);
				match(ALL);
				setState(7428);
				match(LP_);
				setState(7429);
				columnList();
				setState(7430);
				match(RP_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7432);
				match(ALL);
				setState(7433);
				match(PRIVILEGES);
				setState(7434);
				match(LP_);
				setState(7435);
				columnList();
				setState(7436);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrivilegeListContext extends ParserRuleContext {
		public List<PrivilegeContext> privilege() {
			return getRuleContexts(PrivilegeContext.class);
		}
		public PrivilegeContext privilege(int i) {
			return getRuleContext(PrivilegeContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public PrivilegeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterPrivilegeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitPrivilegeList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitPrivilegeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeListContext privilegeList() throws RecognitionException {
		PrivilegeListContext _localctx = new PrivilegeListContext(_ctx, getState());
		enterRule(_localctx, 988, RULE_privilegeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7440);
			privilege();
			setState(7445);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(7441);
				match(COMMA_);
				setState(7442);
				privilege();
				}
				}
				setState(7447);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrivilegeContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PostgreSQLStatementParser.SELECT, 0); }
		public OptColumnListContext optColumnList() {
			return getRuleContext(OptColumnListContext.class,0);
		}
		public TerminalNode REFERENCES() { return getToken(PostgreSQLStatementParser.REFERENCES, 0); }
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public PrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterPrivilege(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitPrivilege(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitPrivilege(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeContext privilege() throws RecognitionException {
		PrivilegeContext _localctx = new PrivilegeContext(_ctx, getState());
		enterRule(_localctx, 990, RULE_privilege);
		int _la;
		try {
			setState(7464);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(7448);
				match(SELECT);
				setState(7450);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(7449);
					optColumnList();
					}
				}

				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 2);
				{
				setState(7452);
				match(REFERENCES);
				setState(7454);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(7453);
					optColumnList();
					}
				}

				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(7456);
				match(CREATE);
				setState(7458);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(7457);
					optColumnList();
					}
				}

				}
				break;
			case UNICODE_ESCAPE:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case XML:
			case JSON:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case PARAM:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case NATIONAL:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 4);
				{
				setState(7460);
				colId();
				setState(7462);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(7461);
					optColumnList();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DefACLOptionListContext extends ParserRuleContext {
		public List<DefACLOptionContext> defACLOption() {
			return getRuleContexts(DefACLOptionContext.class);
		}
		public DefACLOptionContext defACLOption(int i) {
			return getRuleContext(DefACLOptionContext.class,i);
		}
		public DefACLOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defACLOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDefACLOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDefACLOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDefACLOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefACLOptionListContext defACLOptionList() throws RecognitionException {
		DefACLOptionListContext _localctx = new DefACLOptionListContext(_ctx, getState());
		enterRule(_localctx, 992, RULE_defACLOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7467); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(7466);
				defACLOption();
				}
				}
				setState(7469); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==FOR || _la==IN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DefACLOptionContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(PostgreSQLStatementParser.IN, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public SchemaNameListContext schemaNameList() {
			return getRuleContext(SchemaNameListContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(PostgreSQLStatementParser.ROLE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLStatementParser.USER, 0); }
		public DefACLOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defACLOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDefACLOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDefACLOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDefACLOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefACLOptionContext defACLOption() throws RecognitionException {
		DefACLOptionContext _localctx = new DefACLOptionContext(_ctx, getState());
		enterRule(_localctx, 994, RULE_defACLOption);
		int _la;
		try {
			setState(7477);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IN:
				enterOuterAlt(_localctx, 1);
				{
				setState(7471);
				match(IN);
				setState(7472);
				match(SCHEMA);
				setState(7473);
				schemaNameList();
				}
				break;
			case FOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(7474);
				match(FOR);
				setState(7475);
				_la = _input.LA(1);
				if ( !(_la==ROLE || _la==USER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7476);
				roleList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SchemaNameListContext extends ParserRuleContext {
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public SchemaNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaNameList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSchemaNameList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSchemaNameList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSchemaNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaNameListContext schemaNameList() throws RecognitionException {
		SchemaNameListContext _localctx = new SchemaNameListContext(_ctx, getState());
		enterRule(_localctx, 996, RULE_schemaNameList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7479);
			nameList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterDomainContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode DOMAIN() { return getToken(PostgreSQLStatementParser.DOMAIN, 0); }
		public AlterDomainClauseContext alterDomainClause() {
			return getRuleContext(AlterDomainClauseContext.class,0);
		}
		public AlterDomainContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDomain; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterDomain(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterDomain(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterDomain(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDomainContext alterDomain() throws RecognitionException {
		AlterDomainContext _localctx = new AlterDomainContext(_ctx, getState());
		enterRule(_localctx, 998, RULE_alterDomain);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7481);
			match(ALTER);
			setState(7482);
			match(DOMAIN);
			setState(7483);
			alterDomainClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterDomainClauseContext extends ParserRuleContext {
		public List<AnyNameContext> anyName() {
			return getRuleContexts(AnyNameContext.class);
		}
		public AnyNameContext anyName(int i) {
			return getRuleContext(AnyNameContext.class,i);
		}
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PostgreSQLStatementParser.NULL, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode ADD() { return getToken(PostgreSQLStatementParser.ADD, 0); }
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TerminalNode VALID() { return getToken(PostgreSQLStatementParser.VALID, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLStatementParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public TerminalNode VALIDATE() { return getToken(PostgreSQLStatementParser.VALIDATE, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public List<ConstraintNameContext> constraintName() {
			return getRuleContexts(ConstraintNameContext.class);
		}
		public ConstraintNameContext constraintName(int i) {
			return getRuleContext(ConstraintNameContext.class,i);
		}
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public AlterColumnDefaultContext alterColumnDefault() {
			return getRuleContext(AlterColumnDefaultContext.class,0);
		}
		public AlterDomainClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDomainClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterDomainClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterDomainClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterDomainClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDomainClauseContext alterDomainClause() throws RecognitionException {
		AlterDomainClauseContext _localctx = new AlterDomainClauseContext(_ctx, getState());
		enterRule(_localctx, 1000, RULE_alterDomainClause);
		int _la;
		try {
			setState(7537);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,692,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7485);
				anyName();
				setState(7486);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==SET) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7487);
				match(NOT);
				setState(7488);
				match(NULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7490);
				anyName();
				setState(7491);
				match(ADD);
				setState(7492);
				tableConstraint();
				setState(7495);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(7493);
					match(NOT);
					setState(7494);
					match(VALID);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7497);
				anyName();
				setState(7498);
				match(DROP);
				setState(7499);
				match(CONSTRAINT);
				setState(7501);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,690,_ctx) ) {
				case 1:
					{
					setState(7500);
					ifExists();
					}
					break;
				}
				setState(7503);
				name();
				setState(7505);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(7504);
					dropBehavior();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7507);
				anyName();
				setState(7508);
				match(VALIDATE);
				setState(7509);
				match(CONSTRAINT);
				setState(7510);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7512);
				anyName();
				setState(7513);
				match(RENAME);
				setState(7514);
				match(CONSTRAINT);
				setState(7515);
				constraintName();
				setState(7516);
				match(TO);
				setState(7517);
				constraintName();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7519);
				anyName();
				setState(7520);
				match(OWNER);
				setState(7521);
				match(TO);
				setState(7522);
				roleSpec();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7524);
				anyName();
				setState(7525);
				match(RENAME);
				setState(7526);
				match(TO);
				setState(7527);
				anyName();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7529);
				anyName();
				setState(7530);
				match(SET);
				setState(7531);
				match(SCHEMA);
				setState(7532);
				name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7534);
				anyName();
				setState(7535);
				alterColumnDefault();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterEventTriggerContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLStatementParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLStatementParser.TRIGGER, 0); }
		public TiggerNameContext tiggerName() {
			return getRuleContext(TiggerNameContext.class,0);
		}
		public AlterEventTriggerClauseContext alterEventTriggerClause() {
			return getRuleContext(AlterEventTriggerClauseContext.class,0);
		}
		public AlterEventTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterEventTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterEventTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterEventTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterEventTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterEventTriggerContext alterEventTrigger() throws RecognitionException {
		AlterEventTriggerContext _localctx = new AlterEventTriggerContext(_ctx, getState());
		enterRule(_localctx, 1002, RULE_alterEventTrigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7539);
			match(ALTER);
			setState(7540);
			match(EVENT);
			setState(7541);
			match(TRIGGER);
			setState(7542);
			tiggerName();
			setState(7543);
			alterEventTriggerClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterEventTriggerClauseContext extends ParserRuleContext {
		public TerminalNode DISABLE() { return getToken(PostgreSQLStatementParser.DISABLE, 0); }
		public TerminalNode ENABLE() { return getToken(PostgreSQLStatementParser.ENABLE, 0); }
		public TerminalNode REPLICA() { return getToken(PostgreSQLStatementParser.REPLICA, 0); }
		public TerminalNode ALWAYS() { return getToken(PostgreSQLStatementParser.ALWAYS, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TiggerNameContext tiggerName() {
			return getRuleContext(TiggerNameContext.class,0);
		}
		public AlterEventTriggerClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterEventTriggerClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterEventTriggerClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterEventTriggerClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterEventTriggerClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterEventTriggerClauseContext alterEventTriggerClause() throws RecognitionException {
		AlterEventTriggerClauseContext _localctx = new AlterEventTriggerClauseContext(_ctx, getState());
		enterRule(_localctx, 1004, RULE_alterEventTriggerClause);
		int _la;
		try {
			setState(7554);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DISABLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7545);
				match(DISABLE);
				}
				break;
			case ENABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7546);
				match(ENABLE);
				setState(7547);
				_la = _input.LA(1);
				if ( !(_la==ALWAYS || _la==REPLICA) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 3);
				{
				setState(7548);
				match(OWNER);
				setState(7549);
				match(TO);
				setState(7550);
				roleSpec();
				}
				break;
			case RENAME:
				enterOuterAlt(_localctx, 4);
				{
				setState(7551);
				match(RENAME);
				setState(7552);
				match(TO);
				setState(7553);
				tiggerName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TiggerNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TiggerNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tiggerName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTiggerName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTiggerName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTiggerName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TiggerNameContext tiggerName() throws RecognitionException {
		TiggerNameContext _localctx = new TiggerNameContext(_ctx, getState());
		enterRule(_localctx, 1006, RULE_tiggerName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7556);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterExtensionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLStatementParser.EXTENSION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AlterExtensionClausesContext alterExtensionClauses() {
			return getRuleContext(AlterExtensionClausesContext.class,0);
		}
		public AlterExtensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterExtension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterExtension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterExtension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterExtension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterExtensionContext alterExtension() throws RecognitionException {
		AlterExtensionContext _localctx = new AlterExtensionContext(_ctx, getState());
		enterRule(_localctx, 1008, RULE_alterExtension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7558);
			match(ALTER);
			setState(7559);
			match(EXTENSION);
			setState(7560);
			name();
			setState(7561);
			alterExtensionClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterExtensionClausesContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(PostgreSQLStatementParser.UPDATE, 0); }
		public AlterExtensionOptListContext alterExtensionOptList() {
			return getRuleContext(AlterExtensionOptListContext.class,0);
		}
		public TerminalNode ACCESS() { return getToken(PostgreSQLStatementParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(PostgreSQLStatementParser.METHOD, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ADD() { return getToken(PostgreSQLStatementParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLStatementParser.AGGREGATE, 0); }
		public AggregateWithArgtypesContext aggregateWithArgtypes() {
			return getRuleContext(AggregateWithArgtypesContext.class,0);
		}
		public TerminalNode CAST() { return getToken(PostgreSQLStatementParser.CAST, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public List<TypeNameContext> typeName() {
			return getRuleContexts(TypeNameContext.class);
		}
		public TypeNameContext typeName(int i) {
			return getRuleContext(TypeNameContext.class,i);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLStatementParser.COLLATION, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode CONVERSION() { return getToken(PostgreSQLStatementParser.CONVERSION, 0); }
		public TerminalNode DOMAIN() { return getToken(PostgreSQLStatementParser.DOMAIN, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLStatementParser.FUNCTION, 0); }
		public FunctionWithArgtypesContext functionWithArgtypes() {
			return getRuleContext(FunctionWithArgtypesContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLStatementParser.LANGUAGE, 0); }
		public TerminalNode PROCEDURAL() { return getToken(PostgreSQLStatementParser.PROCEDURAL, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLStatementParser.OPERATOR, 0); }
		public OperatorWithArgtypesContext operatorWithArgtypes() {
			return getRuleContext(OperatorWithArgtypesContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public AccessMethodContext accessMethod() {
			return getRuleContext(AccessMethodContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(PostgreSQLStatementParser.CLASS, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLStatementParser.FAMILY, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLStatementParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLStatementParser.ROUTINE, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLStatementParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLStatementParser.TRIGGER, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSQLStatementParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLStatementParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLStatementParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLStatementParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLStatementParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLStatementParser.CONFIGURATION, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLStatementParser.SEQUENCE, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLStatementParser.VIEW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLStatementParser.MATERIALIZED, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLStatementParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(PostgreSQLStatementParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLStatementParser.WRAPPER, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLStatementParser.SERVER, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLStatementParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public TerminalNode TYPE() { return getToken(PostgreSQLStatementParser.TYPE, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public AlterExtensionClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterExtensionClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterExtensionClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterExtensionClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterExtensionClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterExtensionClausesContext alterExtensionClauses() throws RecognitionException {
		AlterExtensionClausesContext _localctx = new AlterExtensionClausesContext(_ctx, getState());
		enterRule(_localctx, 1010, RULE_alterExtensionClauses);
		int _la;
		try {
			setState(7679);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,695,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7563);
				match(UPDATE);
				setState(7564);
				alterExtensionOptList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7565);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7566);
				match(ACCESS);
				setState(7567);
				match(METHOD);
				setState(7568);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7569);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7570);
				match(AGGREGATE);
				setState(7571);
				aggregateWithArgtypes();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7572);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7573);
				match(CAST);
				setState(7574);
				match(LP_);
				setState(7575);
				typeName();
				setState(7576);
				match(AS);
				setState(7577);
				typeName();
				setState(7578);
				match(RP_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7580);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7581);
				match(COLLATION);
				setState(7582);
				anyName();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7583);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7584);
				match(CONVERSION);
				setState(7585);
				anyName();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7586);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7587);
				match(DOMAIN);
				setState(7588);
				typeName();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7589);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7590);
				match(FUNCTION);
				setState(7591);
				functionWithArgtypes();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7592);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7594);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROCEDURAL) {
					{
					setState(7593);
					match(PROCEDURAL);
					}
				}

				setState(7596);
				match(LANGUAGE);
				setState(7597);
				name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7598);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7599);
				match(OPERATOR);
				setState(7600);
				operatorWithArgtypes();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7601);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7602);
				match(OPERATOR);
				setState(7603);
				_la = _input.LA(1);
				if ( !(_la==CLASS || _la==FAMILY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7604);
				anyName();
				setState(7605);
				match(USING);
				setState(7606);
				accessMethod();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7608);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7609);
				match(PROCEDURE);
				setState(7610);
				functionWithArgtypes();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7611);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7612);
				match(ROUTINE);
				setState(7613);
				functionWithArgtypes();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(7614);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7615);
				match(SCHEMA);
				setState(7616);
				name();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(7617);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7618);
				match(EVENT);
				setState(7619);
				match(TRIGGER);
				setState(7620);
				name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(7621);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7622);
				match(TABLE);
				setState(7623);
				anyName();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(7624);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7625);
				match(TEXT);
				setState(7626);
				match(SEARCH);
				setState(7627);
				match(PARSER);
				setState(7628);
				anyName();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(7629);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7630);
				match(TEXT);
				setState(7631);
				match(SEARCH);
				setState(7632);
				match(DICTIONARY);
				setState(7633);
				anyName();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(7634);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7635);
				match(TEXT);
				setState(7636);
				match(SEARCH);
				setState(7637);
				match(TEMPLATE);
				setState(7638);
				anyName();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(7639);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7640);
				match(TEXT);
				setState(7641);
				match(SEARCH);
				setState(7642);
				match(CONFIGURATION);
				setState(7643);
				anyName();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(7644);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7645);
				match(SEQUENCE);
				setState(7646);
				anyName();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(7647);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7648);
				match(VIEW);
				setState(7649);
				anyName();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(7650);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7651);
				match(MATERIALIZED);
				setState(7652);
				match(VIEW);
				setState(7653);
				anyName();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(7654);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7655);
				match(FOREIGN);
				setState(7656);
				match(TABLE);
				setState(7657);
				anyName();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(7658);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7659);
				match(FOREIGN);
				setState(7660);
				match(DATA);
				setState(7661);
				match(WRAPPER);
				setState(7662);
				name();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(7663);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7664);
				match(SERVER);
				setState(7665);
				name();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(7666);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7667);
				match(TRANSFORM);
				setState(7668);
				match(FOR);
				setState(7669);
				typeName();
				setState(7670);
				match(LANGUAGE);
				setState(7671);
				name();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(7673);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7674);
				match(TYPE);
				setState(7675);
				typeName();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(7676);
				match(SET);
				setState(7677);
				match(SCHEMA);
				setState(7678);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionWithArgtypesContext extends ParserRuleContext {
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public FuncArgsContext funcArgs() {
			return getRuleContext(FuncArgsContext.class,0);
		}
		public TypeFuncNameKeywordContext typeFuncNameKeyword() {
			return getRuleContext(TypeFuncNameKeywordContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public FunctionWithArgtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionWithArgtypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterFunctionWithArgtypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitFunctionWithArgtypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitFunctionWithArgtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionWithArgtypesContext functionWithArgtypes() throws RecognitionException {
		FunctionWithArgtypesContext _localctx = new FunctionWithArgtypesContext(_ctx, getState());
		enterRule(_localctx, 1012, RULE_functionWithArgtypes);
		try {
			setState(7689);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,696,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7681);
				funcName();
				setState(7682);
				funcArgs();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7684);
				typeFuncNameKeyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7685);
				colId();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7686);
				colId();
				setState(7687);
				indirection(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FuncArgsContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public FuncArgsListContext funcArgsList() {
			return getRuleContext(FuncArgsListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public FuncArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcArgs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterFuncArgs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitFuncArgs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitFuncArgs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncArgsContext funcArgs() throws RecognitionException {
		FuncArgsContext _localctx = new FuncArgsContext(_ctx, getState());
		enterRule(_localctx, 1014, RULE_funcArgs);
		try {
			setState(7697);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,697,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7691);
				match(LP_);
				setState(7692);
				funcArgsList();
				setState(7693);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7695);
				match(LP_);
				setState(7696);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AggregateWithArgtypesContext extends ParserRuleContext {
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public AggrArgsContext aggrArgs() {
			return getRuleContext(AggrArgsContext.class,0);
		}
		public AggregateWithArgtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateWithArgtypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAggregateWithArgtypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAggregateWithArgtypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAggregateWithArgtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateWithArgtypesContext aggregateWithArgtypes() throws RecognitionException {
		AggregateWithArgtypesContext _localctx = new AggregateWithArgtypesContext(_ctx, getState());
		enterRule(_localctx, 1016, RULE_aggregateWithArgtypes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7699);
			funcName();
			setState(7700);
			aggrArgs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterExtensionOptListContext extends ParserRuleContext {
		public List<AlterExtensionOptItemContext> alterExtensionOptItem() {
			return getRuleContexts(AlterExtensionOptItemContext.class);
		}
		public AlterExtensionOptItemContext alterExtensionOptItem(int i) {
			return getRuleContext(AlterExtensionOptItemContext.class,i);
		}
		public AlterExtensionOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterExtensionOptList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterExtensionOptList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterExtensionOptList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterExtensionOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterExtensionOptListContext alterExtensionOptList() throws RecognitionException {
		AlterExtensionOptListContext _localctx = new AlterExtensionOptListContext(_ctx, getState());
		enterRule(_localctx, 1018, RULE_alterExtensionOptList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7705);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==TO) {
				{
				{
				setState(7702);
				alterExtensionOptItem();
				}
				}
				setState(7707);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterExtensionOptItemContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public NonReservedWordContext nonReservedWord() {
			return getRuleContext(NonReservedWordContext.class,0);
		}
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public AlterExtensionOptItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterExtensionOptItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterExtensionOptItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterExtensionOptItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterExtensionOptItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterExtensionOptItemContext alterExtensionOptItem() throws RecognitionException {
		AlterExtensionOptItemContext _localctx = new AlterExtensionOptItemContext(_ctx, getState());
		enterRule(_localctx, 1020, RULE_alterExtensionOptItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7708);
			match(TO);
			setState(7711);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNICODE_ESCAPE:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXISTS:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case BIT:
			case XML:
			case JSON:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case OUT:
			case INOUT:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case IDENTIFIER_:
				{
				setState(7709);
				nonReservedWord();
				}
				break;
			case STRING_:
				{
				setState(7710);
				match(STRING_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterForeignDataWrapperContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLStatementParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(PostgreSQLStatementParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLStatementParser.WRAPPER, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public AlterForeignDataWrapperClausesContext alterForeignDataWrapperClauses() {
			return getRuleContext(AlterForeignDataWrapperClausesContext.class,0);
		}
		public AlterForeignDataWrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterForeignDataWrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterForeignDataWrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterForeignDataWrapper(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterForeignDataWrapper(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterForeignDataWrapperContext alterForeignDataWrapper() throws RecognitionException {
		AlterForeignDataWrapperContext _localctx = new AlterForeignDataWrapperContext(_ctx, getState());
		enterRule(_localctx, 1022, RULE_alterForeignDataWrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7713);
			match(ALTER);
			setState(7714);
			match(FOREIGN);
			setState(7715);
			match(DATA);
			setState(7716);
			match(WRAPPER);
			setState(7717);
			colId();
			setState(7718);
			alterForeignDataWrapperClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterForeignDataWrapperClausesContext extends ParserRuleContext {
		public AlterGenericOptionsContext alterGenericOptions() {
			return getRuleContext(AlterGenericOptionsContext.class,0);
		}
		public FdwOptionsContext fdwOptions() {
			return getRuleContext(FdwOptionsContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public AlterForeignDataWrapperClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterForeignDataWrapperClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterForeignDataWrapperClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterForeignDataWrapperClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterForeignDataWrapperClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterForeignDataWrapperClausesContext alterForeignDataWrapperClauses() throws RecognitionException {
		AlterForeignDataWrapperClausesContext _localctx = new AlterForeignDataWrapperClausesContext(_ctx, getState());
		enterRule(_localctx, 1024, RULE_alterForeignDataWrapperClauses);
		int _la;
		try {
			setState(7731);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,701,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7721);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO || _la==HANDLER || _la==VALIDATOR) {
					{
					setState(7720);
					fdwOptions();
					}
				}

				setState(7723);
				alterGenericOptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7724);
				fdwOptions();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7725);
				match(RENAME);
				setState(7726);
				match(TO);
				setState(7727);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7728);
				match(OWNER);
				setState(7729);
				match(TO);
				setState(7730);
				roleSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FdwOptionsContext extends ParserRuleContext {
		public List<FdwOptionContext> fdwOption() {
			return getRuleContexts(FdwOptionContext.class);
		}
		public FdwOptionContext fdwOption(int i) {
			return getRuleContext(FdwOptionContext.class,i);
		}
		public FdwOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fdwOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterFdwOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitFdwOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitFdwOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FdwOptionsContext fdwOptions() throws RecognitionException {
		FdwOptionsContext _localctx = new FdwOptionsContext(_ctx, getState());
		enterRule(_localctx, 1026, RULE_fdwOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7734); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(7733);
				fdwOption();
				}
				}
				setState(7736); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==NO || _la==HANDLER || _la==VALIDATOR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FdwOptionContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(PostgreSQLStatementParser.HANDLER, 0); }
		public HandlerNameContext handlerName() {
			return getRuleContext(HandlerNameContext.class,0);
		}
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode VALIDATOR() { return getToken(PostgreSQLStatementParser.VALIDATOR, 0); }
		public FdwOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fdwOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterFdwOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitFdwOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitFdwOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FdwOptionContext fdwOption() throws RecognitionException {
		FdwOptionContext _localctx = new FdwOptionContext(_ctx, getState());
		enterRule(_localctx, 1028, RULE_fdwOption);
		try {
			setState(7746);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,703,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7738);
				match(HANDLER);
				setState(7739);
				handlerName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7740);
				match(NO);
				setState(7741);
				match(HANDLER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7742);
				match(VALIDATOR);
				setState(7743);
				handlerName();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7744);
				match(NO);
				setState(7745);
				match(VALIDATOR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HandlerNameContext extends ParserRuleContext {
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public HandlerNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterHandlerName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitHandlerName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitHandlerName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerNameContext handlerName() throws RecognitionException {
		HandlerNameContext _localctx = new HandlerNameContext(_ctx, getState());
		enterRule(_localctx, 1030, RULE_handlerName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7748);
			anyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterGroupContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode GROUP() { return getToken(PostgreSQLStatementParser.GROUP, 0); }
		public AlterGroupClausesContext alterGroupClauses() {
			return getRuleContext(AlterGroupClausesContext.class,0);
		}
		public AlterGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterGroupContext alterGroup() throws RecognitionException {
		AlterGroupContext _localctx = new AlterGroupContext(_ctx, getState());
		enterRule(_localctx, 1032, RULE_alterGroup);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7750);
			match(ALTER);
			setState(7751);
			match(GROUP);
			setState(7752);
			alterGroupClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterGroupClausesContext extends ParserRuleContext {
		public List<RoleSpecContext> roleSpec() {
			return getRuleContexts(RoleSpecContext.class);
		}
		public RoleSpecContext roleSpec(int i) {
			return getRuleContext(RoleSpecContext.class,i);
		}
		public TerminalNode USER() { return getToken(PostgreSQLStatementParser.USER, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode ADD() { return getToken(PostgreSQLStatementParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public AlterGroupClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterGroupClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterGroupClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterGroupClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterGroupClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterGroupClausesContext alterGroupClauses() throws RecognitionException {
		AlterGroupClausesContext _localctx = new AlterGroupClausesContext(_ctx, getState());
		enterRule(_localctx, 1034, RULE_alterGroupClauses);
		int _la;
		try {
			setState(7764);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,704,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7754);
				roleSpec();
				setState(7755);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7756);
				match(USER);
				setState(7757);
				roleList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7759);
				roleSpec();
				setState(7760);
				match(RENAME);
				setState(7761);
				match(TO);
				setState(7762);
				roleSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterLanguageContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLStatementParser.LANGUAGE, 0); }
		public List<ColIdContext> colId() {
			return getRuleContexts(ColIdContext.class);
		}
		public ColIdContext colId(int i) {
			return getRuleContext(ColIdContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public TerminalNode PROCEDURAL() { return getToken(PostgreSQLStatementParser.PROCEDURAL, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLStatementParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLStatementParser.SESSION_USER, 0); }
		public AlterLanguageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLanguage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterLanguage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterLanguage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterLanguage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterLanguageContext alterLanguage() throws RecognitionException {
		AlterLanguageContext _localctx = new AlterLanguageContext(_ctx, getState());
		enterRule(_localctx, 1036, RULE_alterLanguage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7766);
			match(ALTER);
			setState(7768);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROCEDURAL) {
				{
				setState(7767);
				match(PROCEDURAL);
				}
			}

			setState(7770);
			match(LANGUAGE);
			setState(7771);
			colId();
			setState(7782);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				{
				setState(7772);
				match(RENAME);
				setState(7773);
				match(TO);
				setState(7774);
				colId();
				}
				break;
			case OWNER:
				{
				setState(7775);
				match(OWNER);
				setState(7776);
				match(TO);
				setState(7780);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UNICODE_ESCAPE:
				case ADMIN:
				case ESCAPE:
				case EXCLUDE:
				case MOD:
				case PARTITION:
				case UNKNOWN:
				case ALWAYS:
				case CASCADE:
				case GENERATED:
				case ISOLATION:
				case LEVEL:
				case NO:
				case OPTION:
				case PRIVILEGES:
				case READ:
				case ROLE:
				case ROWS:
				case START:
				case TRANSACTION:
				case ACTION:
				case CACHE:
				case CHARACTERISTICS:
				case CLUSTER:
				case COMMENTS:
				case CONSTRAINTS:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DEFAULTS:
				case DEFERRED:
				case DEPENDS:
				case DOMAIN:
				case EXCLUDING:
				case EXECUTE:
				case EXTENDED:
				case EXTENSION:
				case EXTERNAL:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case GLOBAL:
				case IDENTITY:
				case IMMEDIATE:
				case INCLUDING:
				case INCREMENT:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INCLUDE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LOGGED:
				case MAIN:
				case MATCH:
				case MAXVALUE:
				case MINVALUE:
				case NOTHING:
				case NULLS:
				case OBJECT:
				case OIDS:
				case OVER:
				case OWNED:
				case OWNER:
				case PARTIAL:
				case PLAIN:
				case PRECEDING:
				case RANGE:
				case RENAME:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case ROUTINE:
				case RULE:
				case SECURITY:
				case SEQUENCE:
				case SESSION:
				case SHOW:
				case SIMPLE:
				case STATISTICS:
				case STORAGE:
				case TABLESPACE:
				case TEMP:
				case TEMPORARY:
				case UNBOUNDED:
				case UNLOGGED:
				case VALID:
				case VALIDATE:
				case WITHIN:
				case WITHOUT:
				case ZONE:
				case OF:
				case UESCAPE:
				case GROUPS:
				case RECURSIVE:
				case BYTEA:
				case ENUM:
				case POINT:
				case LSEG:
				case BOX:
				case PATH:
				case POLYGON:
				case CIRCLE:
				case XML:
				case JSON:
				case ORDINALITY:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case REF:
				case PASSING:
				case VERSION:
				case YES:
				case STANDALONE:
				case MATERIALIZED:
				case OPERATOR:
				case SHARE:
				case ROLLUP:
				case DOCUMENT:
				case NORMALIZED:
				case NOWAIT:
				case LOCKED:
				case COLUMNS:
				case CONTENT:
				case STRIP:
				case WHITESPACE:
				case CONFLICT:
				case OVERRIDING:
				case SYSTEM:
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case ASSERTION:
				case ASSIGNMENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CALLED:
				case CATALOG:
				case CHAIN:
				case CHECKPOINT:
				case CLASS:
				case CONFIGURATION:
				case COMMENT:
				case DETACH:
				case DICTIONARY:
				case EXPRESSION:
				case INSENSITIVE:
				case DISCARD:
				case OFF:
				case INSTEAD:
				case EXPLAIN:
				case INPUT:
				case INLINE:
				case PARALLEL:
				case LEAKPROOF:
				case COMMITTED:
				case ENCODING:
				case IMPLICIT:
				case DELIMITER:
				case CURSOR:
				case EACH:
				case EVENT:
				case DEALLOCATE:
				case CONNECTION:
				case DECLARE:
				case FAMILY:
				case FORWARD:
				case EXCLUSIVE:
				case FUNCTIONS:
				case LOCATION:
				case LABEL:
				case DELIMITERS:
				case HANDLER:
				case HEADER:
				case IMMUTABLE:
				case GRANTED:
				case HOLD:
				case MAPPING:
				case OLD:
				case METHOD:
				case LOAD:
				case LISTEN:
				case MODE:
				case MOVE:
				case PROCEDURAL:
				case PARSER:
				case PROCEDURES:
				case ENCRYPTED:
				case PUBLICATION:
				case PROGRAM:
				case REFERENCING:
				case PLANS:
				case REINDEX:
				case PRIOR:
				case PASSWORD:
				case RELATIVE:
				case QUOTE:
				case ROUTINES:
				case REPLACE:
				case SNAPSHOT:
				case REFRESH:
				case PREPARE:
				case OPTIONS:
				case IMPORT:
				case INVOKER:
				case NEW:
				case PREPARED:
				case SCROLL:
				case SEQUENCES:
				case SYSID:
				case REASSIGN:
				case SERVER:
				case SUBSCRIPTION:
				case SEARCH:
				case SCHEMAS:
				case RECHECK:
				case POLICY:
				case NOTIFY:
				case LOCK:
				case RELEASE:
				case SERIALIZABLE:
				case RETURNS:
				case STATEMENT:
				case STDIN:
				case STDOUT:
				case TABLES:
				case SUPPORT:
				case STABLE:
				case TEMPLATE:
				case UNENCRYPTED:
				case VIEWS:
				case UNCOMMITTED:
				case TRANSFORM:
				case UNLISTEN:
				case TRUSTED:
				case VALIDATOR:
				case UNTIL:
				case VACUUM:
				case VOLATILE:
				case STORED:
				case WRITE:
				case STRICT:
				case TYPES:
				case WRAPPER:
				case WORK:
				case PARAM:
				case INSERT:
				case UPDATE:
				case DELETE:
				case ALTER:
				case DROP:
				case TRUNCATE:
				case SCHEMA:
				case REVOKE:
				case ADD:
				case SET:
				case TABLE:
				case INDEX:
				case CONSTRAINT:
				case KEY:
				case FUNCTION:
				case TRIGGER:
				case PROCEDURE:
				case VIEW:
				case IF:
				case BY:
				case BEGIN:
				case COMMIT:
				case ROLLBACK:
				case SAVEPOINT:
				case DOUBLE:
				case INTERVAL:
				case TIME:
				case TIMESTAMP:
				case YEAR:
				case QUARTER:
				case MONTH:
				case WEEK:
				case DAY:
				case HOUR:
				case MINUTE:
				case SECOND:
				case CURRENT:
				case ENABLE:
				case DISABLE:
				case CALL:
				case PRESERVE:
				case DEFINER:
				case SQL:
				case CASCADED:
				case LOCAL:
				case CLOSE:
				case NEXT:
				case NAME:
				case COLLATION:
				case NAMES:
				case TYPE:
				case TEXT:
				case REPEATABLE:
				case VARYING:
				case NATIONAL:
				case VALUE:
				case TIES:
				case CUBE:
				case SETS:
				case OTHERS:
				case AT:
				case IDENTIFIER_:
					{
					setState(7777);
					ignoredIdentifier();
					}
					break;
				case CURRENT_USER:
					{
					setState(7778);
					match(CURRENT_USER);
					}
					break;
				case SESSION_USER:
					{
					setState(7779);
					match(SESSION_USER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterLargeObjectContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode LARGE() { return getToken(PostgreSQLStatementParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(PostgreSQLStatementParser.OBJECT, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLStatementParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLStatementParser.SESSION_USER, 0); }
		public AlterLargeObjectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLargeObject; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterLargeObject(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterLargeObject(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterLargeObject(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterLargeObjectContext alterLargeObject() throws RecognitionException {
		AlterLargeObjectContext _localctx = new AlterLargeObjectContext(_ctx, getState());
		enterRule(_localctx, 1038, RULE_alterLargeObject);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7784);
			match(ALTER);
			setState(7785);
			match(LARGE);
			setState(7786);
			match(OBJECT);
			setState(7787);
			numericOnly();
			setState(7788);
			match(OWNER);
			setState(7789);
			match(TO);
			setState(7793);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNICODE_ESCAPE:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case XML:
			case JSON:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case PARAM:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case NATIONAL:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case IDENTIFIER_:
				{
				setState(7790);
				ignoredIdentifier();
				}
				break;
			case CURRENT_USER:
				{
				setState(7791);
				match(CURRENT_USER);
				}
				break;
			case SESSION_USER:
				{
				setState(7792);
				match(SESSION_USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterMaterializedViewContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLStatementParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLStatementParser.VIEW, 0); }
		public AlterMaterializedViewClausesContext alterMaterializedViewClauses() {
			return getRuleContext(AlterMaterializedViewClausesContext.class,0);
		}
		public AlterMaterializedViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterMaterializedView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterMaterializedView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterMaterializedView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterMaterializedView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterMaterializedViewContext alterMaterializedView() throws RecognitionException {
		AlterMaterializedViewContext _localctx = new AlterMaterializedViewContext(_ctx, getState());
		enterRule(_localctx, 1040, RULE_alterMaterializedView);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7795);
			match(ALTER);
			setState(7796);
			match(MATERIALIZED);
			setState(7797);
			match(VIEW);
			setState(7798);
			alterMaterializedViewClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterMaterializedViewClausesContext extends ParserRuleContext {
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public AlterTableCmdsContext alterTableCmds() {
			return getRuleContext(AlterTableCmdsContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode DEPENDS() { return getToken(PostgreSQLStatementParser.DEPENDS, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLStatementParser.EXTENSION, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode COLUMN() { return getToken(PostgreSQLStatementParser.COLUMN, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TerminalNode IN() { return getToken(PostgreSQLStatementParser.IN, 0); }
		public List<TerminalNode> TABLESPACE() { return getTokens(PostgreSQLStatementParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(PostgreSQLStatementParser.TABLESPACE, i);
		}
		public TerminalNode OWNED() { return getToken(PostgreSQLStatementParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode NOWAIT() { return getToken(PostgreSQLStatementParser.NOWAIT, 0); }
		public AlterMaterializedViewClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterMaterializedViewClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterMaterializedViewClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterMaterializedViewClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterMaterializedViewClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterMaterializedViewClausesContext alterMaterializedViewClauses() throws RecognitionException {
		AlterMaterializedViewClausesContext _localctx = new AlterMaterializedViewClausesContext(_ctx, getState());
		enterRule(_localctx, 1042, RULE_alterMaterializedViewClauses);
		int _la;
		try {
			setState(7854);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,715,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7801);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,709,_ctx) ) {
				case 1:
					{
					setState(7800);
					ifExists();
					}
					break;
				}
				setState(7803);
				qualifiedName();
				setState(7804);
				alterTableCmds();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7806);
				qualifiedName();
				setState(7807);
				match(DEPENDS);
				setState(7808);
				match(ON);
				setState(7809);
				match(EXTENSION);
				setState(7810);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7813);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,710,_ctx) ) {
				case 1:
					{
					setState(7812);
					ifExists();
					}
					break;
				}
				setState(7815);
				qualifiedName();
				setState(7816);
				match(RENAME);
				setState(7818);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(7817);
					match(COLUMN);
					}
				}

				setState(7820);
				columnName();
				setState(7821);
				match(TO);
				setState(7822);
				columnName();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7825);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,712,_ctx) ) {
				case 1:
					{
					setState(7824);
					ifExists();
					}
					break;
				}
				setState(7827);
				qualifiedName();
				setState(7828);
				match(RENAME);
				setState(7829);
				match(TO);
				setState(7830);
				qualifiedName();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7833);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,713,_ctx) ) {
				case 1:
					{
					setState(7832);
					ifExists();
					}
					break;
				}
				setState(7835);
				qualifiedName();
				setState(7836);
				match(SET);
				setState(7837);
				match(SCHEMA);
				setState(7838);
				schemaName();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7840);
				match(ALL);
				setState(7841);
				match(IN);
				setState(7842);
				match(TABLESPACE);
				setState(7843);
				name();
				{
				setState(7844);
				match(OWNED);
				setState(7845);
				match(BY);
				setState(7846);
				roleList();
				}
				setState(7848);
				match(SET);
				setState(7849);
				match(TABLESPACE);
				setState(7850);
				name();
				setState(7852);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOWAIT) {
					{
					setState(7851);
					match(NOWAIT);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExecuteStmtContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(PostgreSQLStatementParser.EXECUTE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ExecuteParamClauseContext executeParamClause() {
			return getRuleContext(ExecuteParamClauseContext.class,0);
		}
		public ExecuteStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterExecuteStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitExecuteStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitExecuteStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteStmtContext executeStmt() throws RecognitionException {
		ExecuteStmtContext _localctx = new ExecuteStmtContext(_ctx, getState());
		enterRule(_localctx, 1044, RULE_executeStmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7856);
			match(EXECUTE);
			setState(7857);
			name();
			setState(7859);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(7858);
				executeParamClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateMaterializedViewContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLStatementParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLStatementParser.VIEW, 0); }
		public CreateMvTargetContext createMvTarget() {
			return getRuleContext(CreateMvTargetContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLStatementParser.UNLOGGED, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode DATA() { return getToken(PostgreSQLStatementParser.DATA, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public CreateMaterializedViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createMaterializedView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateMaterializedView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateMaterializedView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateMaterializedView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateMaterializedViewContext createMaterializedView() throws RecognitionException {
		CreateMaterializedViewContext _localctx = new CreateMaterializedViewContext(_ctx, getState());
		enterRule(_localctx, 1046, RULE_createMaterializedView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7861);
			match(CREATE);
			setState(7863);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNLOGGED) {
				{
				setState(7862);
				match(UNLOGGED);
				}
			}

			setState(7865);
			match(MATERIALIZED);
			setState(7866);
			match(VIEW);
			setState(7868);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,718,_ctx) ) {
			case 1:
				{
				setState(7867);
				ifNotExists();
				}
				break;
			}
			setState(7870);
			createMvTarget();
			setState(7871);
			match(AS);
			setState(7872);
			select();
			setState(7878);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,719,_ctx) ) {
			case 1:
				{
				setState(7873);
				match(WITH);
				setState(7874);
				match(DATA);
				}
				break;
			case 2:
				{
				setState(7875);
				match(WITH);
				setState(7876);
				match(NO);
				setState(7877);
				match(DATA);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateMvTargetContext extends ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public OptColumnListContext optColumnList() {
			return getRuleContext(OptColumnListContext.class,0);
		}
		public TableAccessMethodClauseContext tableAccessMethodClause() {
			return getRuleContext(TableAccessMethodClauseContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLStatementParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CreateMvTargetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createMvTarget; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateMvTarget(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateMvTarget(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateMvTarget(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateMvTargetContext createMvTarget() throws RecognitionException {
		CreateMvTargetContext _localctx = new CreateMvTargetContext(_ctx, getState());
		enterRule(_localctx, 1048, RULE_createMvTarget);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7880);
			qualifiedName();
			setState(7882);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(7881);
				optColumnList();
				}
			}

			setState(7885);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(7884);
				tableAccessMethodClause();
				}
			}

			setState(7889);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(7887);
				match(WITH);
				setState(7888);
				reloptions();
				}
			}

			setState(7893);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(7891);
				match(TABLESPACE);
				setState(7892);
				name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterPolicyContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSQLStatementParser.POLICY, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public AlterPolicyClausesContext alterPolicyClauses() {
			return getRuleContext(AlterPolicyClausesContext.class,0);
		}
		public AlterPolicyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterPolicy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterPolicy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterPolicy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterPolicy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterPolicyContext alterPolicy() throws RecognitionException {
		AlterPolicyContext _localctx = new AlterPolicyContext(_ctx, getState());
		enterRule(_localctx, 1050, RULE_alterPolicy);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7895);
			match(ALTER);
			setState(7896);
			match(POLICY);
			setState(7897);
			name();
			setState(7898);
			match(ON);
			setState(7899);
			tableName();
			setState(7900);
			alterPolicyClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterPolicyClausesContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public List<TerminalNode> LP_() { return getTokens(PostgreSQLStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(PostgreSQLStatementParser.LP_, i);
		}
		public List<AExprContext> aExpr() {
			return getRuleContexts(AExprContext.class);
		}
		public AExprContext aExpr(int i) {
			return getRuleContext(AExprContext.class,i);
		}
		public List<TerminalNode> RP_() { return getTokens(PostgreSQLStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(PostgreSQLStatementParser.RP_, i);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSQLStatementParser.CHECK, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AlterPolicyClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterPolicyClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterPolicyClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterPolicyClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterPolicyClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterPolicyClausesContext alterPolicyClauses() throws RecognitionException {
		AlterPolicyClausesContext _localctx = new AlterPolicyClausesContext(_ctx, getState());
		enterRule(_localctx, 1052, RULE_alterPolicyClauses);
		int _la;
		try {
			setState(7924);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case SEMI_:
			case WITH:
			case USING:
			case TO:
				enterOuterAlt(_localctx, 1);
				{
				setState(7904);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(7902);
					match(TO);
					setState(7903);
					roleList();
					}
				}

				setState(7911);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(7906);
					match(USING);
					setState(7907);
					match(LP_);
					setState(7908);
					aExpr(0);
					setState(7909);
					match(RP_);
					}
				}

				setState(7919);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(7913);
					match(WITH);
					setState(7914);
					match(CHECK);
					setState(7915);
					match(LP_);
					setState(7916);
					aExpr(0);
					setState(7917);
					match(RP_);
					}
				}

				}
				break;
			case RENAME:
				enterOuterAlt(_localctx, 2);
				{
				setState(7921);
				match(RENAME);
				setState(7922);
				match(TO);
				setState(7923);
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RefreshMatViewStmtContext extends ParserRuleContext {
		public TerminalNode REFRESH() { return getToken(PostgreSQLStatementParser.REFRESH, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLStatementParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLStatementParser.VIEW, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode CONCURRENTLY() { return getToken(PostgreSQLStatementParser.CONCURRENTLY, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode DATA() { return getToken(PostgreSQLStatementParser.DATA, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public RefreshMatViewStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_refreshMatViewStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterRefreshMatViewStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitRefreshMatViewStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitRefreshMatViewStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RefreshMatViewStmtContext refreshMatViewStmt() throws RecognitionException {
		RefreshMatViewStmtContext _localctx = new RefreshMatViewStmtContext(_ctx, getState());
		enterRule(_localctx, 1054, RULE_refreshMatViewStmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7926);
			match(REFRESH);
			setState(7927);
			match(MATERIALIZED);
			setState(7928);
			match(VIEW);
			setState(7930);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONCURRENTLY) {
				{
				setState(7929);
				match(CONCURRENTLY);
				}
			}

			setState(7932);
			qualifiedName();
			setState(7938);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,729,_ctx) ) {
			case 1:
				{
				setState(7933);
				match(WITH);
				setState(7934);
				match(DATA);
				}
				break;
			case 2:
				{
				setState(7935);
				match(WITH);
				setState(7936);
				match(NO);
				setState(7937);
				match(DATA);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterProcedureContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLStatementParser.PROCEDURE, 0); }
		public FunctionWithArgtypesContext functionWithArgtypes() {
			return getRuleContext(FunctionWithArgtypesContext.class,0);
		}
		public AlterProcedureClausesContext alterProcedureClauses() {
			return getRuleContext(AlterProcedureClausesContext.class,0);
		}
		public AlterProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterProcedureContext alterProcedure() throws RecognitionException {
		AlterProcedureContext _localctx = new AlterProcedureContext(_ctx, getState());
		enterRule(_localctx, 1056, RULE_alterProcedure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7940);
			match(ALTER);
			setState(7941);
			match(PROCEDURE);
			setState(7942);
			functionWithArgtypes();
			setState(7943);
			alterProcedureClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterProcedureClausesContext extends ParserRuleContext {
		public AlterfuncOptListContext alterfuncOptList() {
			return getRuleContext(AlterfuncOptListContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(PostgreSQLStatementParser.RESTRICT, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode DEPENDS() { return getToken(PostgreSQLStatementParser.DEPENDS, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLStatementParser.EXTENSION, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public AlterProcedureClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterProcedureClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterProcedureClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterProcedureClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterProcedureClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterProcedureClausesContext alterProcedureClauses() throws RecognitionException {
		AlterProcedureClausesContext _localctx = new AlterProcedureClausesContext(_ctx, getState());
		enterRule(_localctx, 1058, RULE_alterProcedureClauses);
		int _la;
		try {
			setState(7965);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,732,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7945);
				alterfuncOptList();
				setState(7947);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RESTRICT) {
					{
					setState(7946);
					match(RESTRICT);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7949);
				match(RENAME);
				setState(7950);
				match(TO);
				setState(7951);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7953);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(7952);
					match(NO);
					}
				}

				setState(7955);
				match(DEPENDS);
				setState(7956);
				match(ON);
				setState(7957);
				match(EXTENSION);
				setState(7958);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7959);
				match(SET);
				setState(7960);
				match(SCHEMA);
				setState(7961);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7962);
				match(OWNER);
				setState(7963);
				match(TO);
				setState(7964);
				roleSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterfuncOptListContext extends ParserRuleContext {
		public List<CommonFuncOptItemContext> commonFuncOptItem() {
			return getRuleContexts(CommonFuncOptItemContext.class);
		}
		public CommonFuncOptItemContext commonFuncOptItem(int i) {
			return getRuleContext(CommonFuncOptItemContext.class,i);
		}
		public AlterfuncOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterfuncOptList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterfuncOptList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterfuncOptList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterfuncOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterfuncOptListContext alterfuncOptList() throws RecognitionException {
		AlterfuncOptListContext _localctx = new AlterfuncOptListContext(_ctx, getState());
		enterRule(_localctx, 1060, RULE_alterfuncOptList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7968); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(7967);
				commonFuncOptItem();
				}
				}
				setState(7970); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==ROWS || _la==EXTERNAL || _la==RESET || _la==SECURITY || ((((_la - 298)) & ~0x3f) == 0 && ((1L << (_la - 298)) & 1099513200645L) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & -9223372036853596063L) != 0) || _la==NOT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterFunctionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLStatementParser.FUNCTION, 0); }
		public FunctionWithArgtypesContext functionWithArgtypes() {
			return getRuleContext(FunctionWithArgtypesContext.class,0);
		}
		public AlterFunctionClausesContext alterFunctionClauses() {
			return getRuleContext(AlterFunctionClausesContext.class,0);
		}
		public AlterFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterFunctionContext alterFunction() throws RecognitionException {
		AlterFunctionContext _localctx = new AlterFunctionContext(_ctx, getState());
		enterRule(_localctx, 1062, RULE_alterFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7972);
			match(ALTER);
			setState(7973);
			match(FUNCTION);
			setState(7974);
			functionWithArgtypes();
			setState(7975);
			alterFunctionClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterFunctionClausesContext extends ParserRuleContext {
		public AlterfuncOptListContext alterfuncOptList() {
			return getRuleContext(AlterfuncOptListContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(PostgreSQLStatementParser.RESTRICT, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode DEPENDS() { return getToken(PostgreSQLStatementParser.DEPENDS, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLStatementParser.EXTENSION, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public AlterFunctionClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFunctionClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterFunctionClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterFunctionClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterFunctionClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterFunctionClausesContext alterFunctionClauses() throws RecognitionException {
		AlterFunctionClausesContext _localctx = new AlterFunctionClausesContext(_ctx, getState());
		enterRule(_localctx, 1064, RULE_alterFunctionClauses);
		int _la;
		try {
			setState(7997);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,736,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7977);
				alterfuncOptList();
				setState(7979);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RESTRICT) {
					{
					setState(7978);
					match(RESTRICT);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7981);
				match(RENAME);
				setState(7982);
				match(TO);
				setState(7983);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7985);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(7984);
					match(NO);
					}
				}

				setState(7987);
				match(DEPENDS);
				setState(7988);
				match(ON);
				setState(7989);
				match(EXTENSION);
				setState(7990);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7991);
				match(SET);
				setState(7992);
				match(SCHEMA);
				setState(7993);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7994);
				match(OWNER);
				setState(7995);
				match(TO);
				setState(7996);
				roleSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterPublicationContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLStatementParser.PUBLICATION, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public RelationExprListContext relationExprList() {
			return getRuleContext(RelationExprListContext.class,0);
		}
		public TerminalNode ADD() { return getToken(PostgreSQLStatementParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public AlterPublicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterPublication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterPublication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterPublication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterPublication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterPublicationContext alterPublication() throws RecognitionException {
		AlterPublicationContext _localctx = new AlterPublicationContext(_ctx, getState());
		enterRule(_localctx, 1066, RULE_alterPublication);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7999);
			match(ALTER);
			setState(8000);
			match(PUBLICATION);
			setState(8001);
			name();
			setState(8013);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,737,_ctx) ) {
			case 1:
				{
				setState(8002);
				match(RENAME);
				setState(8003);
				match(TO);
				setState(8004);
				name();
				}
				break;
			case 2:
				{
				setState(8005);
				match(OWNER);
				setState(8006);
				match(TO);
				setState(8007);
				roleSpec();
				}
				break;
			case 3:
				{
				setState(8008);
				match(SET);
				setState(8009);
				definition();
				}
				break;
			case 4:
				{
				setState(8010);
				_la = _input.LA(1);
				if ( !(((((_la - 442)) & ~0x3f) == 0 && ((1L << (_la - 442)) & 97L) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8011);
				match(TABLE);
				setState(8012);
				relationExprList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterRoutineContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLStatementParser.ROUTINE, 0); }
		public FunctionWithArgtypesContext functionWithArgtypes() {
			return getRuleContext(FunctionWithArgtypesContext.class,0);
		}
		public AlterProcedureClausesContext alterProcedureClauses() {
			return getRuleContext(AlterProcedureClausesContext.class,0);
		}
		public AlterRoutineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterRoutine; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterRoutine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterRoutine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterRoutine(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterRoutineContext alterRoutine() throws RecognitionException {
		AlterRoutineContext _localctx = new AlterRoutineContext(_ctx, getState());
		enterRule(_localctx, 1068, RULE_alterRoutine);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8015);
			match(ALTER);
			setState(8016);
			match(ROUTINE);
			setState(8017);
			functionWithArgtypes();
			setState(8018);
			alterProcedureClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterRuleContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLStatementParser.RULE, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public AlterRuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterRule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterRule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterRule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterRule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterRuleContext alterRule() throws RecognitionException {
		AlterRuleContext _localctx = new AlterRuleContext(_ctx, getState());
		enterRule(_localctx, 1070, RULE_alterRule);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8020);
			match(ALTER);
			setState(8021);
			match(RULE);
			setState(8022);
			name();
			setState(8023);
			match(ON);
			setState(8024);
			qualifiedName();
			setState(8025);
			match(RENAME);
			setState(8026);
			match(TO);
			setState(8027);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterSequenceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLStatementParser.SEQUENCE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public AlterSequenceClausesContext alterSequenceClauses() {
			return getRuleContext(AlterSequenceClausesContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public AlterSequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterSequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterSequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterSequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSequenceContext alterSequence() throws RecognitionException {
		AlterSequenceContext _localctx = new AlterSequenceContext(_ctx, getState());
		enterRule(_localctx, 1072, RULE_alterSequence);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8029);
			match(ALTER);
			setState(8030);
			match(SEQUENCE);
			setState(8032);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,738,_ctx) ) {
			case 1:
				{
				setState(8031);
				ifExists();
				}
				break;
			}
			setState(8034);
			qualifiedName();
			setState(8035);
			alterSequenceClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterSequenceClausesContext extends ParserRuleContext {
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public SeqOptListContext seqOptList() {
			return getRuleContext(SeqOptListContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public AlterSequenceClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSequenceClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterSequenceClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterSequenceClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterSequenceClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSequenceClausesContext alterSequenceClauses() throws RecognitionException {
		AlterSequenceClausesContext _localctx = new AlterSequenceClausesContext(_ctx, getState());
		enterRule(_localctx, 1074, RULE_alterSequenceClauses);
		try {
			setState(8047);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OWNER:
				enterOuterAlt(_localctx, 1);
				{
				setState(8037);
				match(OWNER);
				setState(8038);
				match(TO);
				setState(8039);
				roleSpec();
				}
				break;
			case NO:
			case START:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case MAXVALUE:
			case MINVALUE:
			case OWNED:
			case RESTART:
			case SEQUENCE:
			case AS:
				enterOuterAlt(_localctx, 2);
				{
				setState(8040);
				seqOptList();
				}
				break;
			case RENAME:
				enterOuterAlt(_localctx, 3);
				{
				setState(8041);
				match(RENAME);
				setState(8042);
				match(TO);
				setState(8043);
				name();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 4);
				{
				setState(8044);
				match(SET);
				setState(8045);
				match(SCHEMA);
				setState(8046);
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterServerContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLStatementParser.SERVER, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public ForeignServerVersionContext foreignServerVersion() {
			return getRuleContext(ForeignServerVersionContext.class,0);
		}
		public AlterGenericOptionsContext alterGenericOptions() {
			return getRuleContext(AlterGenericOptionsContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public AlterServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterServerContext alterServer() throws RecognitionException {
		AlterServerContext _localctx = new AlterServerContext(_ctx, getState());
		enterRule(_localctx, 1076, RULE_alterServer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8049);
			match(ALTER);
			setState(8050);
			match(SERVER);
			setState(8051);
			name();
			setState(8063);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,740,_ctx) ) {
			case 1:
				{
				setState(8052);
				foreignServerVersion();
				setState(8053);
				alterGenericOptions();
				}
				break;
			case 2:
				{
				setState(8055);
				foreignServerVersion();
				}
				break;
			case 3:
				{
				setState(8056);
				alterGenericOptions();
				}
				break;
			case 4:
				{
				setState(8057);
				match(RENAME);
				setState(8058);
				match(TO);
				setState(8059);
				name();
				}
				break;
			case 5:
				{
				setState(8060);
				match(OWNER);
				setState(8061);
				match(TO);
				setState(8062);
				roleSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ForeignServerVersionContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(PostgreSQLStatementParser.VERSION, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public TerminalNode NULL() { return getToken(PostgreSQLStatementParser.NULL, 0); }
		public ForeignServerVersionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreignServerVersion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterForeignServerVersion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitForeignServerVersion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitForeignServerVersion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForeignServerVersionContext foreignServerVersion() throws RecognitionException {
		ForeignServerVersionContext _localctx = new ForeignServerVersionContext(_ctx, getState());
		enterRule(_localctx, 1078, RULE_foreignServerVersion);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8065);
			match(VERSION);
			setState(8066);
			_la = _input.LA(1);
			if ( !(_la==NULL || _la==STRING_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterStatisticsContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public List<TerminalNode> STATISTICS() { return getTokens(PostgreSQLStatementParser.STATISTICS); }
		public TerminalNode STATISTICS(int i) {
			return getToken(PostgreSQLStatementParser.STATISTICS, i);
		}
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public AlterStatisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatistics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterStatistics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterStatistics(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterStatistics(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatisticsContext alterStatistics() throws RecognitionException {
		AlterStatisticsContext _localctx = new AlterStatisticsContext(_ctx, getState());
		enterRule(_localctx, 1080, RULE_alterStatistics);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8068);
			match(ALTER);
			setState(8069);
			match(STATISTICS);
			setState(8093);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,742,_ctx) ) {
			case 1:
				{
				setState(8071);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,741,_ctx) ) {
				case 1:
					{
					setState(8070);
					ifExists();
					}
					break;
				}
				setState(8073);
				anyName();
				setState(8074);
				match(SET);
				setState(8075);
				match(STATISTICS);
				setState(8076);
				signedIconst();
				}
				break;
			case 2:
				{
				setState(8078);
				anyName();
				setState(8079);
				match(RENAME);
				setState(8080);
				match(TO);
				setState(8081);
				name();
				}
				break;
			case 3:
				{
				setState(8083);
				anyName();
				setState(8084);
				match(SET);
				setState(8085);
				match(SCHEMA);
				setState(8086);
				name();
				}
				break;
			case 4:
				{
				setState(8088);
				anyName();
				setState(8089);
				match(OWNER);
				setState(8090);
				match(TO);
				setState(8091);
				roleSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterSubscriptionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLStatementParser.SUBSCRIPTION, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(PostgreSQLStatementParser.CONNECTION, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public TerminalNode REFRESH() { return getToken(PostgreSQLStatementParser.REFRESH, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLStatementParser.PUBLICATION, 0); }
		public PublicationNameListContext publicationNameList() {
			return getRuleContext(PublicationNameListContext.class,0);
		}
		public TerminalNode ADD() { return getToken(PostgreSQLStatementParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode ENABLE() { return getToken(PostgreSQLStatementParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(PostgreSQLStatementParser.DISABLE, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public AlterSubscriptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSubscription; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterSubscription(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterSubscription(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterSubscription(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSubscriptionContext alterSubscription() throws RecognitionException {
		AlterSubscriptionContext _localctx = new AlterSubscriptionContext(_ctx, getState());
		enterRule(_localctx, 1082, RULE_alterSubscription);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8095);
			match(ALTER);
			setState(8096);
			match(SUBSCRIPTION);
			setState(8097);
			name();
			setState(8136);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,747,_ctx) ) {
			case 1:
				{
				setState(8098);
				match(RENAME);
				setState(8099);
				match(TO);
				setState(8100);
				name();
				}
				break;
			case 2:
				{
				setState(8101);
				match(OWNER);
				setState(8102);
				match(TO);
				setState(8103);
				roleSpec();
				}
				break;
			case 3:
				{
				setState(8104);
				match(SET);
				setState(8105);
				definition();
				}
				break;
			case 4:
				{
				setState(8106);
				match(CONNECTION);
				setState(8107);
				match(STRING_);
				}
				break;
			case 5:
				{
				setState(8108);
				match(REFRESH);
				setState(8109);
				match(PUBLICATION);
				setState(8112);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(8110);
					match(WITH);
					setState(8111);
					definition();
					}
				}

				}
				break;
			case 6:
				{
				setState(8114);
				match(SET);
				setState(8115);
				match(PUBLICATION);
				setState(8116);
				publicationNameList();
				setState(8119);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(8117);
					match(WITH);
					setState(8118);
					definition();
					}
				}

				}
				break;
			case 7:
				{
				setState(8121);
				match(ADD);
				setState(8122);
				match(PUBLICATION);
				setState(8123);
				publicationNameList();
				setState(8126);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(8124);
					match(WITH);
					setState(8125);
					definition();
					}
				}

				}
				break;
			case 8:
				{
				setState(8128);
				match(DROP);
				setState(8129);
				match(PUBLICATION);
				setState(8130);
				publicationNameList();
				setState(8133);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(8131);
					match(WITH);
					setState(8132);
					definition();
					}
				}

				}
				break;
			case 9:
				{
				setState(8135);
				_la = _input.LA(1);
				if ( !(_la==ENABLE || _la==DISABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PublicationNameListContext extends ParserRuleContext {
		public List<PublicationNameItemContext> publicationNameItem() {
			return getRuleContexts(PublicationNameItemContext.class);
		}
		public PublicationNameItemContext publicationNameItem(int i) {
			return getRuleContext(PublicationNameItemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public PublicationNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_publicationNameList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterPublicationNameList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitPublicationNameList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitPublicationNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PublicationNameListContext publicationNameList() throws RecognitionException {
		PublicationNameListContext _localctx = new PublicationNameListContext(_ctx, getState());
		enterRule(_localctx, 1084, RULE_publicationNameList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8138);
			publicationNameItem();
			setState(8143);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(8139);
				match(COMMA_);
				setState(8140);
				publicationNameItem();
				}
				}
				setState(8145);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PublicationNameItemContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public PublicationNameItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_publicationNameItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterPublicationNameItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitPublicationNameItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitPublicationNameItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PublicationNameItemContext publicationNameItem() throws RecognitionException {
		PublicationNameItemContext _localctx = new PublicationNameItemContext(_ctx, getState());
		enterRule(_localctx, 1086, RULE_publicationNameItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8146);
			colLabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterSystemContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode SYSTEM() { return getToken(PostgreSQLStatementParser.SYSTEM, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public GenericSetContext genericSet() {
			return getRuleContext(GenericSetContext.class,0);
		}
		public TerminalNode RESET() { return getToken(PostgreSQLStatementParser.RESET, 0); }
		public GenericResetContext genericReset() {
			return getRuleContext(GenericResetContext.class,0);
		}
		public AlterSystemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSystem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterSystem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterSystem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterSystem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSystemContext alterSystem() throws RecognitionException {
		AlterSystemContext _localctx = new AlterSystemContext(_ctx, getState());
		enterRule(_localctx, 1088, RULE_alterSystem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8148);
			match(ALTER);
			setState(8149);
			match(SYSTEM);
			setState(8154);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				{
				setState(8150);
				match(SET);
				setState(8151);
				genericSet();
				}
				break;
			case RESET:
				{
				setState(8152);
				match(RESET);
				setState(8153);
				genericReset();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterTablespaceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLStatementParser.TABLESPACE, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode RESET() { return getToken(PostgreSQLStatementParser.RESET, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public AlterTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTablespaceContext alterTablespace() throws RecognitionException {
		AlterTablespaceContext _localctx = new AlterTablespaceContext(_ctx, getState());
		enterRule(_localctx, 1090, RULE_alterTablespace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8156);
			match(ALTER);
			setState(8157);
			match(TABLESPACE);
			setState(8158);
			name();
			setState(8168);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				{
				setState(8159);
				match(SET);
				}
				break;
			case RESET:
				{
				setState(8160);
				match(RESET);
				setState(8161);
				reloptions();
				}
				break;
			case RENAME:
				{
				setState(8162);
				match(RENAME);
				setState(8163);
				match(TO);
				setState(8164);
				name();
				}
				break;
			case OWNER:
				{
				setState(8165);
				match(OWNER);
				setState(8166);
				match(TO);
				setState(8167);
				roleSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterTextSearchConfigurationContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSQLStatementParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLStatementParser.SEARCH, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLStatementParser.CONFIGURATION, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public AlterTextSearchConfigurationClausesContext alterTextSearchConfigurationClauses() {
			return getRuleContext(AlterTextSearchConfigurationClausesContext.class,0);
		}
		public AlterTextSearchConfigurationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTextSearchConfiguration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterTextSearchConfiguration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterTextSearchConfiguration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterTextSearchConfiguration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTextSearchConfigurationContext alterTextSearchConfiguration() throws RecognitionException {
		AlterTextSearchConfigurationContext _localctx = new AlterTextSearchConfigurationContext(_ctx, getState());
		enterRule(_localctx, 1092, RULE_alterTextSearchConfiguration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8170);
			match(ALTER);
			setState(8171);
			match(TEXT);
			setState(8172);
			match(SEARCH);
			setState(8173);
			match(CONFIGURATION);
			setState(8174);
			anyName();
			setState(8175);
			alterTextSearchConfigurationClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterTextSearchConfigurationClausesContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode MAPPING() { return getToken(PostgreSQLStatementParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public AnyNameListContext anyNameList() {
			return getRuleContext(AnyNameListContext.class,0);
		}
		public TerminalNode ADD() { return getToken(PostgreSQLStatementParser.ADD, 0); }
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLStatementParser.REPLACE, 0); }
		public List<AnyNameContext> anyName() {
			return getRuleContexts(AnyNameContext.class);
		}
		public AnyNameContext anyName(int i) {
			return getRuleContext(AnyNameContext.class,i);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public AlterTextSearchConfigurationClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTextSearchConfigurationClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterTextSearchConfigurationClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterTextSearchConfigurationClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterTextSearchConfigurationClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTextSearchConfigurationClausesContext alterTextSearchConfigurationClauses() throws RecognitionException {
		AlterTextSearchConfigurationClausesContext _localctx = new AlterTextSearchConfigurationClausesContext(_ctx, getState());
		enterRule(_localctx, 1094, RULE_alterTextSearchConfigurationClauses);
		int _la;
		try {
			setState(8213);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,754,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8177);
				match(RENAME);
				setState(8178);
				match(TO);
				setState(8179);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8180);
				match(SET);
				setState(8181);
				match(SCHEMA);
				setState(8182);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8183);
				match(OWNER);
				setState(8184);
				match(TO);
				setState(8185);
				roleSpec();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8186);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8187);
				match(MAPPING);
				setState(8188);
				match(FOR);
				setState(8189);
				nameList(0);
				setState(8191);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(8190);
					match(WITH);
					}
				}

				setState(8193);
				anyNameList();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8195);
				match(ALTER);
				setState(8196);
				match(MAPPING);
				setState(8199);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(8197);
					match(FOR);
					setState(8198);
					nameList(0);
					}
				}

				setState(8201);
				match(REPLACE);
				setState(8202);
				anyName();
				setState(8203);
				match(WITH);
				setState(8204);
				anyName();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8206);
				match(DROP);
				setState(8207);
				match(MAPPING);
				setState(8209);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(8208);
					ifExists();
					}
				}

				setState(8211);
				match(FOR);
				setState(8212);
				nameList(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AnyNameListContext extends ParserRuleContext {
		public List<AnyNameContext> anyName() {
			return getRuleContexts(AnyNameContext.class);
		}
		public AnyNameContext anyName(int i) {
			return getRuleContext(AnyNameContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public AnyNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anyNameList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAnyNameList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAnyNameList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAnyNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnyNameListContext anyNameList() throws RecognitionException {
		AnyNameListContext _localctx = new AnyNameListContext(_ctx, getState());
		enterRule(_localctx, 1096, RULE_anyNameList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8215);
			anyName();
			setState(8220);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(8216);
				match(COMMA_);
				setState(8217);
				anyName();
				}
				}
				setState(8222);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterTextSearchDictionaryContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSQLStatementParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLStatementParser.SEARCH, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLStatementParser.DICTIONARY, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public AlterTextSearchDictionaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTextSearchDictionary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterTextSearchDictionary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterTextSearchDictionary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterTextSearchDictionary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTextSearchDictionaryContext alterTextSearchDictionary() throws RecognitionException {
		AlterTextSearchDictionaryContext _localctx = new AlterTextSearchDictionaryContext(_ctx, getState());
		enterRule(_localctx, 1098, RULE_alterTextSearchDictionary);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8223);
			match(ALTER);
			setState(8224);
			match(TEXT);
			setState(8225);
			match(SEARCH);
			setState(8226);
			match(DICTIONARY);
			setState(8227);
			anyName();
			setState(8238);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				{
				setState(8228);
				match(RENAME);
				setState(8229);
				match(TO);
				setState(8230);
				name();
				}
				break;
			case SET:
				{
				setState(8231);
				match(SET);
				setState(8232);
				match(SCHEMA);
				setState(8233);
				name();
				}
				break;
			case OWNER:
				{
				setState(8234);
				match(OWNER);
				setState(8235);
				match(TO);
				setState(8236);
				roleSpec();
				}
				break;
			case LP_:
				{
				setState(8237);
				definition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterTextSearchParserContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSQLStatementParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLStatementParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLStatementParser.PARSER, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public AlterTextSearchParserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTextSearchParser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterTextSearchParser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterTextSearchParser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterTextSearchParser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTextSearchParserContext alterTextSearchParser() throws RecognitionException {
		AlterTextSearchParserContext _localctx = new AlterTextSearchParserContext(_ctx, getState());
		enterRule(_localctx, 1100, RULE_alterTextSearchParser);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8240);
			match(ALTER);
			setState(8241);
			match(TEXT);
			setState(8242);
			match(SEARCH);
			setState(8243);
			match(PARSER);
			setState(8244);
			anyName();
			setState(8251);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				{
				setState(8245);
				match(RENAME);
				setState(8246);
				match(TO);
				setState(8247);
				name();
				}
				break;
			case SET:
				{
				setState(8248);
				match(SET);
				setState(8249);
				match(SCHEMA);
				setState(8250);
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterTextSearchTemplateContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSQLStatementParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLStatementParser.SEARCH, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLStatementParser.TEMPLATE, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public AlterTextSearchTemplateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTextSearchTemplate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterTextSearchTemplate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterTextSearchTemplate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterTextSearchTemplate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTextSearchTemplateContext alterTextSearchTemplate() throws RecognitionException {
		AlterTextSearchTemplateContext _localctx = new AlterTextSearchTemplateContext(_ctx, getState());
		enterRule(_localctx, 1102, RULE_alterTextSearchTemplate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8253);
			match(ALTER);
			setState(8254);
			match(TEXT);
			setState(8255);
			match(SEARCH);
			setState(8256);
			match(TEMPLATE);
			setState(8257);
			anyName();
			setState(8264);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				{
				setState(8258);
				match(RENAME);
				setState(8259);
				match(TO);
				setState(8260);
				name();
				}
				break;
			case SET:
				{
				setState(8261);
				match(SET);
				setState(8262);
				match(SCHEMA);
				setState(8263);
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterTriggerContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLStatementParser.TRIGGER, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public List<TerminalNode> ON() { return getTokens(PostgreSQLStatementParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(PostgreSQLStatementParser.ON, i);
		}
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode DEPENDS() { return getToken(PostgreSQLStatementParser.DEPENDS, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLStatementParser.EXTENSION, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public AlterTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTriggerContext alterTrigger() throws RecognitionException {
		AlterTriggerContext _localctx = new AlterTriggerContext(_ctx, getState());
		enterRule(_localctx, 1104, RULE_alterTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8266);
			match(ALTER);
			setState(8267);
			match(TRIGGER);
			setState(8268);
			name();
			setState(8269);
			match(ON);
			setState(8270);
			qualifiedName();
			setState(8281);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				{
				setState(8271);
				match(RENAME);
				setState(8272);
				match(TO);
				setState(8273);
				name();
				}
				break;
			case NO:
			case DEPENDS:
				{
				setState(8275);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(8274);
					match(NO);
					}
				}

				setState(8277);
				match(DEPENDS);
				setState(8278);
				match(ON);
				setState(8279);
				match(EXTENSION);
				setState(8280);
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterTypeContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode TYPE() { return getToken(PostgreSQLStatementParser.TYPE, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public AlterTypeClausesContext alterTypeClauses() {
			return getRuleContext(AlterTypeClausesContext.class,0);
		}
		public AlterTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTypeContext alterType() throws RecognitionException {
		AlterTypeContext _localctx = new AlterTypeContext(_ctx, getState());
		enterRule(_localctx, 1106, RULE_alterType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8283);
			match(ALTER);
			setState(8284);
			match(TYPE);
			setState(8285);
			anyName();
			setState(8286);
			alterTypeClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterTypeClausesContext extends ParserRuleContext {
		public AlterTypeCmdsContext alterTypeCmds() {
			return getRuleContext(AlterTypeCmdsContext.class,0);
		}
		public TerminalNode ADD() { return getToken(PostgreSQLStatementParser.ADD, 0); }
		public TerminalNode VALUE() { return getToken(PostgreSQLStatementParser.VALUE, 0); }
		public List<TerminalNode> STRING_() { return getTokens(PostgreSQLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(PostgreSQLStatementParser.STRING_, i);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode BEFORE() { return getToken(PostgreSQLStatementParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(PostgreSQLStatementParser.AFTER, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode ATTRIBUTE() { return getToken(PostgreSQLStatementParser.ATTRIBUTE, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TypeDefListContext typeDefList() {
			return getRuleContext(TypeDefListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public AlterTypeClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTypeClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterTypeClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterTypeClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterTypeClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTypeClausesContext alterTypeClauses() throws RecognitionException {
		AlterTypeClausesContext _localctx = new AlterTypeClausesContext(_ctx, getState());
		enterRule(_localctx, 1108, RULE_alterTypeClauses);
		int _la;
		try {
			setState(8326);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,764,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8288);
				alterTypeCmds();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8289);
				match(ADD);
				setState(8290);
				match(VALUE);
				setState(8292);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(8291);
					ifNotExists();
					}
				}

				setState(8294);
				match(STRING_);
				setState(8297);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AFTER || _la==BEFORE) {
					{
					setState(8295);
					_la = _input.LA(1);
					if ( !(_la==AFTER || _la==BEFORE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(8296);
					match(STRING_);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8299);
				match(RENAME);
				setState(8300);
				match(VALUE);
				setState(8301);
				match(STRING_);
				setState(8302);
				match(TO);
				setState(8303);
				match(STRING_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8304);
				match(RENAME);
				setState(8305);
				match(TO);
				setState(8306);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8307);
				match(RENAME);
				setState(8308);
				match(ATTRIBUTE);
				setState(8309);
				name();
				setState(8310);
				match(TO);
				setState(8311);
				name();
				setState(8313);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(8312);
					dropBehavior();
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8315);
				match(SET);
				setState(8316);
				match(SCHEMA);
				setState(8317);
				name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8318);
				match(SET);
				setState(8319);
				match(LP_);
				setState(8320);
				typeDefList();
				setState(8321);
				match(RP_);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8323);
				match(OWNER);
				setState(8324);
				match(TO);
				setState(8325);
				roleSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterTypeCmdsContext extends ParserRuleContext {
		public List<AlterTypeCmdContext> alterTypeCmd() {
			return getRuleContexts(AlterTypeCmdContext.class);
		}
		public AlterTypeCmdContext alterTypeCmd(int i) {
			return getRuleContext(AlterTypeCmdContext.class,i);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public AlterTypeCmdsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTypeCmds; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterTypeCmds(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterTypeCmds(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterTypeCmds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTypeCmdsContext alterTypeCmds() throws RecognitionException {
		AlterTypeCmdsContext _localctx = new AlterTypeCmdsContext(_ctx, getState());
		enterRule(_localctx, 1110, RULE_alterTypeCmds);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8328);
			alterTypeCmd();
			setState(8331);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_) {
				{
				setState(8329);
				match(COMMA_);
				setState(8330);
				alterTypeCmd();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterTypeCmdContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(PostgreSQLStatementParser.ADD, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PostgreSQLStatementParser.ATTRIBUTE, 0); }
		public TableFuncElementContext tableFuncElement() {
			return getRuleContext(TableFuncElementContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode TYPE() { return getToken(PostgreSQLStatementParser.TYPE, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public SetDataContext setData() {
			return getRuleContext(SetDataContext.class,0);
		}
		public CollateClauseContext collateClause() {
			return getRuleContext(CollateClauseContext.class,0);
		}
		public AlterTypeCmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTypeCmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterTypeCmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterTypeCmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterTypeCmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTypeCmdContext alterTypeCmd() throws RecognitionException {
		AlterTypeCmdContext _localctx = new AlterTypeCmdContext(_ctx, getState());
		enterRule(_localctx, 1112, RULE_alterTypeCmd);
		int _la;
		try {
			setState(8362);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				enterOuterAlt(_localctx, 1);
				{
				setState(8333);
				match(ADD);
				setState(8334);
				match(ATTRIBUTE);
				setState(8335);
				tableFuncElement();
				setState(8337);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(8336);
					dropBehavior();
					}
				}

				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 2);
				{
				setState(8339);
				match(DROP);
				setState(8340);
				match(ATTRIBUTE);
				setState(8342);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,767,_ctx) ) {
				case 1:
					{
					setState(8341);
					ifExists();
					}
					break;
				}
				setState(8344);
				colId();
				setState(8346);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(8345);
					dropBehavior();
					}
				}

				}
				break;
			case ALTER:
				enterOuterAlt(_localctx, 3);
				{
				setState(8348);
				match(ALTER);
				setState(8349);
				match(ATTRIBUTE);
				setState(8350);
				colId();
				setState(8352);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SET) {
					{
					setState(8351);
					setData();
					}
				}

				setState(8354);
				match(TYPE);
				setState(8355);
				typeName();
				setState(8357);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(8356);
					collateClause();
					}
				}

				setState(8360);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(8359);
					dropBehavior();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TypeDefListContext extends ParserRuleContext {
		public List<TypeDefElemContext> typeDefElem() {
			return getRuleContexts(TypeDefElemContext.class);
		}
		public TypeDefElemContext typeDefElem(int i) {
			return getRuleContext(TypeDefElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public TypeDefListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeDefList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTypeDefList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTypeDefList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTypeDefList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeDefListContext typeDefList() throws RecognitionException {
		TypeDefListContext _localctx = new TypeDefListContext(_ctx, getState());
		enterRule(_localctx, 1114, RULE_typeDefList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8364);
			typeDefElem();
			setState(8369);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(8365);
				match(COMMA_);
				setState(8366);
				typeDefElem();
				}
				}
				setState(8371);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TypeDefElemContext extends ParserRuleContext {
		public TerminalNode EQ_() { return getToken(PostgreSQLStatementParser.EQ_, 0); }
		public TerminalNode RECEIVE() { return getToken(PostgreSQLStatementParser.RECEIVE, 0); }
		public TerminalNode SEND() { return getToken(PostgreSQLStatementParser.SEND, 0); }
		public TerminalNode TYPMOD_IN() { return getToken(PostgreSQLStatementParser.TYPMOD_IN, 0); }
		public TerminalNode TYPMOD_OUT() { return getToken(PostgreSQLStatementParser.TYPMOD_OUT, 0); }
		public TerminalNode ANALYZE() { return getToken(PostgreSQLStatementParser.ANALYZE, 0); }
		public TerminalNode SUBSCRIPT() { return getToken(PostgreSQLStatementParser.SUBSCRIPT, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLStatementParser.STORAGE, 0); }
		public TerminalNode NONE() { return getToken(PostgreSQLStatementParser.NONE, 0); }
		public TypeDefArgContext typeDefArg() {
			return getRuleContext(TypeDefArgContext.class,0);
		}
		public TypeDefElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeDefElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTypeDefElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTypeDefElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTypeDefElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeDefElemContext typeDefElem() throws RecognitionException {
		TypeDefElemContext _localctx = new TypeDefElemContext(_ctx, getState());
		enterRule(_localctx, 1116, RULE_typeDefElem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8372);
			_la = _input.LA(1);
			if ( !(_la==STORAGE || _la==ANALYZE || ((((_la - 600)) & ~0x3f) == 0 && ((1L << (_la - 600)) & 31L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8373);
			match(EQ_);
			setState(8376);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NONE:
				{
				setState(8374);
				match(NONE);
				}
				break;
			case AND_:
			case OR_:
			case NOT_:
			case TILDE_:
			case VERTICAL_BAR_:
			case AMPERSAND_:
			case SIGNED_LEFT_SHIFT_:
			case SIGNED_RIGHT_SHIFT_:
			case CARET_:
			case MOD_:
			case COLON_:
			case PLUS_:
			case MINUS_:
			case ASTERISK_:
			case SLASH_:
			case BACKSLASH_:
			case DOT_:
			case DOT_ASTERISK_:
			case SAFE_EQ_:
			case DEQ_:
			case EQ_:
			case CQ_:
			case NEQ_:
			case GT_:
			case GTE_:
			case LT_:
			case LTE_:
			case POUND_:
			case LP_:
			case RP_:
			case LBE_:
			case RBE_:
			case LBT_:
			case RBT_:
			case COMMA_:
			case DQ_:
			case SQ_:
			case BQ_:
			case QUESTION_:
			case DOLLAR_:
			case AT_:
			case SEMI_:
			case TILDE_TILDE_:
			case NOT_TILDE_TILDE_:
			case TYPE_CAST_:
			case ILIKE_:
			case NOT_ILIKE_:
			case UNICODE_ESCAPE:
			case JSON_EXTRACT_:
			case JSON_EXTRACT_TEXT_:
			case JSON_PATH_EXTRACT_:
			case JSON_PATH_EXTRACT_TEXT_:
			case JSONB_CONTAIN_RIGHT_:
			case JSONB_CONTAIN_LEFT_:
			case JSONB_CONTAIN_ALL_TOP_KEY_:
			case JSONB_PATH_DELETE_:
			case JSONB_PATH_CONTAIN_ANY_VALUE_:
			case JSONB_PATH_PREDICATE_CHECK_:
			case GEOMETRIC_LENGTH_:
			case GEOMETRIC_DISTANCE_:
			case GEOMETRIC_EXTEND_RIGHT_:
			case GEOMETRIC_EXTEND_LEFT_:
			case GEOMETRIC_STRICT_BELOW_:
			case GEOMETRIC_STRICT_ABOVE_:
			case GEOMETRIC_EXTEND_ABOVE_:
			case GEOMETRIC_EXTEND_BELOW_:
			case GEOMETRIC_BELOW_:
			case GEOMETRIC_ABOVE_:
			case GEOMETRIC_INTERSECT_:
			case GEOMETRIC_PERPENDICULAR_:
			case GEOMETRIC_SAME_AS_:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case CHECK:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case REFERENCES:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case USER:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COLLATE:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CURRENT_TIMESTAMP:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRABLE:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INITIALLY:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case ONLY:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case INT2:
			case INT4:
			case INT8:
			case FLOAT:
			case FLOAT4:
			case FLOAT8:
			case VARCHAR:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case BIT:
			case XML:
			case JSON:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case CURRENT_SCHEMA:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case SYMMETRIC:
			case DOCUMENT:
			case NORMALIZED:
			case ASYMMETRIC:
			case VARIADIC:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case PLACING:
			case RETURNING:
			case LATERAL:
			case ANALYSE:
			case ANALYZE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case SELECT:
			case INSERT:
			case UPDATE:
			case DELETE:
			case CREATE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case GRANT:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case COLUMN:
			case INDEX:
			case CONSTRAINT:
			case PRIMARY:
			case UNIQUE:
			case FOREIGN:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case INTO:
			case WITH:
			case UNION:
			case DISTINCT:
			case CASE:
			case WHEN:
			case CAST:
			case FROM:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case USING:
			case WHERE:
			case AS:
			case ON:
			case IF:
			case ELSE:
			case THEN:
			case FOR:
			case TO:
			case AND:
			case OR:
			case IS:
			case NOT:
			case NULL:
			case TRUE:
			case FALSE:
			case IN:
			case ALL:
			case ANY:
			case LIKE:
			case ORDER:
			case GROUP:
			case BY:
			case ASC:
			case DESC:
			case HAVING:
			case LIMIT:
			case OFFSET:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case ARRAY:
			case INTERVAL:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case DEFAULT:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DO:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case BOTH:
			case LEADING:
			case TRAILING:
			case INTERSECT:
			case EXCEPT:
			case TIES:
			case FETCH:
			case CUBE:
			case SETS:
			case WINDOW:
			case OTHERS:
			case OVERLAPS:
			case SOME:
			case AT:
			case DEC:
			case END:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
				{
				setState(8375);
				typeDefArg();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TypeDefArgContext extends ParserRuleContext {
		public FuncTypeContext funcType() {
			return getRuleContext(FuncTypeContext.class,0);
		}
		public ReservedKeywordContext reservedKeyword() {
			return getRuleContext(ReservedKeywordContext.class,0);
		}
		public QualAllOpContext qualAllOp() {
			return getRuleContext(QualAllOpContext.class,0);
		}
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public TypeDefArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeDefArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTypeDefArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTypeDefArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTypeDefArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeDefArgContext typeDefArg() throws RecognitionException {
		TypeDefArgContext _localctx = new TypeDefArgContext(_ctx, getState());
		enterRule(_localctx, 1118, RULE_typeDefArg);
		try {
			setState(8383);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,775,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8378);
				funcType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8379);
				reservedKeyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8380);
				qualAllOp();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8381);
				numericOnly();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8382);
				match(STRING_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterUserMappingContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLStatementParser.USER, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSQLStatementParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public AuthIdentContext authIdent() {
			return getRuleContext(AuthIdentContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PostgreSQLStatementParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AlterGenericOptionsContext alterGenericOptions() {
			return getRuleContext(AlterGenericOptionsContext.class,0);
		}
		public AlterUserMappingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUserMapping; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterUserMapping(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterUserMapping(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterUserMapping(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserMappingContext alterUserMapping() throws RecognitionException {
		AlterUserMappingContext _localctx = new AlterUserMappingContext(_ctx, getState());
		enterRule(_localctx, 1120, RULE_alterUserMapping);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8385);
			match(ALTER);
			setState(8386);
			match(USER);
			setState(8387);
			match(MAPPING);
			setState(8388);
			match(FOR);
			setState(8389);
			authIdent();
			setState(8390);
			match(SERVER);
			setState(8391);
			name();
			setState(8392);
			alterGenericOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AuthIdentContext extends ParserRuleContext {
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode USER() { return getToken(PostgreSQLStatementParser.USER, 0); }
		public AuthIdentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authIdent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAuthIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAuthIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAuthIdent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AuthIdentContext authIdent() throws RecognitionException {
		AuthIdentContext _localctx = new AuthIdentContext(_ctx, getState());
		enterRule(_localctx, 1122, RULE_authIdent);
		try {
			setState(8396);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNICODE_ESCAPE:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXISTS:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case BIT:
			case XML:
			case JSON:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_ROLE:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case OUT:
			case INOUT:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case IDENTIFIER_:
			case PUBLIC:
				enterOuterAlt(_localctx, 1);
				{
				setState(8394);
				roleSpec();
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 2);
				{
				setState(8395);
				match(USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterViewContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLStatementParser.VIEW, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public AlterViewClausesContext alterViewClauses() {
			return getRuleContext(AlterViewClausesContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public AlterViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterViewContext alterView() throws RecognitionException {
		AlterViewContext _localctx = new AlterViewContext(_ctx, getState());
		enterRule(_localctx, 1124, RULE_alterView);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8398);
			match(ALTER);
			setState(8399);
			match(VIEW);
			setState(8401);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,777,_ctx) ) {
			case 1:
				{
				setState(8400);
				ifExists();
				}
				break;
			}
			setState(8403);
			qualifiedName();
			setState(8404);
			alterViewClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterViewClausesContext extends ParserRuleContext {
		public AlterViewClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterViewClauses; }
	 
		public AlterViewClausesContext() { }
		public void copyFrom(AlterViewClausesContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterSetSchemaContext extends AlterViewClausesContext {
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AlterSetSchemaContext(AlterViewClausesContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterSetSchema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterSetSchema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterSetSchema(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterViewCmdsContext extends AlterViewClausesContext {
		public AlterTableCmdsContext alterTableCmds() {
			return getRuleContext(AlterTableCmdsContext.class,0);
		}
		public AlterViewCmdsContext(AlterViewClausesContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterViewCmds(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterViewCmds(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterViewCmds(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterRenameViewContext extends AlterViewClausesContext {
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AlterRenameViewContext(AlterViewClausesContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterRenameView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterRenameView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterRenameView(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterRenameColumnContext extends AlterViewClausesContext {
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode COLUMN() { return getToken(PostgreSQLStatementParser.COLUMN, 0); }
		public AlterRenameColumnContext(AlterViewClausesContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterRenameColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterRenameColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterRenameColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterViewClausesContext alterViewClauses() throws RecognitionException {
		AlterViewClausesContext _localctx = new AlterViewClausesContext(_ctx, getState());
		enterRule(_localctx, 1126, RULE_alterViewClauses);
		int _la;
		try {
			setState(8421);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,779,_ctx) ) {
			case 1:
				_localctx = new AlterViewCmdsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(8406);
				alterTableCmds();
				}
				break;
			case 2:
				_localctx = new AlterRenameViewContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(8407);
				match(RENAME);
				setState(8408);
				match(TO);
				setState(8409);
				name();
				}
				break;
			case 3:
				_localctx = new AlterRenameColumnContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(8410);
				match(RENAME);
				setState(8412);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(8411);
					match(COLUMN);
					}
				}

				setState(8414);
				name();
				setState(8415);
				match(TO);
				setState(8416);
				name();
				}
				break;
			case 4:
				_localctx = new AlterSetSchemaContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(8418);
				match(SET);
				setState(8419);
				match(SCHEMA);
				setState(8420);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CloseContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(PostgreSQLStatementParser.CLOSE, 0); }
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public CloseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterClose(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitClose(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitClose(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CloseContext close() throws RecognitionException {
		CloseContext _localctx = new CloseContext(_ctx, getState());
		enterRule(_localctx, 1128, RULE_close);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8423);
			match(CLOSE);
			setState(8426);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COLON_:
			case UNICODE_ESCAPE:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case XML:
			case JSON:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case PARAM:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case NATIONAL:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case IDENTIFIER_:
				{
				setState(8424);
				cursorName();
				}
				break;
			case ALL:
				{
				setState(8425);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ClusterContext extends ParserRuleContext {
		public TerminalNode CLUSTER() { return getToken(PostgreSQLStatementParser.CLUSTER, 0); }
		public ClusterVerboseSpecificationContext clusterVerboseSpecification() {
			return getRuleContext(ClusterVerboseSpecificationContext.class,0);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public ClusterIndexSpecificationContext clusterIndexSpecification() {
			return getRuleContext(ClusterIndexSpecificationContext.class,0);
		}
		public ClusterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cluster; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCluster(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCluster(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCluster(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClusterContext cluster() throws RecognitionException {
		ClusterContext _localctx = new ClusterContext(_ctx, getState());
		enterRule(_localctx, 1130, RULE_cluster);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8428);
			match(CLUSTER);
			setState(8430);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_ || _la==VERBOSE) {
				{
				setState(8429);
				clusterVerboseSpecification();
				}
			}

			setState(8433);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & -1702650966907551743L) != 0) || ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & -36028934466307075L) != 0) || ((((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & 283126353889277L) != 0) || ((((_la - 241)) & ~0x3f) == 0 && ((1L << (_la - 241)) & -545622264849L) != 0) || ((((_la - 305)) & ~0x3f) == 0 && ((1L << (_la - 305)) & -1L) != 0) || ((((_la - 369)) & ~0x3f) == 0 && ((1L << (_la - 369)) & 9895604649983L) != 0) || ((((_la - 437)) & ~0x3f) == 0 && ((1L << (_la - 437)) & 562950016917239L) != 0) || ((((_la - 505)) & ~0x3f) == 0 && ((1L << (_la - 505)) & 7138750043982826433L) != 0) || ((((_la - 569)) & ~0x3f) == 0 && ((1L << (_la - 569)) & 2173569L) != 0)) {
				{
				setState(8432);
				tableName();
				}
			}

			setState(8436);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(8435);
				clusterIndexSpecification();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ClusterVerboseSpecificationContext extends ParserRuleContext {
		public TerminalNode VERBOSE() { return getToken(PostgreSQLStatementParser.VERBOSE, 0); }
		public ClusterVerboseOptionListContext clusterVerboseOptionList() {
			return getRuleContext(ClusterVerboseOptionListContext.class,0);
		}
		public ClusterVerboseSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clusterVerboseSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterClusterVerboseSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitClusterVerboseSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitClusterVerboseSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClusterVerboseSpecificationContext clusterVerboseSpecification() throws RecognitionException {
		ClusterVerboseSpecificationContext _localctx = new ClusterVerboseSpecificationContext(_ctx, getState());
		enterRule(_localctx, 1132, RULE_clusterVerboseSpecification);
		try {
			setState(8440);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VERBOSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8438);
				match(VERBOSE);
				}
				break;
			case LP_:
				enterOuterAlt(_localctx, 2);
				{
				setState(8439);
				clusterVerboseOptionList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ClusterIndexSpecificationContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public ClusterIndexSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clusterIndexSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterClusterIndexSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitClusterIndexSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitClusterIndexSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClusterIndexSpecificationContext clusterIndexSpecification() throws RecognitionException {
		ClusterIndexSpecificationContext _localctx = new ClusterIndexSpecificationContext(_ctx, getState());
		enterRule(_localctx, 1134, RULE_clusterIndexSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8442);
			match(USING);
			setState(8443);
			indexName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ClusterVerboseOptionListContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public List<ClusterVerboseOptionContext> clusterVerboseOption() {
			return getRuleContexts(ClusterVerboseOptionContext.class);
		}
		public ClusterVerboseOptionContext clusterVerboseOption(int i) {
			return getRuleContext(ClusterVerboseOptionContext.class,i);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public ClusterVerboseOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clusterVerboseOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterClusterVerboseOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitClusterVerboseOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitClusterVerboseOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClusterVerboseOptionListContext clusterVerboseOptionList() throws RecognitionException {
		ClusterVerboseOptionListContext _localctx = new ClusterVerboseOptionListContext(_ctx, getState());
		enterRule(_localctx, 1136, RULE_clusterVerboseOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8445);
			match(LP_);
			setState(8446);
			clusterVerboseOption();
			setState(8451);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(8447);
				match(COMMA_);
				setState(8448);
				clusterVerboseOption();
				}
				}
				setState(8453);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(8454);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ClusterVerboseOptionContext extends ParserRuleContext {
		public TerminalNode VERBOSE() { return getToken(PostgreSQLStatementParser.VERBOSE, 0); }
		public BooleanValueContext booleanValue() {
			return getRuleContext(BooleanValueContext.class,0);
		}
		public ClusterVerboseOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clusterVerboseOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterClusterVerboseOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitClusterVerboseOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitClusterVerboseOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClusterVerboseOptionContext clusterVerboseOption() throws RecognitionException {
		ClusterVerboseOptionContext _localctx = new ClusterVerboseOptionContext(_ctx, getState());
		enterRule(_localctx, 1138, RULE_clusterVerboseOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8456);
			match(VERBOSE);
			setState(8458);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFF || ((((_la - 485)) & ~0x3f) == 0 && ((1L << (_la - 485)) & 6145L) != 0) || _la==NUMBER_) {
				{
				setState(8457);
				booleanValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CommentContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(PostgreSQLStatementParser.COMMENT, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public CommentClausesContext commentClauses() {
			return getRuleContext(CommentClausesContext.class,0);
		}
		public CommentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitComment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommentContext comment() throws RecognitionException {
		CommentContext _localctx = new CommentContext(_ctx, getState());
		enterRule(_localctx, 1140, RULE_comment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8460);
			match(COMMENT);
			setState(8461);
			match(ON);
			setState(8462);
			commentClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CommentClausesContext extends ParserRuleContext {
		public ObjectTypeAnyNameContext objectTypeAnyName() {
			return getRuleContext(ObjectTypeAnyNameContext.class,0);
		}
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PostgreSQLStatementParser.IS, 0); }
		public CommentTextContext commentText() {
			return getRuleContext(CommentTextContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(PostgreSQLStatementParser.COLUMN, 0); }
		public ObjectTypeNameContext objectTypeName() {
			return getRuleContext(ObjectTypeNameContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(PostgreSQLStatementParser.TYPE, 0); }
		public List<TypeNameContext> typeName() {
			return getRuleContexts(TypeNameContext.class);
		}
		public TypeNameContext typeName(int i) {
			return getRuleContext(TypeNameContext.class,i);
		}
		public TerminalNode DOMAIN() { return getToken(PostgreSQLStatementParser.DOMAIN, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLStatementParser.AGGREGATE, 0); }
		public AggregateWithArgtypesContext aggregateWithArgtypes() {
			return getRuleContext(AggregateWithArgtypesContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PostgreSQLStatementParser.FUNCTION, 0); }
		public FunctionWithArgtypesContext functionWithArgtypes() {
			return getRuleContext(FunctionWithArgtypesContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLStatementParser.OPERATOR, 0); }
		public OperatorWithArgtypesContext operatorWithArgtypes() {
			return getRuleContext(OperatorWithArgtypesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLStatementParser.CONSTRAINT, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public ObjectTypeNameOnAnyNameContext objectTypeNameOnAnyName() {
			return getRuleContext(ObjectTypeNameOnAnyNameContext.class,0);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLStatementParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLStatementParser.ROUTINE, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLStatementParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLStatementParser.LANGUAGE, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLStatementParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLStatementParser.FAMILY, 0); }
		public TerminalNode LARGE() { return getToken(PostgreSQLStatementParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(PostgreSQLStatementParser.OBJECT, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode CAST() { return getToken(PostgreSQLStatementParser.CAST, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public CommentClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commentClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCommentClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCommentClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCommentClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommentClausesContext commentClauses() throws RecognitionException {
		CommentClausesContext _localctx = new CommentClausesContext(_ctx, getState());
		enterRule(_localctx, 1142, RULE_commentClauses);
		try {
			setState(8568);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,787,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8464);
				objectTypeAnyName();
				setState(8465);
				anyName();
				setState(8466);
				match(IS);
				setState(8467);
				commentText();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8469);
				match(COLUMN);
				setState(8470);
				anyName();
				setState(8471);
				match(IS);
				setState(8472);
				commentText();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8474);
				objectTypeName();
				setState(8475);
				name();
				setState(8476);
				match(IS);
				setState(8477);
				commentText();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8479);
				match(TYPE);
				setState(8480);
				typeName();
				setState(8481);
				match(IS);
				setState(8482);
				commentText();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8484);
				match(DOMAIN);
				setState(8485);
				typeName();
				setState(8486);
				match(IS);
				setState(8487);
				commentText();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8489);
				match(AGGREGATE);
				setState(8490);
				aggregateWithArgtypes();
				setState(8491);
				match(IS);
				setState(8492);
				commentText();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8494);
				match(FUNCTION);
				setState(8495);
				functionWithArgtypes();
				setState(8496);
				match(IS);
				setState(8497);
				commentText();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8499);
				match(OPERATOR);
				setState(8500);
				operatorWithArgtypes();
				setState(8501);
				match(IS);
				setState(8502);
				commentText();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8504);
				match(CONSTRAINT);
				setState(8505);
				name();
				setState(8506);
				match(ON);
				setState(8507);
				match(DOMAIN);
				setState(8508);
				anyName();
				setState(8509);
				match(IS);
				setState(8510);
				commentText();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(8512);
				objectTypeNameOnAnyName();
				setState(8513);
				name();
				setState(8514);
				match(ON);
				setState(8515);
				tableName();
				setState(8516);
				match(IS);
				setState(8517);
				commentText();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(8519);
				match(PROCEDURE);
				setState(8520);
				functionWithArgtypes();
				setState(8521);
				match(IS);
				setState(8522);
				commentText();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(8524);
				match(ROUTINE);
				setState(8525);
				functionWithArgtypes();
				setState(8526);
				match(IS);
				setState(8527);
				commentText();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(8529);
				match(TRANSFORM);
				setState(8530);
				match(FOR);
				setState(8531);
				typeName();
				setState(8532);
				match(LANGUAGE);
				setState(8533);
				name();
				setState(8534);
				match(IS);
				setState(8535);
				commentText();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(8537);
				match(OPERATOR);
				setState(8538);
				match(CLASS);
				setState(8539);
				anyName();
				setState(8540);
				match(USING);
				setState(8541);
				name();
				setState(8542);
				match(IS);
				setState(8543);
				commentText();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(8545);
				match(OPERATOR);
				setState(8546);
				match(FAMILY);
				setState(8547);
				anyName();
				setState(8548);
				match(USING);
				setState(8549);
				name();
				setState(8550);
				match(IS);
				setState(8551);
				commentText();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(8553);
				match(LARGE);
				setState(8554);
				match(OBJECT);
				setState(8555);
				numericOnly();
				setState(8556);
				match(IS);
				setState(8557);
				commentText();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(8559);
				match(CAST);
				setState(8560);
				match(LP_);
				setState(8561);
				typeName();
				setState(8562);
				match(AS);
				setState(8563);
				typeName();
				setState(8564);
				match(RP_);
				setState(8565);
				match(IS);
				setState(8566);
				commentText();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ObjectTypeNameOnAnyNameContext extends ParserRuleContext {
		public TerminalNode POLICY() { return getToken(PostgreSQLStatementParser.POLICY, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLStatementParser.RULE, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLStatementParser.TRIGGER, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLStatementParser.CONSTRAINT, 0); }
		public ObjectTypeNameOnAnyNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_objectTypeNameOnAnyName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterObjectTypeNameOnAnyName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitObjectTypeNameOnAnyName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitObjectTypeNameOnAnyName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ObjectTypeNameOnAnyNameContext objectTypeNameOnAnyName() throws RecognitionException {
		ObjectTypeNameOnAnyNameContext _localctx = new ObjectTypeNameOnAnyNameContext(_ctx, getState());
		enterRule(_localctx, 1144, RULE_objectTypeNameOnAnyName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8570);
			_la = _input.LA(1);
			if ( !(_la==RULE || _la==POLICY || _la==CONSTRAINT || _la==TRIGGER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ObjectTypeNameContext extends ParserRuleContext {
		public DropTypeNameContext dropTypeName() {
			return getRuleContext(DropTypeNameContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(PostgreSQLStatementParser.DATABASE, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLStatementParser.ROLE, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLStatementParser.SUBSCRIPTION, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLStatementParser.TABLESPACE, 0); }
		public ObjectTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_objectTypeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterObjectTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitObjectTypeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitObjectTypeName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ObjectTypeNameContext objectTypeName() throws RecognitionException {
		ObjectTypeNameContext _localctx = new ObjectTypeNameContext(_ctx, getState());
		enterRule(_localctx, 1146, RULE_objectTypeName);
		try {
			setState(8577);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXTENSION:
			case LANGUAGE:
			case ACCESS:
			case EVENT:
			case PROCEDURAL:
			case PUBLICATION:
			case SERVER:
			case SCHEMA:
			case FOREIGN:
				enterOuterAlt(_localctx, 1);
				{
				setState(8572);
				dropTypeName();
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 2);
				{
				setState(8573);
				match(DATABASE);
				}
				break;
			case ROLE:
				enterOuterAlt(_localctx, 3);
				{
				setState(8574);
				match(ROLE);
				}
				break;
			case SUBSCRIPTION:
				enterOuterAlt(_localctx, 4);
				{
				setState(8575);
				match(SUBSCRIPTION);
				}
				break;
			case TABLESPACE:
				enterOuterAlt(_localctx, 5);
				{
				setState(8576);
				match(TABLESPACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropTypeNameContext extends ParserRuleContext {
		public TerminalNode ACCESS() { return getToken(PostgreSQLStatementParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(PostgreSQLStatementParser.METHOD, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLStatementParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLStatementParser.TRIGGER, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLStatementParser.EXTENSION, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLStatementParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(PostgreSQLStatementParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLStatementParser.WRAPPER, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLStatementParser.LANGUAGE, 0); }
		public TerminalNode PROCEDURAL() { return getToken(PostgreSQLStatementParser.PROCEDURAL, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLStatementParser.PUBLICATION, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLStatementParser.SERVER, 0); }
		public DropTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTypeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropTypeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropTypeName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTypeNameContext dropTypeName() throws RecognitionException {
		DropTypeNameContext _localctx = new DropTypeNameContext(_ctx, getState());
		enterRule(_localctx, 1148, RULE_dropTypeName);
		int _la;
		try {
			setState(8594);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACCESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(8579);
				match(ACCESS);
				setState(8580);
				match(METHOD);
				}
				break;
			case EVENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(8581);
				match(EVENT);
				setState(8582);
				match(TRIGGER);
				}
				break;
			case EXTENSION:
				enterOuterAlt(_localctx, 3);
				{
				setState(8583);
				match(EXTENSION);
				}
				break;
			case FOREIGN:
				enterOuterAlt(_localctx, 4);
				{
				setState(8584);
				match(FOREIGN);
				setState(8585);
				match(DATA);
				setState(8586);
				match(WRAPPER);
				}
				break;
			case LANGUAGE:
			case PROCEDURAL:
				enterOuterAlt(_localctx, 5);
				{
				setState(8588);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROCEDURAL) {
					{
					setState(8587);
					match(PROCEDURAL);
					}
				}

				setState(8590);
				match(LANGUAGE);
				}
				break;
			case PUBLICATION:
				enterOuterAlt(_localctx, 6);
				{
				setState(8591);
				match(PUBLICATION);
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 7);
				{
				setState(8592);
				match(SCHEMA);
				}
				break;
			case SERVER:
				enterOuterAlt(_localctx, 8);
				{
				setState(8593);
				match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ObjectTypeAnyNameContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLStatementParser.SEQUENCE, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLStatementParser.VIEW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLStatementParser.MATERIALIZED, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLStatementParser.INDEX, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLStatementParser.FOREIGN, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLStatementParser.COLLATION, 0); }
		public TerminalNode CONVERSION() { return getToken(PostgreSQLStatementParser.CONVERSION, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLStatementParser.STATISTICS, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSQLStatementParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLStatementParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLStatementParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLStatementParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLStatementParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLStatementParser.CONFIGURATION, 0); }
		public ObjectTypeAnyNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_objectTypeAnyName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterObjectTypeAnyName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitObjectTypeAnyName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitObjectTypeAnyName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ObjectTypeAnyNameContext objectTypeAnyName() throws RecognitionException {
		ObjectTypeAnyNameContext _localctx = new ObjectTypeAnyNameContext(_ctx, getState());
		enterRule(_localctx, 1150, RULE_objectTypeAnyName);
		try {
			setState(8619);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,791,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8596);
				match(TABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8597);
				match(SEQUENCE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8598);
				match(VIEW);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8599);
				match(MATERIALIZED);
				setState(8600);
				match(VIEW);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8601);
				match(INDEX);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8602);
				match(FOREIGN);
				setState(8603);
				match(TABLE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8604);
				match(COLLATION);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8605);
				match(CONVERSION);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8606);
				match(STATISTICS);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(8607);
				match(TEXT);
				setState(8608);
				match(SEARCH);
				setState(8609);
				match(PARSER);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(8610);
				match(TEXT);
				setState(8611);
				match(SEARCH);
				setState(8612);
				match(DICTIONARY);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(8613);
				match(TEXT);
				setState(8614);
				match(SEARCH);
				setState(8615);
				match(TEMPLATE);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(8616);
				match(TEXT);
				setState(8617);
				match(SEARCH);
				setState(8618);
				match(CONFIGURATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CommentTextContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public TerminalNode NULL() { return getToken(PostgreSQLStatementParser.NULL, 0); }
		public CommentTextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commentText; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCommentText(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCommentText(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCommentText(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommentTextContext commentText() throws RecognitionException {
		CommentTextContext _localctx = new CommentTextContext(_ctx, getState());
		enterRule(_localctx, 1152, RULE_commentText);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8621);
			_la = _input.LA(1);
			if ( !(_la==NULL || _la==STRING_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateAccessMethodContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode ACCESS() { return getToken(PostgreSQLStatementParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(PostgreSQLStatementParser.METHOD, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(PostgreSQLStatementParser.TYPE, 0); }
		public TerminalNode HANDLER() { return getToken(PostgreSQLStatementParser.HANDLER, 0); }
		public HandlerNameContext handlerName() {
			return getRuleContext(HandlerNameContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(PostgreSQLStatementParser.INDEX, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public CreateAccessMethodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createAccessMethod; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateAccessMethod(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateAccessMethod(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateAccessMethod(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateAccessMethodContext createAccessMethod() throws RecognitionException {
		CreateAccessMethodContext _localctx = new CreateAccessMethodContext(_ctx, getState());
		enterRule(_localctx, 1154, RULE_createAccessMethod);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8623);
			match(CREATE);
			setState(8624);
			match(ACCESS);
			setState(8625);
			match(METHOD);
			setState(8626);
			name();
			setState(8627);
			match(TYPE);
			setState(8628);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==INDEX) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8629);
			match(HANDLER);
			setState(8630);
			handlerName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateAggregateContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLStatementParser.AGGREGATE, 0); }
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public AggrArgsContext aggrArgs() {
			return getRuleContext(AggrArgsContext.class,0);
		}
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public OldAggrDefinitionContext oldAggrDefinition() {
			return getRuleContext(OldAggrDefinitionContext.class,0);
		}
		public TerminalNode OR() { return getToken(PostgreSQLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLStatementParser.REPLACE, 0); }
		public CreateAggregateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createAggregate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateAggregate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateAggregate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateAggregate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateAggregateContext createAggregate() throws RecognitionException {
		CreateAggregateContext _localctx = new CreateAggregateContext(_ctx, getState());
		enterRule(_localctx, 1156, RULE_createAggregate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8632);
			match(CREATE);
			setState(8635);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(8633);
				match(OR);
				setState(8634);
				match(REPLACE);
				}
			}

			setState(8637);
			match(AGGREGATE);
			setState(8638);
			funcName();
			setState(8643);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,793,_ctx) ) {
			case 1:
				{
				setState(8639);
				aggrArgs();
				setState(8640);
				definition();
				}
				break;
			case 2:
				{
				setState(8642);
				oldAggrDefinition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OldAggrDefinitionContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public OldAggrListContext oldAggrList() {
			return getRuleContext(OldAggrListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public OldAggrDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oldAggrDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOldAggrDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOldAggrDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOldAggrDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OldAggrDefinitionContext oldAggrDefinition() throws RecognitionException {
		OldAggrDefinitionContext _localctx = new OldAggrDefinitionContext(_ctx, getState());
		enterRule(_localctx, 1158, RULE_oldAggrDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8645);
			match(LP_);
			setState(8646);
			oldAggrList();
			setState(8647);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OldAggrListContext extends ParserRuleContext {
		public List<OldAggrElemContext> oldAggrElem() {
			return getRuleContexts(OldAggrElemContext.class);
		}
		public OldAggrElemContext oldAggrElem(int i) {
			return getRuleContext(OldAggrElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public OldAggrListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oldAggrList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOldAggrList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOldAggrList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOldAggrList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OldAggrListContext oldAggrList() throws RecognitionException {
		OldAggrListContext _localctx = new OldAggrListContext(_ctx, getState());
		enterRule(_localctx, 1160, RULE_oldAggrList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8649);
			oldAggrElem();
			setState(8654);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(8650);
				match(COMMA_);
				setState(8651);
				oldAggrElem();
				}
				}
				setState(8656);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OldAggrElemContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(PostgreSQLStatementParser.EQ_, 0); }
		public DefArgContext defArg() {
			return getRuleContext(DefArgContext.class,0);
		}
		public OldAggrElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oldAggrElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOldAggrElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOldAggrElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOldAggrElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OldAggrElemContext oldAggrElem() throws RecognitionException {
		OldAggrElemContext _localctx = new OldAggrElemContext(_ctx, getState());
		enterRule(_localctx, 1162, RULE_oldAggrElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8657);
			identifier();
			setState(8658);
			match(EQ_);
			setState(8659);
			defArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateCastContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode CAST() { return getToken(PostgreSQLStatementParser.CAST, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public List<TypeNameContext> typeName() {
			return getRuleContexts(TypeNameContext.class);
		}
		public TypeNameContext typeName(int i) {
			return getRuleContext(TypeNameContext.class,i);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLStatementParser.FUNCTION, 0); }
		public FunctionWithArgtypesContext functionWithArgtypes() {
			return getRuleContext(FunctionWithArgtypesContext.class,0);
		}
		public TerminalNode WITHOUT() { return getToken(PostgreSQLStatementParser.WITHOUT, 0); }
		public TerminalNode INOUT() { return getToken(PostgreSQLStatementParser.INOUT, 0); }
		public CastContextContext castContext() {
			return getRuleContext(CastContextContext.class,0);
		}
		public CreateCastContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createCast; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateCast(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateCast(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateCast(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateCastContext createCast() throws RecognitionException {
		CreateCastContext _localctx = new CreateCastContext(_ctx, getState());
		enterRule(_localctx, 1164, RULE_createCast);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8661);
			match(CREATE);
			setState(8662);
			match(CAST);
			setState(8663);
			match(LP_);
			setState(8664);
			typeName();
			setState(8665);
			match(AS);
			setState(8666);
			typeName();
			setState(8667);
			match(RP_);
			setState(8684);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,798,_ctx) ) {
			case 1:
				{
				setState(8668);
				match(WITH);
				setState(8669);
				match(FUNCTION);
				setState(8670);
				functionWithArgtypes();
				setState(8672);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(8671);
					castContext();
					}
				}

				}
				break;
			case 2:
				{
				setState(8674);
				match(WITHOUT);
				setState(8675);
				match(FUNCTION);
				setState(8677);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(8676);
					castContext();
					}
				}

				}
				break;
			case 3:
				{
				setState(8679);
				match(WITH);
				setState(8680);
				match(INOUT);
				setState(8682);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(8681);
					castContext();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CastContextContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public TerminalNode IMPLICIT() { return getToken(PostgreSQLStatementParser.IMPLICIT, 0); }
		public TerminalNode ASSIGNMENT() { return getToken(PostgreSQLStatementParser.ASSIGNMENT, 0); }
		public CastContextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castContext; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCastContext(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCastContext(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCastContext(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CastContextContext castContext() throws RecognitionException {
		CastContextContext _localctx = new CastContextContext(_ctx, getState());
		enterRule(_localctx, 1166, RULE_castContext);
		try {
			setState(8690);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,799,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8686);
				match(AS);
				setState(8687);
				match(IMPLICIT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8688);
				match(AS);
				setState(8689);
				match(ASSIGNMENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateCollationContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLStatementParser.COLLATION, 0); }
		public List<AnyNameContext> anyName() {
			return getRuleContexts(AnyNameContext.class);
		}
		public AnyNameContext anyName(int i) {
			return getRuleContext(AnyNameContext.class,i);
		}
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateCollationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createCollation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateCollation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateCollation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateCollation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateCollationContext createCollation() throws RecognitionException {
		CreateCollationContext _localctx = new CreateCollationContext(_ctx, getState());
		enterRule(_localctx, 1168, RULE_createCollation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8692);
			match(CREATE);
			setState(8693);
			match(COLLATION);
			setState(8695);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,800,_ctx) ) {
			case 1:
				{
				setState(8694);
				ifNotExists();
				}
				break;
			}
			setState(8704);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,801,_ctx) ) {
			case 1:
				{
				setState(8697);
				anyName();
				setState(8698);
				definition();
				}
				break;
			case 2:
				{
				setState(8700);
				anyName();
				setState(8701);
				match(FROM);
				setState(8702);
				anyName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateConversionContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode CONVERSION() { return getToken(PostgreSQLStatementParser.CONVERSION, 0); }
		public List<AnyNameContext> anyName() {
			return getRuleContexts(AnyNameContext.class);
		}
		public AnyNameContext anyName(int i) {
			return getRuleContext(AnyNameContext.class,i);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public List<TerminalNode> STRING_() { return getTokens(PostgreSQLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(PostgreSQLStatementParser.STRING_, i);
		}
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public CreateConversionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createConversion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateConversion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateConversion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateConversion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateConversionContext createConversion() throws RecognitionException {
		CreateConversionContext _localctx = new CreateConversionContext(_ctx, getState());
		enterRule(_localctx, 1170, RULE_createConversion);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8706);
			match(CREATE);
			setState(8708);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(8707);
				match(DEFAULT);
				}
			}

			setState(8710);
			match(CONVERSION);
			setState(8711);
			anyName();
			setState(8712);
			match(FOR);
			setState(8713);
			match(STRING_);
			setState(8714);
			match(TO);
			setState(8715);
			match(STRING_);
			setState(8716);
			match(FROM);
			setState(8717);
			anyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateDomainContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode DOMAIN() { return getToken(PostgreSQLStatementParser.DOMAIN, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public ColQualListContext colQualList() {
			return getRuleContext(ColQualListContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public CreateDomainContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDomain; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateDomain(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateDomain(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateDomain(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDomainContext createDomain() throws RecognitionException {
		CreateDomainContext _localctx = new CreateDomainContext(_ctx, getState());
		enterRule(_localctx, 1172, RULE_createDomain);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8719);
			match(CREATE);
			setState(8720);
			match(DOMAIN);
			setState(8721);
			anyName();
			setState(8723);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(8722);
				match(AS);
				}
			}

			setState(8725);
			typeName();
			setState(8726);
			colQualList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateEventTriggerContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLStatementParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLStatementParser.TRIGGER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(PostgreSQLStatementParser.EXECUTE, 0); }
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLStatementParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLStatementParser.PROCEDURE, 0); }
		public TerminalNode WHEN() { return getToken(PostgreSQLStatementParser.WHEN, 0); }
		public EventTriggerWhenListContext eventTriggerWhenList() {
			return getRuleContext(EventTriggerWhenListContext.class,0);
		}
		public CreateEventTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createEventTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateEventTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateEventTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateEventTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateEventTriggerContext createEventTrigger() throws RecognitionException {
		CreateEventTriggerContext _localctx = new CreateEventTriggerContext(_ctx, getState());
		enterRule(_localctx, 1174, RULE_createEventTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8728);
			match(CREATE);
			setState(8729);
			match(EVENT);
			setState(8730);
			match(TRIGGER);
			setState(8731);
			name();
			setState(8732);
			match(ON);
			setState(8733);
			colLabel();
			setState(8736);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(8734);
				match(WHEN);
				setState(8735);
				eventTriggerWhenList();
				}
			}

			setState(8738);
			match(EXECUTE);
			setState(8739);
			_la = _input.LA(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8740);
			funcName();
			setState(8741);
			match(LP_);
			setState(8742);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EventTriggerWhenListContext extends ParserRuleContext {
		public List<EventTriggerWhenItemContext> eventTriggerWhenItem() {
			return getRuleContexts(EventTriggerWhenItemContext.class);
		}
		public EventTriggerWhenItemContext eventTriggerWhenItem(int i) {
			return getRuleContext(EventTriggerWhenItemContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(PostgreSQLStatementParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(PostgreSQLStatementParser.AND, i);
		}
		public EventTriggerWhenListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_eventTriggerWhenList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterEventTriggerWhenList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitEventTriggerWhenList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitEventTriggerWhenList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EventTriggerWhenListContext eventTriggerWhenList() throws RecognitionException {
		EventTriggerWhenListContext _localctx = new EventTriggerWhenListContext(_ctx, getState());
		enterRule(_localctx, 1176, RULE_eventTriggerWhenList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8744);
			eventTriggerWhenItem();
			setState(8749);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AND) {
				{
				{
				setState(8745);
				match(AND);
				setState(8746);
				eventTriggerWhenItem();
				}
				}
				setState(8751);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EventTriggerWhenItemContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode IN() { return getToken(PostgreSQLStatementParser.IN, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public EventTriggerValueListContext eventTriggerValueList() {
			return getRuleContext(EventTriggerValueListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public EventTriggerWhenItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_eventTriggerWhenItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterEventTriggerWhenItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitEventTriggerWhenItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitEventTriggerWhenItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EventTriggerWhenItemContext eventTriggerWhenItem() throws RecognitionException {
		EventTriggerWhenItemContext _localctx = new EventTriggerWhenItemContext(_ctx, getState());
		enterRule(_localctx, 1178, RULE_eventTriggerWhenItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8752);
			colId();
			setState(8753);
			match(IN);
			setState(8754);
			match(LP_);
			setState(8755);
			eventTriggerValueList();
			setState(8756);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EventTriggerValueListContext extends ParserRuleContext {
		public List<TerminalNode> STRING_() { return getTokens(PostgreSQLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(PostgreSQLStatementParser.STRING_, i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public EventTriggerValueListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_eventTriggerValueList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterEventTriggerValueList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitEventTriggerValueList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitEventTriggerValueList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EventTriggerValueListContext eventTriggerValueList() throws RecognitionException {
		EventTriggerValueListContext _localctx = new EventTriggerValueListContext(_ctx, getState());
		enterRule(_localctx, 1180, RULE_eventTriggerValueList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8758);
			match(STRING_);
			setState(8763);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(8759);
				match(COMMA_);
				setState(8760);
				match(STRING_);
				}
				}
				setState(8765);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateExtensionContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLStatementParser.EXTENSION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CreateExtensionOptListContext createExtensionOptList() {
			return getRuleContext(CreateExtensionOptListContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public CreateExtensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createExtension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateExtension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateExtension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateExtension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateExtensionContext createExtension() throws RecognitionException {
		CreateExtensionContext _localctx = new CreateExtensionContext(_ctx, getState());
		enterRule(_localctx, 1182, RULE_createExtension);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8766);
			match(CREATE);
			setState(8767);
			match(EXTENSION);
			setState(8769);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,807,_ctx) ) {
			case 1:
				{
				setState(8768);
				ifNotExists();
				}
				break;
			}
			setState(8771);
			name();
			setState(8773);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(8772);
				match(WITH);
				}
			}

			setState(8775);
			createExtensionOptList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateExtensionOptListContext extends ParserRuleContext {
		public List<CreateExtensionOptItemContext> createExtensionOptItem() {
			return getRuleContexts(CreateExtensionOptItemContext.class);
		}
		public CreateExtensionOptItemContext createExtensionOptItem(int i) {
			return getRuleContext(CreateExtensionOptItemContext.class,i);
		}
		public CreateExtensionOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createExtensionOptList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateExtensionOptList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateExtensionOptList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateExtensionOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateExtensionOptListContext createExtensionOptList() throws RecognitionException {
		CreateExtensionOptListContext _localctx = new CreateExtensionOptListContext(_ctx, getState());
		enterRule(_localctx, 1184, RULE_createExtensionOptList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8780);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CASCADE || _la==VERSION || _la==SCHEMA || _la==FROM) {
				{
				{
				setState(8777);
				createExtensionOptItem();
				}
				}
				setState(8782);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateExtensionOptItemContext extends ParserRuleContext {
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode VERSION() { return getToken(PostgreSQLStatementParser.VERSION, 0); }
		public NonReservedWordOrSconstContext nonReservedWordOrSconst() {
			return getRuleContext(NonReservedWordOrSconstContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLStatementParser.CASCADE, 0); }
		public CreateExtensionOptItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createExtensionOptItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateExtensionOptItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateExtensionOptItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateExtensionOptItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateExtensionOptItemContext createExtensionOptItem() throws RecognitionException {
		CreateExtensionOptItemContext _localctx = new CreateExtensionOptItemContext(_ctx, getState());
		enterRule(_localctx, 1186, RULE_createExtensionOptItem);
		try {
			setState(8790);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SCHEMA:
				enterOuterAlt(_localctx, 1);
				{
				setState(8783);
				match(SCHEMA);
				setState(8784);
				name();
				}
				break;
			case VERSION:
				enterOuterAlt(_localctx, 2);
				{
				setState(8785);
				match(VERSION);
				setState(8786);
				nonReservedWordOrSconst();
				}
				break;
			case FROM:
				enterOuterAlt(_localctx, 3);
				{
				setState(8787);
				match(FROM);
				setState(8788);
				nonReservedWordOrSconst();
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 4);
				{
				setState(8789);
				match(CASCADE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateForeignDataWrapperContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLStatementParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(PostgreSQLStatementParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLStatementParser.WRAPPER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public FdwOptionsContext fdwOptions() {
			return getRuleContext(FdwOptionsContext.class,0);
		}
		public CreateGenericOptionsContext createGenericOptions() {
			return getRuleContext(CreateGenericOptionsContext.class,0);
		}
		public CreateForeignDataWrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createForeignDataWrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateForeignDataWrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateForeignDataWrapper(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateForeignDataWrapper(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateForeignDataWrapperContext createForeignDataWrapper() throws RecognitionException {
		CreateForeignDataWrapperContext _localctx = new CreateForeignDataWrapperContext(_ctx, getState());
		enterRule(_localctx, 1188, RULE_createForeignDataWrapper);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8792);
			match(CREATE);
			setState(8793);
			match(FOREIGN);
			setState(8794);
			match(DATA);
			setState(8795);
			match(WRAPPER);
			setState(8796);
			name();
			setState(8798);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO || _la==HANDLER || _la==VALIDATOR) {
				{
				setState(8797);
				fdwOptions();
				}
			}

			setState(8801);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(8800);
				createGenericOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateForeignTableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLStatementParser.FOREIGN, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public CreateForeignTableClausesContext createForeignTableClauses() {
			return getRuleContext(CreateForeignTableClausesContext.class,0);
		}
		public CreateForeignTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createForeignTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateForeignTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateForeignTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateForeignTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateForeignTableContext createForeignTable() throws RecognitionException {
		CreateForeignTableContext _localctx = new CreateForeignTableContext(_ctx, getState());
		enterRule(_localctx, 1190, RULE_createForeignTable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8803);
			match(CREATE);
			setState(8804);
			match(FOREIGN);
			setState(8805);
			match(TABLE);
			setState(8806);
			createForeignTableClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateForeignTableClausesContext extends ParserRuleContext {
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public List<TerminalNode> LP_() { return getTokens(PostgreSQLStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(PostgreSQLStatementParser.LP_, i);
		}
		public List<TerminalNode> RP_() { return getTokens(PostgreSQLStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(PostgreSQLStatementParser.RP_, i);
		}
		public TerminalNode SERVER() { return getToken(PostgreSQLStatementParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TableElementListContext tableElementList() {
			return getRuleContext(TableElementListContext.class,0);
		}
		public TerminalNode INHERITS() { return getToken(PostgreSQLStatementParser.INHERITS, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return getRuleContext(QualifiedNameListContext.class,0);
		}
		public CreateGenericOptionsContext createGenericOptions() {
			return getRuleContext(CreateGenericOptionsContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(PostgreSQLStatementParser.PARTITION, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLStatementParser.OF, 0); }
		public PartitionBoundSpecContext partitionBoundSpec() {
			return getRuleContext(PartitionBoundSpecContext.class,0);
		}
		public TypedTableElementListContext typedTableElementList() {
			return getRuleContext(TypedTableElementListContext.class,0);
		}
		public CreateForeignTableClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createForeignTableClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateForeignTableClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateForeignTableClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateForeignTableClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateForeignTableClausesContext createForeignTableClauses() throws RecognitionException {
		CreateForeignTableClausesContext _localctx = new CreateForeignTableClausesContext(_ctx, getState());
		enterRule(_localctx, 1192, RULE_createForeignTableClauses);
		int _la;
		try {
			setState(8848);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,820,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8809);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,813,_ctx) ) {
				case 1:
					{
					setState(8808);
					ifNotExists();
					}
					break;
				}
				setState(8811);
				qualifiedName();
				setState(8812);
				match(LP_);
				setState(8814);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & -1702650932547813375L) != 0) || ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & -36028934466307075L) != 0) || ((((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & 283126353889277L) != 0) || ((((_la - 241)) & ~0x3f) == 0 && ((1L << (_la - 241)) & -545622264849L) != 0) || ((((_la - 305)) & ~0x3f) == 0 && ((1L << (_la - 305)) & -1L) != 0) || ((((_la - 369)) & ~0x3f) == 0 && ((1L << (_la - 369)) & 9895604649983L) != 0) || ((((_la - 437)) & ~0x3f) == 0 && ((1L << (_la - 437)) & 562950017375991L) != 0) || ((((_la - 502)) & ~0x3f) == 0 && ((1L << (_la - 502)) & 1769768130733956617L) != 0) || ((((_la - 566)) & ~0x3f) == 0 && ((1L << (_la - 566)) & 17388555L) != 0)) {
					{
					setState(8813);
					tableElementList();
					}
				}

				setState(8816);
				match(RP_);
				setState(8822);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INHERITS) {
					{
					setState(8817);
					match(INHERITS);
					setState(8818);
					match(LP_);
					setState(8819);
					qualifiedNameList(0);
					setState(8820);
					match(RP_);
					}
				}

				setState(8824);
				match(SERVER);
				setState(8825);
				name();
				setState(8827);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONS) {
					{
					setState(8826);
					createGenericOptions();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8830);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,817,_ctx) ) {
				case 1:
					{
					setState(8829);
					ifNotExists();
					}
					break;
				}
				setState(8832);
				qualifiedName();
				setState(8833);
				match(PARTITION);
				setState(8834);
				match(OF);
				setState(8835);
				qualifiedName();
				setState(8840);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(8836);
					match(LP_);
					setState(8837);
					typedTableElementList();
					setState(8838);
					match(RP_);
					}
				}

				setState(8842);
				partitionBoundSpec();
				setState(8843);
				match(SERVER);
				setState(8844);
				name();
				setState(8846);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONS) {
					{
					setState(8845);
					createGenericOptions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableElementListContext extends ParserRuleContext {
		public List<TableElementContext> tableElement() {
			return getRuleContexts(TableElementContext.class);
		}
		public TableElementContext tableElement(int i) {
			return getRuleContext(TableElementContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public TableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTableElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTableElementList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTableElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableElementListContext tableElementList() throws RecognitionException {
		TableElementListContext _localctx = new TableElementListContext(_ctx, getState());
		enterRule(_localctx, 1194, RULE_tableElementList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8850);
			tableElement();
			setState(8855);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(8851);
				match(COMMA_);
				setState(8852);
				tableElement();
				}
				}
				setState(8857);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableElementContext extends ParserRuleContext {
		public ColumnDefContext columnDef() {
			return getRuleContext(ColumnDefContext.class,0);
		}
		public TableLikeClauseContext tableLikeClause() {
			return getRuleContext(TableLikeClauseContext.class,0);
		}
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTableElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTableElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTableElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableElementContext tableElement() throws RecognitionException {
		TableElementContext _localctx = new TableElementContext(_ctx, getState());
		enterRule(_localctx, 1196, RULE_tableElement);
		try {
			setState(8861);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,822,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8858);
				columnDef();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8859);
				tableLikeClause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8860);
				tableConstraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableLikeClauseContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(PostgreSQLStatementParser.LIKE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TableLikeOptionListContext tableLikeOptionList() {
			return getRuleContext(TableLikeOptionListContext.class,0);
		}
		public TableLikeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableLikeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTableLikeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTableLikeClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTableLikeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableLikeClauseContext tableLikeClause() throws RecognitionException {
		TableLikeClauseContext _localctx = new TableLikeClauseContext(_ctx, getState());
		enterRule(_localctx, 1198, RULE_tableLikeClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8863);
			match(LIKE);
			setState(8864);
			qualifiedName();
			setState(8865);
			tableLikeOptionList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableLikeOptionListContext extends ParserRuleContext {
		public TableLikeOptionListContext tableLikeOptionList() {
			return getRuleContext(TableLikeOptionListContext.class,0);
		}
		public TableLikeOptionContext tableLikeOption() {
			return getRuleContext(TableLikeOptionContext.class,0);
		}
		public TerminalNode INCLUDING() { return getToken(PostgreSQLStatementParser.INCLUDING, 0); }
		public TerminalNode EXCLUDING() { return getToken(PostgreSQLStatementParser.EXCLUDING, 0); }
		public TableLikeOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableLikeOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTableLikeOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTableLikeOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTableLikeOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableLikeOptionListContext tableLikeOptionList() throws RecognitionException {
		return tableLikeOptionList(0);
	}

	private TableLikeOptionListContext tableLikeOptionList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TableLikeOptionListContext _localctx = new TableLikeOptionListContext(_ctx, _parentState);
		TableLikeOptionListContext _prevctx = _localctx;
		int _startState = 1200;
		enterRecursionRule(_localctx, 1200, RULE_tableLikeOptionList, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(8873);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,823,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TableLikeOptionListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_tableLikeOptionList);
					setState(8868);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(8869);
					_la = _input.LA(1);
					if ( !(_la==EXCLUDING || _la==INCLUDING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(8870);
					tableLikeOption();
					}
					} 
				}
				setState(8875);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,823,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableLikeOptionContext extends ParserRuleContext {
		public TerminalNode COMMENTS() { return getToken(PostgreSQLStatementParser.COMMENTS, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PostgreSQLStatementParser.CONSTRAINTS, 0); }
		public TerminalNode DEFAULTS() { return getToken(PostgreSQLStatementParser.DEFAULTS, 0); }
		public TerminalNode IDENTITY() { return getToken(PostgreSQLStatementParser.IDENTITY, 0); }
		public TerminalNode GENERATED() { return getToken(PostgreSQLStatementParser.GENERATED, 0); }
		public TerminalNode INDEXES() { return getToken(PostgreSQLStatementParser.INDEXES, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLStatementParser.STATISTICS, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLStatementParser.STORAGE, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TableLikeOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableLikeOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTableLikeOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTableLikeOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTableLikeOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableLikeOptionContext tableLikeOption() throws RecognitionException {
		TableLikeOptionContext _localctx = new TableLikeOptionContext(_ctx, getState());
		enterRule(_localctx, 1202, RULE_tableLikeOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8876);
			_la = _input.LA(1);
			if ( !(((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & 299067439841281L) != 0) || _la==STATISTICS || _la==STORAGE || _la==ALL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateFunctionContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLStatementParser.FUNCTION, 0); }
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public FuncArgsWithDefaultsContext funcArgsWithDefaults() {
			return getRuleContext(FuncArgsWithDefaultsContext.class,0);
		}
		public TerminalNode RETURNS() { return getToken(PostgreSQLStatementParser.RETURNS, 0); }
		public FuncReturnContext funcReturn() {
			return getRuleContext(FuncReturnContext.class,0);
		}
		public CreatefuncOptListContext createfuncOptList() {
			return getRuleContext(CreatefuncOptListContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TableFuncColumnListContext tableFuncColumnList() {
			return getRuleContext(TableFuncColumnListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode OR() { return getToken(PostgreSQLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLStatementParser.REPLACE, 0); }
		public CreateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionContext createFunction() throws RecognitionException {
		CreateFunctionContext _localctx = new CreateFunctionContext(_ctx, getState());
		enterRule(_localctx, 1204, RULE_createFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8878);
			match(CREATE);
			setState(8881);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(8879);
				match(OR);
				setState(8880);
				match(REPLACE);
				}
			}

			setState(8883);
			match(FUNCTION);
			setState(8884);
			funcName();
			setState(8885);
			funcArgsWithDefaults();
			setState(8898);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,825,_ctx) ) {
			case 1:
				{
				setState(8886);
				match(RETURNS);
				setState(8887);
				funcReturn();
				setState(8888);
				createfuncOptList();
				}
				break;
			case 2:
				{
				setState(8890);
				match(RETURNS);
				setState(8891);
				match(TABLE);
				setState(8892);
				match(LP_);
				setState(8893);
				tableFuncColumnList();
				setState(8894);
				match(RP_);
				setState(8895);
				createfuncOptList();
				}
				break;
			case 3:
				{
				setState(8897);
				createfuncOptList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableFuncColumnListContext extends ParserRuleContext {
		public List<TableFuncColumnContext> tableFuncColumn() {
			return getRuleContexts(TableFuncColumnContext.class);
		}
		public TableFuncColumnContext tableFuncColumn(int i) {
			return getRuleContext(TableFuncColumnContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public TableFuncColumnListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFuncColumnList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTableFuncColumnList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTableFuncColumnList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTableFuncColumnList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFuncColumnListContext tableFuncColumnList() throws RecognitionException {
		TableFuncColumnListContext _localctx = new TableFuncColumnListContext(_ctx, getState());
		enterRule(_localctx, 1206, RULE_tableFuncColumnList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8900);
			tableFuncColumn();
			setState(8905);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(8901);
				match(COMMA_);
				setState(8902);
				tableFuncColumn();
				}
				}
				setState(8907);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableFuncColumnContext extends ParserRuleContext {
		public ParamNameContext paramName() {
			return getRuleContext(ParamNameContext.class,0);
		}
		public FuncTypeContext funcType() {
			return getRuleContext(FuncTypeContext.class,0);
		}
		public TableFuncColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFuncColumn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTableFuncColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTableFuncColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTableFuncColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFuncColumnContext tableFuncColumn() throws RecognitionException {
		TableFuncColumnContext _localctx = new TableFuncColumnContext(_ctx, getState());
		enterRule(_localctx, 1208, RULE_tableFuncColumn);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8908);
			paramName();
			setState(8909);
			funcType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatefuncOptListContext extends ParserRuleContext {
		public List<CreatefuncOptItemContext> createfuncOptItem() {
			return getRuleContexts(CreatefuncOptItemContext.class);
		}
		public CreatefuncOptItemContext createfuncOptItem(int i) {
			return getRuleContext(CreatefuncOptItemContext.class,i);
		}
		public CreatefuncOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createfuncOptList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreatefuncOptList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreatefuncOptList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreatefuncOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatefuncOptListContext createfuncOptList() throws RecognitionException {
		CreatefuncOptListContext _localctx = new CreatefuncOptListContext(_ctx, getState());
		enterRule(_localctx, 1210, RULE_createfuncOptList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8912); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(8911);
				createfuncOptItem();
				}
				}
				setState(8914); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & 17592454479873L) != 0) || _la==RESET || _la==SECURITY || ((((_la - 298)) & ~0x3f) == 0 && ((1L << (_la - 298)) & 1099513200645L) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & -9223372036853594015L) != 0) || _la==AS || _la==NOT || _la==WINDOW );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatefuncOptItemContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public FuncAsContext funcAs() {
			return getRuleContext(FuncAsContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLStatementParser.LANGUAGE, 0); }
		public NonReservedWordOrSconstContext nonReservedWordOrSconst() {
			return getRuleContext(NonReservedWordOrSconstContext.class,0);
		}
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLStatementParser.TRANSFORM, 0); }
		public TransformTypeListContext transformTypeList() {
			return getRuleContext(TransformTypeListContext.class,0);
		}
		public TerminalNode WINDOW() { return getToken(PostgreSQLStatementParser.WINDOW, 0); }
		public CommonFuncOptItemContext commonFuncOptItem() {
			return getRuleContext(CommonFuncOptItemContext.class,0);
		}
		public CreatefuncOptItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createfuncOptItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreatefuncOptItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreatefuncOptItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreatefuncOptItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatefuncOptItemContext createfuncOptItem() throws RecognitionException {
		CreatefuncOptItemContext _localctx = new CreatefuncOptItemContext(_ctx, getState());
		enterRule(_localctx, 1212, RULE_createfuncOptItem);
		try {
			setState(8924);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
				enterOuterAlt(_localctx, 1);
				{
				setState(8916);
				match(AS);
				setState(8917);
				funcAs();
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(8918);
				match(LANGUAGE);
				setState(8919);
				nonReservedWordOrSconst();
				}
				break;
			case TRANSFORM:
				enterOuterAlt(_localctx, 3);
				{
				setState(8920);
				match(TRANSFORM);
				setState(8921);
				transformTypeList();
				}
				break;
			case WINDOW:
				enterOuterAlt(_localctx, 4);
				{
				setState(8922);
				match(WINDOW);
				}
				break;
			case ROWS:
			case EXTERNAL:
			case RESET:
			case SECURITY:
			case COST:
			case CALLED:
			case PARALLEL:
			case LEAKPROOF:
			case IMMUTABLE:
			case RETURNS:
			case SUPPORT:
			case STABLE:
			case VOLATILE:
			case STRICT:
			case SET:
			case NOT:
				enterOuterAlt(_localctx, 5);
				{
				setState(8923);
				commonFuncOptItem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransformTypeListContext extends ParserRuleContext {
		public List<TerminalNode> FOR() { return getTokens(PostgreSQLStatementParser.FOR); }
		public TerminalNode FOR(int i) {
			return getToken(PostgreSQLStatementParser.FOR, i);
		}
		public List<TerminalNode> TYPE() { return getTokens(PostgreSQLStatementParser.TYPE); }
		public TerminalNode TYPE(int i) {
			return getToken(PostgreSQLStatementParser.TYPE, i);
		}
		public List<TypeNameContext> typeName() {
			return getRuleContexts(TypeNameContext.class);
		}
		public TypeNameContext typeName(int i) {
			return getRuleContext(TypeNameContext.class,i);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public TransformTypeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transformTypeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTransformTypeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTransformTypeList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTransformTypeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransformTypeListContext transformTypeList() throws RecognitionException {
		TransformTypeListContext _localctx = new TransformTypeListContext(_ctx, getState());
		enterRule(_localctx, 1214, RULE_transformTypeList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8926);
			match(FOR);
			setState(8927);
			match(TYPE);
			setState(8928);
			typeName();
			{
			setState(8929);
			match(COMMA_);
			setState(8930);
			match(FOR);
			setState(8931);
			match(TYPE);
			setState(8932);
			typeName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FuncAsContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<TerminalNode> STRING_() { return getTokens(PostgreSQLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(PostgreSQLStatementParser.STRING_, i);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public FuncAsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcAs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterFuncAs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitFuncAs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitFuncAs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncAsContext funcAs() throws RecognitionException {
		FuncAsContext _localctx = new FuncAsContext(_ctx, getState());
		enterRule(_localctx, 1216, RULE_funcAs);
		try {
			setState(8941);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNICODE_ESCAPE:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case XML:
			case JSON:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case PARAM:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case NATIONAL:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(8934);
				identifier();
				}
				break;
			case STRING_:
				enterOuterAlt(_localctx, 2);
				{
				setState(8935);
				match(STRING_);
				setState(8939);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COMMA_:
					{
					setState(8936);
					match(COMMA_);
					setState(8937);
					identifier();
					}
					break;
				case STRING_:
					{
					setState(8938);
					match(STRING_);
					}
					break;
				case EOF:
				case SEMI_:
				case ROWS:
				case EXTERNAL:
				case LANGUAGE:
				case RESET:
				case SECURITY:
				case COST:
				case CALLED:
				case PARALLEL:
				case LEAKPROOF:
				case IMMUTABLE:
				case RETURNS:
				case SUPPORT:
				case STABLE:
				case TRANSFORM:
				case VOLATILE:
				case STRICT:
				case SET:
				case AS:
				case NOT:
				case WINDOW:
					break;
				default:
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FuncReturnContext extends ParserRuleContext {
		public FuncTypeContext funcType() {
			return getRuleContext(FuncTypeContext.class,0);
		}
		public FuncReturnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcReturn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterFuncReturn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitFuncReturn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitFuncReturn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncReturnContext funcReturn() throws RecognitionException {
		FuncReturnContext _localctx = new FuncReturnContext(_ctx, getState());
		enterRule(_localctx, 1218, RULE_funcReturn);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8943);
			funcType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FuncArgsWithDefaultsContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public FuncArgsWithDefaultsListContext funcArgsWithDefaultsList() {
			return getRuleContext(FuncArgsWithDefaultsListContext.class,0);
		}
		public FuncArgsWithDefaultsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcArgsWithDefaults; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterFuncArgsWithDefaults(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitFuncArgsWithDefaults(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitFuncArgsWithDefaults(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncArgsWithDefaultsContext funcArgsWithDefaults() throws RecognitionException {
		FuncArgsWithDefaultsContext _localctx = new FuncArgsWithDefaultsContext(_ctx, getState());
		enterRule(_localctx, 1220, RULE_funcArgsWithDefaults);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8945);
			match(LP_);
			setState(8947);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & -1630593372836069375L) != 0) || ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & -36028934466307075L) != 0) || ((((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & -9220696338836750339L) != 0) || ((((_la - 241)) & ~0x3f) == 0 && ((1L << (_la - 241)) & -545604504593L) != 0) || ((((_la - 305)) & ~0x3f) == 0 && ((1L << (_la - 305)) & -1L) != 0) || ((((_la - 369)) & ~0x3f) == 0 && ((1L << (_la - 369)) & 70368744177663L) != 0) || ((((_la - 437)) & ~0x3f) == 0 && ((1L << (_la - 437)) & 4684341609415368439L) != 0) || ((((_la - 502)) & ~0x3f) == 0 && ((1L << (_la - 502)) & 2305696486391676425L) != 0) || ((((_la - 566)) & ~0x3f) == 0 && ((1L << (_la - 566)) & 18568207L) != 0)) {
				{
				setState(8946);
				funcArgsWithDefaultsList();
				}
			}

			setState(8949);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FuncArgsWithDefaultsListContext extends ParserRuleContext {
		public List<FuncArgWithDefaultContext> funcArgWithDefault() {
			return getRuleContexts(FuncArgWithDefaultContext.class);
		}
		public FuncArgWithDefaultContext funcArgWithDefault(int i) {
			return getRuleContext(FuncArgWithDefaultContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public FuncArgsWithDefaultsListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcArgsWithDefaultsList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterFuncArgsWithDefaultsList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitFuncArgsWithDefaultsList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitFuncArgsWithDefaultsList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncArgsWithDefaultsListContext funcArgsWithDefaultsList() throws RecognitionException {
		FuncArgsWithDefaultsListContext _localctx = new FuncArgsWithDefaultsListContext(_ctx, getState());
		enterRule(_localctx, 1222, RULE_funcArgsWithDefaultsList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8951);
			funcArgWithDefault();
			setState(8956);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(8952);
				match(COMMA_);
				setState(8953);
				funcArgWithDefault();
				}
				}
				setState(8958);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FuncArgWithDefaultContext extends ParserRuleContext {
		public FuncArgContext funcArg() {
			return getRuleContext(FuncArgContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(PostgreSQLStatementParser.EQ_, 0); }
		public FuncArgWithDefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcArgWithDefault; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterFuncArgWithDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitFuncArgWithDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitFuncArgWithDefault(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncArgWithDefaultContext funcArgWithDefault() throws RecognitionException {
		FuncArgWithDefaultContext _localctx = new FuncArgWithDefaultContext(_ctx, getState());
		enterRule(_localctx, 1224, RULE_funcArgWithDefault);
		try {
			setState(8968);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,833,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8959);
				funcArg();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8960);
				funcArg();
				setState(8961);
				match(DEFAULT);
				setState(8962);
				aExpr(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8964);
				funcArg();
				setState(8965);
				match(EQ_);
				setState(8966);
				aExpr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateLanguageContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLStatementParser.LANGUAGE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OR() { return getToken(PostgreSQLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLStatementParser.REPLACE, 0); }
		public TerminalNode TRUSTED() { return getToken(PostgreSQLStatementParser.TRUSTED, 0); }
		public TerminalNode PROCEDURAL() { return getToken(PostgreSQLStatementParser.PROCEDURAL, 0); }
		public TerminalNode HANDLER() { return getToken(PostgreSQLStatementParser.HANDLER, 0); }
		public List<HandlerNameContext> handlerName() {
			return getRuleContexts(HandlerNameContext.class);
		}
		public HandlerNameContext handlerName(int i) {
			return getRuleContext(HandlerNameContext.class,i);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TransformElementListContext transformElementList() {
			return getRuleContext(TransformElementListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode INLINE() { return getToken(PostgreSQLStatementParser.INLINE, 0); }
		public ValidatorClauseContext validatorClause() {
			return getRuleContext(ValidatorClauseContext.class,0);
		}
		public CreateLanguageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLanguage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateLanguage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateLanguage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateLanguage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateLanguageContext createLanguage() throws RecognitionException {
		CreateLanguageContext _localctx = new CreateLanguageContext(_ctx, getState());
		enterRule(_localctx, 1226, RULE_createLanguage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8970);
			match(CREATE);
			setState(8973);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(8971);
				match(OR);
				setState(8972);
				match(REPLACE);
				}
			}

			setState(8976);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TRUSTED) {
				{
				setState(8975);
				match(TRUSTED);
				}
			}

			setState(8979);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROCEDURAL) {
				{
				setState(8978);
				match(PROCEDURAL);
				}
			}

			setState(8981);
			match(LANGUAGE);
			setState(8982);
			name();
			setState(8996);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HANDLER:
				{
				setState(8983);
				match(HANDLER);
				setState(8984);
				handlerName();
				setState(8987);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INLINE) {
					{
					setState(8985);
					match(INLINE);
					setState(8986);
					handlerName();
					}
				}

				setState(8990);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO || _la==VALIDATOR) {
					{
					setState(8989);
					validatorClause();
					}
				}

				}
				break;
			case LP_:
				{
				setState(8992);
				match(LP_);
				setState(8993);
				transformElementList();
				setState(8994);
				match(RP_);
				}
				break;
			case EOF:
			case SEMI_:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransformElementListContext extends ParserRuleContext {
		public List<TerminalNode> FROM() { return getTokens(PostgreSQLStatementParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(PostgreSQLStatementParser.FROM, i);
		}
		public List<TerminalNode> SQL() { return getTokens(PostgreSQLStatementParser.SQL); }
		public TerminalNode SQL(int i) {
			return getToken(PostgreSQLStatementParser.SQL, i);
		}
		public List<TerminalNode> WITH() { return getTokens(PostgreSQLStatementParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(PostgreSQLStatementParser.WITH, i);
		}
		public List<TerminalNode> FUNCTION() { return getTokens(PostgreSQLStatementParser.FUNCTION); }
		public TerminalNode FUNCTION(int i) {
			return getToken(PostgreSQLStatementParser.FUNCTION, i);
		}
		public List<FunctionWithArgtypesContext> functionWithArgtypes() {
			return getRuleContexts(FunctionWithArgtypesContext.class);
		}
		public FunctionWithArgtypesContext functionWithArgtypes(int i) {
			return getRuleContext(FunctionWithArgtypesContext.class,i);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TransformElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transformElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTransformElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTransformElementList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTransformElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransformElementListContext transformElementList() throws RecognitionException {
		TransformElementListContext _localctx = new TransformElementListContext(_ctx, getState());
		enterRule(_localctx, 1228, RULE_transformElementList);
		int _la;
		try {
			setState(9015);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,840,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8998);
				match(FROM);
				setState(8999);
				match(SQL);
				setState(9000);
				match(WITH);
				setState(9001);
				match(FUNCTION);
				setState(9002);
				functionWithArgtypes();
				setState(9003);
				match(COMMA_);
				setState(9004);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==TO) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9005);
				match(SQL);
				setState(9006);
				match(WITH);
				setState(9007);
				match(FUNCTION);
				setState(9008);
				functionWithArgtypes();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9010);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==TO) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9011);
				match(SQL);
				setState(9012);
				match(WITH);
				setState(9013);
				match(FUNCTION);
				setState(9014);
				functionWithArgtypes();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ValidatorClauseContext extends ParserRuleContext {
		public TerminalNode VALIDATOR() { return getToken(PostgreSQLStatementParser.VALIDATOR, 0); }
		public HandlerNameContext handlerName() {
			return getRuleContext(HandlerNameContext.class,0);
		}
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public ValidatorClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_validatorClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterValidatorClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitValidatorClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitValidatorClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValidatorClauseContext validatorClause() throws RecognitionException {
		ValidatorClauseContext _localctx = new ValidatorClauseContext(_ctx, getState());
		enterRule(_localctx, 1230, RULE_validatorClause);
		try {
			setState(9021);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALIDATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(9017);
				match(VALIDATOR);
				setState(9018);
				handlerName();
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 2);
				{
				setState(9019);
				match(NO);
				setState(9020);
				match(VALIDATOR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatePolicyContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSQLStatementParser.POLICY, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public RowSecurityCmdContext rowSecurityCmd() {
			return getRuleContext(RowSecurityCmdContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public List<TerminalNode> LP_() { return getTokens(PostgreSQLStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(PostgreSQLStatementParser.LP_, i);
		}
		public List<AExprContext> aExpr() {
			return getRuleContexts(AExprContext.class);
		}
		public AExprContext aExpr(int i) {
			return getRuleContext(AExprContext.class,i);
		}
		public List<TerminalNode> RP_() { return getTokens(PostgreSQLStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(PostgreSQLStatementParser.RP_, i);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSQLStatementParser.CHECK, 0); }
		public CreatePolicyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createPolicy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreatePolicy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreatePolicy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreatePolicy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatePolicyContext createPolicy() throws RecognitionException {
		CreatePolicyContext _localctx = new CreatePolicyContext(_ctx, getState());
		enterRule(_localctx, 1232, RULE_createPolicy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9023);
			match(CREATE);
			setState(9024);
			match(POLICY);
			setState(9025);
			name();
			setState(9026);
			match(ON);
			setState(9027);
			qualifiedName();
			setState(9030);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(9028);
				match(AS);
				setState(9029);
				identifier();
				}
			}

			setState(9034);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(9032);
				match(FOR);
				setState(9033);
				rowSecurityCmd();
				}
			}

			setState(9038);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TO) {
				{
				setState(9036);
				match(TO);
				setState(9037);
				roleList();
				}
			}

			setState(9045);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(9040);
				match(USING);
				setState(9041);
				match(LP_);
				setState(9042);
				aExpr(0);
				setState(9043);
				match(RP_);
				}
			}

			setState(9053);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(9047);
				match(WITH);
				setState(9048);
				match(CHECK);
				setState(9049);
				match(LP_);
				setState(9050);
				aExpr(0);
				setState(9051);
				match(RP_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateProcedureContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLStatementParser.PROCEDURE, 0); }
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public FuncArgsWithDefaultsContext funcArgsWithDefaults() {
			return getRuleContext(FuncArgsWithDefaultsContext.class,0);
		}
		public CreatefuncOptListContext createfuncOptList() {
			return getRuleContext(CreatefuncOptListContext.class,0);
		}
		public TerminalNode OR() { return getToken(PostgreSQLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLStatementParser.REPLACE, 0); }
		public CreateProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateProcedureContext createProcedure() throws RecognitionException {
		CreateProcedureContext _localctx = new CreateProcedureContext(_ctx, getState());
		enterRule(_localctx, 1234, RULE_createProcedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9055);
			match(CREATE);
			setState(9058);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(9056);
				match(OR);
				setState(9057);
				match(REPLACE);
				}
			}

			setState(9060);
			match(PROCEDURE);
			setState(9061);
			funcName();
			setState(9062);
			funcArgsWithDefaults();
			setState(9063);
			createfuncOptList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatePublicationContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLStatementParser.PUBLICATION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public PublicationForTablesContext publicationForTables() {
			return getRuleContext(PublicationForTablesContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public CreatePublicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createPublication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreatePublication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreatePublication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreatePublication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatePublicationContext createPublication() throws RecognitionException {
		CreatePublicationContext _localctx = new CreatePublicationContext(_ctx, getState());
		enterRule(_localctx, 1236, RULE_createPublication);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9065);
			match(CREATE);
			setState(9066);
			match(PUBLICATION);
			setState(9067);
			name();
			setState(9069);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(9068);
				publicationForTables();
				}
			}

			setState(9073);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(9071);
				match(WITH);
				setState(9072);
				definition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PublicationForTablesContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public RelationExprListContext relationExprList() {
			return getRuleContext(RelationExprListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TerminalNode TABLES() { return getToken(PostgreSQLStatementParser.TABLES, 0); }
		public PublicationForTablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_publicationForTables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterPublicationForTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitPublicationForTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitPublicationForTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PublicationForTablesContext publicationForTables() throws RecognitionException {
		PublicationForTablesContext _localctx = new PublicationForTablesContext(_ctx, getState());
		enterRule(_localctx, 1238, RULE_publicationForTables);
		try {
			setState(9081);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,850,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9075);
				match(FOR);
				setState(9076);
				match(TABLE);
				setState(9077);
				relationExprList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9078);
				match(FOR);
				setState(9079);
				match(ALL);
				setState(9080);
				match(TABLES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateRuleContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLStatementParser.RULE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public EventContext event() {
			return getRuleContext(EventContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode DO() { return getToken(PostgreSQLStatementParser.DO, 0); }
		public RuleActionListContext ruleActionList() {
			return getRuleContext(RuleActionListContext.class,0);
		}
		public TerminalNode OR() { return getToken(PostgreSQLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLStatementParser.REPLACE, 0); }
		public TerminalNode WHERE() { return getToken(PostgreSQLStatementParser.WHERE, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode INSTEAD() { return getToken(PostgreSQLStatementParser.INSTEAD, 0); }
		public TerminalNode ALSO() { return getToken(PostgreSQLStatementParser.ALSO, 0); }
		public CreateRuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createRule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateRule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateRule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateRule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateRuleContext createRule() throws RecognitionException {
		CreateRuleContext _localctx = new CreateRuleContext(_ctx, getState());
		enterRule(_localctx, 1240, RULE_createRule);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9083);
			match(CREATE);
			setState(9086);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(9084);
				match(OR);
				setState(9085);
				match(REPLACE);
				}
			}

			setState(9088);
			match(RULE);
			setState(9089);
			name();
			setState(9090);
			match(AS);
			setState(9091);
			match(ON);
			setState(9092);
			event();
			setState(9093);
			match(TO);
			setState(9094);
			qualifiedName();
			setState(9097);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(9095);
				match(WHERE);
				setState(9096);
				aExpr(0);
				}
			}

			setState(9099);
			match(DO);
			setState(9101);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALSO || _la==INSTEAD) {
				{
				setState(9100);
				_la = _input.LA(1);
				if ( !(_la==ALSO || _la==INSTEAD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(9103);
			ruleActionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RuleActionListContext extends ParserRuleContext {
		public TerminalNode NOTHING() { return getToken(PostgreSQLStatementParser.NOTHING, 0); }
		public RuleActionStmtContext ruleActionStmt() {
			return getRuleContext(RuleActionStmtContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public RuleActionMultiContext ruleActionMulti() {
			return getRuleContext(RuleActionMultiContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public RuleActionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleActionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterRuleActionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitRuleActionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitRuleActionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleActionListContext ruleActionList() throws RecognitionException {
		RuleActionListContext _localctx = new RuleActionListContext(_ctx, getState());
		enterRule(_localctx, 1242, RULE_ruleActionList);
		try {
			setState(9111);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,854,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9105);
				match(NOTHING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9106);
				ruleActionStmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9107);
				match(LP_);
				setState(9108);
				ruleActionMulti();
				setState(9109);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RuleActionStmtContext extends ParserRuleContext {
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public InsertContext insert() {
			return getRuleContext(InsertContext.class,0);
		}
		public UpdateContext update() {
			return getRuleContext(UpdateContext.class,0);
		}
		public DeleteContext delete() {
			return getRuleContext(DeleteContext.class,0);
		}
		public NotifyStmtContext notifyStmt() {
			return getRuleContext(NotifyStmtContext.class,0);
		}
		public RuleActionStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleActionStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterRuleActionStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitRuleActionStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitRuleActionStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleActionStmtContext ruleActionStmt() throws RecognitionException {
		RuleActionStmtContext _localctx = new RuleActionStmtContext(_ctx, getState());
		enterRule(_localctx, 1244, RULE_ruleActionStmt);
		try {
			setState(9118);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,855,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9113);
				select();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9114);
				insert();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9115);
				update();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9116);
				delete();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9117);
				notifyStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RuleActionMultiContext extends ParserRuleContext {
		public List<RuleActionStmtContext> ruleActionStmt() {
			return getRuleContexts(RuleActionStmtContext.class);
		}
		public RuleActionStmtContext ruleActionStmt(int i) {
			return getRuleContext(RuleActionStmtContext.class,i);
		}
		public List<TerminalNode> SEMI_() { return getTokens(PostgreSQLStatementParser.SEMI_); }
		public TerminalNode SEMI_(int i) {
			return getToken(PostgreSQLStatementParser.SEMI_, i);
		}
		public RuleActionMultiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleActionMulti; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterRuleActionMulti(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitRuleActionMulti(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitRuleActionMulti(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleActionMultiContext ruleActionMulti() throws RecognitionException {
		RuleActionMultiContext _localctx = new RuleActionMultiContext(_ctx, getState());
		enterRule(_localctx, 1246, RULE_ruleActionMulti);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9121);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_ || ((((_la - 381)) & ~0x3f) == 0 && ((1L << (_la - 381)) & 540431955284459521L) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & 98305L) != 0)) {
				{
				setState(9120);
				ruleActionStmt();
				}
			}

			setState(9129);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==SEMI_) {
				{
				{
				setState(9123);
				match(SEMI_);
				setState(9125);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_ || ((((_la - 381)) & ~0x3f) == 0 && ((1L << (_la - 381)) & 540431955284459521L) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & 98305L) != 0)) {
					{
					setState(9124);
					ruleActionStmt();
					}
				}

				}
				}
				setState(9131);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateTriggerContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLStatementParser.TRIGGER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TriggerActionTimeContext triggerActionTime() {
			return getRuleContext(TriggerActionTimeContext.class,0);
		}
		public TriggerEventsContext triggerEvents() {
			return getRuleContext(TriggerEventsContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(PostgreSQLStatementParser.EXECUTE, 0); }
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLStatementParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLStatementParser.PROCEDURE, 0); }
		public TriggerReferencingContext triggerReferencing() {
			return getRuleContext(TriggerReferencingContext.class,0);
		}
		public TriggerForSpecContext triggerForSpec() {
			return getRuleContext(TriggerForSpecContext.class,0);
		}
		public TriggerWhenContext triggerWhen() {
			return getRuleContext(TriggerWhenContext.class,0);
		}
		public TriggerFuncArgsContext triggerFuncArgs() {
			return getRuleContext(TriggerFuncArgsContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLStatementParser.CONSTRAINT, 0); }
		public ConstraintAttributeSpecContext constraintAttributeSpec() {
			return getRuleContext(ConstraintAttributeSpecContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(PostgreSQLStatementParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLStatementParser.ROW, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public CreateTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTriggerContext createTrigger() throws RecognitionException {
		CreateTriggerContext _localctx = new CreateTriggerContext(_ctx, getState());
		enterRule(_localctx, 1248, RULE_createTrigger);
		int _la;
		try {
			setState(9176);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,864,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9132);
				match(CREATE);
				setState(9133);
				match(TRIGGER);
				setState(9134);
				name();
				setState(9135);
				triggerActionTime();
				setState(9136);
				triggerEvents();
				setState(9137);
				match(ON);
				setState(9138);
				qualifiedName();
				setState(9140);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REFERENCING) {
					{
					setState(9139);
					triggerReferencing();
					}
				}

				setState(9143);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(9142);
					triggerForSpec();
					}
				}

				setState(9146);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(9145);
					triggerWhen();
					}
				}

				setState(9148);
				match(EXECUTE);
				setState(9149);
				_la = _input.LA(1);
				if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9150);
				funcName();
				setState(9151);
				match(LP_);
				setState(9153);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & -468374361263308799L) != 0) || ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & -1L) != 0) || ((((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & -4642651376676867L) != 0) || ((((_la - 241)) & ~0x3f) == 0 && ((1L << (_la - 241)) & -1L) != 0) || ((((_la - 305)) & ~0x3f) == 0 && ((1L << (_la - 305)) & -1L) != 0) || ((((_la - 369)) & ~0x3f) == 0 && ((1L << (_la - 369)) & 70368744177663L) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & -1L) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & -564066647015425L) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & 486539263L) != 0)) {
					{
					setState(9152);
					triggerFuncArgs();
					}
				}

				setState(9155);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9157);
				match(CREATE);
				setState(9158);
				match(CONSTRAINT);
				setState(9159);
				match(TRIGGER);
				setState(9162);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(9160);
					match(FROM);
					setState(9161);
					qualifiedName();
					}
				}

				setState(9164);
				constraintAttributeSpec();
				setState(9165);
				match(FOR);
				setState(9166);
				match(EACH);
				setState(9167);
				match(ROW);
				setState(9168);
				triggerWhen();
				setState(9169);
				match(EXECUTE);
				setState(9170);
				_la = _input.LA(1);
				if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9171);
				funcName();
				setState(9172);
				match(LP_);
				setState(9173);
				triggerFuncArgs();
				setState(9174);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerEventsContext extends ParserRuleContext {
		public List<TriggerOneEventContext> triggerOneEvent() {
			return getRuleContexts(TriggerOneEventContext.class);
		}
		public TriggerOneEventContext triggerOneEvent(int i) {
			return getRuleContext(TriggerOneEventContext.class,i);
		}
		public List<TerminalNode> OR() { return getTokens(PostgreSQLStatementParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PostgreSQLStatementParser.OR, i);
		}
		public TriggerEventsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerEvents; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTriggerEvents(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTriggerEvents(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTriggerEvents(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerEventsContext triggerEvents() throws RecognitionException {
		TriggerEventsContext _localctx = new TriggerEventsContext(_ctx, getState());
		enterRule(_localctx, 1250, RULE_triggerEvents);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9178);
			triggerOneEvent();
			setState(9183);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(9179);
				match(OR);
				setState(9180);
				triggerOneEvent();
				}
				}
				setState(9185);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerOneEventContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(PostgreSQLStatementParser.INSERT, 0); }
		public TerminalNode DELETE() { return getToken(PostgreSQLStatementParser.DELETE, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLStatementParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLStatementParser.OF, 0); }
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public TerminalNode TRUNCATE() { return getToken(PostgreSQLStatementParser.TRUNCATE, 0); }
		public TriggerOneEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerOneEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTriggerOneEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTriggerOneEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTriggerOneEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerOneEventContext triggerOneEvent() throws RecognitionException {
		TriggerOneEventContext _localctx = new TriggerOneEventContext(_ctx, getState());
		enterRule(_localctx, 1252, RULE_triggerOneEvent);
		try {
			setState(9193);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,866,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9186);
				match(INSERT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9187);
				match(DELETE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9188);
				match(UPDATE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9189);
				match(UPDATE);
				setState(9190);
				match(OF);
				setState(9191);
				columnList();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9192);
				match(TRUNCATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerActionTimeContext extends ParserRuleContext {
		public TerminalNode BEFORE() { return getToken(PostgreSQLStatementParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(PostgreSQLStatementParser.AFTER, 0); }
		public TerminalNode INSTEAD() { return getToken(PostgreSQLStatementParser.INSTEAD, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLStatementParser.OF, 0); }
		public TriggerActionTimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerActionTime; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTriggerActionTime(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTriggerActionTime(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTriggerActionTime(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerActionTimeContext triggerActionTime() throws RecognitionException {
		TriggerActionTimeContext _localctx = new TriggerActionTimeContext(_ctx, getState());
		enterRule(_localctx, 1254, RULE_triggerActionTime);
		try {
			setState(9199);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEFORE:
				enterOuterAlt(_localctx, 1);
				{
				setState(9195);
				match(BEFORE);
				}
				break;
			case AFTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(9196);
				match(AFTER);
				}
				break;
			case INSTEAD:
				enterOuterAlt(_localctx, 3);
				{
				setState(9197);
				match(INSTEAD);
				setState(9198);
				match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerFuncArgsContext extends ParserRuleContext {
		public List<TriggerFuncArgContext> triggerFuncArg() {
			return getRuleContexts(TriggerFuncArgContext.class);
		}
		public TriggerFuncArgContext triggerFuncArg(int i) {
			return getRuleContext(TriggerFuncArgContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public TriggerFuncArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerFuncArgs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTriggerFuncArgs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTriggerFuncArgs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTriggerFuncArgs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerFuncArgsContext triggerFuncArgs() throws RecognitionException {
		TriggerFuncArgsContext _localctx = new TriggerFuncArgsContext(_ctx, getState());
		enterRule(_localctx, 1256, RULE_triggerFuncArgs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9201);
			triggerFuncArg();
			setState(9206);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(9202);
				match(COMMA_);
				setState(9203);
				triggerFuncArg();
				}
				}
				setState(9208);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerFuncArgContext extends ParserRuleContext {
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public TriggerFuncArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerFuncArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTriggerFuncArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTriggerFuncArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTriggerFuncArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerFuncArgContext triggerFuncArg() throws RecognitionException {
		TriggerFuncArgContext _localctx = new TriggerFuncArgContext(_ctx, getState());
		enterRule(_localctx, 1258, RULE_triggerFuncArg);
		try {
			setState(9212);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(9209);
				match(NUMBER_);
				}
				break;
			case STRING_:
				enterOuterAlt(_localctx, 2);
				{
				setState(9210);
				match(STRING_);
				}
				break;
			case UNICODE_ESCAPE:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXISTS:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case CHECK:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case REFERENCES:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case USER:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COLLATE:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CURRENT_TIMESTAMP:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRABLE:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INITIALLY:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case ONLY:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case BIT:
			case XML:
			case JSON:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case SYMMETRIC:
			case DOCUMENT:
			case NORMALIZED:
			case ASYMMETRIC:
			case VARIADIC:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case PLACING:
			case RETURNING:
			case LATERAL:
			case NONE:
			case ANALYSE:
			case ANALYZE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case OUT:
			case INOUT:
			case SELECT:
			case INSERT:
			case UPDATE:
			case DELETE:
			case CREATE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case GRANT:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case COLUMN:
			case INDEX:
			case CONSTRAINT:
			case PRIMARY:
			case UNIQUE:
			case FOREIGN:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case INTO:
			case VALUES:
			case WITH:
			case UNION:
			case DISTINCT:
			case CASE:
			case WHEN:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case FROM:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case USING:
			case WHERE:
			case AS:
			case ON:
			case IF:
			case ELSE:
			case THEN:
			case FOR:
			case TO:
			case AND:
			case OR:
			case IS:
			case NOT:
			case NULL:
			case TRUE:
			case FALSE:
			case BETWEEN:
			case IN:
			case ALL:
			case ANY:
			case LIKE:
			case ORDER:
			case GROUP:
			case BY:
			case ASC:
			case DESC:
			case HAVING:
			case LIMIT:
			case OFFSET:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case ARRAY:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case DEFAULT:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DO:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case BOTH:
			case LEADING:
			case TRAILING:
			case COALESCE:
			case INTERSECT:
			case EXCEPT:
			case TIES:
			case FETCH:
			case CUBE:
			case GROUPING:
			case SETS:
			case WINDOW:
			case OTHERS:
			case OVERLAPS:
			case SOME:
			case AT:
			case DEC:
			case END:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 3);
				{
				setState(9211);
				colLabel();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerWhenContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PostgreSQLStatementParser.WHEN, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TriggerWhenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerWhen; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTriggerWhen(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTriggerWhen(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTriggerWhen(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerWhenContext triggerWhen() throws RecognitionException {
		TriggerWhenContext _localctx = new TriggerWhenContext(_ctx, getState());
		enterRule(_localctx, 1260, RULE_triggerWhen);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9214);
			match(WHEN);
			setState(9215);
			match(LP_);
			setState(9216);
			aExpr(0);
			setState(9217);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerForSpecContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLStatementParser.ROW, 0); }
		public TerminalNode STATEMENT() { return getToken(PostgreSQLStatementParser.STATEMENT, 0); }
		public TerminalNode EACH() { return getToken(PostgreSQLStatementParser.EACH, 0); }
		public TriggerForSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerForSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTriggerForSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTriggerForSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTriggerForSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerForSpecContext triggerForSpec() throws RecognitionException {
		TriggerForSpecContext _localctx = new TriggerForSpecContext(_ctx, getState());
		enterRule(_localctx, 1262, RULE_triggerForSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9219);
			match(FOR);
			setState(9221);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EACH) {
				{
				setState(9220);
				match(EACH);
				}
			}

			setState(9223);
			_la = _input.LA(1);
			if ( !(_la==ROW || _la==STATEMENT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerReferencingContext extends ParserRuleContext {
		public TerminalNode REFERENCING() { return getToken(PostgreSQLStatementParser.REFERENCING, 0); }
		public TriggerTransitionsContext triggerTransitions() {
			return getRuleContext(TriggerTransitionsContext.class,0);
		}
		public TriggerReferencingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerReferencing; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTriggerReferencing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTriggerReferencing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTriggerReferencing(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerReferencingContext triggerReferencing() throws RecognitionException {
		TriggerReferencingContext _localctx = new TriggerReferencingContext(_ctx, getState());
		enterRule(_localctx, 1264, RULE_triggerReferencing);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9225);
			match(REFERENCING);
			setState(9226);
			triggerTransitions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerTransitionsContext extends ParserRuleContext {
		public List<TriggerTransitionContext> triggerTransition() {
			return getRuleContexts(TriggerTransitionContext.class);
		}
		public TriggerTransitionContext triggerTransition(int i) {
			return getRuleContext(TriggerTransitionContext.class,i);
		}
		public TriggerTransitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerTransitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTriggerTransitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTriggerTransitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTriggerTransitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerTransitionsContext triggerTransitions() throws RecognitionException {
		TriggerTransitionsContext _localctx = new TriggerTransitionsContext(_ctx, getState());
		enterRule(_localctx, 1266, RULE_triggerTransitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9229); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(9228);
				triggerTransition();
				}
				}
				setState(9231); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==OLD || _la==NEW );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerTransitionContext extends ParserRuleContext {
		public TransitionOldOrNewContext transitionOldOrNew() {
			return getRuleContext(TransitionOldOrNewContext.class,0);
		}
		public TransitionRowOrTableContext transitionRowOrTable() {
			return getRuleContext(TransitionRowOrTableContext.class,0);
		}
		public TransitionRelNameContext transitionRelName() {
			return getRuleContext(TransitionRelNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public TriggerTransitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerTransition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTriggerTransition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTriggerTransition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTriggerTransition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerTransitionContext triggerTransition() throws RecognitionException {
		TriggerTransitionContext _localctx = new TriggerTransitionContext(_ctx, getState());
		enterRule(_localctx, 1268, RULE_triggerTransition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9233);
			transitionOldOrNew();
			setState(9234);
			transitionRowOrTable();
			setState(9236);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(9235);
				match(AS);
				}
			}

			setState(9238);
			transitionRelName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransitionRelNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TransitionRelNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transitionRelName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTransitionRelName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTransitionRelName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTransitionRelName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransitionRelNameContext transitionRelName() throws RecognitionException {
		TransitionRelNameContext _localctx = new TransitionRelNameContext(_ctx, getState());
		enterRule(_localctx, 1270, RULE_transitionRelName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9240);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransitionRowOrTableContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLStatementParser.ROW, 0); }
		public TransitionRowOrTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transitionRowOrTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTransitionRowOrTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTransitionRowOrTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTransitionRowOrTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransitionRowOrTableContext transitionRowOrTable() throws RecognitionException {
		TransitionRowOrTableContext _localctx = new TransitionRowOrTableContext(_ctx, getState());
		enterRule(_localctx, 1272, RULE_transitionRowOrTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9242);
			_la = _input.LA(1);
			if ( !(_la==ROW || _la==TABLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransitionOldOrNewContext extends ParserRuleContext {
		public TerminalNode OLD() { return getToken(PostgreSQLStatementParser.OLD, 0); }
		public TerminalNode NEW() { return getToken(PostgreSQLStatementParser.NEW, 0); }
		public TransitionOldOrNewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transitionOldOrNew; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTransitionOldOrNew(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTransitionOldOrNew(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTransitionOldOrNew(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransitionOldOrNewContext transitionOldOrNew() throws RecognitionException {
		TransitionOldOrNewContext _localctx = new TransitionOldOrNewContext(_ctx, getState());
		enterRule(_localctx, 1274, RULE_transitionOldOrNew);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9244);
			_la = _input.LA(1);
			if ( !(_la==OLD || _la==NEW) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateSequenceContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLStatementParser.SEQUENCE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TempOptionContext tempOption() {
			return getRuleContext(TempOptionContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public SeqOptListContext seqOptList() {
			return getRuleContext(SeqOptListContext.class,0);
		}
		public CreateSequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateSequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateSequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateSequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateSequenceContext createSequence() throws RecognitionException {
		CreateSequenceContext _localctx = new CreateSequenceContext(_ctx, getState());
		enterRule(_localctx, 1276, RULE_createSequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9246);
			match(CREATE);
			setState(9248);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 774056185954305L) != 0) || _la==LOCAL) {
				{
				setState(9247);
				tempOption();
				}
			}

			setState(9250);
			match(SEQUENCE);
			setState(9252);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,874,_ctx) ) {
			case 1:
				{
				setState(9251);
				ifNotExists();
				}
				break;
			}
			setState(9254);
			qualifiedName();
			setState(9256);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & 216190374304024705L) != 0) || ((((_la - 152)) & ~0x3f) == 0 && ((1L << (_la - 152)) & 16897L) != 0) || _la==AS) {
				{
				setState(9255);
				seqOptList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TempOptionContext extends ParserRuleContext {
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLStatementParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLStatementParser.TEMP, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLStatementParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(PostgreSQLStatementParser.GLOBAL, 0); }
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLStatementParser.UNLOGGED, 0); }
		public TempOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tempOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTempOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTempOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTempOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TempOptionContext tempOption() throws RecognitionException {
		TempOptionContext _localctx = new TempOptionContext(_ctx, getState());
		enterRule(_localctx, 1278, RULE_tempOption);
		int _la;
		try {
			setState(9263);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GLOBAL:
			case TEMP:
			case TEMPORARY:
			case LOCAL:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(9259);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL || _la==LOCAL) {
					{
					setState(9258);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==LOCAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9261);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case UNLOGGED:
				enterOuterAlt(_localctx, 2);
				{
				setState(9262);
				match(UNLOGGED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateServerContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLStatementParser.SERVER, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode FOREIGN() { return getToken(PostgreSQLStatementParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(PostgreSQLStatementParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLStatementParser.WRAPPER, 0); }
		public CreateGenericOptionsContext createGenericOptions() {
			return getRuleContext(CreateGenericOptionsContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(PostgreSQLStatementParser.TYPE, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public ForeignServerVersionContext foreignServerVersion() {
			return getRuleContext(ForeignServerVersionContext.class,0);
		}
		public CreateServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateServerContext createServer() throws RecognitionException {
		CreateServerContext _localctx = new CreateServerContext(_ctx, getState());
		enterRule(_localctx, 1280, RULE_createServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9265);
			match(CREATE);
			setState(9266);
			match(SERVER);
			setState(9268);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,878,_ctx) ) {
			case 1:
				{
				setState(9267);
				ifNotExists();
				}
				break;
			}
			setState(9270);
			name();
			setState(9273);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TYPE) {
				{
				setState(9271);
				match(TYPE);
				setState(9272);
				match(STRING_);
				}
			}

			setState(9276);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VERSION) {
				{
				setState(9275);
				foreignServerVersion();
				}
			}

			setState(9278);
			match(FOREIGN);
			setState(9279);
			match(DATA);
			setState(9280);
			match(WRAPPER);
			setState(9281);
			name();
			setState(9282);
			createGenericOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateStatisticsContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLStatementParser.STATISTICS, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public OptNameListContext optNameList() {
			return getRuleContext(OptNameListContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public FromListContext fromList() {
			return getRuleContext(FromListContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateStatisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createStatistics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateStatistics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateStatistics(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateStatistics(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateStatisticsContext createStatistics() throws RecognitionException {
		CreateStatisticsContext _localctx = new CreateStatisticsContext(_ctx, getState());
		enterRule(_localctx, 1282, RULE_createStatistics);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9284);
			match(CREATE);
			setState(9285);
			match(STATISTICS);
			setState(9287);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,881,_ctx) ) {
			case 1:
				{
				setState(9286);
				ifNotExists();
				}
				break;
			}
			setState(9289);
			anyName();
			setState(9290);
			optNameList();
			setState(9291);
			match(ON);
			setState(9292);
			exprList(0);
			setState(9293);
			match(FROM);
			setState(9294);
			fromList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateSubscriptionContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLStatementParser.SUBSCRIPTION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(PostgreSQLStatementParser.CONNECTION, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLStatementParser.PUBLICATION, 0); }
		public PublicationNameListContext publicationNameList() {
			return getRuleContext(PublicationNameListContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public CreateSubscriptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSubscription; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateSubscription(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateSubscription(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateSubscription(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateSubscriptionContext createSubscription() throws RecognitionException {
		CreateSubscriptionContext _localctx = new CreateSubscriptionContext(_ctx, getState());
		enterRule(_localctx, 1284, RULE_createSubscription);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9296);
			match(CREATE);
			setState(9297);
			match(SUBSCRIPTION);
			setState(9298);
			name();
			setState(9299);
			match(CONNECTION);
			setState(9300);
			match(STRING_);
			setState(9301);
			match(PUBLICATION);
			setState(9302);
			publicationNameList();
			setState(9305);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(9303);
				match(WITH);
				setState(9304);
				definition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateTablespaceContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLStatementParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode LOCATION() { return getToken(PostgreSQLStatementParser.LOCATION, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public CreateTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTablespaceContext createTablespace() throws RecognitionException {
		CreateTablespaceContext _localctx = new CreateTablespaceContext(_ctx, getState());
		enterRule(_localctx, 1286, RULE_createTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9307);
			match(CREATE);
			setState(9308);
			match(TABLESPACE);
			setState(9309);
			name();
			setState(9312);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OWNER) {
				{
				setState(9310);
				match(OWNER);
				setState(9311);
				roleSpec();
				}
			}

			setState(9314);
			match(LOCATION);
			setState(9315);
			match(STRING_);
			setState(9318);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(9316);
				match(WITH);
				setState(9317);
				reloptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateTextSearchContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSQLStatementParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLStatementParser.SEARCH, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLStatementParser.CONFIGURATION, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLStatementParser.DICTIONARY, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLStatementParser.PARSER, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLStatementParser.TEMPLATE, 0); }
		public CreateTextSearchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTextSearch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateTextSearch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateTextSearch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateTextSearch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTextSearchContext createTextSearch() throws RecognitionException {
		CreateTextSearchContext _localctx = new CreateTextSearchContext(_ctx, getState());
		enterRule(_localctx, 1288, RULE_createTextSearch);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9320);
			match(CREATE);
			setState(9321);
			match(TEXT);
			setState(9322);
			match(SEARCH);
			setState(9323);
			_la = _input.LA(1);
			if ( !(((((_la - 305)) & ~0x3f) == 0 && ((1L << (_la - 305)) & 17592186044425L) != 0) || _la==TEMPLATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(9324);
			anyName();
			setState(9325);
			definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateTransformContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLStatementParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLStatementParser.LANGUAGE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TransformElementListContext transformElementList() {
			return getRuleContext(TransformElementListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode OR() { return getToken(PostgreSQLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLStatementParser.REPLACE, 0); }
		public CreateTransformContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTransform; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateTransform(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateTransform(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateTransform(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTransformContext createTransform() throws RecognitionException {
		CreateTransformContext _localctx = new CreateTransformContext(_ctx, getState());
		enterRule(_localctx, 1290, RULE_createTransform);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9327);
			match(CREATE);
			setState(9330);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(9328);
				match(OR);
				setState(9329);
				match(REPLACE);
				}
			}

			setState(9332);
			match(TRANSFORM);
			setState(9333);
			match(FOR);
			setState(9334);
			typeName();
			setState(9335);
			match(LANGUAGE);
			setState(9336);
			name();
			setState(9337);
			match(LP_);
			setState(9338);
			transformElementList();
			setState(9339);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateTypeContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode TYPE() { return getToken(PostgreSQLStatementParser.TYPE, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public CreateTypeClausesContext createTypeClauses() {
			return getRuleContext(CreateTypeClausesContext.class,0);
		}
		public CreateTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTypeContext createType() throws RecognitionException {
		CreateTypeContext _localctx = new CreateTypeContext(_ctx, getState());
		enterRule(_localctx, 1292, RULE_createType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9341);
			match(CREATE);
			setState(9342);
			match(TYPE);
			setState(9343);
			anyName();
			setState(9344);
			createTypeClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateTypeClausesContext extends ParserRuleContext {
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TableFuncElementListContext tableFuncElementList() {
			return getRuleContext(TableFuncElementListContext.class,0);
		}
		public TerminalNode ENUM() { return getToken(PostgreSQLStatementParser.ENUM, 0); }
		public EnumValListContext enumValList() {
			return getRuleContext(EnumValListContext.class,0);
		}
		public TerminalNode RANGE() { return getToken(PostgreSQLStatementParser.RANGE, 0); }
		public CreateTypeClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTypeClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateTypeClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateTypeClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateTypeClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTypeClausesContext createTypeClauses() throws RecognitionException {
		CreateTypeClausesContext _localctx = new CreateTypeClausesContext(_ctx, getState());
		enterRule(_localctx, 1294, RULE_createTypeClauses);
		int _la;
		try {
			setState(9365);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,889,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9347);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(9346);
					definition();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9349);
				match(AS);
				setState(9350);
				match(LP_);
				setState(9352);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & -1702650966907551743L) != 0) || ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & -36028934466307075L) != 0) || ((((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & 283126353889277L) != 0) || ((((_la - 241)) & ~0x3f) == 0 && ((1L << (_la - 241)) & -545622264849L) != 0) || ((((_la - 305)) & ~0x3f) == 0 && ((1L << (_la - 305)) & -1L) != 0) || ((((_la - 369)) & ~0x3f) == 0 && ((1L << (_la - 369)) & 9895604649983L) != 0) || ((((_la - 437)) & ~0x3f) == 0 && ((1L << (_la - 437)) & 562950016917239L) != 0) || ((((_la - 505)) & ~0x3f) == 0 && ((1L << (_la - 505)) & 7138750043982826433L) != 0) || ((((_la - 569)) & ~0x3f) == 0 && ((1L << (_la - 569)) & 2173569L) != 0)) {
					{
					setState(9351);
					tableFuncElementList();
					}
				}

				setState(9354);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9355);
				match(AS);
				setState(9356);
				match(ENUM);
				setState(9357);
				match(LP_);
				setState(9359);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STRING_) {
					{
					setState(9358);
					enumValList();
					}
				}

				setState(9361);
				match(RP_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9362);
				match(AS);
				setState(9363);
				match(RANGE);
				setState(9364);
				definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EnumValListContext extends ParserRuleContext {
		public List<TerminalNode> STRING_() { return getTokens(PostgreSQLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(PostgreSQLStatementParser.STRING_, i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public EnumValListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enumValList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterEnumValList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitEnumValList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitEnumValList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EnumValListContext enumValList() throws RecognitionException {
		EnumValListContext _localctx = new EnumValListContext(_ctx, getState());
		enterRule(_localctx, 1296, RULE_enumValList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9367);
			match(STRING_);
			setState(9372);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(9368);
				match(COMMA_);
				setState(9369);
				match(STRING_);
				}
				}
				setState(9374);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateUserMappingContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLStatementParser.USER, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSQLStatementParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public AuthIdentContext authIdent() {
			return getRuleContext(AuthIdentContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PostgreSQLStatementParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CreateGenericOptionsContext createGenericOptions() {
			return getRuleContext(CreateGenericOptionsContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateUserMappingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserMapping; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateUserMapping(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateUserMapping(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateUserMapping(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserMappingContext createUserMapping() throws RecognitionException {
		CreateUserMappingContext _localctx = new CreateUserMappingContext(_ctx, getState());
		enterRule(_localctx, 1298, RULE_createUserMapping);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9375);
			match(CREATE);
			setState(9376);
			match(USER);
			setState(9377);
			match(MAPPING);
			setState(9379);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(9378);
				ifNotExists();
				}
			}

			setState(9381);
			match(FOR);
			setState(9382);
			authIdent();
			setState(9383);
			match(SERVER);
			setState(9384);
			name();
			setState(9385);
			createGenericOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DiscardContext extends ParserRuleContext {
		public TerminalNode DISCARD() { return getToken(PostgreSQLStatementParser.DISCARD, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TerminalNode PLANS() { return getToken(PostgreSQLStatementParser.PLANS, 0); }
		public TerminalNode SEQUENCES() { return getToken(PostgreSQLStatementParser.SEQUENCES, 0); }
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLStatementParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLStatementParser.TEMP, 0); }
		public DiscardContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_discard; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDiscard(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDiscard(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDiscard(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DiscardContext discard() throws RecognitionException {
		DiscardContext _localctx = new DiscardContext(_ctx, getState());
		enterRule(_localctx, 1300, RULE_discard);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9387);
			match(DISCARD);
			setState(9388);
			_la = _input.LA(1);
			if ( !(_la==TEMP || _la==TEMPORARY || _la==PLANS || _la==SEQUENCES || _la==ALL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropAccessMethodContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode ACCESS() { return getToken(PostgreSQLStatementParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(PostgreSQLStatementParser.METHOD, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropAccessMethodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropAccessMethod; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropAccessMethod(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropAccessMethod(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropAccessMethod(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropAccessMethodContext dropAccessMethod() throws RecognitionException {
		DropAccessMethodContext _localctx = new DropAccessMethodContext(_ctx, getState());
		enterRule(_localctx, 1302, RULE_dropAccessMethod);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9390);
			match(DROP);
			setState(9391);
			match(ACCESS);
			setState(9392);
			match(METHOD);
			setState(9394);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,892,_ctx) ) {
			case 1:
				{
				setState(9393);
				ifExists();
				}
				break;
			}
			setState(9396);
			name();
			setState(9398);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9397);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropAggregateContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLStatementParser.AGGREGATE, 0); }
		public AggregateWithArgtypesListContext aggregateWithArgtypesList() {
			return getRuleContext(AggregateWithArgtypesListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropAggregateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropAggregate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropAggregate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropAggregate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropAggregate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropAggregateContext dropAggregate() throws RecognitionException {
		DropAggregateContext _localctx = new DropAggregateContext(_ctx, getState());
		enterRule(_localctx, 1304, RULE_dropAggregate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9400);
			match(DROP);
			setState(9401);
			match(AGGREGATE);
			setState(9403);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,894,_ctx) ) {
			case 1:
				{
				setState(9402);
				ifExists();
				}
				break;
			}
			setState(9405);
			aggregateWithArgtypesList();
			setState(9407);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9406);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AggregateWithArgtypesListContext extends ParserRuleContext {
		public List<AggregateWithArgtypesContext> aggregateWithArgtypes() {
			return getRuleContexts(AggregateWithArgtypesContext.class);
		}
		public AggregateWithArgtypesContext aggregateWithArgtypes(int i) {
			return getRuleContext(AggregateWithArgtypesContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public AggregateWithArgtypesListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateWithArgtypesList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAggregateWithArgtypesList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAggregateWithArgtypesList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAggregateWithArgtypesList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateWithArgtypesListContext aggregateWithArgtypesList() throws RecognitionException {
		AggregateWithArgtypesListContext _localctx = new AggregateWithArgtypesListContext(_ctx, getState());
		enterRule(_localctx, 1306, RULE_aggregateWithArgtypesList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9409);
			aggregateWithArgtypes();
			setState(9414);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(9410);
				match(COMMA_);
				setState(9411);
				aggregateWithArgtypes();
				}
				}
				setState(9416);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropCastContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode CAST() { return getToken(PostgreSQLStatementParser.CAST, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public List<TypeNameContext> typeName() {
			return getRuleContexts(TypeNameContext.class);
		}
		public TypeNameContext typeName(int i) {
			return getRuleContext(TypeNameContext.class,i);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropCastContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropCast; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropCast(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropCast(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropCast(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropCastContext dropCast() throws RecognitionException {
		DropCastContext _localctx = new DropCastContext(_ctx, getState());
		enterRule(_localctx, 1308, RULE_dropCast);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9417);
			match(DROP);
			setState(9418);
			match(CAST);
			setState(9420);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(9419);
				ifExists();
				}
			}

			setState(9422);
			match(LP_);
			setState(9423);
			typeName();
			setState(9424);
			match(AS);
			setState(9425);
			typeName();
			setState(9426);
			match(RP_);
			setState(9428);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9427);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropCollationContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLStatementParser.COLLATION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropCollationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropCollation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropCollation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropCollation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropCollation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropCollationContext dropCollation() throws RecognitionException {
		DropCollationContext _localctx = new DropCollationContext(_ctx, getState());
		enterRule(_localctx, 1310, RULE_dropCollation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9430);
			match(DROP);
			setState(9431);
			match(COLLATION);
			setState(9433);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,899,_ctx) ) {
			case 1:
				{
				setState(9432);
				ifExists();
				}
				break;
			}
			setState(9435);
			name();
			setState(9437);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9436);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropConversionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode CONVERSION() { return getToken(PostgreSQLStatementParser.CONVERSION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropConversionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropConversion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropConversion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropConversion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropConversion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropConversionContext dropConversion() throws RecognitionException {
		DropConversionContext _localctx = new DropConversionContext(_ctx, getState());
		enterRule(_localctx, 1312, RULE_dropConversion);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9439);
			match(DROP);
			setState(9440);
			match(CONVERSION);
			setState(9442);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,901,_ctx) ) {
			case 1:
				{
				setState(9441);
				ifExists();
				}
				break;
			}
			setState(9444);
			name();
			setState(9446);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9445);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropDomainContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode DOMAIN() { return getToken(PostgreSQLStatementParser.DOMAIN, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropDomainContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropDomain; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropDomain(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropDomain(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropDomain(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropDomainContext dropDomain() throws RecognitionException {
		DropDomainContext _localctx = new DropDomainContext(_ctx, getState());
		enterRule(_localctx, 1314, RULE_dropDomain);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9448);
			match(DROP);
			setState(9449);
			match(DOMAIN);
			setState(9451);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,903,_ctx) ) {
			case 1:
				{
				setState(9450);
				ifExists();
				}
				break;
			}
			setState(9453);
			nameList(0);
			setState(9455);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9454);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropEventTriggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLStatementParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLStatementParser.TRIGGER, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropEventTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropEventTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropEventTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropEventTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropEventTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropEventTriggerContext dropEventTrigger() throws RecognitionException {
		DropEventTriggerContext _localctx = new DropEventTriggerContext(_ctx, getState());
		enterRule(_localctx, 1316, RULE_dropEventTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9457);
			match(DROP);
			setState(9458);
			match(EVENT);
			setState(9459);
			match(TRIGGER);
			setState(9461);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,905,_ctx) ) {
			case 1:
				{
				setState(9460);
				ifExists();
				}
				break;
			}
			setState(9463);
			nameList(0);
			setState(9465);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9464);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropExtensionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLStatementParser.EXTENSION, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropExtensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropExtension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropExtension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropExtension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropExtension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropExtensionContext dropExtension() throws RecognitionException {
		DropExtensionContext _localctx = new DropExtensionContext(_ctx, getState());
		enterRule(_localctx, 1318, RULE_dropExtension);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9467);
			match(DROP);
			setState(9468);
			match(EXTENSION);
			setState(9470);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,907,_ctx) ) {
			case 1:
				{
				setState(9469);
				ifExists();
				}
				break;
			}
			setState(9472);
			nameList(0);
			setState(9474);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9473);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropForeignDataWrapperContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLStatementParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(PostgreSQLStatementParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLStatementParser.WRAPPER, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropForeignDataWrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropForeignDataWrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropForeignDataWrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropForeignDataWrapper(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropForeignDataWrapper(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropForeignDataWrapperContext dropForeignDataWrapper() throws RecognitionException {
		DropForeignDataWrapperContext _localctx = new DropForeignDataWrapperContext(_ctx, getState());
		enterRule(_localctx, 1320, RULE_dropForeignDataWrapper);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9476);
			match(DROP);
			setState(9477);
			match(FOREIGN);
			setState(9478);
			match(DATA);
			setState(9479);
			match(WRAPPER);
			setState(9481);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,909,_ctx) ) {
			case 1:
				{
				setState(9480);
				ifExists();
				}
				break;
			}
			setState(9483);
			nameList(0);
			setState(9485);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9484);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropForeignTableContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLStatementParser.FOREIGN, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropForeignTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropForeignTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropForeignTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropForeignTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropForeignTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropForeignTableContext dropForeignTable() throws RecognitionException {
		DropForeignTableContext _localctx = new DropForeignTableContext(_ctx, getState());
		enterRule(_localctx, 1322, RULE_dropForeignTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9487);
			match(DROP);
			setState(9488);
			match(FOREIGN);
			setState(9489);
			match(TABLE);
			setState(9491);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,911,_ctx) ) {
			case 1:
				{
				setState(9490);
				ifExists();
				}
				break;
			}
			setState(9493);
			tableName();
			setState(9498);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(9494);
				match(COMMA_);
				setState(9495);
				tableName();
				}
				}
				setState(9500);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(9502);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9501);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropFunctionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLStatementParser.FUNCTION, 0); }
		public FunctionWithArgtypesListContext functionWithArgtypesList() {
			return getRuleContext(FunctionWithArgtypesListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropFunctionContext dropFunction() throws RecognitionException {
		DropFunctionContext _localctx = new DropFunctionContext(_ctx, getState());
		enterRule(_localctx, 1324, RULE_dropFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9504);
			match(DROP);
			setState(9505);
			match(FUNCTION);
			setState(9507);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,914,_ctx) ) {
			case 1:
				{
				setState(9506);
				ifExists();
				}
				break;
			}
			setState(9509);
			functionWithArgtypesList();
			setState(9511);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9510);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionWithArgtypesListContext extends ParserRuleContext {
		public List<FunctionWithArgtypesContext> functionWithArgtypes() {
			return getRuleContexts(FunctionWithArgtypesContext.class);
		}
		public FunctionWithArgtypesContext functionWithArgtypes(int i) {
			return getRuleContext(FunctionWithArgtypesContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public FunctionWithArgtypesListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionWithArgtypesList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterFunctionWithArgtypesList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitFunctionWithArgtypesList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitFunctionWithArgtypesList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionWithArgtypesListContext functionWithArgtypesList() throws RecognitionException {
		FunctionWithArgtypesListContext _localctx = new FunctionWithArgtypesListContext(_ctx, getState());
		enterRule(_localctx, 1326, RULE_functionWithArgtypesList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9513);
			functionWithArgtypes();
			setState(9518);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(9514);
				match(COMMA_);
				setState(9515);
				functionWithArgtypes();
				}
				}
				setState(9520);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropLanguageContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLStatementParser.LANGUAGE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode PROCEDURAL() { return getToken(PostgreSQLStatementParser.PROCEDURAL, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropLanguageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropLanguage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropLanguage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropLanguage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropLanguage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropLanguageContext dropLanguage() throws RecognitionException {
		DropLanguageContext _localctx = new DropLanguageContext(_ctx, getState());
		enterRule(_localctx, 1328, RULE_dropLanguage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9521);
			match(DROP);
			setState(9523);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROCEDURAL) {
				{
				setState(9522);
				match(PROCEDURAL);
				}
			}

			setState(9525);
			match(LANGUAGE);
			setState(9527);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,918,_ctx) ) {
			case 1:
				{
				setState(9526);
				ifExists();
				}
				break;
			}
			setState(9529);
			name();
			setState(9531);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9530);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropMaterializedViewContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLStatementParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLStatementParser.VIEW, 0); }
		public AnyNameListContext anyNameList() {
			return getRuleContext(AnyNameListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropMaterializedViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropMaterializedView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropMaterializedView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropMaterializedView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropMaterializedView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropMaterializedViewContext dropMaterializedView() throws RecognitionException {
		DropMaterializedViewContext _localctx = new DropMaterializedViewContext(_ctx, getState());
		enterRule(_localctx, 1330, RULE_dropMaterializedView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9533);
			match(DROP);
			setState(9534);
			match(MATERIALIZED);
			setState(9535);
			match(VIEW);
			setState(9537);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,920,_ctx) ) {
			case 1:
				{
				setState(9536);
				ifExists();
				}
				break;
			}
			setState(9539);
			anyNameList();
			setState(9541);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9540);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropOperatorContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLStatementParser.OPERATOR, 0); }
		public OperatorWithArgtypesListContext operatorWithArgtypesList() {
			return getRuleContext(OperatorWithArgtypesListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropOperatorContext dropOperator() throws RecognitionException {
		DropOperatorContext _localctx = new DropOperatorContext(_ctx, getState());
		enterRule(_localctx, 1332, RULE_dropOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9543);
			match(DROP);
			setState(9544);
			match(OPERATOR);
			setState(9546);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,922,_ctx) ) {
			case 1:
				{
				setState(9545);
				ifExists();
				}
				break;
			}
			setState(9548);
			operatorWithArgtypesList();
			setState(9550);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9549);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OperatorWithArgtypesListContext extends ParserRuleContext {
		public List<OperatorWithArgtypesContext> operatorWithArgtypes() {
			return getRuleContexts(OperatorWithArgtypesContext.class);
		}
		public OperatorWithArgtypesContext operatorWithArgtypes(int i) {
			return getRuleContext(OperatorWithArgtypesContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public OperatorWithArgtypesListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operatorWithArgtypesList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOperatorWithArgtypesList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOperatorWithArgtypesList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOperatorWithArgtypesList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperatorWithArgtypesListContext operatorWithArgtypesList() throws RecognitionException {
		OperatorWithArgtypesListContext _localctx = new OperatorWithArgtypesListContext(_ctx, getState());
		enterRule(_localctx, 1334, RULE_operatorWithArgtypesList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9552);
			operatorWithArgtypes();
			setState(9557);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(9553);
				match(COMMA_);
				setState(9554);
				operatorWithArgtypes();
				}
				}
				setState(9559);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropOperatorClassContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLStatementParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLStatementParser.CLASS, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropOperatorClassContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropOperatorClass; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropOperatorClass(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropOperatorClass(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropOperatorClass(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropOperatorClassContext dropOperatorClass() throws RecognitionException {
		DropOperatorClassContext _localctx = new DropOperatorClassContext(_ctx, getState());
		enterRule(_localctx, 1336, RULE_dropOperatorClass);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9560);
			match(DROP);
			setState(9561);
			match(OPERATOR);
			setState(9562);
			match(CLASS);
			setState(9564);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,925,_ctx) ) {
			case 1:
				{
				setState(9563);
				ifExists();
				}
				break;
			}
			setState(9566);
			anyName();
			setState(9567);
			match(USING);
			setState(9568);
			name();
			setState(9570);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9569);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropOperatorFamilyContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLStatementParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLStatementParser.FAMILY, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropOperatorFamilyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropOperatorFamily; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropOperatorFamily(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropOperatorFamily(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropOperatorFamily(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropOperatorFamilyContext dropOperatorFamily() throws RecognitionException {
		DropOperatorFamilyContext _localctx = new DropOperatorFamilyContext(_ctx, getState());
		enterRule(_localctx, 1338, RULE_dropOperatorFamily);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9572);
			match(DROP);
			setState(9573);
			match(OPERATOR);
			setState(9574);
			match(FAMILY);
			setState(9576);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,927,_ctx) ) {
			case 1:
				{
				setState(9575);
				ifExists();
				}
				break;
			}
			setState(9578);
			anyName();
			setState(9579);
			match(USING);
			setState(9580);
			name();
			setState(9582);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9581);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropOwnedContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLStatementParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropOwnedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropOwned; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropOwned(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropOwned(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropOwned(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropOwnedContext dropOwned() throws RecognitionException {
		DropOwnedContext _localctx = new DropOwnedContext(_ctx, getState());
		enterRule(_localctx, 1340, RULE_dropOwned);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9584);
			match(DROP);
			setState(9585);
			match(OWNED);
			setState(9586);
			match(BY);
			setState(9587);
			roleList();
			setState(9589);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9588);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropPolicyContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSQLStatementParser.POLICY, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropPolicyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropPolicy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropPolicy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropPolicy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropPolicy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropPolicyContext dropPolicy() throws RecognitionException {
		DropPolicyContext _localctx = new DropPolicyContext(_ctx, getState());
		enterRule(_localctx, 1342, RULE_dropPolicy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9591);
			match(DROP);
			setState(9592);
			match(POLICY);
			setState(9594);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,930,_ctx) ) {
			case 1:
				{
				setState(9593);
				ifExists();
				}
				break;
			}
			setState(9596);
			name();
			setState(9597);
			match(ON);
			setState(9598);
			tableName();
			setState(9600);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9599);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropProcedureContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLStatementParser.PROCEDURE, 0); }
		public FunctionWithArgtypesListContext functionWithArgtypesList() {
			return getRuleContext(FunctionWithArgtypesListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropProcedureContext dropProcedure() throws RecognitionException {
		DropProcedureContext _localctx = new DropProcedureContext(_ctx, getState());
		enterRule(_localctx, 1344, RULE_dropProcedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9602);
			match(DROP);
			setState(9603);
			match(PROCEDURE);
			setState(9605);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,932,_ctx) ) {
			case 1:
				{
				setState(9604);
				ifExists();
				}
				break;
			}
			setState(9607);
			functionWithArgtypesList();
			setState(9609);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9608);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropPublicationContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLStatementParser.PUBLICATION, 0); }
		public AnyNameListContext anyNameList() {
			return getRuleContext(AnyNameListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropPublicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropPublication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropPublication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropPublication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropPublication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropPublicationContext dropPublication() throws RecognitionException {
		DropPublicationContext _localctx = new DropPublicationContext(_ctx, getState());
		enterRule(_localctx, 1346, RULE_dropPublication);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9611);
			match(DROP);
			setState(9612);
			match(PUBLICATION);
			setState(9614);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,934,_ctx) ) {
			case 1:
				{
				setState(9613);
				ifExists();
				}
				break;
			}
			setState(9616);
			anyNameList();
			setState(9618);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9617);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropRoutineContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLStatementParser.ROUTINE, 0); }
		public FunctionWithArgtypesListContext functionWithArgtypesList() {
			return getRuleContext(FunctionWithArgtypesListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropRoutineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropRoutine; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropRoutine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropRoutine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropRoutine(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropRoutineContext dropRoutine() throws RecognitionException {
		DropRoutineContext _localctx = new DropRoutineContext(_ctx, getState());
		enterRule(_localctx, 1348, RULE_dropRoutine);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9620);
			match(DROP);
			setState(9621);
			match(ROUTINE);
			setState(9623);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,936,_ctx) ) {
			case 1:
				{
				setState(9622);
				ifExists();
				}
				break;
			}
			setState(9625);
			functionWithArgtypesList();
			setState(9627);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9626);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropRuleContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLStatementParser.RULE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropRuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropRule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropRule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropRule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropRule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropRuleContext dropRule() throws RecognitionException {
		DropRuleContext _localctx = new DropRuleContext(_ctx, getState());
		enterRule(_localctx, 1350, RULE_dropRule);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9629);
			match(DROP);
			setState(9630);
			match(RULE);
			setState(9632);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,938,_ctx) ) {
			case 1:
				{
				setState(9631);
				ifExists();
				}
				break;
			}
			setState(9634);
			name();
			setState(9635);
			match(ON);
			setState(9636);
			tableName();
			setState(9638);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9637);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropSequenceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLStatementParser.SEQUENCE, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return getRuleContext(QualifiedNameListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropSequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropSequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropSequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropSequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropSequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropSequenceContext dropSequence() throws RecognitionException {
		DropSequenceContext _localctx = new DropSequenceContext(_ctx, getState());
		enterRule(_localctx, 1352, RULE_dropSequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9640);
			match(DROP);
			setState(9641);
			match(SEQUENCE);
			setState(9643);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,940,_ctx) ) {
			case 1:
				{
				setState(9642);
				ifExists();
				}
				break;
			}
			setState(9645);
			qualifiedNameList(0);
			setState(9647);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9646);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropServerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLStatementParser.SERVER, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return getRuleContext(QualifiedNameListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropServerContext dropServer() throws RecognitionException {
		DropServerContext _localctx = new DropServerContext(_ctx, getState());
		enterRule(_localctx, 1354, RULE_dropServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9649);
			match(DROP);
			setState(9650);
			match(SERVER);
			setState(9652);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,942,_ctx) ) {
			case 1:
				{
				setState(9651);
				ifExists();
				}
				break;
			}
			setState(9654);
			qualifiedNameList(0);
			setState(9656);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9655);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropStatisticsContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLStatementParser.STATISTICS, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return getRuleContext(QualifiedNameListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropStatisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropStatistics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropStatistics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropStatistics(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropStatistics(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropStatisticsContext dropStatistics() throws RecognitionException {
		DropStatisticsContext _localctx = new DropStatisticsContext(_ctx, getState());
		enterRule(_localctx, 1356, RULE_dropStatistics);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9658);
			match(DROP);
			setState(9659);
			match(STATISTICS);
			setState(9661);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,944,_ctx) ) {
			case 1:
				{
				setState(9660);
				ifExists();
				}
				break;
			}
			setState(9663);
			qualifiedNameList(0);
			setState(9665);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9664);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropSubscriptionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLStatementParser.SUBSCRIPTION, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropSubscriptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropSubscription; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropSubscription(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropSubscription(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropSubscription(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropSubscriptionContext dropSubscription() throws RecognitionException {
		DropSubscriptionContext _localctx = new DropSubscriptionContext(_ctx, getState());
		enterRule(_localctx, 1358, RULE_dropSubscription);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9667);
			match(DROP);
			setState(9668);
			match(SUBSCRIPTION);
			setState(9670);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,946,_ctx) ) {
			case 1:
				{
				setState(9669);
				ifExists();
				}
				break;
			}
			setState(9672);
			qualifiedName();
			setState(9674);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9673);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropTablespaceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLStatementParser.TABLESPACE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTablespaceContext dropTablespace() throws RecognitionException {
		DropTablespaceContext _localctx = new DropTablespaceContext(_ctx, getState());
		enterRule(_localctx, 1360, RULE_dropTablespace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9676);
			match(DROP);
			setState(9677);
			match(TABLESPACE);
			setState(9679);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,948,_ctx) ) {
			case 1:
				{
				setState(9678);
				ifExists();
				}
				break;
			}
			setState(9681);
			qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropTextSearchContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSQLStatementParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLStatementParser.SEARCH, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLStatementParser.CONFIGURATION, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLStatementParser.DICTIONARY, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLStatementParser.PARSER, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLStatementParser.TEMPLATE, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropTextSearchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTextSearch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropTextSearch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropTextSearch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropTextSearch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTextSearchContext dropTextSearch() throws RecognitionException {
		DropTextSearchContext _localctx = new DropTextSearchContext(_ctx, getState());
		enterRule(_localctx, 1362, RULE_dropTextSearch);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9683);
			match(DROP);
			setState(9684);
			match(TEXT);
			setState(9685);
			match(SEARCH);
			setState(9686);
			_la = _input.LA(1);
			if ( !(((((_la - 305)) & ~0x3f) == 0 && ((1L << (_la - 305)) & 17592186044425L) != 0) || _la==TEMPLATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(9688);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,949,_ctx) ) {
			case 1:
				{
				setState(9687);
				ifExists();
				}
				break;
			}
			setState(9690);
			qualifiedName();
			setState(9692);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9691);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropTransformContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLStatementParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLStatementParser.LANGUAGE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropTransformContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTransform; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropTransform(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropTransform(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropTransform(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTransformContext dropTransform() throws RecognitionException {
		DropTransformContext _localctx = new DropTransformContext(_ctx, getState());
		enterRule(_localctx, 1364, RULE_dropTransform);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9694);
			match(DROP);
			setState(9695);
			match(TRANSFORM);
			setState(9697);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(9696);
				ifExists();
				}
			}

			setState(9699);
			match(FOR);
			setState(9700);
			typeName();
			setState(9701);
			match(LANGUAGE);
			setState(9702);
			name();
			setState(9704);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9703);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropTriggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLStatementParser.TRIGGER, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTriggerContext dropTrigger() throws RecognitionException {
		DropTriggerContext _localctx = new DropTriggerContext(_ctx, getState());
		enterRule(_localctx, 1366, RULE_dropTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9706);
			match(DROP);
			setState(9707);
			match(TRIGGER);
			setState(9709);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,953,_ctx) ) {
			case 1:
				{
				setState(9708);
				ifExists();
				}
				break;
			}
			setState(9711);
			qualifiedName();
			setState(9712);
			match(ON);
			setState(9713);
			tableName();
			setState(9715);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9714);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropTypeContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode TYPE() { return getToken(PostgreSQLStatementParser.TYPE, 0); }
		public AnyNameListContext anyNameList() {
			return getRuleContext(AnyNameListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTypeContext dropType() throws RecognitionException {
		DropTypeContext _localctx = new DropTypeContext(_ctx, getState());
		enterRule(_localctx, 1368, RULE_dropType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9717);
			match(DROP);
			setState(9718);
			match(TYPE);
			setState(9720);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,955,_ctx) ) {
			case 1:
				{
				setState(9719);
				ifExists();
				}
				break;
			}
			setState(9722);
			anyNameList();
			setState(9724);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9723);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropUserMappingContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLStatementParser.USER, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSQLStatementParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public AuthIdentContext authIdent() {
			return getRuleContext(AuthIdentContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PostgreSQLStatementParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropUserMappingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUserMapping; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropUserMapping(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropUserMapping(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropUserMapping(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropUserMappingContext dropUserMapping() throws RecognitionException {
		DropUserMappingContext _localctx = new DropUserMappingContext(_ctx, getState());
		enterRule(_localctx, 1370, RULE_dropUserMapping);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9726);
			match(DROP);
			setState(9727);
			match(USER);
			setState(9728);
			match(MAPPING);
			setState(9730);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(9729);
				ifExists();
				}
			}

			setState(9732);
			match(FOR);
			setState(9733);
			authIdent();
			setState(9734);
			match(SERVER);
			setState(9735);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropViewContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLStatementParser.VIEW, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return getRuleContext(QualifiedNameListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropViewContext dropView() throws RecognitionException {
		DropViewContext _localctx = new DropViewContext(_ctx, getState());
		enterRule(_localctx, 1372, RULE_dropView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9737);
			match(DROP);
			setState(9738);
			match(VIEW);
			setState(9740);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,958,_ctx) ) {
			case 1:
				{
				setState(9739);
				ifExists();
				}
				break;
			}
			setState(9742);
			qualifiedNameList(0);
			setState(9744);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9743);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ImportForeignSchemaContext extends ParserRuleContext {
		public TerminalNode IMPORT() { return getToken(PostgreSQLStatementParser.IMPORT, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLStatementParser.FOREIGN, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLStatementParser.SERVER, 0); }
		public TerminalNode INTO() { return getToken(PostgreSQLStatementParser.INTO, 0); }
		public ImportQualificationContext importQualification() {
			return getRuleContext(ImportQualificationContext.class,0);
		}
		public CreateGenericOptionsContext createGenericOptions() {
			return getRuleContext(CreateGenericOptionsContext.class,0);
		}
		public ImportForeignSchemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_importForeignSchema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterImportForeignSchema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitImportForeignSchema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitImportForeignSchema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ImportForeignSchemaContext importForeignSchema() throws RecognitionException {
		ImportForeignSchemaContext _localctx = new ImportForeignSchemaContext(_ctx, getState());
		enterRule(_localctx, 1374, RULE_importForeignSchema);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9746);
			match(IMPORT);
			setState(9747);
			match(FOREIGN);
			setState(9748);
			match(SCHEMA);
			setState(9749);
			name();
			setState(9751);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT || _la==EXCEPT) {
				{
				setState(9750);
				importQualification();
				}
			}

			setState(9753);
			match(FROM);
			setState(9754);
			match(SERVER);
			setState(9755);
			name();
			setState(9756);
			match(INTO);
			setState(9757);
			name();
			setState(9759);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(9758);
				createGenericOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ImportQualificationContext extends ParserRuleContext {
		public ImportQualificationTypeContext importQualificationType() {
			return getRuleContext(ImportQualificationTypeContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public RelationExprListContext relationExprList() {
			return getRuleContext(RelationExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public ImportQualificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_importQualification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterImportQualification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitImportQualification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitImportQualification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ImportQualificationContext importQualification() throws RecognitionException {
		ImportQualificationContext _localctx = new ImportQualificationContext(_ctx, getState());
		enterRule(_localctx, 1376, RULE_importQualification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9761);
			importQualificationType();
			setState(9762);
			match(LP_);
			setState(9763);
			relationExprList();
			setState(9764);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ImportQualificationTypeContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(PostgreSQLStatementParser.LIMIT, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode EXCEPT() { return getToken(PostgreSQLStatementParser.EXCEPT, 0); }
		public ImportQualificationTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_importQualificationType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterImportQualificationType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitImportQualificationType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitImportQualificationType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ImportQualificationTypeContext importQualificationType() throws RecognitionException {
		ImportQualificationTypeContext _localctx = new ImportQualificationTypeContext(_ctx, getState());
		enterRule(_localctx, 1378, RULE_importQualificationType);
		try {
			setState(9769);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIMIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(9766);
				match(LIMIT);
				setState(9767);
				match(TO);
				}
				break;
			case EXCEPT:
				enterOuterAlt(_localctx, 2);
				{
				setState(9768);
				match(EXCEPT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DeclareContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(PostgreSQLStatementParser.DECLARE, 0); }
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public CursorOptionContext cursorOption() {
			return getRuleContext(CursorOptionContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(PostgreSQLStatementParser.CURSOR, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public TerminalNode HOLD() { return getToken(PostgreSQLStatementParser.HOLD, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSQLStatementParser.WITHOUT, 0); }
		public DeclareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDeclare(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDeclare(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDeclare(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareContext declare() throws RecognitionException {
		DeclareContext _localctx = new DeclareContext(_ctx, getState());
		enterRule(_localctx, 1380, RULE_declare);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9771);
			match(DECLARE);
			setState(9772);
			cursorName();
			setState(9773);
			cursorOption();
			setState(9774);
			match(CURSOR);
			setState(9777);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITHOUT || _la==WITH) {
				{
				setState(9775);
				_la = _input.LA(1);
				if ( !(_la==WITHOUT || _la==WITH) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9776);
				match(HOLD);
				}
			}

			setState(9779);
			match(FOR);
			setState(9780);
			select();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CursorOptionContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(PostgreSQLStatementParser.BINARY, 0); }
		public TerminalNode SCROLL() { return getToken(PostgreSQLStatementParser.SCROLL, 0); }
		public TerminalNode ASENSITIVE() { return getToken(PostgreSQLStatementParser.ASENSITIVE, 0); }
		public TerminalNode INSENSITIVE() { return getToken(PostgreSQLStatementParser.INSENSITIVE, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public CursorOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCursorOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCursorOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCursorOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorOptionContext cursorOption() throws RecognitionException {
		CursorOptionContext _localctx = new CursorOptionContext(_ctx, getState());
		enterRule(_localctx, 1382, RULE_cursorOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9783);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BINARY) {
				{
				setState(9782);
				match(BINARY);
				}
			}

			setState(9786);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INSENSITIVE || _la==ASENSITIVE) {
				{
				setState(9785);
				_la = _input.LA(1);
				if ( !(_la==INSENSITIVE || _la==ASENSITIVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(9792);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO || _la==SCROLL) {
				{
				setState(9789);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(9788);
					match(NO);
					}
				}

				setState(9791);
				match(SCROLL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OpenContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(PostgreSQLStatementParser.OPEN, 0); }
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public UsingValueClauseContext usingValueClause() {
			return getRuleContext(UsingValueClauseContext.class,0);
		}
		public UsingSqlDescriptorClauseContext usingSqlDescriptorClause() {
			return getRuleContext(UsingSqlDescriptorClauseContext.class,0);
		}
		public OpenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOpen(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOpen(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOpen(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpenContext open() throws RecognitionException {
		OpenContext _localctx = new OpenContext(_ctx, getState());
		enterRule(_localctx, 1384, RULE_open);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9794);
			match(OPEN);
			setState(9795);
			cursorName();
			setState(9798);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,968,_ctx) ) {
			case 1:
				{
				setState(9796);
				usingValueClause();
				}
				break;
			case 2:
				{
				setState(9797);
				usingSqlDescriptorClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UsingValueClauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public UsingValueClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_usingValueClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterUsingValueClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitUsingValueClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitUsingValueClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UsingValueClauseContext usingValueClause() throws RecognitionException {
		UsingValueClauseContext _localctx = new UsingValueClauseContext(_ctx, getState());
		enterRule(_localctx, 1386, RULE_usingValueClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9800);
			match(USING);
			setState(9801);
			value();
			setState(9806);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(9802);
				match(COMMA_);
				setState(9803);
				value();
				}
				}
				setState(9808);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ValueContext extends ParserRuleContext {
		public AexprConstContext aexprConst() {
			return getRuleContext(AexprConstContext.class,0);
		}
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValueContext value() throws RecognitionException {
		ValueContext _localctx = new ValueContext(_ctx, getState());
		enterRule(_localctx, 1388, RULE_value);
		try {
			setState(9811);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,970,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9809);
				aexprConst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9810);
				hostVariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UsingSqlDescriptorClauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public TerminalNode SQL() { return getToken(PostgreSQLStatementParser.SQL, 0); }
		public TerminalNode DESCRIPTOR() { return getToken(PostgreSQLStatementParser.DESCRIPTOR, 0); }
		public DescriptorNameContext descriptorName() {
			return getRuleContext(DescriptorNameContext.class,0);
		}
		public UsingSqlDescriptorClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_usingSqlDescriptorClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterUsingSqlDescriptorClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitUsingSqlDescriptorClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitUsingSqlDescriptorClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UsingSqlDescriptorClauseContext usingSqlDescriptorClause() throws RecognitionException {
		UsingSqlDescriptorClauseContext _localctx = new UsingSqlDescriptorClauseContext(_ctx, getState());
		enterRule(_localctx, 1390, RULE_usingSqlDescriptorClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9813);
			match(USING);
			setState(9814);
			match(SQL);
			setState(9815);
			match(DESCRIPTOR);
			setState(9816);
			descriptorName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DescriptorNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public DescriptorNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_descriptorName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDescriptorName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDescriptorName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDescriptorName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DescriptorNameContext descriptorName() throws RecognitionException {
		DescriptorNameContext _localctx = new DescriptorNameContext(_ctx, getState());
		enterRule(_localctx, 1392, RULE_descriptorName);
		try {
			setState(9820);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,971,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9818);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9819);
				hostVariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MoveContext extends ParserRuleContext {
		public TerminalNode MOVE() { return getToken(PostgreSQLStatementParser.MOVE, 0); }
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public DirectionContext direction() {
			return getRuleContext(DirectionContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public TerminalNode IN() { return getToken(PostgreSQLStatementParser.IN, 0); }
		public MoveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_move; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterMove(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitMove(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitMove(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MoveContext move() throws RecognitionException {
		MoveContext _localctx = new MoveContext(_ctx, getState());
		enterRule(_localctx, 1394, RULE_move);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9822);
			match(MOVE);
			setState(9824);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,972,_ctx) ) {
			case 1:
				{
				setState(9823);
				direction();
				}
				break;
			}
			setState(9827);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM || _la==IN) {
				{
				setState(9826);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(9829);
			cursorName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FetchContext extends ParserRuleContext {
		public TerminalNode FETCH() { return getToken(PostgreSQLStatementParser.FETCH, 0); }
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public DirectionContext direction() {
			return getRuleContext(DirectionContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public TerminalNode IN() { return getToken(PostgreSQLStatementParser.IN, 0); }
		public FetchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterFetch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitFetch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitFetch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FetchContext fetch() throws RecognitionException {
		FetchContext _localctx = new FetchContext(_ctx, getState());
		enterRule(_localctx, 1396, RULE_fetch);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9831);
			match(FETCH);
			setState(9833);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,974,_ctx) ) {
			case 1:
				{
				setState(9832);
				direction();
				}
				break;
			}
			setState(9836);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM || _la==IN) {
				{
				setState(9835);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(9838);
			cursorName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ListenContext extends ParserRuleContext {
		public TerminalNode LISTEN() { return getToken(PostgreSQLStatementParser.LISTEN, 0); }
		public ChannelNameContext channelName() {
			return getRuleContext(ChannelNameContext.class,0);
		}
		public ListenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listen; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterListen(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitListen(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitListen(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ListenContext listen() throws RecognitionException {
		ListenContext _localctx = new ListenContext(_ctx, getState());
		enterRule(_localctx, 1398, RULE_listen);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9840);
			match(LISTEN);
			setState(9841);
			channelName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnlistenContext extends ParserRuleContext {
		public TerminalNode UNLISTEN() { return getToken(PostgreSQLStatementParser.UNLISTEN, 0); }
		public ChannelNameContext channelName() {
			return getRuleContext(ChannelNameContext.class,0);
		}
		public TerminalNode ASTERISK_() { return getToken(PostgreSQLStatementParser.ASTERISK_, 0); }
		public UnlistenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlisten; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterUnlisten(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitUnlisten(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitUnlisten(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnlistenContext unlisten() throws RecognitionException {
		UnlistenContext _localctx = new UnlistenContext(_ctx, getState());
		enterRule(_localctx, 1400, RULE_unlisten);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9843);
			match(UNLISTEN);
			setState(9846);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNICODE_ESCAPE:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case XML:
			case JSON:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case PARAM:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case NATIONAL:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case IDENTIFIER_:
				{
				setState(9844);
				channelName();
				}
				break;
			case ASTERISK_:
				{
				setState(9845);
				match(ASTERISK_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NotifyStmtContext extends ParserRuleContext {
		public TerminalNode NOTIFY() { return getToken(PostgreSQLStatementParser.NOTIFY, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public NotifyStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notifyStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterNotifyStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitNotifyStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitNotifyStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotifyStmtContext notifyStmt() throws RecognitionException {
		NotifyStmtContext _localctx = new NotifyStmtContext(_ctx, getState());
		enterRule(_localctx, 1402, RULE_notifyStmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9848);
			match(NOTIFY);
			setState(9849);
			colId();
			setState(9852);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_) {
				{
				setState(9850);
				match(COMMA_);
				setState(9851);
				match(STRING_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DirectionContext extends ParserRuleContext {
		public DirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_direction; }
	 
		public DirectionContext() { }
		public void copyFrom(DirectionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class NextContext extends DirectionContext {
		public TerminalNode NEXT() { return getToken(PostgreSQLStatementParser.NEXT, 0); }
		public NextContext(DirectionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterNext(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitNext(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitNext(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AllContext extends DirectionContext {
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public AllContext(DirectionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAll(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAll(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAll(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class BackwardCountContext extends DirectionContext {
		public TerminalNode BACKWARD() { return getToken(PostgreSQLStatementParser.BACKWARD, 0); }
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public BackwardCountContext(DirectionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterBackwardCount(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitBackwardCount(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitBackwardCount(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class LastContext extends DirectionContext {
		public TerminalNode LAST() { return getToken(PostgreSQLStatementParser.LAST, 0); }
		public LastContext(DirectionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterLast(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitLast(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitLast(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ForwardContext extends DirectionContext {
		public TerminalNode FORWARD() { return getToken(PostgreSQLStatementParser.FORWARD, 0); }
		public ForwardContext(DirectionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterForward(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitForward(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitForward(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CountContext extends DirectionContext {
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public CountContext(DirectionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCount(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCount(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCount(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ForwardAllContext extends DirectionContext {
		public TerminalNode FORWARD() { return getToken(PostgreSQLStatementParser.FORWARD, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public ForwardAllContext(DirectionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterForwardAll(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitForwardAll(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitForwardAll(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class BackwardAllContext extends DirectionContext {
		public TerminalNode BACKWARD() { return getToken(PostgreSQLStatementParser.BACKWARD, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public BackwardAllContext(DirectionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterBackwardAll(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitBackwardAll(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitBackwardAll(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AbsoluteCountContext extends DirectionContext {
		public TerminalNode ABSOLUTE() { return getToken(PostgreSQLStatementParser.ABSOLUTE, 0); }
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public AbsoluteCountContext(DirectionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAbsoluteCount(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAbsoluteCount(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAbsoluteCount(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PriorContext extends DirectionContext {
		public TerminalNode PRIOR() { return getToken(PostgreSQLStatementParser.PRIOR, 0); }
		public PriorContext(DirectionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterPrior(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitPrior(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitPrior(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class BackwardContext extends DirectionContext {
		public TerminalNode BACKWARD() { return getToken(PostgreSQLStatementParser.BACKWARD, 0); }
		public BackwardContext(DirectionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterBackward(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitBackward(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitBackward(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RelativeCountContext extends DirectionContext {
		public TerminalNode RELATIVE() { return getToken(PostgreSQLStatementParser.RELATIVE, 0); }
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public RelativeCountContext(DirectionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterRelativeCount(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitRelativeCount(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitRelativeCount(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ForwardCountContext extends DirectionContext {
		public TerminalNode FORWARD() { return getToken(PostgreSQLStatementParser.FORWARD, 0); }
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public ForwardCountContext(DirectionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterForwardCount(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitForwardCount(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitForwardCount(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class FirstContext extends DirectionContext {
		public TerminalNode FIRST() { return getToken(PostgreSQLStatementParser.FIRST, 0); }
		public FirstContext(DirectionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterFirst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitFirst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitFirst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DirectionContext direction() throws RecognitionException {
		DirectionContext _localctx = new DirectionContext(_ctx, getState());
		enterRule(_localctx, 1404, RULE_direction);
		try {
			setState(9874);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,978,_ctx) ) {
			case 1:
				_localctx = new NextContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(9854);
				match(NEXT);
				}
				break;
			case 2:
				_localctx = new PriorContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(9855);
				match(PRIOR);
				}
				break;
			case 3:
				_localctx = new FirstContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(9856);
				match(FIRST);
				}
				break;
			case 4:
				_localctx = new LastContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(9857);
				match(LAST);
				}
				break;
			case 5:
				_localctx = new AbsoluteCountContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(9858);
				match(ABSOLUTE);
				setState(9859);
				signedIconst();
				}
				break;
			case 6:
				_localctx = new RelativeCountContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(9860);
				match(RELATIVE);
				setState(9861);
				signedIconst();
				}
				break;
			case 7:
				_localctx = new CountContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(9862);
				signedIconst();
				}
				break;
			case 8:
				_localctx = new AllContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(9863);
				match(ALL);
				}
				break;
			case 9:
				_localctx = new ForwardContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(9864);
				match(FORWARD);
				}
				break;
			case 10:
				_localctx = new ForwardCountContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(9865);
				match(FORWARD);
				setState(9866);
				signedIconst();
				}
				break;
			case 11:
				_localctx = new ForwardAllContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(9867);
				match(FORWARD);
				setState(9868);
				match(ALL);
				}
				break;
			case 12:
				_localctx = new BackwardContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(9869);
				match(BACKWARD);
				}
				break;
			case 13:
				_localctx = new BackwardCountContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(9870);
				match(BACKWARD);
				setState(9871);
				signedIconst();
				}
				break;
			case 14:
				_localctx = new BackwardAllContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(9872);
				match(BACKWARD);
				setState(9873);
				match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrepareContext extends ParserRuleContext {
		public TerminalNode PREPARE() { return getToken(PostgreSQLStatementParser.PREPARE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public PreparableStmtContext preparableStmt() {
			return getRuleContext(PreparableStmtContext.class,0);
		}
		public PrepTypeClauseContext prepTypeClause() {
			return getRuleContext(PrepTypeClauseContext.class,0);
		}
		public PrepareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepare; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterPrepare(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitPrepare(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitPrepare(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrepareContext prepare() throws RecognitionException {
		PrepareContext _localctx = new PrepareContext(_ctx, getState());
		enterRule(_localctx, 1406, RULE_prepare);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9876);
			match(PREPARE);
			setState(9877);
			name();
			setState(9879);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(9878);
				prepTypeClause();
				}
			}

			setState(9881);
			match(AS);
			setState(9882);
			preparableStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReindexContext extends ParserRuleContext {
		public TerminalNode REINDEX() { return getToken(PostgreSQLStatementParser.REINDEX, 0); }
		public ReIndexClausesContext reIndexClauses() {
			return getRuleContext(ReIndexClausesContext.class,0);
		}
		public ReindexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterReindex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitReindex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitReindex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReindexContext reindex() throws RecognitionException {
		ReindexContext _localctx = new ReindexContext(_ctx, getState());
		enterRule(_localctx, 1408, RULE_reindex);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9884);
			match(REINDEX);
			setState(9885);
			reIndexClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReIndexClausesContext extends ParserRuleContext {
		public ReindexTargetTypeContext reindexTargetType() {
			return getRuleContext(ReindexTargetTypeContext.class,0);
		}
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode CONCURRENTLY() { return getToken(PostgreSQLStatementParser.CONCURRENTLY, 0); }
		public ReindexTargetMultitableContext reindexTargetMultitable() {
			return getRuleContext(ReindexTargetMultitableContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ReindexOptionListContext reindexOptionList() {
			return getRuleContext(ReindexOptionListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public ReIndexClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reIndexClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterReIndexClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitReIndexClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitReIndexClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReIndexClausesContext reIndexClauses() throws RecognitionException {
		ReIndexClausesContext _localctx = new ReIndexClausesContext(_ctx, getState());
		enterRule(_localctx, 1410, RULE_reIndexClauses);
		int _la;
		try {
			setState(9917);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,984,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9887);
				reindexTargetType();
				setState(9889);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONCURRENTLY) {
					{
					setState(9888);
					match(CONCURRENTLY);
					}
				}

				setState(9891);
				qualifiedName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9893);
				reindexTargetMultitable();
				setState(9895);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONCURRENTLY) {
					{
					setState(9894);
					match(CONCURRENTLY);
					}
				}

				setState(9897);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9899);
				match(LP_);
				setState(9900);
				reindexOptionList();
				setState(9901);
				match(RP_);
				setState(9902);
				reindexTargetType();
				setState(9904);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONCURRENTLY) {
					{
					setState(9903);
					match(CONCURRENTLY);
					}
				}

				setState(9906);
				qualifiedName();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9908);
				match(LP_);
				setState(9909);
				reindexOptionList();
				setState(9910);
				match(RP_);
				setState(9911);
				reindexTargetMultitable();
				setState(9913);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONCURRENTLY) {
					{
					setState(9912);
					match(CONCURRENTLY);
					}
				}

				setState(9915);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReindexOptionListContext extends ParserRuleContext {
		public List<ReindexOptionElemContext> reindexOptionElem() {
			return getRuleContexts(ReindexOptionElemContext.class);
		}
		public ReindexOptionElemContext reindexOptionElem(int i) {
			return getRuleContext(ReindexOptionElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public ReindexOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindexOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterReindexOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitReindexOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitReindexOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReindexOptionListContext reindexOptionList() throws RecognitionException {
		ReindexOptionListContext _localctx = new ReindexOptionListContext(_ctx, getState());
		enterRule(_localctx, 1412, RULE_reindexOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9919);
			reindexOptionElem();
			setState(9924);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(9920);
				match(COMMA_);
				setState(9921);
				reindexOptionElem();
				}
				}
				setState(9926);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReindexOptionElemContext extends ParserRuleContext {
		public TerminalNode VERBOSE() { return getToken(PostgreSQLStatementParser.VERBOSE, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(PostgreSQLStatementParser.CONCURRENTLY, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLStatementParser.TABLESPACE, 0); }
		public ReindexOptionElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindexOptionElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterReindexOptionElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitReindexOptionElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitReindexOptionElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReindexOptionElemContext reindexOptionElem() throws RecognitionException {
		ReindexOptionElemContext _localctx = new ReindexOptionElemContext(_ctx, getState());
		enterRule(_localctx, 1414, RULE_reindexOptionElem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9927);
			_la = _input.LA(1);
			if ( !(_la==CONCURRENTLY || _la==TABLESPACE || _la==VERBOSE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReindexTargetMultitableContext extends ParserRuleContext {
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public TerminalNode SYSTEM() { return getToken(PostgreSQLStatementParser.SYSTEM, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLStatementParser.DATABASE, 0); }
		public ReindexTargetMultitableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindexTargetMultitable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterReindexTargetMultitable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitReindexTargetMultitable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitReindexTargetMultitable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReindexTargetMultitableContext reindexTargetMultitable() throws RecognitionException {
		ReindexTargetMultitableContext _localctx = new ReindexTargetMultitableContext(_ctx, getState());
		enterRule(_localctx, 1416, RULE_reindexTargetMultitable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9929);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SYSTEM || _la==SCHEMA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReindexTargetTypeContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(PostgreSQLStatementParser.INDEX, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public ReindexTargetTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindexTargetType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterReindexTargetType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitReindexTargetType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitReindexTargetType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReindexTargetTypeContext reindexTargetType() throws RecognitionException {
		ReindexTargetTypeContext _localctx = new ReindexTargetTypeContext(_ctx, getState());
		enterRule(_localctx, 1418, RULE_reindexTargetType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9931);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==INDEX) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DeallocateContext extends ParserRuleContext {
		public TerminalNode DEALLOCATE() { return getToken(PostgreSQLStatementParser.DEALLOCATE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TerminalNode PREPARE() { return getToken(PostgreSQLStatementParser.PREPARE, 0); }
		public DeallocateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDeallocate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDeallocate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDeallocate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeallocateContext deallocate() throws RecognitionException {
		DeallocateContext _localctx = new DeallocateContext(_ctx, getState());
		enterRule(_localctx, 1420, RULE_deallocate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9933);
			match(DEALLOCATE);
			setState(9935);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,986,_ctx) ) {
			case 1:
				{
				setState(9934);
				match(PREPARE);
				}
				break;
			}
			setState(9939);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNICODE_ESCAPE:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case XML:
			case JSON:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case PARAM:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case NATIONAL:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case IDENTIFIER_:
				{
				setState(9937);
				name();
				}
				break;
			case ALL:
				{
				setState(9938);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrepTypeClauseContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TypeListContext typeList() {
			return getRuleContext(TypeListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public PrepTypeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepTypeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterPrepTypeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitPrepTypeClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitPrepTypeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrepTypeClauseContext prepTypeClause() throws RecognitionException {
		PrepTypeClauseContext _localctx = new PrepTypeClauseContext(_ctx, getState());
		enterRule(_localctx, 1422, RULE_prepTypeClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9941);
			match(LP_);
			setState(9942);
			typeList();
			setState(9943);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RefreshMaterializedViewContext extends ParserRuleContext {
		public TerminalNode REFRESH() { return getToken(PostgreSQLStatementParser.REFRESH, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLStatementParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLStatementParser.VIEW, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode CONCURRENTLY() { return getToken(PostgreSQLStatementParser.CONCURRENTLY, 0); }
		public WithDataContext withData() {
			return getRuleContext(WithDataContext.class,0);
		}
		public RefreshMaterializedViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_refreshMaterializedView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterRefreshMaterializedView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitRefreshMaterializedView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitRefreshMaterializedView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RefreshMaterializedViewContext refreshMaterializedView() throws RecognitionException {
		RefreshMaterializedViewContext _localctx = new RefreshMaterializedViewContext(_ctx, getState());
		enterRule(_localctx, 1424, RULE_refreshMaterializedView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9945);
			match(REFRESH);
			setState(9946);
			match(MATERIALIZED);
			setState(9947);
			match(VIEW);
			setState(9949);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONCURRENTLY) {
				{
				setState(9948);
				match(CONCURRENTLY);
				}
			}

			setState(9951);
			qualifiedName();
			setState(9953);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(9952);
				withData();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterForeignTableContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLStatementParser.FOREIGN, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public RelationExprContext relationExpr() {
			return getRuleContext(RelationExprContext.class,0);
		}
		public AlterForeignTableClausesContext alterForeignTableClauses() {
			return getRuleContext(AlterForeignTableClausesContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public AlterForeignTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterForeignTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterForeignTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterForeignTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterForeignTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterForeignTableContext alterForeignTable() throws RecognitionException {
		AlterForeignTableContext _localctx = new AlterForeignTableContext(_ctx, getState());
		enterRule(_localctx, 1426, RULE_alterForeignTable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9955);
			match(ALTER);
			setState(9956);
			match(FOREIGN);
			setState(9957);
			match(TABLE);
			setState(9959);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,990,_ctx) ) {
			case 1:
				{
				setState(9958);
				ifExists();
				}
				break;
			}
			setState(9961);
			relationExpr();
			setState(9962);
			alterForeignTableClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterForeignTableClausesContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode COLUMN() { return getToken(PostgreSQLStatementParser.COLUMN, 0); }
		public AlterTableCmdsContext alterTableCmds() {
			return getRuleContext(AlterTableCmdsContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public AlterForeignTableClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterForeignTableClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterForeignTableClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterForeignTableClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterForeignTableClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterForeignTableClausesContext alterForeignTableClauses() throws RecognitionException {
		AlterForeignTableClausesContext _localctx = new AlterForeignTableClausesContext(_ctx, getState());
		enterRule(_localctx, 1428, RULE_alterForeignTableClauses);
		int _la;
		try {
			setState(9979);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,992,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9964);
				match(RENAME);
				setState(9965);
				match(TO);
				setState(9966);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9967);
				match(RENAME);
				setState(9969);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(9968);
					match(COLUMN);
					}
				}

				setState(9971);
				name();
				setState(9972);
				match(TO);
				setState(9973);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9975);
				alterTableCmds();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9976);
				match(SET);
				setState(9977);
				match(SCHEMA);
				setState(9978);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateOperatorContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLStatementParser.OPERATOR, 0); }
		public AnyOperatorContext anyOperator() {
			return getRuleContext(AnyOperatorContext.class,0);
		}
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public CreateOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOperatorContext createOperator() throws RecognitionException {
		CreateOperatorContext _localctx = new CreateOperatorContext(_ctx, getState());
		enterRule(_localctx, 1430, RULE_createOperator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9981);
			match(CREATE);
			setState(9982);
			match(OPERATOR);
			setState(9983);
			anyOperator();
			setState(9984);
			definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateOperatorClassContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLStatementParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLStatementParser.CLASS, 0); }
		public List<AnyNameContext> anyName() {
			return getRuleContexts(AnyNameContext.class);
		}
		public AnyNameContext anyName(int i) {
			return getRuleContext(AnyNameContext.class,i);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public TerminalNode TYPE() { return getToken(PostgreSQLStatementParser.TYPE, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public OpclassItemListContext opclassItemList() {
			return getRuleContext(OpclassItemListContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLStatementParser.FAMILY, 0); }
		public CreateOperatorClassContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOperatorClass; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateOperatorClass(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateOperatorClass(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateOperatorClass(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOperatorClassContext createOperatorClass() throws RecognitionException {
		CreateOperatorClassContext _localctx = new CreateOperatorClassContext(_ctx, getState());
		enterRule(_localctx, 1432, RULE_createOperatorClass);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9986);
			match(CREATE);
			setState(9987);
			match(OPERATOR);
			setState(9988);
			match(CLASS);
			setState(9989);
			anyName();
			setState(9991);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(9990);
				match(DEFAULT);
				}
			}

			setState(9993);
			match(FOR);
			setState(9994);
			match(TYPE);
			setState(9995);
			typeName();
			setState(9996);
			match(USING);
			setState(9997);
			name();
			setState(10000);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FAMILY) {
				{
				setState(9998);
				match(FAMILY);
				setState(9999);
				anyName();
				}
			}

			setState(10002);
			match(AS);
			setState(10003);
			opclassItemList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateOperatorFamilyContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLStatementParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLStatementParser.FAMILY, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CreateOperatorFamilyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOperatorFamily; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateOperatorFamily(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateOperatorFamily(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateOperatorFamily(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOperatorFamilyContext createOperatorFamily() throws RecognitionException {
		CreateOperatorFamilyContext _localctx = new CreateOperatorFamilyContext(_ctx, getState());
		enterRule(_localctx, 1434, RULE_createOperatorFamily);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10005);
			match(CREATE);
			setState(10006);
			match(OPERATOR);
			setState(10007);
			match(FAMILY);
			setState(10008);
			anyName();
			setState(10009);
			match(USING);
			setState(10010);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateSchemaContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public CreateSchemaClausesContext createSchemaClauses() {
			return getRuleContext(CreateSchemaClausesContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateSchemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSchema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateSchema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateSchema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateSchema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateSchemaContext createSchema() throws RecognitionException {
		CreateSchemaContext _localctx = new CreateSchemaContext(_ctx, getState());
		enterRule(_localctx, 1436, RULE_createSchema);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10012);
			match(CREATE);
			setState(10013);
			match(SCHEMA);
			setState(10015);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,995,_ctx) ) {
			case 1:
				{
				setState(10014);
				ifNotExists();
				}
				break;
			}
			setState(10017);
			createSchemaClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateSchemaClausesContext extends ParserRuleContext {
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLStatementParser.AUTHORIZATION, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public SchemaEltListContext schemaEltList() {
			return getRuleContext(SchemaEltListContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public CreateSchemaClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSchemaClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCreateSchemaClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCreateSchemaClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCreateSchemaClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateSchemaClausesContext createSchemaClauses() throws RecognitionException {
		CreateSchemaClausesContext _localctx = new CreateSchemaClausesContext(_ctx, getState());
		enterRule(_localctx, 1438, RULE_createSchemaClauses);
		int _la;
		try {
			setState(10029);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,997,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10020);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & -1702650966907551743L) != 0) || ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & -36028934466307075L) != 0) || ((((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & 283126353889277L) != 0) || ((((_la - 241)) & ~0x3f) == 0 && ((1L << (_la - 241)) & -545622264849L) != 0) || ((((_la - 305)) & ~0x3f) == 0 && ((1L << (_la - 305)) & -1L) != 0) || ((((_la - 369)) & ~0x3f) == 0 && ((1L << (_la - 369)) & 9895604649983L) != 0) || ((((_la - 437)) & ~0x3f) == 0 && ((1L << (_la - 437)) & 562950016917239L) != 0) || ((((_la - 505)) & ~0x3f) == 0 && ((1L << (_la - 505)) & 7138750043982826433L) != 0) || ((((_la - 569)) & ~0x3f) == 0 && ((1L << (_la - 569)) & 2173569L) != 0)) {
					{
					setState(10019);
					colId();
					}
				}

				setState(10022);
				match(AUTHORIZATION);
				setState(10023);
				roleSpec();
				setState(10024);
				schemaEltList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10026);
				colId();
				setState(10027);
				schemaEltList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SchemaEltListContext extends ParserRuleContext {
		public List<SchemaStmtContext> schemaStmt() {
			return getRuleContexts(SchemaStmtContext.class);
		}
		public SchemaStmtContext schemaStmt(int i) {
			return getRuleContext(SchemaStmtContext.class,i);
		}
		public SchemaEltListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaEltList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSchemaEltList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSchemaEltList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSchemaEltList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaEltListContext schemaEltList() throws RecognitionException {
		SchemaEltListContext _localctx = new SchemaEltListContext(_ctx, getState());
		enterRule(_localctx, 1440, RULE_schemaEltList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10034);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CREATE || _la==GRANT) {
				{
				{
				setState(10031);
				schemaStmt();
				}
				}
				setState(10036);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SchemaStmtContext extends ParserRuleContext {
		public CreateTableContext createTable() {
			return getRuleContext(CreateTableContext.class,0);
		}
		public CreateIndexContext createIndex() {
			return getRuleContext(CreateIndexContext.class,0);
		}
		public CreateSequenceContext createSequence() {
			return getRuleContext(CreateSequenceContext.class,0);
		}
		public CreateTriggerContext createTrigger() {
			return getRuleContext(CreateTriggerContext.class,0);
		}
		public GrantContext grant() {
			return getRuleContext(GrantContext.class,0);
		}
		public CreateViewContext createView() {
			return getRuleContext(CreateViewContext.class,0);
		}
		public SchemaStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSchemaStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSchemaStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSchemaStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaStmtContext schemaStmt() throws RecognitionException {
		SchemaStmtContext _localctx = new SchemaStmtContext(_ctx, getState());
		enterRule(_localctx, 1442, RULE_schemaStmt);
		try {
			setState(10043);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,999,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10037);
				createTable();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10038);
				createIndex();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10039);
				createSequence();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10040);
				createTrigger();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10041);
				grant();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(10042);
				createView();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SecurityLabelStmtContext extends ParserRuleContext {
		public TerminalNode SECURITY() { return getToken(PostgreSQLStatementParser.SECURITY, 0); }
		public TerminalNode LABEL() { return getToken(PostgreSQLStatementParser.LABEL, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public SecurityLabelClauscesContext securityLabelClausces() {
			return getRuleContext(SecurityLabelClauscesContext.class,0);
		}
		public TerminalNode IS() { return getToken(PostgreSQLStatementParser.IS, 0); }
		public SecurityLabelContext securityLabel() {
			return getRuleContext(SecurityLabelContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public NonReservedWordOrSconstContext nonReservedWordOrSconst() {
			return getRuleContext(NonReservedWordOrSconstContext.class,0);
		}
		public SecurityLabelStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_securityLabelStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSecurityLabelStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSecurityLabelStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSecurityLabelStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SecurityLabelStmtContext securityLabelStmt() throws RecognitionException {
		SecurityLabelStmtContext _localctx = new SecurityLabelStmtContext(_ctx, getState());
		enterRule(_localctx, 1444, RULE_securityLabelStmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10045);
			match(SECURITY);
			setState(10046);
			match(LABEL);
			setState(10049);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(10047);
				match(FOR);
				setState(10048);
				nonReservedWordOrSconst();
				}
			}

			setState(10051);
			match(ON);
			setState(10052);
			securityLabelClausces();
			setState(10053);
			match(IS);
			setState(10054);
			securityLabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SecurityLabelContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public TerminalNode NULL() { return getToken(PostgreSQLStatementParser.NULL, 0); }
		public SecurityLabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_securityLabel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSecurityLabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSecurityLabel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSecurityLabel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SecurityLabelContext securityLabel() throws RecognitionException {
		SecurityLabelContext _localctx = new SecurityLabelContext(_ctx, getState());
		enterRule(_localctx, 1446, RULE_securityLabel);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10056);
			_la = _input.LA(1);
			if ( !(_la==NULL || _la==STRING_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SecurityLabelClauscesContext extends ParserRuleContext {
		public ObjectTypeAnyNameContext objectTypeAnyName() {
			return getRuleContext(ObjectTypeAnyNameContext.class,0);
		}
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(PostgreSQLStatementParser.COLUMN, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(PostgreSQLStatementParser.TYPE, 0); }
		public TerminalNode DOMAIN() { return getToken(PostgreSQLStatementParser.DOMAIN, 0); }
		public AggregateWithArgtypesContext aggregateWithArgtypes() {
			return getRuleContext(AggregateWithArgtypesContext.class,0);
		}
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLStatementParser.AGGREGATE, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLStatementParser.FUNCTION, 0); }
		public TerminalNode LARGE() { return getToken(PostgreSQLStatementParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(PostgreSQLStatementParser.OBJECT, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public FunctionWithArgtypesContext functionWithArgtypes() {
			return getRuleContext(FunctionWithArgtypesContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLStatementParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLStatementParser.ROUTINE, 0); }
		public SecurityLabelClauscesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_securityLabelClausces; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSecurityLabelClausces(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSecurityLabelClausces(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSecurityLabelClausces(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SecurityLabelClauscesContext securityLabelClausces() throws RecognitionException {
		SecurityLabelClauscesContext _localctx = new SecurityLabelClauscesContext(_ctx, getState());
		enterRule(_localctx, 1448, RULE_securityLabelClausces);
		int _la;
		try {
			setState(10072);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEQUENCE:
			case STATISTICS:
			case MATERIALIZED:
			case CONVERSION:
			case TABLE:
			case INDEX:
			case FOREIGN:
			case VIEW:
			case COLLATION:
			case TEXT:
				enterOuterAlt(_localctx, 1);
				{
				setState(10058);
				objectTypeAnyName();
				setState(10059);
				anyName();
				}
				break;
			case COLUMN:
				enterOuterAlt(_localctx, 2);
				{
				setState(10061);
				match(COLUMN);
				setState(10062);
				anyName();
				}
				break;
			case DOMAIN:
			case TYPE:
				enterOuterAlt(_localctx, 3);
				{
				setState(10063);
				_la = _input.LA(1);
				if ( !(_la==DOMAIN || _la==TYPE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(10064);
				typeName();
				}
				break;
			case AGGREGATE:
			case FUNCTION:
				enterOuterAlt(_localctx, 4);
				{
				setState(10065);
				_la = _input.LA(1);
				if ( !(_la==AGGREGATE || _la==FUNCTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(10066);
				aggregateWithArgtypes();
				}
				break;
			case LARGE:
				enterOuterAlt(_localctx, 5);
				{
				setState(10067);
				match(LARGE);
				setState(10068);
				match(OBJECT);
				setState(10069);
				numericOnly();
				}
				break;
			case ROUTINE:
			case PROCEDURE:
				enterOuterAlt(_localctx, 6);
				{
				setState(10070);
				_la = _input.LA(1);
				if ( !(_la==ROUTINE || _la==PROCEDURE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(10071);
				functionWithArgtypes();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrivilegeClauseContext extends ParserRuleContext {
		public PrivilegeTypesContext privilegeTypes() {
			return getRuleContext(PrivilegeTypesContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public OnObjectClauseContext onObjectClause() {
			return getRuleContext(OnObjectClauseContext.class,0);
		}
		public GranteeListContext granteeList() {
			return getRuleContext(GranteeListContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode GRANT() { return getToken(PostgreSQLStatementParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLStatementParser.OPTION, 0); }
		public PrivilegeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterPrivilegeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitPrivilegeClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitPrivilegeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeClauseContext privilegeClause() throws RecognitionException {
		PrivilegeClauseContext _localctx = new PrivilegeClauseContext(_ctx, getState());
		enterRule(_localctx, 1450, RULE_privilegeClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10074);
			privilegeTypes();
			setState(10075);
			match(ON);
			setState(10076);
			onObjectClause();
			setState(10077);
			_la = _input.LA(1);
			if ( !(_la==FROM || _la==TO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(10078);
			granteeList();
			setState(10082);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(10079);
				match(WITH);
				setState(10080);
				match(GRANT);
				setState(10081);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RoleClauseContext extends ParserRuleContext {
		public PrivilegeListContext privilegeList() {
			return getRuleContext(PrivilegeListContext.class,0);
		}
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode ADMIN() { return getToken(PostgreSQLStatementParser.ADMIN, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLStatementParser.OPTION, 0); }
		public TerminalNode GRANTED() { return getToken(PostgreSQLStatementParser.GRANTED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public RoleClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterRoleClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitRoleClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitRoleClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleClauseContext roleClause() throws RecognitionException {
		RoleClauseContext _localctx = new RoleClauseContext(_ctx, getState());
		enterRule(_localctx, 1452, RULE_roleClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10084);
			privilegeList();
			setState(10085);
			_la = _input.LA(1);
			if ( !(_la==FROM || _la==TO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(10086);
			roleList();
			setState(10090);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(10087);
				match(WITH);
				setState(10088);
				match(ADMIN);
				setState(10089);
				match(OPTION);
				}
			}

			setState(10095);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GRANTED) {
				{
				setState(10092);
				match(GRANTED);
				setState(10093);
				match(BY);
				setState(10094);
				roleSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrivilegeTypesContext extends ParserRuleContext {
		public List<PrivilegeTypeContext> privilegeType() {
			return getRuleContexts(PrivilegeTypeContext.class);
		}
		public PrivilegeTypeContext privilegeType(int i) {
			return getRuleContext(PrivilegeTypeContext.class,i);
		}
		public List<ColumnNamesContext> columnNames() {
			return getRuleContexts(ColumnNamesContext.class);
		}
		public ColumnNamesContext columnNames(int i) {
			return getRuleContext(ColumnNamesContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public PrivilegeTypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeTypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterPrivilegeTypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitPrivilegeTypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitPrivilegeTypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeTypesContext privilegeTypes() throws RecognitionException {
		PrivilegeTypesContext _localctx = new PrivilegeTypesContext(_ctx, getState());
		enterRule(_localctx, 1454, RULE_privilegeTypes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10097);
			privilegeType();
			setState(10099);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(10098);
				columnNames();
				}
			}

			setState(10108);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(10101);
				match(COMMA_);
				setState(10102);
				privilegeType();
				setState(10104);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(10103);
					columnNames();
					}
				}

				}
				}
				setState(10110);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OnObjectClauseContext extends ParserRuleContext {
		public TerminalNode DATABASE() { return getToken(PostgreSQLStatementParser.DATABASE, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public TerminalNode DOMAIN() { return getToken(PostgreSQLStatementParser.DOMAIN, 0); }
		public AnyNameListContext anyNameList() {
			return getRuleContext(AnyNameListContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PostgreSQLStatementParser.FUNCTION, 0); }
		public FunctionWithArgtypesListContext functionWithArgtypesList() {
			return getRuleContext(FunctionWithArgtypesListContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLStatementParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLStatementParser.ROUTINE, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLStatementParser.LANGUAGE, 0); }
		public TerminalNode LARGE() { return getToken(PostgreSQLStatementParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(PostgreSQLStatementParser.OBJECT, 0); }
		public NumericOnlyListContext numericOnlyList() {
			return getRuleContext(NumericOnlyListContext.class,0);
		}
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLStatementParser.TABLESPACE, 0); }
		public TerminalNode TYPE() { return getToken(PostgreSQLStatementParser.TYPE, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLStatementParser.SEQUENCE, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return getRuleContext(QualifiedNameListContext.class,0);
		}
		public PrivilegeLevelContext privilegeLevel() {
			return getRuleContext(PrivilegeLevelContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLStatementParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(PostgreSQLStatementParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLStatementParser.WRAPPER, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLStatementParser.SERVER, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TerminalNode TABLES() { return getToken(PostgreSQLStatementParser.TABLES, 0); }
		public TerminalNode IN() { return getToken(PostgreSQLStatementParser.IN, 0); }
		public TerminalNode SEQUENCES() { return getToken(PostgreSQLStatementParser.SEQUENCES, 0); }
		public TerminalNode FUNCTIONS() { return getToken(PostgreSQLStatementParser.FUNCTIONS, 0); }
		public TerminalNode PROCEDURES() { return getToken(PostgreSQLStatementParser.PROCEDURES, 0); }
		public TerminalNode ROUTINES() { return getToken(PostgreSQLStatementParser.ROUTINES, 0); }
		public OnObjectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onObjectClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterOnObjectClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitOnObjectClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitOnObjectClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnObjectClauseContext onObjectClause() throws RecognitionException {
		OnObjectClauseContext _localctx = new OnObjectClauseContext(_ctx, getState());
		enterRule(_localctx, 1456, RULE_onObjectClause);
		try {
			setState(10170);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1009,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10111);
				match(DATABASE);
				setState(10112);
				nameList(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10113);
				match(SCHEMA);
				setState(10114);
				nameList(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10115);
				match(DOMAIN);
				setState(10116);
				anyNameList();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10117);
				match(FUNCTION);
				setState(10118);
				functionWithArgtypesList();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10119);
				match(PROCEDURE);
				setState(10120);
				functionWithArgtypesList();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(10121);
				match(ROUTINE);
				setState(10122);
				functionWithArgtypesList();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(10123);
				match(LANGUAGE);
				setState(10124);
				nameList(0);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(10125);
				match(LARGE);
				setState(10126);
				match(OBJECT);
				setState(10127);
				numericOnlyList();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(10128);
				match(TABLESPACE);
				setState(10129);
				nameList(0);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(10130);
				match(TYPE);
				setState(10131);
				anyNameList();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(10132);
				match(SEQUENCE);
				setState(10133);
				qualifiedNameList(0);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(10135);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1008,_ctx) ) {
				case 1:
					{
					setState(10134);
					match(TABLE);
					}
					break;
				}
				setState(10137);
				privilegeLevel();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(10138);
				match(FOREIGN);
				setState(10139);
				match(DATA);
				setState(10140);
				match(WRAPPER);
				setState(10141);
				nameList(0);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(10142);
				match(FOREIGN);
				setState(10143);
				match(SERVER);
				setState(10144);
				nameList(0);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(10145);
				match(ALL);
				setState(10146);
				match(TABLES);
				setState(10147);
				match(IN);
				setState(10148);
				match(SCHEMA);
				setState(10149);
				nameList(0);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(10150);
				match(ALL);
				setState(10151);
				match(SEQUENCES);
				setState(10152);
				match(IN);
				setState(10153);
				match(SCHEMA);
				setState(10154);
				nameList(0);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(10155);
				match(ALL);
				setState(10156);
				match(FUNCTIONS);
				setState(10157);
				match(IN);
				setState(10158);
				match(SCHEMA);
				setState(10159);
				nameList(0);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(10160);
				match(ALL);
				setState(10161);
				match(PROCEDURES);
				setState(10162);
				match(IN);
				setState(10163);
				match(SCHEMA);
				setState(10164);
				nameList(0);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(10165);
				match(ALL);
				setState(10166);
				match(ROUTINES);
				setState(10167);
				match(IN);
				setState(10168);
				match(SCHEMA);
				setState(10169);
				nameList(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NumericOnlyListContext extends ParserRuleContext {
		public List<NumericOnlyContext> numericOnly() {
			return getRuleContexts(NumericOnlyContext.class);
		}
		public NumericOnlyContext numericOnly(int i) {
			return getRuleContext(NumericOnlyContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public NumericOnlyListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numericOnlyList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterNumericOnlyList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitNumericOnlyList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitNumericOnlyList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericOnlyListContext numericOnlyList() throws RecognitionException {
		NumericOnlyListContext _localctx = new NumericOnlyListContext(_ctx, getState());
		enterRule(_localctx, 1458, RULE_numericOnlyList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10172);
			numericOnly();
			setState(10177);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(10173);
				match(COMMA_);
				setState(10174);
				numericOnly();
				}
				}
				setState(10179);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrivilegeLevelContext extends ParserRuleContext {
		public TerminalNode ASTERISK_() { return getToken(PostgreSQLStatementParser.ASTERISK_, 0); }
		public TerminalNode DOT_ASTERISK_() { return getToken(PostgreSQLStatementParser.DOT_ASTERISK_, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TableNamesContext tableNames() {
			return getRuleContext(TableNamesContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(PostgreSQLStatementParser.DOT_, 0); }
		public RoutineNameContext routineName() {
			return getRuleContext(RoutineNameContext.class,0);
		}
		public PrivilegeLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeLevel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterPrivilegeLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitPrivilegeLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitPrivilegeLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeLevelContext privilegeLevel() throws RecognitionException {
		PrivilegeLevelContext _localctx = new PrivilegeLevelContext(_ctx, getState());
		enterRule(_localctx, 1460, RULE_privilegeLevel);
		try {
			setState(10191);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1011,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10180);
				match(ASTERISK_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10181);
				match(ASTERISK_);
				setState(10182);
				match(DOT_ASTERISK_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10183);
				identifier();
				setState(10184);
				match(DOT_ASTERISK_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10186);
				tableNames();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10187);
				schemaName();
				setState(10188);
				match(DOT_);
				setState(10189);
				routineName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RoutineNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public RoutineNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterRoutineName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitRoutineName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitRoutineName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutineNameContext routineName() throws RecognitionException {
		RoutineNameContext _localctx = new RoutineNameContext(_ctx, getState());
		enterRule(_localctx, 1462, RULE_routineName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10193);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrivilegeTypeContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PostgreSQLStatementParser.SELECT, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLStatementParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLStatementParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(PostgreSQLStatementParser.DELETE, 0); }
		public TerminalNode TRUNCATE() { return getToken(PostgreSQLStatementParser.TRUNCATE, 0); }
		public TerminalNode REFERENCES() { return getToken(PostgreSQLStatementParser.REFERENCES, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLStatementParser.TRIGGER, 0); }
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode CONNECT() { return getToken(PostgreSQLStatementParser.CONNECT, 0); }
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLStatementParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLStatementParser.TEMP, 0); }
		public TerminalNode EXECUTE() { return getToken(PostgreSQLStatementParser.EXECUTE, 0); }
		public TerminalNode USAGE() { return getToken(PostgreSQLStatementParser.USAGE, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PostgreSQLStatementParser.PRIVILEGES, 0); }
		public PrivilegeTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterPrivilegeType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitPrivilegeType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitPrivilegeType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeTypeContext privilegeType() throws RecognitionException {
		PrivilegeTypeContext _localctx = new PrivilegeTypeContext(_ctx, getState());
		enterRule(_localctx, 1464, RULE_privilegeType);
		int _la;
		try {
			setState(10212);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(10195);
				match(SELECT);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 2);
				{
				setState(10196);
				match(INSERT);
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(10197);
				match(UPDATE);
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 4);
				{
				setState(10198);
				match(DELETE);
				}
				break;
			case TRUNCATE:
				enterOuterAlt(_localctx, 5);
				{
				setState(10199);
				match(TRUNCATE);
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 6);
				{
				setState(10200);
				match(REFERENCES);
				}
				break;
			case TRIGGER:
				enterOuterAlt(_localctx, 7);
				{
				setState(10201);
				match(TRIGGER);
				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 8);
				{
				setState(10202);
				match(CREATE);
				}
				break;
			case CONNECT:
				enterOuterAlt(_localctx, 9);
				{
				setState(10203);
				match(CONNECT);
				}
				break;
			case TEMPORARY:
				enterOuterAlt(_localctx, 10);
				{
				setState(10204);
				match(TEMPORARY);
				}
				break;
			case TEMP:
				enterOuterAlt(_localctx, 11);
				{
				setState(10205);
				match(TEMP);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 12);
				{
				setState(10206);
				match(EXECUTE);
				}
				break;
			case USAGE:
				enterOuterAlt(_localctx, 13);
				{
				setState(10207);
				match(USAGE);
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 14);
				{
				setState(10208);
				match(ALL);
				setState(10210);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(10209);
					match(PRIVILEGES);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterSchemaContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public AlterSchemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSchema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAlterSchema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAlterSchema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAlterSchema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSchemaContext alterSchema() throws RecognitionException {
		AlterSchemaContext _localctx = new AlterSchemaContext(_ctx, getState());
		enterRule(_localctx, 1466, RULE_alterSchema);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10214);
			match(ALTER);
			setState(10215);
			match(SCHEMA);
			setState(10216);
			name();
			setState(10223);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				{
				setState(10217);
				match(RENAME);
				setState(10218);
				match(TO);
				setState(10219);
				name();
				}
				break;
			case OWNER:
				{
				setState(10220);
				match(OWNER);
				setState(10221);
				match(TO);
				setState(10222);
				roleSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropSchemaContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropSchemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropSchema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterDropSchema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitDropSchema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitDropSchema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropSchemaContext dropSchema() throws RecognitionException {
		DropSchemaContext _localctx = new DropSchemaContext(_ctx, getState());
		enterRule(_localctx, 1468, RULE_dropSchema);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10225);
			match(DROP);
			setState(10226);
			match(SCHEMA);
			setState(10228);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1015,_ctx) ) {
			case 1:
				{
				setState(10227);
				ifExists();
				}
				break;
			}
			setState(10230);
			nameList(0);
			setState(10232);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(10231);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(PostgreSQLStatementParser.SHOW, 0); }
		public VarNameContext varName() {
			return getRuleContext(VarNameContext.class,0);
		}
		public TerminalNode TIME() { return getToken(PostgreSQLStatementParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLStatementParser.ZONE, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLStatementParser.TRANSACTION, 0); }
		public TerminalNode ISOLATION() { return getToken(PostgreSQLStatementParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLStatementParser.LEVEL, 0); }
		public TerminalNode SESSION() { return getToken(PostgreSQLStatementParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLStatementParser.AUTHORIZATION, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public ShowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterShow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitShow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitShow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowContext show() throws RecognitionException {
		ShowContext _localctx = new ShowContext(_ctx, getState());
		enterRule(_localctx, 1470, RULE_show);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10234);
			match(SHOW);
			setState(10244);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1017,_ctx) ) {
			case 1:
				{
				setState(10235);
				varName(0);
				}
				break;
			case 2:
				{
				setState(10236);
				match(TIME);
				setState(10237);
				match(ZONE);
				}
				break;
			case 3:
				{
				setState(10238);
				match(TRANSACTION);
				setState(10239);
				match(ISOLATION);
				setState(10240);
				match(LEVEL);
				}
				break;
			case 4:
				{
				setState(10241);
				match(SESSION);
				setState(10242);
				match(AUTHORIZATION);
				}
				break;
			case 5:
				{
				setState(10243);
				match(ALL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TimeZoneClauseContext timeZoneClause() {
			return getRuleContext(TimeZoneClauseContext.class,0);
		}
		public ConfigurationParameterClauseContext configurationParameterClause() {
			return getRuleContext(ConfigurationParameterClauseContext.class,0);
		}
		public VarNameContext varName() {
			return getRuleContext(VarNameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public TerminalNode CURRENT() { return getToken(PostgreSQLStatementParser.CURRENT, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLStatementParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLStatementParser.ZONE, 0); }
		public ZoneValueContext zoneValue() {
			return getRuleContext(ZoneValueContext.class,0);
		}
		public TerminalNode CATALOG() { return getToken(PostgreSQLStatementParser.CATALOG, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public TerminalNode NAMES() { return getToken(PostgreSQLStatementParser.NAMES, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLStatementParser.ROLE, 0); }
		public NonReservedWordOrSconstContext nonReservedWordOrSconst() {
			return getRuleContext(NonReservedWordOrSconstContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(PostgreSQLStatementParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLStatementParser.AUTHORIZATION, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public TerminalNode XML() { return getToken(PostgreSQLStatementParser.XML, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLStatementParser.OPTION, 0); }
		public DocumentOrContentContext documentOrContent() {
			return getRuleContext(DocumentOrContentContext.class,0);
		}
		public RuntimeScopeContext runtimeScope() {
			return getRuleContext(RuntimeScopeContext.class,0);
		}
		public EncodingContext encoding() {
			return getRuleContext(EncodingContext.class,0);
		}
		public SetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetContext set() throws RecognitionException {
		SetContext _localctx = new SetContext(_ctx, getState());
		enterRule(_localctx, 1472, RULE_set);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10246);
			match(SET);
			setState(10248);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1018,_ctx) ) {
			case 1:
				{
				setState(10247);
				runtimeScope();
				}
				break;
			}
			setState(10278);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1020,_ctx) ) {
			case 1:
				{
				setState(10250);
				timeZoneClause();
				}
				break;
			case 2:
				{
				setState(10251);
				configurationParameterClause();
				}
				break;
			case 3:
				{
				setState(10252);
				varName(0);
				setState(10253);
				match(FROM);
				setState(10254);
				match(CURRENT);
				}
				break;
			case 4:
				{
				setState(10256);
				match(TIME);
				setState(10257);
				match(ZONE);
				setState(10258);
				zoneValue();
				}
				break;
			case 5:
				{
				setState(10259);
				match(CATALOG);
				setState(10260);
				match(STRING_);
				}
				break;
			case 6:
				{
				setState(10261);
				match(SCHEMA);
				setState(10262);
				match(STRING_);
				}
				break;
			case 7:
				{
				setState(10263);
				match(NAMES);
				setState(10265);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT || _la==STRING_) {
					{
					setState(10264);
					encoding();
					}
				}

				}
				break;
			case 8:
				{
				setState(10267);
				match(ROLE);
				setState(10268);
				nonReservedWordOrSconst();
				}
				break;
			case 9:
				{
				setState(10269);
				match(SESSION);
				setState(10270);
				match(AUTHORIZATION);
				setState(10271);
				nonReservedWordOrSconst();
				}
				break;
			case 10:
				{
				setState(10272);
				match(SESSION);
				setState(10273);
				match(AUTHORIZATION);
				setState(10274);
				match(DEFAULT);
				}
				break;
			case 11:
				{
				setState(10275);
				match(XML);
				setState(10276);
				match(OPTION);
				setState(10277);
				documentOrContent();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RuntimeScopeContext extends ParserRuleContext {
		public TerminalNode SESSION() { return getToken(PostgreSQLStatementParser.SESSION, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLStatementParser.LOCAL, 0); }
		public RuntimeScopeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_runtimeScope; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterRuntimeScope(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitRuntimeScope(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitRuntimeScope(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuntimeScopeContext runtimeScope() throws RecognitionException {
		RuntimeScopeContext _localctx = new RuntimeScopeContext(_ctx, getState());
		enterRule(_localctx, 1474, RULE_runtimeScope);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10280);
			_la = _input.LA(1);
			if ( !(_la==SESSION || _la==LOCAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TimeZoneClauseContext extends ParserRuleContext {
		public TerminalNode TIME() { return getToken(PostgreSQLStatementParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLStatementParser.ZONE, 0); }
		public NumberLiteralsContext numberLiterals() {
			return getRuleContext(NumberLiteralsContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(PostgreSQLStatementParser.LOCAL, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public TimeZoneClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timeZoneClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterTimeZoneClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitTimeZoneClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitTimeZoneClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimeZoneClauseContext timeZoneClause() throws RecognitionException {
		TimeZoneClauseContext _localctx = new TimeZoneClauseContext(_ctx, getState());
		enterRule(_localctx, 1476, RULE_timeZoneClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10282);
			match(TIME);
			setState(10283);
			match(ZONE);
			setState(10287);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MINUS_:
			case NUMBER_:
				{
				setState(10284);
				numberLiterals();
				}
				break;
			case LOCAL:
				{
				setState(10285);
				match(LOCAL);
				}
				break;
			case DEFAULT:
				{
				setState(10286);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConfigurationParameterClauseContext extends ParserRuleContext {
		public VarNameContext varName() {
			return getRuleContext(VarNameContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode EQ_() { return getToken(PostgreSQLStatementParser.EQ_, 0); }
		public VarListContext varList() {
			return getRuleContext(VarListContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public ConfigurationParameterClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_configurationParameterClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterConfigurationParameterClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitConfigurationParameterClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitConfigurationParameterClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConfigurationParameterClauseContext configurationParameterClause() throws RecognitionException {
		ConfigurationParameterClauseContext _localctx = new ConfigurationParameterClauseContext(_ctx, getState());
		enterRule(_localctx, 1478, RULE_configurationParameterClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10289);
			varName(0);
			setState(10290);
			_la = _input.LA(1);
			if ( !(_la==EQ_ || _la==TO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(10293);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PLUS_:
			case MINUS_:
			case UNICODE_ESCAPE:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXISTS:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case BIT:
			case XML:
			case JSON:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case OUT:
			case INOUT:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case ON:
			case IF:
			case IS:
			case TRUE:
			case FALSE:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
				{
				setState(10291);
				varList();
				}
				break;
			case DEFAULT:
				{
				setState(10292);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ResetParameterContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(PostgreSQLStatementParser.RESET, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ResetParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterResetParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitResetParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitResetParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetParameterContext resetParameter() throws RecognitionException {
		ResetParameterContext _localctx = new ResetParameterContext(_ctx, getState());
		enterRule(_localctx, 1480, RULE_resetParameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10295);
			match(RESET);
			setState(10298);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(10296);
				match(ALL);
				}
				break;
			case UNICODE_ESCAPE:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case XML:
			case JSON:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case PARAM:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case NATIONAL:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case IDENTIFIER_:
				{
				setState(10297);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExplainContext extends ParserRuleContext {
		public TerminalNode EXPLAIN() { return getToken(PostgreSQLStatementParser.EXPLAIN, 0); }
		public ExplainableStmtContext explainableStmt() {
			return getRuleContext(ExplainableStmtContext.class,0);
		}
		public AnalyzeKeywordContext analyzeKeyword() {
			return getRuleContext(AnalyzeKeywordContext.class,0);
		}
		public TerminalNode VERBOSE() { return getToken(PostgreSQLStatementParser.VERBOSE, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ExplainOptionListContext explainOptionList() {
			return getRuleContext(ExplainOptionListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public ExplainContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterExplain(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitExplain(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitExplain(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainContext explain() throws RecognitionException {
		ExplainContext _localctx = new ExplainContext(_ctx, getState());
		enterRule(_localctx, 1482, RULE_explain);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10300);
			match(EXPLAIN);
			setState(10310);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1025,_ctx) ) {
			case 1:
				{
				setState(10301);
				analyzeKeyword();
				setState(10303);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERBOSE) {
					{
					setState(10302);
					match(VERBOSE);
					}
				}

				}
				break;
			case 2:
				{
				setState(10305);
				match(VERBOSE);
				}
				break;
			case 3:
				{
				setState(10306);
				match(LP_);
				setState(10307);
				explainOptionList();
				setState(10308);
				match(RP_);
				}
				break;
			}
			setState(10312);
			explainableStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExplainableStmtContext extends ParserRuleContext {
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public InsertContext insert() {
			return getRuleContext(InsertContext.class,0);
		}
		public UpdateContext update() {
			return getRuleContext(UpdateContext.class,0);
		}
		public DeleteContext delete() {
			return getRuleContext(DeleteContext.class,0);
		}
		public DeclareContext declare() {
			return getRuleContext(DeclareContext.class,0);
		}
		public ExecuteStmtContext executeStmt() {
			return getRuleContext(ExecuteStmtContext.class,0);
		}
		public CreateMaterializedViewContext createMaterializedView() {
			return getRuleContext(CreateMaterializedViewContext.class,0);
		}
		public RefreshMatViewStmtContext refreshMatViewStmt() {
			return getRuleContext(RefreshMatViewStmtContext.class,0);
		}
		public ExplainableStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainableStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterExplainableStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitExplainableStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitExplainableStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainableStmtContext explainableStmt() throws RecognitionException {
		ExplainableStmtContext _localctx = new ExplainableStmtContext(_ctx, getState());
		enterRule(_localctx, 1484, RULE_explainableStmt);
		try {
			setState(10322);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1026,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10314);
				select();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10315);
				insert();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10316);
				update();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10317);
				delete();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10318);
				declare();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(10319);
				executeStmt();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(10320);
				createMaterializedView();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(10321);
				refreshMatViewStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExplainOptionListContext extends ParserRuleContext {
		public List<ExplainOptionElemContext> explainOptionElem() {
			return getRuleContexts(ExplainOptionElemContext.class);
		}
		public ExplainOptionElemContext explainOptionElem(int i) {
			return getRuleContext(ExplainOptionElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public ExplainOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterExplainOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitExplainOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitExplainOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainOptionListContext explainOptionList() throws RecognitionException {
		ExplainOptionListContext _localctx = new ExplainOptionListContext(_ctx, getState());
		enterRule(_localctx, 1486, RULE_explainOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10324);
			explainOptionElem();
			setState(10329);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(10325);
				match(COMMA_);
				setState(10326);
				explainOptionElem();
				}
				}
				setState(10331);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExplainOptionElemContext extends ParserRuleContext {
		public ExplainOptionNameContext explainOptionName() {
			return getRuleContext(ExplainOptionNameContext.class,0);
		}
		public ExplainOptionArgContext explainOptionArg() {
			return getRuleContext(ExplainOptionArgContext.class,0);
		}
		public ExplainOptionElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainOptionElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterExplainOptionElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitExplainOptionElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitExplainOptionElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainOptionElemContext explainOptionElem() throws RecognitionException {
		ExplainOptionElemContext _localctx = new ExplainOptionElemContext(_ctx, getState());
		enterRule(_localctx, 1488, RULE_explainOptionElem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10332);
			explainOptionName();
			setState(10334);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 562949953445888L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 9223369740640581631L) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & -2265312813738106881L) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & 8070450531870541949L) != 0) || ((((_la - 266)) & ~0x3f) == 0 && ((1L << (_la - 266)) & -14081L) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & -1L) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & -4109613824810680321L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & 6908682116985217119L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -5239663288678363149L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 113L) != 0)) {
				{
				setState(10333);
				explainOptionArg();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExplainOptionArgContext extends ParserRuleContext {
		public BooleanOrStringContext booleanOrString() {
			return getRuleContext(BooleanOrStringContext.class,0);
		}
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public ExplainOptionArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainOptionArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterExplainOptionArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitExplainOptionArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitExplainOptionArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainOptionArgContext explainOptionArg() throws RecognitionException {
		ExplainOptionArgContext _localctx = new ExplainOptionArgContext(_ctx, getState());
		enterRule(_localctx, 1490, RULE_explainOptionArg);
		try {
			setState(10338);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNICODE_ESCAPE:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXISTS:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case BIT:
			case XML:
			case JSON:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case OUT:
			case INOUT:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case ON:
			case IF:
			case IS:
			case TRUE:
			case FALSE:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case IDENTIFIER_:
			case STRING_:
				enterOuterAlt(_localctx, 1);
				{
				setState(10336);
				booleanOrString();
				}
				break;
			case PLUS_:
			case MINUS_:
			case NUMBER_:
				enterOuterAlt(_localctx, 2);
				{
				setState(10337);
				numericOnly();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExplainOptionNameContext extends ParserRuleContext {
		public NonReservedWordContext nonReservedWord() {
			return getRuleContext(NonReservedWordContext.class,0);
		}
		public AnalyzeKeywordContext analyzeKeyword() {
			return getRuleContext(AnalyzeKeywordContext.class,0);
		}
		public ExplainOptionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainOptionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterExplainOptionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitExplainOptionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitExplainOptionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainOptionNameContext explainOptionName() throws RecognitionException {
		ExplainOptionNameContext _localctx = new ExplainOptionNameContext(_ctx, getState());
		enterRule(_localctx, 1492, RULE_explainOptionName);
		try {
			setState(10342);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNICODE_ESCAPE:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXISTS:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case BIT:
			case XML:
			case JSON:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case OUT:
			case INOUT:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(10340);
				nonReservedWord();
				}
				break;
			case ANALYSE:
			case ANALYZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(10341);
				analyzeKeyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AnalyzeKeywordContext extends ParserRuleContext {
		public TerminalNode ANALYZE() { return getToken(PostgreSQLStatementParser.ANALYZE, 0); }
		public TerminalNode ANALYSE() { return getToken(PostgreSQLStatementParser.ANALYSE, 0); }
		public AnalyzeKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyzeKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAnalyzeKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAnalyzeKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAnalyzeKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnalyzeKeywordContext analyzeKeyword() throws RecognitionException {
		AnalyzeKeywordContext _localctx = new AnalyzeKeywordContext(_ctx, getState());
		enterRule(_localctx, 1494, RULE_analyzeKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10344);
			_la = _input.LA(1);
			if ( !(_la==ANALYSE || _la==ANALYZE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AnalyzeTableContext extends ParserRuleContext {
		public AnalyzeKeywordContext analyzeKeyword() {
			return getRuleContext(AnalyzeKeywordContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public VacAnalyzeOptionListContext vacAnalyzeOptionList() {
			return getRuleContext(VacAnalyzeOptionListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public VacuumRelationListContext vacuumRelationList() {
			return getRuleContext(VacuumRelationListContext.class,0);
		}
		public TerminalNode VERBOSE() { return getToken(PostgreSQLStatementParser.VERBOSE, 0); }
		public AnalyzeTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyzeTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterAnalyzeTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitAnalyzeTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitAnalyzeTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnalyzeTableContext analyzeTable() throws RecognitionException {
		AnalyzeTableContext _localctx = new AnalyzeTableContext(_ctx, getState());
		enterRule(_localctx, 1496, RULE_analyzeTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10346);
			analyzeKeyword();
			setState(10354);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case SEMI_:
			case UNICODE_ESCAPE:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case XML:
			case JSON:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case VERBOSE:
			case PARAM:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case NATIONAL:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case IDENTIFIER_:
				{
				setState(10348);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERBOSE) {
					{
					setState(10347);
					match(VERBOSE);
					}
				}

				}
				break;
			case LP_:
				{
				setState(10350);
				match(LP_);
				setState(10351);
				vacAnalyzeOptionList();
				setState(10352);
				match(RP_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(10357);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & -1702650966907551743L) != 0) || ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & -36028934466307075L) != 0) || ((((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & 283126353889277L) != 0) || ((((_la - 241)) & ~0x3f) == 0 && ((1L << (_la - 241)) & -545622264849L) != 0) || ((((_la - 305)) & ~0x3f) == 0 && ((1L << (_la - 305)) & -1L) != 0) || ((((_la - 369)) & ~0x3f) == 0 && ((1L << (_la - 369)) & 9895604649983L) != 0) || ((((_la - 437)) & ~0x3f) == 0 && ((1L << (_la - 437)) & 562950016917239L) != 0) || ((((_la - 505)) & ~0x3f) == 0 && ((1L << (_la - 505)) & 7138750043982826433L) != 0) || ((((_la - 569)) & ~0x3f) == 0 && ((1L << (_la - 569)) & 2173569L) != 0)) {
				{
				setState(10356);
				vacuumRelationList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VacuumRelationListContext extends ParserRuleContext {
		public List<VacuumRelationContext> vacuumRelation() {
			return getRuleContexts(VacuumRelationContext.class);
		}
		public VacuumRelationContext vacuumRelation(int i) {
			return getRuleContext(VacuumRelationContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public VacuumRelationListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuumRelationList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterVacuumRelationList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitVacuumRelationList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitVacuumRelationList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VacuumRelationListContext vacuumRelationList() throws RecognitionException {
		VacuumRelationListContext _localctx = new VacuumRelationListContext(_ctx, getState());
		enterRule(_localctx, 1498, RULE_vacuumRelationList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10359);
			vacuumRelation();
			setState(10364);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(10360);
				match(COMMA_);
				setState(10361);
				vacuumRelation();
				}
				}
				setState(10366);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VacuumRelationContext extends ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public OptNameListContext optNameList() {
			return getRuleContext(OptNameListContext.class,0);
		}
		public VacuumRelationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuumRelation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterVacuumRelation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitVacuumRelation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitVacuumRelation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VacuumRelationContext vacuumRelation() throws RecognitionException {
		VacuumRelationContext _localctx = new VacuumRelationContext(_ctx, getState());
		enterRule(_localctx, 1500, RULE_vacuumRelation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10367);
			qualifiedName();
			setState(10368);
			optNameList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VacAnalyzeOptionListContext extends ParserRuleContext {
		public List<VacAnalyzeOptionElemContext> vacAnalyzeOptionElem() {
			return getRuleContexts(VacAnalyzeOptionElemContext.class);
		}
		public VacAnalyzeOptionElemContext vacAnalyzeOptionElem(int i) {
			return getRuleContext(VacAnalyzeOptionElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public VacAnalyzeOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacAnalyzeOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterVacAnalyzeOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitVacAnalyzeOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitVacAnalyzeOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VacAnalyzeOptionListContext vacAnalyzeOptionList() throws RecognitionException {
		VacAnalyzeOptionListContext _localctx = new VacAnalyzeOptionListContext(_ctx, getState());
		enterRule(_localctx, 1502, RULE_vacAnalyzeOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10370);
			vacAnalyzeOptionElem();
			setState(10375);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(10371);
				match(COMMA_);
				setState(10372);
				vacAnalyzeOptionElem();
				}
				}
				setState(10377);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VacAnalyzeOptionElemContext extends ParserRuleContext {
		public VacAnalyzeOptionNameContext vacAnalyzeOptionName() {
			return getRuleContext(VacAnalyzeOptionNameContext.class,0);
		}
		public VacAnalyzeOptionArgContext vacAnalyzeOptionArg() {
			return getRuleContext(VacAnalyzeOptionArgContext.class,0);
		}
		public VacAnalyzeOptionElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacAnalyzeOptionElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterVacAnalyzeOptionElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitVacAnalyzeOptionElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitVacAnalyzeOptionElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VacAnalyzeOptionElemContext vacAnalyzeOptionElem() throws RecognitionException {
		VacAnalyzeOptionElemContext _localctx = new VacAnalyzeOptionElemContext(_ctx, getState());
		enterRule(_localctx, 1504, RULE_vacAnalyzeOptionElem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10378);
			vacAnalyzeOptionName();
			setState(10380);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 562949953445888L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 9223369740640581631L) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & -2265312813738106881L) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & 8070450531870541949L) != 0) || ((((_la - 266)) & ~0x3f) == 0 && ((1L << (_la - 266)) & -14081L) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & -1L) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & -4109613824810680321L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & 6908682116985217119L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -5239663288678363149L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 113L) != 0)) {
				{
				setState(10379);
				vacAnalyzeOptionArg();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VacAnalyzeOptionArgContext extends ParserRuleContext {
		public BooleanOrStringContext booleanOrString() {
			return getRuleContext(BooleanOrStringContext.class,0);
		}
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public VacAnalyzeOptionArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacAnalyzeOptionArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterVacAnalyzeOptionArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitVacAnalyzeOptionArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitVacAnalyzeOptionArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VacAnalyzeOptionArgContext vacAnalyzeOptionArg() throws RecognitionException {
		VacAnalyzeOptionArgContext _localctx = new VacAnalyzeOptionArgContext(_ctx, getState());
		enterRule(_localctx, 1506, RULE_vacAnalyzeOptionArg);
		try {
			setState(10384);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNICODE_ESCAPE:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXISTS:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case BIT:
			case XML:
			case JSON:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case OUT:
			case INOUT:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case ON:
			case IF:
			case IS:
			case TRUE:
			case FALSE:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case IDENTIFIER_:
			case STRING_:
				enterOuterAlt(_localctx, 1);
				{
				setState(10382);
				booleanOrString();
				}
				break;
			case PLUS_:
			case MINUS_:
			case NUMBER_:
				enterOuterAlt(_localctx, 2);
				{
				setState(10383);
				numericOnly();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VacAnalyzeOptionNameContext extends ParserRuleContext {
		public NonReservedWordContext nonReservedWord() {
			return getRuleContext(NonReservedWordContext.class,0);
		}
		public AnalyzeKeywordContext analyzeKeyword() {
			return getRuleContext(AnalyzeKeywordContext.class,0);
		}
		public VacAnalyzeOptionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacAnalyzeOptionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterVacAnalyzeOptionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitVacAnalyzeOptionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitVacAnalyzeOptionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VacAnalyzeOptionNameContext vacAnalyzeOptionName() throws RecognitionException {
		VacAnalyzeOptionNameContext _localctx = new VacAnalyzeOptionNameContext(_ctx, getState());
		enterRule(_localctx, 1508, RULE_vacAnalyzeOptionName);
		try {
			setState(10388);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNICODE_ESCAPE:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXISTS:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case BIT:
			case XML:
			case JSON:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case OUT:
			case INOUT:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(10386);
				nonReservedWord();
				}
				break;
			case ANALYSE:
			case ANALYZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(10387);
				analyzeKeyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LoadContext extends ParserRuleContext {
		public TerminalNode LOAD() { return getToken(PostgreSQLStatementParser.LOAD, 0); }
		public FileNameContext fileName() {
			return getRuleContext(FileNameContext.class,0);
		}
		public LoadContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_load; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterLoad(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitLoad(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitLoad(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadContext load() throws RecognitionException {
		LoadContext _localctx = new LoadContext(_ctx, getState());
		enterRule(_localctx, 1510, RULE_load);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10390);
			match(LOAD);
			setState(10391);
			fileName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VacuumContext extends ParserRuleContext {
		public TerminalNode VACUUM() { return getToken(PostgreSQLStatementParser.VACUUM, 0); }
		public VacuumRelationListContext vacuumRelationList() {
			return getRuleContext(VacuumRelationListContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public VacAnalyzeOptionListContext vacAnalyzeOptionList() {
			return getRuleContext(VacAnalyzeOptionListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode FULL() { return getToken(PostgreSQLStatementParser.FULL, 0); }
		public TerminalNode FREEZE() { return getToken(PostgreSQLStatementParser.FREEZE, 0); }
		public TerminalNode VERBOSE() { return getToken(PostgreSQLStatementParser.VERBOSE, 0); }
		public TerminalNode ANALYZE() { return getToken(PostgreSQLStatementParser.ANALYZE, 0); }
		public VacuumContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuum; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterVacuum(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitVacuum(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitVacuum(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VacuumContext vacuum() throws RecognitionException {
		VacuumContext _localctx = new VacuumContext(_ctx, getState());
		enterRule(_localctx, 1512, RULE_vacuum);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10393);
			match(VACUUM);
			setState(10410);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case SEMI_:
			case UNICODE_ESCAPE:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case MOD:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENDED:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MAIN:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case BYTEA:
			case ENUM:
			case POINT:
			case LSEG:
			case BOX:
			case PATH:
			case POLYGON:
			case CIRCLE:
			case XML:
			case JSON:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case ANALYZE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case VERBOSE:
			case PARAM:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case INDEX:
			case CONSTRAINT:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case FULL:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case NATIONAL:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case IDENTIFIER_:
				{
				{
				setState(10395);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(10394);
					match(FULL);
					}
				}

				setState(10398);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FREEZE) {
					{
					setState(10397);
					match(FREEZE);
					}
				}

				setState(10401);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERBOSE) {
					{
					setState(10400);
					match(VERBOSE);
					}
				}

				setState(10404);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANALYZE) {
					{
					setState(10403);
					match(ANALYZE);
					}
				}

				}
				}
				break;
			case LP_:
				{
				{
				setState(10406);
				match(LP_);
				setState(10407);
				vacAnalyzeOptionList();
				setState(10408);
				match(RP_);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(10413);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & -1702650966907551743L) != 0) || ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & -36028934466307075L) != 0) || ((((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & 283126353889277L) != 0) || ((((_la - 241)) & ~0x3f) == 0 && ((1L << (_la - 241)) & -545622264849L) != 0) || ((((_la - 305)) & ~0x3f) == 0 && ((1L << (_la - 305)) & -1L) != 0) || ((((_la - 369)) & ~0x3f) == 0 && ((1L << (_la - 369)) & 9895604649983L) != 0) || ((((_la - 437)) & ~0x3f) == 0 && ((1L << (_la - 437)) & 562950016917239L) != 0) || ((((_la - 505)) & ~0x3f) == 0 && ((1L << (_la - 505)) & 7138750043982826433L) != 0) || ((((_la - 569)) & ~0x3f) == 0 && ((1L << (_la - 569)) & 2173569L) != 0)) {
				{
				setState(10412);
				vacuumRelationList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EmptyStatementContext extends ParserRuleContext {
		public EmptyStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_emptyStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterEmptyStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitEmptyStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitEmptyStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EmptyStatementContext emptyStatement() throws RecognitionException {
		EmptyStatementContext _localctx = new EmptyStatementContext(_ctx, getState());
		enterRule(_localctx, 1514, RULE_emptyStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CallContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(PostgreSQLStatementParser.CALL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public CallArgumentsContext callArguments() {
			return getRuleContext(CallArgumentsContext.class,0);
		}
		public CallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_call; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CallContext call() throws RecognitionException {
		CallContext _localctx = new CallContext(_ctx, getState());
		enterRule(_localctx, 1516, RULE_call);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10417);
			match(CALL);
			setState(10418);
			identifier();
			setState(10419);
			match(LP_);
			setState(10421);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -559649807899894L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1140468705394689L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -1125899911037185L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -9288678474974265L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -16651041L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -1L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -2386907801969491969L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & -9060151442713576613L) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & 2594073246580080639L) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & 116445L) != 0)) {
				{
				setState(10420);
				callArguments();
				}
			}

			setState(10423);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CallArgumentsContext extends ParserRuleContext {
		public List<CallArgumentContext> callArgument() {
			return getRuleContexts(CallArgumentContext.class);
		}
		public CallArgumentContext callArgument(int i) {
			return getRuleContext(CallArgumentContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public CallArgumentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callArguments; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCallArguments(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCallArguments(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCallArguments(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CallArgumentsContext callArguments() throws RecognitionException {
		CallArgumentsContext _localctx = new CallArgumentsContext(_ctx, getState());
		enterRule(_localctx, 1518, RULE_callArguments);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10425);
			callArgument();
			setState(10430);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(10426);
				match(COMMA_);
				setState(10427);
				callArgument();
				}
				}
				setState(10432);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CallArgumentContext extends ParserRuleContext {
		public PositionalNotationContext positionalNotation() {
			return getRuleContext(PositionalNotationContext.class,0);
		}
		public NamedNotationContext namedNotation() {
			return getRuleContext(NamedNotationContext.class,0);
		}
		public CallArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callArgument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterCallArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitCallArgument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitCallArgument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CallArgumentContext callArgument() throws RecognitionException {
		CallArgumentContext _localctx = new CallArgumentContext(_ctx, getState());
		enterRule(_localctx, 1520, RULE_callArgument);
		try {
			setState(10435);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1047,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10433);
				positionalNotation();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10434);
				namedNotation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PositionalNotationContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public PositionalNotationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_positionalNotation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterPositionalNotation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitPositionalNotation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitPositionalNotation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PositionalNotationContext positionalNotation() throws RecognitionException {
		PositionalNotationContext _localctx = new PositionalNotationContext(_ctx, getState());
		enterRule(_localctx, 1522, RULE_positionalNotation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10437);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NamedNotationContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(PostgreSQLStatementParser.EQ_, 0); }
		public TerminalNode GT_() { return getToken(PostgreSQLStatementParser.GT_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public NamedNotationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namedNotation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).enterNamedNotation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLStatementParserListener ) ((PostgreSQLStatementParserListener)listener).exitNamedNotation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementParserVisitor ) return ((PostgreSQLStatementParserVisitor<? extends T>)visitor).visitNamedNotation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NamedNotationContext namedNotation() throws RecognitionException {
		NamedNotationContext _localctx = new NamedNotationContext(_ctx, getState());
		enterRule(_localctx, 1524, RULE_namedNotation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10439);
			identifier();
			setState(10440);
			match(EQ_);
			setState(10441);
			match(GT_);
			setState(10442);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 24:
			return insertColumnList_sempred((InsertColumnListContext)_localctx, predIndex);
		case 29:
			return setClauseList_sempred((SetClauseListContext)_localctx, predIndex);
		case 32:
			return setTargetList_sempred((SetTargetListContext)_localctx, predIndex);
		case 40:
			return selectClauseN_sempred((SelectClauseNContext)_localctx, predIndex);
		case 51:
			return forLockingItems_sempred((ForLockingItemsContext)_localctx, predIndex);
		case 56:
			return qualifiedNameList_sempred((QualifiedNameListContext)_localctx, predIndex);
		case 58:
			return valuesClause_sempred((ValuesClauseContext)_localctx, predIndex);
		case 67:
			return targetList_sempred((TargetListContext)_localctx, predIndex);
		case 77:
			return windowDefinitionList_sempred((WindowDefinitionListContext)_localctx, predIndex);
		case 88:
			return fromList_sempred((FromListContext)_localctx, predIndex);
		case 89:
			return tableReference_sempred((TableReferenceContext)_localctx, predIndex);
		case 134:
			return aExpr_sempred((AExprContext)_localctx, predIndex);
		case 135:
			return bExpr_sempred((BExprContext)_localctx, predIndex);
		case 137:
			return indirection_sempred((IndirectionContext)_localctx, predIndex);
		case 138:
			return optIndirection_sempred((OptIndirectionContext)_localctx, predIndex);
		case 181:
			return xmlTableColumnOptionList_sempred((XmlTableColumnOptionListContext)_localctx, predIndex);
		case 194:
			return exprList_sempred((ExprListContext)_localctx, predIndex);
		case 207:
			return attrs_sempred((AttrsContext)_localctx, predIndex);
		case 215:
			return optArrayBounds_sempred((OptArrayBoundsContext)_localctx, predIndex);
		case 242:
			return nameList_sempred((NameListContext)_localctx, predIndex);
		case 277:
			return varName_sempred((VarNameContext)_localctx, predIndex);
		case 600:
			return tableLikeOptionList_sempred((TableLikeOptionListContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean insertColumnList_sempred(InsertColumnListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean setClauseList_sempred(SetClauseListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean setTargetList_sempred(SetTargetListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean selectClauseN_sempred(SelectClauseNContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3:
			return precpred(_ctx, 2);
		case 4:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean forLockingItems_sempred(ForLockingItemsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean qualifiedNameList_sempred(QualifiedNameListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean valuesClause_sempred(ValuesClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean targetList_sempred(TargetListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean windowDefinitionList_sempred(WindowDefinitionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean fromList_sempred(FromListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean tableReference_sempred(TableReferenceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean aExpr_sempred(AExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12:
			return precpred(_ctx, 51);
		case 13:
			return precpred(_ctx, 48);
		case 14:
			return precpred(_ctx, 47);
		case 15:
			return precpred(_ctx, 46);
		case 16:
			return precpred(_ctx, 45);
		case 17:
			return precpred(_ctx, 44);
		case 18:
			return precpred(_ctx, 43);
		case 19:
			return precpred(_ctx, 42);
		case 20:
			return precpred(_ctx, 41);
		case 21:
			return precpred(_ctx, 40);
		case 22:
			return precpred(_ctx, 37);
		case 23:
			return precpred(_ctx, 35);
		case 24:
			return precpred(_ctx, 34);
		case 25:
			return precpred(_ctx, 22);
		case 26:
			return precpred(_ctx, 21);
		case 27:
			return precpred(_ctx, 18);
		case 28:
			return precpred(_ctx, 17);
		case 29:
			return precpred(_ctx, 16);
		case 30:
			return precpred(_ctx, 15);
		case 31:
			return precpred(_ctx, 3);
		case 32:
			return precpred(_ctx, 2);
		case 33:
			return precpred(_ctx, 53);
		case 34:
			return precpred(_ctx, 52);
		case 35:
			return precpred(_ctx, 38);
		case 36:
			return precpred(_ctx, 33);
		case 37:
			return precpred(_ctx, 32);
		case 38:
			return precpred(_ctx, 31);
		case 39:
			return precpred(_ctx, 30);
		case 40:
			return precpred(_ctx, 28);
		case 41:
			return precpred(_ctx, 27);
		case 42:
			return precpred(_ctx, 26);
		case 43:
			return precpred(_ctx, 25);
		case 44:
			return precpred(_ctx, 24);
		case 45:
			return precpred(_ctx, 23);
		case 46:
			return precpred(_ctx, 20);
		case 47:
			return precpred(_ctx, 19);
		case 48:
			return precpred(_ctx, 14);
		case 49:
			return precpred(_ctx, 13);
		case 50:
			return precpred(_ctx, 12);
		case 51:
			return precpred(_ctx, 11);
		case 52:
			return precpred(_ctx, 9);
		case 53:
			return precpred(_ctx, 8);
		case 54:
			return precpred(_ctx, 7);
		case 55:
			return precpred(_ctx, 6);
		case 56:
			return precpred(_ctx, 5);
		case 57:
			return precpred(_ctx, 4);
		}
		return true;
	}
	private boolean bExpr_sempred(BExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 58:
			return precpred(_ctx, 9);
		case 59:
			return precpred(_ctx, 6);
		case 60:
			return precpred(_ctx, 5);
		case 61:
			return precpred(_ctx, 12);
		case 62:
			return precpred(_ctx, 7);
		case 63:
			return precpred(_ctx, 4);
		case 64:
			return precpred(_ctx, 3);
		case 65:
			return precpred(_ctx, 2);
		case 66:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean indirection_sempred(IndirectionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 67:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean optIndirection_sempred(OptIndirectionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 68:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean xmlTableColumnOptionList_sempred(XmlTableColumnOptionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 69:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean exprList_sempred(ExprListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 70:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean attrs_sempred(AttrsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 71:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean optArrayBounds_sempred(OptArrayBoundsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 72:
			return precpred(_ctx, 3);
		case 73:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean nameList_sempred(NameListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 74:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean varName_sempred(VarNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 75:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean tableLikeOptionList_sempred(TableLikeOptionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 76:
			return precpred(_ctx, 2);
		}
		return true;
	}

	private static final String _serializedATNSegment0 =
		"\u0004\u0001\u025c\u28cd\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001"+
		"\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004"+
		"\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007"+
		"\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b"+
		"\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007"+
		"\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007"+
		"\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007"+
		"\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007"+
		"\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007"+
		"\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007"+
		"\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007"+
		"\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002\'\u0007"+
		"\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007"+
		",\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u0007"+
		"1\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u0007"+
		"6\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0002;\u0007"+
		";\u0002<\u0007<\u0002=\u0007=\u0002>\u0007>\u0002?\u0007?\u0002@\u0007"+
		"@\u0002A\u0007A\u0002B\u0007B\u0002C\u0007C\u0002D\u0007D\u0002E\u0007"+
		"E\u0002F\u0007F\u0002G\u0007G\u0002H\u0007H\u0002I\u0007I\u0002J\u0007"+
		"J\u0002K\u0007K\u0002L\u0007L\u0002M\u0007M\u0002N\u0007N\u0002O\u0007"+
		"O\u0002P\u0007P\u0002Q\u0007Q\u0002R\u0007R\u0002S\u0007S\u0002T\u0007"+
		"T\u0002U\u0007U\u0002V\u0007V\u0002W\u0007W\u0002X\u0007X\u0002Y\u0007"+
		"Y\u0002Z\u0007Z\u0002[\u0007[\u0002\\\u0007\\\u0002]\u0007]\u0002^\u0007"+
		"^\u0002_\u0007_\u0002`\u0007`\u0002a\u0007a\u0002b\u0007b\u0002c\u0007"+
		"c\u0002d\u0007d\u0002e\u0007e\u0002f\u0007f\u0002g\u0007g\u0002h\u0007"+
		"h\u0002i\u0007i\u0002j\u0007j\u0002k\u0007k\u0002l\u0007l\u0002m\u0007"+
		"m\u0002n\u0007n\u0002o\u0007o\u0002p\u0007p\u0002q\u0007q\u0002r\u0007"+
		"r\u0002s\u0007s\u0002t\u0007t\u0002u\u0007u\u0002v\u0007v\u0002w\u0007"+
		"w\u0002x\u0007x\u0002y\u0007y\u0002z\u0007z\u0002{\u0007{\u0002|\u0007"+
		"|\u0002}\u0007}\u0002~\u0007~\u0002\u007f\u0007\u007f\u0002\u0080\u0007"+
		"\u0080\u0002\u0081\u0007\u0081\u0002\u0082\u0007\u0082\u0002\u0083\u0007"+
		"\u0083\u0002\u0084\u0007\u0084\u0002\u0085\u0007\u0085\u0002\u0086\u0007"+
		"\u0086\u0002\u0087\u0007\u0087\u0002\u0088\u0007\u0088\u0002\u0089\u0007"+
		"\u0089\u0002\u008a\u0007\u008a\u0002\u008b\u0007\u008b\u0002\u008c\u0007"+
		"\u008c\u0002\u008d\u0007\u008d\u0002\u008e\u0007\u008e\u0002\u008f\u0007"+
		"\u008f\u0002\u0090\u0007\u0090\u0002\u0091\u0007\u0091\u0002\u0092\u0007"+
		"\u0092\u0002\u0093\u0007\u0093\u0002\u0094\u0007\u0094\u0002\u0095\u0007"+
		"\u0095\u0002\u0096\u0007\u0096\u0002\u0097\u0007\u0097\u0002\u0098\u0007"+
		"\u0098\u0002\u0099\u0007\u0099\u0002\u009a\u0007\u009a\u0002\u009b\u0007"+
		"\u009b\u0002\u009c\u0007\u009c\u0002\u009d\u0007\u009d\u0002\u009e\u0007"+
		"\u009e\u0002\u009f\u0007\u009f\u0002\u00a0\u0007\u00a0\u0002\u00a1\u0007"+
		"\u00a1\u0002\u00a2\u0007\u00a2\u0002\u00a3\u0007\u00a3\u0002\u00a4\u0007"+
		"\u00a4\u0002\u00a5\u0007\u00a5\u0002\u00a6\u0007\u00a6\u0002\u00a7\u0007"+
		"\u00a7\u0002\u00a8\u0007\u00a8\u0002\u00a9\u0007\u00a9\u0002\u00aa\u0007"+
		"\u00aa\u0002\u00ab\u0007\u00ab\u0002\u00ac\u0007\u00ac\u0002\u00ad\u0007"+
		"\u00ad\u0002\u00ae\u0007\u00ae\u0002\u00af\u0007\u00af\u0002\u00b0\u0007"+
		"\u00b0\u0002\u00b1\u0007\u00b1\u0002\u00b2\u0007\u00b2\u0002\u00b3\u0007"+
		"\u00b3\u0002\u00b4\u0007\u00b4\u0002\u00b5\u0007\u00b5\u0002\u00b6\u0007"+
		"\u00b6\u0002\u00b7\u0007\u00b7\u0002\u00b8\u0007\u00b8\u0002\u00b9\u0007"+
		"\u00b9\u0002\u00ba\u0007\u00ba\u0002\u00bb\u0007\u00bb\u0002\u00bc\u0007"+
		"\u00bc\u0002\u00bd\u0007\u00bd\u0002\u00be\u0007\u00be\u0002\u00bf\u0007"+
		"\u00bf\u0002\u00c0\u0007\u00c0\u0002\u00c1\u0007\u00c1\u0002\u00c2\u0007"+
		"\u00c2\u0002\u00c3\u0007\u00c3\u0002\u00c4\u0007\u00c4\u0002\u00c5\u0007"+
		"\u00c5\u0002\u00c6\u0007\u00c6\u0002\u00c7\u0007\u00c7\u0002\u00c8\u0007"+
		"\u00c8\u0002\u00c9\u0007\u00c9\u0002\u00ca\u0007\u00ca\u0002\u00cb\u0007"+
		"\u00cb\u0002\u00cc\u0007\u00cc\u0002\u00cd\u0007\u00cd\u0002\u00ce\u0007"+
		"\u00ce\u0002\u00cf\u0007\u00cf\u0002\u00d0\u0007\u00d0\u0002\u00d1\u0007"+
		"\u00d1\u0002\u00d2\u0007\u00d2\u0002\u00d3\u0007\u00d3\u0002\u00d4\u0007"+
		"\u00d4\u0002\u00d5\u0007\u00d5\u0002\u00d6\u0007\u00d6\u0002\u00d7\u0007"+
		"\u00d7\u0002\u00d8\u0007\u00d8\u0002\u00d9\u0007\u00d9\u0002\u00da\u0007"+
		"\u00da\u0002\u00db\u0007\u00db\u0002\u00dc\u0007\u00dc\u0002\u00dd\u0007"+
		"\u00dd\u0002\u00de\u0007\u00de\u0002\u00df\u0007\u00df\u0002\u00e0\u0007"+
		"\u00e0\u0002\u00e1\u0007\u00e1\u0002\u00e2\u0007\u00e2\u0002\u00e3\u0007"+
		"\u00e3\u0002\u00e4\u0007\u00e4\u0002\u00e5\u0007\u00e5\u0002\u00e6\u0007"+
		"\u00e6\u0002\u00e7\u0007\u00e7\u0002\u00e8\u0007\u00e8\u0002\u00e9\u0007"+
		"\u00e9\u0002\u00ea\u0007\u00ea\u0002\u00eb\u0007\u00eb\u0002\u00ec\u0007"+
		"\u00ec\u0002\u00ed\u0007\u00ed\u0002\u00ee\u0007\u00ee\u0002\u00ef\u0007"+
		"\u00ef\u0002\u00f0\u0007\u00f0\u0002\u00f1\u0007\u00f1\u0002\u00f2\u0007"+
		"\u00f2\u0002\u00f3\u0007\u00f3\u0002\u00f4\u0007\u00f4\u0002\u00f5\u0007"+
		"\u00f5\u0002\u00f6\u0007\u00f6\u0002\u00f7\u0007\u00f7\u0002\u00f8\u0007"+
		"\u00f8\u0002\u00f9\u0007\u00f9\u0002\u00fa\u0007\u00fa\u0002\u00fb\u0007"+
		"\u00fb\u0002\u00fc\u0007\u00fc\u0002\u00fd\u0007\u00fd\u0002\u00fe\u0007"+
		"\u00fe\u0002\u00ff\u0007\u00ff\u0002\u0100\u0007\u0100\u0002\u0101\u0007"+
		"\u0101\u0002\u0102\u0007\u0102\u0002\u0103\u0007\u0103\u0002\u0104\u0007"+
		"\u0104\u0002\u0105\u0007\u0105\u0002\u0106\u0007\u0106\u0002\u0107\u0007"+
		"\u0107\u0002\u0108\u0007\u0108\u0002\u0109\u0007\u0109\u0002\u010a\u0007"+
		"\u010a\u0002\u010b\u0007\u010b\u0002\u010c\u0007\u010c\u0002\u010d\u0007"+
		"\u010d\u0002\u010e\u0007\u010e\u0002\u010f\u0007\u010f\u0002\u0110\u0007"+
		"\u0110\u0002\u0111\u0007\u0111\u0002\u0112\u0007\u0112\u0002\u0113\u0007"+
		"\u0113\u0002\u0114\u0007\u0114\u0002\u0115\u0007\u0115\u0002\u0116\u0007"+
		"\u0116\u0002\u0117\u0007\u0117\u0002\u0118\u0007\u0118\u0002\u0119\u0007"+
		"\u0119\u0002\u011a\u0007\u011a\u0002\u011b\u0007\u011b\u0002\u011c\u0007"+
		"\u011c\u0002\u011d\u0007\u011d\u0002\u011e\u0007\u011e\u0002\u011f\u0007"+
		"\u011f\u0002\u0120\u0007\u0120\u0002\u0121\u0007\u0121\u0002\u0122\u0007"+
		"\u0122\u0002\u0123\u0007\u0123\u0002\u0124\u0007\u0124\u0002\u0125\u0007"+
		"\u0125\u0002\u0126\u0007\u0126\u0002\u0127\u0007\u0127\u0002\u0128\u0007"+
		"\u0128\u0002\u0129\u0007\u0129\u0002\u012a\u0007\u012a\u0002\u012b\u0007"+
		"\u012b\u0002\u012c\u0007\u012c\u0002\u012d\u0007\u012d\u0002\u012e\u0007"+
		"\u012e\u0002\u012f\u0007\u012f\u0002\u0130\u0007\u0130\u0002\u0131\u0007"+
		"\u0131\u0002\u0132\u0007\u0132\u0002\u0133\u0007\u0133\u0002\u0134\u0007"+
		"\u0134\u0002\u0135\u0007\u0135\u0002\u0136\u0007\u0136\u0002\u0137\u0007"+
		"\u0137\u0002\u0138\u0007\u0138\u0002\u0139\u0007\u0139\u0002\u013a\u0007"+
		"\u013a\u0002\u013b\u0007\u013b\u0002\u013c\u0007\u013c\u0002\u013d\u0007"+
		"\u013d\u0002\u013e\u0007\u013e\u0002\u013f\u0007\u013f\u0002\u0140\u0007"+
		"\u0140\u0002\u0141\u0007\u0141\u0002\u0142\u0007\u0142\u0002\u0143\u0007"+
		"\u0143\u0002\u0144\u0007\u0144\u0002\u0145\u0007\u0145\u0002\u0146\u0007"+
		"\u0146\u0002\u0147\u0007\u0147\u0002\u0148\u0007\u0148\u0002\u0149\u0007"+
		"\u0149\u0002\u014a\u0007\u014a\u0002\u014b\u0007\u014b\u0002\u014c\u0007"+
		"\u014c\u0002\u014d\u0007\u014d\u0002\u014e\u0007\u014e\u0002\u014f\u0007"+
		"\u014f\u0002\u0150\u0007\u0150\u0002\u0151\u0007\u0151\u0002\u0152\u0007"+
		"\u0152\u0002\u0153\u0007\u0153\u0002\u0154\u0007\u0154\u0002\u0155\u0007"+
		"\u0155\u0002\u0156\u0007\u0156\u0002\u0157\u0007\u0157\u0002\u0158\u0007"+
		"\u0158\u0002\u0159\u0007\u0159\u0002\u015a\u0007\u015a\u0002\u015b\u0007"+
		"\u015b\u0002\u015c\u0007\u015c\u0002\u015d\u0007\u015d\u0002\u015e\u0007"+
		"\u015e\u0002\u015f\u0007\u015f\u0002\u0160\u0007\u0160\u0002\u0161\u0007"+
		"\u0161\u0002\u0162\u0007\u0162\u0002\u0163\u0007\u0163\u0002\u0164\u0007"+
		"\u0164\u0002\u0165\u0007\u0165\u0002\u0166\u0007\u0166\u0002\u0167\u0007"+
		"\u0167\u0002\u0168\u0007\u0168\u0002\u0169\u0007\u0169\u0002\u016a\u0007"+
		"\u016a\u0002\u016b\u0007\u016b\u0002\u016c\u0007\u016c\u0002\u016d\u0007"+
		"\u016d\u0002\u016e\u0007\u016e\u0002\u016f\u0007\u016f\u0002\u0170\u0007"+
		"\u0170\u0002\u0171\u0007\u0171\u0002\u0172\u0007\u0172\u0002\u0173\u0007"+
		"\u0173\u0002\u0174\u0007\u0174\u0002\u0175\u0007\u0175\u0002\u0176\u0007"+
		"\u0176\u0002\u0177\u0007\u0177\u0002\u0178\u0007\u0178\u0002\u0179\u0007"+
		"\u0179\u0002\u017a\u0007\u017a\u0002\u017b\u0007\u017b\u0002\u017c\u0007"+
		"\u017c\u0002\u017d\u0007\u017d\u0002\u017e\u0007\u017e\u0002\u017f\u0007"+
		"\u017f\u0002\u0180\u0007\u0180\u0002\u0181\u0007\u0181\u0002\u0182\u0007"+
		"\u0182\u0002\u0183\u0007\u0183\u0002\u0184\u0007\u0184\u0002\u0185\u0007"+
		"\u0185\u0002\u0186\u0007\u0186\u0002\u0187\u0007\u0187\u0002\u0188\u0007"+
		"\u0188\u0002\u0189\u0007\u0189\u0002\u018a\u0007\u018a\u0002\u018b\u0007"+
		"\u018b\u0002\u018c\u0007\u018c\u0002\u018d\u0007\u018d\u0002\u018e\u0007"+
		"\u018e\u0002\u018f\u0007\u018f\u0002\u0190\u0007\u0190\u0002\u0191\u0007"+
		"\u0191\u0002\u0192\u0007\u0192\u0002\u0193\u0007\u0193\u0002\u0194\u0007"+
		"\u0194\u0002\u0195\u0007\u0195\u0002\u0196\u0007\u0196\u0002\u0197\u0007"+
		"\u0197\u0002\u0198\u0007\u0198\u0002\u0199\u0007\u0199\u0002\u019a\u0007"+
		"\u019a\u0002\u019b\u0007\u019b\u0002\u019c\u0007\u019c\u0002\u019d\u0007"+
		"\u019d\u0002\u019e\u0007\u019e\u0002\u019f\u0007\u019f\u0002\u01a0\u0007"+
		"\u01a0\u0002\u01a1\u0007\u01a1\u0002\u01a2\u0007\u01a2\u0002\u01a3\u0007"+
		"\u01a3\u0002\u01a4\u0007\u01a4\u0002\u01a5\u0007\u01a5\u0002\u01a6\u0007"+
		"\u01a6\u0002\u01a7\u0007\u01a7\u0002\u01a8\u0007\u01a8\u0002\u01a9\u0007"+
		"\u01a9\u0002\u01aa\u0007\u01aa\u0002\u01ab\u0007\u01ab\u0002\u01ac\u0007"+
		"\u01ac\u0002\u01ad\u0007\u01ad\u0002\u01ae\u0007\u01ae\u0002\u01af\u0007"+
		"\u01af\u0002\u01b0\u0007\u01b0\u0002\u01b1\u0007\u01b1\u0002\u01b2\u0007"+
		"\u01b2\u0002\u01b3\u0007\u01b3\u0002\u01b4\u0007\u01b4\u0002\u01b5\u0007"+
		"\u01b5\u0002\u01b6\u0007\u01b6\u0002\u01b7\u0007\u01b7\u0002\u01b8\u0007"+
		"\u01b8\u0002\u01b9\u0007\u01b9\u0002\u01ba\u0007\u01ba\u0002\u01bb\u0007"+
		"\u01bb\u0002\u01bc\u0007\u01bc\u0002\u01bd\u0007\u01bd\u0002\u01be\u0007"+
		"\u01be\u0002\u01bf\u0007\u01bf\u0002\u01c0\u0007\u01c0\u0002\u01c1\u0007"+
		"\u01c1\u0002\u01c2\u0007\u01c2\u0002\u01c3\u0007\u01c3\u0002\u01c4\u0007"+
		"\u01c4\u0002\u01c5\u0007\u01c5\u0002\u01c6\u0007\u01c6\u0002\u01c7\u0007"+
		"\u01c7\u0002\u01c8\u0007\u01c8\u0002\u01c9\u0007\u01c9\u0002\u01ca\u0007"+
		"\u01ca\u0002\u01cb\u0007\u01cb\u0002\u01cc\u0007\u01cc\u0002\u01cd\u0007"+
		"\u01cd\u0002\u01ce\u0007\u01ce\u0002\u01cf\u0007\u01cf\u0002\u01d0\u0007"+
		"\u01d0\u0002\u01d1\u0007\u01d1\u0002\u01d2\u0007\u01d2\u0002\u01d3\u0007"+
		"\u01d3\u0002\u01d4\u0007\u01d4\u0002\u01d5\u0007\u01d5\u0002\u01d6\u0007"+
		"\u01d6\u0002\u01d7\u0007\u01d7\u0002\u01d8\u0007\u01d8\u0002\u01d9\u0007"+
		"\u01d9\u0002\u01da\u0007\u01da\u0002\u01db\u0007\u01db\u0002\u01dc\u0007"+
		"\u01dc\u0002\u01dd\u0007\u01dd\u0002\u01de\u0007\u01de\u0002\u01df\u0007"+
		"\u01df\u0002\u01e0\u0007\u01e0\u0002\u01e1\u0007\u01e1\u0002\u01e2\u0007"+
		"\u01e2\u0002\u01e3\u0007\u01e3\u0002\u01e4\u0007\u01e4\u0002\u01e5\u0007"+
		"\u01e5\u0002\u01e6\u0007\u01e6\u0002\u01e7\u0007\u01e7\u0002\u01e8\u0007"+
		"\u01e8\u0002\u01e9\u0007\u01e9\u0002\u01ea\u0007\u01ea\u0002\u01eb\u0007"+
		"\u01eb\u0002\u01ec\u0007\u01ec\u0002\u01ed\u0007\u01ed\u0002\u01ee\u0007"+
		"\u01ee\u0002\u01ef\u0007\u01ef\u0002\u01f0\u0007\u01f0\u0002\u01f1\u0007"+
		"\u01f1\u0002\u01f2\u0007\u01f2\u0002\u01f3\u0007\u01f3\u0002\u01f4\u0007"+
		"\u01f4\u0002\u01f5\u0007\u01f5\u0002\u01f6\u0007\u01f6\u0002\u01f7\u0007"+
		"\u01f7\u0002\u01f8\u0007\u01f8\u0002\u01f9\u0007\u01f9\u0002\u01fa\u0007"+
		"\u01fa\u0002\u01fb\u0007\u01fb\u0002\u01fc\u0007\u01fc\u0002\u01fd\u0007"+
		"\u01fd\u0002\u01fe\u0007\u01fe\u0002\u01ff\u0007\u01ff\u0002\u0200\u0007"+
		"\u0200\u0002\u0201\u0007\u0201\u0002\u0202\u0007\u0202\u0002\u0203\u0007"+
		"\u0203\u0002\u0204\u0007\u0204\u0002\u0205\u0007\u0205\u0002\u0206\u0007"+
		"\u0206\u0002\u0207\u0007\u0207\u0002\u0208\u0007\u0208\u0002\u0209\u0007"+
		"\u0209\u0002\u020a\u0007\u020a\u0002\u020b\u0007\u020b\u0002\u020c\u0007"+
		"\u020c\u0002\u020d\u0007\u020d\u0002\u020e\u0007\u020e\u0002\u020f\u0007"+
		"\u020f\u0002\u0210\u0007\u0210\u0002\u0211\u0007\u0211\u0002\u0212\u0007"+
		"\u0212\u0002\u0213\u0007\u0213\u0002\u0214\u0007\u0214\u0002\u0215\u0007"+
		"\u0215\u0002\u0216\u0007\u0216\u0002\u0217\u0007\u0217\u0002\u0218\u0007"+
		"\u0218\u0002\u0219\u0007\u0219\u0002\u021a\u0007\u021a\u0002\u021b\u0007"+
		"\u021b\u0002\u021c\u0007\u021c\u0002\u021d\u0007\u021d\u0002\u021e\u0007"+
		"\u021e\u0002\u021f\u0007\u021f\u0002\u0220\u0007\u0220\u0002\u0221\u0007"+
		"\u0221\u0002\u0222\u0007\u0222\u0002\u0223\u0007\u0223\u0002\u0224\u0007"+
		"\u0224\u0002\u0225\u0007\u0225\u0002\u0226\u0007\u0226\u0002\u0227\u0007"+
		"\u0227\u0002\u0228\u0007\u0228\u0002\u0229\u0007\u0229\u0002\u022a\u0007"+
		"\u022a\u0002\u022b\u0007\u022b\u0002\u022c\u0007\u022c\u0002\u022d\u0007"+
		"\u022d\u0002\u022e\u0007\u022e\u0002\u022f\u0007\u022f\u0002\u0230\u0007"+
		"\u0230\u0002\u0231\u0007\u0231\u0002\u0232\u0007\u0232\u0002\u0233\u0007"+
		"\u0233\u0002\u0234\u0007\u0234\u0002\u0235\u0007\u0235\u0002\u0236\u0007"+
		"\u0236\u0002\u0237\u0007\u0237\u0002\u0238\u0007\u0238\u0002\u0239\u0007"+
		"\u0239\u0002\u023a\u0007\u023a\u0002\u023b\u0007\u023b\u0002\u023c\u0007"+
		"\u023c\u0002\u023d\u0007\u023d\u0002\u023e\u0007\u023e\u0002\u023f\u0007"+
		"\u023f\u0002\u0240\u0007\u0240\u0002\u0241\u0007\u0241\u0002\u0242\u0007"+
		"\u0242\u0002\u0243\u0007\u0243\u0002\u0244\u0007\u0244\u0002\u0245\u0007"+
		"\u0245\u0002\u0246\u0007\u0246\u0002\u0247\u0007\u0247\u0002\u0248\u0007"+
		"\u0248\u0002\u0249\u0007\u0249\u0002\u024a\u0007\u024a\u0002\u024b\u0007"+
		"\u024b\u0002\u024c\u0007\u024c\u0002\u024d\u0007\u024d\u0002\u024e\u0007"+
		"\u024e\u0002\u024f\u0007\u024f\u0002\u0250\u0007\u0250\u0002\u0251\u0007"+
		"\u0251\u0002\u0252\u0007\u0252\u0002\u0253\u0007\u0253\u0002\u0254\u0007"+
		"\u0254\u0002\u0255\u0007\u0255\u0002\u0256\u0007\u0256\u0002\u0257\u0007"+
		"\u0257\u0002\u0258\u0007\u0258\u0002\u0259\u0007\u0259\u0002\u025a\u0007"+
		"\u025a\u0002\u025b\u0007\u025b\u0002\u025c\u0007\u025c\u0002\u025d\u0007"+
		"\u025d\u0002\u025e\u0007\u025e\u0002\u025f\u0007\u025f\u0002\u0260\u0007"+
		"\u0260\u0002\u0261\u0007\u0261\u0002\u0262\u0007\u0262\u0002\u0263\u0007"+
		"\u0263\u0002\u0264\u0007\u0264\u0002\u0265\u0007\u0265\u0002\u0266\u0007"+
		"\u0266\u0002\u0267\u0007\u0267\u0002\u0268\u0007\u0268\u0002\u0269\u0007"+
		"\u0269\u0002\u026a\u0007\u026a\u0002\u026b\u0007\u026b\u0002\u026c\u0007"+
		"\u026c\u0002\u026d\u0007\u026d\u0002\u026e\u0007\u026e\u0002\u026f\u0007"+
		"\u026f\u0002\u0270\u0007\u0270\u0002\u0271\u0007\u0271\u0002\u0272\u0007"+
		"\u0272\u0002\u0273\u0007\u0273\u0002\u0274\u0007\u0274\u0002\u0275\u0007"+
		"\u0275\u0002\u0276\u0007\u0276\u0002\u0277\u0007\u0277\u0002\u0278\u0007"+
		"\u0278\u0002\u0279\u0007\u0279\u0002\u027a\u0007\u027a\u0002\u027b\u0007"+
		"\u027b\u0002\u027c\u0007\u027c\u0002\u027d\u0007\u027d\u0002\u027e\u0007"+
		"\u027e\u0002\u027f\u0007\u027f\u0002\u0280\u0007\u0280\u0002\u0281\u0007"+
		"\u0281\u0002\u0282\u0007\u0282\u0002\u0283\u0007\u0283\u0002\u0284\u0007"+
		"\u0284\u0002\u0285\u0007\u0285\u0002\u0286\u0007\u0286\u0002\u0287\u0007"+
		"\u0287\u0002\u0288\u0007\u0288\u0002\u0289\u0007\u0289\u0002\u028a\u0007"+
		"\u028a\u0002\u028b\u0007\u028b\u0002\u028c\u0007\u028c\u0002\u028d\u0007"+
		"\u028d\u0002\u028e\u0007\u028e\u0002\u028f\u0007\u028f\u0002\u0290\u0007"+
		"\u0290\u0002\u0291\u0007\u0291\u0002\u0292\u0007\u0292\u0002\u0293\u0007"+
		"\u0293\u0002\u0294\u0007\u0294\u0002\u0295\u0007\u0295\u0002\u0296\u0007"+
		"\u0296\u0002\u0297\u0007\u0297\u0002\u0298\u0007\u0298\u0002\u0299\u0007"+
		"\u0299\u0002\u029a\u0007\u029a\u0002\u029b\u0007\u029b\u0002\u029c\u0007"+
		"\u029c\u0002\u029d\u0007\u029d\u0002\u029e\u0007\u029e\u0002\u029f\u0007"+
		"\u029f\u0002\u02a0\u0007\u02a0\u0002\u02a1\u0007\u02a1\u0002\u02a2\u0007"+
		"\u02a2\u0002\u02a3\u0007\u02a3\u0002\u02a4\u0007\u02a4\u0002\u02a5\u0007"+
		"\u02a5\u0002\u02a6\u0007\u02a6\u0002\u02a7\u0007\u02a7\u0002\u02a8\u0007"+
		"\u02a8\u0002\u02a9\u0007\u02a9\u0002\u02aa\u0007\u02aa\u0002\u02ab\u0007"+
		"\u02ab\u0002\u02ac\u0007\u02ac\u0002\u02ad\u0007\u02ad\u0002\u02ae\u0007"+
		"\u02ae\u0002\u02af\u0007\u02af\u0002\u02b0\u0007\u02b0\u0002\u02b1\u0007"+
		"\u02b1\u0002\u02b2\u0007\u02b2\u0002\u02b3\u0007\u02b3\u0002\u02b4\u0007"+
		"\u02b4\u0002\u02b5\u0007\u02b5\u0002\u02b6\u0007\u02b6\u0002\u02b7\u0007"+
		"\u02b7\u0002\u02b8\u0007\u02b8\u0002\u02b9\u0007\u02b9\u0002\u02ba\u0007"+
		"\u02ba\u0002\u02bb\u0007\u02bb\u0002\u02bc\u0007\u02bc\u0002\u02bd\u0007"+
		"\u02bd\u0002\u02be\u0007\u02be\u0002\u02bf\u0007\u02bf\u0002\u02c0\u0007"+
		"\u02c0\u0002\u02c1\u0007\u02c1\u0002\u02c2\u0007\u02c2\u0002\u02c3\u0007"+
		"\u02c3\u0002\u02c4\u0007\u02c4\u0002\u02c5\u0007\u02c5\u0002\u02c6\u0007"+
		"\u02c6\u0002\u02c7\u0007\u02c7\u0002\u02c8\u0007\u02c8\u0002\u02c9\u0007"+
		"\u02c9\u0002\u02ca\u0007\u02ca\u0002\u02cb\u0007\u02cb\u0002\u02cc\u0007"+
		"\u02cc\u0002\u02cd\u0007\u02cd\u0002\u02ce\u0007\u02ce\u0002\u02cf\u0007"+
		"\u02cf\u0002\u02d0\u0007\u02d0\u0002\u02d1\u0007\u02d1\u0002\u02d2\u0007"+
		"\u02d2\u0002\u02d3\u0007\u02d3\u0002\u02d4\u0007\u02d4\u0002\u02d5\u0007"+
		"\u02d5\u0002\u02d6\u0007\u02d6\u0002\u02d7\u0007\u02d7\u0002\u02d8\u0007"+
		"\u02d8\u0002\u02d9\u0007\u02d9\u0002\u02da\u0007\u02da\u0002\u02db\u0007"+
		"\u02db\u0002\u02dc\u0007\u02dc\u0002\u02dd\u0007\u02dd\u0002\u02de\u0007"+
		"\u02de\u0002\u02df\u0007\u02df\u0002\u02e0\u0007\u02e0\u0002\u02e1\u0007"+
		"\u02e1\u0002\u02e2\u0007\u02e2\u0002\u02e3\u0007\u02e3\u0002\u02e4\u0007"+
		"\u02e4\u0002\u02e5\u0007\u02e5\u0002\u02e6\u0007\u02e6\u0002\u02e7\u0007"+
		"\u02e7\u0002\u02e8\u0007\u02e8\u0002\u02e9\u0007\u02e9\u0002\u02ea\u0007"+
		"\u02ea\u0002\u02eb\u0007\u02eb\u0002\u02ec\u0007\u02ec\u0002\u02ed\u0007"+
		"\u02ed\u0002\u02ee\u0007\u02ee\u0002\u02ef\u0007\u02ef\u0002\u02f0\u0007"+
		"\u02f0\u0002\u02f1\u0007\u02f1\u0002\u02f2\u0007\u02f2\u0002\u02f3\u0007"+
		"\u02f3\u0002\u02f4\u0007\u02f4\u0002\u02f5\u0007\u02f5\u0002\u02f6\u0007"+
		"\u02f6\u0002\u02f7\u0007\u02f7\u0002\u02f8\u0007\u02f8\u0002\u02f9\u0007"+
		"\u02f9\u0002\u02fa\u0007\u02fa\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0003\u0000\u0695"+
		"\b\u0000\u0001\u0000\u0003\u0000\u0698\b\u0000\u0001\u0000\u0001\u0000"+
		"\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0003\u0001\u06a0\b\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001"+
		"\u0003\u0001\u06a8\b\u0001\u0001\u0002\u0001\u0002\u0003\u0002\u06ac\b"+
		"\u0002\u0001\u0002\u0003\u0002\u06af\b\u0002\u0001\u0003\u0001\u0003\u0003"+
		"\u0003\u06b3\b\u0003\u0001\u0003\u0001\u0003\u0003\u0003\u06b7\b\u0003"+
		"\u0001\u0003\u0003\u0003\u06ba\b\u0003\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0005\u0001\u0005\u0003\u0005\u06c1\b\u0005\u0001\u0005\u0001\u0005"+
		"\u0003\u0005\u06c5\b\u0005\u0001\u0005\u0003\u0005\u06c8\b\u0005\u0001"+
		"\u0006\u0001\u0006\u0001\u0006\u0003\u0006\u06cd\b\u0006\u0001\u0007\u0001"+
		"\u0007\u0003\u0007\u06d1\b\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u06d5"+
		"\b\u0007\u0001\u0007\u0003\u0007\u06d8\b\u0007\u0001\b\u0001\b\u0003\b"+
		"\u06dc\b\b\u0001\b\u0001\b\u0003\b\u06e0\b\b\u0001\b\u0003\b\u06e3\b\b"+
		"\u0001\t\u0001\t\u0003\t\u06e7\b\t\u0001\t\u0001\t\u0001\n\u0001\n\u0003"+
		"\n\u06ed\b\n\u0001\n\u0001\n\u0003\n\u06f1\b\n\u0001\n\u0001\n\u0001\u000b"+
		"\u0001\u000b\u0001\u000b\u0001\u000b\u0001\f\u0001\f\u0001\f\u0001\f\u0001"+
		"\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\u000e\u0001\u000e\u0001\u000f"+
		"\u0001\u000f\u0003\u000f\u0706\b\u000f\u0001\u0010\u0001\u0010\u0003\u0010"+
		"\u070a\b\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010"+
		"\u0003\u0010\u0711\b\u0010\u0001\u0010\u0003\u0010\u0714\b\u0010\u0001"+
		"\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001"+
		"\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001"+
		"\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0003\u0011\u0726\b\u0011\u0001"+
		"\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0013\u0001\u0013\u0001"+
		"\u0014\u0003\u0014\u072f\b\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001"+
		"\u0014\u0001\u0014\u0003\u0014\u0736\b\u0014\u0001\u0014\u0003\u0014\u0739"+
		"\b\u0014\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0003"+
		"\u0015\u0740\b\u0015\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001"+
		"\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001"+
		"\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001"+
		"\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0003\u0016\u0757"+
		"\b\u0016\u0001\u0017\u0001\u0017\u0001\u0018\u0001\u0018\u0001\u0018\u0001"+
		"\u0018\u0001\u0018\u0001\u0018\u0005\u0018\u0761\b\u0018\n\u0018\f\u0018"+
		"\u0764\t\u0018\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u001a\u0001\u001a"+
		"\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a"+
		"\u0003\u001a\u0771\b\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a"+
		"\u0001\u001a\u0001\u001a\u0003\u001a\u0779\b\u001a\u0001\u001b\u0001\u001b"+
		"\u0001\u001b\u0001\u001b\u0003\u001b\u077f\b\u001b\u0001\u001b\u0001\u001b"+
		"\u0001\u001b\u0001\u001b\u0003\u001b\u0785\b\u001b\u0001\u001c\u0003\u001c"+
		"\u0788\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0003\u001c\u078f\b\u001c\u0001\u001c\u0003\u001c\u0792\b\u001c\u0001"+
		"\u001c\u0003\u001c\u0795\b\u001c\u0001\u001d\u0001\u001d\u0001\u001d\u0001"+
		"\u001d\u0001\u001d\u0001\u001d\u0005\u001d\u079d\b\u001d\n\u001d\f\u001d"+
		"\u07a0\t\u001d\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e"+
		"\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0003\u001e"+
		"\u07ac\b\u001e\u0001\u001f\u0001\u001f\u0001 \u0001 \u0001 \u0001 \u0001"+
		" \u0001 \u0005 \u07b6\b \n \f \u07b9\t \u0001!\u0001!\u0001!\u0001\"\u0003"+
		"\"\u07bf\b\"\u0001\"\u0001\"\u0001\"\u0001\"\u0003\"\u07c5\b\"\u0001\""+
		"\u0003\"\u07c8\b\"\u0001\"\u0003\"\u07cb\b\"\u0001#\u0001#\u0001#\u0001"+
		"#\u0001#\u0001#\u0001#\u0001#\u0003#\u07d5\b#\u0001$\u0001$\u0001$\u0001"+
		"%\u0001%\u0003%\u07dc\b%\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001"+
		"&\u0001&\u0003&\u07e6\b&\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001"+
		"\'\u0003\'\u07ee\b\'\u0001\'\u0001\'\u0003\'\u07f2\b\'\u0001\'\u0001\'"+
		"\u0003\'\u07f6\b\'\u0001\'\u0001\'\u0003\'\u07fa\b\'\u0001\'\u0001\'\u0001"+
		"\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0003\'\u0806"+
		"\b\'\u0001\'\u0001\'\u0003\'\u080a\b\'\u0001\'\u0001\'\u0001\'\u0003\'"+
		"\u080f\b\'\u0001\'\u0001\'\u0003\'\u0813\b\'\u0003\'\u0815\b\'\u0001("+
		"\u0001(\u0001(\u0003(\u081a\b(\u0001(\u0001(\u0001(\u0003(\u081f\b(\u0001"+
		"(\u0001(\u0001(\u0001(\u0003(\u0825\b(\u0001(\u0005(\u0828\b(\n(\f(\u082b"+
		"\t(\u0001)\u0001)\u0003)\u082f\b)\u0001)\u0003)\u0832\b)\u0001)\u0003"+
		")\u0835\b)\u0001)\u0003)\u0838\b)\u0001)\u0003)\u083b\b)\u0001)\u0003"+
		")\u083e\b)\u0001)\u0003)\u0841\b)\u0001)\u0003)\u0844\b)\u0001)\u0001"+
		")\u0001)\u0001)\u0003)\u084a\b)\u0001)\u0003)\u084d\b)\u0001)\u0003)\u0850"+
		"\b)\u0001)\u0003)\u0853\b)\u0001)\u0003)\u0856\b)\u0001)\u0003)\u0859"+
		"\b)\u0001)\u0001)\u0001)\u0003)\u085e\b)\u0001*\u0001*\u0001*\u0001*\u0001"+
		"*\u0003*\u0865\b*\u0001+\u0001+\u0001+\u0001,\u0001,\u0003,\u086c\b,\u0001"+
		",\u0001,\u0001,\u0003,\u0871\b,\u0001,\u0001,\u0001,\u0001,\u0003,\u0877"+
		"\b,\u0001,\u0001,\u0001,\u0001,\u0003,\u087d\b,\u0001,\u0001,\u0001,\u0001"+
		",\u0003,\u0883\b,\u0001,\u0001,\u0001,\u0001,\u0003,\u0889\b,\u0001,\u0001"+
		",\u0001,\u0003,\u088e\b,\u0001,\u0001,\u0003,\u0892\b,\u0001,\u0001,\u0003"+
		",\u0896\b,\u0001-\u0001-\u0001-\u0005-\u089b\b-\n-\f-\u089e\t-\u0001."+
		"\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001/\u0001/\u0001"+
		"/\u0001/\u0003/\u08ac\b/\u00010\u00010\u00010\u00010\u00010\u00030\u08b3"+
		"\b0\u00011\u00011\u00011\u00011\u00031\u08b9\b1\u00012\u00012\u00012\u0001"+
		"2\u00032\u08bf\b2\u00013\u00013\u00013\u00013\u00013\u00053\u08c6\b3\n"+
		"3\f3\u08c9\t3\u00014\u00014\u00034\u08cd\b4\u00014\u00034\u08d0\b4\u0001"+
		"5\u00015\u00015\u00035\u08d5\b5\u00016\u00016\u00016\u00016\u00016\u0001"+
		"6\u00016\u00016\u00016\u00016\u00016\u00036\u08e2\b6\u00017\u00017\u0001"+
		"7\u00018\u00018\u00018\u00018\u00018\u00018\u00058\u08ed\b8\n8\f8\u08f0"+
		"\t8\u00019\u00019\u00039\u08f4\b9\u00019\u00019\u00039\u08f8\b9\u0003"+
		"9\u08fa\b9\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001"+
		":\u0001:\u0001:\u0001:\u0005:\u0908\b:\n:\f:\u090b\t:\u0001;\u0001;\u0001"+
		";\u0001;\u0001;\u0003;\u0912\b;\u0001;\u0001;\u0001;\u0003;\u0917\b;\u0001"+
		"<\u0001<\u0001<\u0003<\u091c\b<\u0001=\u0001=\u0003=\u0920\b=\u0001>\u0001"+
		">\u0001?\u0001?\u0001@\u0001@\u0001A\u0001A\u0001B\u0001B\u0001B\u0003"+
		"B\u092d\bB\u0001C\u0001C\u0001C\u0001C\u0001C\u0001C\u0005C\u0935\bC\n"+
		"C\fC\u0938\tC\u0001D\u0001D\u0001D\u0001D\u0001D\u0001D\u0001D\u0001D"+
		"\u0001D\u0001D\u0001D\u0001D\u0001D\u0001D\u0001D\u0001D\u0001D\u0003"+
		"D\u094b\bD\u0001E\u0001E\u0001E\u0001E\u0001F\u0001F\u0001F\u0005F\u0954"+
		"\bF\nF\fF\u0957\tF\u0001G\u0001G\u0001G\u0001G\u0001G\u0003G\u095e\bG"+
		"\u0001H\u0001H\u0001H\u0001I\u0001I\u0001I\u0001I\u0001I\u0001J\u0001"+
		"J\u0001J\u0001J\u0001J\u0001K\u0001K\u0001K\u0001K\u0001K\u0001K\u0001"+
		"L\u0001L\u0001L\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0005M\u097c"+
		"\bM\nM\fM\u097f\tM\u0001N\u0001N\u0001N\u0001N\u0001O\u0001O\u0003O\u0987"+
		"\bO\u0001O\u0003O\u098a\bO\u0001O\u0003O\u098d\bO\u0001O\u0003O\u0990"+
		"\bO\u0001O\u0001O\u0001P\u0001P\u0001Q\u0001Q\u0001Q\u0001Q\u0001R\u0001"+
		"R\u0001R\u0001R\u0001R\u0001R\u0001R\u0001R\u0001R\u0001R\u0001R\u0001"+
		"R\u0003R\u09a6\bR\u0001S\u0001S\u0001S\u0001S\u0001S\u0001S\u0003S\u09ae"+
		"\bS\u0001T\u0001T\u0001T\u0001T\u0001T\u0001T\u0001T\u0001T\u0001T\u0001"+
		"T\u0001T\u0001T\u0003T\u09bc\bT\u0001U\u0001U\u0001U\u0001U\u0001U\u0001"+
		"U\u0001U\u0001U\u0001U\u0001U\u0001U\u0003U\u09c9\bU\u0001V\u0001V\u0003"+
		"V\u09cd\bV\u0001W\u0001W\u0001W\u0001X\u0001X\u0001X\u0001X\u0001X\u0001"+
		"X\u0005X\u09d8\bX\nX\fX\u09db\tX\u0001Y\u0001Y\u0001Y\u0003Y\u09e0\bY"+
		"\u0001Y\u0001Y\u0003Y\u09e4\bY\u0001Y\u0001Y\u0001Y\u0001Y\u0003Y\u09ea"+
		"\bY\u0001Y\u0001Y\u0001Y\u0003Y\u09ef\bY\u0001Y\u0001Y\u0003Y\u09f3\b"+
		"Y\u0001Y\u0001Y\u0001Y\u0003Y\u09f8\bY\u0001Y\u0001Y\u0003Y\u09fc\bY\u0001"+
		"Y\u0001Y\u0001Y\u0003Y\u0a01\bY\u0001Y\u0001Y\u0001Y\u0001Y\u0001Y\u0003"+
		"Y\u0a08\bY\u0003Y\u0a0a\bY\u0001Y\u0001Y\u0005Y\u0a0e\bY\nY\fY\u0a11\t"+
		"Y\u0001Z\u0001Z\u0001Z\u0001Z\u0001Z\u0001Z\u0001Z\u0001Z\u0001Z\u0001"+
		"Z\u0001Z\u0001Z\u0001Z\u0001Z\u0003Z\u0a21\bZ\u0001[\u0001[\u0001[\u0001"+
		"\\\u0003\\\u0a27\b\\\u0001\\\u0001\\\u0001]\u0001]\u0003]\u0a2d\b]\u0001"+
		"]\u0001]\u0001^\u0001^\u0003^\u0a33\b^\u0001^\u0001^\u0001^\u0001^\u0003"+
		"^\u0a39\b^\u0001^\u0003^\u0a3c\b^\u0001_\u0001_\u0001`\u0001`\u0001`\u0001"+
		"`\u0001`\u0001`\u0001`\u0003`\u0a47\b`\u0001a\u0001a\u0001a\u0001a\u0001"+
		"a\u0001a\u0001a\u0001a\u0001a\u0001a\u0001a\u0003a\u0a54\ba\u0001b\u0001"+
		"b\u0001b\u0001c\u0001c\u0001c\u0001c\u0001c\u0003c\u0a5e\bc\u0001d\u0001"+
		"d\u0001d\u0001e\u0001e\u0001e\u0001f\u0004f\u0a67\bf\u000bf\ff\u0a68\u0001"+
		"g\u0001g\u0001g\u0003g\u0a6e\bg\u0001h\u0001h\u0001h\u0003h\u0a73\bh\u0001"+
		"i\u0001i\u0001i\u0003i\u0a78\bi\u0001i\u0001i\u0001i\u0001i\u0003i\u0a7e"+
		"\bi\u0001i\u0001i\u0001i\u0001i\u0001i\u0001i\u0003i\u0a86\bi\u0001i\u0003"+
		"i\u0a89\bi\u0001i\u0001i\u0001i\u0001i\u0003i\u0a8f\bi\u0001i\u0003i\u0a92"+
		"\bi\u0001j\u0001j\u0001j\u0005j\u0a97\bj\nj\fj\u0a9a\tj\u0001k\u0001k"+
		"\u0001k\u0001k\u0003k\u0aa0\bk\u0001k\u0001k\u0001k\u0001k\u0001k\u0001"+
		"k\u0003k\u0aa8\bk\u0001k\u0001k\u0001k\u0001k\u0001k\u0001k\u0001k\u0003"+
		"k\u0ab1\bk\u0001k\u0001k\u0001k\u0001k\u0001k\u0001k\u0003k\u0ab9\bk\u0001"+
		"l\u0001l\u0001l\u0003l\u0abe\bl\u0001l\u0001l\u0001l\u0001l\u0003l\u0ac4"+
		"\bl\u0001l\u0001l\u0001l\u0001l\u0003l\u0aca\bl\u0001l\u0003l\u0acd\b"+
		"l\u0001l\u0003l\u0ad0\bl\u0001l\u0001l\u0003l\u0ad4\bl\u0001l\u0003l\u0ad7"+
		"\bl\u0001l\u0001l\u0003l\u0adb\bl\u0001l\u0003l\u0ade\bl\u0001l\u0001"+
		"l\u0003l\u0ae2\bl\u0001l\u0001l\u0003l\u0ae6\bl\u0001l\u0003l\u0ae9\b"+
		"l\u0001l\u0001l\u0003l\u0aed\bl\u0001l\u0003l\u0af0\bl\u0001l\u0001l\u0001"+
		"l\u0001l\u0001l\u0001l\u0005l\u0af8\bl\nl\fl\u0afb\tl\u0003l\u0afd\bl"+
		"\u0001l\u0001l\u0001l\u0001l\u0001l\u0005l\u0b04\bl\nl\fl\u0b07\tl\u0001"+
		"l\u0003l\u0b0a\bl\u0003l\u0b0c\bl\u0003l\u0b0e\bl\u0003l\u0b10\bl\u0001"+
		"m\u0001m\u0003m\u0b14\bm\u0001m\u0001m\u0001m\u0001m\u0001m\u0003m\u0b1b"+
		"\bm\u0001m\u0003m\u0b1e\bm\u0001m\u0001m\u0003m\u0b22\bm\u0001m\u0001"+
		"m\u0001m\u0001m\u0003m\u0b28\bm\u0001n\u0001n\u0003n\u0b2c\bn\u0001n\u0001"+
		"n\u0003n\u0b30\bn\u0001o\u0001o\u0001p\u0003p\u0b35\bp\u0001p\u0001p\u0003"+
		"p\u0b39\bp\u0001q\u0001q\u0001q\u0001r\u0003r\u0b3f\br\u0001r\u0001r\u0003"+
		"r\u0b43\br\u0001r\u0003r\u0b46\br\u0001s\u0001s\u0001s\u0001t\u0001t\u0001"+
		"u\u0001u\u0001v\u0001v\u0001v\u0003v\u0b52\bv\u0001v\u0001v\u0001w\u0001"+
		"w\u0001w\u0003w\u0b59\bw\u0001w\u0001w\u0001x\u0001x\u0001x\u0003x\u0b60"+
		"\bx\u0001x\u0001x\u0001y\u0001y\u0001z\u0001z\u0001{\u0003{\u0b69\b{\u0001"+
		"{\u0001{\u0001{\u0005{\u0b6e\b{\n{\f{\u0b71\t{\u0001{\u0003{\u0b74\b{"+
		"\u0001|\u0001|\u0001|\u0001|\u0005|\u0b7a\b|\n|\f|\u0b7d\t|\u0001|\u0001"+
		"|\u0001}\u0001}\u0003}\u0b83\b}\u0001~\u0001~\u0001\u007f\u0001\u007f"+
		"\u0001\u0080\u0003\u0080\u0b8a\b\u0080\u0001\u0080\u0001\u0080\u0001\u0081"+
		"\u0001\u0081\u0001\u0082\u0001\u0082\u0001\u0083\u0001\u0083\u0001\u0084"+
		"\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0084"+
		"\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0084"+
		"\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0084"+
		"\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0084\u0003\u0084\u0bab\b\u0084"+
		"\u0001\u0085\u0001\u0085\u0003\u0085\u0baf\b\u0085\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0003\u0086\u0bc3\b\u0086"+
		"\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0003\u0086\u0c02\b\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0003\u0086"+
		"\u0c0c\b\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0005\u0086\u0c8c\b\u0086\n\u0086\f\u0086\u0c8f\t\u0086\u0001"+
		"\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001"+
		"\u0087\u0001\u0087\u0001\u0087\u0003\u0087\u0c9a\b\u0087\u0001\u0087\u0001"+
		"\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001"+
		"\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001"+
		"\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001"+
		"\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001"+
		"\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001"+
		"\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001"+
		"\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0005\u0087\u0cc6"+
		"\b\u0087\n\u0087\f\u0087\u0cc9\t\u0087\u0001\u0088\u0001\u0088\u0001\u0088"+
		"\u0001\u0088\u0001\u0088\u0003\u0088\u0cd0\b\u0088\u0001\u0088\u0001\u0088"+
		"\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088"+
		"\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088"+
		"\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088"+
		"\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0003\u0088\u0cea\b\u0088"+
		"\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0005\u0089"+
		"\u0cf1\b\u0089\n\u0089\f\u0089\u0cf4\t\u0089\u0001\u008a\u0001\u008a\u0001"+
		"\u008a\u0005\u008a\u0cf9\b\u008a\n\u008a\f\u008a\u0cfc\t\u008a\u0001\u008b"+
		"\u0001\u008b\u0001\u008b\u0001\u008b\u0001\u008b\u0001\u008b\u0001\u008b"+
		"\u0001\u008b\u0001\u008b\u0001\u008b\u0003\u008b\u0d08\b\u008b\u0001\u008b"+
		"\u0001\u008b\u0003\u008b\u0d0c\b\u008b\u0001\u008b\u0003\u008b\u0d0f\b"+
		"\u008b\u0001\u008c\u0001\u008c\u0001\u008d\u0001\u008d\u0001\u008d\u0001"+
		"\u008d\u0001\u008d\u0003\u008d\u0d18\b\u008d\u0001\u008e\u0001\u008e\u0003"+
		"\u008e\u0d1c\b\u008e\u0001\u008e\u0001\u008e\u0003\u008e\u0d20\b\u008e"+
		"\u0001\u008e\u0001\u008e\u0001\u008f\u0004\u008f\u0d25\b\u008f\u000b\u008f"+
		"\f\u008f\u0d26\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090"+
		"\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0092\u0001\u0092\u0001\u0093"+
		"\u0001\u0093\u0001\u0093\u0001\u0093\u0003\u0093\u0d37\b\u0093\u0001\u0094"+
		"\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094"+
		"\u0003\u0094\u0d40\b\u0094\u0001\u0095\u0001\u0095\u0001\u0095\u0001\u0095"+
		"\u0001\u0095\u0001\u0095\u0001\u0095\u0001\u0095\u0001\u0095\u0001\u0095"+
		"\u0001\u0095\u0001\u0095\u0003\u0095\u0d4e\b\u0095\u0001\u0096\u0001\u0096"+
		"\u0003\u0096\u0d52\b\u0096\u0001\u0097\u0004\u0097\u0d55\b\u0097\u000b"+
		"\u0097\f\u0097\u0d56\u0001\u0098\u0001\u0098\u0001\u0099\u0001\u0099\u0001"+
		"\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001"+
		"\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001"+
		"\u0099\u0003\u0099\u0d6a\b\u0099\u0001\u009a\u0001\u009a\u0001\u009a\u0001"+
		"\u009a\u0001\u009a\u0001\u009a\u0001\u009a\u0001\u009a\u0001\u009a\u0001"+
		"\u009a\u0001\u009a\u0001\u009a\u0001\u009a\u0001\u009a\u0001\u009a\u0001"+
		"\u009a\u0001\u009a\u0001\u009a\u0001\u009a\u0001\u009a\u0003\u009a\u0d80"+
		"\b\u009a\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001"+
		"\u009b\u0003\u009b\u0d88\b\u009b\u0001\u009c\u0001\u009c\u0001\u009d\u0001"+
		"\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0003\u009d\u0d91\b\u009d\u0001"+
		"\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001"+
		"\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0003\u009e\u0d9d\b\u009e\u0001"+
		"\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0001"+
		"\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0001"+
		"\u009f\u0001\u009f\u0003\u009f\u0dad\b\u009f\u0001\u00a0\u0001\u00a0\u0001"+
		"\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0003"+
		"\u00a0\u0db7\b\u00a0\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001"+
		"\u00a1\u0001\u00a1\u0001\u00a2\u0001\u00a2\u0001\u00a3\u0001\u00a3\u0001"+
		"\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001"+
		"\u00a3\u0001\u00a3\u0003\u00a3\u0dcb\b\u00a3\u0001\u00a4\u0001\u00a4\u0001"+
		"\u00a4\u0005\u00a4\u0dd0\b\u00a4\n\u00a4\f\u00a4\u0dd3\t\u00a4\u0001\u00a5"+
		"\u0001\u00a5\u0001\u00a5\u0005\u00a5\u0dd8\b\u00a5\n\u00a5\f\u00a5\u0ddb"+
		"\t\u00a5\u0001\u00a6\u0001\u00a6\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001"+
		"\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0003"+
		"\u00a7\u0de8\b\u00a7\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0005\u00a8\u0ded"+
		"\b\u00a8\n\u00a8\f\u00a8\u0df0\t\u00a8\u0001\u00a9\u0001\u00a9\u0001\u00a9"+
		"\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0003\u00a9"+
		"\u0dfa\b\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9"+
		"\u0001\u00a9\u0001\u00a9\u0003\u00a9\u0e03\b\u00a9\u0001\u00a9\u0001\u00a9"+
		"\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9"+
		"\u0001\u00a9\u0003\u00a9\u0e0e\b\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9"+
		"\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0003\u00a9\u0e17\b\u00a9"+
		"\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9"+
		"\u0001\u00a9\u0003\u00a9\u0e20\b\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9"+
		"\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0003\u00a9\u0e29\b\u00a9"+
		"\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0003\u00aa\u0e2f\b\u00aa"+
		"\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0005\u00ab\u0e35\b\u00ab"+
		"\n\u00ab\f\u00ab\u0e38\t\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001"+
		"\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0003\u00ab\u0e42"+
		"\b\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001"+
		"\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0003\u00ab\u0e4d\b\u00ab\u0001"+
		"\u00ac\u0003\u00ac\u0e50\b\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ad\u0001"+
		"\u00ad\u0001\u00ad\u0001\u00ad\u0003\u00ad\u0e58\b\u00ad\u0001\u00ae\u0001"+
		"\u00ae\u0001\u00af\u0001\u00af\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0003"+
		"\u00b0\u0e61\b\u00b0\u0001\u00b1\u0001\u00b1\u0003\u00b1\u0e65\b\u00b1"+
		"\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0001\u00b1"+
		"\u0003\u00b1\u0e6d\b\u00b1\u0003\u00b1\u0e6f\b\u00b1\u0001\u00b2\u0001"+
		"\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001"+
		"\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001"+
		"\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001"+
		"\u00b2\u0001\u00b2\u0003\u00b2\u0e86\b\u00b2\u0001\u00b3\u0001\u00b3\u0001"+
		"\u00b3\u0005\u00b3\u0e8b\b\u00b3\n\u00b3\f\u00b3\u0e8e\t\u00b3\u0001\u00b4"+
		"\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4"+
		"\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0003\u00b4\u0e9b\b\u00b4"+
		"\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0005\u00b5"+
		"\u0ea2\b\u00b5\n\u00b5\f\u00b5\u0ea5\t\u00b5\u0001\u00b6\u0001\u00b6\u0001"+
		"\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0003"+
		"\u00b6\u0eaf\b\u00b6\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0005\u00b7\u0eb4"+
		"\b\u00b7\n\u00b7\f\u00b7\u0eb7\t\u00b7\u0001\u00b8\u0001\u00b8\u0001\u00b8"+
		"\u0001\u00b8\u0001\u00b8\u0001\u00b8\u0003\u00b8\u0ebf\b\u00b8\u0001\u00b9"+
		"\u0001\u00b9\u0003\u00b9\u0ec3\b\u00b9\u0001\u00b9\u0003\u00b9\u0ec6\b"+
		"\u00b9\u0001\u00b9\u0003\u00b9\u0ec9\b\u00b9\u0001\u00b9\u0003\u00b9\u0ecc"+
		"\b\u00b9\u0001\u00ba\u0001\u00ba\u0001\u00ba\u0001\u00ba\u0001\u00ba\u0001"+
		"\u00ba\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001"+
		"\u00bb\u0001\u00bc\u0001\u00bc\u0003\u00bc\u0edc\b\u00bc\u0001\u00bd\u0001"+
		"\u00bd\u0001\u00bd\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0003\u00be\u0f0c\b\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0003\u00be\u0fa9\b\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0003\u00be\u0fb5\b\u00be\u0001"+
		"\u00bf\u0001\u00bf\u0001\u00bf\u0001\u00bf\u0001\u00bf\u0001\u00bf\u0001"+
		"\u00bf\u0001\u00bf\u0001\u00bf\u0001\u00bf\u0001\u00bf\u0001\u00bf\u0001"+
		"\u00bf\u0001\u00bf\u0001\u00bf\u0001\u00bf\u0001\u00bf\u0001\u00bf\u0001"+
		"\u00bf\u0001\u00bf\u0001\u00bf\u0001\u00bf\u0001\u00bf\u0001\u00bf\u0001"+
		"\u00bf\u0001\u00bf\u0001\u00bf\u0003\u00bf\u0fd2\b\u00bf\u0001\u00c0\u0001"+
		"\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0001"+
		"\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0003"+
		"\u00c0\u0fe1\b\u00c0\u0001\u00c1\u0001\u00c1\u0001\u00c1\u0001\u00c1\u0003"+
		"\u00c1\u0fe7\b\u00c1\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001"+
		"\u00c2\u0001\u00c2\u0005\u00c2\u0fef\b\u00c2\n\u00c2\f\u00c2\u0ff2\t\u00c2"+
		"\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0001\u00c4\u0001\u00c4"+
		"\u0001\u00c4\u0001\u00c4\u0001\u00c4\u0001\u00c4\u0001\u00c4\u0001\u00c4"+
		"\u0001\u00c4\u0003\u00c4\u1001\b\u00c4\u0001\u00c5\u0001\u00c5\u0003\u00c5"+
		"\u1005\b\u00c5\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0003\u00c5\u100a\b"+
		"\u00c5\u0003\u00c5\u100c\b\u00c5\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0001"+
		"\u00c6\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0001"+
		"\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0003"+
		"\u00c7\u101d\b\u00c7\u0001\u00c7\u0001\u00c7\u0003\u00c7\u1021\b\u00c7"+
		"\u0001\u00c7\u0001\u00c7\u0003\u00c7\u1025\b\u00c7\u0001\u00c7\u0001\u00c7"+
		"\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0003\u00c7\u102d\b\u00c7"+
		"\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0003\u00c8"+
		"\u1034\b\u00c8\u0001\u00c8\u0001\u00c8\u0003\u00c8\u1038\b\u00c8\u0001"+
		"\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0003\u00c8\u103f"+
		"\b\u00c8\u0001\u00c8\u0001\u00c8\u0003\u00c8\u1043\b\u00c8\u0001\u00c8"+
		"\u0003\u00c8\u1046\b\u00c8\u0001\u00c9\u0001\u00c9\u0001\u00c9\u0001\u00c9"+
		"\u0001\u00c9\u0001\u00c9\u0003\u00c9\u104e\b\u00c9\u0001\u00ca\u0001\u00ca"+
		"\u0003\u00ca\u1052\b\u00ca\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb"+
		"\u0001\u00cb\u0001\u00cc\u0001\u00cc\u0001\u00cd\u0001\u00cd\u0003\u00cd"+
		"\u105d\b\u00cd\u0001\u00cd\u0001\u00cd\u0003\u00cd\u1061\b\u00cd\u0001"+
		"\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0003\u00cd\u1067\b\u00cd\u0001"+
		"\u00cd\u0001\u00cd\u0001\u00cd\u0003\u00cd\u106c\b\u00cd\u0001\u00cd\u0001"+
		"\u00cd\u0003\u00cd\u1070\b\u00cd\u0003\u00cd\u1072\b\u00cd\u0001\u00ce"+
		"\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0003\u00ce\u1078\b\u00ce\u0001\u00cf"+
		"\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0001\u00cf"+
		"\u0005\u00cf\u1081\b\u00cf\n\u00cf\f\u00cf\u1084\t\u00cf\u0001\u00d0\u0001"+
		"\u00d0\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0003\u00d1\u108c"+
		"\b\u00d1\u0001\u00d2\u0001\u00d2\u0003\u00d2\u1090\b\u00d2\u0001\u00d3"+
		"\u0001\u00d3\u0003\u00d3\u1094\b\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3"+
		"\u0001\u00d3\u0001\u00d4\u0001\u00d4\u0003\u00d4\u109c\b\u00d4\u0001\u00d5"+
		"\u0001\u00d5\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6"+
		"\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6"+
		"\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6"+
		"\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6"+
		"\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0003\u00d6"+
		"\u10bc\b\u00d6\u0001\u00d7\u0001\u00d7\u0001\u00d7\u0001\u00d7\u0001\u00d7"+
		"\u0001\u00d7\u0001\u00d7\u0001\u00d7\u0005\u00d7\u10c6\b\u00d7\n\u00d7"+
		"\f\u00d7\u10c9\t\u00d7\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8"+
		"\u0001\u00d8\u0003\u00d8\u10d0\b\u00d8\u0001\u00d9\u0001\u00d9\u0001\u00da"+
		"\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00da"+
		"\u0003\u00da\u10db\b\u00da\u0001\u00db\u0001\u00db\u0001\u00db\u0001\u00db"+
		"\u0001\u00db\u0001\u00db\u0001\u00db\u0001\u00db\u0001\u00db\u0003\u00db"+
		"\u10e6\b\u00db\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dd\u0001\u00dd"+
		"\u0001\u00dd\u0001\u00de\u0001\u00de\u0001\u00de\u0001\u00df\u0001\u00df"+
		"\u0001\u00df\u0001\u00df\u0001\u00df\u0003\u00df\u10f6\b\u00df\u0001\u00e0"+
		"\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0"+
		"\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0"+
		"\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0003\u00e0\u1108\b\u00e0\u0001\u00e1"+
		"\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e2\u0001\u00e2"+
		"\u0001\u00e2\u0005\u00e2\u1112\b\u00e2\n\u00e2\f\u00e2\u1115\t\u00e2\u0001"+
		"\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0003\u00e3\u111c"+
		"\b\u00e3\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001"+
		"\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001"+
		"\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0003\u00e4\u112d\b\u00e4\u0001"+
		"\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0003\u00e5\u1133\b\u00e5\u0001"+
		"\u00e6\u0001\u00e6\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001"+
		"\u00e7\u0003\u00e7\u113c\b\u00e7\u0001\u00e8\u0001\u00e8\u0001\u00e8\u0001"+
		"\u00e8\u0001\u00e8\u0003\u00e8\u1143\b\u00e8\u0001\u00e9\u0001\u00e9\u0001"+
		"\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001"+
		"\u00e9\u0001\u00e9\u0003\u00e9\u114f\b\u00e9\u0001\u00ea\u0001\u00ea\u0001"+
		"\u00ea\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0005\u00eb\u1157\b\u00eb\n"+
		"\u00eb\f\u00eb\u115a\t\u00eb\u0001\u00ec\u0001\u00ec\u0001\u00ec\u0001"+
		"\u00ec\u0001\u00ec\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0005\u00ed\u1164"+
		"\b\u00ed\n\u00ed\f\u00ed\u1167\t\u00ed\u0001\u00ee\u0001\u00ee\u0001\u00ee"+
		"\u0003\u00ee\u116c\b\u00ee\u0001\u00ef\u0001\u00ef\u0003\u00ef\u1170\b"+
		"\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00f0\u0001\u00f0\u0001\u00f0\u0001"+
		"\u00f0\u0003\u00f0\u1178\b\u00f0\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001"+
		"\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001"+
		"\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0003\u00f1\u1188"+
		"\b\u00f1\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001"+
		"\u00f2\u0005\u00f2\u1190\b\u00f2\n\u00f2\f\u00f2\u1193\t\u00f2\u0001\u00f3"+
		"\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3"+
		"\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3"+
		"\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0003\u00f3\u11a6\b\u00f3"+
		"\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0001\u00f4"+
		"\u0003\u00f4\u11ae\b\u00f4\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0001\u00f5"+
		"\u0001\u00f5\u0001\u00f6\u0001\u00f6\u0001\u00f7\u0001\u00f7\u0001\u00f7"+
		"\u0001\u00f7\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0005\u00f8\u11be\b\u00f8"+
		"\n\u00f8\f\u00f8\u11c1\t\u00f8\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0001"+
		"\u00f9\u0003\u00f9\u11c7\b\u00f9\u0001\u00f9\u0001\u00f9\u0003\u00f9\u11cb"+
		"\b\u00f9\u0001\u00f9\u0003\u00f9\u11ce\b\u00f9\u0003\u00f9\u11d0\b\u00f9"+
		"\u0001\u00fa\u0001\u00fa\u0001\u00fa\u0001\u00fa\u0003\u00fa\u11d6\b\u00fa"+
		"\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb"+
		"\u0001\u00fb\u0003\u00fb\u11df\b\u00fb\u0001\u00fc\u0001\u00fc\u0001\u00fd"+
		"\u0001\u00fd\u0001\u00fd\u0001\u00fd\u0003\u00fd\u11e7\b\u00fd\u0001\u00fe"+
		"\u0001\u00fe\u0001\u00ff\u0001\u00ff\u0001\u00ff\u0005\u00ff\u11ee\b\u00ff"+
		"\n\u00ff\f\u00ff\u11f1\t\u00ff\u0001\u0100\u0003\u0100\u11f4\b\u0100\u0001"+
		"\u0100\u0001\u0100\u0003\u0100\u11f8\b\u0100\u0001\u0100\u0003\u0100\u11fb"+
		"\b\u0100\u0001\u0100\u0003\u0100\u11fe\b\u0100\u0001\u0100\u0001\u0100"+
		"\u0001\u0100\u0003\u0100\u1203\b\u0100\u0001\u0100\u0003\u0100\u1206\b"+
		"\u0100\u0003\u0100\u1208\b\u0100\u0001\u0101\u0001\u0101\u0001\u0101\u0001"+
		"\u0101\u0001\u0101\u0001\u0101\u0001\u0101\u0001\u0101\u0001\u0101\u0001"+
		"\u0101\u0001\u0101\u0003\u0101\u1215\b\u0101\u0001\u0102\u0001\u0102\u0001"+
		"\u0102\u0001\u0103\u0001\u0103\u0003\u0103\u121c\b\u0103\u0001\u0104\u0001"+
		"\u0104\u0001\u0104\u0001\u0104\u0001\u0105\u0001\u0105\u0001\u0105\u0005"+
		"\u0105\u1225\b\u0105\n\u0105\f\u0105\u1228\t\u0105\u0001\u0106\u0001\u0106"+
		"\u0001\u0106\u0001\u0106\u0001\u0106\u0001\u0106\u0001\u0106\u0001\u0106"+
		"\u0001\u0106\u0001\u0106\u0001\u0106\u0001\u0106\u0001\u0106\u0001\u0106"+
		"\u0001\u0106\u0003\u0106\u1239\b\u0106\u0001\u0107\u0001\u0107\u0001\u0107"+
		"\u0001\u0107\u0001\u0107\u0001\u0107\u0001\u0107\u0001\u0107\u0001\u0107"+
		"\u0001\u0107\u0001\u0107\u0001\u0107\u0001\u0107\u0003\u0107\u1248\b\u0107"+
		"\u0003\u0107\u124a\b\u0107\u0001\u0108\u0001\u0108\u0001\u0108\u0001\u0108"+
		"\u0001\u0108\u0001\u0108\u0001\u0108\u0001\u0108\u0001\u0108\u0001\u0108"+
		"\u0001\u0108\u0001\u0108\u0003\u0108\u1258\b\u0108\u0001\u0109\u0001\u0109"+
		"\u0003\u0109\u125c\b\u0109\u0001\u0109\u0003\u0109\u125f\b\u0109\u0001"+
		"\u0109\u0003\u0109\u1262\b\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001"+
		"\u0109\u0001\u0109\u0005\u0109\u1269\b\u0109\n\u0109\f\u0109\u126c\t\u0109"+
		"\u0001\u0109\u0001\u0109\u0003\u0109\u1270\b\u0109\u0001\u0109\u0003\u0109"+
		"\u1273\b\u0109\u0003\u0109\u1275\b\u0109\u0001\u010a\u0001\u010a\u0001"+
		"\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001"+
		"\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001"+
		"\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001"+
		"\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001"+
		"\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001"+
		"\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001"+
		"\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001"+
		"\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001"+
		"\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001"+
		"\u010a\u0003\u010a\u12b0\b\u010a\u0001\u010b\u0001\u010b\u0001\u010b\u0001"+
		"\u010b\u0003\u010b\u12b6\b\u010b\u0001\u010b\u0001\u010b\u0001\u010c\u0001"+
		"\u010c\u0001\u010c\u0003\u010c\u12bd\b\u010c\u0001\u010c\u0001\u010c\u0001"+
		"\u010d\u0001\u010d\u0001\u010d\u0003\u010d\u12c4\b\u010d\u0001\u010e\u0001"+
		"\u010e\u0001\u010e\u0005\u010e\u12c9\b\u010e\n\u010e\f\u010e\u12cc\t\u010e"+
		"\u0001\u010f\u0001\u010f\u0001\u010f\u0001\u010f\u0001\u010f\u0003\u010f"+
		"\u12d3\b\u010f\u0001\u0110\u0001\u0110\u0001\u0110\u0001\u0110\u0001\u0110"+
		"\u0003\u0110\u12da\b\u0110\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111"+
		"\u0003\u0111\u12e0\b\u0111\u0001\u0112\u0001\u0112\u0001\u0113\u0001\u0113"+
		"\u0001\u0114\u0001\u0114\u0001\u0114\u0001\u0114\u0001\u0114\u0001\u0114"+
		"\u0003\u0114\u12ec\b\u0114\u0001\u0115\u0001\u0115\u0001\u0115\u0001\u0115"+
		"\u0001\u0115\u0001\u0115\u0005\u0115\u12f4\b\u0115\n\u0115\f\u0115\u12f7"+
		"\t\u0115\u0001\u0116\u0001\u0116\u0001\u0116\u0005\u0116\u12fc\b\u0116"+
		"\n\u0116\f\u0116\u12ff\t\u0116\u0001\u0117\u0001\u0117\u0003\u0117\u1303"+
		"\b\u0117\u0001\u0118\u0001\u0118\u0001\u0118\u0001\u0118\u0001\u0118\u0001"+
		"\u0118\u0001\u0118\u0001\u0118\u0001\u0118\u0001\u0118\u0001\u0118\u0001"+
		"\u0118\u0001\u0118\u0003\u0118\u1312\b\u0118\u0001\u0119\u0001\u0119\u0001"+
		"\u0119\u0001\u0119\u0001\u0119\u0003\u0119\u1319\b\u0119\u0001\u011a\u0001"+
		"\u011a\u0001\u011a\u0001\u011a\u0001\u011a\u0001\u011a\u0001\u011a\u0003"+
		"\u011a\u1322\b\u011a\u0001\u011b\u0001\u011b\u0001\u011b\u0003\u011b\u1327"+
		"\b\u011b\u0001\u011b\u0001\u011b\u0001\u011c\u0005\u011c\u132c\b\u011c"+
		"\n\u011c\f\u011c\u132f\t\u011c\u0001\u011d\u0001\u011d\u0001\u011d\u0001"+
		"\u011d\u0001\u011d\u0001\u011d\u0001\u011d\u0001\u011d\u0003\u011d\u1339"+
		"\b\u011d\u0001\u011e\u0001\u011e\u0001\u011e\u0001\u011e\u0001\u011e\u0001"+
		"\u011e\u0001\u011e\u0003\u011e\u1342\b\u011e\u0001\u011f\u0001\u011f\u0001"+
		"\u011f\u0001\u011f\u0001\u011f\u0001\u011f\u0003\u011f\u134a\b\u011f\u0001"+
		"\u011f\u0001\u011f\u0001\u011f\u0001\u011f\u0001\u011f\u0003\u011f\u1351"+
		"\b\u011f\u0001\u011f\u0001\u011f\u0001\u011f\u0001\u011f\u0001\u011f\u0001"+
		"\u011f\u0003\u011f\u1359\b\u011f\u0001\u011f\u0001\u011f\u0001\u011f\u0001"+
		"\u011f\u0001\u011f\u0001\u011f\u0001\u011f\u0003\u011f\u1362\b\u011f\u0001"+
		"\u011f\u0001\u011f\u0001\u011f\u0001\u011f\u0001\u011f\u0001\u011f\u0001"+
		"\u011f\u0001\u011f\u0001\u011f\u0001\u011f\u0001\u011f\u0003\u011f\u136f"+
		"\b\u011f\u0001\u011f\u0003\u011f\u1372\b\u011f\u0001\u011f\u0003\u011f"+
		"\u1375\b\u011f\u0003\u011f\u1377\b\u011f\u0001\u0120\u0001\u0120\u0001"+
		"\u0120\u0001\u0120\u0001\u0121\u0004\u0121\u137e\b\u0121\u000b\u0121\f"+
		"\u0121\u137f\u0001\u0122\u0001\u0122\u0001\u0122\u0001\u0122\u0001\u0122"+
		"\u0003\u0122\u1387\b\u0122\u0001\u0122\u0001\u0122\u0001\u0122\u0003\u0122"+
		"\u138c\b\u0122\u0001\u0122\u0001\u0122\u0001\u0122\u0001\u0122\u0001\u0122"+
		"\u0001\u0122\u0001\u0122\u0001\u0122\u0001\u0122\u0003\u0122\u1397\b\u0122"+
		"\u0001\u0122\u0001\u0122\u0001\u0122\u0001\u0122\u0001\u0122\u0003\u0122"+
		"\u139e\b\u0122\u0001\u0122\u0001\u0122\u0001\u0122\u0001\u0122\u0003\u0122"+
		"\u13a4\b\u0122\u0001\u0122\u0003\u0122\u13a7\b\u0122\u0001\u0123\u0001"+
		"\u0123\u0001\u0123\u0001\u0123\u0001\u0124\u0001\u0124\u0001\u0125\u0001"+
		"\u0125\u0001\u0125\u0005\u0125\u13b2\b\u0125\n\u0125\f\u0125\u13b5\t\u0125"+
		"\u0001\u0126\u0001\u0126\u0001\u0126\u0003\u0126\u13ba\b\u0126\u0001\u0127"+
		"\u0001\u0127\u0001\u0127\u0001\u0128\u0001\u0128\u0001\u0128\u0001\u0128"+
		"\u0001\u0128\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u012a"+
		"\u0001\u012a\u0001\u012a\u0005\u012a\u13cb\b\u012a\n\u012a\f\u012a\u13ce"+
		"\t\u012a\u0001\u012b\u0001\u012b\u0001\u012b\u0001\u012b\u0001\u012b\u0003"+
		"\u012b\u13d5\b\u012b\u0001\u012c\u0001\u012c\u0001\u012c\u0001\u012c\u0001"+
		"\u012c\u0003\u012c\u13dc\b\u012c\u0001\u012d\u0001\u012d\u0001\u012d\u0001"+
		"\u012d\u0001\u012d\u0001\u012d\u0001\u012d\u0001\u012d\u0003\u012d\u13e6"+
		"\b\u012d\u0001\u012e\u0001\u012e\u0001\u012e\u0001\u012e\u0001\u012f\u0001"+
		"\u012f\u0001\u012f\u0001\u012f\u0001\u0130\u0001\u0130\u0001\u0130\u0001"+
		"\u0130\u0001\u0130\u0001\u0130\u0001\u0130\u0001\u0130\u0003\u0130\u13f8"+
		"\b\u0130\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0001"+
		"\u0131\u0003\u0131\u1400\b\u0131\u0001\u0132\u0001\u0132\u0001\u0132\u0001"+
		"\u0132\u0001\u0132\u0001\u0133\u0001\u0133\u0001\u0133\u0005\u0133\u140a"+
		"\b\u0133\n\u0133\f\u0133\u140d\t\u0133\u0001\u0134\u0001\u0134\u0001\u0134"+
		"\u0001\u0135\u0001\u0135\u0001\u0136\u0001\u0136\u0001\u0137\u0001\u0137"+
		"\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0003\u0137\u141c\b\u0137"+
		"\u0001\u0138\u0001\u0138\u0001\u0138\u0003\u0138\u1421\b\u0138\u0001\u0138"+
		"\u0001\u0138\u0001\u0138\u0001\u0138\u0001\u0139\u0001\u0139\u0001\u0139"+
		"\u0001\u0139\u0001\u0139\u0001\u0139\u0001\u0139\u0001\u0139\u0001\u0139"+
		"\u0001\u0139\u0001\u0139\u0001\u0139\u0001\u0139\u0001\u0139\u0001\u0139"+
		"\u0003\u0139\u1436\b\u0139\u0001\u013a\u0001\u013a\u0001\u013a\u0001\u013a"+
		"\u0001\u013a\u0001\u013a\u0003\u013a\u143e\b\u013a\u0001\u013b\u0001\u013b"+
		"\u0001\u013b\u0005\u013b\u1443\b\u013b\n\u013b\f\u013b\u1446\t\u013b\u0001"+
		"\u013c\u0001\u013c\u0003\u013c\u144a\b\u013c\u0001\u013d\u0001\u013d\u0001"+
		"\u013e\u0001\u013e\u0001\u013e\u0005\u013e\u1451\b\u013e\n\u013e\f\u013e"+
		"\u1454\t\u013e\u0001\u013f\u0001\u013f\u0001\u013f\u0003\u013f\u1459\b"+
		"\u013f\u0001\u0140\u0001\u0140\u0001\u0140\u0001\u0140\u0001\u0140\u0001"+
		"\u0140\u0001\u0140\u0001\u0140\u0003\u0140\u1463\b\u0140\u0001\u0141\u0001"+
		"\u0141\u0003\u0141\u1467\b\u0141\u0001\u0141\u0005\u0141\u146a\b\u0141"+
		"\n\u0141\f\u0141\u146d\t\u0141\u0001\u0142\u0001\u0142\u0001\u0142\u0001"+
		"\u0142\u0001\u0142\u0001\u0142\u0001\u0142\u0001\u0142\u0001\u0142\u0001"+
		"\u0142\u0003\u0142\u1479\b\u0142\u0001\u0143\u0001\u0143\u0001\u0143\u0001"+
		"\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0001"+
		"\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0003\u0143\u1489"+
		"\b\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0001"+
		"\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0001"+
		"\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0003\u0143\u149b"+
		"\b\u0143\u0001\u0144\u0001\u0144\u0001\u0145\u0001\u0145\u0001\u0145\u0001"+
		"\u0145\u0003\u0145\u14a3\b\u0145\u0001\u0146\u0001\u0146\u0001\u0146\u0001"+
		"\u0147\u0001\u0147\u0001\u0147\u0001\u0147\u0001\u0147\u0001\u0147\u0001"+
		"\u0147\u0001\u0147\u0003\u0147\u14b0\b\u0147\u0001\u0148\u0001\u0148\u0003"+
		"\u0148\u14b4\b\u0148\u0001\u0149\u0001\u0149\u0001\u0149\u0005\u0149\u14b9"+
		"\b\u0149\n\u0149\f\u0149\u14bc\t\u0149\u0001\u014a\u0001\u014a\u0001\u014a"+
		"\u0001\u014a\u0001\u014a\u0001\u014a\u0001\u014a\u0001\u014a\u0001\u014a"+
		"\u0001\u014a\u0001\u014a\u0001\u014a\u0001\u014a\u0001\u014a\u0001\u014a"+
		"\u0001\u014a\u0001\u014a\u0001\u014a\u0001\u014a\u0001\u014a\u0001\u014a"+
		"\u0001\u014a\u0001\u014a\u0001\u014a\u0001\u014a\u0001\u014a\u0001\u014a"+
		"\u0001\u014a\u0001\u014a\u0001\u014a\u0001\u014a\u0001\u014a\u0001\u014a"+
		"\u0001\u014a\u0001\u014a\u0003\u014a\u14e1\b\u014a\u0001\u014b\u0001\u014b"+
		"\u0001\u014b\u0003\u014b\u14e6\b\u014b\u0001\u014c\u0001\u014c\u0001\u014d"+
		"\u0001\u014d\u0001\u014e\u0001\u014e\u0001\u014e\u0005\u014e\u14ef\b\u014e"+
		"\n\u014e\f\u014e\u14f2\t\u014e\u0001\u014f\u0001\u014f\u0001\u014f\u0001"+
		"\u014f\u0001\u0150\u0001\u0150\u0001\u0150\u0001\u0151\u0001\u0151\u0001"+
		"\u0152\u0003\u0152\u14fe\b\u0152\u0001\u0152\u0001\u0152\u0001\u0153\u0001"+
		"\u0153\u0001\u0153\u0003\u0153\u1505\b\u0153\u0001\u0154\u0001\u0154\u0003"+
		"\u0154\u1509\b\u0154\u0001\u0154\u0001\u0154\u0003\u0154\u150d\b\u0154"+
		"\u0001\u0154\u0003\u0154\u1510\b\u0154\u0001\u0155\u0001\u0155\u0001\u0155"+
		"\u0001\u0155\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0003\u0156"+
		"\u151a\b\u0156\u0001\u0156\u0005\u0156\u151d\b\u0156\n\u0156\f\u0156\u1520"+
		"\t\u0156\u0001\u0157\u0001\u0157\u0001\u0157\u0001\u0157\u0001\u0157\u0001"+
		"\u0157\u0001\u0157\u0001\u0157\u0001\u0157\u0001\u0157\u0001\u0157\u0001"+
		"\u0157\u0001\u0157\u0003\u0157\u152f\b\u0157\u0001\u0158\u0001\u0158\u0001"+
		"\u0158\u0001\u0158\u0001\u0158\u0001\u0158\u0001\u0158\u0001\u0158\u0001"+
		"\u0158\u0001\u0158\u0001\u0158\u0001\u0158\u0001\u0158\u0001\u0158\u0001"+
		"\u0158\u0001\u0158\u0001\u0158\u0001\u0158\u0001\u0158\u0001\u0158\u0001"+
		"\u0158\u0001\u0158\u0001\u0158\u0001\u0158\u0001\u0158\u0001\u0158\u0001"+
		"\u0158\u0001\u0158\u0001\u0158\u0001\u0158\u0001\u0158\u0001\u0158\u0001"+
		"\u0158\u0001\u0158\u0003\u0158\u1553\b\u0158\u0001\u0159\u0001\u0159\u0001"+
		"\u0159\u0003\u0159\u1558\b\u0159\u0001\u0159\u0001\u0159\u0001\u015a\u0001"+
		"\u015a\u0001\u015a\u0001\u015a\u0001\u015b\u0001\u015b\u0003\u015b\u1562"+
		"\b\u015b\u0001\u015b\u0001\u015b\u0001\u015b\u0001\u015b\u0001\u015b\u0001"+
		"\u015b\u0003\u015b\u156a\b\u015b\u0001\u015b\u0001\u015b\u0001\u015b\u0001"+
		"\u015b\u0001\u015b\u0001\u015b\u0003\u015b\u1572\b\u015b\u0001\u015b\u0001"+
		"\u015b\u0001\u015b\u0001\u015b\u0001\u015b\u0001\u015b\u0003\u015b\u157a"+
		"\b\u015b\u0001\u015c\u0005\u015c\u157d\b\u015c\n\u015c\f\u015c\u1580\t"+
		"\u015c\u0001\u015d\u0001\u015d\u0001\u015d\u0001\u015d\u0003\u015d\u1586"+
		"\b\u015d\u0001\u015d\u0005\u015d\u1589\b\u015d\n\u015d\f\u015d\u158c\t"+
		"\u015d\u0001\u015e\u0001\u015e\u0001\u015e\u0003\u015e\u1591\b\u015e\u0001"+
		"\u015e\u0001\u015e\u0001\u015f\u0001\u015f\u0001\u015f\u0001\u015f\u0001"+
		"\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0003\u0160\u159d\b\u0160\u0001"+
		"\u0160\u0005\u0160\u15a0\b\u0160\n\u0160\f\u0160\u15a3\t\u0160\u0001\u0161"+
		"\u0001\u0161\u0001\u0161\u0001\u0161\u0001\u0161\u0001\u0161\u0001\u0161"+
		"\u0001\u0162\u0001\u0162\u0001\u0162\u0003\u0162\u15af\b\u0162\u0001\u0162"+
		"\u0001\u0162\u0001\u0163\u0001\u0163\u0001\u0163\u0001\u0163\u0003\u0163"+
		"\u15b7\b\u0163\u0001\u0163\u0001\u0163\u0001\u0163\u0001\u0163\u0001\u0163"+
		"\u0001\u0163\u0001\u0163\u0001\u0163\u0003\u0163\u15c1\b\u0163\u0001\u0163"+
		"\u0001\u0163\u0001\u0163\u0001\u0163\u0001\u0163\u0001\u0163\u0001\u0163"+
		"\u0003\u0163\u15ca\b\u0163\u0001\u0163\u0001\u0163\u0003\u0163\u15ce\b"+
		"\u0163\u0001\u0163\u0001\u0163\u0003\u0163\u15d2\b\u0163\u0001\u0163\u0003"+
		"\u0163\u15d5\b\u0163\u0001\u0163\u0003\u0163\u15d8\b\u0163\u0001\u0163"+
		"\u0003\u0163\u15db\b\u0163\u0001\u0163\u0003\u0163\u15de\b\u0163\u0001"+
		"\u0163\u0001\u0163\u0001\u0163\u0003\u0163\u15e3\b\u0163\u0003\u0163\u15e5"+
		"\b\u0163\u0001\u0163\u0001\u0163\u0001\u0163\u0001\u0163\u0003\u0163\u15eb"+
		"\b\u0163\u0003\u0163\u15ed\b\u0163\u0001\u0164\u0001\u0164\u0001\u0164"+
		"\u0001\u0164\u0001\u0165\u0001\u0165\u0001\u0165\u0001\u0165\u0001\u0165"+
		"\u0001\u0165\u0001\u0165\u0001\u0165\u0001\u0165\u0001\u0165\u0001\u0165"+
		"\u0001\u0165\u0001\u0165\u0001\u0165\u0001\u0165\u0001\u0165\u0001\u0165"+
		"\u0001\u0165\u0001\u0165\u0001\u0165\u0001\u0165\u0001\u0165\u0001\u0165"+
		"\u0001\u0165\u0001\u0165\u0001\u0165\u0003\u0165\u160d\b\u0165\u0001\u0166"+
		"\u0001\u0166\u0001\u0166\u0005\u0166\u1612\b\u0166\n\u0166\f\u0166\u1615"+
		"\t\u0166\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0168\u0001\u0168\u0001"+
		"\u0168\u0005\u0168\u161d\b\u0168\n\u0168\f\u0168\u1620\t\u0168\u0001\u0169"+
		"\u0001\u0169\u0003\u0169\u1624\b\u0169\u0001\u016a\u0001\u016a\u0001\u016a"+
		"\u0003\u016a\u1629\b\u016a\u0001\u016a\u0001\u016a\u0001\u016b\u0001\u016b"+
		"\u0001\u016b\u0001\u016b\u0001\u016b\u0003\u016b\u1632\b\u016b\u0001\u016c"+
		"\u0001\u016c\u0001\u016c\u0001\u016d\u0001\u016d\u0001\u016d\u0001\u016d"+
		"\u0001\u016d\u0001\u016d\u0001\u016d\u0003\u016d\u163e\b\u016d\u0001\u016e"+
		"\u0001\u016e\u0001\u016e\u0001\u016e\u0003\u016e\u1644\b\u016e\u0001\u016f"+
		"\u0001\u016f\u0001\u016f\u0001\u0170\u0001\u0170\u0001\u0170\u0003\u0170"+
		"\u164c\b\u0170\u0001\u0171\u0001\u0171\u0001\u0171\u0001\u0171\u0001\u0171"+
		"\u0003\u0171\u1653\b\u0171\u0001\u0171\u0003\u0171\u1656\b\u0171\u0001"+
		"\u0171\u0001\u0171\u0001\u0171\u0001\u0171\u0003\u0171\u165c\b\u0171\u0001"+
		"\u0171\u0001\u0171\u0001\u0171\u0001\u0171\u0003\u0171\u1662\b\u0171\u0001"+
		"\u0171\u0001\u0171\u0003\u0171\u1666\b\u0171\u0001\u0171\u0003\u0171\u1669"+
		"\b\u0171\u0001\u0171\u0003\u0171\u166c\b\u0171\u0001\u0172\u0001\u0172"+
		"\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0173\u0001\u0173\u0001\u0173"+
		"\u0005\u0173\u1676\b\u0173\n\u0173\f\u0173\u1679\t\u0173\u0001\u0174\u0001"+
		"\u0174\u0001\u0174\u0001\u0175\u0001\u0175\u0001\u0175\u0001\u0175\u0003"+
		"\u0175\u1682\b\u0175\u0001\u0175\u0005\u0175\u1685\b\u0175\n\u0175\f\u0175"+
		"\u1688\t\u0175\u0001\u0176\u0001\u0176\u0001\u0176\u0003\u0176\u168d\b"+
		"\u0176\u0001\u0176\u0003\u0176\u1690\b\u0176\u0001\u0176\u0003\u0176\u1693"+
		"\b\u0176\u0001\u0176\u0001\u0176\u0001\u0176\u0001\u0176\u0001\u0176\u0001"+
		"\u0176\u0005\u0176\u169b\b\u0176\n\u0176\f\u0176\u169e\t\u0176\u0003\u0176"+
		"\u16a0\b\u0176\u0001\u0176\u0003\u0176\u16a3\b\u0176\u0001\u0176\u0001"+
		"\u0176\u0003\u0176\u16a7\b\u0176\u0001\u0176\u0001\u0176\u0001\u0176\u0001"+
		"\u0176\u0003\u0176\u16ad\b\u0176\u0001\u0176\u0001\u0176\u0003\u0176\u16b1"+
		"\b\u0176\u0001\u0177\u0001\u0177\u0001\u0177\u0003\u0177\u16b6\b\u0177"+
		"\u0001\u0177\u0001\u0177\u0001\u0178\u0001\u0178\u0001\u0178\u0003\u0178"+
		"\u16bd\b\u0178\u0001\u0178\u0001\u0178\u0001\u0178\u0005\u0178\u16c2\b"+
		"\u0178\n\u0178\f\u0178\u16c5\t\u0178\u0001\u0179\u0001\u0179\u0003\u0179"+
		"\u16c9\b\u0179\u0001\u0179\u0001\u0179\u0001\u0179\u0003\u0179\u16ce\b"+
		"\u0179\u0001\u017a\u0001\u017a\u0001\u017a\u0001\u017a\u0001\u017a\u0001"+
		"\u017a\u0001\u017a\u0001\u017a\u0003\u017a\u16d8\b\u017a\u0001\u017b\u0001"+
		"\u017b\u0001\u017b\u0003\u017b\u16dd\b\u017b\u0001\u017b\u0001\u017b\u0001"+
		"\u017b\u0001\u017b\u0001\u017b\u0001\u017b\u0001\u017b\u0001\u017b\u0001"+
		"\u017b\u0001\u017b\u0001\u017b\u0003\u017b\u16ea\b\u017b\u0001\u017b\u0001"+
		"\u017b\u0001\u017b\u0001\u017b\u0003\u017b\u16f0\b\u017b\u0003\u017b\u16f2"+
		"\b\u017b\u0001\u017c\u0001\u017c\u0001\u017c\u0003\u017c\u16f7\b\u017c"+
		"\u0001\u017c\u0001\u017c\u0001\u017c\u0003\u017c\u16fc\b\u017c\u0001\u017c"+
		"\u0001\u017c\u0001\u017c\u0001\u017d\u0001\u017d\u0001\u017d\u0003\u017d"+
		"\u1704\b\u017d\u0001\u017d\u0001\u017d\u0003\u017d\u1708\b\u017d\u0001"+
		"\u017e\u0001\u017e\u0001\u017f\u0001\u017f\u0001\u017f\u0001\u017f\u0003"+
		"\u017f\u1710\b\u017f\u0001\u017f\u0001\u017f\u0003\u017f\u1714\b\u017f"+
		"\u0001\u0180\u0001\u0180\u0001\u0181\u0001\u0181\u0003\u0181\u171a\b\u0181"+
		"\u0001\u0181\u0001\u0181\u0001\u0181\u0003\u0181\u171f\b\u0181\u0001\u0181"+
		"\u0003\u0181\u1722\b\u0181\u0001\u0182\u0001\u0182\u0001\u0182\u0001\u0182"+
		"\u0003\u0182\u1728\b\u0182\u0001\u0183\u0003\u0183\u172b\b\u0183\u0001"+
		"\u0183\u0001\u0183\u0003\u0183\u172f\b\u0183\u0001\u0184\u0001\u0184\u0001"+
		"\u0184\u0001\u0184\u0005\u0184\u1735\b\u0184\n\u0184\f\u0184\u1738\t\u0184"+
		"\u0003\u0184\u173a\b\u0184\u0001\u0184\u0001\u0184\u0001\u0185\u0001\u0185"+
		"\u0001\u0185\u0001\u0185\u0001\u0185\u0005\u0185\u1743\b\u0185\n\u0185"+
		"\f\u0185\u1746\t\u0185\u0003\u0185\u1748\b\u0185\u0001\u0186\u0001\u0186"+
		"\u0001\u0186\u0003\u0186\u174d\b\u0186\u0001\u0186\u0005\u0186\u1750\b"+
		"\u0186\n\u0186\f\u0186\u1753\t\u0186\u0001\u0187\u0003\u0187\u1756\b\u0187"+
		"\u0001\u0187\u0001\u0187\u0001\u0187\u0001\u0188\u0001\u0188\u0001\u0188"+
		"\u0001\u0189\u0003\u0189\u175f\b\u0189\u0001\u0189\u0001\u0189\u0001\u0189"+
		"\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189"+
		"\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189"+
		"\u0001\u0189\u0003\u0189\u1771\b\u0189\u0001\u0189\u0001\u0189\u0001\u0189"+
		"\u0001\u0189\u0001\u0189\u0001\u0189\u0003\u0189\u1779\b\u0189\u0001\u0189"+
		"\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189"+
		"\u0001\u0189\u0003\u0189\u1783\b\u0189\u0001\u0189\u0001\u0189\u0001\u0189"+
		"\u0001\u0189\u0001\u0189\u0001\u0189\u0003\u0189\u178b\b\u0189\u0001\u0189"+
		"\u0001\u0189\u0001\u0189\u0005\u0189\u1790\b\u0189\n\u0189\f\u0189\u1793"+
		"\t\u0189\u0003\u0189\u1795\b\u0189\u0001\u018a\u0001\u018a\u0001\u018a"+
		"\u0001\u018a\u0003\u018a\u179b\b\u018a\u0001\u018b\u0001\u018b\u0003\u018b"+
		"\u179f\b\u018b\u0001\u018c\u0004\u018c\u17a2\b\u018c\u000b\u018c\f\u018c"+
		"\u17a3\u0001\u018d\u0001\u018d\u0003\u018d\u17a8\b\u018d\u0001\u018d\u0001"+
		"\u018d\u0001\u018d\u0003\u018d\u17ad\b\u018d\u0001\u018d\u0001\u018d\u0001"+
		"\u018d\u0001\u018d\u0001\u018d\u0001\u018d\u0001\u018d\u0001\u018d\u0001"+
		"\u018d\u0001\u018d\u0001\u018d\u0001\u018d\u0001\u018d\u0001\u018d\u0001"+
		"\u018d\u0001\u018d\u0003\u018d\u17bf\b\u018d\u0001\u018e\u0001\u018e\u0001"+
		"\u018e\u0001\u018e\u0003\u018e\u17c5\b\u018e\u0001\u018e\u0001\u018e\u0001"+
		"\u018e\u0001\u018e\u0003\u018e\u17cb\b\u018e\u0001\u018f\u0001\u018f\u0001"+
		"\u018f\u0001\u018f\u0001\u018f\u0001\u018f\u0003\u018f\u17d3\b\u018f\u0001"+
		"\u0190\u0003\u0190\u17d6\b\u0190\u0001\u0190\u0003\u0190\u17d9\b\u0190"+
		"\u0001\u0190\u0001\u0190\u0003\u0190\u17dd\b\u0190\u0001\u0191\u0001\u0191"+
		"\u0001\u0191\u0001\u0192\u0003\u0192\u17e3\b\u0192\u0001\u0192\u0001\u0192"+
		"\u0001\u0192\u0001\u0193\u0001\u0193\u0001\u0193\u0001\u0193\u0001\u0193"+
		"\u0001\u0193\u0001\u0193\u0001\u0193\u0001\u0193\u0001\u0193\u0001\u0193"+
		"\u0001\u0193\u0003\u0193\u17f4\b\u0193\u0001\u0193\u0001\u0193\u0001\u0193"+
		"\u0001\u0193\u0001\u0193\u0003\u0193\u17fb\b\u0193\u0001\u0193\u0001\u0193"+
		"\u0001\u0193\u0001\u0193\u0001\u0193\u0001\u0193\u0003\u0193\u1803\b\u0193"+
		"\u0001\u0193\u0001\u0193\u0001\u0193\u0001\u0193\u0001\u0193\u0001\u0193"+
		"\u0003\u0193\u180b\b\u0193\u0001\u0193\u0001\u0193\u0001\u0193\u0005\u0193"+
		"\u1810\b\u0193\n\u0193\f\u0193\u1813\t\u0193\u0003\u0193\u1815\b\u0193"+
		"\u0001\u0194\u0001\u0194\u0001\u0194\u0001\u0194\u0001\u0194\u0001\u0195"+
		"\u0001\u0195\u0001\u0195\u0005\u0195\u181f\b\u0195\n\u0195\f\u0195\u1822"+
		"\t\u0195\u0001\u0196\u0001\u0196\u0001\u0196\u0001\u0196\u0001\u0196\u0001"+
		"\u0196\u0001\u0196\u0001\u0196\u0001\u0196\u0001\u0196\u0001\u0196\u0003"+
		"\u0196\u182f\b\u0196\u0001\u0197\u0001\u0197\u0003\u0197\u1833\b\u0197"+
		"\u0001\u0198\u0001\u0198\u0001\u0198\u0001\u0198\u0001\u0198\u0001\u0198"+
		"\u0001\u0198\u0001\u0199\u0001\u0199\u0001\u0199\u0005\u0199\u183f\b\u0199"+
		"\n\u0199\f\u0199\u1842\t\u0199\u0001\u019a\u0001\u019a\u0001\u019a\u0003"+
		"\u019a\u1847\b\u019a\u0001\u019a\u0003\u019a\u184a\b\u019a\u0001\u019a"+
		"\u0001\u019a\u0001\u019a\u0001\u019a\u0001\u019a\u0003\u019a\u1851\b\u019a"+
		"\u0001\u019a\u0003\u019a\u1854\b\u019a\u0001\u019a\u0001\u019a\u0001\u019a"+
		"\u0003\u019a\u1859\b\u019a\u0001\u019a\u0003\u019a\u185c\b\u019a\u0003"+
		"\u019a\u185e\b\u019a\u0001\u019b\u0001\u019b\u0003\u019b\u1862\b\u019b"+
		"\u0001\u019c\u0001\u019c\u0003\u019c\u1866\b\u019c\u0001\u019d\u0003\u019d"+
		"\u1869\b\u019d\u0001\u019e\u0003\u019e\u186c\b\u019e\u0001\u019f\u0003"+
		"\u019f\u186f\b\u019f\u0001\u01a0\u0003\u01a0\u1872\b\u01a0\u0001\u01a1"+
		"\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1"+
		"\u0001\u01a1\u0003\u01a1\u187c\b\u01a1\u0001\u01a2\u0001\u01a2\u0001\u01a2"+
		"\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2"+
		"\u0003\u01a2\u1887\b\u01a2\u0003\u01a2\u1889\b\u01a2\u0001\u01a3\u0001"+
		"\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0003\u01a3\u1890\b\u01a3\u0001"+
		"\u01a4\u0001\u01a4\u0001\u01a4\u0001\u01a4\u0001\u01a5\u0001\u01a5\u0001"+
		"\u01a5\u0001\u01a5\u0001\u01a6\u0001\u01a6\u0001\u01a6\u0001\u01a6\u0001"+
		"\u01a6\u0001\u01a7\u0001\u01a7\u0001\u01a7\u0003\u01a7\u18a2\b\u01a7\u0001"+
		"\u01a7\u0001\u01a7\u0001\u01a7\u0001\u01a7\u0003\u01a7\u18a8\b\u01a7\u0001"+
		"\u01a8\u0001\u01a8\u0001\u01a8\u0005\u01a8\u18ad\b\u01a8\n\u01a8\f\u01a8"+
		"\u18b0\t\u01a8\u0001\u01a9\u0001\u01a9\u0003\u01a9\u18b4\b\u01a9\u0001"+
		"\u01aa\u0001\u01aa\u0001\u01aa\u0005\u01aa\u18b9\b\u01aa\n\u01aa\f\u01aa"+
		"\u18bc\t\u01aa\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab"+
		"\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0003\u01ab\u18c7\b\u01ab"+
		"\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab"+
		"\u0001\u01ab\u0003\u01ab\u18d0\b\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab"+
		"\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0003\u01ab\u18d8\b\u01ab\u0001\u01ab"+
		"\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0003\u01ab"+
		"\u18e0\b\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab"+
		"\u0001\u01ab\u0003\u01ab\u18e8\b\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab"+
		"\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0003\u01ab\u18f1\b\u01ab"+
		"\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab"+
		"\u0003\u01ab\u18f9\b\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab"+
		"\u0003\u01ab\u18ff\b\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab"+
		"\u0001\u01ab\u0003\u01ab\u1906\b\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab"+
		"\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab"+
		"\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0003\u01ab"+
		"\u1916\b\u01ab\u0001\u01ab\u0003\u01ab\u1919\b\u01ab\u0001\u01ab\u0001"+
		"\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001"+
		"\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001"+
		"\u01ab\u0001\u01ab\u0005\u01ab\u192a\b\u01ab\n\u01ab\f\u01ab\u192d\t\u01ab"+
		"\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab"+
		"\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab"+
		"\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab"+
		"\u0001\u01ab\u0005\u01ab\u1942\b\u01ab\n\u01ab\f\u01ab\u1945\t\u01ab\u0001"+
		"\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001"+
		"\u01ab\u0005\u01ab\u194e\b\u01ab\n\u01ab\f\u01ab\u1951\t\u01ab\u0001\u01ab"+
		"\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab"+
		"\u0005\u01ab\u195a\b\u01ab\n\u01ab\f\u01ab\u195d\t\u01ab\u0001\u01ab\u0001"+
		"\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001"+
		"\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001"+
		"\u01ab\u0001\u01ab\u0001\u01ab\u0003\u01ab\u196f\b\u01ab\u0001\u01ab\u0001"+
		"\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001"+
		"\u01ab\u0003\u01ab\u1979\b\u01ab\u0003\u01ab\u197b\b\u01ab\u0001\u01ac"+
		"\u0001\u01ac\u0003\u01ac\u197f\b\u01ac\u0001\u01ac\u0003\u01ac\u1982\b"+
		"\u01ac\u0001\u01ac\u0001\u01ac\u0001\u01ad\u0001\u01ad\u0003\u01ad\u1988"+
		"\b\u01ad\u0001\u01ad\u0003\u01ad\u198b\b\u01ad\u0001\u01ad\u0001\u01ad"+
		"\u0003\u01ad\u198f\b\u01ad\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0003\u01ae"+
		"\u1994\b\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0003\u01ae\u1999\b"+
		"\u01ae\u0001\u01ae\u0001\u01ae\u0003\u01ae\u199d\b\u01ae\u0001\u01ae\u0001"+
		"\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001"+
		"\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001"+
		"\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001"+
		"\u01ae\u0003\u01ae\u19b3\b\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001"+
		"\u01ae\u0001\u01ae\u0001\u01ae\u0003\u01ae\u19bb\b\u01ae\u0001\u01ae\u0001"+
		"\u01ae\u0001\u01ae\u0005\u01ae\u19c0\b\u01ae\n\u01ae\f\u01ae\u19c3\t\u01ae"+
		"\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0003\u01ae\u19c9\b\u01ae"+
		"\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae"+
		"\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae"+
		"\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae"+
		"\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0003\u01ae\u19e1\b\u01ae"+
		"\u0001\u01af\u0001\u01af\u0003\u01af\u19e5\b\u01af\u0001\u01af\u0001\u01af"+
		"\u0001\u01b0\u0001\u01b0\u0001\u01b0\u0001\u01b0\u0001\u01b0\u0003\u01b0"+
		"\u19ee\b\u01b0\u0001\u01b0\u0003\u01b0\u19f1\b\u01b0\u0001\u01b0\u0001"+
		"\u01b0\u0003\u01b0\u19f5\b\u01b0\u0001\u01b0\u0003\u01b0\u19f8\b\u01b0"+
		"\u0003\u01b0\u19fa\b\u01b0\u0001\u01b1\u0001\u01b1\u0001\u01b1\u0005\u01b1"+
		"\u19ff\b\u01b1\n\u01b1\f\u01b1\u1a02\t\u01b1\u0001\u01b2\u0001\u01b2\u0001"+
		"\u01b2\u0001\u01b2\u0001\u01b3\u0001\u01b3\u0001\u01b3\u0001\u01b3\u0003"+
		"\u01b3\u1a0c\b\u01b3\u0001\u01b3\u0003\u01b3\u1a0f\b\u01b3\u0001\u01b4"+
		"\u0001\u01b4\u0003\u01b4\u1a13\b\u01b4\u0001\u01b4\u0001\u01b4\u0003\u01b4"+
		"\u1a17\b\u01b4\u0001\u01b4\u0001\u01b4\u0001\u01b4\u0001\u01b4\u0001\u01b4"+
		"\u0001\u01b5\u0001\u01b5\u0001\u01b5\u0001\u01b5\u0001\u01b5\u0001\u01b6"+
		"\u0001\u01b6\u0001\u01b6\u0001\u01b6\u0001\u01b7\u0001\u01b7\u0001\u01b7"+
		"\u0003\u01b7\u1a2a\b\u01b7\u0001\u01b7\u0001\u01b7\u0003\u01b7\u1a2e\b"+
		"\u01b7\u0001\u01b8\u0001\u01b8\u0001\u01b8\u0001\u01b8\u0001\u01b9\u0001"+
		"\u01b9\u0001\u01ba\u0001\u01ba\u0003\u01ba\u1a38\b\u01ba\u0001\u01ba\u0001"+
		"\u01ba\u0001\u01ba\u0001\u01ba\u0001\u01bb\u0001\u01bb\u0001\u01bb\u0001"+
		"\u01bb\u0001\u01bb\u0001\u01bb\u0001\u01bc\u0001\u01bc\u0001\u01bc\u0001"+
		"\u01bc\u0001\u01bd\u0001\u01bd\u0001\u01bd\u0005\u01bd\u1a4b\b\u01bd\n"+
		"\u01bd\f\u01bd\u1a4e\t\u01bd\u0001\u01be\u0001\u01be\u0001\u01be\u0001"+
		"\u01be\u0001\u01be\u0001\u01bf\u0003\u01bf\u1a56\b\u01bf\u0001\u01bf\u0003"+
		"\u01bf\u1a59\b\u01bf\u0001\u01bf\u0001\u01bf\u0001\u01bf\u0001\u01bf\u0001"+
		"\u01bf\u0001\u01bf\u0001\u01bf\u0001\u01bf\u0001\u01bf\u0001\u01bf\u0003"+
		"\u01bf\u1a65\b\u01bf\u0001\u01c0\u0004\u01c0\u1a68\b\u01c0\u000b\u01c0"+
		"\f\u01c0\u1a69\u0001\u01c1\u0001\u01c1\u0003\u01c1\u1a6e\b\u01c1\u0001"+
		"\u01c1\u0001\u01c1\u0001\u01c1\u0001\u01c1\u0003\u01c1\u1a74\b\u01c1\u0001"+
		"\u01c1\u0001\u01c1\u0001\u01c1\u0001\u01c1\u0003\u01c1\u1a7a\b\u01c1\u0001"+
		"\u01c1\u0001\u01c1\u0003\u01c1\u1a7e\b\u01c1\u0001\u01c2\u0001\u01c2\u0001"+
		"\u01c2\u0005\u01c2\u1a83\b\u01c2\n\u01c2\f\u01c2\u1a86\t\u01c2\u0001\u01c3"+
		"\u0001\u01c3\u0003\u01c3\u1a8a\b\u01c3\u0001\u01c3\u0003\u01c3\u1a8d\b"+
		"\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0003\u01c3\u1a92\b\u01c3\u0001"+
		"\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0003\u01c3\u1a99"+
		"\b\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001"+
		"\u01c3\u0001\u01c3\u0003\u01c3\u1aa2\b\u01c3\u0001\u01c3\u0001\u01c3\u0001"+
		"\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0003\u01c3\u1aab"+
		"\b\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001"+
		"\u01c3\u0001\u01c3\u0003\u01c3\u1ab4\b\u01c3\u0001\u01c3\u0001\u01c3\u0001"+
		"\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0003\u01c3\u1abc\b\u01c3\u0001"+
		"\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0003"+
		"\u01c3\u1ac4\b\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001"+
		"\u01c3\u0001\u01c3\u0003\u01c3\u1acc\b\u01c3\u0001\u01c3\u0001\u01c3\u0001"+
		"\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0003\u01c3\u1ad5"+
		"\b\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001"+
		"\u01c3\u0003\u01c3\u1add\b\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001"+
		"\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0003\u01c3\u1ae6\b\u01c3\u0001"+
		"\u01c3\u0001\u01c3\u0003\u01c3\u1aea\b\u01c3\u0001\u01c3\u0001\u01c3\u0001"+
		"\u01c3\u0001\u01c3\u0001\u01c3\u0003\u01c3\u1af1\b\u01c3\u0001\u01c3\u0001"+
		"\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0003\u01c3\u1af9"+
		"\b\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001"+
		"\u01c3\u0001\u01c3\u0003\u01c3\u1b02\b\u01c3\u0001\u01c3\u0001\u01c3\u0001"+
		"\u01c3\u0003\u01c3\u1b07\b\u01c3\u0001\u01c3\u0001\u01c3\u0003\u01c3\u1b0b"+
		"\b\u01c3\u0001\u01c3\u0001\u01c3\u0003\u01c3\u1b0f\b\u01c3\u0001\u01c3"+
		"\u0001\u01c3\u0003\u01c3\u1b13\b\u01c3\u0001\u01c3\u0001\u01c3\u0003\u01c3"+
		"\u1b17\b\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0003\u01c3\u1b1c\b"+
		"\u01c3\u0001\u01c3\u0003\u01c3\u1b1f\b\u01c3\u0001\u01c3\u0001\u01c3\u0003"+
		"\u01c3\u1b23\b\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001"+
		"\u01c3\u0001\u01c3\u0001\u01c3\u0003\u01c3\u1b2c\b\u01c3\u0001\u01c3\u0001"+
		"\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001"+
		"\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0003"+
		"\u01c3\u1b3b\b\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0003"+
		"\u01c3\u1b41\b\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001"+
		"\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001"+
		"\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001"+
		"\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001"+
		"\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001"+
		"\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001"+
		"\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001"+
		"\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001"+
		"\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001"+
		"\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001"+
		"\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001"+
		"\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001"+
		"\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001"+
		"\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001"+
		"\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001"+
		"\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0003\u01c3\u1ba0"+
		"\b\u01c3\u0001\u01c4\u0001\u01c4\u0001\u01c4\u0001\u01c4\u0003\u01c4\u1ba6"+
		"\b\u01c4\u0001\u01c5\u0005\u01c5\u1ba9\b\u01c5\n\u01c5\f\u01c5\u1bac\t"+
		"\u01c5\u0001\u01c6\u0001\u01c6\u0001\u01c6\u0001\u01c6\u0001\u01c6\u0001"+
		"\u01c6\u0001\u01c6\u0001\u01c6\u0001\u01c6\u0001\u01c6\u0001\u01c6\u0003"+
		"\u01c6\u1bb9\b\u01c6\u0001\u01c7\u0001\u01c7\u0001\u01c7\u0001\u01c7\u0001"+
		"\u01c7\u0001\u01c8\u0001\u01c8\u0001\u01c8\u0005\u01c8\u1bc3\b\u01c8\n"+
		"\u01c8\f\u01c8\u1bc6\t\u01c8\u0001\u01c9\u0001\u01c9\u0001\u01c9\u0001"+
		"\u01c9\u0001\u01c9\u0001\u01c9\u0001\u01c9\u0003\u01c9\u1bcf\b\u01c9\u0001"+
		"\u01ca\u0001\u01ca\u0001\u01cb\u0001\u01cb\u0001\u01cb\u0001\u01cc\u0001"+
		"\u01cc\u0001\u01cc\u0001\u01cd\u0004\u01cd\u1bda\b\u01cd\u000b\u01cd\f"+
		"\u01cd\u1bdb\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0003\u01ce\u1be1\b\u01ce"+
		"\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce"+
		"\u0003\u01ce\u1be9\b\u01ce\u0001\u01cf\u0001\u01cf\u0001\u01cf\u0001\u01cf"+
		"\u0001\u01cf\u0003\u01cf\u1bf0\b\u01cf\u0001\u01d0\u0001\u01d0\u0001\u01d0"+
		"\u0001\u01d0\u0001\u01d1\u0001\u01d1\u0001\u01d1\u0001\u01d1\u0001\u01d1"+
		"\u0001\u01d1\u0001\u01d1\u0001\u01d1\u0001\u01d2\u0001\u01d2\u0001\u01d2"+
		"\u0001\u01d2\u0001\u01d2\u0001\u01d2\u0001\u01d2\u0001\u01d2\u0001\u01d2"+
		"\u0003\u01d2\u1c07\b\u01d2\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3"+
		"\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d4\u0001\u01d4"+
		"\u0001\u01d4\u0003\u01d4\u1c14\b\u01d4\u0001\u01d5\u0001\u01d5\u0001\u01d5"+
		"\u0005\u01d5\u1c19\b\u01d5\n\u01d5\f\u01d5\u1c1c\t\u01d5\u0001\u01d6\u0001"+
		"\u01d6\u0001\u01d6\u0001\u01d6\u0003\u01d6\u1c22\b\u01d6\u0001\u01d6\u0003"+
		"\u01d6\u1c25\b\u01d6\u0001\u01d6\u0001\u01d6\u0001\u01d6\u0001\u01d6\u0003"+
		"\u01d6\u1c2b\b\u01d6\u0001\u01d6\u0003\u01d6\u1c2e\b\u01d6\u0001\u01d6"+
		"\u0001\u01d6\u0001\u01d6\u0001\u01d6\u0001\u01d6\u0001\u01d6\u0001\u01d6"+
		"\u0001\u01d6\u0001\u01d6\u0001\u01d6\u0001\u01d6\u0001\u01d6\u0003\u01d6"+
		"\u1c3c\b\u01d6\u0001\u01d7\u0001\u01d7\u0001\u01d7\u0001\u01d7\u0001\u01d7"+
		"\u0001\u01d7\u0003\u01d7\u1c44\b\u01d7\u0001\u01d8\u0001\u01d8\u0001\u01d8"+
		"\u0001\u01d8\u0001\u01d8\u0001\u01d8\u0001\u01d8\u0001\u01d8\u0001\u01d8"+
		"\u0001\u01d8\u0001\u01d8\u0001\u01d8\u0001\u01d8\u0001\u01d8\u0001\u01d8"+
		"\u0001\u01d8\u0003\u01d8\u1c56\b\u01d8\u0001\u01d9\u0001\u01d9\u0001\u01d9"+
		"\u0005\u01d9\u1c5b\b\u01d9\n\u01d9\f\u01d9\u1c5e\t\u01d9\u0001\u01da\u0001"+
		"\u01da\u0001\u01da\u0001\u01da\u0003\u01da\u1c64\b\u01da\u0001\u01db\u0001"+
		"\u01db\u0001\u01db\u0001\u01db\u0001\u01db\u0003\u01db\u1c6b\b\u01db\u0001"+
		"\u01dc\u0001\u01dc\u0001\u01dc\u0001\u01dd\u0001\u01dd\u0001\u01dd\u0001"+
		"\u01dd\u0001\u01dd\u0001\u01de\u0001\u01de\u0001\u01de\u0001\u01df\u0001"+
		"\u01df\u0001\u01df\u0001\u01df\u0001\u01df\u0001\u01df\u0001\u01df\u0001"+
		"\u01df\u0001\u01df\u0001\u01df\u0001\u01df\u0001\u01df\u0001\u01df\u0001"+
		"\u01df\u0001\u01df\u0001\u01df\u0001\u01df\u0001\u01df\u0001\u01df\u0001"+
		"\u01df\u0003\u01df\u1c8c\b\u01df\u0001\u01e0\u0001\u01e0\u0001\u01e0\u0005"+
		"\u01e0\u1c91\b\u01e0\n\u01e0\f\u01e0\u1c94\t\u01e0\u0001\u01e1\u0001\u01e1"+
		"\u0001\u01e2\u0001\u01e2\u0001\u01e2\u0001\u01e2\u0001\u01e2\u0001\u01e2"+
		"\u0001\u01e2\u0001\u01e2\u0001\u01e2\u0003\u01e2\u1ca1\b\u01e2\u0001\u01e3"+
		"\u0001\u01e3\u0001\u01e3\u0001\u01e3\u0001\u01e3\u0001\u01e4\u0001\u01e4"+
		"\u0001\u01e4\u0001\u01e4\u0001\u01e4\u0001\u01e4\u0001\u01e4\u0001\u01e4"+
		"\u0001\u01e4\u0001\u01e4\u0001\u01e4\u0003\u01e4\u1cb3\b\u01e4\u0001\u01e5"+
		"\u0001\u01e5\u0001\u01e5\u0001\u01e5\u0001\u01e5\u0001\u01e6\u0001\u01e6"+
		"\u0001\u01e6\u0001\u01e6\u0001\u01e6\u0001\u01e6\u0001\u01e6\u0001\u01e6"+
		"\u0001\u01e6\u0003\u01e6\u1cc3\b\u01e6\u0001\u01e7\u0001\u01e7\u0001\u01e7"+
		"\u0001\u01e7\u0003\u01e7\u1cc9\b\u01e7\u0001\u01e7\u0001\u01e7\u0001\u01e8"+
		"\u0001\u01e8\u0001\u01e8\u0001\u01e8\u0001\u01e8\u0001\u01e8\u0001\u01e8"+
		"\u0003\u01e8\u1cd4\b\u01e8\u0001\u01e8\u0001\u01e8\u0001\u01e8\u0001\u01e8"+
		"\u0001\u01e8\u0001\u01e8\u0001\u01e8\u0003\u01e8\u1cdd\b\u01e8\u0001\u01e8"+
		"\u0001\u01e8\u0001\u01e8\u0001\u01e8\u0001\u01e8\u0001\u01e8\u0001\u01e8"+
		"\u0001\u01e8\u0001\u01e8\u0001\u01e8\u0003\u01e8\u1ce9\b\u01e8\u0003\u01e8"+
		"\u1ceb\b\u01e8\u0001\u01e9\u0001\u01e9\u0001\u01e9\u0001\u01e9\u0001\u01ea"+
		"\u0001\u01ea\u0001\u01ea\u0005\u01ea\u1cf4\b\u01ea\n\u01ea\f\u01ea\u1cf7"+
		"\t\u01ea\u0001\u01eb\u0003\u01eb\u1cfa\b\u01eb\u0001\u01eb\u0001\u01eb"+
		"\u0001\u01ec\u0001\u01ec\u0001\u01ed\u0001\u01ed\u0001\u01ed\u0001\u01ed"+
		"\u0001\u01ed\u0001\u01ed\u0001\u01ed\u0001\u01ed\u0001\u01ed\u0001\u01ed"+
		"\u0001\u01ed\u0001\u01ed\u0001\u01ed\u0001\u01ed\u0001\u01ed\u0003\u01ed"+
		"\u1d0f\b\u01ed\u0001\u01ee\u0001\u01ee\u0001\u01ee\u0005\u01ee\u1d14\b"+
		"\u01ee\n\u01ee\f\u01ee\u1d17\t\u01ee\u0001\u01ef\u0001\u01ef\u0003\u01ef"+
		"\u1d1b\b\u01ef\u0001\u01ef\u0001\u01ef\u0003\u01ef\u1d1f\b\u01ef\u0001"+
		"\u01ef\u0001\u01ef\u0003\u01ef\u1d23\b\u01ef\u0001\u01ef\u0001\u01ef\u0003"+
		"\u01ef\u1d27\b\u01ef\u0003\u01ef\u1d29\b\u01ef\u0001\u01f0\u0004\u01f0"+
		"\u1d2c\b\u01f0\u000b\u01f0\f\u01f0\u1d2d\u0001\u01f1\u0001\u01f1\u0001"+
		"\u01f1\u0001\u01f1\u0001\u01f1\u0001\u01f1\u0003\u01f1\u1d36\b\u01f1\u0001"+
		"\u01f2\u0001\u01f2\u0001\u01f3\u0001\u01f3\u0001\u01f3\u0001\u01f3\u0001"+
		"\u01f4\u0001\u01f4\u0001\u01f4\u0001\u01f4\u0001\u01f4\u0001\u01f4\u0001"+
		"\u01f4\u0001\u01f4\u0001\u01f4\u0001\u01f4\u0003\u01f4\u1d48\b\u01f4\u0001"+
		"\u01f4\u0001\u01f4\u0001\u01f4\u0001\u01f4\u0003\u01f4\u1d4e\b\u01f4\u0001"+
		"\u01f4\u0001\u01f4\u0003\u01f4\u1d52\b\u01f4\u0001\u01f4\u0001\u01f4\u0001"+
		"\u01f4\u0001\u01f4\u0001\u01f4\u0001\u01f4\u0001\u01f4\u0001\u01f4\u0001"+
		"\u01f4\u0001\u01f4\u0001\u01f4\u0001\u01f4\u0001\u01f4\u0001\u01f4\u0001"+
		"\u01f4\u0001\u01f4\u0001\u01f4\u0001\u01f4\u0001\u01f4\u0001\u01f4\u0001"+
		"\u01f4\u0001\u01f4\u0001\u01f4\u0001\u01f4\u0001\u01f4\u0001\u01f4\u0001"+
		"\u01f4\u0001\u01f4\u0001\u01f4\u0001\u01f4\u0003\u01f4\u1d72\b\u01f4\u0001"+
		"\u01f5\u0001\u01f5\u0001\u01f5\u0001\u01f5\u0001\u01f5\u0001\u01f5\u0001"+
		"\u01f6\u0001\u01f6\u0001\u01f6\u0001\u01f6\u0001\u01f6\u0001\u01f6\u0001"+
		"\u01f6\u0001\u01f6\u0001\u01f6\u0003\u01f6\u1d83\b\u01f6\u0001\u01f7\u0001"+
		"\u01f7\u0001\u01f8\u0001\u01f8\u0001\u01f8\u0001\u01f8\u0001\u01f8\u0001"+
		"\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001"+
		"\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001"+
		"\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001"+
		"\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001"+
		"\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001"+
		"\u01f9\u0003\u01f9\u1dab\b\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001"+
		"\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001"+
		"\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001"+
		"\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001"+
		"\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001"+
		"\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001"+
		"\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001"+
		"\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001"+
		"\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001"+
		"\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001"+
		"\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001"+
		"\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001"+
		"\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001"+
		"\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001"+
		"\u01f9\u0001\u01f9\u0003\u01f9\u1e00\b\u01f9\u0001\u01fa\u0001\u01fa\u0001"+
		"\u01fa\u0001\u01fa\u0001\u01fa\u0001\u01fa\u0001\u01fa\u0001\u01fa\u0003"+
		"\u01fa\u1e0a\b\u01fa\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0001"+
		"\u01fb\u0001\u01fb\u0003\u01fb\u1e12\b\u01fb\u0001\u01fc\u0001\u01fc\u0001"+
		"\u01fc\u0001\u01fd\u0005\u01fd\u1e18\b\u01fd\n\u01fd\f\u01fd\u1e1b\t\u01fd"+
		"\u0001\u01fe\u0001\u01fe\u0001\u01fe\u0003\u01fe\u1e20\b\u01fe\u0001\u01ff"+
		"\u0001\u01ff\u0001\u01ff\u0001\u01ff\u0001\u01ff\u0001\u01ff\u0001\u01ff"+
		"\u0001\u0200\u0003\u0200\u1e2a\b\u0200\u0001\u0200\u0001\u0200\u0001\u0200"+
		"\u0001\u0200\u0001\u0200\u0001\u0200\u0001\u0200\u0001\u0200\u0003\u0200"+
		"\u1e34\b\u0200\u0001\u0201\u0004\u0201\u1e37\b\u0201\u000b\u0201\f\u0201"+
		"\u1e38\u0001\u0202\u0001\u0202\u0001\u0202\u0001\u0202\u0001\u0202\u0001"+
		"\u0202\u0001\u0202\u0001\u0202\u0003\u0202\u1e43\b\u0202\u0001\u0203\u0001"+
		"\u0203\u0001\u0204\u0001\u0204\u0001\u0204\u0001\u0204\u0001\u0205\u0001"+
		"\u0205\u0001\u0205\u0001\u0205\u0001\u0205\u0001\u0205\u0001\u0205\u0001"+
		"\u0205\u0001\u0205\u0001\u0205\u0003\u0205\u1e55\b\u0205\u0001\u0206\u0001"+
		"\u0206\u0003\u0206\u1e59\b\u0206\u0001\u0206\u0001\u0206\u0001\u0206\u0001"+
		"\u0206\u0001\u0206\u0001\u0206\u0001\u0206\u0001\u0206\u0001\u0206\u0001"+
		"\u0206\u0003\u0206\u1e65\b\u0206\u0003\u0206\u1e67\b\u0206\u0001\u0207"+
		"\u0001\u0207\u0001\u0207\u0001\u0207\u0001\u0207\u0001\u0207\u0001\u0207"+
		"\u0001\u0207\u0001\u0207\u0003\u0207\u1e72\b\u0207\u0001\u0208\u0001\u0208"+
		"\u0001\u0208\u0001\u0208\u0001\u0208\u0001\u0209\u0003\u0209\u1e7a\b\u0209"+
		"\u0001\u0209\u0001\u0209\u0001\u0209\u0001\u0209\u0001\u0209\u0001\u0209"+
		"\u0001\u0209\u0001\u0209\u0001\u0209\u0001\u0209\u0003\u0209\u1e86\b\u0209"+
		"\u0001\u0209\u0001\u0209\u0001\u0209\u0003\u0209\u1e8b\b\u0209\u0001\u0209"+
		"\u0001\u0209\u0001\u0209\u0001\u0209\u0001\u0209\u0003\u0209\u1e92\b\u0209"+
		"\u0001\u0209\u0001\u0209\u0001\u0209\u0001\u0209\u0001\u0209\u0001\u0209"+
		"\u0003\u0209\u1e9a\b\u0209\u0001\u0209\u0001\u0209\u0001\u0209\u0001\u0209"+
		"\u0001\u0209\u0001\u0209\u0001\u0209\u0001\u0209\u0001\u0209\u0001\u0209"+
		"\u0001\u0209\u0001\u0209\u0001\u0209\u0001\u0209\u0001\u0209\u0001\u0209"+
		"\u0001\u0209\u0003\u0209\u1ead\b\u0209\u0003\u0209\u1eaf\b\u0209\u0001"+
		"\u020a\u0001\u020a\u0001\u020a\u0003\u020a\u1eb4\b\u020a\u0001\u020b\u0001"+
		"\u020b\u0003\u020b\u1eb8\b\u020b\u0001\u020b\u0001\u020b\u0001\u020b\u0003"+
		"\u020b\u1ebd\b\u020b\u0001\u020b\u0001\u020b\u0001\u020b\u0001\u020b\u0001"+
		"\u020b\u0001\u020b\u0001\u020b\u0001\u020b\u0003\u020b\u1ec7\b\u020b\u0001"+
		"\u020c\u0001\u020c\u0003\u020c\u1ecb\b\u020c\u0001\u020c\u0003\u020c\u1ece"+
		"\b\u020c\u0001\u020c\u0001\u020c\u0003\u020c\u1ed2\b\u020c\u0001\u020c"+
		"\u0001\u020c\u0003\u020c\u1ed6\b\u020c\u0001\u020d\u0001\u020d\u0001\u020d"+
		"\u0001\u020d\u0001\u020d\u0001\u020d\u0001\u020d\u0001\u020e\u0001\u020e"+
		"\u0003\u020e\u1ee1\b\u020e\u0001\u020e\u0001\u020e\u0001\u020e\u0001\u020e"+
		"\u0001\u020e\u0003\u020e\u1ee8\b\u020e\u0001\u020e\u0001\u020e\u0001\u020e"+
		"\u0001\u020e\u0001\u020e\u0001\u020e\u0003\u020e\u1ef0\b\u020e\u0001\u020e"+
		"\u0001\u020e\u0001\u020e\u0003\u020e\u1ef5\b\u020e\u0001\u020f\u0001\u020f"+
		"\u0001\u020f\u0001\u020f\u0003\u020f\u1efb\b\u020f\u0001\u020f\u0001\u020f"+
		"\u0001\u020f\u0001\u020f\u0001\u020f\u0001\u020f\u0003\u020f\u1f03\b\u020f"+
		"\u0001\u0210\u0001\u0210\u0001\u0210\u0001\u0210\u0001\u0210\u0001\u0211"+
		"\u0001\u0211\u0003\u0211\u1f0c\b\u0211\u0001\u0211\u0001\u0211\u0001\u0211"+
		"\u0001\u0211\u0003\u0211\u1f12\b\u0211\u0001\u0211\u0001\u0211\u0001\u0211"+
		"\u0001\u0211\u0001\u0211\u0001\u0211\u0001\u0211\u0001\u0211\u0001\u0211"+
		"\u0001\u0211\u0003\u0211\u1f1e\b\u0211\u0001\u0212\u0004\u0212\u1f21\b"+
		"\u0212\u000b\u0212\f\u0212\u1f22\u0001\u0213\u0001\u0213\u0001\u0213\u0001"+
		"\u0213\u0001\u0213\u0001\u0214\u0001\u0214\u0003\u0214\u1f2c\b\u0214\u0001"+
		"\u0214\u0001\u0214\u0001\u0214\u0001\u0214\u0003\u0214\u1f32\b\u0214\u0001"+
		"\u0214\u0001\u0214\u0001\u0214\u0001\u0214\u0001\u0214\u0001\u0214\u0001"+
		"\u0214\u0001\u0214\u0001\u0214\u0001\u0214\u0003\u0214\u1f3e\b\u0214\u0001"+
		"\u0215\u0001\u0215\u0001\u0215\u0001\u0215\u0001\u0215\u0001\u0215\u0001"+
		"\u0215\u0001\u0215\u0001\u0215\u0001\u0215\u0001\u0215\u0001\u0215\u0001"+
		"\u0215\u0001\u0215\u0003\u0215\u1f4e\b\u0215\u0001\u0216\u0001\u0216\u0001"+
		"\u0216\u0001\u0216\u0001\u0216\u0001\u0217\u0001\u0217\u0001\u0217\u0001"+
		"\u0217\u0001\u0217\u0001\u0217\u0001\u0217\u0001\u0217\u0001\u0217\u0001"+
		"\u0218\u0001\u0218\u0001\u0218\u0003\u0218\u1f61\b\u0218\u0001\u0218\u0001"+
		"\u0218\u0001\u0218\u0001\u0219\u0001\u0219\u0001\u0219\u0001\u0219\u0001"+
		"\u0219\u0001\u0219\u0001\u0219\u0001\u0219\u0001\u0219\u0001\u0219\u0003"+
		"\u0219\u1f70\b\u0219\u0001\u021a\u0001\u021a\u0001\u021a\u0001\u021a\u0001"+
		"\u021a\u0001\u021a\u0001\u021a\u0001\u021a\u0001\u021a\u0001\u021a\u0001"+
		"\u021a\u0001\u021a\u0001\u021a\u0001\u021a\u0003\u021a\u1f80\b\u021a\u0001"+
		"\u021b\u0001\u021b\u0001\u021b\u0001\u021c\u0001\u021c\u0001\u021c\u0003"+
		"\u021c\u1f88\b\u021c\u0001\u021c\u0001\u021c\u0001\u021c\u0001\u021c\u0001"+
		"\u021c\u0001\u021c\u0001\u021c\u0001\u021c\u0001\u021c\u0001\u021c\u0001"+
		"\u021c\u0001\u021c\u0001\u021c\u0001\u021c\u0001\u021c\u0001\u021c\u0001"+
		"\u021c\u0001\u021c\u0001\u021c\u0001\u021c\u0003\u021c\u1f9e\b\u021c\u0001"+
		"\u021d\u0001\u021d\u0001\u021d\u0001\u021d\u0001\u021d\u0001\u021d\u0001"+
		"\u021d\u0001\u021d\u0001\u021d\u0001\u021d\u0001\u021d\u0001\u021d\u0001"+
		"\u021d\u0001\u021d\u0001\u021d\u0001\u021d\u0001\u021d\u0003\u021d\u1fb1"+
		"\b\u021d\u0001\u021d\u0001\u021d\u0001\u021d\u0001\u021d\u0001\u021d\u0003"+
		"\u021d\u1fb8\b\u021d\u0001\u021d\u0001\u021d\u0001\u021d\u0001\u021d\u0001"+
		"\u021d\u0003\u021d\u1fbf\b\u021d\u0001\u021d\u0001\u021d\u0001\u021d\u0001"+
		"\u021d\u0001\u021d\u0003\u021d\u1fc6\b\u021d\u0001\u021d\u0003\u021d\u1fc9"+
		"\b\u021d\u0001\u021e\u0001\u021e\u0001\u021e\u0005\u021e\u1fce\b\u021e"+
		"\n\u021e\f\u021e\u1fd1\t\u021e\u0001\u021f\u0001\u021f\u0001\u0220\u0001"+
		"\u0220\u0001\u0220\u0001\u0220\u0001\u0220\u0001\u0220\u0003\u0220\u1fdb"+
		"\b\u0220\u0001\u0221\u0001\u0221\u0001\u0221\u0001\u0221\u0001\u0221\u0001"+
		"\u0221\u0001\u0221\u0001\u0221\u0001\u0221\u0001\u0221\u0001\u0221\u0001"+
		"\u0221\u0003\u0221\u1fe9\b\u0221\u0001\u0222\u0001\u0222\u0001\u0222\u0001"+
		"\u0222\u0001\u0222\u0001\u0222\u0001\u0222\u0001\u0223\u0001\u0223\u0001"+
		"\u0223\u0001\u0223\u0001\u0223\u0001\u0223\u0001\u0223\u0001\u0223\u0001"+
		"\u0223\u0001\u0223\u0001\u0223\u0001\u0223\u0001\u0223\u0001\u0223\u0003"+
		"\u0223\u2000\b\u0223\u0001\u0223\u0001\u0223\u0001\u0223\u0001\u0223\u0001"+
		"\u0223\u0001\u0223\u0003\u0223\u2008\b\u0223\u0001\u0223\u0001\u0223\u0001"+
		"\u0223\u0001\u0223\u0001\u0223\u0001\u0223\u0001\u0223\u0001\u0223\u0003"+
		"\u0223\u2012\b\u0223\u0001\u0223\u0001\u0223\u0003\u0223\u2016\b\u0223"+
		"\u0001\u0224\u0001\u0224\u0001\u0224\u0005\u0224\u201b\b\u0224\n\u0224"+
		"\f\u0224\u201e\t\u0224\u0001\u0225\u0001\u0225\u0001\u0225\u0001\u0225"+
		"\u0001\u0225\u0001\u0225\u0001\u0225\u0001\u0225\u0001\u0225\u0001\u0225"+
		"\u0001\u0225\u0001\u0225\u0001\u0225\u0001\u0225\u0001\u0225\u0003\u0225"+
		"\u202f\b\u0225\u0001\u0226\u0001\u0226\u0001\u0226\u0001\u0226\u0001\u0226"+
		"\u0001\u0226\u0001\u0226\u0001\u0226\u0001\u0226\u0001\u0226\u0001\u0226"+
		"\u0003\u0226\u203c\b\u0226\u0001\u0227\u0001\u0227\u0001\u0227\u0001\u0227"+
		"\u0001\u0227\u0001\u0227\u0001\u0227\u0001\u0227\u0001\u0227\u0001\u0227"+
		"\u0001\u0227\u0003\u0227\u2049\b\u0227\u0001\u0228\u0001\u0228\u0001\u0228"+
		"\u0001\u0228\u0001\u0228\u0001\u0228\u0001\u0228\u0001\u0228\u0001\u0228"+
		"\u0003\u0228\u2054\b\u0228\u0001\u0228\u0001\u0228\u0001\u0228\u0001\u0228"+
		"\u0003\u0228\u205a\b\u0228\u0001\u0229\u0001\u0229\u0001\u0229\u0001\u0229"+
		"\u0001\u0229\u0001\u022a\u0001\u022a\u0001\u022a\u0001\u022a\u0003\u022a"+
		"\u2065\b\u022a\u0001\u022a\u0001\u022a\u0001\u022a\u0003\u022a\u206a\b"+
		"\u022a\u0001\u022a\u0001\u022a\u0001\u022a\u0001\u022a\u0001\u022a\u0001"+
		"\u022a\u0001\u022a\u0001\u022a\u0001\u022a\u0001\u022a\u0001\u022a\u0001"+
		"\u022a\u0001\u022a\u0001\u022a\u0003\u022a\u207a\b\u022a\u0001\u022a\u0001"+
		"\u022a\u0001\u022a\u0001\u022a\u0001\u022a\u0001\u022a\u0001\u022a\u0001"+
		"\u022a\u0001\u022a\u0001\u022a\u0001\u022a\u0003\u022a\u2087\b\u022a\u0001"+
		"\u022b\u0001\u022b\u0001\u022b\u0003\u022b\u208c\b\u022b\u0001\u022c\u0001"+
		"\u022c\u0001\u022c\u0001\u022c\u0003\u022c\u2092\b\u022c\u0001\u022c\u0001"+
		"\u022c\u0001\u022c\u0003\u022c\u2097\b\u022c\u0001\u022c\u0001\u022c\u0003"+
		"\u022c\u209b\b\u022c\u0001\u022c\u0001\u022c\u0001\u022c\u0001\u022c\u0003"+
		"\u022c\u20a1\b\u022c\u0001\u022c\u0001\u022c\u0001\u022c\u0003\u022c\u20a6"+
		"\b\u022c\u0001\u022c\u0003\u022c\u20a9\b\u022c\u0003\u022c\u20ab\b\u022c"+
		"\u0001\u022d\u0001\u022d\u0001\u022d\u0005\u022d\u20b0\b\u022d\n\u022d"+
		"\f\u022d\u20b3\t\u022d\u0001\u022e\u0001\u022e\u0001\u022e\u0001\u022e"+
		"\u0003\u022e\u20b9\b\u022e\u0001\u022f\u0001\u022f\u0001\u022f\u0001\u022f"+
		"\u0001\u022f\u0003\u022f\u20c0\b\u022f\u0001\u0230\u0001\u0230\u0001\u0230"+
		"\u0001\u0230\u0001\u0230\u0001\u0230\u0001\u0230\u0001\u0230\u0001\u0230"+
		"\u0001\u0231\u0001\u0231\u0003\u0231\u20cd\b\u0231\u0001\u0232\u0001\u0232"+
		"\u0001\u0232\u0003\u0232\u20d2\b\u0232\u0001\u0232\u0001\u0232\u0001\u0232"+
		"\u0001\u0233\u0001\u0233\u0001\u0233\u0001\u0233\u0001\u0233\u0001\u0233"+
		"\u0003\u0233\u20dd\b\u0233\u0001\u0233\u0001\u0233\u0001\u0233\u0001\u0233"+
		"\u0001\u0233\u0001\u0233\u0001\u0233\u0003\u0233\u20e6\b\u0233\u0001\u0234"+
		"\u0001\u0234\u0001\u0234\u0003\u0234\u20eb\b\u0234\u0001\u0235\u0001\u0235"+
		"\u0003\u0235\u20ef\b\u0235\u0001\u0235\u0003\u0235\u20f2\b\u0235\u0001"+
		"\u0235\u0003\u0235\u20f5\b\u0235\u0001\u0236\u0001\u0236\u0003\u0236\u20f9"+
		"\b\u0236\u0001\u0237\u0001\u0237\u0001\u0237\u0001\u0238\u0001\u0238\u0001"+
		"\u0238\u0001\u0238\u0005\u0238\u2102\b\u0238\n\u0238\f\u0238\u2105\t\u0238"+
		"\u0001\u0238\u0001\u0238\u0001\u0239\u0001\u0239\u0003\u0239\u210b\b\u0239"+
		"\u0001\u023a\u0001\u023a\u0001\u023a\u0001\u023a\u0001\u023b\u0001\u023b"+
		"\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b"+
		"\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b"+
		"\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b"+
		"\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b"+
		"\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b"+
		"\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b"+
		"\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b"+
		"\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b"+
		"\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b"+
		"\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b"+
		"\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b"+
		"\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b"+
		"\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b"+
		"\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b"+
		"\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b"+
		"\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b"+
		"\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b"+
		"\u0003\u023b\u2179\b\u023b\u0001\u023c\u0001\u023c\u0001\u023d\u0001\u023d"+
		"\u0001\u023d\u0001\u023d\u0001\u023d\u0003\u023d\u2182\b\u023d\u0001\u023e"+
		"\u0001\u023e\u0001\u023e\u0001\u023e\u0001\u023e\u0001\u023e\u0001\u023e"+
		"\u0001\u023e\u0001\u023e\u0003\u023e\u218d\b\u023e\u0001\u023e\u0001\u023e"+
		"\u0001\u023e\u0001\u023e\u0003\u023e\u2193\b\u023e\u0001\u023f\u0001\u023f"+
		"\u0001\u023f\u0001\u023f\u0001\u023f\u0001\u023f\u0001\u023f\u0001\u023f"+
		"\u0001\u023f\u0001\u023f\u0001\u023f\u0001\u023f\u0001\u023f\u0001\u023f"+
		"\u0001\u023f\u0001\u023f\u0001\u023f\u0001\u023f\u0001\u023f\u0001\u023f"+
		"\u0001\u023f\u0001\u023f\u0001\u023f\u0003\u023f\u21ac\b\u023f\u0001\u0240"+
		"\u0001\u0240\u0001\u0241\u0001\u0241\u0001\u0241\u0001\u0241\u0001\u0241"+
		"\u0001\u0241\u0001\u0241\u0001\u0241\u0001\u0241\u0001\u0242\u0001\u0242"+
		"\u0001\u0242\u0003\u0242\u21bc\b\u0242\u0001\u0242\u0001\u0242\u0001\u0242"+
		"\u0001\u0242\u0001\u0242\u0001\u0242\u0003\u0242\u21c4\b\u0242\u0001\u0243"+
		"\u0001\u0243\u0001\u0243\u0001\u0243\u0001\u0244\u0001\u0244\u0001\u0244"+
		"\u0005\u0244\u21cd\b\u0244\n\u0244\f\u0244\u21d0\t\u0244\u0001\u0245\u0001"+
		"\u0245\u0001\u0245\u0001\u0245\u0001\u0246\u0001\u0246\u0001\u0246\u0001"+
		"\u0246\u0001\u0246\u0001\u0246\u0001\u0246\u0001\u0246\u0001\u0246\u0001"+
		"\u0246\u0001\u0246\u0003\u0246\u21e1\b\u0246\u0001\u0246\u0001\u0246\u0001"+
		"\u0246\u0003\u0246\u21e6\b\u0246\u0001\u0246\u0001\u0246\u0001\u0246\u0003"+
		"\u0246\u21eb\b\u0246\u0003\u0246\u21ed\b\u0246\u0001\u0247\u0001\u0247"+
		"\u0001\u0247\u0001\u0247\u0003\u0247\u21f3\b\u0247\u0001\u0248\u0001\u0248"+
		"\u0001\u0248\u0003\u0248\u21f8\b\u0248\u0001\u0248\u0001\u0248\u0001\u0248"+
		"\u0001\u0248\u0001\u0248\u0001\u0248\u0001\u0248\u0003\u0248\u2201\b\u0248"+
		"\u0001\u0249\u0001\u0249\u0003\u0249\u2205\b\u0249\u0001\u0249\u0001\u0249"+
		"\u0001\u0249\u0001\u0249\u0001\u0249\u0001\u0249\u0001\u0249\u0001\u0249"+
		"\u0001\u0249\u0001\u024a\u0001\u024a\u0001\u024a\u0001\u024a\u0003\u024a"+
		"\u2214\b\u024a\u0001\u024a\u0001\u024a\u0001\u024a\u0001\u024b\u0001\u024b"+
		"\u0001\u024b\u0001\u024b\u0001\u024b\u0001\u024b\u0001\u024b\u0001\u024b"+
		"\u0003\u024b\u2221\b\u024b\u0001\u024b\u0001\u024b\u0001\u024b\u0001\u024b"+
		"\u0001\u024b\u0001\u024b\u0001\u024c\u0001\u024c\u0001\u024c\u0005\u024c"+
		"\u222c\b\u024c\n\u024c\f\u024c\u222f\t\u024c\u0001\u024d\u0001\u024d\u0001"+
		"\u024d\u0001\u024d\u0001\u024d\u0001\u024d\u0001\u024e\u0001\u024e\u0001"+
		"\u024e\u0005\u024e\u223a\b\u024e\n\u024e\f\u024e\u223d\t\u024e\u0001\u024f"+
		"\u0001\u024f\u0001\u024f\u0003\u024f\u2242\b\u024f\u0001\u024f\u0001\u024f"+
		"\u0003\u024f\u2246\b\u024f\u0001\u024f\u0001\u024f\u0001\u0250\u0005\u0250"+
		"\u224b\b\u0250\n\u0250\f\u0250\u224e\t\u0250\u0001\u0251\u0001\u0251\u0001"+
		"\u0251\u0001\u0251\u0001\u0251\u0001\u0251\u0001\u0251\u0003\u0251\u2257"+
		"\b\u0251\u0001\u0252\u0001\u0252\u0001\u0252\u0001\u0252\u0001\u0252\u0001"+
		"\u0252\u0003\u0252\u225f\b\u0252\u0001\u0252\u0003\u0252\u2262\b\u0252"+
		"\u0001\u0253\u0001\u0253\u0001\u0253\u0001\u0253\u0001\u0253\u0001\u0254"+
		"\u0003\u0254\u226a\b\u0254\u0001\u0254\u0001\u0254\u0001\u0254\u0003\u0254"+
		"\u226f\b\u0254\u0001\u0254\u0001\u0254\u0001\u0254\u0001\u0254\u0001\u0254"+
		"\u0001\u0254\u0003\u0254\u2277\b\u0254\u0001\u0254\u0001\u0254\u0001\u0254"+
		"\u0003\u0254\u227c\b\u0254\u0001\u0254\u0003\u0254\u227f\b\u0254\u0001"+
		"\u0254\u0001\u0254\u0001\u0254\u0001\u0254\u0001\u0254\u0001\u0254\u0001"+
		"\u0254\u0001\u0254\u0003\u0254\u2289\b\u0254\u0001\u0254\u0001\u0254\u0001"+
		"\u0254\u0001\u0254\u0003\u0254\u228f\b\u0254\u0003\u0254\u2291\b\u0254"+
		"\u0001\u0255\u0001\u0255\u0001\u0255\u0005\u0255\u2296\b\u0255\n\u0255"+
		"\f\u0255\u2299\t\u0255\u0001\u0256\u0001\u0256\u0001\u0256\u0003\u0256"+
		"\u229e\b\u0256\u0001\u0257\u0001\u0257\u0001\u0257\u0001\u0257\u0001\u0258"+
		"\u0001\u0258\u0001\u0258\u0001\u0258\u0005\u0258\u22a8\b\u0258\n\u0258"+
		"\f\u0258\u22ab\t\u0258\u0001\u0259\u0001\u0259\u0001\u025a\u0001\u025a"+
		"\u0001\u025a\u0003\u025a\u22b2\b\u025a\u0001\u025a\u0001\u025a\u0001\u025a"+
		"\u0001\u025a\u0001\u025a\u0001\u025a\u0001\u025a\u0001\u025a\u0001\u025a"+
		"\u0001\u025a\u0001\u025a\u0001\u025a\u0001\u025a\u0001\u025a\u0001\u025a"+
		"\u0003\u025a\u22c3\b\u025a\u0001\u025b\u0001\u025b\u0001\u025b\u0005\u025b"+
		"\u22c8\b\u025b\n\u025b\f\u025b\u22cb\t\u025b\u0001\u025c\u0001\u025c\u0001"+
		"\u025c\u0001\u025d\u0004\u025d\u22d1\b\u025d\u000b\u025d\f\u025d\u22d2"+
		"\u0001\u025e\u0001\u025e\u0001\u025e\u0001\u025e\u0001\u025e\u0001\u025e"+
		"\u0001\u025e\u0001\u025e\u0003\u025e\u22dd\b\u025e\u0001\u025f\u0001\u025f"+
		"\u0001\u025f\u0001\u025f\u0001\u025f\u0001\u025f\u0001\u025f\u0001\u025f"+
		"\u0001\u0260\u0001\u0260\u0001\u0260\u0001\u0260\u0001\u0260\u0003\u0260"+
		"\u22ec\b\u0260\u0003\u0260\u22ee\b\u0260\u0001\u0261\u0001\u0261\u0001"+
		"\u0262\u0001\u0262\u0003\u0262\u22f4\b\u0262\u0001\u0262\u0001\u0262\u0001"+
		"\u0263\u0001\u0263\u0001\u0263\u0005\u0263\u22fb\b\u0263\n\u0263\f\u0263"+
		"\u22fe\t\u0263\u0001\u0264\u0001\u0264\u0001\u0264\u0001\u0264\u0001\u0264"+
		"\u0001\u0264\u0001\u0264\u0001\u0264\u0001\u0264\u0003\u0264\u2309\b\u0264"+
		"\u0001\u0265\u0001\u0265\u0001\u0265\u0003\u0265\u230e\b\u0265\u0001\u0265"+
		"\u0003\u0265\u2311\b\u0265\u0001\u0265\u0003\u0265\u2314\b\u0265\u0001"+
		"\u0265\u0001\u0265\u0001\u0265\u0001\u0265\u0001\u0265\u0001\u0265\u0003"+
		"\u0265\u231c\b\u0265\u0001\u0265\u0003\u0265\u231f\b\u0265\u0001\u0265"+
		"\u0001\u0265\u0001\u0265\u0001\u0265\u0003\u0265\u2325\b\u0265\u0001\u0266"+
		"\u0001\u0266\u0001\u0266\u0001\u0266\u0001\u0266\u0001\u0266\u0001\u0266"+
		"\u0001\u0266\u0001\u0266\u0001\u0266\u0001\u0266\u0001\u0266\u0001\u0266"+
		"\u0001\u0266\u0001\u0266\u0001\u0266\u0001\u0266\u0003\u0266\u2338\b\u0266"+
		"\u0001\u0267\u0001\u0267\u0001\u0267\u0001\u0267\u0003\u0267\u233e\b\u0267"+
		"\u0001\u0268\u0001\u0268\u0001\u0268\u0001\u0268\u0001\u0268\u0001\u0268"+
		"\u0001\u0268\u0003\u0268\u2347\b\u0268\u0001\u0268\u0001\u0268\u0003\u0268"+
		"\u234b\b\u0268\u0001\u0268\u0001\u0268\u0003\u0268\u234f\b\u0268\u0001"+
		"\u0268\u0001\u0268\u0001\u0268\u0001\u0268\u0001\u0268\u0003\u0268\u2356"+
		"\b\u0268\u0001\u0268\u0001\u0268\u0001\u0268\u0001\u0268\u0001\u0268\u0001"+
		"\u0268\u0003\u0268\u235e\b\u0268\u0001\u0269\u0001\u0269\u0001\u0269\u0003"+
		"\u0269\u2363\b\u0269\u0001\u0269\u0001\u0269\u0001\u0269\u0001\u0269\u0001"+
		"\u0269\u0001\u026a\u0001\u026a\u0001\u026a\u0001\u026a\u0003\u026a\u236e"+
		"\b\u026a\u0001\u026a\u0001\u026a\u0003\u026a\u2372\b\u026a\u0001\u026b"+
		"\u0001\u026b\u0001\u026b\u0001\u026b\u0001\u026b\u0001\u026b\u0003\u026b"+
		"\u237a\b\u026b\u0001\u026c\u0001\u026c\u0001\u026c\u0003\u026c\u237f\b"+
		"\u026c\u0001\u026c\u0001\u026c\u0001\u026c\u0001\u026c\u0001\u026c\u0001"+
		"\u026c\u0001\u026c\u0001\u026c\u0001\u026c\u0003\u026c\u238a\b\u026c\u0001"+
		"\u026c\u0001\u026c\u0003\u026c\u238e\b\u026c\u0001\u026c\u0001\u026c\u0001"+
		"\u026d\u0001\u026d\u0001\u026d\u0001\u026d\u0001\u026d\u0001\u026d\u0003"+
		"\u026d\u2398\b\u026d\u0001\u026e\u0001\u026e\u0001\u026e\u0001\u026e\u0001"+
		"\u026e\u0003\u026e\u239f\b\u026e\u0001\u026f\u0003\u026f\u23a2\b\u026f"+
		"\u0001\u026f\u0001\u026f\u0003\u026f\u23a6\b\u026f\u0005\u026f\u23a8\b"+
		"\u026f\n\u026f\f\u026f\u23ab\t\u026f\u0001\u0270\u0001\u0270\u0001\u0270"+
		"\u0001\u0270\u0001\u0270\u0001\u0270\u0001\u0270\u0001\u0270\u0003\u0270"+
		"\u23b5\b\u0270\u0001\u0270\u0003\u0270\u23b8\b\u0270\u0001\u0270\u0003"+
		"\u0270\u23bb\b\u0270\u0001\u0270\u0001\u0270\u0001\u0270\u0001\u0270\u0001"+
		"\u0270\u0003\u0270\u23c2\b\u0270\u0001\u0270\u0001\u0270\u0001\u0270\u0001"+
		"\u0270\u0001\u0270\u0001\u0270\u0001\u0270\u0003\u0270\u23cb\b\u0270\u0001"+
		"\u0270\u0001\u0270\u0001\u0270\u0001\u0270\u0001\u0270\u0001\u0270\u0001"+
		"\u0270\u0001\u0270\u0001\u0270\u0001\u0270\u0001\u0270\u0001\u0270\u0003"+
		"\u0270\u23d9\b\u0270\u0001\u0271\u0001\u0271\u0001\u0271\u0005\u0271\u23de"+
		"\b\u0271\n\u0271\f\u0271\u23e1\t\u0271\u0001\u0272\u0001\u0272\u0001\u0272"+
		"\u0001\u0272\u0001\u0272\u0001\u0272\u0001\u0272\u0003\u0272\u23ea\b\u0272"+
		"\u0001\u0273\u0001\u0273\u0001\u0273\u0001\u0273\u0003\u0273\u23f0\b\u0273"+
		"\u0001\u0274\u0001\u0274\u0001\u0274\u0005\u0274\u23f5\b\u0274\n\u0274"+
		"\f\u0274\u23f8\t\u0274\u0001\u0275\u0001\u0275\u0001\u0275\u0003\u0275"+
		"\u23fd\b\u0275\u0001\u0276\u0001\u0276\u0001\u0276\u0001\u0276\u0001\u0276"+
		"\u0001\u0277\u0001\u0277\u0003\u0277\u2406\b\u0277\u0001\u0277\u0001\u0277"+
		"\u0001\u0278\u0001\u0278\u0001\u0278\u0001\u0279\u0004\u0279\u240e\b\u0279"+
		"\u000b\u0279\f\u0279\u240f\u0001\u027a\u0001\u027a\u0001\u027a\u0003\u027a"+
		"\u2415\b\u027a\u0001\u027a\u0001\u027a\u0001\u027b\u0001\u027b\u0001\u027c"+
		"\u0001\u027c\u0001\u027d\u0001\u027d\u0001\u027e\u0001\u027e\u0003\u027e"+
		"\u2421\b\u027e\u0001\u027e\u0001\u027e\u0003\u027e\u2425\b\u027e\u0001"+
		"\u027e\u0001\u027e\u0003\u027e\u2429\b\u027e\u0001\u027f\u0003\u027f\u242c"+
		"\b\u027f\u0001\u027f\u0001\u027f\u0003\u027f\u2430\b\u027f\u0001\u0280"+
		"\u0001\u0280\u0001\u0280\u0003\u0280\u2435\b\u0280\u0001\u0280\u0001\u0280"+
		"\u0001\u0280\u0003\u0280\u243a\b\u0280\u0001\u0280\u0003\u0280\u243d\b"+
		"\u0280\u0001\u0280\u0001\u0280\u0001\u0280\u0001\u0280\u0001\u0280\u0001"+
		"\u0280\u0001\u0281\u0001\u0281\u0001\u0281\u0003\u0281\u2448\b\u0281\u0001"+
		"\u0281\u0001\u0281\u0001\u0281\u0001\u0281\u0001\u0281\u0001\u0281\u0001"+
		"\u0281\u0001\u0282\u0001\u0282\u0001\u0282\u0001\u0282\u0001\u0282\u0001"+
		"\u0282\u0001\u0282\u0001\u0282\u0001\u0282\u0003\u0282\u245a\b\u0282\u0001"+
		"\u0283\u0001\u0283\u0001\u0283\u0001\u0283\u0001\u0283\u0003\u0283\u2461"+
		"\b\u0283\u0001\u0283\u0001\u0283\u0001\u0283\u0001\u0283\u0003\u0283\u2467"+
		"\b\u0283\u0001\u0284\u0001\u0284\u0001\u0284\u0001\u0284\u0001\u0284\u0001"+
		"\u0284\u0001\u0284\u0001\u0285\u0001\u0285\u0001\u0285\u0003\u0285\u2473"+
		"\b\u0285\u0001\u0285\u0001\u0285\u0001\u0285\u0001\u0285\u0001\u0285\u0001"+
		"\u0285\u0001\u0285\u0001\u0285\u0001\u0285\u0001\u0286\u0001\u0286\u0001"+
		"\u0286\u0001\u0286\u0001\u0286\u0001\u0287\u0003\u0287\u2484\b\u0287\u0001"+
		"\u0287\u0001\u0287\u0001\u0287\u0003\u0287\u2489\b\u0287\u0001\u0287\u0001"+
		"\u0287\u0001\u0287\u0001\u0287\u0001\u0287\u0003\u0287\u2490\b\u0287\u0001"+
		"\u0287\u0001\u0287\u0001\u0287\u0001\u0287\u0003\u0287\u2496\b\u0287\u0001"+
		"\u0288\u0001\u0288\u0001\u0288\u0005\u0288\u249b\b\u0288\n\u0288\f\u0288"+
		"\u249e\t\u0288\u0001\u0289\u0001\u0289\u0001\u0289\u0001\u0289\u0003\u0289"+
		"\u24a4\b\u0289\u0001\u0289\u0001\u0289\u0001\u0289\u0001\u0289\u0001\u0289"+
		"\u0001\u0289\u0001\u028a\u0001\u028a\u0001\u028a\u0001\u028b\u0001\u028b"+
		"\u0001\u028b\u0001\u028b\u0003\u028b\u24b3\b\u028b\u0001\u028b\u0001\u028b"+
		"\u0003\u028b\u24b7\b\u028b\u0001\u028c\u0001\u028c\u0001\u028c\u0003\u028c"+
		"\u24bc\b\u028c\u0001\u028c\u0001\u028c\u0003\u028c\u24c0\b\u028c\u0001"+
		"\u028d\u0001\u028d\u0001\u028d\u0005\u028d\u24c5\b\u028d\n\u028d\f\u028d"+
		"\u24c8\t\u028d\u0001\u028e\u0001\u028e\u0001\u028e\u0003\u028e\u24cd\b"+
		"\u028e\u0001\u028e\u0001\u028e\u0001\u028e\u0001\u028e\u0001\u028e\u0001"+
		"\u028e\u0003\u028e\u24d5\b\u028e\u0001\u028f\u0001\u028f\u0001\u028f\u0003"+
		"\u028f\u24da\b\u028f\u0001\u028f\u0001\u028f\u0003\u028f\u24de\b\u028f"+
		"\u0001\u0290\u0001\u0290\u0001\u0290\u0003\u0290\u24e3\b\u0290\u0001\u0290"+
		"\u0001\u0290\u0003\u0290\u24e7\b\u0290\u0001\u0291\u0001\u0291\u0001\u0291"+
		"\u0003\u0291\u24ec\b\u0291\u0001\u0291\u0001\u0291\u0003\u0291\u24f0\b"+
		"\u0291\u0001\u0292\u0001\u0292\u0001\u0292\u0001\u0292\u0003\u0292\u24f6"+
		"\b\u0292\u0001\u0292\u0001\u0292\u0003\u0292\u24fa\b\u0292\u0001\u0293"+
		"\u0001\u0293\u0001\u0293\u0003\u0293\u24ff\b\u0293\u0001\u0293\u0001\u0293"+
		"\u0003\u0293\u2503\b\u0293\u0001\u0294\u0001\u0294\u0001\u0294\u0001\u0294"+
		"\u0001\u0294\u0003\u0294\u250a\b\u0294\u0001\u0294\u0001\u0294\u0003\u0294"+
		"\u250e\b\u0294\u0001\u0295\u0001\u0295\u0001\u0295\u0001\u0295\u0003\u0295"+
		"\u2514\b\u0295\u0001\u0295\u0001\u0295\u0001\u0295\u0005\u0295\u2519\b"+
		"\u0295\n\u0295\f\u0295\u251c\t\u0295\u0001\u0295\u0003\u0295\u251f\b\u0295"+
		"\u0001\u0296\u0001\u0296\u0001\u0296\u0003\u0296\u2524\b\u0296\u0001\u0296"+
		"\u0001\u0296\u0003\u0296\u2528\b\u0296\u0001\u0297\u0001\u0297\u0001\u0297"+
		"\u0005\u0297\u252d\b\u0297\n\u0297\f\u0297\u2530\t\u0297\u0001\u0298\u0001"+
		"\u0298\u0003\u0298\u2534\b\u0298\u0001\u0298\u0001\u0298\u0003\u0298\u2538"+
		"\b\u0298\u0001\u0298\u0001\u0298\u0003\u0298\u253c\b\u0298\u0001\u0299"+
		"\u0001\u0299\u0001\u0299\u0001\u0299\u0003\u0299\u2542\b\u0299\u0001\u0299"+
		"\u0001\u0299\u0003\u0299\u2546\b\u0299\u0001\u029a\u0001\u029a\u0001\u029a"+
		"\u0003\u029a\u254b\b\u029a\u0001\u029a\u0001\u029a\u0003\u029a\u254f\b"+
		"\u029a\u0001\u029b\u0001\u029b\u0001\u029b\u0005\u029b\u2554\b\u029b\n"+
		"\u029b\f\u029b\u2557\t\u029b\u0001\u029c\u0001\u029c\u0001\u029c\u0001"+
		"\u029c\u0003\u029c\u255d\b\u029c\u0001\u029c\u0001\u029c\u0001\u029c\u0001"+
		"\u029c\u0003\u029c\u2563\b\u029c\u0001\u029d\u0001\u029d\u0001\u029d\u0001"+
		"\u029d\u0003\u029d\u2569\b\u029d\u0001\u029d\u0001\u029d\u0001\u029d\u0001"+
		"\u029d\u0003\u029d\u256f\b\u029d\u0001\u029e\u0001\u029e\u0001\u029e\u0001"+
		"\u029e\u0001\u029e\u0003\u029e\u2576\b\u029e\u0001\u029f\u0001\u029f\u0001"+
		"\u029f\u0003\u029f\u257b\b\u029f\u0001\u029f\u0001\u029f\u0001\u029f\u0001"+
		"\u029f\u0003\u029f\u2581\b\u029f\u0001\u02a0\u0001\u02a0\u0001\u02a0\u0003"+
		"\u02a0\u2586\b\u02a0\u0001\u02a0\u0001\u02a0\u0003\u02a0\u258a\b\u02a0"+
		"\u0001\u02a1\u0001\u02a1\u0001\u02a1\u0003\u02a1\u258f\b\u02a1\u0001\u02a1"+
		"\u0001\u02a1\u0003\u02a1\u2593\b\u02a1\u0001\u02a2\u0001\u02a2\u0001\u02a2"+
		"\u0003\u02a2\u2598\b\u02a2\u0001\u02a2\u0001\u02a2\u0003\u02a2\u259c\b"+
		"\u02a2\u0001\u02a3\u0001\u02a3\u0001\u02a3\u0003\u02a3\u25a1\b\u02a3\u0001"+
		"\u02a3\u0001\u02a3\u0001\u02a3\u0001\u02a3\u0003\u02a3\u25a7\b\u02a3\u0001"+
		"\u02a4\u0001\u02a4\u0001\u02a4\u0003\u02a4\u25ac\b\u02a4\u0001\u02a4\u0001"+
		"\u02a4\u0003\u02a4\u25b0\b\u02a4\u0001\u02a5\u0001\u02a5\u0001\u02a5\u0003"+
		"\u02a5\u25b5\b\u02a5\u0001\u02a5\u0001\u02a5\u0003\u02a5\u25b9\b\u02a5"+
		"\u0001\u02a6\u0001\u02a6\u0001\u02a6\u0003\u02a6\u25be\b\u02a6\u0001\u02a6"+
		"\u0001\u02a6\u0003\u02a6\u25c2\b\u02a6\u0001\u02a7\u0001\u02a7\u0001\u02a7"+
		"\u0003\u02a7\u25c7\b\u02a7\u0001\u02a7\u0001\u02a7\u0003\u02a7\u25cb\b"+
		"\u02a7\u0001\u02a8\u0001\u02a8\u0001\u02a8\u0003\u02a8\u25d0\b\u02a8\u0001"+
		"\u02a8\u0001\u02a8\u0001\u02a9\u0001\u02a9\u0001\u02a9\u0001\u02a9\u0001"+
		"\u02a9\u0003\u02a9\u25d9\b\u02a9\u0001\u02a9\u0001\u02a9\u0003\u02a9\u25dd"+
		"\b\u02a9\u0001\u02aa\u0001\u02aa\u0001\u02aa\u0003\u02aa\u25e2\b\u02aa"+
		"\u0001\u02aa\u0001\u02aa\u0001\u02aa\u0001\u02aa\u0001\u02aa\u0003\u02aa"+
		"\u25e9\b\u02aa\u0001\u02ab\u0001\u02ab\u0001\u02ab\u0003\u02ab\u25ee\b"+
		"\u02ab\u0001\u02ab\u0001\u02ab\u0001\u02ab\u0001\u02ab\u0003\u02ab\u25f4"+
		"\b\u02ab\u0001\u02ac\u0001\u02ac\u0001\u02ac\u0003\u02ac\u25f9\b\u02ac"+
		"\u0001\u02ac\u0001\u02ac\u0003\u02ac\u25fd\b\u02ac\u0001\u02ad\u0001\u02ad"+
		"\u0001\u02ad\u0001\u02ad\u0003\u02ad\u2603\b\u02ad\u0001\u02ad\u0001\u02ad"+
		"\u0001\u02ad\u0001\u02ad\u0001\u02ad\u0001\u02ae\u0001\u02ae\u0001\u02ae"+
		"\u0003\u02ae\u260d\b\u02ae\u0001\u02ae\u0001\u02ae\u0003\u02ae\u2611\b"+
		"\u02ae\u0001\u02af\u0001\u02af\u0001\u02af\u0001\u02af\u0001\u02af\u0003"+
		"\u02af\u2618\b\u02af\u0001\u02af\u0001\u02af\u0001\u02af\u0001\u02af\u0001"+
		"\u02af\u0001\u02af\u0003\u02af\u2620\b\u02af\u0001\u02b0\u0001\u02b0\u0001"+
		"\u02b0\u0001\u02b0\u0001\u02b0\u0001\u02b1\u0001\u02b1\u0001\u02b1\u0003"+
		"\u02b1\u262a\b\u02b1\u0001\u02b2\u0001\u02b2\u0001\u02b2\u0001\u02b2\u0001"+
		"\u02b2\u0001\u02b2\u0003\u02b2\u2632\b\u02b2\u0001\u02b2\u0001\u02b2\u0001"+
		"\u02b2\u0001\u02b3\u0003\u02b3\u2638\b\u02b3\u0001\u02b3\u0003\u02b3\u263b"+
		"\b\u02b3\u0001\u02b3\u0003\u02b3\u263e\b\u02b3\u0001\u02b3\u0003\u02b3"+
		"\u2641\b\u02b3\u0001\u02b4\u0001\u02b4\u0001\u02b4\u0001\u02b4\u0003\u02b4"+
		"\u2647\b\u02b4\u0001\u02b5\u0001\u02b5\u0001\u02b5\u0001\u02b5\u0005\u02b5"+
		"\u264d\b\u02b5\n\u02b5\f\u02b5\u2650\t\u02b5\u0001\u02b6\u0001\u02b6\u0003"+
		"\u02b6\u2654\b\u02b6\u0001\u02b7\u0001\u02b7\u0001\u02b7\u0001\u02b7\u0001"+
		"\u02b7\u0001\u02b8\u0001\u02b8\u0003\u02b8\u265d\b\u02b8\u0001\u02b9\u0001"+
		"\u02b9\u0003\u02b9\u2661\b\u02b9\u0001\u02b9\u0003\u02b9\u2664\b\u02b9"+
		"\u0001\u02b9\u0001\u02b9\u0001\u02ba\u0001\u02ba\u0003\u02ba\u266a\b\u02ba"+
		"\u0001\u02ba\u0003\u02ba\u266d\b\u02ba\u0001\u02ba\u0001\u02ba\u0001\u02bb"+
		"\u0001\u02bb\u0001\u02bb\u0001\u02bc\u0001\u02bc\u0001\u02bc\u0003\u02bc"+
		"\u2677\b\u02bc\u0001\u02bd\u0001\u02bd\u0001\u02bd\u0001\u02bd\u0003\u02bd"+
		"\u267d\b\u02bd\u0001\u02be\u0001\u02be\u0001\u02be\u0001\u02be\u0001\u02be"+
		"\u0001\u02be\u0001\u02be\u0001\u02be\u0001\u02be\u0001\u02be\u0001\u02be"+
		"\u0001\u02be\u0001\u02be\u0001\u02be\u0001\u02be\u0001\u02be\u0001\u02be"+
		"\u0001\u02be\u0001\u02be\u0001\u02be\u0003\u02be\u2693\b\u02be\u0001\u02bf"+
		"\u0001\u02bf\u0001\u02bf\u0003\u02bf\u2698\b\u02bf\u0001\u02bf\u0001\u02bf"+
		"\u0001\u02bf\u0001\u02c0\u0001\u02c0\u0001\u02c0\u0001\u02c1\u0001\u02c1"+
		"\u0003\u02c1\u26a2\b\u02c1\u0001\u02c1\u0001\u02c1\u0001\u02c1\u0001\u02c1"+
		"\u0003\u02c1\u26a8\b\u02c1\u0001\u02c1\u0001\u02c1\u0001\u02c1\u0001\u02c1"+
		"\u0001\u02c1\u0001\u02c1\u0001\u02c1\u0003\u02c1\u26b1\b\u02c1\u0001\u02c1"+
		"\u0001\u02c1\u0001\u02c1\u0001\u02c1\u0001\u02c1\u0001\u02c1\u0001\u02c1"+
		"\u0003\u02c1\u26ba\b\u02c1\u0001\u02c1\u0001\u02c1\u0003\u02c1\u26be\b"+
		"\u02c1\u0001\u02c2\u0001\u02c2\u0001\u02c2\u0005\u02c2\u26c3\b\u02c2\n"+
		"\u02c2\f\u02c2\u26c6\t\u02c2\u0001\u02c3\u0001\u02c3\u0001\u02c4\u0001"+
		"\u02c4\u0001\u02c5\u0001\u02c5\u0001\u02c6\u0001\u02c6\u0003\u02c6\u26d0"+
		"\b\u02c6\u0001\u02c6\u0001\u02c6\u0003\u02c6\u26d4\b\u02c6\u0001\u02c7"+
		"\u0001\u02c7\u0001\u02c7\u0001\u02c7\u0001\u02c8\u0001\u02c8\u0001\u02c8"+
		"\u0001\u02c8\u0003\u02c8\u26de\b\u02c8\u0001\u02c8\u0001\u02c8\u0003\u02c8"+
		"\u26e2\b\u02c8\u0001\u02c9\u0001\u02c9\u0001\u02c9\u0001\u02c9\u0003\u02c9"+
		"\u26e8\b\u02c9\u0001\u02c9\u0001\u02c9\u0001\u02c9\u0001\u02ca\u0001\u02ca"+
		"\u0001\u02ca\u0001\u02ca\u0001\u02ca\u0003\u02ca\u26f2\b\u02ca\u0001\u02ca"+
		"\u0001\u02ca\u0001\u02ca\u0001\u02ca\u0001\u02ca\u0001\u02ca\u0001\u02ca"+
		"\u0001\u02ca\u0003\u02ca\u26fc\b\u02ca\u0001\u02cb\u0001\u02cb\u0001\u02cb"+
		"\u0001\u02cb\u0001\u02cb\u0001\u02cc\u0001\u02cc\u0001\u02cc\u0001\u02cc"+
		"\u0001\u02cc\u0003\u02cc\u2708\b\u02cc\u0001\u02cc\u0001\u02cc\u0001\u02cc"+
		"\u0001\u02cc\u0001\u02cc\u0001\u02cc\u0001\u02cc\u0003\u02cc\u2711\b\u02cc"+
		"\u0001\u02cc\u0001\u02cc\u0001\u02cc\u0001\u02cd\u0001\u02cd\u0001\u02cd"+
		"\u0001\u02cd\u0001\u02cd\u0001\u02cd\u0001\u02cd\u0001\u02ce\u0001\u02ce"+
		"\u0001\u02ce\u0003\u02ce\u2720\b\u02ce\u0001\u02ce\u0001\u02ce\u0001\u02cf"+
		"\u0003\u02cf\u2725\b\u02cf\u0001\u02cf\u0001\u02cf\u0001\u02cf\u0001\u02cf"+
		"\u0001\u02cf\u0001\u02cf\u0001\u02cf\u0003\u02cf\u272e\b\u02cf\u0001\u02d0"+
		"\u0005\u02d0\u2731\b\u02d0\n\u02d0\f\u02d0\u2734\t\u02d0\u0001\u02d1\u0001"+
		"\u02d1\u0001\u02d1\u0001\u02d1\u0001\u02d1\u0001\u02d1\u0003\u02d1\u273c"+
		"\b\u02d1\u0001\u02d2\u0001\u02d2\u0001\u02d2\u0001\u02d2\u0003\u02d2\u2742"+
		"\b\u02d2\u0001\u02d2\u0001\u02d2\u0001\u02d2\u0001\u02d2\u0001\u02d2\u0001"+
		"\u02d3\u0001\u02d3\u0001\u02d4\u0001\u02d4\u0001\u02d4\u0001\u02d4\u0001"+
		"\u02d4\u0001\u02d4\u0001\u02d4\u0001\u02d4\u0001\u02d4\u0001\u02d4\u0001"+
		"\u02d4\u0001\u02d4\u0001\u02d4\u0001\u02d4\u0003\u02d4\u2759\b\u02d4\u0001"+
		"\u02d5\u0001\u02d5\u0001\u02d5\u0001\u02d5\u0001\u02d5\u0001\u02d5\u0001"+
		"\u02d5\u0001\u02d5\u0003\u02d5\u2763\b\u02d5\u0001\u02d6\u0001\u02d6\u0001"+
		"\u02d6\u0001\u02d6\u0001\u02d6\u0001\u02d6\u0003\u02d6\u276b\b\u02d6\u0001"+
		"\u02d6\u0001\u02d6\u0001\u02d6\u0003\u02d6\u2770\b\u02d6\u0001\u02d7\u0001"+
		"\u02d7\u0003\u02d7\u2774\b\u02d7\u0001\u02d7\u0001\u02d7\u0001\u02d7\u0003"+
		"\u02d7\u2779\b\u02d7\u0005\u02d7\u277b\b\u02d7\n\u02d7\f\u02d7\u277e\t"+
		"\u02d7\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001"+
		"\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001"+
		"\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001"+
		"\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001"+
		"\u02d8\u0003\u02d8\u2798\b\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001"+
		"\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001"+
		"\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001"+
		"\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001"+
		"\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001"+
		"\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0003"+
		"\u02d8\u27bb\b\u02d8\u0001\u02d9\u0001\u02d9\u0001\u02d9\u0005\u02d9\u27c0"+
		"\b\u02d9\n\u02d9\f\u02d9\u27c3\t\u02d9\u0001\u02da\u0001\u02da\u0001\u02da"+
		"\u0001\u02da\u0001\u02da\u0001\u02da\u0001\u02da\u0001\u02da\u0001\u02da"+
		"\u0001\u02da\u0001\u02da\u0003\u02da\u27d0\b\u02da\u0001\u02db\u0001\u02db"+
		"\u0001\u02dc\u0001\u02dc\u0001\u02dc\u0001\u02dc\u0001\u02dc\u0001\u02dc"+
		"\u0001\u02dc\u0001\u02dc\u0001\u02dc\u0001\u02dc\u0001\u02dc\u0001\u02dc"+
		"\u0001\u02dc\u0001\u02dc\u0001\u02dc\u0003\u02dc\u27e3\b\u02dc\u0003\u02dc"+
		"\u27e5\b\u02dc\u0001\u02dd\u0001\u02dd\u0001\u02dd\u0001\u02dd\u0001\u02dd"+
		"\u0001\u02dd\u0001\u02dd\u0001\u02dd\u0001\u02dd\u0003\u02dd\u27f0\b\u02dd"+
		"\u0001\u02de\u0001\u02de\u0001\u02de\u0003\u02de\u27f5\b\u02de\u0001\u02de"+
		"\u0001\u02de\u0003\u02de\u27f9\b\u02de\u0001\u02df\u0001\u02df\u0001\u02df"+
		"\u0001\u02df\u0001\u02df\u0001\u02df\u0001\u02df\u0001\u02df\u0001\u02df"+
		"\u0001\u02df\u0003\u02df\u2805\b\u02df\u0001\u02e0\u0001\u02e0\u0003\u02e0"+
		"\u2809\b\u02e0\u0001\u02e0\u0001\u02e0\u0001\u02e0\u0001\u02e0\u0001\u02e0"+
		"\u0001\u02e0\u0001\u02e0\u0001\u02e0\u0001\u02e0\u0001\u02e0\u0001\u02e0"+
		"\u0001\u02e0\u0001\u02e0\u0001\u02e0\u0001\u02e0\u0003\u02e0\u281a\b\u02e0"+
		"\u0001\u02e0\u0001\u02e0\u0001\u02e0\u0001\u02e0\u0001\u02e0\u0001\u02e0"+
		"\u0001\u02e0\u0001\u02e0\u0001\u02e0\u0001\u02e0\u0001\u02e0\u0003\u02e0"+
		"\u2827\b\u02e0\u0001\u02e1\u0001\u02e1\u0001\u02e2\u0001\u02e2\u0001\u02e2"+
		"\u0001\u02e2\u0001\u02e2\u0003\u02e2\u2830\b\u02e2\u0001\u02e3\u0001\u02e3"+
		"\u0001\u02e3\u0001\u02e3\u0003\u02e3\u2836\b\u02e3\u0001\u02e4\u0001\u02e4"+
		"\u0001\u02e4\u0003\u02e4\u283b\b\u02e4\u0001\u02e5\u0001\u02e5\u0001\u02e5"+
		"\u0003\u02e5\u2840\b\u02e5\u0001\u02e5\u0001\u02e5\u0001\u02e5\u0001\u02e5"+
		"\u0001\u02e5\u0003\u02e5\u2847\b\u02e5\u0001\u02e5\u0001\u02e5\u0001\u02e6"+
		"\u0001\u02e6\u0001\u02e6\u0001\u02e6\u0001\u02e6\u0001\u02e6\u0001\u02e6"+
		"\u0001\u02e6\u0003\u02e6\u2853\b\u02e6\u0001\u02e7\u0001\u02e7\u0001\u02e7"+
		"\u0005\u02e7\u2858\b\u02e7\n\u02e7\f\u02e7\u285b\t\u02e7\u0001\u02e8\u0001"+
		"\u02e8\u0003\u02e8\u285f\b\u02e8\u0001\u02e9\u0001\u02e9\u0003\u02e9\u2863"+
		"\b\u02e9\u0001\u02ea\u0001\u02ea\u0003\u02ea\u2867\b\u02ea\u0001";
	private static final String _serializedATNSegment1 =
		"\u02eb\u0001\u02eb\u0001\u02ec\u0001\u02ec\u0003\u02ec\u286d\b\u02ec\u0001"+
		"\u02ec\u0001\u02ec\u0001\u02ec\u0001\u02ec\u0003\u02ec\u2873\b\u02ec\u0001"+
		"\u02ec\u0003\u02ec\u2876\b\u02ec\u0001\u02ed\u0001\u02ed\u0001\u02ed\u0005"+
		"\u02ed\u287b\b\u02ed\n\u02ed\f\u02ed\u287e\t\u02ed\u0001\u02ee\u0001\u02ee"+
		"\u0001\u02ee\u0001\u02ef\u0001\u02ef\u0001\u02ef\u0005\u02ef\u2886\b\u02ef"+
		"\n\u02ef\f\u02ef\u2889\t\u02ef\u0001\u02f0\u0001\u02f0\u0003\u02f0\u288d"+
		"\b\u02f0\u0001\u02f1\u0001\u02f1\u0003\u02f1\u2891\b\u02f1\u0001\u02f2"+
		"\u0001\u02f2\u0003\u02f2\u2895\b\u02f2\u0001\u02f3\u0001\u02f3\u0001\u02f3"+
		"\u0001\u02f4\u0001\u02f4\u0003\u02f4\u289c\b\u02f4\u0001\u02f4\u0003\u02f4"+
		"\u289f\b\u02f4\u0001\u02f4\u0003\u02f4\u28a2\b\u02f4\u0001\u02f4\u0003"+
		"\u02f4\u28a5\b\u02f4\u0001\u02f4\u0001\u02f4\u0001\u02f4\u0001\u02f4\u0003"+
		"\u02f4\u28ab\b\u02f4\u0001\u02f4\u0003\u02f4\u28ae\b\u02f4\u0001\u02f5"+
		"\u0001\u02f5\u0001\u02f6\u0001\u02f6\u0001\u02f6\u0001\u02f6\u0003\u02f6"+
		"\u28b6\b\u02f6\u0001\u02f6\u0001\u02f6\u0001\u02f7\u0001\u02f7\u0001\u02f7"+
		"\u0005\u02f7\u28bd\b\u02f7\n\u02f7\f\u02f7\u28c0\t\u02f7\u0001\u02f8\u0001"+
		"\u02f8\u0003\u02f8\u28c4\b\u02f8\u0001\u02f9\u0001\u02f9\u0001\u02fa\u0001"+
		"\u02fa\u0001\u02fa\u0001\u02fa\u0001\u02fa\u0001\u02fa\u0000\u00160:@"+
		"Pfpt\u0086\u009a\u00b0\u00b2\u010c\u010e\u0112\u0114\u016a\u0184\u019e"+
		"\u01ae\u01e4\u022a\u04b0\u02fb\u0000\u0002\u0004\u0006\b\n\f\u000e\u0010"+
		"\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPR"+
		"TVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e"+
		"\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6"+
		"\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be"+
		"\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6"+
		"\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee"+
		"\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106"+
		"\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e"+
		"\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136"+
		"\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e"+
		"\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166"+
		"\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e"+
		"\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196"+
		"\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae"+
		"\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6"+
		"\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de"+
		"\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6"+
		"\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e"+
		"\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226"+
		"\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c\u023e"+
		"\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256"+
		"\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c\u026e"+
		"\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284\u0286"+
		"\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e"+
		"\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6"+
		"\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce"+
		"\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6"+
		"\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe"+
		"\u0300\u0302\u0304\u0306\u0308\u030a\u030c\u030e\u0310\u0312\u0314\u0316"+
		"\u0318\u031a\u031c\u031e\u0320\u0322\u0324\u0326\u0328\u032a\u032c\u032e"+
		"\u0330\u0332\u0334\u0336\u0338\u033a\u033c\u033e\u0340\u0342\u0344\u0346"+
		"\u0348\u034a\u034c\u034e\u0350\u0352\u0354\u0356\u0358\u035a\u035c\u035e"+
		"\u0360\u0362\u0364\u0366\u0368\u036a\u036c\u036e\u0370\u0372\u0374\u0376"+
		"\u0378\u037a\u037c\u037e\u0380\u0382\u0384\u0386\u0388\u038a\u038c\u038e"+
		"\u0390\u0392\u0394\u0396\u0398\u039a\u039c\u039e\u03a0\u03a2\u03a4\u03a6"+
		"\u03a8\u03aa\u03ac\u03ae\u03b0\u03b2\u03b4\u03b6\u03b8\u03ba\u03bc\u03be"+
		"\u03c0\u03c2\u03c4\u03c6\u03c8\u03ca\u03cc\u03ce\u03d0\u03d2\u03d4\u03d6"+
		"\u03d8\u03da\u03dc\u03de\u03e0\u03e2\u03e4\u03e6\u03e8\u03ea\u03ec\u03ee"+
		"\u03f0\u03f2\u03f4\u03f6\u03f8\u03fa\u03fc\u03fe\u0400\u0402\u0404\u0406"+
		"\u0408\u040a\u040c\u040e\u0410\u0412\u0414\u0416\u0418\u041a\u041c\u041e"+
		"\u0420\u0422\u0424\u0426\u0428\u042a\u042c\u042e\u0430\u0432\u0434\u0436"+
		"\u0438\u043a\u043c\u043e\u0440\u0442\u0444\u0446\u0448\u044a\u044c\u044e"+
		"\u0450\u0452\u0454\u0456\u0458\u045a\u045c\u045e\u0460\u0462\u0464\u0466"+
		"\u0468\u046a\u046c\u046e\u0470\u0472\u0474\u0476\u0478\u047a\u047c\u047e"+
		"\u0480\u0482\u0484\u0486\u0488\u048a\u048c\u048e\u0490\u0492\u0494\u0496"+
		"\u0498\u049a\u049c\u049e\u04a0\u04a2\u04a4\u04a6\u04a8\u04aa\u04ac\u04ae"+
		"\u04b0\u04b2\u04b4\u04b6\u04b8\u04ba\u04bc\u04be\u04c0\u04c2\u04c4\u04c6"+
		"\u04c8\u04ca\u04cc\u04ce\u04d0\u04d2\u04d4\u04d6\u04d8\u04da\u04dc\u04de"+
		"\u04e0\u04e2\u04e4\u04e6\u04e8\u04ea\u04ec\u04ee\u04f0\u04f2\u04f4\u04f6"+
		"\u04f8\u04fa\u04fc\u04fe\u0500\u0502\u0504\u0506\u0508\u050a\u050c\u050e"+
		"\u0510\u0512\u0514\u0516\u0518\u051a\u051c\u051e\u0520\u0522\u0524\u0526"+
		"\u0528\u052a\u052c\u052e\u0530\u0532\u0534\u0536\u0538\u053a\u053c\u053e"+
		"\u0540\u0542\u0544\u0546\u0548\u054a\u054c\u054e\u0550\u0552\u0554\u0556"+
		"\u0558\u055a\u055c\u055e\u0560\u0562\u0564\u0566\u0568\u056a\u056c\u056e"+
		"\u0570\u0572\u0574\u0576\u0578\u057a\u057c\u057e\u0580\u0582\u0584\u0586"+
		"\u0588\u058a\u058c\u058e\u0590\u0592\u0594\u0596\u0598\u059a\u059c\u059e"+
		"\u05a0\u05a2\u05a4\u05a6\u05a8\u05aa\u05ac\u05ae\u05b0\u05b2\u05b4\u05b6"+
		"\u05b8\u05ba\u05bc\u05be\u05c0\u05c2\u05c4\u05c6\u05c8\u05ca\u05cc\u05ce"+
		"\u05d0\u05d2\u05d4\u05d6\u05d8\u05da\u05dc\u05de\u05e0\u05e2\u05e4\u05e6"+
		"\u05e8\u05ea\u05ec\u05ee\u05f0\u05f2\u05f4\u0000K\u0002\u0000``\u0198"+
		"\u0198\u0002\u0000ss\u0082\u0082\u0002\u0000aa\u011a\u011a\u0002\u0000"+
		"\u01d2\u01d2\u023f\u023f\u0002\u0000PP^^\u0002\u0000}}\u0226\u0226\u0002"+
		"\u0000\u01dc\u01dc\u01df\u01e0\u0002\u0000\u01d9\u01d9\u01ea\u01ea(\u0000"+
		"TT\\\\aaffmmrr\u0088\u0088\u0096\u0096\u00a8\u00a8\u00e2\u00e3\u0105\u0105"+
		"\u0108\u0109\u0112\u0114\u0116\u0117\u01b4\u01b4\u01b8\u01b8\u01bd\u01bd"+
		"\u01c1\u01c2\u01c4\u01c7\u01cf\u01cf\u01d1\u01d6\u01d9\u01d9\u01e2\u01e5"+
		"\u01e7\u01ec\u01ee\u01f1\u01f3\u01f5\u01f7\u01f8\u01fa\u01fe\u0207\u0207"+
		"\u020c\u020d\u0217\u0217\u021e\u021e\u0220\u0220\u0233\u0234\u023a\u023c"+
		"\u023e\u023f\u0241\u0241\u0245\u0245\u0248\u0248\u024b\u024b7\u0000II"+
		"KKMOQSU[]`beggllnqsz|\u0087\u0089\u0095\u0097\u00a7\u00a9\u00b1\u00b3"+
		"\u00bb\u00c7\u00c9\u00cb\u00cf\u00d8\u00d9\u00e1\u00e1\u00f1\u00f4\u00f6"+
		"\u00fa\u00fd\u0100\u0106\u0107\u010a\u010b\u010d\u0110\u0118\u0198\u019c"+
		"\u019c\u01b5\u01b7\u01b9\u01bc\u01be\u01c1\u01c3\u01c4\u01c8\u01c8\u01cb"+
		"\u01ce\u01e6\u01e6\u01f9\u01f9\u01ff\u0202\u0204\u0204\u0208\u0208\u020a"+
		"\u020b\u020e\u0215\u0218\u021b\u021d\u021d\u021f\u021f\u0221\u0224\u0226"+
		"\u0229\u022d\u022d\u0231\u0232\u0236\u0237\u0239\u0239\u0240\u0240\u0242"+
		"\u0242\u0244\u0244\u0246\u0246\u0249\u0249\u000b\u0000JJii\u00e0\u00e0"+
		"\u00e4\u00e4\u0101\u0104\u0199\u019b\u01da\u01e1\u01ed\u01ed\u01f6\u01f6"+
		"\u0228\u0228\u0247\u0247\u0002\u0000\u0002\u0002\u01eb\u01eb\u0002\u0000"+
		"\u0003\u0003\u01ec\u01ec\u0002\u0000\u0016\u0016\u0018\u001c\u0001\u0000"+
		"\u0002H\u0004\u0000\n\u000b\r\u0010\u0016\u0016\u0018\u001c\u0001\u0000"+
		"\u01fa\u01fb\u0002\u0000\u01f4\u01f5\u0248\u0248\u0001\u0000\r\u000e\u0001"+
		"\u0000\u00f1\u00f4\u0002\u0000\u0106\u0106\u010e\u010e\u0002\u0000\u01d3"+
		"\u01d3\u01f4\u01f4\u0001\u0000\u0205\u0206\u001d\u0000LLPP{{\u00bc\u00bc"+
		"\u00c0\u00c0\u00c6\u00c6\u00d4\u00d4\u00e6\u00f0\u00f5\u00f5\u00fb\u00fc"+
		"\u010c\u010c\u0111\u0111\u0115\u0115\u019d\u019e\u01c9\u01ca\u01d0\u01d0"+
		"\u01d7\u01d8\u01f2\u01f2\u0203\u0203\u0205\u0206\u0208\u0208\u020a\u020b"+
		"\u022a\u022c\u022e\u0230\u0235\u0235\u0237\u0238\u023d\u023d\u0243\u0243"+
		"\u024a\u024a\u0001\u0000\u0090\u0091\u0002\u0000\u0217\u0217\u024f\u024f"+
		"\u0002\u0000\u0016\u0016\u01ea\u01ea\u0002\u0000\u01b4\u01b7\u01f4\u01f4"+
		"\u0001\u0000\u01b4\u01b7\u0004\u0000\u0138\u0138\u01e5\u01e5\u01f0\u01f1"+
		"\u0250\u0250\u0002\u0000SS\u00a2\u00a2\u0002\u0000II\u01bd\u01bd\u0001"+
		"\u0000\u00ae\u00af\u0002\u0000SS\u0223\u0223\u0002\u0000\u0080\u0080\u0223"+
		"\u0223\u0001\u0000\u01b6\u01b7\u0002\u0000\u01ef\u01ef\u0217\u0217\u0002"+
		"\u0000vv\u0083\u0083\u0007\u0000ggllqq\u0081\u0081\u0085\u0085\u00ab\u00ac"+
		"\u01f4\u01f4\u0001\u0000ij\u0001\u0000\u0219\u021a\u0002\u0000RR\u009f"+
		"\u009f\u0002\u0000\u00b6\u00b6\u01d1\u01d1\u0002\u0000\u008d\u008d\u00b1"+
		"\u00b1\u0002\u0000\u01ba\u01ba\u01c0\u01c0\u0004\u0000xxzz\u008e\u008e"+
		"\u009b\u009b\u0002\u0000\u01ba\u01ba\u01bf\u01bf\u0002\u0000\u00a2\u00a2"+
		"\u01db\u01db\u0006\u0000\u014c\u014c\u0169\u0169\u0174\u0174\u017a\u017a"+
		"\u0185\u0185\u0196\u0196\u0002\u0000]]aa\u0002\u0000\u0130\u0130\u0149"+
		"\u0149\u0002\u0000\u01ba\u01ba\u01bf\u01c0\u0002\u0000\u01ef\u01ef\u024f"+
		"\u024f\u0002\u0000\u01b9\u01b9\u01bf\u01bf\u0002\u0000\u011e\u011e\u0124"+
		"\u0124\u0003\u0000\u00ac\u00ac\u0117\u0117\u0258\u025c\u0004\u0000\u00a4"+
		"\u00a4\u017c\u017c\u01c4\u01c4\u01cc\u01cc\u0002\u0000\u01c1\u01c1\u01c3"+
		"\u01c3\u0002\u0000\u01cb\u01cb\u01cd\u01cd\b\u0000UUggllqq\u0081\u0081"+
		"\u0085\u0085\u00ab\u00ac\u01f4\u01f4\u0002\u0000\u0120\u0120\u0139\u0139"+
		"\u0002\u0000PP\u0182\u0182\u0002\u0000PP\u01c1\u01c1\u0002\u0000\u0156"+
		"\u0156\u0171\u0171\u0004\u0000\u0131\u0131\u0134\u0134\u015d\u015d\u0188"+
		"\u0188\u0004\u0000\u00ae\u00af\u0163\u0163\u0174\u0174\u01f4\u01f4\u0002"+
		"\u0000\u0136\u0136\u01b0\u01b0\u0002\u0000\u01d9\u01d9\u01f3\u01f3\u0003"+
		"\u0000ii\u00ad\u00ad\u019b\u019b\u0003\u0000pp\u011a\u011a\u01bc\u01bc"+
		"\u0002\u0000uu\u022d\u022d\u0002\u0000\u011f\u011f\u01cb\u01cb\u0002\u0000"+
		"\u00a3\u00a3\u01cd\u01cd\u0002\u0000\u00a7\u00a7\u0223\u0223\u0001\u0000"+
		"\u0116\u0117\u2e08\u0000\u0694\u0001\u0000\u0000\u0000\u0002\u06a7\u0001"+
		"\u0000\u0000\u0000\u0004\u06a9\u0001\u0000\u0000\u0000\u0006\u06b0\u0001"+
		"\u0000\u0000\u0000\b\u06bb\u0001\u0000\u0000\u0000\n\u06be\u0001\u0000"+
		"\u0000\u0000\f\u06c9\u0001\u0000\u0000\u0000\u000e\u06ce\u0001\u0000\u0000"+
		"\u0000\u0010\u06d9\u0001\u0000\u0000\u0000\u0012\u06e4\u0001\u0000\u0000"+
		"\u0000\u0014\u06ea\u0001\u0000\u0000\u0000\u0016\u06f4\u0001\u0000\u0000"+
		"\u0000\u0018\u06f8\u0001\u0000\u0000\u0000\u001a\u06fc\u0001\u0000\u0000"+
		"\u0000\u001c\u0701\u0001\u0000\u0000\u0000\u001e\u0705\u0001\u0000\u0000"+
		"\u0000 \u0707\u0001\u0000\u0000\u0000\"\u0725\u0001\u0000\u0000\u0000"+
		"$\u0727\u0001\u0000\u0000\u0000&\u072b\u0001\u0000\u0000\u0000(\u072e"+
		"\u0001\u0000\u0000\u0000*\u073f\u0001\u0000\u0000\u0000,\u0756\u0001\u0000"+
		"\u0000\u0000.\u0758\u0001\u0000\u0000\u00000\u075a\u0001\u0000\u0000\u0000"+
		"2\u0765\u0001\u0000\u0000\u00004\u0778\u0001\u0000\u0000\u00006\u0784"+
		"\u0001\u0000\u0000\u00008\u0787\u0001\u0000\u0000\u0000:\u0796\u0001\u0000"+
		"\u0000\u0000<\u07ab\u0001\u0000\u0000\u0000>\u07ad\u0001\u0000\u0000\u0000"+
		"@\u07af\u0001\u0000\u0000\u0000B\u07ba\u0001\u0000\u0000\u0000D\u07be"+
		"\u0001\u0000\u0000\u0000F\u07d4\u0001\u0000\u0000\u0000H\u07d6\u0001\u0000"+
		"\u0000\u0000J\u07db\u0001\u0000\u0000\u0000L\u07e5\u0001\u0000\u0000\u0000"+
		"N\u0814\u0001\u0000\u0000\u0000P\u0819\u0001\u0000\u0000\u0000R\u085d"+
		"\u0001\u0000\u0000\u0000T\u0864\u0001\u0000\u0000\u0000V\u0866\u0001\u0000"+
		"\u0000\u0000X\u0895\u0001\u0000\u0000\u0000Z\u0897\u0001\u0000\u0000\u0000"+
		"\\\u089f\u0001\u0000\u0000\u0000^\u08ab\u0001\u0000\u0000\u0000`\u08b2"+
		"\u0001\u0000\u0000\u0000b\u08b8\u0001\u0000\u0000\u0000d\u08be\u0001\u0000"+
		"\u0000\u0000f\u08c0\u0001\u0000\u0000\u0000h\u08ca\u0001\u0000\u0000\u0000"+
		"j\u08d4\u0001\u0000\u0000\u0000l\u08e1\u0001\u0000\u0000\u0000n\u08e3"+
		"\u0001\u0000\u0000\u0000p\u08e6\u0001\u0000\u0000\u0000r\u08f9\u0001\u0000"+
		"\u0000\u0000t\u08fb\u0001\u0000\u0000\u0000v\u0916\u0001\u0000\u0000\u0000"+
		"x\u0918\u0001\u0000\u0000\u0000z\u091f\u0001\u0000\u0000\u0000|\u0921"+
		"\u0001\u0000\u0000\u0000~\u0923\u0001\u0000\u0000\u0000\u0080\u0925\u0001"+
		"\u0000\u0000\u0000\u0082\u0927\u0001\u0000\u0000\u0000\u0084\u092c\u0001"+
		"\u0000\u0000\u0000\u0086\u092e\u0001\u0000\u0000\u0000\u0088\u094a\u0001"+
		"\u0000\u0000\u0000\u008a\u094c\u0001\u0000\u0000\u0000\u008c\u0950\u0001"+
		"\u0000\u0000\u0000\u008e\u095d\u0001\u0000\u0000\u0000\u0090\u095f\u0001"+
		"\u0000\u0000\u0000\u0092\u0962\u0001\u0000\u0000\u0000\u0094\u0967\u0001"+
		"\u0000\u0000\u0000\u0096\u096c\u0001\u0000\u0000\u0000\u0098\u0972\u0001"+
		"\u0000\u0000\u0000\u009a\u0975\u0001\u0000\u0000\u0000\u009c\u0980\u0001"+
		"\u0000\u0000\u0000\u009e\u0984\u0001\u0000\u0000\u0000\u00a0\u0993\u0001"+
		"\u0000\u0000\u0000\u00a2\u0995\u0001\u0000\u0000\u0000\u00a4\u09a5\u0001"+
		"\u0000\u0000\u0000\u00a6\u09ad\u0001\u0000\u0000\u0000\u00a8\u09bb\u0001"+
		"\u0000\u0000\u0000\u00aa\u09c8\u0001\u0000\u0000\u0000\u00ac\u09cc\u0001"+
		"\u0000\u0000\u0000\u00ae\u09ce\u0001\u0000\u0000\u0000\u00b0\u09d1\u0001"+
		"\u0000\u0000\u0000\u00b2\u0a09\u0001\u0000\u0000\u0000\u00b4\u0a20\u0001"+
		"\u0000\u0000\u0000\u00b6\u0a22\u0001\u0000\u0000\u0000\u00b8\u0a26\u0001"+
		"\u0000\u0000\u0000\u00ba\u0a2a\u0001\u0000\u0000\u0000\u00bc\u0a3b\u0001"+
		"\u0000\u0000\u0000\u00be\u0a3d\u0001\u0000\u0000\u0000\u00c0\u0a46\u0001"+
		"\u0000\u0000\u0000\u00c2\u0a53\u0001\u0000\u0000\u0000\u00c4\u0a55\u0001"+
		"\u0000\u0000\u0000\u00c6\u0a5d\u0001\u0000\u0000\u0000\u00c8\u0a5f\u0001"+
		"\u0000\u0000\u0000\u00ca\u0a62\u0001\u0000\u0000\u0000\u00cc\u0a66\u0001"+
		"\u0000\u0000\u0000\u00ce\u0a6d\u0001\u0000\u0000\u0000\u00d0\u0a72\u0001"+
		"\u0000\u0000\u0000\u00d2\u0a74\u0001\u0000\u0000\u0000\u00d4\u0a93\u0001"+
		"\u0000\u0000\u0000\u00d6\u0ab8\u0001\u0000\u0000\u0000\u00d8\u0aba\u0001"+
		"\u0000\u0000\u0000\u00da\u0b11\u0001\u0000\u0000\u0000\u00dc\u0b2f\u0001"+
		"\u0000\u0000\u0000\u00de\u0b31\u0001\u0000\u0000\u0000\u00e0\u0b34\u0001"+
		"\u0000\u0000\u0000\u00e2\u0b3a\u0001\u0000\u0000\u0000\u00e4\u0b45\u0001"+
		"\u0000\u0000\u0000\u00e6\u0b47\u0001\u0000\u0000\u0000\u00e8\u0b4a\u0001"+
		"\u0000\u0000\u0000\u00ea\u0b4c\u0001\u0000\u0000\u0000\u00ec\u0b51\u0001"+
		"\u0000\u0000\u0000\u00ee\u0b58\u0001\u0000\u0000\u0000\u00f0\u0b5f\u0001"+
		"\u0000\u0000\u0000\u00f2\u0b63\u0001\u0000\u0000\u0000\u00f4\u0b65\u0001"+
		"\u0000\u0000\u0000\u00f6\u0b68\u0001\u0000\u0000\u0000\u00f8\u0b75\u0001"+
		"\u0000\u0000\u0000\u00fa\u0b82\u0001\u0000\u0000\u0000\u00fc\u0b84\u0001"+
		"\u0000\u0000\u0000\u00fe\u0b86\u0001\u0000\u0000\u0000\u0100\u0b89\u0001"+
		"\u0000\u0000\u0000\u0102\u0b8d\u0001\u0000\u0000\u0000\u0104\u0b8f\u0001"+
		"\u0000\u0000\u0000\u0106\u0b91\u0001\u0000\u0000\u0000\u0108\u0baa\u0001"+
		"\u0000\u0000\u0000\u010a\u0bae\u0001\u0000\u0000\u0000\u010c\u0bc2\u0001"+
		"\u0000\u0000\u0000\u010e\u0c99\u0001\u0000\u0000\u0000\u0110\u0ce9\u0001"+
		"\u0000\u0000\u0000\u0112\u0ceb\u0001\u0000\u0000\u0000\u0114\u0cf5\u0001"+
		"\u0000\u0000\u0000\u0116\u0d0e\u0001\u0000\u0000\u0000\u0118\u0d10\u0001"+
		"\u0000\u0000\u0000\u011a\u0d17\u0001\u0000\u0000\u0000\u011c\u0d19\u0001"+
		"\u0000\u0000\u0000\u011e\u0d24\u0001\u0000\u0000\u0000\u0120\u0d28\u0001"+
		"\u0000\u0000\u0000\u0122\u0d2d\u0001\u0000\u0000\u0000\u0124\u0d30\u0001"+
		"\u0000\u0000\u0000\u0126\u0d36\u0001\u0000\u0000\u0000\u0128\u0d3f\u0001"+
		"\u0000\u0000\u0000\u012a\u0d4d\u0001\u0000\u0000\u0000\u012c\u0d51\u0001"+
		"\u0000\u0000\u0000\u012e\u0d54\u0001\u0000\u0000\u0000\u0130\u0d58\u0001"+
		"\u0000\u0000\u0000\u0132\u0d69\u0001\u0000\u0000\u0000\u0134\u0d7f\u0001"+
		"\u0000\u0000\u0000\u0136\u0d87\u0001\u0000\u0000\u0000\u0138\u0d89\u0001"+
		"\u0000\u0000\u0000\u013a\u0d90\u0001\u0000\u0000\u0000\u013c\u0d9c\u0001"+
		"\u0000\u0000\u0000\u013e\u0dac\u0001\u0000\u0000\u0000\u0140\u0db6\u0001"+
		"\u0000\u0000\u0000\u0142\u0db8\u0001\u0000\u0000\u0000\u0144\u0dbe\u0001"+
		"\u0000\u0000\u0000\u0146\u0dca\u0001\u0000\u0000\u0000\u0148\u0dcc\u0001"+
		"\u0000\u0000\u0000\u014a\u0dd4\u0001\u0000\u0000\u0000\u014c\u0ddc\u0001"+
		"\u0000\u0000\u0000\u014e\u0de7\u0001\u0000\u0000\u0000\u0150\u0de9\u0001"+
		"\u0000\u0000\u0000\u0152\u0e28\u0001\u0000\u0000\u0000\u0154\u0e2e\u0001"+
		"\u0000\u0000\u0000\u0156\u0e4c\u0001\u0000\u0000\u0000\u0158\u0e4f\u0001"+
		"\u0000\u0000\u0000\u015a\u0e57\u0001\u0000\u0000\u0000\u015c\u0e59\u0001"+
		"\u0000\u0000\u0000\u015e\u0e5b\u0001\u0000\u0000\u0000\u0160\u0e60\u0001"+
		"\u0000\u0000\u0000\u0162\u0e6e\u0001\u0000\u0000\u0000\u0164\u0e85\u0001"+
		"\u0000\u0000\u0000\u0166\u0e87\u0001\u0000\u0000\u0000\u0168\u0e9a\u0001"+
		"\u0000\u0000\u0000\u016a\u0e9c\u0001\u0000\u0000\u0000\u016c\u0eae\u0001"+
		"\u0000\u0000\u0000\u016e\u0eb0\u0001\u0000\u0000\u0000\u0170\u0ebe\u0001"+
		"\u0000\u0000\u0000\u0172\u0ecb\u0001\u0000\u0000\u0000\u0174\u0ecd\u0001"+
		"\u0000\u0000\u0000\u0176\u0ed3\u0001\u0000\u0000\u0000\u0178\u0edb\u0001"+
		"\u0000\u0000\u0000\u017a\u0edd\u0001\u0000\u0000\u0000\u017c\u0fb4\u0001"+
		"\u0000\u0000\u0000\u017e\u0fd1\u0001\u0000\u0000\u0000\u0180\u0fe0\u0001"+
		"\u0000\u0000\u0000\u0182\u0fe6\u0001\u0000\u0000\u0000\u0184\u0fe8\u0001"+
		"\u0000\u0000\u0000\u0186\u0ff3\u0001\u0000\u0000\u0000\u0188\u1000\u0001"+
		"\u0000\u0000\u0000\u018a\u100b\u0001\u0000\u0000\u0000\u018c\u100d\u0001"+
		"\u0000\u0000\u0000\u018e\u102c\u0001\u0000\u0000\u0000\u0190\u1045\u0001"+
		"\u0000\u0000\u0000\u0192\u104d\u0001\u0000\u0000\u0000\u0194\u1051\u0001"+
		"\u0000\u0000\u0000\u0196\u1053\u0001\u0000\u0000\u0000\u0198\u1058\u0001"+
		"\u0000\u0000\u0000\u019a\u1071\u0001\u0000\u0000\u0000\u019c\u1077\u0001"+
		"\u0000\u0000\u0000\u019e\u1079\u0001\u0000\u0000\u0000\u01a0\u1085\u0001"+
		"\u0000\u0000\u0000\u01a2\u108b\u0001\u0000\u0000\u0000\u01a4\u108f\u0001"+
		"\u0000\u0000\u0000\u01a6\u1091\u0001\u0000\u0000\u0000\u01a8\u1099\u0001"+
		"\u0000\u0000\u0000\u01aa\u109d\u0001\u0000\u0000\u0000\u01ac\u10bb\u0001"+
		"\u0000\u0000\u0000\u01ae\u10bd\u0001\u0000\u0000\u0000\u01b0\u10cf\u0001"+
		"\u0000\u0000\u0000\u01b2\u10d1\u0001\u0000\u0000\u0000\u01b4\u10da\u0001"+
		"\u0000\u0000\u0000\u01b6\u10e5\u0001\u0000\u0000\u0000\u01b8\u10e7\u0001"+
		"\u0000\u0000\u0000\u01ba\u10ea\u0001\u0000\u0000\u0000\u01bc\u10ed\u0001"+
		"\u0000\u0000\u0000\u01be\u10f5\u0001\u0000\u0000\u0000\u01c0\u1107\u0001"+
		"\u0000\u0000\u0000\u01c2\u1109\u0001\u0000\u0000\u0000\u01c4\u110e\u0001"+
		"\u0000\u0000\u0000\u01c6\u111b\u0001\u0000\u0000\u0000\u01c8\u112c\u0001"+
		"\u0000\u0000\u0000\u01ca\u1132\u0001\u0000\u0000\u0000\u01cc\u1134\u0001"+
		"\u0000\u0000\u0000\u01ce\u113b\u0001\u0000\u0000\u0000\u01d0\u1142\u0001"+
		"\u0000\u0000\u0000\u01d2\u114e\u0001\u0000\u0000\u0000\u01d4\u1150\u0001"+
		"\u0000\u0000\u0000\u01d6\u1153\u0001\u0000\u0000\u0000\u01d8\u115b\u0001"+
		"\u0000\u0000\u0000\u01da\u1160\u0001\u0000\u0000\u0000\u01dc\u1168\u0001"+
		"\u0000\u0000\u0000\u01de\u116d\u0001\u0000\u0000\u0000\u01e0\u1177\u0001"+
		"\u0000\u0000\u0000\u01e2\u1187\u0001\u0000\u0000\u0000\u01e4\u1189\u0001"+
		"\u0000\u0000\u0000\u01e6\u11a5\u0001\u0000\u0000\u0000\u01e8\u11a7\u0001"+
		"\u0000\u0000\u0000\u01ea\u11af\u0001\u0000\u0000\u0000\u01ec\u11b4\u0001"+
		"\u0000\u0000\u0000\u01ee\u11b6\u0001\u0000\u0000\u0000\u01f0\u11ba\u0001"+
		"\u0000\u0000\u0000\u01f2\u11cf\u0001\u0000\u0000\u0000\u01f4\u11d5\u0001"+
		"\u0000\u0000\u0000\u01f6\u11de\u0001\u0000\u0000\u0000\u01f8\u11e0\u0001"+
		"\u0000\u0000\u0000\u01fa\u11e6\u0001\u0000\u0000\u0000\u01fc\u11e8\u0001"+
		"\u0000\u0000\u0000\u01fe\u11ea\u0001\u0000\u0000\u0000\u0200\u1207\u0001"+
		"\u0000\u0000\u0000\u0202\u1214\u0001\u0000\u0000\u0000\u0204\u1216\u0001"+
		"\u0000\u0000\u0000\u0206\u121b\u0001\u0000\u0000\u0000\u0208\u121d\u0001"+
		"\u0000\u0000\u0000\u020a\u1221\u0001\u0000\u0000\u0000\u020c\u1238\u0001"+
		"\u0000\u0000\u0000\u020e\u1249\u0001\u0000\u0000\u0000\u0210\u1257\u0001"+
		"\u0000\u0000\u0000\u0212\u1274\u0001\u0000\u0000\u0000\u0214\u12af\u0001"+
		"\u0000\u0000\u0000\u0216\u12b1\u0001\u0000\u0000\u0000\u0218\u12b9\u0001"+
		"\u0000\u0000\u0000\u021a\u12c0\u0001\u0000\u0000\u0000\u021c\u12c5\u0001"+
		"\u0000\u0000\u0000\u021e\u12d2\u0001\u0000\u0000\u0000\u0220\u12d9\u0001"+
		"\u0000\u0000\u0000\u0222\u12df\u0001\u0000\u0000\u0000\u0224\u12e1\u0001"+
		"\u0000\u0000\u0000\u0226\u12e3\u0001\u0000\u0000\u0000\u0228\u12eb\u0001"+
		"\u0000\u0000\u0000\u022a\u12ed\u0001\u0000\u0000\u0000\u022c\u12f8\u0001"+
		"\u0000\u0000\u0000\u022e\u1302\u0001\u0000\u0000\u0000\u0230\u1311\u0001"+
		"\u0000\u0000\u0000\u0232\u1318\u0001\u0000\u0000\u0000\u0234\u1321\u0001"+
		"\u0000\u0000\u0000\u0236\u1323\u0001\u0000\u0000\u0000\u0238\u132d\u0001"+
		"\u0000\u0000\u0000\u023a\u1338\u0001\u0000\u0000\u0000\u023c\u1341\u0001"+
		"\u0000\u0000\u0000\u023e\u1376\u0001\u0000\u0000\u0000\u0240\u1378\u0001"+
		"\u0000\u0000\u0000\u0242\u137d\u0001\u0000\u0000\u0000\u0244\u13a6\u0001"+
		"\u0000\u0000\u0000\u0246\u13a8\u0001\u0000\u0000\u0000\u0248\u13ac\u0001"+
		"\u0000\u0000\u0000\u024a\u13ae\u0001\u0000\u0000\u0000\u024c\u13b9\u0001"+
		"\u0000\u0000\u0000\u024e\u13bb\u0001\u0000\u0000\u0000\u0250\u13be\u0001"+
		"\u0000\u0000\u0000\u0252\u13c3\u0001\u0000\u0000\u0000\u0254\u13c7\u0001"+
		"\u0000\u0000\u0000\u0256\u13d4\u0001\u0000\u0000\u0000\u0258\u13db\u0001"+
		"\u0000\u0000\u0000\u025a\u13e5\u0001\u0000\u0000\u0000\u025c\u13e7\u0001"+
		"\u0000\u0000\u0000\u025e\u13eb\u0001\u0000\u0000\u0000\u0260\u13f7\u0001"+
		"\u0000\u0000\u0000\u0262\u13ff\u0001\u0000\u0000\u0000\u0264\u1401\u0001"+
		"\u0000\u0000\u0000\u0266\u1406\u0001\u0000\u0000\u0000\u0268\u140e\u0001"+
		"\u0000\u0000\u0000\u026a\u1411\u0001\u0000\u0000\u0000\u026c\u1413\u0001"+
		"\u0000\u0000\u0000\u026e\u141b\u0001\u0000\u0000\u0000\u0270\u141d\u0001"+
		"\u0000\u0000\u0000\u0272\u1435\u0001\u0000\u0000\u0000\u0274\u143d\u0001"+
		"\u0000\u0000\u0000\u0276\u143f\u0001\u0000\u0000\u0000\u0278\u1449\u0001"+
		"\u0000\u0000\u0000\u027a\u144b\u0001\u0000\u0000\u0000\u027c\u144d\u0001"+
		"\u0000\u0000\u0000\u027e\u1458\u0001\u0000\u0000\u0000\u0280\u1462\u0001"+
		"\u0000\u0000\u0000\u0282\u1464\u0001\u0000\u0000\u0000\u0284\u1478\u0001"+
		"\u0000\u0000\u0000\u0286\u149a\u0001\u0000\u0000\u0000\u0288\u149c\u0001"+
		"\u0000\u0000\u0000\u028a\u149e\u0001\u0000\u0000\u0000\u028c\u14a4\u0001"+
		"\u0000\u0000\u0000\u028e\u14af\u0001\u0000\u0000\u0000\u0290\u14b3\u0001"+
		"\u0000\u0000\u0000\u0292\u14b5\u0001\u0000\u0000\u0000\u0294\u14e0\u0001"+
		"\u0000\u0000\u0000\u0296\u14e5\u0001\u0000\u0000\u0000\u0298\u14e7\u0001"+
		"\u0000\u0000\u0000\u029a\u14e9\u0001\u0000\u0000\u0000\u029c\u14eb\u0001"+
		"\u0000\u0000\u0000\u029e\u14f3\u0001\u0000\u0000\u0000\u02a0\u14f7\u0001"+
		"\u0000\u0000\u0000\u02a2\u14fa\u0001\u0000\u0000\u0000\u02a4\u14fd\u0001"+
		"\u0000\u0000\u0000\u02a6\u1501\u0001\u0000\u0000\u0000\u02a8\u1506\u0001"+
		"\u0000\u0000\u0000\u02aa\u1511\u0001\u0000\u0000\u0000\u02ac\u1515\u0001"+
		"\u0000\u0000\u0000\u02ae\u152e\u0001\u0000\u0000\u0000\u02b0\u1552\u0001"+
		"\u0000\u0000\u0000\u02b2\u1554\u0001\u0000\u0000\u0000\u02b4\u155b\u0001"+
		"\u0000\u0000\u0000\u02b6\u1579\u0001\u0000\u0000\u0000\u02b8\u157e\u0001"+
		"\u0000\u0000\u0000\u02ba\u1581\u0001\u0000\u0000\u0000\u02bc\u158d\u0001"+
		"\u0000\u0000\u0000\u02be\u1594\u0001\u0000\u0000\u0000\u02c0\u1598\u0001"+
		"\u0000\u0000\u0000\u02c2\u15a4\u0001\u0000\u0000\u0000\u02c4\u15ab\u0001"+
		"\u0000\u0000\u0000\u02c6\u15b2\u0001\u0000\u0000\u0000\u02c8\u15ee\u0001"+
		"\u0000\u0000\u0000\u02ca\u160c\u0001\u0000\u0000\u0000\u02cc\u160e\u0001"+
		"\u0000\u0000\u0000\u02ce\u1616\u0001\u0000\u0000\u0000\u02d0\u1619\u0001"+
		"\u0000\u0000\u0000\u02d2\u1623\u0001\u0000\u0000\u0000\u02d4\u1625\u0001"+
		"\u0000\u0000\u0000\u02d6\u1631\u0001\u0000\u0000\u0000\u02d8\u1633\u0001"+
		"\u0000\u0000\u0000\u02da\u1636\u0001\u0000\u0000\u0000\u02dc\u1643\u0001"+
		"\u0000\u0000\u0000\u02de\u1645\u0001\u0000\u0000\u0000\u02e0\u164b\u0001"+
		"\u0000\u0000\u0000\u02e2\u164d\u0001\u0000\u0000\u0000\u02e4\u166d\u0001"+
		"\u0000\u0000\u0000\u02e6\u1672\u0001\u0000\u0000\u0000\u02e8\u167a\u0001"+
		"\u0000\u0000\u0000\u02ea\u167d\u0001\u0000\u0000\u0000\u02ec\u1689\u0001"+
		"\u0000\u0000\u0000\u02ee\u16b2\u0001\u0000\u0000\u0000\u02f0\u16b9\u0001"+
		"\u0000\u0000\u0000\u02f2\u16c6\u0001\u0000\u0000\u0000\u02f4\u16d7\u0001"+
		"\u0000\u0000\u0000\u02f6\u16d9\u0001\u0000\u0000\u0000\u02f8\u16f3\u0001"+
		"\u0000\u0000\u0000\u02fa\u1700\u0001\u0000\u0000\u0000\u02fc\u1709\u0001"+
		"\u0000\u0000\u0000\u02fe\u170b\u0001\u0000\u0000\u0000\u0300\u1715\u0001"+
		"\u0000\u0000\u0000\u0302\u1717\u0001\u0000\u0000\u0000\u0304\u1727\u0001"+
		"\u0000\u0000\u0000\u0306\u172e\u0001\u0000\u0000\u0000\u0308\u1730\u0001"+
		"\u0000\u0000\u0000\u030a\u1747\u0001\u0000\u0000\u0000\u030c\u1749\u0001"+
		"\u0000\u0000\u0000\u030e\u1755\u0001\u0000\u0000\u0000\u0310\u175a\u0001"+
		"\u0000\u0000\u0000\u0312\u1794\u0001\u0000\u0000\u0000\u0314\u1796\u0001"+
		"\u0000\u0000\u0000\u0316\u179e\u0001\u0000\u0000\u0000\u0318\u17a1\u0001"+
		"\u0000\u0000\u0000\u031a\u17be\u0001\u0000\u0000\u0000\u031c\u17ca\u0001"+
		"\u0000\u0000\u0000\u031e\u17d2\u0001\u0000\u0000\u0000\u0320\u17d8\u0001"+
		"\u0000\u0000\u0000\u0322\u17de\u0001\u0000\u0000\u0000\u0324\u17e2\u0001"+
		"\u0000\u0000\u0000\u0326\u1814\u0001\u0000\u0000\u0000\u0328\u1816\u0001"+
		"\u0000\u0000\u0000\u032a\u181b\u0001\u0000\u0000\u0000\u032c\u182e\u0001"+
		"\u0000\u0000\u0000\u032e\u1832\u0001\u0000\u0000\u0000\u0330\u1834\u0001"+
		"\u0000\u0000\u0000\u0332\u183b\u0001\u0000\u0000\u0000\u0334\u185d\u0001"+
		"\u0000\u0000\u0000\u0336\u1861\u0001\u0000\u0000\u0000\u0338\u1865\u0001"+
		"\u0000\u0000\u0000\u033a\u1868\u0001\u0000\u0000\u0000\u033c\u186b\u0001"+
		"\u0000\u0000\u0000\u033e\u186e\u0001\u0000\u0000\u0000\u0340\u1871\u0001"+
		"\u0000\u0000\u0000\u0342\u187b\u0001\u0000\u0000\u0000\u0344\u1888\u0001"+
		"\u0000\u0000\u0000\u0346\u188f\u0001\u0000\u0000\u0000\u0348\u1891\u0001"+
		"\u0000\u0000\u0000\u034a\u1895\u0001\u0000\u0000\u0000\u034c\u1899\u0001"+
		"\u0000\u0000\u0000\u034e\u18a1\u0001\u0000\u0000\u0000\u0350\u18a9\u0001"+
		"\u0000\u0000\u0000\u0352\u18b1\u0001\u0000\u0000\u0000\u0354\u18b5\u0001"+
		"\u0000\u0000\u0000\u0356\u197a\u0001\u0000\u0000\u0000\u0358\u197c\u0001"+
		"\u0000\u0000\u0000\u035a\u1985\u0001\u0000\u0000\u0000\u035c\u19e0\u0001"+
		"\u0000\u0000\u0000\u035e\u19e2\u0001\u0000\u0000\u0000\u0360\u19f9\u0001"+
		"\u0000\u0000\u0000\u0362\u19fb\u0001\u0000\u0000\u0000\u0364\u1a03\u0001"+
		"\u0000\u0000\u0000\u0366\u1a07\u0001\u0000\u0000\u0000\u0368\u1a12\u0001"+
		"\u0000\u0000\u0000\u036a\u1a1d\u0001\u0000\u0000\u0000\u036c\u1a22\u0001"+
		"\u0000\u0000\u0000\u036e\u1a26\u0001\u0000\u0000\u0000\u0370\u1a2f\u0001"+
		"\u0000\u0000\u0000\u0372\u1a33\u0001\u0000\u0000\u0000\u0374\u1a35\u0001"+
		"\u0000\u0000\u0000\u0376\u1a3d\u0001\u0000\u0000\u0000\u0378\u1a43\u0001"+
		"\u0000\u0000\u0000\u037a\u1a47\u0001\u0000\u0000\u0000\u037c\u1a4f\u0001"+
		"\u0000\u0000\u0000\u037e\u1a64\u0001\u0000\u0000\u0000\u0380\u1a67\u0001"+
		"\u0000\u0000\u0000\u0382\u1a7d\u0001\u0000\u0000\u0000\u0384\u1a7f\u0001"+
		"\u0000\u0000\u0000\u0386\u1b9f\u0001\u0000\u0000\u0000\u0388\u1ba5\u0001"+
		"\u0000\u0000\u0000\u038a\u1baa\u0001\u0000\u0000\u0000\u038c\u1bb8\u0001"+
		"\u0000\u0000\u0000\u038e\u1bba\u0001\u0000\u0000\u0000\u0390\u1bbf\u0001"+
		"\u0000\u0000\u0000\u0392\u1bce\u0001\u0000\u0000\u0000\u0394\u1bd0\u0001"+
		"\u0000\u0000\u0000\u0396\u1bd2\u0001\u0000\u0000\u0000\u0398\u1bd5\u0001"+
		"\u0000\u0000\u0000\u039a\u1bd9\u0001\u0000\u0000\u0000\u039c\u1be8\u0001"+
		"\u0000\u0000\u0000\u039e\u1bef\u0001\u0000\u0000\u0000\u03a0\u1bf1\u0001"+
		"\u0000\u0000\u0000\u03a2\u1bf5\u0001\u0000\u0000\u0000\u03a4\u1c06\u0001"+
		"\u0000\u0000\u0000\u03a6\u1c08\u0001\u0000\u0000\u0000\u03a8\u1c13\u0001"+
		"\u0000\u0000\u0000\u03aa\u1c15\u0001\u0000\u0000\u0000\u03ac\u1c3b\u0001"+
		"\u0000\u0000\u0000\u03ae\u1c43\u0001\u0000\u0000\u0000\u03b0\u1c55\u0001"+
		"\u0000\u0000\u0000\u03b2\u1c57\u0001\u0000\u0000\u0000\u03b4\u1c5f\u0001"+
		"\u0000\u0000\u0000\u03b6\u1c6a\u0001\u0000\u0000\u0000\u03b8\u1c6c\u0001"+
		"\u0000\u0000\u0000\u03ba\u1c6f\u0001\u0000\u0000\u0000\u03bc\u1c74\u0001"+
		"\u0000\u0000\u0000\u03be\u1c8b\u0001\u0000\u0000\u0000\u03c0\u1c8d\u0001"+
		"\u0000\u0000\u0000\u03c2\u1c95\u0001\u0000\u0000\u0000\u03c4\u1ca0\u0001"+
		"\u0000\u0000\u0000\u03c6\u1ca2\u0001\u0000\u0000\u0000\u03c8\u1cb2\u0001"+
		"\u0000\u0000\u0000\u03ca\u1cb4\u0001\u0000\u0000\u0000\u03cc\u1cc2\u0001"+
		"\u0000\u0000\u0000\u03ce\u1cc4\u0001\u0000\u0000\u0000\u03d0\u1cea\u0001"+
		"\u0000\u0000\u0000\u03d2\u1cec\u0001\u0000\u0000\u0000\u03d4\u1cf0\u0001"+
		"\u0000\u0000\u0000\u03d6\u1cf9\u0001\u0000\u0000\u0000\u03d8\u1cfd\u0001"+
		"\u0000\u0000\u0000\u03da\u1d0e\u0001\u0000\u0000\u0000\u03dc\u1d10\u0001"+
		"\u0000\u0000\u0000\u03de\u1d28\u0001\u0000\u0000\u0000\u03e0\u1d2b\u0001"+
		"\u0000\u0000\u0000\u03e2\u1d35\u0001\u0000\u0000\u0000\u03e4\u1d37\u0001"+
		"\u0000\u0000\u0000\u03e6\u1d39\u0001\u0000\u0000\u0000\u03e8\u1d71\u0001"+
		"\u0000\u0000\u0000\u03ea\u1d73\u0001\u0000\u0000\u0000\u03ec\u1d82\u0001"+
		"\u0000\u0000\u0000\u03ee\u1d84\u0001\u0000\u0000\u0000\u03f0\u1d86\u0001"+
		"\u0000\u0000\u0000\u03f2\u1dff\u0001\u0000\u0000\u0000\u03f4\u1e09\u0001"+
		"\u0000\u0000\u0000\u03f6\u1e11\u0001\u0000\u0000\u0000\u03f8\u1e13\u0001"+
		"\u0000\u0000\u0000\u03fa\u1e19\u0001\u0000\u0000\u0000\u03fc\u1e1c\u0001"+
		"\u0000\u0000\u0000\u03fe\u1e21\u0001\u0000\u0000\u0000\u0400\u1e33\u0001"+
		"\u0000\u0000\u0000\u0402\u1e36\u0001\u0000\u0000\u0000\u0404\u1e42\u0001"+
		"\u0000\u0000\u0000\u0406\u1e44\u0001\u0000\u0000\u0000\u0408\u1e46\u0001"+
		"\u0000\u0000\u0000\u040a\u1e54\u0001\u0000\u0000\u0000\u040c\u1e56\u0001"+
		"\u0000\u0000\u0000\u040e\u1e68\u0001\u0000\u0000\u0000\u0410\u1e73\u0001"+
		"\u0000\u0000\u0000\u0412\u1eae\u0001\u0000\u0000\u0000\u0414\u1eb0\u0001"+
		"\u0000\u0000\u0000\u0416\u1eb5\u0001\u0000\u0000\u0000\u0418\u1ec8\u0001"+
		"\u0000\u0000\u0000\u041a\u1ed7\u0001\u0000\u0000\u0000\u041c\u1ef4\u0001"+
		"\u0000\u0000\u0000\u041e\u1ef6\u0001\u0000\u0000\u0000\u0420\u1f04\u0001"+
		"\u0000\u0000\u0000\u0422\u1f1d\u0001\u0000\u0000\u0000\u0424\u1f20\u0001"+
		"\u0000\u0000\u0000\u0426\u1f24\u0001\u0000\u0000\u0000\u0428\u1f3d\u0001"+
		"\u0000\u0000\u0000\u042a\u1f3f\u0001\u0000\u0000\u0000\u042c\u1f4f\u0001"+
		"\u0000\u0000\u0000\u042e\u1f54\u0001\u0000\u0000\u0000\u0430\u1f5d\u0001"+
		"\u0000\u0000\u0000\u0432\u1f6f\u0001\u0000\u0000\u0000\u0434\u1f71\u0001"+
		"\u0000\u0000\u0000\u0436\u1f81\u0001\u0000\u0000\u0000\u0438\u1f84\u0001"+
		"\u0000\u0000\u0000\u043a\u1f9f\u0001\u0000\u0000\u0000\u043c\u1fca\u0001"+
		"\u0000\u0000\u0000\u043e\u1fd2\u0001\u0000\u0000\u0000\u0440\u1fd4\u0001"+
		"\u0000\u0000\u0000\u0442\u1fdc\u0001\u0000\u0000\u0000\u0444\u1fea\u0001"+
		"\u0000\u0000\u0000\u0446\u2015\u0001\u0000\u0000\u0000\u0448\u2017\u0001"+
		"\u0000\u0000\u0000\u044a\u201f\u0001\u0000\u0000\u0000\u044c\u2030\u0001"+
		"\u0000\u0000\u0000\u044e\u203d\u0001\u0000\u0000\u0000\u0450\u204a\u0001"+
		"\u0000\u0000\u0000\u0452\u205b\u0001\u0000\u0000\u0000\u0454\u2086\u0001"+
		"\u0000\u0000\u0000\u0456\u2088\u0001\u0000\u0000\u0000\u0458\u20aa\u0001"+
		"\u0000\u0000\u0000\u045a\u20ac\u0001\u0000\u0000\u0000\u045c\u20b4\u0001"+
		"\u0000\u0000\u0000\u045e\u20bf\u0001\u0000\u0000\u0000\u0460\u20c1\u0001"+
		"\u0000\u0000\u0000\u0462\u20cc\u0001\u0000\u0000\u0000\u0464\u20ce\u0001"+
		"\u0000\u0000\u0000\u0466\u20e5\u0001\u0000\u0000\u0000\u0468\u20e7\u0001"+
		"\u0000\u0000\u0000\u046a\u20ec\u0001\u0000\u0000\u0000\u046c\u20f8\u0001"+
		"\u0000\u0000\u0000\u046e\u20fa\u0001\u0000\u0000\u0000\u0470\u20fd\u0001"+
		"\u0000\u0000\u0000\u0472\u2108\u0001\u0000\u0000\u0000\u0474\u210c\u0001"+
		"\u0000\u0000\u0000\u0476\u2178\u0001\u0000\u0000\u0000\u0478\u217a\u0001"+
		"\u0000\u0000\u0000\u047a\u2181\u0001\u0000\u0000\u0000\u047c\u2192\u0001"+
		"\u0000\u0000\u0000\u047e\u21ab\u0001\u0000\u0000\u0000\u0480\u21ad\u0001"+
		"\u0000\u0000\u0000\u0482\u21af\u0001\u0000\u0000\u0000\u0484\u21b8\u0001"+
		"\u0000\u0000\u0000\u0486\u21c5\u0001\u0000\u0000\u0000\u0488\u21c9\u0001"+
		"\u0000\u0000\u0000\u048a\u21d1\u0001\u0000\u0000\u0000\u048c\u21d5\u0001"+
		"\u0000\u0000\u0000\u048e\u21f2\u0001\u0000\u0000\u0000\u0490\u21f4\u0001"+
		"\u0000\u0000\u0000\u0492\u2202\u0001\u0000\u0000\u0000\u0494\u220f\u0001"+
		"\u0000\u0000\u0000\u0496\u2218\u0001\u0000\u0000\u0000\u0498\u2228\u0001"+
		"\u0000\u0000\u0000\u049a\u2230\u0001\u0000\u0000\u0000\u049c\u2236\u0001"+
		"\u0000\u0000\u0000\u049e\u223e\u0001\u0000\u0000\u0000\u04a0\u224c\u0001"+
		"\u0000\u0000\u0000\u04a2\u2256\u0001\u0000\u0000\u0000\u04a4\u2258\u0001"+
		"\u0000\u0000\u0000\u04a6\u2263\u0001\u0000\u0000\u0000\u04a8\u2290\u0001"+
		"\u0000\u0000\u0000\u04aa\u2292\u0001\u0000\u0000\u0000\u04ac\u229d\u0001"+
		"\u0000\u0000\u0000\u04ae\u229f\u0001\u0000\u0000\u0000\u04b0\u22a3\u0001"+
		"\u0000\u0000\u0000\u04b2\u22ac\u0001\u0000\u0000\u0000\u04b4\u22ae\u0001"+
		"\u0000\u0000\u0000\u04b6\u22c4\u0001\u0000\u0000\u0000\u04b8\u22cc\u0001"+
		"\u0000\u0000\u0000\u04ba\u22d0\u0001\u0000\u0000\u0000\u04bc\u22dc\u0001"+
		"\u0000\u0000\u0000\u04be\u22de\u0001\u0000\u0000\u0000\u04c0\u22ed\u0001"+
		"\u0000\u0000\u0000\u04c2\u22ef\u0001\u0000\u0000\u0000\u04c4\u22f1\u0001"+
		"\u0000\u0000\u0000\u04c6\u22f7\u0001\u0000\u0000\u0000\u04c8\u2308\u0001"+
		"\u0000\u0000\u0000\u04ca\u230a\u0001\u0000\u0000\u0000\u04cc\u2337\u0001"+
		"\u0000\u0000\u0000\u04ce\u233d\u0001\u0000\u0000\u0000\u04d0\u233f\u0001"+
		"\u0000\u0000\u0000\u04d2\u235f\u0001\u0000\u0000\u0000\u04d4\u2369\u0001"+
		"\u0000\u0000\u0000\u04d6\u2379\u0001\u0000\u0000\u0000\u04d8\u237b\u0001"+
		"\u0000\u0000\u0000\u04da\u2397\u0001\u0000\u0000\u0000\u04dc\u239e\u0001"+
		"\u0000\u0000\u0000\u04de\u23a1\u0001\u0000\u0000\u0000\u04e0\u23d8\u0001"+
		"\u0000\u0000\u0000\u04e2\u23da\u0001\u0000\u0000\u0000\u04e4\u23e9\u0001"+
		"\u0000\u0000\u0000\u04e6\u23ef\u0001\u0000\u0000\u0000\u04e8\u23f1\u0001"+
		"\u0000\u0000\u0000\u04ea\u23fc\u0001\u0000\u0000\u0000\u04ec\u23fe\u0001"+
		"\u0000\u0000\u0000\u04ee\u2403\u0001\u0000\u0000\u0000\u04f0\u2409\u0001"+
		"\u0000\u0000\u0000\u04f2\u240d\u0001\u0000\u0000\u0000\u04f4\u2411\u0001"+
		"\u0000\u0000\u0000\u04f6\u2418\u0001\u0000\u0000\u0000\u04f8\u241a\u0001"+
		"\u0000\u0000\u0000\u04fa\u241c\u0001\u0000\u0000\u0000\u04fc\u241e\u0001"+
		"\u0000\u0000\u0000\u04fe\u242f\u0001\u0000\u0000\u0000\u0500\u2431\u0001"+
		"\u0000\u0000\u0000\u0502\u2444\u0001\u0000\u0000\u0000\u0504\u2450\u0001"+
		"\u0000\u0000\u0000\u0506\u245b\u0001\u0000\u0000\u0000\u0508\u2468\u0001"+
		"\u0000\u0000\u0000\u050a\u246f\u0001\u0000\u0000\u0000\u050c\u247d\u0001"+
		"\u0000\u0000\u0000\u050e\u2495\u0001\u0000\u0000\u0000\u0510\u2497\u0001"+
		"\u0000\u0000\u0000\u0512\u249f\u0001\u0000\u0000\u0000\u0514\u24ab\u0001"+
		"\u0000\u0000\u0000\u0516\u24ae\u0001\u0000\u0000\u0000\u0518\u24b8\u0001"+
		"\u0000\u0000\u0000\u051a\u24c1\u0001\u0000\u0000\u0000\u051c\u24c9\u0001"+
		"\u0000\u0000\u0000\u051e\u24d6\u0001\u0000\u0000\u0000\u0520\u24df\u0001"+
		"\u0000\u0000\u0000\u0522\u24e8\u0001\u0000\u0000\u0000\u0524\u24f1\u0001"+
		"\u0000\u0000\u0000\u0526\u24fb\u0001\u0000\u0000\u0000\u0528\u2504\u0001"+
		"\u0000\u0000\u0000\u052a\u250f\u0001\u0000\u0000\u0000\u052c\u2520\u0001"+
		"\u0000\u0000\u0000\u052e\u2529\u0001\u0000\u0000\u0000\u0530\u2531\u0001"+
		"\u0000\u0000\u0000\u0532\u253d\u0001\u0000\u0000\u0000\u0534\u2547\u0001"+
		"\u0000\u0000\u0000\u0536\u2550\u0001\u0000\u0000\u0000\u0538\u2558\u0001"+
		"\u0000\u0000\u0000\u053a\u2564\u0001\u0000\u0000\u0000\u053c\u2570\u0001"+
		"\u0000\u0000\u0000\u053e\u2577\u0001\u0000\u0000\u0000\u0540\u2582\u0001"+
		"\u0000\u0000\u0000\u0542\u258b\u0001\u0000\u0000\u0000\u0544\u2594\u0001"+
		"\u0000\u0000\u0000\u0546\u259d\u0001\u0000\u0000\u0000\u0548\u25a8\u0001"+
		"\u0000\u0000\u0000\u054a\u25b1\u0001\u0000\u0000\u0000\u054c\u25ba\u0001"+
		"\u0000\u0000\u0000\u054e\u25c3\u0001\u0000\u0000\u0000\u0550\u25cc\u0001"+
		"\u0000\u0000\u0000\u0552\u25d3\u0001\u0000\u0000\u0000\u0554\u25de\u0001"+
		"\u0000\u0000\u0000\u0556\u25ea\u0001\u0000\u0000\u0000\u0558\u25f5\u0001"+
		"\u0000\u0000\u0000\u055a\u25fe\u0001\u0000\u0000\u0000\u055c\u2609\u0001"+
		"\u0000\u0000\u0000\u055e\u2612\u0001\u0000\u0000\u0000\u0560\u2621\u0001"+
		"\u0000\u0000\u0000\u0562\u2629\u0001\u0000\u0000\u0000\u0564\u262b\u0001"+
		"\u0000\u0000\u0000\u0566\u2637\u0001\u0000\u0000\u0000\u0568\u2642\u0001"+
		"\u0000\u0000\u0000\u056a\u2648\u0001\u0000\u0000\u0000\u056c\u2653\u0001"+
		"\u0000\u0000\u0000\u056e\u2655\u0001\u0000\u0000\u0000\u0570\u265c\u0001"+
		"\u0000\u0000\u0000\u0572\u265e\u0001\u0000\u0000\u0000\u0574\u2667\u0001"+
		"\u0000\u0000\u0000\u0576\u2670\u0001\u0000\u0000\u0000\u0578\u2673\u0001"+
		"\u0000\u0000\u0000\u057a\u2678\u0001\u0000\u0000\u0000\u057c\u2692\u0001"+
		"\u0000\u0000\u0000\u057e\u2694\u0001\u0000\u0000\u0000\u0580\u269c\u0001"+
		"\u0000\u0000\u0000\u0582\u26bd\u0001\u0000\u0000\u0000\u0584\u26bf\u0001"+
		"\u0000\u0000\u0000\u0586\u26c7\u0001\u0000\u0000\u0000\u0588\u26c9\u0001"+
		"\u0000\u0000\u0000\u058a\u26cb\u0001\u0000\u0000\u0000\u058c\u26cd\u0001"+
		"\u0000\u0000\u0000\u058e\u26d5\u0001\u0000\u0000\u0000\u0590\u26d9\u0001"+
		"\u0000\u0000\u0000\u0592\u26e3\u0001\u0000\u0000\u0000\u0594\u26fb\u0001"+
		"\u0000\u0000\u0000\u0596\u26fd\u0001\u0000\u0000\u0000\u0598\u2702\u0001"+
		"\u0000\u0000\u0000\u059a\u2715\u0001\u0000\u0000\u0000\u059c\u271c\u0001"+
		"\u0000\u0000\u0000\u059e\u272d\u0001\u0000\u0000\u0000\u05a0\u2732\u0001"+
		"\u0000\u0000\u0000\u05a2\u273b\u0001\u0000\u0000\u0000\u05a4\u273d\u0001"+
		"\u0000\u0000\u0000\u05a6\u2748\u0001\u0000\u0000\u0000\u05a8\u2758\u0001"+
		"\u0000\u0000\u0000\u05aa\u275a\u0001\u0000\u0000\u0000\u05ac\u2764\u0001"+
		"\u0000\u0000\u0000\u05ae\u2771\u0001\u0000\u0000\u0000\u05b0\u27ba\u0001"+
		"\u0000\u0000\u0000\u05b2\u27bc\u0001\u0000\u0000\u0000\u05b4\u27cf\u0001"+
		"\u0000\u0000\u0000\u05b6\u27d1\u0001\u0000\u0000\u0000\u05b8\u27e4\u0001"+
		"\u0000\u0000\u0000\u05ba\u27e6\u0001\u0000\u0000\u0000\u05bc\u27f1\u0001"+
		"\u0000\u0000\u0000\u05be\u27fa\u0001\u0000\u0000\u0000\u05c0\u2806\u0001"+
		"\u0000\u0000\u0000\u05c2\u2828\u0001\u0000\u0000\u0000\u05c4\u282a\u0001"+
		"\u0000\u0000\u0000\u05c6\u2831\u0001\u0000\u0000\u0000\u05c8\u2837\u0001"+
		"\u0000\u0000\u0000\u05ca\u283c\u0001\u0000\u0000\u0000\u05cc\u2852\u0001"+
		"\u0000\u0000\u0000\u05ce\u2854\u0001\u0000\u0000\u0000\u05d0\u285c\u0001"+
		"\u0000\u0000\u0000\u05d2\u2862\u0001\u0000\u0000\u0000\u05d4\u2866\u0001"+
		"\u0000\u0000\u0000\u05d6\u2868\u0001\u0000\u0000\u0000\u05d8\u286a\u0001"+
		"\u0000\u0000\u0000\u05da\u2877\u0001\u0000\u0000\u0000\u05dc\u287f\u0001"+
		"\u0000\u0000\u0000\u05de\u2882\u0001\u0000\u0000\u0000\u05e0\u288a\u0001"+
		"\u0000\u0000\u0000\u05e2\u2890\u0001\u0000\u0000\u0000\u05e4\u2894\u0001"+
		"\u0000\u0000\u0000\u05e6\u2896\u0001\u0000\u0000\u0000\u05e8\u2899\u0001"+
		"\u0000\u0000\u0000\u05ea\u28af\u0001\u0000\u0000\u0000\u05ec\u28b1\u0001"+
		"\u0000\u0000\u0000\u05ee\u28b9\u0001\u0000\u0000\u0000\u05f0\u28c3\u0001"+
		"\u0000\u0000\u0000\u05f2\u28c5\u0001\u0000\u0000\u0000\u05f4\u28c7\u0001"+
		"\u0000\u0000\u0000\u05f6\u0695\u0003J%\u0000\u05f7\u0695\u0003(\u0014"+
		"\u0000\u05f8\u0695\u00038\u001c\u0000\u05f9\u0695\u0003D\"\u0000\u05fa"+
		"\u0695\u0003\u02e2\u0171\u0000\u05fb\u0695\u0003\u02f8\u017c\u0000\u05fc"+
		"\u0695\u0003\u02fe\u017f\u0000\u05fd\u0695\u0003\u02c6\u0163\u0000\u05fe"+
		"\u0695\u0003\u02f6\u017b\u0000\u05ff\u0695\u0003\u02fa\u017d\u0000\u0600"+
		"\u0695\u0003\u0302\u0181\u0000\u0601\u0695\u0003\u0002\u0001\u0000\u0602"+
		"\u0695\u0003\u0004\u0002\u0000\u0603\u0695\u0003\f\u0006\u0000\u0604\u0695"+
		"\u0003\u000e\u0007\u0000\u0605\u0695\u0003\u0006\u0003\u0000\u0606\u0695"+
		"\u0003\u0016\u000b\u0000\u0607\u0695\u0003\u0010\b\u0000\u0608\u0695\u0003"+
		"\u0018\f\u0000\u0609\u0695\u0003\n\u0005\u0000\u060a\u0695\u0003\b\u0004"+
		"\u0000\u060b\u0695\u0003\u0012\t\u0000\u060c\u0695\u0003\u0014\n\u0000"+
		"\u060d\u0695\u0003\u02a6\u0153\u0000\u060e\u0695\u0003\u02a8\u0154\u0000"+
		"\u060f\u0695\u0003\u02ac\u0156\u0000\u0610\u0695\u0003\u02b2\u0159\u0000"+
		"\u0611\u0695\u0003\u02b4\u015a\u0000\u0612\u0695\u0003\u02ba\u015d\u0000"+
		"\u0613\u0695\u0003\u02bc\u015e\u0000\u0614\u0695\u0003\u02be\u015f\u0000"+
		"\u0615\u0695\u0003\u05be\u02df\u0000\u0616\u0695\u0003\u05c0\u02e0\u0000"+
		"\u0617\u0695\u0003\u05c8\u02e4\u0000\u0618\u0695\u0003\u05ec\u02f6\u0000"+
		"\u0619\u0695\u0003\u03ba\u01dd\u0000\u061a\u0695\u0003\u03c6\u01e3\u0000"+
		"\u061b\u0695\u0003\u0426\u0213\u0000\u061c\u0695\u0003\u037c\u01be\u0000"+
		"\u061d\u0695\u0003\u03e6\u01f3\u0000\u061e\u0695\u0003\u03ce\u01e7\u0000"+
		"\u061f\u0695\u0003\u03fe\u01ff\u0000\u0620\u0695\u0003\u0592\u02c9\u0000"+
		"\u0621\u0695\u0003\u0408\u0204\u0000\u0622\u0695\u0003\u0410\u0208\u0000"+
		"\u0623\u0695\u0003\u0420\u0210\u0000\u0624\u0695\u0003\u0434\u021a\u0000"+
		"\u0625\u0695\u0003\u0430\u0218\u0000\u0626\u0695\u0003\u0464\u0232\u0000"+
		"\u0627\u0695\u0003\u0474\u023a\u0000\u0628\u0695\u0003\u02ea\u0175\u0000"+
		"\u0629\u0695\u0003\u04b4\u025a\u0000\u062a\u0695\u0003\u04d2\u0269\u0000"+
		"\u062b\u0695\u0003\u0500\u0280\u0000\u062c\u0695\u0003\u04e0\u0270\u0000"+
		"\u062d\u0695\u0003\u02ec\u0176\u0000\u062e\u0695\u0003\u04fc\u027e\u0000"+
		"\u062f\u0695\u0003\u0494\u024a\u0000\u0630\u0695\u0003\u04d8\u026c\u0000"+
		"\u0631\u0695\u0003\u059c\u02ce\u0000\u0632\u0695\u0003\u05ba\u02dd\u0000"+
		"\u0633\u0695\u0003\u05bc\u02de\u0000\u0634\u0695\u0003\u050c\u0286\u0000"+
		"\u0635\u0695\u0003\u0508\u0284\u0000\u0636\u0695\u0003\u0564\u02b2\u0000"+
		"\u0637\u0695\u0003\u0514\u028a\u0000\u0638\u0695\u0003\u02ee\u0177\u0000"+
		"\u0639\u0695\u0003\u052c\u0296\u0000\u063a\u0695\u0003\u0540\u02a0\u0000"+
		"\u063b\u0695\u0003\u054a\u02a5\u0000\u063c\u0695\u0003\u0556\u02ab\u0000"+
		"\u063d\u0695\u0003\u055c\u02ae\u0000\u063e\u0695\u0003\u0548\u02a4\u0000"+
		"\u063f\u0695\u0003\u0522\u0291\u0000\u0640\u0695\u0003\u05e8\u02f4\u0000"+
		"\u0641\u0695\u0003\u057e\u02bf\u0000\u0642\u0695\u0003\u0414\u020a\u0000"+
		"\u0643\u0695\u0003\u058c\u02c6\u0000\u0644\u0695\u0003\u05ca\u02e5\u0000"+
		"\u0645\u0695\u0003\u05d8\u02ec\u0000\u0646\u0695\u0003\u0576\u02bb\u0000"+
		"\u0647\u0695\u0003\u057a\u02bd\u0000\u0648\u0695\u0003\u0578\u02bc\u0000"+
		"\u0649\u0695\u0003\u05e6\u02f3\u0000\u064a\u0695\u0003 \u0010\u0000\u064b"+
		"\u0695\u0003\u0506\u0283\u0000\u064c\u0695\u0003\u0442\u0221\u0000\u064d"+
		"\u0695\u0003\u0550\u02a8\u0000\u064e\u0695\u0003\u001a\r\u0000\u064f\u0695"+
		"\u0003\u00d0h\u0000\u0650\u0695\u0003\u04ca\u0265\u0000\u0651\u0695\u0003"+
		"\u040c\u0206\u0000\u0652\u0695\u0003\u0530\u0298\u0000\u0653\u0695\u0003"+
		"\u0492\u0249\u0000\u0654\u0695\u0003\u03ca\u01e5\u0000\u0655\u0695\u0003"+
		"\u0520\u0290\u0000\u0656\u0695\u0003\u044a\u0225\u0000\u0657\u0695\u0003"+
		"\u044e\u0227\u0000\u0658\u0695\u0003\u044c\u0226\u0000\u0659\u0695\u0003"+
		"\u049e\u024f\u0000\u065a\u0695\u0003\u03f0\u01f8\u0000\u065b\u0695\u0003"+
		"\u0526\u0293\u0000\u065c\u0695\u0003\u053e\u029f\u0000\u065d\u0695\u0003"+
		"\u053c\u029e\u0000\u065e\u0695\u0003\u052a\u0295\u0000\u065f\u0695\u0003"+
		"\u0534\u029a\u0000\u0660\u0695\u0003\u0532\u0299\u0000\u0661\u0695\u0003"+
		"\u02f0\u0178\u0000\u0662\u0695\u0003\u051c\u028e\u0000\u0663\u0695\u0003"+
		"\u0524\u0292\u0000\u0664\u0695\u0003\u0518\u028c\u0000\u0665\u0695\u0003"+
		"\u051e\u028f\u0000\u0666\u0695\u0003\u0528\u0294\u0000\u0667\u0695\u0003"+
		"\u0546\u02a3\u0000\u0668\u0695\u0003\u0558\u02ac\u0000\u0669\u0695\u0003"+
		"\u0544\u02a2\u0000\u066a\u0695\u0003\u054c\u02a6\u0000\u066b\u0695\u0003"+
		"\u0542\u02a1\u0000\u066c\u0695\u0003\u0538\u029c\u0000\u066d\u0695\u0003"+
		"\u054e\u02a7\u0000\u066e\u0695\u0003\u0552\u02a9\u0000\u066f\u0695\u0003"+
		"\u053a\u029d\u0000\u0670\u0695\u0003\u0516\u028b\u0000\u0671\u0695\u0003"+
		"\u054a\u02a5\u0000\u0672\u0695\u0003\u041a\u020d\u0000\u0673\u0695\u0003"+
		"&\u0013\u0000\u0674\u0695\u0003\u0574\u02ba\u0000\u0675\u0695\u0003\u0572"+
		"\u02b9\u0000\u0676\u0695\u0003\u0468\u0234\u0000\u0677\u0695\u0003\u046a"+
		"\u0235\u0000\u0678\u0695\u0003\u03a0\u01d0\u0000\u0679\u0695\u0003\u0482"+
		"\u0241\u0000\u067a\u0695\u0003\u042a\u0215\u0000\u067b\u0695\u0003\u0484"+
		"\u0242\u0000\u067c\u0695\u0003\u048c\u0246\u0000\u067d\u0695\u0003\u042c"+
		"\u0216\u0000\u067e\u0695\u0003\u042e\u0217\u0000\u067f\u0695\u0003\u0490"+
		"\u0248\u0000\u0680\u0695\u0003$\u0012\u0000\u0681\u0695\u0003\u02c2\u0161"+
		"\u0000\u0682\u0695\u0003\u041e\u020f\u0000\u0683\u0695\u0003\u0580\u02c0"+
		"\u0000\u0684\u0695\u0003\u05a4\u02d2\u0000\u0685\u0695\u0003\u0496\u024b"+
		"\u0000\u0686\u0695\u0003\u04a4\u0252\u0000\u0687\u0695\u0003\u04a6\u0253"+
		"\u0000\u0688\u0695\u0003\u0438\u021c\u0000\u0689\u0695\u0003\u02c0\u0160"+
		"\u0000\u068a\u0695\u0003\u043a\u021d\u0000\u068b\u0695\u0003\u0416\u020b"+
		"\u0000\u068c\u0695\u0003\u0596\u02cb\u0000\u068d\u0695\u0003\u0444\u0222"+
		"\u0000\u068e\u0695\u0003\u04d0\u0268\u0000\u068f\u0695\u0003\u0452\u0229"+
		"\u0000\u0690\u0695\u0003\u0450\u0228\u0000\u0691\u0695\u0003\u04d4\u026a"+
		"\u0000\u0692\u0695\u0003\u05ea\u02f5\u0000\u0693\u0695\u0003\u0568\u02b4"+
		"\u0000\u0694\u05f6\u0001\u0000\u0000\u0000\u0694\u05f7\u0001\u0000\u0000"+
		"\u0000\u0694\u05f8\u0001\u0000\u0000\u0000\u0694\u05f9\u0001\u0000\u0000"+
		"\u0000\u0694\u05fa\u0001\u0000\u0000\u0000\u0694\u05fb\u0001\u0000\u0000"+
		"\u0000\u0694\u05fc\u0001\u0000\u0000\u0000\u0694\u05fd\u0001\u0000\u0000"+
		"\u0000\u0694\u05fe\u0001\u0000\u0000\u0000\u0694\u05ff\u0001\u0000\u0000"+
		"\u0000\u0694\u0600\u0001\u0000\u0000\u0000\u0694\u0601\u0001\u0000\u0000"+
		"\u0000\u0694\u0602\u0001\u0000\u0000\u0000\u0694\u0603\u0001\u0000\u0000"+
		"\u0000\u0694\u0604\u0001\u0000\u0000\u0000\u0694\u0605\u0001\u0000\u0000"+
		"\u0000\u0694\u0606\u0001\u0000\u0000\u0000\u0694\u0607\u0001\u0000\u0000"+
		"\u0000\u0694\u0608\u0001\u0000\u0000\u0000\u0694\u0609\u0001\u0000\u0000"+
		"\u0000\u0694\u060a\u0001\u0000\u0000\u0000\u0694\u060b\u0001\u0000\u0000"+
		"\u0000\u0694\u060c\u0001\u0000\u0000\u0000\u0694\u060d\u0001\u0000\u0000"+
		"\u0000\u0694\u060e\u0001\u0000\u0000\u0000\u0694\u060f\u0001\u0000\u0000"+
		"\u0000\u0694\u0610\u0001\u0000\u0000\u0000\u0694\u0611\u0001\u0000\u0000"+
		"\u0000\u0694\u0612\u0001\u0000\u0000\u0000\u0694\u0613\u0001\u0000\u0000"+
		"\u0000\u0694\u0614\u0001\u0000\u0000\u0000\u0694\u0615\u0001\u0000\u0000"+
		"\u0000\u0694\u0616\u0001\u0000\u0000\u0000\u0694\u0617\u0001\u0000\u0000"+
		"\u0000\u0694\u0618\u0001\u0000\u0000\u0000\u0694\u0619\u0001\u0000\u0000"+
		"\u0000\u0694\u061a\u0001\u0000\u0000\u0000\u0694\u061b\u0001\u0000\u0000"+
		"\u0000\u0694\u061c\u0001\u0000\u0000\u0000\u0694\u061d\u0001\u0000\u0000"+
		"\u0000\u0694\u061e\u0001\u0000\u0000\u0000\u0694\u061f\u0001\u0000\u0000"+
		"\u0000\u0694\u0620\u0001\u0000\u0000\u0000\u0694\u0621\u0001\u0000\u0000"+
		"\u0000\u0694\u0622\u0001\u0000\u0000\u0000\u0694\u0623\u0001\u0000\u0000"+
		"\u0000\u0694\u0624\u0001\u0000\u0000\u0000\u0694\u0625\u0001\u0000\u0000"+
		"\u0000\u0694\u0626\u0001\u0000\u0000\u0000\u0694\u0627\u0001\u0000\u0000"+
		"\u0000\u0694\u0628\u0001\u0000\u0000\u0000\u0694\u0629\u0001\u0000\u0000"+
		"\u0000\u0694\u062a\u0001\u0000\u0000\u0000\u0694\u062b\u0001\u0000\u0000"+
		"\u0000\u0694\u062c\u0001\u0000\u0000\u0000\u0694\u062d\u0001\u0000\u0000"+
		"\u0000\u0694\u062e\u0001\u0000\u0000\u0000\u0694\u062f\u0001\u0000\u0000"+
		"\u0000\u0694\u0630\u0001\u0000\u0000\u0000\u0694\u0631\u0001\u0000\u0000"+
		"\u0000\u0694\u0632\u0001\u0000\u0000\u0000\u0694\u0633\u0001\u0000\u0000"+
		"\u0000\u0694\u0634\u0001\u0000\u0000\u0000\u0694\u0635\u0001\u0000\u0000"+
		"\u0000\u0694\u0636\u0001\u0000\u0000\u0000\u0694\u0637\u0001\u0000\u0000"+
		"\u0000\u0694\u0638\u0001\u0000\u0000\u0000\u0694\u0639\u0001\u0000\u0000"+
		"\u0000\u0694\u063a\u0001\u0000\u0000\u0000\u0694\u063b\u0001\u0000\u0000"+
		"\u0000\u0694\u063c\u0001\u0000\u0000\u0000\u0694\u063d\u0001\u0000\u0000"+
		"\u0000\u0694\u063e\u0001\u0000\u0000\u0000\u0694\u063f\u0001\u0000\u0000"+
		"\u0000\u0694\u0640\u0001\u0000\u0000\u0000\u0694\u0641\u0001\u0000\u0000"+
		"\u0000\u0694\u0642\u0001\u0000\u0000\u0000\u0694\u0643\u0001\u0000\u0000"+
		"\u0000\u0694\u0644\u0001\u0000\u0000\u0000\u0694\u0645\u0001\u0000\u0000"+
		"\u0000\u0694\u0646\u0001\u0000\u0000\u0000\u0694\u0647\u0001\u0000\u0000"+
		"\u0000\u0694\u0648\u0001\u0000\u0000\u0000\u0694\u0649\u0001\u0000\u0000"+
		"\u0000\u0694\u064a\u0001\u0000\u0000\u0000\u0694\u064b\u0001\u0000\u0000"+
		"\u0000\u0694\u064c\u0001\u0000\u0000\u0000\u0694\u064d\u0001\u0000\u0000"+
		"\u0000\u0694\u064e\u0001\u0000\u0000\u0000\u0694\u064f\u0001\u0000\u0000"+
		"\u0000\u0694\u0650\u0001\u0000\u0000\u0000\u0694\u0651\u0001\u0000\u0000"+
		"\u0000\u0694\u0652\u0001\u0000\u0000\u0000\u0694\u0653\u0001\u0000\u0000"+
		"\u0000\u0694\u0654\u0001\u0000\u0000\u0000\u0694\u0655\u0001\u0000\u0000"+
		"\u0000\u0694\u0656\u0001\u0000\u0000\u0000\u0694\u0657\u0001\u0000\u0000"+
		"\u0000\u0694\u0658\u0001\u0000\u0000\u0000\u0694\u0659\u0001\u0000\u0000"+
		"\u0000\u0694\u065a\u0001\u0000\u0000\u0000\u0694\u065b\u0001\u0000\u0000"+
		"\u0000\u0694\u065c\u0001\u0000\u0000\u0000\u0694\u065d\u0001\u0000\u0000"+
		"\u0000\u0694\u065e\u0001\u0000\u0000\u0000\u0694\u065f\u0001\u0000\u0000"+
		"\u0000\u0694\u0660\u0001\u0000\u0000\u0000\u0694\u0661\u0001\u0000\u0000"+
		"\u0000\u0694\u0662\u0001\u0000\u0000\u0000\u0694\u0663\u0001\u0000\u0000"+
		"\u0000\u0694\u0664\u0001\u0000\u0000\u0000\u0694\u0665\u0001\u0000\u0000"+
		"\u0000\u0694\u0666\u0001\u0000\u0000\u0000\u0694\u0667\u0001\u0000\u0000"+
		"\u0000\u0694\u0668\u0001\u0000\u0000\u0000\u0694\u0669\u0001\u0000\u0000"+
		"\u0000\u0694\u066a\u0001\u0000\u0000\u0000\u0694\u066b\u0001\u0000\u0000"+
		"\u0000\u0694\u066c\u0001\u0000\u0000\u0000\u0694\u066d\u0001\u0000\u0000"+
		"\u0000\u0694\u066e\u0001\u0000\u0000\u0000\u0694\u066f\u0001\u0000\u0000"+
		"\u0000\u0694\u0670\u0001\u0000\u0000\u0000\u0694\u0671\u0001\u0000\u0000"+
		"\u0000\u0694\u0672\u0001\u0000\u0000\u0000\u0694\u0673\u0001\u0000\u0000"+
		"\u0000\u0694\u0674\u0001\u0000\u0000\u0000\u0694\u0675\u0001\u0000\u0000"+
		"\u0000\u0694\u0676\u0001\u0000\u0000\u0000\u0694\u0677\u0001\u0000\u0000"+
		"\u0000\u0694\u0678\u0001\u0000\u0000\u0000\u0694\u0679\u0001\u0000\u0000"+
		"\u0000\u0694\u067a\u0001\u0000\u0000\u0000\u0694\u067b\u0001\u0000\u0000"+
		"\u0000\u0694\u067c\u0001\u0000\u0000\u0000\u0694\u067d\u0001\u0000\u0000"+
		"\u0000\u0694\u067e\u0001\u0000\u0000\u0000\u0694\u067f\u0001\u0000\u0000"+
		"\u0000\u0694\u0680\u0001\u0000\u0000\u0000\u0694\u0681\u0001\u0000\u0000"+
		"\u0000\u0694\u0682\u0001\u0000\u0000\u0000\u0694\u0683\u0001\u0000\u0000"+
		"\u0000\u0694\u0684\u0001\u0000\u0000\u0000\u0694\u0685\u0001\u0000\u0000"+
		"\u0000\u0694\u0686\u0001\u0000\u0000\u0000\u0694\u0687\u0001\u0000\u0000"+
		"\u0000\u0694\u0688\u0001\u0000\u0000\u0000\u0694\u0689\u0001\u0000\u0000"+
		"\u0000\u0694\u068a\u0001\u0000\u0000\u0000\u0694\u068b\u0001\u0000\u0000"+
		"\u0000\u0694\u068c\u0001\u0000\u0000\u0000\u0694\u068d\u0001\u0000\u0000"+
		"\u0000\u0694\u068e\u0001\u0000\u0000\u0000\u0694\u068f\u0001\u0000\u0000"+
		"\u0000\u0694\u0690\u0001\u0000\u0000\u0000\u0694\u0691\u0001\u0000\u0000"+
		"\u0000\u0694\u0692\u0001\u0000\u0000\u0000\u0694\u0693\u0001\u0000\u0000"+
		"\u0000\u0695\u0697\u0001\u0000\u0000\u0000\u0696\u0698\u0005+\u0000\u0000"+
		"\u0697\u0696\u0001\u0000\u0000\u0000\u0697\u0698\u0001\u0000\u0000\u0000"+
		"\u0698\u0699\u0001\u0000\u0000\u0000\u0699\u069a\u0005\u0000\u0000\u0001"+
		"\u069a\u0001\u0001\u0000\u0000\u0000\u069b\u069f\u0005\u01c0\u0000\u0000"+
		"\u069c\u069d\u0005\u00a7\u0000\u0000\u069d\u069e\u0005d\u0000\u0000\u069e"+
		"\u06a0\u0005\u01e4\u0000\u0000\u069f\u069c\u0001\u0000\u0000\u0000\u069f"+
		"\u06a0\u0001\u0000\u0000\u0000\u06a0\u06a1\u0001\u0000\u0000\u0000\u06a1"+
		"\u06a2\u0005`\u0000\u0000\u06a2\u06a8\u0003\u0282\u0141\u0000\u06a3\u06a4"+
		"\u0005\u01c0\u0000\u0000\u06a4\u06a5\u0005`\u0000\u0000\u06a5\u06a6\u0005"+
		"\u016b\u0000\u0000\u06a6\u06a8\u0005\u024f\u0000\u0000\u06a7\u069b\u0001"+
		"\u0000\u0000\u0000\u06a7\u06a3\u0001\u0000\u0000\u0000\u06a8\u0003\u0001"+
		"\u0000\u0000\u0000\u06a9\u06ab\u0005\u01ff\u0000\u0000\u06aa\u06ac\u0007"+
		"\u0000\u0000\u0000\u06ab\u06aa\u0001\u0000\u0000\u0000\u06ab\u06ac\u0001"+
		"\u0000\u0000\u0000\u06ac\u06ae\u0001\u0000\u0000\u0000\u06ad\u06af\u0003"+
		"\u0282\u0141\u0000\u06ae\u06ad\u0001\u0000\u0000\u0000\u06ae\u06af\u0001"+
		"\u0000\u0000\u0000\u06af\u0005\u0001\u0000\u0000\u0000\u06b0\u06b2\u0005"+
		"\u0200\u0000\u0000\u06b1\u06b3\u0007\u0000\u0000\u0000\u06b2\u06b1\u0001"+
		"\u0000\u0000\u0000\u06b2\u06b3\u0001\u0000\u0000\u0000\u06b3\u06b9\u0001"+
		"\u0000\u0000\u0000\u06b4\u06b6\u0005\u01eb\u0000\u0000\u06b5\u06b7\u0005"+
		"X\u0000\u0000\u06b6\u06b5\u0001\u0000\u0000\u0000\u06b6\u06b7\u0001\u0000"+
		"\u0000\u0000\u06b7\u06b8\u0001\u0000\u0000\u0000\u06b8\u06ba\u0005\u012e"+
		"\u0000\u0000\u06b9\u06b4\u0001\u0000\u0000\u0000\u06b9\u06ba\u0001\u0000"+
		"\u0000\u0000\u06ba\u0007\u0001\u0000\u0000\u0000\u06bb\u06bc\u0005\u0202"+
		"\u0000\u0000\u06bc\u06bd\u0003\u015c\u00ae\u0000\u06bd\t\u0001\u0000\u0000"+
		"\u0000\u06be\u06c0\u0005\u011b\u0000\u0000\u06bf\u06c1\u0007\u0000\u0000"+
		"\u0000\u06c0\u06bf\u0001\u0000\u0000\u0000\u06c0\u06c1\u0001\u0000\u0000"+
		"\u0000\u06c1\u06c7\u0001\u0000\u0000\u0000\u06c2\u06c4\u0005\u01eb\u0000"+
		"\u0000\u06c3\u06c5\u0005X\u0000\u0000\u06c4\u06c3\u0001\u0000\u0000\u0000"+
		"\u06c4\u06c5\u0001\u0000\u0000\u0000\u06c5\u06c6\u0001\u0000\u0000\u0000"+
		"\u06c6\u06c8\u0005\u012e\u0000\u0000\u06c7\u06c2\u0001\u0000\u0000\u0000"+
		"\u06c7\u06c8\u0001\u0000\u0000\u0000\u06c8\u000b\u0001\u0000\u0000\u0000"+
		"\u06c9\u06ca\u0005_\u0000\u0000\u06ca\u06cc\u0005`\u0000\u0000\u06cb\u06cd"+
		"\u0003\u0282\u0141\u0000\u06cc\u06cb\u0001\u0000\u0000\u0000\u06cc\u06cd"+
		"\u0001\u0000\u0000\u0000\u06cd\r\u0001\u0000\u0000\u0000\u06ce\u06d0\u0005"+
		"\u024b\u0000\u0000\u06cf\u06d1\u0007\u0000\u0000\u0000\u06d0\u06cf\u0001"+
		"\u0000\u0000\u0000\u06d0\u06d1\u0001\u0000\u0000\u0000\u06d1\u06d7\u0001"+
		"\u0000\u0000\u0000\u06d2\u06d4\u0005\u01eb\u0000\u0000\u06d3\u06d5\u0005"+
		"X\u0000\u0000\u06d4\u06d3\u0001\u0000\u0000\u0000\u06d4\u06d5\u0001\u0000"+
		"\u0000\u0000\u06d5\u06d6\u0001\u0000\u0000\u0000\u06d6\u06d8\u0005\u012e"+
		"\u0000\u0000\u06d7\u06d2\u0001\u0000\u0000\u0000\u06d7\u06d8\u0001\u0000"+
		"\u0000\u0000\u06d8\u000f\u0001\u0000\u0000\u0000\u06d9\u06db\u0005\u0201"+
		"\u0000\u0000\u06da\u06dc\u0007\u0000\u0000\u0000\u06db\u06da\u0001\u0000"+
		"\u0000\u0000\u06db\u06dc\u0001\u0000\u0000\u0000\u06dc\u06e2\u0001\u0000"+
		"\u0000\u0000\u06dd\u06df\u0005\u01eb\u0000\u0000\u06de\u06e0\u0005X\u0000"+
		"\u0000\u06df\u06de\u0001\u0000\u0000\u0000\u06df\u06e0\u0001\u0000\u0000"+
		"\u0000\u06e0\u06e1\u0001\u0000\u0000\u0000\u06e1\u06e3\u0005\u012e\u0000"+
		"\u0000\u06e2\u06dd\u0001\u0000\u0000\u0000\u06e2\u06e3\u0001\u0000\u0000"+
		"\u0000\u06e3\u0011\u0001\u0000\u0000\u0000\u06e4\u06e6\u0005\u017f\u0000"+
		"\u0000\u06e5\u06e7\u0005\u0202\u0000\u0000\u06e6\u06e5\u0001\u0000\u0000"+
		"\u0000\u06e6\u06e7\u0001\u0000\u0000\u0000\u06e7\u06e8\u0001\u0000\u0000"+
		"\u0000\u06e8\u06e9\u0003\u015c\u00ae\u0000\u06e9\u0013\u0001\u0000\u0000"+
		"\u0000\u06ea\u06ec\u0005\u0201\u0000\u0000\u06eb\u06ed\u0007\u0000\u0000"+
		"\u0000\u06ec\u06eb\u0001\u0000\u0000\u0000\u06ec\u06ed\u0001\u0000\u0000"+
		"\u0000\u06ed\u06ee\u0001\u0000\u0000\u0000\u06ee\u06f0\u0005\u01ea\u0000"+
		"\u0000\u06ef\u06f1\u0005\u0202\u0000\u0000\u06f0\u06ef\u0001\u0000\u0000"+
		"\u0000\u06f0\u06f1\u0001\u0000\u0000\u0000\u06f1\u06f2\u0001\u0000\u0000"+
		"\u0000\u06f2\u06f3\u0003\u015c\u00ae\u0000\u06f3\u0015\u0001\u0000\u0000"+
		"\u0000\u06f4\u06f5\u0005\u0200\u0000\u0000\u06f5\u06f6\u0005\u0172\u0000"+
		"\u0000\u06f6\u06f7\u0005\u024f\u0000\u0000\u06f7\u0017\u0001\u0000\u0000"+
		"\u0000\u06f8\u06f9\u0005\u0201\u0000\u0000\u06f9\u06fa\u0005\u0172\u0000"+
		"\u0000\u06fa\u06fb\u0005\u024f\u0000\u0000\u06fb\u0019\u0001\u0000\u0000"+
		"\u0000\u06fc\u06fd\u0005\u01c0\u0000\u0000\u06fd\u06fe\u0005l\u0000\u0000"+
		"\u06fe\u06ff\u0003\u001e\u000f\u0000\u06ff\u0700\u0003\u001c\u000e\u0000"+
		"\u0700\u001b\u0001\u0000\u0000\u0000\u0701\u0702\u0007\u0001\u0000\u0000"+
		"\u0702\u001d\u0001\u0000\u0000\u0000\u0703\u0706\u0005\u01f4\u0000\u0000"+
		"\u0704\u0706\u0003p8\u0000\u0705\u0703\u0001\u0000\u0000\u0000\u0705\u0704"+
		"\u0001\u0000\u0000\u0000\u0706\u001f\u0001\u0000\u0000\u0000\u0707\u0709"+
		"\u0005\u017e\u0000\u0000\u0708\u070a\u0005\u01c1\u0000\u0000\u0709\u0708"+
		"\u0001\u0000\u0000\u0000\u0709\u070a\u0001\u0000\u0000\u0000\u070a\u070b"+
		"\u0001\u0000\u0000\u0000\u070b\u0710\u0003\u0292\u0149\u0000\u070c\u070d"+
		"\u0005\u01f3\u0000\u0000\u070d\u070e\u0003\"\u0011\u0000\u070e\u070f\u0005"+
		"\u015a\u0000\u0000\u070f\u0711\u0001\u0000\u0000\u0000\u0710\u070c\u0001"+
		"\u0000\u0000\u0000\u0710\u0711\u0001\u0000\u0000\u0000\u0711\u0713\u0001"+
		"\u0000\u0000\u0000\u0712\u0714\u0005\u010a\u0000\u0000\u0713\u0712\u0001"+
		"\u0000\u0000\u0000\u0713\u0714\u0001\u0000\u0000\u0000\u0714!\u0001\u0000"+
		"\u0000\u0000\u0715\u0716\u0005\u011d\u0000\u0000\u0716\u0726\u0005\u00ff"+
		"\u0000\u0000\u0717\u0718\u0005P\u0000\u0000\u0718\u0726\u0005\u00ff\u0000"+
		"\u0000\u0719\u071a\u0005P\u0000\u0000\u071a\u0726\u0005\u014b\u0000\u0000"+
		"\u071b\u071c\u0005\u00ff\u0000\u0000\u071c\u071d\u0005\u01b6\u0000\u0000"+
		"\u071d\u0726\u0005\u014b\u0000\u0000\u071e\u0726\u0005\u00ff\u0000\u0000"+
		"\u071f\u0720\u0005\u00ff\u0000\u0000\u0720\u0721\u0005P\u0000\u0000\u0721"+
		"\u0726\u0005\u014b\u0000\u0000\u0722\u0726\u0005\u014b\u0000\u0000\u0723"+
		"\u0724\u0005\u011d\u0000\u0000\u0724\u0726\u0005\u014b\u0000\u0000\u0725"+
		"\u0715\u0001\u0000\u0000\u0000\u0725\u0717\u0001\u0000\u0000\u0000\u0725"+
		"\u0719\u0001\u0000\u0000\u0000\u0725\u071b\u0001\u0000\u0000\u0000\u0725"+
		"\u071e\u0001\u0000\u0000\u0000\u0725\u071f\u0001\u0000\u0000\u0000\u0725"+
		"\u0722\u0001\u0000\u0000\u0000\u0725\u0723\u0001\u0000\u0000\u0000\u0726"+
		"#\u0001\u0000\u0000\u0000\u0727\u0728\u0005\u016d\u0000\u0000\u0728\u0729"+
		"\u0005`\u0000\u0000\u0729\u072a\u0005\u024f\u0000\u0000\u072a%\u0001\u0000"+
		"\u0000\u0000\u072b\u072c\u0005\u012f\u0000\u0000\u072c\'\u0001\u0000\u0000"+
		"\u0000\u072d\u072f\u0003T*\u0000\u072e\u072d\u0001\u0000\u0000\u0000\u072e"+
		"\u072f\u0001\u0000\u0000\u0000\u072f\u0730\u0001\u0000\u0000\u0000\u0730"+
		"\u0731\u0005\u01b5\u0000\u0000\u0731\u0732\u0005\u01cf\u0000\u0000\u0732"+
		"\u0733\u0003*\u0015\u0000\u0733\u0735\u0003,\u0016\u0000\u0734\u0736\u0003"+
		"4\u001a\u0000\u0735\u0734\u0001\u0000\u0000\u0000\u0735\u0736\u0001\u0000"+
		"\u0000\u0000\u0736\u0738\u0001\u0000\u0000\u0000\u0737\u0739\u0003B!\u0000"+
		"\u0738\u0737\u0001\u0000\u0000\u0000\u0738\u0739\u0001\u0000\u0000\u0000"+
		"\u0739)\u0001\u0000\u0000\u0000\u073a\u0740\u0003\u015a\u00ad\u0000\u073b"+
		"\u073c\u0003\u015a\u00ad\u0000\u073c\u073d\u0005\u01e4\u0000\u0000\u073d"+
		"\u073e\u0003\u015c\u00ae\u0000\u073e\u0740\u0001\u0000\u0000\u0000\u073f"+
		"\u073a\u0001\u0000\u0000\u0000\u073f\u073b\u0001\u0000\u0000\u0000\u0740"+
		"+\u0001\u0000\u0000\u0000\u0741\u0757\u0003J%\u0000\u0742\u0743\u0005"+
		"\u0119\u0000\u0000\u0743\u0744\u0003.\u0017\u0000\u0744\u0745\u0005\u0239"+
		"\u0000\u0000\u0745\u0746\u0003J%\u0000\u0746\u0757\u0001\u0000\u0000\u0000"+
		"\u0747\u0748\u0005\u001e\u0000\u0000\u0748\u0749\u00030\u0018\u0000\u0749"+
		"\u074a\u0005\u001f\u0000\u0000\u074a\u074b\u0003J%\u0000\u074b\u0757\u0001"+
		"\u0000\u0000\u0000\u074c\u074d\u0005\u001e\u0000\u0000\u074d\u074e\u0003"+
		"0\u0018\u0000\u074e\u074f\u0005\u001f\u0000\u0000\u074f\u0750\u0005\u0119"+
		"\u0000\u0000\u0750\u0751\u0003.\u0017\u0000\u0751\u0752\u0005\u0239\u0000"+
		"\u0000\u0752\u0753\u0003J%\u0000\u0753\u0757\u0001\u0000\u0000\u0000\u0754"+
		"\u0755\u0005\u0217\u0000\u0000\u0755\u0757\u0005\u01d0\u0000\u0000\u0756"+
		"\u0741\u0001\u0000\u0000\u0000\u0756\u0742\u0001\u0000\u0000\u0000\u0756"+
		"\u0747\u0001\u0000\u0000\u0000\u0756\u074c\u0001\u0000\u0000\u0000\u0756"+
		"\u0754\u0001\u0000\u0000\u0000\u0757-\u0001\u0000\u0000\u0000\u0758\u0759"+
		"\u0007\u0002\u0000\u0000\u0759/\u0001\u0000\u0000\u0000\u075a\u075b\u0006"+
		"\u0018\uffff\uffff\u0000\u075b\u075c\u00032\u0019\u0000\u075c\u0762\u0001"+
		"\u0000\u0000\u0000\u075d\u075e\n\u0001\u0000\u0000\u075e\u075f\u0005$"+
		"\u0000\u0000\u075f\u0761\u00032\u0019\u0000\u0760\u075d\u0001\u0000\u0000"+
		"\u0000\u0761\u0764\u0001\u0000\u0000\u0000\u0762\u0760\u0001\u0000\u0000"+
		"\u0000\u0762\u0763\u0001\u0000\u0000\u0000\u07631\u0001\u0000\u0000\u0000"+
		"\u0764\u0762\u0001\u0000\u0000\u0000\u0765\u0766\u0003\u015c\u00ae\u0000"+
		"\u0766\u0767\u0003\u0114\u008a\u0000\u07673\u0001\u0000\u0000\u0000\u0768"+
		"\u0769\u0005\u01e5\u0000\u0000\u0769\u076a\u0005\u0118\u0000\u0000\u076a"+
		"\u076b\u00036\u001b\u0000\u076b\u076c\u0005\u021e\u0000\u0000\u076c\u076d"+
		"\u0005\u01b6\u0000\u0000\u076d\u076e\u0005\u01c0\u0000\u0000\u076e\u0770"+
		"\u0003:\u001d\u0000\u076f\u0771\u0003\u00c4b\u0000\u0770\u076f\u0001\u0000"+
		"\u0000\u0000\u0770\u0771\u0001\u0000\u0000\u0000\u0771\u0779\u0001\u0000"+
		"\u0000\u0000\u0772\u0773\u0005\u01e5\u0000\u0000\u0773\u0774\u0005\u0118"+
		"\u0000\u0000\u0774\u0775\u00036\u001b\u0000\u0775\u0776\u0005\u021e\u0000"+
		"\u0000\u0776\u0777\u0005\u0092\u0000\u0000\u0777\u0779\u0001\u0000\u0000"+
		"\u0000\u0778\u0768\u0001\u0000\u0000\u0000\u0778\u0772\u0001\u0000\u0000"+
		"\u0000\u07795\u0001\u0000\u0000\u0000\u077a\u077b\u0005\u001e\u0000\u0000"+
		"\u077b\u077c\u0003\u01fe\u00ff\u0000\u077c\u077e\u0005\u001f\u0000\u0000"+
		"\u077d\u077f\u0003\u00c4b\u0000\u077e\u077d\u0001\u0000\u0000\u0000\u077e"+
		"\u077f\u0001\u0000\u0000\u0000\u077f\u0785\u0001\u0000\u0000\u0000\u0780"+
		"\u0781\u0005\u01e5\u0000\u0000\u0781\u0782\u0005\u01c4\u0000\u0000\u0782"+
		"\u0785\u0003\u00f4z\u0000\u0783\u0785\u0001\u0000\u0000\u0000\u0784\u077a"+
		"\u0001\u0000\u0000\u0000\u0784\u0780\u0001\u0000\u0000\u0000\u0784\u0783"+
		"\u0001\u0000\u0000\u0000\u07857\u0001\u0000\u0000\u0000\u0786\u0788\u0003"+
		"T*\u0000\u0787\u0786\u0001\u0000\u0000\u0000\u0787\u0788\u0001\u0000\u0000"+
		"\u0000\u0788\u0789\u0001\u0000\u0000\u0000\u0789\u078a\u0005\u01b6\u0000"+
		"\u0000\u078a\u078b\u0003F#\u0000\u078b\u078c\u0005\u01c0\u0000\u0000\u078c"+
		"\u078e\u0003:\u001d\u0000\u078d\u078f\u0003\u00aeW\u0000\u078e\u078d\u0001"+
		"\u0000\u0000\u0000\u078e\u078f\u0001\u0000\u0000\u0000\u078f\u0791\u0001"+
		"\u0000\u0000\u0000\u0790\u0792\u0003\u00c6c\u0000\u0791\u0790\u0001\u0000"+
		"\u0000\u0000\u0791\u0792\u0001\u0000\u0000\u0000\u0792\u0794\u0001\u0000"+
		"\u0000\u0000\u0793\u0795\u0003B!\u0000\u0794\u0793\u0001\u0000\u0000\u0000"+
		"\u0794\u0795\u0001\u0000\u0000\u0000\u07959\u0001\u0000\u0000\u0000\u0796"+
		"\u0797\u0006\u001d\uffff\uffff\u0000\u0797\u0798\u0003<\u001e\u0000\u0798"+
		"\u079e\u0001\u0000\u0000\u0000\u0799\u079a\n\u0001\u0000\u0000\u079a\u079b"+
		"\u0005$\u0000\u0000\u079b\u079d\u0003<\u001e\u0000\u079c\u0799\u0001\u0000"+
		"\u0000\u0000\u079d\u07a0\u0001\u0000\u0000\u0000\u079e\u079c\u0001\u0000"+
		"\u0000\u0000\u079e\u079f\u0001\u0000\u0000\u0000\u079f;\u0001\u0000\u0000"+
		"\u0000\u07a0\u079e\u0001\u0000\u0000\u0000\u07a1\u07a2\u0003>\u001f\u0000"+
		"\u07a2\u07a3\u0005\u0016\u0000\u0000\u07a3\u07a4\u0003\u010c\u0086\u0000"+
		"\u07a4\u07ac\u0001\u0000\u0000\u0000\u07a5\u07a6\u0005\u001e\u0000\u0000"+
		"\u07a6\u07a7\u0003@ \u0000\u07a7\u07a8\u0005\u001f\u0000\u0000\u07a8\u07a9"+
		"\u0005\u0016\u0000\u0000\u07a9\u07aa\u0003\u010c\u0086\u0000\u07aa\u07ac"+
		"\u0001\u0000\u0000\u0000\u07ab\u07a1\u0001\u0000\u0000\u0000\u07ab\u07a5"+
		"\u0001\u0000\u0000\u0000\u07ac=\u0001\u0000\u0000\u0000\u07ad\u07ae\u0003"+
		"\u015c\u00ae\u0000\u07ae?\u0001\u0000\u0000\u0000\u07af\u07b0\u0006 \uffff"+
		"\uffff\u0000\u07b0\u07b1\u0003>\u001f\u0000\u07b1\u07b7\u0001\u0000\u0000"+
		"\u0000\u07b2\u07b3\n\u0001\u0000\u0000\u07b3\u07b4\u0005$\u0000\u0000"+
		"\u07b4\u07b6\u0003>\u001f\u0000\u07b5\u07b2\u0001\u0000\u0000\u0000\u07b6"+
		"\u07b9\u0001\u0000\u0000\u0000\u07b7\u07b5\u0001\u0000\u0000\u0000\u07b7"+
		"\u07b8\u0001\u0000\u0000\u0000\u07b8A\u0001\u0000\u0000\u0000\u07b9\u07b7"+
		"\u0001\u0000\u0000\u0000\u07ba\u07bb\u0005\u0113\u0000\u0000\u07bb\u07bc"+
		"\u0003\u0086C\u0000\u07bcC\u0001\u0000\u0000\u0000\u07bd\u07bf\u0003T"+
		"*\u0000\u07be\u07bd\u0001\u0000\u0000\u0000\u07be\u07bf\u0001\u0000\u0000"+
		"\u0000\u07bf\u07c0\u0001\u0000\u0000\u0000\u07c0\u07c1\u0005\u01b7\u0000"+
		"\u0000\u07c1\u07c2\u0005\u01d9\u0000\u0000\u07c2\u07c4\u0003F#\u0000\u07c3"+
		"\u07c5\u0003H$\u0000\u07c4\u07c3\u0001\u0000\u0000\u0000\u07c4\u07c5\u0001"+
		"\u0000\u0000\u0000\u07c5\u07c7\u0001\u0000\u0000\u0000\u07c6\u07c8\u0003"+
		"\u00c6c\u0000\u07c7\u07c6\u0001\u0000\u0000\u0000\u07c7\u07c8\u0001\u0000"+
		"\u0000\u0000\u07c8\u07ca\u0001\u0000\u0000\u0000\u07c9\u07cb\u0003B!\u0000"+
		"\u07ca\u07c9\u0001\u0000\u0000\u0000\u07ca\u07cb\u0001\u0000\u0000\u0000"+
		"\u07cbE\u0001\u0000\u0000\u0000\u07cc\u07d5\u0003\u00c2a\u0000\u07cd\u07ce"+
		"\u0003\u00c2a\u0000\u07ce\u07cf\u0003\u015c\u00ae\u0000\u07cf\u07d5\u0001"+
		"\u0000\u0000\u0000\u07d0\u07d1\u0003\u00c2a\u0000\u07d1\u07d2\u0005\u01e4"+
		"\u0000\u0000\u07d2\u07d3\u0003\u015c\u00ae\u0000\u07d3\u07d5\u0001\u0000"+
		"\u0000\u0000\u07d4\u07cc\u0001\u0000\u0000\u0000\u07d4\u07cd\u0001\u0000"+
		"\u0000\u0000\u07d4\u07d0\u0001\u0000\u0000\u0000\u07d5G\u0001\u0000\u0000"+
		"\u0000\u07d6\u07d7\u0005\u01e2\u0000\u0000\u07d7\u07d8\u0003\u00b0X\u0000"+
		"\u07d8I\u0001\u0000\u0000\u0000\u07d9\u07dc\u0003N\'\u0000\u07da\u07dc"+
		"\u0003L&\u0000\u07db\u07d9\u0001\u0000\u0000\u0000\u07db\u07da\u0001\u0000"+
		"\u0000\u0000\u07dcK\u0001\u0000\u0000\u0000\u07dd\u07de\u0005\u001e\u0000"+
		"\u0000\u07de\u07df\u0003N\'\u0000\u07df\u07e0\u0005\u001f\u0000\u0000"+
		"\u07e0\u07e6\u0001\u0000\u0000\u0000\u07e1\u07e2\u0005\u001e\u0000\u0000"+
		"\u07e2\u07e3\u0003L&\u0000\u07e3\u07e4\u0005\u001f\u0000\u0000\u07e4\u07e6"+
		"\u0001\u0000\u0000\u0000\u07e5\u07dd\u0001\u0000\u0000\u0000\u07e5\u07e1"+
		"\u0001\u0000\u0000\u0000\u07e6M\u0001\u0000\u0000\u0000\u07e7\u0815\u0003"+
		"P(\u0000\u07e8\u07e9\u0003P(\u0000\u07e9\u07ea\u0003\u01ee\u00f7\u0000"+
		"\u07ea\u0815\u0001\u0000\u0000\u0000\u07eb\u07ed\u0003P(\u0000\u07ec\u07ee"+
		"\u0003\u01ee\u00f7\u0000\u07ed\u07ec\u0001\u0000\u0000\u0000\u07ed\u07ee"+
		"\u0001\u0000\u0000\u0000\u07ee\u07ef\u0001\u0000\u0000\u0000\u07ef\u07f1"+
		"\u0003d2\u0000\u07f0\u07f2\u0003r9\u0000\u07f1\u07f0\u0001\u0000\u0000"+
		"\u0000\u07f1\u07f2\u0001\u0000\u0000\u0000\u07f2\u0815\u0001\u0000\u0000"+
		"\u0000\u07f3\u07f5\u0003P(\u0000\u07f4\u07f6\u0003\u01ee\u00f7\u0000\u07f5"+
		"\u07f4\u0001\u0000\u0000\u0000\u07f5\u07f6\u0001\u0000\u0000\u0000\u07f6"+
		"\u07f7\u0001\u0000\u0000\u0000\u07f7\u07f9\u0003r9\u0000\u07f8\u07fa\u0003"+
		"d2\u0000\u07f9\u07f8\u0001\u0000\u0000\u0000\u07f9\u07fa\u0001\u0000\u0000"+
		"\u0000\u07fa\u0815\u0001\u0000\u0000\u0000\u07fb\u07fc\u0003T*\u0000\u07fc"+
		"\u07fd\u0003P(\u0000\u07fd\u0815\u0001\u0000\u0000\u0000\u07fe\u07ff\u0003"+
		"T*\u0000\u07ff\u0800\u0003P(\u0000\u0800\u0801\u0003\u01ee\u00f7\u0000"+
		"\u0801\u0815\u0001\u0000\u0000\u0000\u0802\u0803\u0003T*\u0000\u0803\u0805"+
		"\u0003P(\u0000\u0804\u0806\u0003\u01ee\u00f7\u0000\u0805\u0804\u0001\u0000"+
		"\u0000\u0000\u0805\u0806\u0001\u0000\u0000\u0000\u0806\u0807\u0001\u0000"+
		"\u0000\u0000\u0807\u0809\u0003d2\u0000\u0808\u080a\u0003r9\u0000\u0809"+
		"\u0808\u0001\u0000\u0000\u0000\u0809\u080a\u0001\u0000\u0000\u0000\u080a"+
		"\u0815\u0001\u0000\u0000\u0000\u080b\u080c\u0003T*\u0000\u080c\u080e\u0003"+
		"P(\u0000\u080d\u080f\u0003\u01ee\u00f7\u0000\u080e\u080d\u0001\u0000\u0000"+
		"\u0000\u080e\u080f\u0001\u0000\u0000\u0000\u080f\u0810\u0001\u0000\u0000"+
		"\u0000\u0810\u0812\u0003r9\u0000\u0811\u0813\u0003d2\u0000\u0812\u0811"+
		"\u0001\u0000\u0000\u0000\u0812\u0813\u0001\u0000\u0000\u0000\u0813\u0815"+
		"\u0001\u0000\u0000\u0000\u0814\u07e7\u0001\u0000\u0000\u0000\u0814\u07e8"+
		"\u0001\u0000\u0000\u0000\u0814\u07eb\u0001\u0000\u0000\u0000\u0814\u07f3"+
		"\u0001\u0000\u0000\u0000\u0814\u07fb\u0001\u0000\u0000\u0000\u0814\u07fe"+
		"\u0001\u0000\u0000\u0000\u0814\u0802\u0001\u0000\u0000\u0000\u0814\u080b"+
		"\u0001\u0000\u0000\u0000\u0815O\u0001\u0000\u0000\u0000\u0816\u0817\u0006"+
		"(\uffff\uffff\u0000\u0817\u081a\u0003R)\u0000\u0818\u081a\u0003L&\u0000"+
		"\u0819\u0816\u0001\u0000\u0000\u0000\u0819\u0818\u0001\u0000\u0000\u0000"+
		"\u081a\u0829\u0001\u0000\u0000\u0000\u081b\u081c\n\u0002\u0000\u0000\u081c"+
		"\u081e\u0005\u023e\u0000\u0000\u081d\u081f\u0003\u01ec\u00f6\u0000\u081e"+
		"\u081d\u0001\u0000\u0000\u0000\u081e\u081f\u0001\u0000\u0000\u0000\u081f"+
		"\u0820\u0001\u0000\u0000\u0000\u0820\u0828\u0003P(\u0003\u0821\u0822\n"+
		"\u0001\u0000\u0000\u0822\u0824\u0007\u0003\u0000\u0000\u0823\u0825\u0003"+
		"\u01ec\u00f6\u0000\u0824\u0823\u0001\u0000\u0000\u0000\u0824\u0825\u0001"+
		"\u0000\u0000\u0000\u0825\u0826\u0001\u0000\u0000\u0000\u0826\u0828\u0003"+
		"P(\u0002\u0827\u081b\u0001\u0000\u0000\u0000\u0827\u0821\u0001\u0000\u0000"+
		"\u0000\u0828\u082b\u0001\u0000\u0000\u0000\u0829\u0827\u0001\u0000\u0000"+
		"\u0000\u0829\u082a\u0001\u0000\u0000\u0000\u082aQ\u0001\u0000\u0000\u0000"+
		"\u082b\u0829\u0001\u0000\u0000\u0000\u082c\u082e\u0005\u01b4\u0000\u0000"+
		"\u082d\u082f\u0005\u01f4\u0000\u0000\u082e\u082d\u0001\u0000\u0000\u0000"+
		"\u082e\u082f\u0001\u0000\u0000\u0000\u082f\u0831\u0001\u0000\u0000\u0000"+
		"\u0830\u0832\u0003\u0086C\u0000\u0831\u0830\u0001\u0000\u0000\u0000\u0831"+
		"\u0832\u0001\u0000\u0000\u0000\u0832\u0834\u0001\u0000\u0000\u0000\u0833"+
		"\u0835\u0003V+\u0000\u0834\u0833\u0001\u0000\u0000\u0000\u0834\u0835\u0001"+
		"\u0000\u0000\u0000\u0835\u0837\u0001\u0000\u0000\u0000\u0836\u0838\u0003"+
		"\u00aeW\u0000\u0837\u0836\u0001\u0000\u0000\u0000\u0837\u0838\u0001\u0000"+
		"\u0000\u0000\u0838\u083a\u0001\u0000\u0000\u0000\u0839\u083b\u0003\u00c4"+
		"b\u0000\u083a\u0839\u0001\u0000\u0000\u0000\u083a\u083b\u0001\u0000\u0000"+
		"\u0000\u083b\u083d\u0001\u0000\u0000\u0000\u083c\u083e\u0003\u008aE\u0000"+
		"\u083d\u083c\u0001\u0000\u0000\u0000\u083d\u083e\u0001\u0000\u0000\u0000"+
		"\u083e\u0840\u0001\u0000\u0000\u0000\u083f\u0841\u0003\u00c8d\u0000\u0840"+
		"\u083f\u0001\u0000\u0000\u0000\u0840\u0841\u0001\u0000\u0000\u0000\u0841"+
		"\u0843\u0001\u0000\u0000\u0000\u0842\u0844\u0003\u0098L\u0000\u0843\u0842"+
		"\u0001\u0000\u0000\u0000\u0843\u0844\u0001\u0000\u0000\u0000\u0844\u085e"+
		"\u0001\u0000\u0000\u0000\u0845\u0846\u0005\u01b4\u0000\u0000\u0846\u0847"+
		"\u0003\u01f6\u00fb\u0000\u0847\u0849\u0003\u0086C\u0000\u0848\u084a\u0003"+
		"V+\u0000\u0849\u0848\u0001\u0000\u0000\u0000\u0849\u084a\u0001\u0000\u0000"+
		"\u0000\u084a\u084c\u0001\u0000\u0000\u0000\u084b\u084d\u0003\u00aeW\u0000"+
		"\u084c\u084b\u0001\u0000\u0000\u0000\u084c\u084d\u0001\u0000\u0000\u0000"+
		"\u084d\u084f\u0001\u0000\u0000\u0000\u084e\u0850\u0003\u00c4b\u0000\u084f"+
		"\u084e\u0001\u0000\u0000\u0000\u084f\u0850\u0001\u0000\u0000\u0000\u0850"+
		"\u0852\u0001\u0000\u0000\u0000\u0851\u0853\u0003\u008aE\u0000\u0852\u0851"+
		"\u0001\u0000\u0000\u0000\u0852\u0853\u0001\u0000\u0000\u0000\u0853\u0855"+
		"\u0001\u0000\u0000\u0000\u0854\u0856\u0003\u00c8d\u0000\u0855\u0854\u0001"+
		"\u0000\u0000\u0000\u0855\u0856\u0001\u0000\u0000\u0000\u0856\u0858\u0001"+
		"\u0000\u0000\u0000\u0857\u0859\u0003\u0098L\u0000\u0858\u0857\u0001\u0000"+
		"\u0000\u0000\u0858\u0859\u0001\u0000\u0000\u0000\u0859\u085e\u0001\u0000"+
		"\u0000\u0000\u085a\u085e\u0003t:\u0000\u085b\u085c\u0005\u01c1\u0000\u0000"+
		"\u085c\u085e\u0003\u00c2a\u0000\u085d\u082c\u0001\u0000\u0000\u0000\u085d"+
		"\u0845\u0001\u0000\u0000\u0000\u085d\u085a\u0001\u0000\u0000\u0000\u085d"+
		"\u085b\u0001\u0000\u0000\u0000\u085eS\u0001\u0000\u0000\u0000\u085f\u0860"+
		"\u0005\u01d1\u0000\u0000\u0860\u0865\u0003Z-\u0000\u0861\u0862\u0005\u01d1"+
		"\u0000\u0000\u0862\u0863\u0005\u00bb\u0000\u0000\u0863\u0865\u0003Z-\u0000"+
		"\u0864\u085f\u0001\u0000\u0000\u0000\u0864\u0861\u0001\u0000\u0000\u0000"+
		"\u0865U\u0001\u0000\u0000\u0000\u0866\u0867\u0005\u01cf\u0000\u0000\u0867"+
		"\u0868\u0003X,\u0000\u0868W\u0001\u0000\u0000\u0000\u0869\u086b\u0005"+
		"\u00af\u0000\u0000\u086a\u086c\u0005\u01c1\u0000\u0000\u086b\u086a\u0001"+
		"\u0000\u0000\u0000\u086b\u086c\u0001\u0000\u0000\u0000\u086c\u086d\u0001"+
		"\u0000\u0000\u0000\u086d\u0896\u0003\u015a\u00ad\u0000\u086e\u0870\u0005"+
		"\u00ae\u0000\u0000\u086f\u0871\u0005\u01c1\u0000\u0000\u0870\u086f\u0001"+
		"\u0000\u0000\u0000\u0870\u0871\u0001\u0000\u0000\u0000\u0871\u0872\u0001"+
		"\u0000\u0000\u0000\u0872\u0896\u0003\u015a\u00ad\u0000\u0873\u0874\u0005"+
		"\u0223\u0000\u0000\u0874\u0876\u0005\u00af\u0000\u0000\u0875\u0877\u0005"+
		"\u01c1\u0000\u0000\u0876\u0875\u0001\u0000\u0000\u0000\u0876\u0877\u0001"+
		"\u0000\u0000\u0000\u0877\u0878\u0001\u0000\u0000\u0000\u0878\u0896\u0003"+
		"\u015a\u00ad\u0000\u0879\u087a\u0005\u0223\u0000\u0000\u087a\u087c\u0005"+
		"\u00ae\u0000\u0000\u087b\u087d\u0005\u01c1\u0000\u0000\u087c\u087b\u0001"+
		"\u0000\u0000\u0000\u087c\u087d\u0001\u0000\u0000\u0000\u087d\u087e\u0001"+
		"\u0000\u0000\u0000\u087e\u0896\u0003\u015a\u00ad\u0000\u087f\u0880\u0005"+
		"\u0080\u0000\u0000\u0880\u0882\u0005\u00af\u0000\u0000\u0881\u0883\u0005"+
		"\u01c1\u0000\u0000\u0882\u0881\u0001\u0000\u0000\u0000\u0882\u0883\u0001"+
		"\u0000\u0000\u0000\u0883\u0884\u0001\u0000\u0000\u0000\u0884\u0896\u0003"+
		"\u015a\u00ad\u0000\u0885\u0886\u0005\u0080\u0000\u0000\u0886\u0888\u0005"+
		"\u00ae\u0000\u0000\u0887\u0889\u0005\u01c1\u0000\u0000\u0888\u0887\u0001"+
		"\u0000\u0000\u0000\u0888\u0889\u0001\u0000\u0000\u0000\u0889\u088a\u0001"+
		"\u0000\u0000\u0000\u088a\u0896\u0003\u015a\u00ad\u0000\u088b\u088d\u0005"+
		"\u00b1\u0000\u0000\u088c\u088e\u0005\u01c1\u0000\u0000\u088d\u088c\u0001"+
		"\u0000\u0000\u0000\u088d\u088e\u0001\u0000\u0000\u0000\u088e\u088f\u0001"+
		"\u0000\u0000\u0000\u088f\u0896\u0003\u015a\u00ad\u0000\u0890\u0892\u0005"+
		"\u01c1\u0000\u0000\u0891\u0890\u0001\u0000\u0000\u0000\u0891\u0892\u0001"+
		"\u0000\u0000\u0000\u0892\u0893\u0001\u0000\u0000\u0000\u0893\u0896\u0003"+
		"\u015a\u00ad\u0000\u0894\u0896\u0003\u015a\u00ad\u0000\u0895\u0869\u0001"+
		"\u0000\u0000\u0000\u0895\u086e\u0001\u0000\u0000\u0000\u0895\u0873\u0001"+
		"\u0000\u0000\u0000\u0895\u0879\u0001\u0000\u0000\u0000\u0895\u087f\u0001"+
		"\u0000\u0000\u0000\u0895\u0885\u0001\u0000\u0000\u0000\u0895\u088b\u0001"+
		"\u0000\u0000\u0000\u0895\u0891\u0001\u0000\u0000\u0000\u0895\u0894\u0001"+
		"\u0000\u0000\u0000\u0896Y\u0001\u0000\u0000\u0000\u0897\u089c\u0003\\"+
		".\u0000\u0898\u0899\u0005$\u0000\u0000\u0899\u089b\u0003\\.\u0000\u089a"+
		"\u0898\u0001\u0000\u0000\u0000\u089b\u089e\u0001\u0000\u0000\u0000\u089c"+
		"\u089a\u0001\u0000\u0000\u0000\u089c\u089d\u0001\u0000\u0000\u0000\u089d"+
		"[\u0001\u0000\u0000\u0000\u089e\u089c\u0001\u0000\u0000\u0000\u089f\u08a0"+
		"\u0003\u00acV\u0000\u08a0\u08a1\u0003`0\u0000\u08a1\u08a2\u0005\u01e4"+
		"\u0000\u0000\u08a2\u08a3\u0003^/\u0000\u08a3\u08a4\u0005\u001e\u0000\u0000"+
		"\u08a4\u08a5\u0003b1\u0000\u08a5\u08a6\u0005\u001f\u0000\u0000\u08a6]"+
		"\u0001\u0000\u0000\u0000\u08a7\u08ac\u0005\u00fd\u0000\u0000\u08a8\u08a9"+
		"\u0005\u01ee\u0000\u0000\u08a9\u08ac\u0005\u00fd\u0000\u0000\u08aa\u08ac"+
		"\u0001\u0000\u0000\u0000\u08ab\u08a7\u0001\u0000\u0000\u0000\u08ab\u08a8"+
		"\u0001\u0000\u0000\u0000\u08ab\u08aa\u0001\u0000\u0000\u0000\u08ac_\u0001"+
		"\u0000\u0000\u0000\u08ad\u08ae\u0005\u001e\u0000\u0000\u08ae\u08af\u0003"+
		"\u01e4\u00f2\u0000\u08af\u08b0\u0005\u001f\u0000\u0000\u08b0\u08b3\u0001"+
		"\u0000\u0000\u0000\u08b1\u08b3\u0001\u0000\u0000\u0000\u08b2\u08ad\u0001"+
		"\u0000\u0000\u0000\u08b2\u08b1\u0001\u0000\u0000\u0000\u08b3a\u0001\u0000"+
		"\u0000\u0000\u08b4\u08b9\u0003J%\u0000\u08b5\u08b9\u0003(\u0014\u0000"+
		"\u08b6\u08b9\u00038\u001c\u0000\u08b7\u08b9\u0003D\"\u0000\u08b8\u08b4"+
		"\u0001\u0000\u0000\u0000\u08b8\u08b5\u0001\u0000\u0000\u0000\u08b8\u08b6"+
		"\u0001\u0000\u0000\u0000\u08b8\u08b7\u0001\u0000\u0000\u0000\u08b9c\u0001"+
		"\u0000\u0000\u0000\u08ba\u08bf\u0003f3\u0000\u08bb\u08bc\u0005\u01e9\u0000"+
		"\u0000\u08bc\u08bd\u0005[\u0000\u0000\u08bd\u08bf\u0005\u0096\u0000\u0000"+
		"\u08be\u08ba\u0001\u0000\u0000\u0000\u08be\u08bb\u0001\u0000\u0000\u0000"+
		"\u08bfe\u0001\u0000\u0000\u0000\u08c0\u08c1\u00063\uffff\uffff\u0000\u08c1"+
		"\u08c2\u0003h4\u0000\u08c2\u08c7\u0001\u0000\u0000\u0000\u08c3\u08c4\n"+
		"\u0001\u0000\u0000\u08c4\u08c6\u0003h4\u0000\u08c5\u08c3\u0001\u0000\u0000"+
		"\u0000\u08c6\u08c9\u0001\u0000\u0000\u0000\u08c7\u08c5\u0001\u0000\u0000"+
		"\u0000\u08c7\u08c8\u0001\u0000\u0000\u0000\u08c8g\u0001\u0000\u0000\u0000"+
		"\u08c9\u08c7\u0001\u0000\u0000\u0000\u08ca\u08cc\u0003l6\u0000\u08cb\u08cd"+
		"\u0003n7\u0000\u08cc\u08cb\u0001\u0000\u0000\u0000\u08cc\u08cd\u0001\u0000"+
		"\u0000\u0000\u08cd\u08cf\u0001\u0000\u0000\u0000\u08ce\u08d0\u0003j5\u0000"+
		"\u08cf\u08ce\u0001\u0000\u0000\u0000\u08cf\u08d0\u0001\u0000\u0000\u0000"+
		"\u08d0i\u0001\u0000\u0000\u0000\u08d1\u08d5\u0005\u010a\u0000\u0000\u08d2"+
		"\u08d3\u0005\u0254\u0000\u0000\u08d3\u08d5\u0005\u010b\u0000\u0000\u08d4"+
		"\u08d1\u0001\u0000\u0000\u0000\u08d4\u08d2\u0001\u0000\u0000\u0000\u08d5"+
		"k\u0001\u0000\u0000\u0000\u08d6\u08d7\u0005\u01e9\u0000\u0000\u08d7\u08e2"+
		"\u0005\u01b6\u0000\u0000\u08d8\u08d9\u0005\u01e9\u0000\u0000\u08d9\u08da"+
		"\u0005X\u0000\u0000\u08da\u08db\u0005\u01c8\u0000\u0000\u08db\u08e2\u0005"+
		"\u01b6\u0000\u0000\u08dc\u08dd\u0005\u01e9\u0000\u0000\u08dd\u08e2\u0005"+
		"\u00ff\u0000\u0000\u08de\u08df\u0005\u01e9\u0000\u0000\u08df\u08e0\u0005"+
		"\u01c8\u0000\u0000\u08e0\u08e2\u0005\u00ff\u0000\u0000\u08e1\u08d6\u0001"+
		"\u0000\u0000\u0000\u08e1\u08d8\u0001\u0000\u0000\u0000\u08e1\u08dc\u0001"+
		"\u0000\u0000\u0000\u08e1\u08de\u0001\u0000\u0000\u0000\u08e2m\u0001\u0000"+
		"\u0000\u0000\u08e3\u08e4\u0005\u00b8\u0000\u0000\u08e4\u08e5\u0003p8\u0000"+
		"\u08e5o\u0001\u0000\u0000\u0000\u08e6\u08e7\u00068\uffff\uffff\u0000\u08e7"+
		"\u08e8\u0003\u015a\u00ad\u0000\u08e8\u08ee\u0001\u0000\u0000\u0000\u08e9"+
		"\u08ea\n\u0001\u0000\u0000\u08ea\u08eb\u0005$\u0000\u0000\u08eb\u08ed"+
		"\u0003\u015a\u00ad\u0000\u08ec\u08e9\u0001\u0000\u0000\u0000\u08ed\u08f0"+
		"\u0001\u0000\u0000\u0000\u08ee\u08ec\u0001\u0000\u0000\u0000\u08ee\u08ef"+
		"\u0001\u0000\u0000\u0000\u08efq\u0001\u0000\u0000\u0000\u08f0\u08ee\u0001"+
		"\u0000\u0000\u0000\u08f1\u08f3\u0003v;\u0000\u08f2\u08f4\u0003x<\u0000"+
		"\u08f3\u08f2\u0001\u0000\u0000\u0000\u08f3\u08f4\u0001\u0000\u0000\u0000"+
		"\u08f4\u08fa\u0001\u0000\u0000\u0000\u08f5\u08f7\u0003x<\u0000\u08f6\u08f8"+
		"\u0003v;\u0000\u08f7\u08f6\u0001\u0000\u0000\u0000\u08f7\u08f8\u0001\u0000"+
		"\u0000\u0000\u08f8\u08fa\u0001\u0000\u0000\u0000\u08f9\u08f1\u0001\u0000"+
		"\u0000\u0000\u08f9\u08f5\u0001\u0000\u0000\u0000\u08fas\u0001\u0000\u0000"+
		"\u0000\u08fb\u08fc\u0006:\uffff\uffff\u0000\u08fc\u08fd\u0005\u01d0\u0000"+
		"\u0000\u08fd\u08fe\u0005\u001e\u0000\u0000\u08fe\u08ff\u0003\u0184\u00c2"+
		"\u0000\u08ff\u0900\u0005\u001f\u0000\u0000\u0900\u0909\u0001\u0000\u0000"+
		"\u0000\u0901\u0902\n\u0001\u0000\u0000\u0902\u0903\u0005$\u0000\u0000"+
		"\u0903\u0904\u0005\u001e\u0000\u0000\u0904\u0905\u0003\u0184\u00c2\u0000"+
		"\u0905\u0906\u0005\u001f\u0000\u0000\u0906\u0908\u0001\u0000\u0000\u0000"+
		"\u0907\u0901\u0001\u0000\u0000\u0000\u0908\u090b\u0001\u0000\u0000\u0000"+
		"\u0909\u0907\u0001\u0000\u0000\u0000\u0909\u090a\u0001\u0000\u0000\u0000"+
		"\u090au\u0001\u0000\u0000\u0000\u090b\u0909\u0001\u0000\u0000\u0000\u090c"+
		"\u090d\u0005\u01fd\u0000\u0000\u090d\u0917\u0003z=\u0000\u090e\u090f\u0005"+
		"\u0241\u0000\u0000\u090f\u0911\u0003\u0082A\u0000\u0910\u0912\u0003~?"+
		"\u0000\u0911\u0910\u0001\u0000\u0000\u0000\u0911\u0912\u0001\u0000\u0000"+
		"\u0000\u0912\u0913\u0001\u0000\u0000\u0000\u0913\u0914\u0003\u0080@\u0000"+
		"\u0914\u0915\u0003\u0084B\u0000\u0915\u0917\u0001\u0000\u0000\u0000\u0916"+
		"\u090c\u0001\u0000\u0000\u0000\u0916\u090e\u0001\u0000\u0000\u0000\u0917"+
		"w\u0001\u0000\u0000\u0000\u0918\u0919\u0005\u01fe\u0000\u0000\u0919\u091b"+
		"\u0003|>\u0000\u091a\u091c\u0003\u0080@\u0000\u091b\u091a\u0001\u0000"+
		"\u0000\u0000\u091b\u091c\u0001\u0000\u0000\u0000\u091cy\u0001\u0000\u0000"+
		"\u0000\u091d\u0920\u0003\u0110\u0088\u0000\u091e\u0920\u0005\u01f4\u0000"+
		"\u0000\u091f\u091d\u0001\u0000\u0000\u0000\u091f\u091e\u0001\u0000\u0000"+
		"\u0000\u0920{\u0001\u0000\u0000\u0000\u0921\u0922\u0003\u0110\u0088\u0000"+
		"\u0922}\u0001\u0000\u0000\u0000\u0923\u0924\u0003\u0110\u0088\u0000\u0924"+
		"\u007f\u0001\u0000\u0000\u0000\u0925\u0926\u0007\u0004\u0000\u0000\u0926"+
		"\u0081\u0001\u0000\u0000\u0000\u0927\u0928\u0007\u0005\u0000\u0000\u0928"+
		"\u0083\u0001\u0000\u0000\u0000\u0929\u092d\u0005\u0096\u0000\u0000\u092a"+
		"\u092b\u0005\u01d1\u0000\u0000\u092b\u092d\u0005\u0240\u0000\u0000\u092c"+
		"\u0929\u0001\u0000\u0000\u0000\u092c\u092a\u0001\u0000\u0000\u0000\u092d"+
		"\u0085\u0001\u0000\u0000\u0000\u092e\u092f\u0006C\uffff\uffff\u0000\u092f"+
		"\u0930\u0003\u0088D\u0000\u0930\u0936\u0001\u0000\u0000\u0000\u0931\u0932"+
		"\n\u0001\u0000\u0000\u0932\u0933\u0005$\u0000\u0000\u0933\u0935\u0003"+
		"\u0088D\u0000\u0934\u0931\u0001\u0000\u0000\u0000\u0935\u0938\u0001\u0000"+
		"\u0000\u0000\u0936\u0934\u0001\u0000\u0000\u0000\u0936\u0937\u0001\u0000"+
		"\u0000\u0000\u0937\u0087\u0001\u0000\u0000\u0000\u0938\u0936\u0001\u0000"+
		"\u0000\u0000\u0939\u093a\u0003\u015c\u00ae\u0000\u093a\u093b\u0005\u0013"+
		"\u0000\u0000\u093b\u094b\u0001\u0000\u0000\u0000\u093c\u093d\u0003\u010c"+
		"\u0086\u0000\u093d\u093e\u0005\u01e4\u0000\u0000\u093e\u093f\u0003\u00e4"+
		"r\u0000\u093f\u094b\u0001\u0000\u0000\u0000\u0940\u0941\u0003\u010c\u0086"+
		"\u0000\u0941\u0942\u0003\u00e4r\u0000\u0942\u094b\u0001\u0000\u0000\u0000"+
		"\u0943\u094b\u0003\u010c\u0086\u0000\u0944\u094b\u0005\u000f\u0000\u0000"+
		"\u0945\u0946\u0003\u015c\u00ae\u0000\u0946\u0947\u0005\u0013\u0000\u0000"+
		"\u0947\u0948\u0005\u01e4\u0000\u0000\u0948\u0949\u0003\u00e4r\u0000\u0949"+
		"\u094b\u0001\u0000\u0000\u0000\u094a\u0939\u0001\u0000\u0000\u0000\u094a"+
		"\u093c\u0001\u0000\u0000\u0000\u094a\u0940\u0001\u0000\u0000\u0000\u094a"+
		"\u0943\u0001\u0000\u0000\u0000\u094a\u0944\u0001\u0000\u0000\u0000\u094a"+
		"\u0945\u0001\u0000\u0000\u0000\u094b\u0089\u0001\u0000\u0000\u0000\u094c"+
		"\u094d\u0005\u01f8\u0000\u0000\u094d\u094e\u0005\u01f9\u0000\u0000\u094e"+
		"\u094f\u0003\u008cF\u0000\u094f\u008b\u0001\u0000\u0000\u0000\u0950\u0955"+
		"\u0003\u008eG\u0000\u0951\u0952\u0005$\u0000\u0000\u0952\u0954\u0003\u008e"+
		"G\u0000\u0953\u0951\u0001\u0000\u0000\u0000\u0954\u0957\u0001\u0000\u0000"+
		"\u0000\u0955\u0953\u0001\u0000\u0000\u0000\u0955\u0956\u0001\u0000\u0000"+
		"\u0000\u0956\u008d\u0001\u0000\u0000\u0000\u0957\u0955\u0001\u0000\u0000"+
		"\u0000\u0958\u095e\u0003\u010c\u0086\u0000\u0959\u095e\u0003\u0090H\u0000"+
		"\u095a\u095e\u0003\u0094J\u0000\u095b\u095e\u0003\u0092I\u0000\u095c\u095e"+
		"\u0003\u0096K\u0000\u095d\u0958\u0001\u0000\u0000\u0000\u095d\u0959\u0001"+
		"\u0000\u0000\u0000\u095d\u095a\u0001\u0000\u0000\u0000\u095d\u095b\u0001"+
		"\u0000\u0000\u0000\u095d\u095c\u0001\u0000\u0000\u0000\u095e\u008f\u0001"+
		"\u0000\u0000\u0000\u095f\u0960\u0005\u001e\u0000\u0000\u0960\u0961\u0005"+
		"\u001f\u0000\u0000\u0961\u0091\u0001\u0000\u0000\u0000\u0962\u0963\u0005"+
		"\u0100\u0000\u0000\u0963\u0964\u0005\u001e\u0000\u0000\u0964\u0965\u0003"+
		"\u0184\u00c2\u0000\u0965\u0966\u0005\u001f\u0000\u0000\u0966\u0093\u0001"+
		"\u0000\u0000\u0000\u0967\u0968\u0005\u0242\u0000\u0000\u0968\u0969\u0005"+
		"\u001e\u0000\u0000\u0969\u096a\u0003\u0184\u00c2\u0000\u096a\u096b\u0005"+
		"\u001f\u0000\u0000\u096b\u0095\u0001\u0000\u0000\u0000\u096c\u096d\u0005"+
		"\u0243\u0000\u0000\u096d\u096e\u0005\u0244\u0000\u0000\u096e\u096f\u0005"+
		"\u001e\u0000\u0000\u096f\u0970\u0003\u008cF\u0000\u0970\u0971\u0005\u001f"+
		"\u0000\u0000\u0971\u0097\u0001\u0000\u0000\u0000\u0972\u0973\u0005\u0245"+
		"\u0000\u0000\u0973\u0974\u0003\u009aM\u0000\u0974\u0099\u0001\u0000\u0000"+
		"\u0000\u0975\u0976\u0006M\uffff\uffff\u0000\u0976\u0977\u0003\u009cN\u0000"+
		"\u0977\u097d\u0001\u0000\u0000\u0000\u0978\u0979\n\u0001\u0000\u0000\u0979"+
		"\u097a\u0005$\u0000\u0000\u097a\u097c\u0003\u009cN\u0000\u097b\u0978\u0001"+
		"\u0000\u0000\u0000\u097c\u097f\u0001\u0000\u0000\u0000\u097d\u097b\u0001"+
		"\u0000\u0000\u0000\u097d\u097e\u0001\u0000\u0000\u0000\u097e\u009b\u0001"+
		"\u0000\u0000\u0000\u097f\u097d\u0001\u0000\u0000\u0000\u0980\u0981\u0003"+
		"\u015c\u00ae\u0000\u0981\u0982\u0005\u01e4\u0000\u0000\u0982\u0983\u0003"+
		"\u009eO\u0000\u0983\u009d\u0001\u0000\u0000\u0000\u0984\u0986\u0005\u001e"+
		"\u0000\u0000\u0985\u0987\u0003\u00a0P\u0000\u0986\u0985\u0001\u0000\u0000"+
		"\u0000\u0986\u0987\u0001\u0000\u0000\u0000\u0987\u0989\u0001\u0000\u0000"+
		"\u0000\u0988\u098a\u0003\u00a2Q\u0000\u0989\u0988\u0001\u0000\u0000\u0000"+
		"\u0989\u098a\u0001\u0000\u0000\u0000\u098a\u098c\u0001\u0000\u0000\u0000"+
		"\u098b\u098d\u0003\u01ee\u00f7\u0000\u098c\u098b\u0001\u0000\u0000\u0000"+
		"\u098c\u098d\u0001\u0000\u0000\u0000\u098d\u098f\u0001\u0000\u0000\u0000"+
		"\u098e\u0990\u0003\u00a4R\u0000\u098f\u098e\u0001\u0000\u0000\u0000\u098f"+
		"\u0990\u0001\u0000\u0000\u0000\u0990\u0991\u0001\u0000\u0000\u0000\u0991"+
		"\u0992\u0005\u001f\u0000\u0000\u0992\u009f\u0001\u0000\u0000\u0000\u0993"+
		"\u0994\u0003\u015c\u00ae\u0000\u0994\u00a1\u0001\u0000\u0000\u0000\u0995"+
		"\u0996\u0005O\u0000\u0000\u0996\u0997\u0005\u01f9\u0000\u0000\u0997\u0998"+
		"\u0003\u0184\u00c2\u0000\u0998\u00a3\u0001\u0000\u0000\u0000\u0999\u099a"+
		"\u0005\u009d\u0000\u0000\u099a\u099b\u0003\u00a6S\u0000\u099b\u099c\u0003"+
		"\u00aaU\u0000\u099c\u09a6\u0001\u0000\u0000\u0000\u099d\u099e\u0005^\u0000"+
		"\u0000\u099e\u099f\u0003\u00a6S\u0000\u099f\u09a0\u0003\u00aaU\u0000\u09a0"+
		"\u09a6\u0001\u0000\u0000\u0000\u09a1\u09a2\u0005\u00ba\u0000\u0000\u09a2"+
		"\u09a3\u0003\u00a6S\u0000\u09a3\u09a4\u0003\u00aaU\u0000\u09a4\u09a6\u0001"+
		"\u0000\u0000\u0000\u09a5\u0999\u0001\u0000\u0000\u0000\u09a5\u099d\u0001"+
		"\u0000\u0000\u0000\u09a5\u09a1\u0001\u0000\u0000\u0000\u09a6\u00a5\u0001"+
		"\u0000\u0000\u0000\u09a7\u09ae\u0003\u00a8T\u0000\u09a8\u09a9\u0005\u01f2"+
		"\u0000\u0000\u09a9\u09aa\u0003\u00a8T\u0000\u09aa\u09ab\u0005\u01eb\u0000"+
		"\u0000\u09ab\u09ac\u0003\u00a8T\u0000\u09ac\u09ae\u0001\u0000\u0000\u0000"+
		"\u09ad\u09a7\u0001\u0000\u0000\u0000\u09ad\u09a8\u0001\u0000\u0000\u0000"+
		"\u09ae\u00a7\u0001\u0000\u0000\u0000\u09af\u09b0\u0005\u00b0\u0000\u0000"+
		"\u09b0\u09bc\u0005\u009c\u0000\u0000\u09b1\u09b2\u0005\u00b0\u0000\u0000"+
		"\u09b2\u09bc\u0005~\u0000\u0000\u09b3\u09b4\u0005\u0218\u0000\u0000\u09b4"+
		"\u09bc\u0005P\u0000\u0000\u09b5\u09b6\u0003\u010c\u0086\u0000\u09b6\u09b7"+
		"\u0005\u009c\u0000\u0000\u09b7\u09bc\u0001\u0000\u0000\u0000\u09b8\u09b9"+
		"\u0003\u010c\u0086\u0000\u09b9\u09ba\u0005~\u0000\u0000\u09ba\u09bc\u0001"+
		"\u0000\u0000\u0000\u09bb\u09af\u0001\u0000\u0000\u0000\u09bb\u09b1\u0001"+
		"\u0000\u0000\u0000\u09bb\u09b3\u0001\u0000\u0000\u0000\u09bb\u09b5\u0001"+
		"\u0000\u0000\u0000\u09bb\u09b8\u0001\u0000\u0000\u0000\u09bc\u00a9\u0001"+
		"\u0000\u0000\u0000\u09bd\u09be\u0005M\u0000\u0000\u09be\u09bf\u0005\u0218"+
		"\u0000\u0000\u09bf\u09c9\u0005P\u0000\u0000\u09c0\u09c1\u0005M\u0000\u0000"+
		"\u09c1\u09c9\u0005\u01f8\u0000\u0000\u09c2\u09c3\u0005M\u0000\u0000\u09c3"+
		"\u09c9\u0005\u0240\u0000\u0000\u09c4\u09c5\u0005M\u0000\u0000\u09c5\u09c6"+
		"\u0005X\u0000\u0000\u09c6\u09c9\u0005\u0246\u0000\u0000\u09c7\u09c9\u0001"+
		"\u0000\u0000\u0000\u09c8\u09bd\u0001\u0000\u0000\u0000\u09c8\u09c0\u0001"+
		"\u0000\u0000\u0000\u09c8\u09c2\u0001\u0000\u0000\u0000\u09c8\u09c4\u0001"+
		"\u0000\u0000\u0000\u09c8\u09c7\u0001\u0000\u0000\u0000\u09c9\u00ab\u0001"+
		"\u0000\u0000\u0000\u09ca\u09cd\u0003\u00e4r\u0000\u09cb\u09cd\u0005\u024f"+
		"\u0000\u0000\u09cc\u09ca\u0001\u0000\u0000\u0000\u09cc\u09cb\u0001\u0000"+
		"\u0000\u0000\u09cd\u00ad\u0001\u0000\u0000\u0000\u09ce\u09cf\u0005\u01d9"+
		"\u0000\u0000\u09cf\u09d0\u0003\u00b0X\u0000\u09d0\u00af\u0001\u0000\u0000"+
		"\u0000\u09d1\u09d2\u0006X\uffff\uffff\u0000\u09d2\u09d3\u0003\u00b2Y\u0000"+
		"\u09d3\u09d9\u0001\u0000\u0000\u0000\u09d4\u09d5\n\u0001\u0000\u0000\u09d5"+
		"\u09d6\u0005$\u0000\u0000\u09d6\u09d8\u0003\u00b2Y\u0000\u09d7\u09d4\u0001"+
		"\u0000\u0000\u0000\u09d8\u09db\u0001\u0000\u0000\u0000\u09d9\u09d7\u0001"+
		"\u0000\u0000\u0000\u09d9\u09da\u0001\u0000\u0000\u0000\u09da\u00b1\u0001"+
		"\u0000\u0000\u0000\u09db\u09d9\u0001\u0000\u0000\u0000\u09dc\u09dd\u0006"+
		"Y\uffff\uffff\u0000\u09dd\u09df\u0003\u00c2a\u0000\u09de\u09e0\u0003\u01e2"+
		"\u00f1\u0000\u09df\u09de\u0001\u0000\u0000\u0000\u09df\u09e0\u0001\u0000"+
		"\u0000\u0000\u09e0\u0a0a\u0001\u0000\u0000\u0000\u09e1\u09e3\u0003\u00c2"+
		"a\u0000\u09e2\u09e4\u0003\u01e2\u00f1\u0000\u09e3\u09e2\u0001\u0000\u0000"+
		"\u0000\u09e3\u09e4\u0001\u0000\u0000\u0000\u09e4\u09e5\u0001\u0000\u0000"+
		"\u0000\u09e5\u09e6\u0003\u01e8\u00f4\u0000\u09e6\u0a0a\u0001\u0000\u0000"+
		"\u0000\u09e7\u09e9\u0003\u0162\u00b1\u0000\u09e8\u09ea\u0003\u01e6\u00f3"+
		"\u0000\u09e9\u09e8\u0001\u0000\u0000\u0000\u09e9\u09ea\u0001\u0000\u0000"+
		"\u0000\u09ea\u0a0a\u0001\u0000\u0000\u0000\u09eb\u09ec\u0005\u0114\u0000"+
		"\u0000\u09ec\u09ee\u0003\u0162\u00b1\u0000\u09ed\u09ef\u0003\u01e6\u00f3"+
		"\u0000\u09ee\u09ed\u0001\u0000\u0000\u0000\u09ee\u09ef\u0001\u0000\u0000"+
		"\u0000\u09ef\u0a0a\u0001\u0000\u0000\u0000\u09f0\u09f2\u0003\u0164\u00b2"+
		"\u0000\u09f1\u09f3\u0003\u01e2\u00f1\u0000\u09f2\u09f1\u0001\u0000\u0000"+
		"\u0000\u09f2\u09f3\u0001\u0000\u0000\u0000\u09f3\u0a0a\u0001\u0000\u0000"+
		"\u0000\u09f4\u09f5\u0005\u0114\u0000\u0000\u09f5\u09f7\u0003\u0164\u00b2"+
		"\u0000\u09f6\u09f8\u0003\u01e2\u00f1\u0000\u09f7\u09f6\u0001\u0000\u0000"+
		"\u0000\u09f7\u09f8\u0001\u0000\u0000\u0000\u09f8\u0a0a\u0001\u0000\u0000"+
		"\u0000\u09f9\u09fb\u0003L&\u0000\u09fa\u09fc\u0003\u01e2\u00f1\u0000\u09fb"+
		"\u09fa\u0001\u0000\u0000\u0000\u09fb\u09fc\u0001\u0000\u0000\u0000\u09fc"+
		"\u0a0a\u0001\u0000\u0000\u0000\u09fd\u09fe\u0005\u0114\u0000\u0000\u09fe"+
		"\u0a00\u0003L&\u0000\u09ff\u0a01\u0003\u01e2\u00f1\u0000\u0a00\u09ff\u0001"+
		"\u0000\u0000\u0000\u0a00\u0a01\u0001\u0000\u0000\u0000\u0a01\u0a0a\u0001"+
		"\u0000\u0000\u0000\u0a02\u0a03\u0005\u001e\u0000\u0000\u0a03\u0a04\u0003"+
		"\u00b2Y\u0000\u0a04\u0a05\u0003\u00b4Z\u0000\u0a05\u0a07\u0005\u001f\u0000"+
		"\u0000\u0a06\u0a08\u0003\u01e2\u00f1\u0000\u0a07\u0a06\u0001\u0000\u0000"+
		"\u0000\u0a07\u0a08\u0001\u0000\u0000\u0000\u0a08\u0a0a\u0001\u0000\u0000"+
		"\u0000\u0a09\u09dc\u0001\u0000\u0000\u0000\u0a09\u09e1\u0001\u0000\u0000"+
		"\u0000\u0a09\u09e7\u0001\u0000\u0000\u0000\u0a09\u09eb\u0001\u0000\u0000"+
		"\u0000\u0a09\u09f0\u0001\u0000\u0000\u0000\u0a09\u09f4\u0001\u0000\u0000"+
		"\u0000\u0a09\u09f9\u0001\u0000\u0000\u0000\u0a09\u09fd\u0001\u0000\u0000"+
		"\u0000\u0a09\u0a02\u0001\u0000\u0000\u0000\u0a0a\u0a0f\u0001\u0000\u0000"+
		"\u0000\u0a0b\u0a0c\n\u0002\u0000\u0000\u0a0c\u0a0e\u0003\u00b4Z\u0000"+
		"\u0a0d\u0a0b\u0001\u0000\u0000\u0000\u0a0e\u0a11\u0001\u0000\u0000\u0000"+
		"\u0a0f\u0a0d\u0001\u0000\u0000\u0000\u0a0f\u0a10\u0001\u0000\u0000\u0000"+
		"\u0a10\u00b3\u0001\u0000\u0000\u0000\u0a11\u0a0f\u0001\u0000\u0000\u0000"+
		"\u0a12\u0a13\u0003\u00b6[\u0000\u0a13\u0a14\u0003\u00b2Y\u0000\u0a14\u0a21"+
		"\u0001\u0000\u0000\u0000\u0a15\u0a16\u0003\u00b8\\\u0000\u0a16\u0a17\u0003"+
		"\u00b2Y\u0000\u0a17\u0a18\u0003\u00c0`\u0000\u0a18\u0a21\u0001\u0000\u0000"+
		"\u0000\u0a19\u0a1a\u0003\u00ba]\u0000\u0a1a\u0a1b\u0003\u00b2Y\u0000\u0a1b"+
		"\u0a1c\u0003\u00c0`\u0000\u0a1c\u0a21\u0001\u0000\u0000\u0000\u0a1d\u0a1e"+
		"\u0003\u00bc^\u0000\u0a1e\u0a1f\u0003\u00b2Y\u0000\u0a1f\u0a21\u0001\u0000"+
		"\u0000\u0000\u0a20\u0a12\u0001\u0000\u0000\u0000\u0a20\u0a15\u0001\u0000"+
		"\u0000\u0000\u0a20\u0a19\u0001\u0000\u0000\u0000\u0a20\u0a1d\u0001\u0000"+
		"\u0000\u0000\u0a21\u00b5\u0001\u0000\u0000\u0000\u0a22\u0a23\u0005\u01e1"+
		"\u0000\u0000\u0a23\u0a24\u0005\u01db\u0000\u0000\u0a24\u00b7\u0001\u0000"+
		"\u0000\u0000\u0a25\u0a27\u0005\u01dd\u0000\u0000\u0a26\u0a25\u0001\u0000"+
		"\u0000\u0000\u0a26\u0a27\u0001\u0000\u0000\u0000\u0a27\u0a28\u0001\u0000"+
		"\u0000\u0000\u0a28\u0a29\u0005\u01db\u0000\u0000\u0a29\u00b9\u0001\u0000"+
		"\u0000\u0000\u0a2a\u0a2c\u0007\u0006\u0000\u0000\u0a2b\u0a2d\u0005\u01de"+
		"\u0000\u0000\u0a2c\u0a2b\u0001\u0000\u0000\u0000\u0a2c\u0a2d\u0001\u0000"+
		"\u0000\u0000\u0a2d\u0a2e\u0001\u0000\u0000\u0000\u0a2e\u0a2f\u0005\u01db"+
		"\u0000\u0000\u0a2f\u00bb\u0001\u0000\u0000\u0000\u0a30\u0a32\u0005\u01da"+
		"\u0000\u0000\u0a31\u0a33\u0005\u01dd\u0000\u0000\u0a32\u0a31\u0001\u0000"+
		"\u0000\u0000\u0a32\u0a33\u0001\u0000\u0000\u0000\u0a33\u0a34\u0001\u0000"+
		"\u0000\u0000\u0a34\u0a3c\u0005\u01db\u0000\u0000\u0a35\u0a36\u0005\u01da"+
		"\u0000\u0000\u0a36\u0a38\u0007\u0006\u0000\u0000\u0a37\u0a39\u0005\u01de"+
		"\u0000\u0000\u0a38\u0a37\u0001\u0000\u0000\u0000\u0a38\u0a39\u0001\u0000"+
		"\u0000\u0000\u0a39\u0a3a\u0001\u0000\u0000\u0000\u0a3a\u0a3c\u0005\u01db"+
		"\u0000\u0000\u0a3b\u0a30\u0001\u0000\u0000\u0000\u0a3b\u0a35\u0001\u0000"+
		"\u0000\u0000\u0a3c\u00bd\u0001\u0000\u0000\u0000\u0a3d\u0a3e\u0005\u01de"+
		"\u0000\u0000\u0a3e\u00bf\u0001\u0000\u0000\u0000\u0a3f\u0a40\u0005\u01e2"+
		"\u0000\u0000\u0a40\u0a41\u0005\u001e\u0000\u0000\u0a41\u0a42\u0003\u01e4"+
		"\u00f2\u0000\u0a42\u0a43\u0005\u001f\u0000\u0000\u0a43\u0a47\u0001\u0000"+
		"\u0000\u0000\u0a44\u0a45\u0005\u01e5\u0000\u0000\u0a45\u0a47\u0003\u010c"+
		"\u0086\u0000\u0a46\u0a3f\u0001\u0000\u0000\u0000\u0a46\u0a44\u0001\u0000"+
		"\u0000\u0000\u0a47\u00c1\u0001\u0000\u0000\u0000\u0a48\u0a54\u0003\u015a"+
		"\u00ad\u0000\u0a49\u0a4a\u0003\u015a\u00ad\u0000\u0a4a\u0a4b\u0005\u000f"+
		"\u0000\u0000\u0a4b\u0a54\u0001\u0000\u0000\u0000\u0a4c\u0a4d\u0005\u0096"+
		"\u0000\u0000\u0a4d\u0a54\u0003\u015a\u00ad\u0000\u0a4e\u0a4f\u0005\u0096"+
		"\u0000\u0000\u0a4f\u0a50\u0005\u001e\u0000\u0000\u0a50\u0a51\u0003\u015a"+
		"\u00ad\u0000\u0a51\u0a52\u0005\u001f\u0000\u0000\u0a52\u0a54\u0001\u0000"+
		"\u0000\u0000\u0a53\u0a48\u0001\u0000\u0000\u0000\u0a53\u0a49\u0001\u0000"+
		"\u0000\u0000\u0a53\u0a4c\u0001\u0000\u0000\u0000\u0a53\u0a4e\u0001\u0000"+
		"\u0000\u0000\u0a54\u00c3\u0001\u0000\u0000\u0000\u0a55\u0a56\u0005\u01e3"+
		"\u0000\u0000\u0a56\u0a57\u0003\u010c\u0086\u0000\u0a57\u00c5\u0001\u0000"+
		"\u0000\u0000\u0a58\u0a5e\u0003\u00c4b\u0000\u0a59\u0a5a\u0005\u01e3\u0000"+
		"\u0000\u0a5a\u0a5b\u0005\u0218\u0000\u0000\u0a5b\u0a5c\u0005\u00b8\u0000"+
		"\u0000\u0a5c\u0a5e\u0003\u010a\u0085\u0000\u0a5d\u0a58\u0001\u0000\u0000"+
		"\u0000\u0a5d\u0a59\u0001\u0000\u0000\u0000\u0a5e\u00c7\u0001\u0000\u0000"+
		"\u0000\u0a5f\u0a60\u0005\u01fc\u0000\u0000\u0a60\u0a61\u0003\u010c\u0086"+
		"\u0000\u0a61\u00c9\u0001\u0000\u0000\u0000\u0a62\u0a63\u0005\u021e\u0000"+
		"\u0000\u0a63\u0a64\u0003\u00ccf\u0000\u0a64\u00cb\u0001\u0000\u0000\u0000"+
		"\u0a65\u0a67\u0003\u00ceg\u0000\u0a66\u0a65\u0001\u0000\u0000\u0000\u0a67"+
		"\u0a68\u0001\u0000\u0000\u0000\u0a68\u0a66\u0001\u0000\u0000\u0000\u0a68"+
		"\u0a69\u0001\u0000\u0000\u0000\u0a69\u00cd\u0001\u0000\u0000\u0000\u0a6a"+
		"\u0a6e\u0005\u024f\u0000\u0000\u0a6b\u0a6c\u0005\u008a\u0000\u0000\u0a6c"+
		"\u0a6e\u0003\u0278\u013c\u0000\u0a6d\u0a6a\u0001\u0000\u0000\u0000\u0a6d"+
		"\u0a6b\u0001\u0000\u0000\u0000\u0a6e\u00cf\u0001\u0000\u0000\u0000\u0a6f"+
		"\u0a73\u0003\u00d2i\u0000\u0a70\u0a73\u0003\u00d8l\u0000\u0a71\u0a73\u0003"+
		"\u00dam\u0000\u0a72\u0a6f\u0001\u0000\u0000\u0000\u0a72\u0a70\u0001\u0000"+
		"\u0000\u0000\u0a72\u0a71\u0001\u0000\u0000\u0000\u0a73\u00d1\u0001\u0000"+
		"\u0000\u0000\u0a74\u0a7d\u0005\u0129\u0000\u0000\u0a75\u0a77\u0003\u015a"+
		"\u00ad\u0000\u0a76\u0a78\u0003\u00f8|\u0000\u0a77\u0a76\u0001\u0000\u0000"+
		"\u0000\u0a77\u0a78\u0001\u0000\u0000\u0000\u0a78\u0a7e\u0001\u0000\u0000"+
		"\u0000\u0a79\u0a7a\u0005\u001e\u0000\u0000\u0a7a\u0a7b\u0003b1\u0000\u0a7b"+
		"\u0a7c\u0005\u001f\u0000\u0000\u0a7c\u0a7e\u0001\u0000\u0000\u0000\u0a7d"+
		"\u0a75\u0001\u0000\u0000\u0000\u0a7d\u0a79\u0001\u0000\u0000\u0000\u0a7e"+
		"\u0a7f\u0001\u0000\u0000\u0000\u0a7f\u0a85\u0007\u0007\u0000\u0000\u0a80"+
		"\u0a86\u0003\u027a\u013d\u0000\u0a81\u0a82\u0005\u0161\u0000\u0000\u0a82"+
		"\u0a86\u0005\u024f\u0000\u0000\u0a83\u0a86\u0005\u0183\u0000\u0000\u0a84"+
		"\u0a86\u0005\u0184\u0000\u0000\u0a85\u0a80\u0001\u0000\u0000\u0000\u0a85"+
		"\u0a81\u0001\u0000\u0000\u0000\u0a85\u0a83\u0001\u0000\u0000\u0000\u0a85"+
		"\u0a84\u0001\u0000\u0000\u0000\u0a86\u0a8e\u0001\u0000\u0000\u0000\u0a87"+
		"\u0a89\u0005\u01d1\u0000\u0000\u0a88\u0a87\u0001\u0000\u0000\u0000\u0a88"+
		"\u0a89\u0001\u0000\u0000\u0000\u0a89\u0a8a\u0001\u0000\u0000\u0000\u0a8a"+
		"\u0a8b\u0005\u001e\u0000\u0000\u0a8b\u0a8c\u0003\u00d4j\u0000\u0a8c\u0a8d"+
		"\u0005\u001f\u0000\u0000\u0a8d\u0a8f\u0001\u0000\u0000\u0000\u0a8e\u0a88"+
		"\u0001\u0000\u0000\u0000\u0a8e\u0a8f\u0001\u0000\u0000\u0000\u0a8f\u0a91"+
		"\u0001\u0000\u0000\u0000\u0a90\u0a92\u0003\u00c4b\u0000\u0a91\u0a90\u0001"+
		"\u0000\u0000\u0000\u0a91\u0a92\u0001\u0000\u0000\u0000\u0a92\u00d3\u0001"+
		"\u0000\u0000\u0000\u0a93\u0a98\u0003\u00d6k\u0000\u0a94\u0a95\u0005$\u0000"+
		"\u0000\u0a95\u0a97\u0003\u00d6k\u0000\u0a96\u0a94\u0001\u0000\u0000\u0000"+
		"\u0a97\u0a9a\u0001\u0000\u0000\u0000\u0a98\u0a96\u0001\u0000\u0000\u0000"+
		"\u0a98\u0a99\u0001\u0000\u0000\u0000\u0a99\u00d5\u0001\u0000\u0000\u0000"+
		"\u0a9a\u0a98\u0001\u0000\u0000\u0000\u0a9b\u0a9c\u0005\u019f\u0000\u0000"+
		"\u0a9c\u0ab9\u0003\u00e4r\u0000\u0a9d\u0a9f\u0005\u0199\u0000\u0000\u0a9e"+
		"\u0aa0\u0003\u02a2\u0151\u0000\u0a9f\u0a9e\u0001\u0000\u0000\u0000\u0a9f"+
		"\u0aa0\u0001\u0000\u0000\u0000\u0aa0\u0ab9\u0001\u0000\u0000\u0000\u0aa1"+
		"\u0aa2\u0005\u0142\u0000\u0000\u0aa2\u0ab9\u0005\u024f\u0000\u0000\u0aa3"+
		"\u0aa4\u0005\u01ef\u0000\u0000\u0aa4\u0ab9\u0005\u024f\u0000\u0000\u0aa5"+
		"\u0aa7\u0005\u0151\u0000\u0000\u0aa6\u0aa8\u0003\u02a2\u0151\u0000\u0aa7"+
		"\u0aa6\u0001\u0000\u0000\u0000\u0aa7\u0aa8\u0001\u0000\u0000\u0000\u0aa8"+
		"\u0ab9\u0001\u0000\u0000\u0000\u0aa9\u0aaa\u0005\u0168\u0000\u0000\u0aaa"+
		"\u0ab9\u0005\u024f\u0000\u0000\u0aab\u0aac\u0005K\u0000\u0000\u0aac\u0ab9"+
		"\u0005\u024f\u0000\u0000\u0aad\u0ab0\u0005\u01a0\u0000\u0000\u0aae\u0ab1"+
		"\u0003\u00f8|\u0000\u0aaf\u0ab1\u0005\u000f\u0000\u0000\u0ab0\u0aae\u0001"+
		"\u0000\u0000\u0000\u0ab0\u0aaf\u0001\u0000\u0000\u0000\u0ab1\u0ab9\u0001"+
		"\u0000\u0000\u0000\u0ab2\u0ab3\u0005\u01a1\u0000\u0000\u0ab3\u0ab9\u0003"+
		"\u00f8|\u0000\u0ab4\u0ab5\u0005\u01a2\u0000\u0000\u0ab5\u0ab9\u0003\u00f8"+
		"|\u0000\u0ab6\u0ab7\u0005\u0140\u0000\u0000\u0ab7\u0ab9\u0005\u024f\u0000"+
		"\u0000\u0ab8\u0a9b\u0001\u0000\u0000\u0000\u0ab8\u0a9d\u0001\u0000\u0000"+
		"\u0000\u0ab8\u0aa1\u0001\u0000\u0000\u0000\u0ab8\u0aa3\u0001\u0000\u0000"+
		"\u0000\u0ab8\u0aa5\u0001\u0000\u0000\u0000\u0ab8\u0aa9\u0001\u0000\u0000"+
		"\u0000\u0ab8\u0aab\u0001\u0000\u0000\u0000\u0ab8\u0aad\u0001\u0000\u0000"+
		"\u0000\u0ab8\u0ab2\u0001\u0000\u0000\u0000\u0ab8\u0ab4\u0001\u0000\u0000"+
		"\u0000\u0ab8\u0ab6\u0001\u0000\u0000\u0000\u0ab9\u00d7\u0001\u0000\u0000"+
		"\u0000\u0aba\u0ac3\u0005\u0129\u0000\u0000\u0abb\u0abd\u0003\u015a\u00ad"+
		"\u0000\u0abc\u0abe\u0003\u00f8|\u0000\u0abd\u0abc\u0001\u0000\u0000\u0000"+
		"\u0abd\u0abe\u0001\u0000\u0000\u0000\u0abe\u0ac4\u0001\u0000\u0000\u0000"+
		"\u0abf\u0ac0\u0005\u001e\u0000\u0000\u0ac0\u0ac1\u0003b1\u0000\u0ac1\u0ac2"+
		"\u0005\u001f\u0000\u0000\u0ac2\u0ac4\u0001\u0000\u0000\u0000\u0ac3\u0abb"+
		"\u0001\u0000\u0000\u0000\u0ac3\u0abf\u0001\u0000\u0000\u0000\u0ac4\u0ac5"+
		"\u0001\u0000\u0000\u0000\u0ac5\u0ac9\u0007\u0007\u0000\u0000\u0ac6\u0aca"+
		"\u0003\u027a\u013d\u0000\u0ac7\u0aca\u0005\u0183\u0000\u0000\u0ac8\u0aca"+
		"\u0005\u0184\u0000\u0000\u0ac9\u0ac6\u0001\u0000\u0000\u0000\u0ac9\u0ac7"+
		"\u0001\u0000\u0000\u0000\u0ac9\u0ac8\u0001\u0000\u0000\u0000\u0aca\u0b0f"+
		"\u0001\u0000\u0000\u0000\u0acb\u0acd\u0005\u01d1\u0000\u0000\u0acc\u0acb"+
		"\u0001\u0000\u0000\u0000\u0acc\u0acd\u0001\u0000\u0000\u0000\u0acd\u0acf"+
		"\u0001\u0000\u0000\u0000\u0ace\u0ad0\u0005J\u0000\u0000\u0acf\u0ace\u0001"+
		"\u0000\u0000\u0000\u0acf\u0ad0\u0001\u0000\u0000\u0000\u0ad0\u0ad6\u0001"+
		"\u0000\u0000\u0000\u0ad1\u0ad3\u0005\u0142\u0000\u0000\u0ad2\u0ad4\u0005"+
		"\u01e4\u0000\u0000\u0ad3\u0ad2\u0001\u0000\u0000\u0000\u0ad3\u0ad4\u0001"+
		"\u0000\u0000\u0000\u0ad4\u0ad5\u0001\u0000\u0000\u0000\u0ad5\u0ad7\u0005"+
		"\u024f\u0000\u0000\u0ad6\u0ad1\u0001\u0000\u0000\u0000\u0ad6\u0ad7\u0001"+
		"\u0000\u0000\u0000\u0ad7\u0add\u0001\u0000\u0000\u0000\u0ad8\u0ada\u0005"+
		"\u01ef\u0000\u0000\u0ad9\u0adb\u0005\u01e4\u0000\u0000\u0ada\u0ad9\u0001"+
		"\u0000\u0000\u0000\u0ada\u0adb\u0001\u0000\u0000\u0000\u0adb\u0adc\u0001"+
		"\u0000\u0000\u0000\u0adc\u0ade\u0005\u024f\u0000\u0000\u0add\u0ad8\u0001"+
		"\u0000\u0000\u0000\u0add\u0ade\u0001\u0000\u0000\u0000\u0ade\u0b0d\u0001"+
		"\u0000\u0000\u0000\u0adf\u0ae1\u0005\u012b\u0000\u0000\u0ae0\u0ae2\u0005"+
		"\u0151\u0000\u0000\u0ae1\u0ae0\u0001\u0000\u0000\u0000\u0ae1\u0ae2\u0001"+
		"\u0000\u0000\u0000\u0ae2\u0ae8\u0001\u0000\u0000\u0000\u0ae3\u0ae5\u0005"+
		"\u0168\u0000\u0000\u0ae4\u0ae6\u0005\u01e4\u0000\u0000\u0ae5\u0ae4\u0001"+
		"\u0000\u0000\u0000\u0ae5\u0ae6\u0001\u0000\u0000\u0000\u0ae6\u0ae7\u0001"+
		"\u0000\u0000\u0000\u0ae7\u0ae9\u0005\u024f\u0000\u0000\u0ae8\u0ae3\u0001"+
		"\u0000\u0000\u0000\u0ae8\u0ae9\u0001\u0000\u0000\u0000\u0ae9\u0aef\u0001"+
		"\u0000\u0000\u0000\u0aea\u0aec\u0005K\u0000\u0000\u0aeb\u0aed\u0005\u01e4"+
		"\u0000\u0000\u0aec\u0aeb\u0001\u0000\u0000\u0000\u0aec\u0aed\u0001\u0000"+
		"\u0000\u0000\u0aed\u0aee\u0001\u0000\u0000\u0000\u0aee\u0af0\u0005\u024f"+
		"\u0000\u0000\u0aef\u0aea\u0001\u0000\u0000\u0000\u0aef\u0af0\u0001\u0000"+
		"\u0000\u0000\u0af0\u0afc\u0001\u0000\u0000\u0000\u0af1\u0af2\u0005\u007f"+
		"\u0000\u0000\u0af2\u0af3\u0005\u01ee\u0000\u0000\u0af3\u0af4\u0005\u01ef"+
		"\u0000\u0000\u0af4\u0af9\u0003\u00f0x\u0000\u0af5\u0af6\u0005$\u0000\u0000"+
		"\u0af6\u0af8\u0003\u00f0x\u0000\u0af7\u0af5\u0001\u0000\u0000\u0000\u0af8"+
		"\u0afb\u0001\u0000\u0000\u0000\u0af9\u0af7\u0001\u0000\u0000\u0000\u0af9"+
		"\u0afa\u0001\u0000\u0000\u0000\u0afa\u0afd\u0001\u0000\u0000\u0000\u0afb"+
		"\u0af9\u0001\u0000\u0000\u0000\u0afc\u0af1\u0001\u0000\u0000\u0000\u0afc"+
		"\u0afd\u0001\u0000\u0000\u0000\u0afd\u0b0b\u0001\u0000\u0000\u0000\u0afe"+
		"\u0aff\u0005\u007f\u0000\u0000\u0aff\u0b09\u0005\u0168\u0000\u0000\u0b00"+
		"\u0b05\u0003\u00f0x\u0000\u0b01\u0b02\u0005$\u0000\u0000\u0b02\u0b04\u0003"+
		"\u00f0x\u0000\u0b03\u0b01\u0001\u0000\u0000\u0000\u0b04\u0b07\u0001\u0000"+
		"\u0000\u0000\u0b05\u0b03\u0001\u0000\u0000\u0000\u0b05\u0b06\u0001\u0000"+
		"\u0000\u0000\u0b06\u0b0a\u0001\u0000\u0000\u0000\u0b07\u0b05\u0001\u0000"+
		"\u0000\u0000\u0b08\u0b0a\u0005\u000f\u0000\u0000\u0b09\u0b00\u0001\u0000"+
		"\u0000\u0000\u0b09\u0b08\u0001\u0000\u0000\u0000\u0b0a\u0b0c\u0001\u0000"+
		"\u0000\u0000\u0b0b\u0afe\u0001\u0000\u0000\u0000\u0b0b\u0b0c\u0001\u0000"+
		"\u0000\u0000\u0b0c\u0b0e\u0001\u0000\u0000\u0000\u0b0d\u0adf\u0001\u0000"+
		"\u0000\u0000\u0b0d\u0b0e\u0001\u0000\u0000\u0000\u0b0e\u0b10\u0001\u0000"+
		"\u0000\u0000\u0b0f\u0acc\u0001\u0000\u0000\u0000\u0b0f\u0b10\u0001\u0000"+
		"\u0000\u0000\u0b10\u00d9\u0001\u0000\u0000\u0000\u0b11\u0b13\u0005\u0129"+
		"\u0000\u0000\u0b12\u0b14\u0005J\u0000\u0000\u0b13\u0b12\u0001\u0000\u0000"+
		"\u0000\u0b13\u0b14\u0001\u0000\u0000\u0000\u0b14\u0b15\u0001\u0000\u0000"+
		"\u0000\u0b15\u0b16\u0003\u015a\u00ad\u0000\u0b16\u0b1a\u0007\u0007\u0000"+
		"\u0000\u0b17\u0b1b\u0003\u027a\u013d\u0000\u0b18\u0b1b\u0005\u0183\u0000"+
		"\u0000\u0b19\u0b1b\u0005\u0184\u0000\u0000\u0b1a\u0b17\u0001\u0000\u0000"+
		"\u0000\u0b1a\u0b18\u0001\u0000\u0000\u0000\u0b1a\u0b19\u0001\u0000\u0000"+
		"\u0000\u0b1b\u0b21\u0001\u0000\u0000\u0000\u0b1c\u0b1e\u0005\u01e2\u0000"+
		"\u0000\u0b1d\u0b1c\u0001\u0000\u0000\u0000\u0b1d\u0b1e\u0001\u0000\u0000"+
		"\u0000\u0b1e\u0b1f\u0001\u0000\u0000\u0000\u0b1f\u0b20\u0005\u014f\u0000"+
		"\u0000\u0b20\u0b22\u0005\u024f\u0000\u0000\u0b21\u0b1d\u0001\u0000\u0000"+
		"\u0000\u0b21\u0b22\u0001\u0000\u0000\u0000\u0b22\u0b27\u0001\u0000\u0000"+
		"\u0000\u0b23\u0b24\u0005\u01d1\u0000\u0000\u0b24\u0b25\u0005\u01ef\u0000"+
		"\u0000\u0b25\u0b26\u0005\u01e4\u0000\u0000\u0b26\u0b28\u0005\u024f\u0000"+
		"\u0000\u0b27\u0b23\u0001\u0000\u0000\u0000\u0b27\u0b28\u0001\u0000\u0000"+
		"\u0000\u0b28\u00db\u0001\u0000\u0000\u0000\u0b29\u0b2b\u0005(\u0000\u0000"+
		"\u0b2a\u0b2c\u0003\u00e2q\u0000\u0b2b\u0b2a\u0001\u0000\u0000\u0000\u0b2b"+
		"\u0b2c\u0001\u0000\u0000\u0000\u0b2c\u0b30\u0001\u0000\u0000\u0000\u0b2d"+
		"\u0b2e\u0005)\u0000\u0000\u0b2e\u0b30\u0005\u0250\u0000\u0000\u0b2f\u0b29"+
		"\u0001\u0000\u0000\u0000\u0b2f\u0b2d\u0001\u0000\u0000\u0000\u0b30\u00dd"+
		"\u0001\u0000\u0000\u0000\u0b31\u0b32\u0007\b\u0000\u0000\u0b32\u00df\u0001"+
		"\u0000\u0000\u0000\u0b33\u0b35\u0005\u000e\u0000\u0000\u0b34\u0b33\u0001"+
		"\u0000\u0000\u0000\u0b34\u0b35\u0001\u0000\u0000\u0000\u0b35\u0b36\u0001"+
		"\u0000\u0000\u0000\u0b36\u0b38\u0005\u0250\u0000\u0000\u0b37\u0b39\u0003"+
		"\u00e2q\u0000\u0b38\u0b37\u0001\u0000\u0000\u0000\u0b38\u0b39\u0001\u0000"+
		"\u0000\u0000\u0b39\u00e1\u0001\u0000\u0000\u0000\u0b3a\u0b3b\u0005.\u0000"+
		"\u0000\u0b3b\u0b3c\u0005\u024e\u0000\u0000\u0b3c\u00e3\u0001\u0000\u0000"+
		"\u0000\u0b3d\u0b3f\u00051\u0000\u0000\u0b3e\u0b3d\u0001\u0000\u0000\u0000"+
		"\u0b3e\u0b3f\u0001\u0000\u0000\u0000\u0b3f\u0b40\u0001\u0000\u0000\u0000"+
		"\u0b40\u0b42\u0005\u024e\u0000\u0000\u0b41\u0b43\u0003\u00e6s\u0000\u0b42"+
		"\u0b41\u0001\u0000\u0000\u0000\u0b42\u0b43\u0001\u0000\u0000\u0000\u0b43"+
		"\u0b46\u0001\u0000\u0000\u0000\u0b44\u0b46\u0003\u00e8t\u0000\u0b45\u0b3e"+
		"\u0001\u0000\u0000\u0000\u0b45\u0b44\u0001\u0000\u0000\u0000\u0b46\u00e5"+
		"\u0001\u0000\u0000\u0000\u0b47\u0b48\u0005\u00b9\u0000\u0000\u0b48\u0b49"+
		"\u0005\u024f\u0000\u0000\u0b49\u00e7\u0001\u0000\u0000\u0000\u0b4a\u0b4b"+
		"\u0007\t\u0000\u0000\u0b4b\u00e9\u0001\u0000\u0000\u0000\u0b4c\u0b4d\u0007"+
		"\n\u0000\u0000\u0b4d\u00eb\u0001\u0000\u0000\u0000\u0b4e\u0b4f\u0003\u00f2"+
		"y\u0000\u0b4f\u0b50\u0005\u0012\u0000\u0000\u0b50\u0b52\u0001\u0000\u0000"+
		"\u0000\u0b51\u0b4e\u0001\u0000\u0000\u0000\u0b51\u0b52\u0001\u0000\u0000"+
		"\u0000\u0b52\u0b53\u0001\u0000\u0000\u0000\u0b53\u0b54\u0003\u00e4r\u0000"+
		"\u0b54\u00ed\u0001\u0000\u0000\u0000\u0b55\u0b56\u0003\u00f2y\u0000\u0b56"+
		"\u0b57\u0005\u0012\u0000\u0000\u0b57\u0b59\u0001\u0000\u0000\u0000\u0b58"+
		"\u0b55\u0001\u0000\u0000\u0000\u0b58\u0b59\u0001\u0000\u0000\u0000\u0b59"+
		"\u0b5a\u0001\u0000\u0000\u0000\u0b5a\u0b5b\u0003\u00f4z\u0000\u0b5b\u00ef"+
		"\u0001\u0000\u0000\u0000\u0b5c\u0b5d\u0003\u00f2y\u0000\u0b5d\u0b5e\u0005"+
		"\u0012\u0000\u0000\u0b5e\u0b60\u0001\u0000\u0000\u0000\u0b5f\u0b5c\u0001"+
		"\u0000\u0000\u0000\u0b5f\u0b60\u0001\u0000\u0000\u0000\u0b60\u0b61\u0001"+
		"\u0000\u0000\u0000\u0b61\u0b62\u0003\u00f4z\u0000\u0b62\u00f1\u0001\u0000"+
		"\u0000\u0000\u0b63\u0b64\u0003\u00e4r\u0000\u0b64\u00f3\u0001\u0000\u0000"+
		"\u0000\u0b65\u0b66\u0003\u00e4r\u0000\u0b66\u00f5\u0001\u0000\u0000\u0000"+
		"\u0b67\u0b69\u0005\u001e\u0000\u0000\u0b68\u0b67\u0001\u0000\u0000\u0000"+
		"\u0b68\u0b69\u0001\u0000\u0000\u0000\u0b69\u0b6a\u0001\u0000\u0000\u0000"+
		"\u0b6a\u0b6f\u0003\u00eew\u0000\u0b6b\u0b6c\u0005$\u0000\u0000\u0b6c\u0b6e"+
		"\u0003\u00eew\u0000\u0b6d\u0b6b\u0001\u0000\u0000\u0000\u0b6e\u0b71\u0001"+
		"\u0000\u0000\u0000\u0b6f\u0b6d\u0001\u0000\u0000\u0000\u0b6f\u0b70\u0001"+
		"\u0000\u0000\u0000\u0b70\u0b73\u0001\u0000\u0000\u0000\u0b71\u0b6f\u0001"+
		"\u0000\u0000\u0000\u0b72\u0b74\u0005\u001f\u0000\u0000\u0b73\u0b72\u0001"+
		"\u0000\u0000\u0000\u0b73\u0b74\u0001\u0000\u0000\u0000\u0b74\u00f7\u0001"+
		"\u0000\u0000\u0000\u0b75\u0b76\u0005\u001e\u0000\u0000\u0b76\u0b7b\u0003"+
		"\u00f0x\u0000\u0b77\u0b78\u0005$\u0000\u0000\u0b78\u0b7a\u0003\u00f0x"+
		"\u0000\u0b79\u0b77\u0001\u0000\u0000\u0000\u0b7a\u0b7d\u0001\u0000\u0000"+
		"\u0000\u0b7b\u0b79\u0001\u0000\u0000\u0000\u0b7b\u0b7c\u0001\u0000\u0000"+
		"\u0000\u0b7c\u0b7e\u0001\u0000\u0000\u0000\u0b7d\u0b7b\u0001\u0000\u0000"+
		"\u0000\u0b7e\u0b7f\u0005\u001f\u0000\u0000\u0b7f\u00f9\u0001\u0000\u0000"+
		"\u0000\u0b80\u0b83\u0005\u024f\u0000\u0000\u0b81\u0b83\u0003\u00e4r\u0000"+
		"\u0b82\u0b80\u0001\u0000\u0000\u0000\u0b82\u0b81\u0001\u0000\u0000\u0000"+
		"\u0b83\u00fb\u0001\u0000\u0000\u0000\u0b84\u0b85\u0003\u00e4r\u0000\u0b85"+
		"\u00fd\u0001\u0000\u0000\u0000\u0b86\u0b87\u0003\u00e4r\u0000\u0b87\u00ff"+
		"\u0001\u0000\u0000\u0000\u0b88\u0b8a\u0005\u01c5\u0000\u0000\u0b89\u0b88"+
		"\u0001\u0000\u0000\u0000\u0b89\u0b8a\u0001\u0000\u0000\u0000\u0b8a\u0b8b"+
		"\u0001\u0000\u0000\u0000\u0b8b\u0b8c\u0005\u01c8\u0000\u0000\u0b8c\u0101"+
		"\u0001\u0000\u0000\u0000\u0b8d\u0b8e\u0007\u000b\u0000\u0000\u0b8e\u0103"+
		"\u0001\u0000\u0000\u0000\u0b8f\u0b90\u0007\f\u0000\u0000\u0b90\u0105\u0001"+
		"\u0000\u0000\u0000\u0b91\u0b92\u0007\r\u0000\u0000\u0b92\u0107\u0001\u0000"+
		"\u0000\u0000\u0b93\u0bab\u0005\u01f6\u0000\u0000\u0b94\u0bab\u0005,\u0000"+
		"\u0000\u0b95\u0b96\u0005\u01ee\u0000\u0000\u0b96\u0bab\u0005\u01f6\u0000"+
		"\u0000\u0b97\u0bab\u0005-\u0000\u0000\u0b98\u0bab\u0005\u0101\u0000\u0000"+
		"\u0b99\u0bab\u0005/\u0000\u0000\u0b9a\u0b9b\u0005\u01ee\u0000\u0000\u0b9b"+
		"\u0bab\u0005\u0101\u0000\u0000\u0b9c\u0bab\u00050\u0000\u0000\u0b9d\u0b9e"+
		"\u0005\u0102\u0000\u0000\u0b9e\u0bab\u0005\u01ea\u0000\u0000\u0b9f\u0ba0"+
		"\u0005\u01ee\u0000\u0000\u0ba0\u0ba1\u0005\u0102\u0000\u0000\u0ba1\u0bab"+
		"\u0005\u01ea\u0000\u0000\u0ba2\u0bab\u0005\u0005\u0000\u0000\u0ba3\u0ba4"+
		"\u0005\u0004\u0000\u0000\u0ba4\u0bab\u0005\u0005\u0000\u0000\u0ba5\u0ba6"+
		"\u0005\u0005\u0000\u0000\u0ba6\u0bab\u0005\u000f\u0000\u0000\u0ba7\u0ba8"+
		"\u0005\u0004\u0000\u0000\u0ba8\u0ba9\u0005\u0005\u0000\u0000\u0ba9\u0bab"+
		"\u0005\u000f\u0000\u0000\u0baa\u0b93\u0001\u0000\u0000\u0000\u0baa\u0b94"+
		"\u0001\u0000\u0000\u0000\u0baa\u0b95\u0001\u0000\u0000\u0000\u0baa\u0b97"+
		"\u0001\u0000\u0000\u0000\u0baa\u0b98\u0001\u0000\u0000\u0000\u0baa\u0b99"+
		"\u0001\u0000\u0000\u0000\u0baa\u0b9a\u0001\u0000\u0000\u0000\u0baa\u0b9c"+
		"\u0001\u0000\u0000\u0000\u0baa\u0b9d\u0001\u0000\u0000\u0000\u0baa\u0b9f"+
		"\u0001\u0000\u0000\u0000\u0baa\u0ba2\u0001\u0000\u0000\u0000\u0baa\u0ba3"+
		"\u0001\u0000\u0000\u0000\u0baa\u0ba5\u0001\u0000\u0000\u0000\u0baa\u0ba7"+
		"\u0001\u0000\u0000\u0000\u0bab\u0109\u0001\u0000\u0000\u0000\u0bac\u0baf"+
		"\u0003\u00f4z\u0000\u0bad\u0baf\u0003\u02a4\u0152\u0000\u0bae\u0bac\u0001"+
		"\u0000\u0000\u0000\u0bae\u0bad\u0001\u0000\u0000\u0000\u0baf\u010b\u0001"+
		"\u0000\u0000\u0000\u0bb0\u0bb1\u0006\u0086\uffff\uffff\u0000\u0bb1\u0bc3"+
		"\u0003\u0110\u0088\u0000\u0bb2\u0bb3\u0005\r\u0000\u0000\u0bb3\u0bc3\u0003"+
		"\u010c\u00862\u0bb4\u0bb5\u0005\u000e\u0000\u0000\u0bb5\u0bc3\u0003\u010c"+
		"\u00861\u0bb6\u0bb7\u0003\u0128\u0094\u0000\u0bb7\u0bb8\u0003\u010c\u0086"+
		"\'\u0bb8\u0bc3\u0001\u0000\u0000\u0000\u0bb9\u0bba\u0005\u01ee\u0000\u0000"+
		"\u0bba\u0bc3\u0003\u010c\u0086$\u0bbb\u0bbc\u0003\u013e\u009f\u0000\u0bbc"+
		"\u0bbd\u0005\u0247\u0000\u0000\u0bbd\u0bbe\u0003\u013e\u009f\u0000\u0bbe"+
		"\u0bc3\u0001\u0000\u0000\u0000\u0bbf\u0bc0\u0005\u01c6\u0000\u0000\u0bc0"+
		"\u0bc3\u0003L&\u0000\u0bc1\u0bc3\u0005\u0217\u0000\u0000\u0bc2\u0bb0\u0001"+
		"\u0000\u0000\u0000\u0bc2\u0bb2\u0001\u0000\u0000\u0000\u0bc2\u0bb4\u0001"+
		"\u0000\u0000\u0000\u0bc2\u0bb6\u0001\u0000\u0000\u0000\u0bc2\u0bb9\u0001"+
		"\u0000\u0000\u0000\u0bc2\u0bbb\u0001\u0000\u0000\u0000\u0bc2\u0bbf\u0001"+
		"\u0000\u0000\u0000\u0bc2\u0bc1\u0001\u0000\u0000\u0000\u0bc3\u0c8d\u0001"+
		"\u0000\u0000\u0000\u0bc4\u0bc5\n3\u0000\u0000\u0bc5\u0bc6\u0005\u0249"+
		"\u0000\u0000\u0bc6\u0bc7\u0005\u020a\u0000\u0000\u0bc7\u0bc8\u0005\u00b7"+
		"\u0000\u0000\u0bc8\u0c8c\u0003\u010c\u00864\u0bc9\u0bca\n0\u0000\u0000"+
		"\u0bca\u0bcb\u0005\r\u0000\u0000\u0bcb\u0c8c\u0003\u010c\u00861\u0bcc"+
		"\u0bcd\n/\u0000\u0000\u0bcd\u0bce\u0005\u000e\u0000\u0000\u0bce\u0c8c"+
		"\u0003\u010c\u00860\u0bcf\u0bd0\n.\u0000\u0000\u0bd0\u0bd1\u0005\u000f"+
		"\u0000\u0000\u0bd1\u0c8c\u0003\u010c\u0086/\u0bd2\u0bd3\n-\u0000\u0000"+
		"\u0bd3\u0bd4\u0005\u0010\u0000\u0000\u0bd4\u0c8c\u0003\u010c\u0086.\u0bd5"+
		"\u0bd6\n,\u0000\u0000\u0bd6\u0bd7\u0005\u000b\u0000\u0000\u0bd7\u0c8c"+
		"\u0003\u010c\u0086-\u0bd8\u0bd9\n+\u0000\u0000\u0bd9\u0bda\u0005\n\u0000"+
		"\u0000\u0bda\u0c8c\u0003\u010c\u0086,\u0bdb\u0bdc\n*\u0000\u0000\u0bdc"+
		"\u0bdd\u0005\u0007\u0000\u0000\u0bdd\u0c8c\u0003\u010c\u0086+\u0bde\u0bdf"+
		"\n)\u0000\u0000\u0bdf\u0be0\u0005\u0006\u0000\u0000\u0be0\u0c8c\u0003"+
		"\u010c\u0086*\u0be1\u0be2\n(\u0000\u0000\u0be2\u0be3\u0003\u0128\u0094"+
		"\u0000\u0be3\u0be4\u0003\u010c\u0086)\u0be4\u0c8c\u0001\u0000\u0000\u0000"+
		"\u0be5\u0be6\n%\u0000\u0000\u0be6\u0be7\u0003\u0106\u0083\u0000\u0be7"+
		"\u0be8\u0003\u010c\u0086&\u0be8\u0c8c\u0001\u0000\u0000\u0000\u0be9\u0bea"+
		"\n#\u0000\u0000\u0bea\u0beb\u0003\u0108\u0084\u0000\u0beb\u0bec\u0003"+
		"\u010c\u0086\u0000\u0bec\u0bed\u0005K\u0000\u0000\u0bed\u0bee\u0003\u010c"+
		"\u0086$\u0bee\u0c8c\u0001\u0000\u0000\u0000\u0bef\u0bf0\n\"\u0000\u0000"+
		"\u0bf0\u0bf1\u0003\u0108\u0084\u0000\u0bf1\u0bf2\u0003\u010c\u0086#\u0bf2"+
		"\u0c8c\u0001\u0000\u0000\u0000\u0bf3\u0bf4\n\u0016\u0000\u0000\u0bf4\u0bf5"+
		"\u0005\u01ed\u0000\u0000\u0bf5\u0bf6\u0005\u01d3\u0000\u0000\u0bf6\u0bf7"+
		"\u0005\u01d9\u0000\u0000\u0bf7\u0c8c\u0003\u010c\u0086\u0017\u0bf8\u0bf9"+
		"\n\u0015\u0000\u0000\u0bf9\u0bfa\u0005\u01ed\u0000\u0000\u0bfa\u0bfb\u0005"+
		"\u01ee\u0000\u0000\u0bfb\u0bfc\u0005\u01d3\u0000\u0000\u0bfc\u0bfd\u0005"+
		"\u01d9\u0000\u0000\u0bfd\u0c8c\u0003\u010c\u0086\u0016\u0bfe\u0bff\n\u0012"+
		"\u0000\u0000\u0bff\u0c01\u0005\u01f2\u0000\u0000\u0c00\u0c02\u0005\u0108"+
		"\u0000\u0000\u0c01\u0c00\u0001\u0000\u0000\u0000\u0c01\u0c02\u0001\u0000"+
		"\u0000\u0000\u0c02\u0c03\u0001\u0000\u0000\u0000\u0c03\u0c04\u0003\u010e"+
		"\u0087\u0000\u0c04\u0c05\u0005\u01eb\u0000\u0000\u0c05\u0c06\u0003\u010c"+
		"\u0086\u0013\u0c06\u0c8c\u0001\u0000\u0000\u0000\u0c07\u0c08\n\u0011\u0000"+
		"\u0000\u0c08\u0c09\u0005\u01ee\u0000\u0000\u0c09\u0c0b\u0005\u01f2\u0000"+
		"\u0000\u0c0a\u0c0c\u0005\u0108\u0000\u0000\u0c0b\u0c0a\u0001\u0000\u0000"+
		"\u0000\u0c0b\u0c0c\u0001\u0000\u0000\u0000\u0c0c\u0c0d\u0001\u0000\u0000"+
		"\u0000\u0c0d\u0c0e\u0003\u010e\u0087\u0000\u0c0e\u0c0f\u0005\u01eb\u0000"+
		"\u0000\u0c0f\u0c10\u0003\u010c\u0086\u0012\u0c10\u0c8c\u0001\u0000\u0000"+
		"\u0000\u0c11\u0c12\n\u0010\u0000\u0000\u0c12\u0c13\u0005\u01f2\u0000\u0000"+
		"\u0c13\u0c14\u0005\u0105\u0000\u0000\u0c14\u0c15\u0003\u010e\u0087\u0000"+
		"\u0c15\u0c16\u0005\u01eb\u0000\u0000\u0c16\u0c17\u0003\u010c\u0086\u0011"+
		"\u0c17\u0c8c\u0001\u0000\u0000\u0000\u0c18\u0c19\n\u000f\u0000\u0000\u0c19"+
		"\u0c1a\u0005\u01ee\u0000\u0000\u0c1a\u0c1b\u0005\u01f2\u0000\u0000\u0c1b"+
		"\u0c1c\u0005\u0105\u0000\u0000\u0c1c\u0c1d\u0003\u010e\u0087\u0000\u0c1d"+
		"\u0c1e\u0005\u01eb\u0000\u0000\u0c1e\u0c1f\u0003\u010c\u0086\u0010\u0c1f"+
		"\u0c8c\u0001\u0000\u0000\u0000\u0c20\u0c21\n\u0003\u0000\u0000\u0c21\u0c22"+
		"\u0003\u0102\u0081\u0000\u0c22\u0c23\u0003\u010c\u0086\u0004\u0c23\u0c8c"+
		"\u0001\u0000\u0000\u0000\u0c24\u0c25\n\u0002\u0000\u0000\u0c25\u0c26\u0003"+
		"\u0104\u0082\u0000\u0c26\u0c27\u0003\u010c\u0086\u0003\u0c27\u0c8c\u0001"+
		"\u0000\u0000\u0000\u0c28\u0c29\n5\u0000\u0000\u0c29\u0c2a\u0005.\u0000"+
		"\u0000\u0c2a\u0c8c\u0003\u017e\u00bf\u0000\u0c2b\u0c2c\n4\u0000\u0000"+
		"\u0c2c\u0c2d\u0005f\u0000\u0000\u0c2d\u0c8c\u0003\u01e0\u00f0\u0000\u0c2e"+
		"\u0c2f\n&\u0000\u0000\u0c2f\u0c8c\u0003\u0128\u0094\u0000\u0c30\u0c31"+
		"\n!\u0000\u0000\u0c31\u0c32\u0005\u01ed\u0000\u0000\u0c32\u0c8c\u0005"+
		"\u01ef\u0000\u0000\u0c33\u0c34\n \u0000\u0000\u0c34\u0c8c\u0005\u0103"+
		"\u0000\u0000\u0c35\u0c36\n\u001f\u0000\u0000\u0c36\u0c37\u0005\u01ed\u0000"+
		"\u0000\u0c37\u0c38\u0005\u01ee\u0000\u0000\u0c38\u0c8c\u0005\u01ef\u0000"+
		"\u0000\u0c39\u0c3a\n\u001e\u0000\u0000\u0c3a\u0c8c\u0005\u0104\u0000\u0000"+
		"\u0c3b\u0c3c\n\u001c\u0000\u0000\u0c3c\u0c3d\u0005\u01ed\u0000\u0000\u0c3d"+
		"\u0c8c\u0005\u01f0\u0000\u0000\u0c3e\u0c3f\n\u001b\u0000\u0000\u0c3f\u0c40"+
		"\u0005\u01ed\u0000\u0000\u0c40\u0c41\u0005\u01ee\u0000\u0000\u0c41\u0c8c"+
		"\u0005\u01f0\u0000\u0000\u0c42\u0c43\n\u001a\u0000\u0000\u0c43\u0c44\u0005"+
		"\u01ed\u0000\u0000\u0c44\u0c8c\u0005\u01f1\u0000\u0000\u0c45\u0c46\n\u0019"+
		"\u0000\u0000\u0c46\u0c47\u0005\u01ed\u0000\u0000\u0c47\u0c48\u0005\u01ee"+
		"\u0000\u0000\u0c48\u0c8c\u0005\u01f1\u0000\u0000\u0c49\u0c4a\n\u0018\u0000"+
		"\u0000\u0c4a\u0c4b\u0005\u01ed\u0000\u0000\u0c4b\u0c8c\u0005Q\u0000\u0000"+
		"\u0c4c\u0c4d\n\u0017\u0000\u0000\u0c4d\u0c4e\u0005\u01ed\u0000\u0000\u0c4e"+
		"\u0c4f\u0005\u01ee\u0000\u0000\u0c4f\u0c8c\u0005Q\u0000\u0000\u0c50\u0c51"+
		"\n\u0014\u0000\u0000\u0c51\u0c52\u0005\u01ed\u0000\u0000\u0c52\u0c53\u0005"+
		"\u00b8\u0000\u0000\u0c53\u0c54\u0005\u001e\u0000\u0000\u0c54\u0c55\u0003"+
		"\u0150\u00a8\u0000\u0c55\u0c56\u0005\u001f\u0000\u0000\u0c56\u0c8c\u0001"+
		"\u0000\u0000\u0000\u0c57\u0c58\n\u0013\u0000\u0000\u0c58\u0c59\u0005\u01ed"+
		"\u0000\u0000\u0c59\u0c5a\u0005\u01ee\u0000\u0000\u0c5a\u0c5b\u0005\u00b8"+
		"\u0000\u0000\u0c5b\u0c5c\u0005\u001e\u0000\u0000\u0c5c\u0c5d\u0003\u0150"+
		"\u00a8\u0000\u0c5d\u0c5e\u0005\u001f\u0000\u0000\u0c5e\u0c8c\u0001\u0000"+
		"\u0000\u0000\u0c5f\u0c60\n\u000e\u0000\u0000\u0c60\u0c61\u0005\u01f3\u0000"+
		"\u0000\u0c61\u0c8c\u0003\u011a\u008d\u0000\u0c62\u0c63\n\r\u0000\u0000"+
		"\u0c63\u0c64\u0005\u01ee\u0000\u0000\u0c64\u0c65\u0005\u01f3\u0000\u0000"+
		"\u0c65\u0c8c\u0003\u011a\u008d\u0000\u0c66\u0c67\n\f\u0000\u0000\u0c67"+
		"\u0c68\u0003\u012a\u0095\u0000\u0c68\u0c69\u0003\u0144\u00a2\u0000\u0c69"+
		"\u0c6a\u0003L&\u0000\u0c6a\u0c8c\u0001\u0000\u0000\u0000\u0c6b\u0c6c\n"+
		"\u000b\u0000\u0000\u0c6c\u0c6d\u0003\u012a\u0095\u0000\u0c6d\u0c6e\u0003"+
		"\u0144\u00a2\u0000\u0c6e\u0c6f\u0005\u001e\u0000\u0000\u0c6f\u0c70\u0003"+
		"\u010c\u0086\u0000\u0c70\u0c71\u0005\u001f\u0000\u0000\u0c71\u0c8c\u0001"+
		"\u0000\u0000\u0000\u0c72\u0c73\n\t\u0000\u0000\u0c73\u0c74\u0005\u01ed"+
		"\u0000\u0000\u0c74\u0c8c\u0005\u0106\u0000\u0000\u0c75\u0c76\n\b\u0000"+
		"\u0000\u0c76\u0c77\u0005\u01ed\u0000\u0000\u0c77\u0c78\u0005\u01ee\u0000"+
		"\u0000\u0c78\u0c8c\u0005\u0106\u0000\u0000\u0c79\u0c7a\n\u0007\u0000\u0000"+
		"\u0c7a\u0c7b\u0005\u01ed\u0000\u0000\u0c7b\u0c8c\u0005\u0107\u0000\u0000"+
		"\u0c7c\u0c7d\n\u0006\u0000\u0000\u0c7d\u0c7e\u0005\u01ed\u0000\u0000\u0c7e"+
		"\u0c7f\u0003\u01b2\u00d9\u0000\u0c7f\u0c80\u0005\u0107\u0000\u0000\u0c80"+
		"\u0c8c\u0001\u0000\u0000\u0000\u0c81\u0c82\n\u0005\u0000\u0000\u0c82\u0c83"+
		"\u0005\u01ed\u0000\u0000\u0c83\u0c84\u0005\u01ee\u0000\u0000\u0c84\u0c8c"+
		"\u0005\u0107\u0000\u0000\u0c85\u0c86\n\u0004\u0000\u0000\u0c86\u0c87\u0005"+
		"\u01ed\u0000\u0000\u0c87\u0c88\u0005\u01ee\u0000\u0000\u0c88\u0c89\u0003"+
		"\u01b2\u00d9\u0000\u0c89\u0c8a\u0005\u0107\u0000\u0000\u0c8a\u0c8c\u0001"+
		"\u0000\u0000\u0000\u0c8b\u0bc4\u0001\u0000\u0000\u0000\u0c8b\u0bc9\u0001"+
		"\u0000\u0000\u0000\u0c8b\u0bcc\u0001\u0000\u0000\u0000\u0c8b\u0bcf\u0001"+
		"\u0000\u0000\u0000\u0c8b\u0bd2\u0001\u0000\u0000\u0000\u0c8b\u0bd5\u0001"+
		"\u0000\u0000\u0000\u0c8b\u0bd8\u0001\u0000\u0000\u0000\u0c8b\u0bdb\u0001"+
		"\u0000\u0000\u0000\u0c8b\u0bde\u0001\u0000\u0000\u0000\u0c8b\u0be1\u0001"+
		"\u0000\u0000\u0000\u0c8b\u0be5\u0001\u0000\u0000\u0000\u0c8b\u0be9\u0001"+
		"\u0000\u0000\u0000\u0c8b\u0bef\u0001\u0000\u0000\u0000\u0c8b\u0bf3\u0001"+
		"\u0000\u0000\u0000\u0c8b\u0bf8\u0001\u0000\u0000\u0000\u0c8b\u0bfe\u0001"+
		"\u0000\u0000\u0000\u0c8b\u0c07\u0001\u0000\u0000\u0000\u0c8b\u0c11\u0001"+
		"\u0000\u0000\u0000\u0c8b\u0c18\u0001\u0000\u0000\u0000\u0c8b\u0c20\u0001"+
		"\u0000\u0000\u0000\u0c8b\u0c24\u0001\u0000\u0000\u0000\u0c8b\u0c28\u0001"+
		"\u0000\u0000\u0000\u0c8b\u0c2b\u0001\u0000\u0000\u0000\u0c8b\u0c2e\u0001"+
		"\u0000\u0000\u0000\u0c8b\u0c30\u0001\u0000\u0000\u0000\u0c8b\u0c33\u0001"+
		"\u0000\u0000\u0000\u0c8b\u0c35\u0001\u0000\u0000\u0000\u0c8b\u0c39\u0001"+
		"\u0000\u0000\u0000\u0c8b\u0c3b\u0001\u0000\u0000\u0000\u0c8b\u0c3e\u0001"+
		"\u0000\u0000\u0000\u0c8b\u0c42\u0001\u0000\u0000\u0000\u0c8b\u0c45\u0001"+
		"\u0000\u0000\u0000\u0c8b\u0c49\u0001\u0000\u0000\u0000\u0c8b\u0c4c\u0001"+
		"\u0000\u0000\u0000\u0c8b\u0c50\u0001\u0000\u0000\u0000\u0c8b\u0c57\u0001"+
		"\u0000\u0000\u0000\u0c8b\u0c5f\u0001\u0000\u0000\u0000\u0c8b\u0c62\u0001"+
		"\u0000\u0000\u0000\u0c8b\u0c66\u0001\u0000\u0000\u0000\u0c8b\u0c6b\u0001"+
		"\u0000\u0000\u0000\u0c8b\u0c72\u0001\u0000\u0000\u0000\u0c8b\u0c75\u0001"+
		"\u0000\u0000\u0000\u0c8b\u0c79\u0001\u0000\u0000\u0000\u0c8b\u0c7c\u0001"+
		"\u0000\u0000\u0000\u0c8b\u0c81\u0001\u0000\u0000\u0000\u0c8b\u0c85\u0001"+
		"\u0000\u0000\u0000\u0c8c\u0c8f\u0001\u0000\u0000\u0000\u0c8d\u0c8b\u0001"+
		"\u0000\u0000\u0000\u0c8d\u0c8e\u0001\u0000\u0000\u0000\u0c8e\u010d\u0001"+
		"\u0000\u0000\u0000\u0c8f\u0c8d\u0001\u0000\u0000\u0000\u0c90\u0c91\u0006"+
		"\u0087\uffff\uffff\u0000\u0c91\u0c9a\u0003\u0110\u0088\u0000\u0c92\u0c93"+
		"\u0005\r\u0000\u0000\u0c93\u0c9a\u0003\u010e\u0087\u000b\u0c94\u0c95\u0005"+
		"\u000e\u0000\u0000\u0c95\u0c9a\u0003\u010e\u0087\n\u0c96\u0c97\u0003\u0128"+
		"\u0094\u0000\u0c97\u0c98\u0003\u010e\u0087\b\u0c98\u0c9a\u0001\u0000\u0000"+
		"\u0000\u0c99\u0c90\u0001\u0000\u0000\u0000\u0c99\u0c92\u0001\u0000\u0000"+
		"\u0000\u0c99\u0c94\u0001\u0000\u0000\u0000\u0c99\u0c96\u0001\u0000\u0000"+
		"\u0000\u0c9a\u0cc7\u0001\u0000\u0000\u0000\u0c9b\u0c9c\n\t\u0000\u0000"+
		"\u0c9c\u0c9d\u0003\u0128\u0094\u0000\u0c9d\u0c9e\u0003\u010e\u0087\n\u0c9e"+
		"\u0cc6\u0001\u0000\u0000\u0000\u0c9f\u0ca0\n\u0006\u0000\u0000\u0ca0\u0ca1"+
		"\u0005\u01ed\u0000\u0000\u0ca1\u0ca2\u0005\u01d3\u0000\u0000\u0ca2\u0ca3"+
		"\u0005\u01d9\u0000\u0000\u0ca3\u0cc6\u0003\u010e\u0087\u0007\u0ca4\u0ca5"+
		"\n\u0005\u0000\u0000\u0ca5\u0ca6\u0005\u01ed\u0000\u0000\u0ca6\u0ca7\u0005"+
		"\u01ee\u0000\u0000\u0ca7\u0ca8\u0005\u01d3\u0000\u0000\u0ca8\u0ca9\u0005"+
		"\u01d9\u0000\u0000\u0ca9\u0cc6\u0003\u010e\u0087\u0006\u0caa\u0cab\n\f"+
		"\u0000\u0000\u0cab\u0cac\u0005.\u0000\u0000\u0cac\u0cc6\u0003\u017e\u00bf"+
		"\u0000\u0cad\u0cae\n\u0007\u0000\u0000\u0cae\u0cc6\u0003\u0128\u0094\u0000"+
		"\u0caf\u0cb0\n\u0004\u0000\u0000\u0cb0\u0cb1\u0005\u01ed\u0000\u0000\u0cb1"+
		"\u0cb2\u0005\u00b8\u0000\u0000\u0cb2\u0cb3\u0005\u001e\u0000\u0000\u0cb3"+
		"\u0cb4\u0003\u0150\u00a8\u0000\u0cb4\u0cb5\u0005\u001f\u0000\u0000\u0cb5"+
		"\u0cc6\u0001\u0000\u0000\u0000\u0cb6\u0cb7\n\u0003\u0000\u0000\u0cb7\u0cb8"+
		"\u0005\u01ed\u0000\u0000\u0cb8\u0cb9\u0005\u01ee\u0000\u0000\u0cb9\u0cba"+
		"\u0005\u00b8\u0000\u0000\u0cba\u0cbb\u0005\u001e\u0000\u0000\u0cbb\u0cbc"+
		"\u0003\u0150\u00a8\u0000\u0cbc\u0cbd\u0005\u001f\u0000\u0000\u0cbd\u0cc6"+
		"\u0001\u0000\u0000\u0000\u0cbe\u0cbf\n\u0002\u0000\u0000\u0cbf\u0cc0\u0005"+
		"\u01ed\u0000\u0000\u0cc0\u0cc6\u0005\u0106\u0000\u0000\u0cc1\u0cc2\n\u0001"+
		"\u0000\u0000\u0cc2\u0cc3\u0005\u01ed\u0000\u0000\u0cc3\u0cc4\u0005\u01ee"+
		"\u0000\u0000\u0cc4\u0cc6\u0005\u0106\u0000\u0000\u0cc5\u0c9b\u0001\u0000"+
		"\u0000\u0000\u0cc5\u0c9f\u0001\u0000\u0000\u0000\u0cc5\u0ca4\u0001\u0000"+
		"\u0000\u0000\u0cc5\u0caa\u0001\u0000\u0000\u0000\u0cc5\u0cad\u0001\u0000"+
		"\u0000\u0000\u0cc5\u0caf\u0001\u0000\u0000\u0000\u0cc5\u0cb6\u0001\u0000"+
		"\u0000\u0000\u0cc5\u0cbe\u0001\u0000\u0000\u0000\u0cc5\u0cc1\u0001\u0000"+
		"\u0000\u0000\u0cc6\u0cc9\u0001\u0000\u0000\u0000\u0cc7\u0cc5\u0001\u0000"+
		"\u0000\u0000\u0cc7\u0cc8\u0001\u0000\u0000\u0000\u0cc8\u010f\u0001\u0000"+
		"\u0000\u0000\u0cc9\u0cc7\u0001\u0000\u0000\u0000\u0cca\u0cea\u0003\u00dc"+
		"n\u0000\u0ccb\u0cea\u0003\u0126\u0093\u0000\u0ccc\u0cea\u0003\u0156\u00ab"+
		"\u0000\u0ccd\u0ccf\u0005\u019c\u0000\u0000\u0cce\u0cd0\u0003\u0116\u008b"+
		"\u0000\u0ccf\u0cce\u0001\u0000\u0000\u0000\u0ccf\u0cd0\u0001\u0000\u0000"+
		"\u0000\u0cd0\u0cea\u0001\u0000\u0000\u0000\u0cd1\u0cd2\u0005\u001e\u0000"+
		"\u0000\u0cd2\u0cd3\u0003\u010c\u0086\u0000\u0cd3\u0cd4\u0005\u001f\u0000"+
		"\u0000\u0cd4\u0cd5\u0003\u0114\u008a\u0000\u0cd5\u0cea\u0001\u0000\u0000"+
		"\u0000\u0cd6\u0cea\u0003\u011c\u008e\u0000\u0cd7\u0cea\u0003\u0172\u00b9"+
		"\u0000\u0cd8\u0cea\u0003L&\u0000\u0cd9\u0cda\u0003L&\u0000\u0cda\u0cdb"+
		"\u0003\u0112\u0089\u0000\u0cdb\u0cea\u0001\u0000\u0000\u0000\u0cdc\u0cdd"+
		"\u0005L\u0000\u0000\u0cdd\u0cea\u0003L&\u0000\u0cde\u0cdf\u0005\u0207"+
		"\u0000\u0000\u0cdf\u0cea\u0003L&\u0000\u0ce0\u0ce1\u0005\u0207\u0000\u0000"+
		"\u0ce1\u0cea\u0003\u0146\u00a3\u0000\u0ce2\u0cea\u0003\u0140\u00a0\u0000"+
		"\u0ce3\u0cea\u0003\u0142\u00a1\u0000\u0ce4\u0ce5\u0005\u0243\u0000\u0000"+
		"\u0ce5\u0ce6\u0005\u001e\u0000\u0000\u0ce6\u0ce7\u0003\u0184\u00c2\u0000"+
		"\u0ce7\u0ce8\u0005\u001f\u0000\u0000\u0ce8\u0cea\u0001\u0000\u0000\u0000"+
		"\u0ce9\u0cca\u0001\u0000\u0000\u0000\u0ce9\u0ccb\u0001\u0000\u0000\u0000"+
		"\u0ce9\u0ccc\u0001\u0000\u0000\u0000\u0ce9\u0ccd\u0001\u0000\u0000\u0000"+
		"\u0ce9\u0cd1\u0001\u0000\u0000\u0000\u0ce9\u0cd6\u0001\u0000\u0000\u0000"+
		"\u0ce9\u0cd7\u0001\u0000\u0000\u0000\u0ce9\u0cd8\u0001\u0000\u0000\u0000"+
		"\u0ce9\u0cd9\u0001\u0000\u0000\u0000\u0ce9\u0cdc\u0001\u0000\u0000\u0000"+
		"\u0ce9\u0cde\u0001\u0000\u0000\u0000\u0ce9\u0ce0\u0001\u0000\u0000\u0000"+
		"\u0ce9\u0ce2\u0001\u0000\u0000\u0000\u0ce9\u0ce3\u0001\u0000\u0000\u0000"+
		"\u0ce9\u0ce4\u0001\u0000\u0000\u0000\u0cea\u0111\u0001\u0000\u0000\u0000"+
		"\u0ceb\u0cec\u0006\u0089\uffff\uffff\u0000\u0cec\u0ced\u0003\u0116\u008b"+
		"\u0000\u0ced\u0cf2\u0001\u0000\u0000\u0000\u0cee\u0cef\n\u0001\u0000\u0000"+
		"\u0cef\u0cf1\u0003\u0116\u008b\u0000\u0cf0\u0cee\u0001\u0000\u0000\u0000"+
		"\u0cf1\u0cf4\u0001\u0000\u0000\u0000\u0cf2\u0cf0\u0001\u0000\u0000\u0000"+
		"\u0cf2\u0cf3\u0001\u0000\u0000\u0000\u0cf3\u0113\u0001\u0000\u0000\u0000"+
		"\u0cf4\u0cf2\u0001\u0000\u0000\u0000\u0cf5\u0cfa\u0006\u008a\uffff\uffff"+
		"\u0000\u0cf6\u0cf7\n\u0002\u0000\u0000\u0cf7\u0cf9\u0003\u0116\u008b\u0000"+
		"\u0cf8\u0cf6\u0001\u0000\u0000\u0000\u0cf9\u0cfc\u0001\u0000\u0000\u0000"+
		"\u0cfa\u0cf8\u0001\u0000\u0000\u0000\u0cfa\u0cfb\u0001\u0000\u0000\u0000"+
		"\u0cfb\u0115\u0001\u0000\u0000\u0000\u0cfc\u0cfa\u0001\u0000\u0000\u0000"+
		"\u0cfd\u0cfe\u0005\u0012\u0000\u0000\u0cfe\u0d0f\u0003\u01a0\u00d0\u0000"+
		"\u0cff\u0d00\u0005\u0012\u0000\u0000\u0d00\u0d0f\u0005\u000f\u0000\u0000"+
		"\u0d01\u0d02\u0005\"\u0000\u0000\u0d02\u0d03\u0003\u010c\u0086\u0000\u0d03"+
		"\u0d04\u0005#\u0000\u0000\u0d04\u0d0f\u0001\u0000\u0000\u0000\u0d05\u0d07"+
		"\u0005\"\u0000\u0000\u0d06\u0d08\u0003\u0118\u008c\u0000\u0d07\u0d06\u0001"+
		"\u0000\u0000\u0000\u0d07\u0d08\u0001\u0000\u0000\u0000\u0d08\u0d09\u0001"+
		"\u0000\u0000\u0000\u0d09\u0d0b\u0005\f\u0000\u0000\u0d0a\u0d0c\u0003\u0118"+
		"\u008c\u0000\u0d0b\u0d0a\u0001\u0000\u0000\u0000\u0d0b\u0d0c\u0001\u0000"+
		"\u0000\u0000\u0d0c\u0d0d\u0001\u0000\u0000\u0000\u0d0d\u0d0f\u0005#\u0000"+
		"\u0000\u0d0e\u0cfd\u0001\u0000\u0000\u0000\u0d0e\u0cff\u0001\u0000\u0000"+
		"\u0000\u0d0e\u0d01\u0001\u0000\u0000\u0000\u0d0e\u0d05\u0001\u0000\u0000"+
		"\u0000\u0d0f\u0117\u0001\u0000\u0000\u0000\u0d10\u0d11\u0003\u010c\u0086"+
		"\u0000\u0d11\u0119\u0001\u0000\u0000\u0000\u0d12\u0d18\u0003L&\u0000\u0d13"+
		"\u0d14\u0005\u001e\u0000\u0000\u0d14\u0d15\u0003\u0184\u00c2\u0000\u0d15"+
		"\u0d16\u0005\u001f\u0000\u0000\u0d16\u0d18\u0001\u0000\u0000\u0000\u0d17"+
		"\u0d12\u0001\u0000\u0000\u0000\u0d17\u0d13\u0001\u0000\u0000\u0000\u0d18"+
		"\u011b\u0001\u0000\u0000\u0000\u0d19\u0d1b\u0005\u01d4\u0000\u0000\u0d1a"+
		"\u0d1c\u0003\u0124\u0092\u0000\u0d1b\u0d1a\u0001\u0000\u0000\u0000\u0d1b"+
		"\u0d1c\u0001\u0000\u0000\u0000\u0d1c\u0d1d\u0001\u0000\u0000\u0000\u0d1d"+
		"\u0d1f\u0003\u011e\u008f\u0000\u0d1e\u0d20\u0003\u0122\u0091\u0000\u0d1f"+
		"\u0d1e\u0001\u0000\u0000\u0000\u0d1f\u0d20\u0001\u0000\u0000\u0000\u0d20"+
		"\u0d21\u0001\u0000\u0000\u0000\u0d21\u0d22\u0005\u024b\u0000\u0000\u0d22"+
		"\u011d\u0001\u0000\u0000\u0000\u0d23\u0d25\u0003\u0120\u0090\u0000\u0d24"+
		"\u0d23\u0001\u0000\u0000\u0000\u0d25\u0d26\u0001\u0000\u0000\u0000\u0d26"+
		"\u0d24\u0001\u0000\u0000\u0000\u0d26\u0d27\u0001\u0000\u0000\u0000\u0d27"+
		"\u011f\u0001\u0000\u0000\u0000\u0d28\u0d29\u0005\u01d5\u0000\u0000\u0d29"+
		"\u0d2a\u0003\u010c\u0086\u0000\u0d2a\u0d2b\u0005\u01e8\u0000\u0000\u0d2b"+
		"\u0d2c\u0003\u010c\u0086\u0000\u0d2c\u0121\u0001\u0000\u0000\u0000\u0d2d"+
		"\u0d2e\u0005\u01e7\u0000\u0000\u0d2e\u0d2f\u0003\u010c\u0086\u0000\u0d2f"+
		"\u0123\u0001\u0000\u0000\u0000\u0d30\u0d31\u0003\u010c\u0086\u0000\u0d31"+
		"\u0125\u0001\u0000\u0000\u0000\u0d32\u0d37\u0003\u015c\u00ae\u0000\u0d33"+
		"\u0d34\u0003\u015c\u00ae\u0000\u0d34\u0d35\u0003\u0112\u0089\u0000\u0d35"+
		"\u0d37\u0001\u0000\u0000\u0000\u0d36\u0d32\u0001\u0000\u0000\u0000\u0d36"+
		"\u0d33\u0001\u0000\u0000\u0000\u0d37\u0127\u0001\u0000\u0000\u0000\u0d38"+
		"\u0d40\u0003\u0132\u0099\u0000\u0d39\u0d40\u0003\u0134\u009a\u0000\u0d3a"+
		"\u0d3b\u0005\u00fe\u0000\u0000\u0d3b\u0d3c\u0005\u001e\u0000\u0000\u0d3c"+
		"\u0d3d\u0003\u013a\u009d\u0000\u0d3d\u0d3e\u0005\u001f\u0000\u0000\u0d3e"+
		"\u0d40\u0001\u0000\u0000\u0000\u0d3f\u0d38\u0001\u0000\u0000\u0000\u0d3f"+
		"\u0d39\u0001\u0000\u0000\u0000\u0d3f\u0d3a\u0001\u0000\u0000\u0000\u0d40"+
		"\u0129\u0001\u0000\u0000\u0000\u0d41\u0d4e\u0003\u012c\u0096\u0000\u0d42"+
		"\u0d43\u0005\u00fe\u0000\u0000\u0d43\u0d44\u0005\u001e\u0000\u0000\u0d44"+
		"\u0d45\u0003\u013a\u009d\u0000\u0d45\u0d46\u0005\u001f\u0000\u0000\u0d46"+
		"\u0d4e\u0001\u0000\u0000\u0000\u0d47\u0d4e\u0005\u01f6\u0000\u0000\u0d48"+
		"\u0d49\u0005\u01ee\u0000\u0000\u0d49\u0d4e\u0005\u01f6\u0000\u0000\u0d4a"+
		"\u0d4e\u0005\u0005\u0000\u0000\u0d4b\u0d4c\u0005\u0004\u0000\u0000\u0d4c"+
		"\u0d4e\u0005\u0005\u0000\u0000\u0d4d\u0d41\u0001\u0000\u0000\u0000\u0d4d"+
		"\u0d42\u0001\u0000\u0000\u0000\u0d4d\u0d47\u0001\u0000\u0000\u0000\u0d4d"+
		"\u0d48\u0001\u0000\u0000\u0000\u0d4d\u0d4a\u0001\u0000\u0000\u0000\u0d4d"+
		"\u0d4b\u0001\u0000\u0000\u0000\u0d4e\u012b\u0001\u0000\u0000\u0000\u0d4f"+
		"\u0d52\u0003\u012e\u0097\u0000\u0d50\u0d52\u0003\u0130\u0098\u0000\u0d51"+
		"\u0d4f\u0001\u0000\u0000\u0000\u0d51\u0d50\u0001\u0000\u0000\u0000\u0d52"+
		"\u012d\u0001\u0000\u0000\u0000\u0d53\u0d55\u0007\u000e\u0000\u0000\u0d54"+
		"\u0d53\u0001\u0000\u0000\u0000\u0d55\u0d56\u0001\u0000\u0000\u0000\u0d56"+
		"\u0d54\u0001\u0000\u0000\u0000\u0d56\u0d57\u0001\u0000\u0000\u0000\u0d57"+
		"\u012f\u0001\u0000\u0000\u0000\u0d58\u0d59\u0007\u000f\u0000\u0000\u0d59"+
		"\u0131\u0001\u0000\u0000\u0000\u0d5a\u0d6a\u00052\u0000\u0000\u0d5b\u0d6a"+
		"\u00053\u0000\u0000\u0d5c\u0d6a\u00054\u0000\u0000\u0d5d\u0d6a\u00055"+
		"\u0000\u0000\u0d5e\u0d6a\u00056\u0000\u0000\u0d5f\u0d6a\u00057\u0000\u0000"+
		"\u0d60\u0d6a\u0005(\u0000\u0000\u0d61\u0d62\u0005(\u0000\u0000\u0d62\u0d6a"+
		"\u0005\u0006\u0000\u0000\u0d63\u0d6a\u00058\u0000\u0000\u0d64\u0d6a\u0005"+
		"\u0003\u0000\u0000\u0d65\u0d6a\u0005\u000e\u0000\u0000\u0d66\u0d6a\u0005"+
		"9\u0000\u0000\u0d67\u0d6a\u0005:\u0000\u0000\u0d68\u0d6a\u0005;\u0000"+
		"\u0000\u0d69\u0d5a\u0001\u0000\u0000\u0000\u0d69\u0d5b\u0001\u0000\u0000"+
		"\u0000\u0d69\u0d5c\u0001\u0000\u0000\u0000\u0d69\u0d5d\u0001\u0000\u0000"+
		"\u0000\u0d69\u0d5e\u0001\u0000\u0000\u0000\u0d69\u0d5f\u0001\u0000\u0000"+
		"\u0000\u0d69\u0d60\u0001\u0000\u0000\u0000\u0d69\u0d61\u0001\u0000\u0000"+
		"\u0000\u0d69\u0d63\u0001\u0000\u0000\u0000\u0d69\u0d64\u0001\u0000\u0000"+
		"\u0000\u0d69\u0d65\u0001\u0000\u0000\u0000\u0d69\u0d66\u0001\u0000\u0000"+
		"\u0000\u0d69\u0d67\u0001\u0000\u0000\u0000\u0d69\u0d68\u0001\u0000\u0000"+
		"\u0000\u0d6a\u0133\u0001\u0000\u0000\u0000\u0d6b\u0d80\u0005<\u0000\u0000"+
		"\u0d6c\u0d80\u0005=\u0000\u0000\u0d6d\u0d80\u0005>\u0000\u0000\u0d6e\u0d80"+
		"\u0005?\u0000\u0000\u0d6f\u0d80\u0005@\u0000\u0000\u0d70\u0d80\u0005A"+
		"\u0000\u0000\u0d71\u0d80\u0005B\u0000\u0000\u0d72\u0d80\u0005C\u0000\u0000"+
		"\u0d73\u0d80\u0005D\u0000\u0000\u0d74\u0d80\u0005E\u0000\u0000\u0d75\u0d80"+
		"\u0005F\u0000\u0000\u0d76\u0d80\u0005G\u0000\u0000\u0d77\u0d80\u0005H"+
		"\u0000\u0000\u0d78\u0d79\u0005(\u0000\u0000\u0d79\u0d80\u0005\u000e\u0000"+
		"\u0000\u0d7a\u0d7b\u0005(\u0000\u0000\u0d7b\u0d80\u0005\u0003\u0000\u0000"+
		"\u0d7c\u0d80\u0005\u001d\u0000\u0000\u0d7d\u0d80\u0005\b\u0000\u0000\u0d7e"+
		"\u0d80\u0005\t\u0000\u0000\u0d7f\u0d6b\u0001\u0000\u0000\u0000\u0d7f\u0d6c"+
		"\u0001\u0000\u0000\u0000\u0d7f\u0d6d\u0001\u0000\u0000\u0000\u0d7f\u0d6e"+
		"\u0001\u0000\u0000\u0000\u0d7f\u0d6f\u0001\u0000\u0000\u0000\u0d7f\u0d70"+
		"\u0001\u0000\u0000\u0000\u0d7f\u0d71\u0001\u0000\u0000\u0000\u0d7f\u0d72"+
		"\u0001\u0000\u0000\u0000\u0d7f\u0d73\u0001\u0000\u0000\u0000\u0d7f\u0d74"+
		"\u0001\u0000\u0000\u0000\u0d7f\u0d75\u0001\u0000\u0000\u0000\u0d7f\u0d76"+
		"\u0001\u0000\u0000\u0000\u0d7f\u0d77\u0001\u0000\u0000\u0000\u0d7f\u0d78"+
		"\u0001\u0000\u0000\u0000\u0d7f\u0d7a\u0001\u0000\u0000\u0000\u0d7f\u0d7c"+
		"\u0001\u0000\u0000\u0000\u0d7f\u0d7d\u0001\u0000\u0000\u0000\u0d7f\u0d7e"+
		"\u0001\u0000\u0000\u0000\u0d80\u0135\u0001\u0000\u0000\u0000\u0d81\u0d88"+
		"\u0003\u012c\u0096\u0000\u0d82\u0d83\u0005\u00fe\u0000\u0000\u0d83\u0d84"+
		"\u0005\u001e\u0000\u0000\u0d84\u0d85\u0003\u013a\u009d\u0000\u0d85\u0d86"+
		"\u0005\u001f\u0000\u0000\u0d86\u0d88\u0001\u0000\u0000\u0000\u0d87\u0d81"+
		"\u0001\u0000\u0000\u0000\u0d87\u0d82\u0001\u0000\u0000\u0000\u0d88\u0137"+
		"\u0001\u0000\u0000\u0000\u0d89\u0d8a\u0007\u0010\u0000\u0000\u0d8a\u0139"+
		"\u0001\u0000\u0000\u0000\u0d8b\u0d91\u0003\u012c\u0096\u0000\u0d8c\u0d8d"+
		"\u0003\u015c\u00ae\u0000\u0d8d\u0d8e\u0005\u0012\u0000\u0000\u0d8e\u0d8f"+
		"\u0003\u013a\u009d\u0000\u0d8f\u0d91\u0001\u0000\u0000\u0000\u0d90\u0d8b"+
		"\u0001\u0000\u0000\u0000\u0d90\u0d8c\u0001\u0000\u0000\u0000\u0d91\u013b"+
		"\u0001\u0000\u0000\u0000\u0d92\u0d93\u0005M\u0000\u0000\u0d93\u0d94\u0005"+
		"\u0218\u0000\u0000\u0d94\u0d9d\u0005P\u0000\u0000\u0d95\u0d96\u0005M\u0000"+
		"\u0000\u0d96\u0d9d\u0005\u01f8\u0000\u0000\u0d97\u0d98\u0005M\u0000\u0000"+
		"\u0d98\u0d9d\u0005\u0240\u0000\u0000\u0d99\u0d9a\u0005M\u0000\u0000\u0d9a"+
		"\u0d9b\u0005X\u0000\u0000\u0d9b\u0d9d\u0005\u0246\u0000\u0000\u0d9c\u0d92"+
		"\u0001\u0000\u0000\u0000\u0d9c\u0d95\u0001\u0000\u0000\u0000\u0d9c\u0d97"+
		"\u0001\u0000\u0000\u0000\u0d9c\u0d99\u0001\u0000\u0000\u0000\u0d9d\u013d"+
		"\u0001\u0000\u0000\u0000\u0d9e\u0d9f\u0005P\u0000\u0000\u0d9f\u0da0\u0005"+
		"\u001e\u0000\u0000\u0da0\u0da1\u0003\u0184\u00c2\u0000\u0da1\u0da2\u0005"+
		"\u001f\u0000\u0000\u0da2\u0dad\u0001\u0000\u0000\u0000\u0da3\u0da4\u0005"+
		"P\u0000\u0000\u0da4\u0da5\u0005\u001e\u0000\u0000\u0da5\u0dad\u0005\u001f"+
		"\u0000\u0000\u0da6\u0da7\u0005\u001e\u0000\u0000\u0da7\u0da8\u0003\u0184"+
		"\u00c2\u0000\u0da8\u0da9\u0005$\u0000\u0000\u0da9\u0daa\u0003\u010c\u0086"+
		"\u0000\u0daa\u0dab\u0005\u001f\u0000\u0000\u0dab\u0dad\u0001\u0000\u0000"+
		"\u0000\u0dac\u0d9e\u0001\u0000\u0000\u0000\u0dac\u0da3\u0001\u0000\u0000"+
		"\u0000\u0dac\u0da6\u0001\u0000\u0000\u0000\u0dad\u013f\u0001\u0000\u0000"+
		"\u0000\u0dae\u0daf\u0005P\u0000\u0000\u0daf\u0db0\u0005\u001e\u0000\u0000"+
		"\u0db0\u0db1\u0003\u0184\u00c2\u0000\u0db1\u0db2\u0005\u001f\u0000\u0000"+
		"\u0db2\u0db7\u0001\u0000\u0000\u0000\u0db3\u0db4\u0005P\u0000\u0000\u0db4"+
		"\u0db5\u0005\u001e\u0000\u0000\u0db5\u0db7\u0005\u001f\u0000\u0000\u0db6"+
		"\u0dae\u0001\u0000\u0000\u0000\u0db6\u0db3\u0001\u0000\u0000\u0000\u0db7"+
		"\u0141\u0001\u0000\u0000\u0000\u0db8\u0db9\u0005\u001e\u0000\u0000\u0db9"+
		"\u0dba\u0003\u0184\u00c2\u0000\u0dba\u0dbb\u0005$\u0000\u0000\u0dbb\u0dbc"+
		"\u0003\u010c\u0086\u0000\u0dbc\u0dbd\u0005\u001f\u0000\u0000\u0dbd\u0143"+
		"\u0001\u0000\u0000\u0000\u0dbe\u0dbf\u0007\u0011\u0000\u0000\u0dbf\u0145"+
		"\u0001\u0000\u0000\u0000\u0dc0\u0dc1\u0005\"\u0000\u0000\u0dc1\u0dc2\u0003"+
		"\u0184\u00c2\u0000\u0dc2\u0dc3\u0005#\u0000\u0000\u0dc3\u0dcb\u0001\u0000"+
		"\u0000\u0000\u0dc4\u0dc5\u0005\"\u0000\u0000\u0dc5\u0dc6\u0003\u0148\u00a4"+
		"\u0000\u0dc6\u0dc7\u0005#\u0000\u0000\u0dc7\u0dcb";
	private static final String _serializedATNSegment2 =
		"\u0001\u0000\u0000\u0000\u0dc8\u0dc9\u0005\"\u0000\u0000\u0dc9\u0dcb\u0005"+
		"#\u0000\u0000\u0dca\u0dc0\u0001\u0000\u0000\u0000\u0dca\u0dc4\u0001\u0000"+
		"\u0000\u0000\u0dca\u0dc8\u0001\u0000\u0000\u0000\u0dcb\u0147\u0001\u0000"+
		"\u0000\u0000\u0dcc\u0dd1\u0003\u0146\u00a3\u0000\u0dcd\u0dce\u0005$\u0000"+
		"\u0000\u0dce\u0dd0\u0003\u0146\u00a3\u0000\u0dcf\u0dcd\u0001\u0000\u0000"+
		"\u0000\u0dd0\u0dd3\u0001\u0000\u0000\u0000\u0dd1\u0dcf\u0001\u0000\u0000"+
		"\u0000\u0dd1\u0dd2\u0001\u0000\u0000\u0000\u0dd2\u0149\u0001\u0000\u0000"+
		"\u0000\u0dd3\u0dd1\u0001\u0000\u0000\u0000\u0dd4\u0dd9\u0003\u014e\u00a7"+
		"\u0000\u0dd5\u0dd6\u0005$\u0000\u0000\u0dd6\u0dd8\u0003\u014e\u00a7\u0000"+
		"\u0dd7\u0dd5\u0001\u0000\u0000\u0000\u0dd8\u0ddb\u0001\u0000\u0000\u0000"+
		"\u0dd9\u0dd7\u0001\u0000\u0000\u0000\u0dd9\u0dda\u0001\u0000\u0000\u0000"+
		"\u0dda\u014b\u0001\u0000\u0000\u0000\u0ddb\u0dd9\u0001\u0000\u0000\u0000"+
		"\u0ddc\u0ddd\u0003\u0160\u00b0\u0000\u0ddd\u014d\u0001\u0000\u0000\u0000"+
		"\u0dde\u0de8\u0003\u010c\u0086\u0000\u0ddf\u0de0\u0003\u014c\u00a6\u0000"+
		"\u0de0\u0de1\u0005\u0017\u0000\u0000\u0de1\u0de2\u0003\u010c\u0086\u0000"+
		"\u0de2\u0de8\u0001\u0000\u0000\u0000\u0de3\u0de4\u0003\u014c\u00a6\u0000"+
		"\u0de4\u0de5\u0005\u001a\u0000\u0000\u0de5\u0de6\u0003\u010c\u0086\u0000"+
		"\u0de6\u0de8\u0001\u0000\u0000\u0000\u0de7\u0dde\u0001\u0000\u0000\u0000"+
		"\u0de7\u0ddf\u0001\u0000\u0000\u0000\u0de7\u0de3\u0001\u0000\u0000\u0000"+
		"\u0de8\u014f\u0001\u0000\u0000\u0000\u0de9\u0dee\u0003\u017e\u00bf\u0000"+
		"\u0dea\u0deb\u0005$\u0000\u0000\u0deb\u0ded\u0003\u017e\u00bf\u0000\u0dec"+
		"\u0dea\u0001\u0000\u0000\u0000\u0ded\u0df0\u0001\u0000\u0000\u0000\u0dee"+
		"\u0dec\u0001\u0000\u0000\u0000\u0dee\u0def\u0001\u0000\u0000\u0000\u0def"+
		"\u0151\u0001\u0000\u0000\u0000\u0df0\u0dee\u0001\u0000\u0000\u0000\u0df1"+
		"\u0df2\u0003\u0154\u00aa\u0000\u0df2\u0df3\u0005\u001e\u0000\u0000\u0df3"+
		"\u0df4\u0005\u001f\u0000\u0000\u0df4\u0e29\u0001\u0000\u0000\u0000\u0df5"+
		"\u0df6\u0003\u0154\u00aa\u0000\u0df6\u0df7\u0005\u001e\u0000\u0000\u0df7"+
		"\u0df9\u0003\u014a\u00a5\u0000\u0df8\u0dfa\u0003\u01ee\u00f7\u0000\u0df9"+
		"\u0df8\u0001\u0000\u0000\u0000\u0df9\u0dfa\u0001\u0000\u0000\u0000\u0dfa"+
		"\u0dfb\u0001\u0000\u0000\u0000\u0dfb\u0dfc\u0005\u001f\u0000\u0000\u0dfc"+
		"\u0e29\u0001\u0000\u0000\u0000\u0dfd\u0dfe\u0003\u0154\u00aa\u0000\u0dfe"+
		"\u0dff\u0005\u001e\u0000\u0000\u0dff\u0e00\u0005\u0109\u0000\u0000\u0e00"+
		"\u0e02\u0003\u014e\u00a7\u0000\u0e01\u0e03\u0003\u01ee\u00f7\u0000\u0e02"+
		"\u0e01\u0001\u0000\u0000\u0000\u0e02\u0e03\u0001\u0000\u0000\u0000\u0e03"+
		"\u0e04\u0001\u0000\u0000\u0000\u0e04\u0e05\u0005\u001f\u0000\u0000\u0e05"+
		"\u0e29\u0001\u0000\u0000\u0000\u0e06\u0e07\u0003\u0154\u00aa\u0000\u0e07"+
		"\u0e08\u0005\u001e\u0000\u0000\u0e08\u0e09\u0003\u014a\u00a5\u0000\u0e09"+
		"\u0e0a\u0005$\u0000\u0000\u0e0a\u0e0b\u0005\u0109\u0000\u0000\u0e0b\u0e0d"+
		"\u0003\u014e\u00a7\u0000\u0e0c\u0e0e\u0003\u01ee\u00f7\u0000\u0e0d\u0e0c"+
		"\u0001\u0000\u0000\u0000\u0e0d\u0e0e\u0001\u0000\u0000\u0000\u0e0e\u0e0f"+
		"\u0001\u0000\u0000\u0000\u0e0f\u0e10\u0005\u001f\u0000\u0000\u0e10\u0e29"+
		"\u0001\u0000\u0000\u0000\u0e11\u0e12\u0003\u0154\u00aa\u0000\u0e12\u0e13"+
		"\u0005\u001e\u0000\u0000\u0e13\u0e14\u0005\u01f4\u0000\u0000\u0e14\u0e16"+
		"\u0003\u014a\u00a5\u0000\u0e15\u0e17\u0003\u01ee\u00f7\u0000\u0e16\u0e15"+
		"\u0001\u0000\u0000\u0000\u0e16\u0e17\u0001\u0000\u0000\u0000\u0e17\u0e18"+
		"\u0001\u0000\u0000\u0000\u0e18\u0e19\u0005\u001f\u0000\u0000\u0e19\u0e29"+
		"\u0001\u0000\u0000\u0000\u0e1a\u0e1b\u0003\u0154\u00aa\u0000\u0e1b\u0e1c"+
		"\u0005\u001e\u0000\u0000\u0e1c\u0e1d\u0005\u01d3\u0000\u0000\u0e1d\u0e1f"+
		"\u0003\u014a\u00a5\u0000\u0e1e\u0e20\u0003\u01ee\u00f7\u0000\u0e1f\u0e1e"+
		"\u0001\u0000\u0000\u0000\u0e1f\u0e20\u0001\u0000\u0000\u0000\u0e20\u0e21"+
		"\u0001\u0000\u0000\u0000\u0e21\u0e22\u0005\u001f\u0000\u0000\u0e22\u0e29"+
		"\u0001\u0000\u0000\u0000\u0e23\u0e24\u0003\u0154\u00aa\u0000\u0e24\u0e25"+
		"\u0005\u001e\u0000\u0000\u0e25\u0e26\u0005\u000f\u0000\u0000\u0e26\u0e27"+
		"\u0005\u001f\u0000\u0000\u0e27\u0e29\u0001\u0000\u0000\u0000\u0e28\u0df1"+
		"\u0001\u0000\u0000\u0000\u0e28\u0df5\u0001\u0000\u0000\u0000\u0e28\u0dfd"+
		"\u0001\u0000\u0000\u0000\u0e28\u0e06\u0001\u0000\u0000\u0000\u0e28\u0e11"+
		"\u0001\u0000\u0000\u0000\u0e28\u0e1a\u0001\u0000\u0000\u0000\u0e28\u0e23"+
		"\u0001\u0000\u0000\u0000\u0e29\u0153\u0001\u0000\u0000\u0000\u0e2a\u0e2f"+
		"\u0003\u0160\u00b0\u0000\u0e2b\u0e2c\u0003\u015c\u00ae\u0000\u0e2c\u0e2d"+
		"\u0003\u0112\u0089\u0000\u0e2d\u0e2f\u0001\u0000\u0000\u0000\u0e2e\u0e2a"+
		"\u0001\u0000\u0000\u0000\u0e2e\u0e2b\u0001\u0000\u0000\u0000\u0e2f\u0155"+
		"\u0001\u0000\u0000\u0000\u0e30\u0e4d\u0003\u0158\u00ac\u0000\u0e31\u0e4d"+
		"\u0005\u024f\u0000\u0000\u0e32\u0e36\u0005\u0001\u0000\u0000\u0e33\u0e35"+
		"\u0005\u0255\u0000\u0000\u0e34\u0e33\u0001\u0000\u0000\u0000\u0e35\u0e38"+
		"\u0001\u0000\u0000\u0000\u0e36\u0e34\u0001\u0000\u0000\u0000\u0e36\u0e37"+
		"\u0001\u0000\u0000\u0000\u0e37\u0e39\u0001\u0000\u0000\u0000\u0e38\u0e36"+
		"\u0001\u0000\u0000\u0000\u0e39\u0e4d\u0005\u0256\u0000\u0000\u0e3a\u0e3b"+
		"\u0003\u0154\u00aa\u0000\u0e3b\u0e3c\u0005\u024f\u0000\u0000\u0e3c\u0e4d"+
		"\u0001\u0000\u0000\u0000\u0e3d\u0e3e\u0003\u0154\u00aa\u0000\u0e3e\u0e3f"+
		"\u0005\u001e\u0000\u0000\u0e3f\u0e41\u0003\u014a\u00a5\u0000\u0e40\u0e42"+
		"\u0003\u01ee\u00f7\u0000\u0e41\u0e40\u0001\u0000\u0000\u0000\u0e41\u0e42"+
		"\u0001\u0000\u0000\u0000\u0e42\u0e43\u0001\u0000\u0000\u0000\u0e43\u0e44"+
		"\u0005\u001f\u0000\u0000\u0e44\u0e45\u0005\u024f\u0000\u0000\u0e45\u0e4d"+
		"\u0001\u0000\u0000\u0000\u0e46\u0e47\u0003\u0182\u00c1\u0000\u0e47\u0e48"+
		"\u0005\u024f\u0000\u0000\u0e48\u0e4d\u0001\u0000\u0000\u0000\u0e49\u0e4d"+
		"\u0005\u01f0\u0000\u0000\u0e4a\u0e4d\u0005\u01f1\u0000\u0000\u0e4b\u0e4d"+
		"\u0005\u01ef\u0000\u0000\u0e4c\u0e30\u0001\u0000\u0000\u0000\u0e4c\u0e31"+
		"\u0001\u0000\u0000\u0000\u0e4c\u0e32\u0001\u0000\u0000\u0000\u0e4c\u0e3a"+
		"\u0001\u0000\u0000\u0000\u0e4c\u0e3d\u0001\u0000\u0000\u0000\u0e4c\u0e46"+
		"\u0001\u0000\u0000\u0000\u0e4c\u0e49\u0001\u0000\u0000\u0000\u0e4c\u0e4a"+
		"\u0001\u0000\u0000\u0000\u0e4c\u0e4b\u0001\u0000\u0000\u0000\u0e4d\u0157"+
		"\u0001\u0000\u0000\u0000\u0e4e\u0e50\u0007\u0012\u0000\u0000\u0e4f\u0e4e"+
		"\u0001\u0000\u0000\u0000\u0e4f\u0e50\u0001\u0000\u0000\u0000\u0e50\u0e51"+
		"\u0001\u0000\u0000\u0000\u0e51\u0e52\u0005\u0250\u0000\u0000\u0e52\u0159"+
		"\u0001\u0000\u0000\u0000\u0e53\u0e58\u0003\u015c\u00ae\u0000\u0e54\u0e55"+
		"\u0003\u015c\u00ae\u0000\u0e55\u0e56\u0003\u0112\u0089\u0000\u0e56\u0e58"+
		"\u0001\u0000\u0000\u0000\u0e57\u0e53\u0001\u0000\u0000\u0000\u0e57\u0e54"+
		"\u0001\u0000\u0000\u0000\u0e58\u015b\u0001\u0000\u0000\u0000\u0e59\u0e5a"+
		"\u0003\u00e4r\u0000\u0e5a\u015d\u0001\u0000\u0000\u0000\u0e5b\u0e5c\u0003"+
		"\u00e4r\u0000\u0e5c\u015f\u0001\u0000\u0000\u0000\u0e5d\u0e61\u0003\u00e4"+
		"r\u0000\u0e5e\u0e61\u0003\u00e8t\u0000\u0e5f\u0e61\u0003\u00eau\u0000"+
		"\u0e60\u0e5d\u0001\u0000\u0000\u0000\u0e60\u0e5e\u0001\u0000\u0000\u0000"+
		"\u0e60\u0e5f\u0001\u0000\u0000\u0000\u0e61\u0161\u0001\u0000\u0000\u0000"+
		"\u0e62\u0e64\u0003\u0178\u00bc\u0000\u0e63\u0e65\u0003\u017a\u00bd\u0000"+
		"\u0e64\u0e63\u0001\u0000\u0000\u0000\u0e64\u0e65\u0001\u0000\u0000\u0000"+
		"\u0e65\u0e6f\u0001\u0000\u0000\u0000\u0e66\u0e67\u0005^\u0000\u0000\u0e67"+
		"\u0e68\u0005\u01d9\u0000\u0000\u0e68\u0e69\u0005\u001e\u0000\u0000\u0e69"+
		"\u0e6a\u0003\u01d6\u00eb\u0000\u0e6a\u0e6c\u0005\u001f\u0000\u0000\u0e6b"+
		"\u0e6d\u0003\u017a\u00bd\u0000\u0e6c\u0e6b\u0001\u0000\u0000\u0000\u0e6c"+
		"\u0e6d\u0001\u0000\u0000\u0000\u0e6d\u0e6f\u0001\u0000\u0000\u0000\u0e6e"+
		"\u0e62\u0001\u0000\u0000\u0000\u0e6e\u0e66\u0001\u0000\u0000\u0000\u0e6f"+
		"\u0163\u0001\u0000\u0000\u0000\u0e70\u0e71\u0005\u010c\u0000\u0000\u0e71"+
		"\u0e72\u0005\u001e\u0000\u0000\u0e72\u0e73\u0003\u0110\u0088\u0000\u0e73"+
		"\u0e74\u0003\u01c8\u00e4\u0000\u0e74\u0e75\u0005\u010d\u0000\u0000\u0e75"+
		"\u0e76\u0003\u0166\u00b3\u0000\u0e76\u0e77\u0005\u001f\u0000\u0000\u0e77"+
		"\u0e86\u0001\u0000\u0000\u0000\u0e78\u0e79\u0005\u010c\u0000\u0000\u0e79"+
		"\u0e7a\u0005\u001e\u0000\u0000\u0e7a\u0e7b\u0005\u0111\u0000\u0000\u0e7b"+
		"\u0e7c\u0005\u001e\u0000\u0000\u0e7c\u0e7d\u0003\u016e\u00b7\u0000\u0e7d"+
		"\u0e7e\u0005\u001f\u0000\u0000\u0e7e\u0e7f\u0005$\u0000\u0000\u0e7f\u0e80"+
		"\u0003\u0110\u0088\u0000\u0e80\u0e81\u0003\u01c8\u00e4\u0000\u0e81\u0e82"+
		"\u0005\u010d\u0000\u0000\u0e82\u0e83\u0003\u0166\u00b3\u0000\u0e83\u0e84"+
		"\u0005\u001f\u0000\u0000\u0e84\u0e86\u0001\u0000\u0000\u0000\u0e85\u0e70"+
		"\u0001\u0000\u0000\u0000\u0e85\u0e78\u0001\u0000\u0000\u0000\u0e86\u0165"+
		"\u0001\u0000\u0000\u0000\u0e87\u0e8c\u0003\u0168\u00b4\u0000\u0e88\u0e89"+
		"\u0005$\u0000\u0000\u0e89\u0e8b\u0003\u0168\u00b4\u0000\u0e8a\u0e88\u0001"+
		"\u0000\u0000\u0000\u0e8b\u0e8e\u0001\u0000\u0000\u0000\u0e8c\u0e8a\u0001"+
		"\u0000\u0000\u0000\u0e8c\u0e8d\u0001\u0000\u0000\u0000\u0e8d\u0167\u0001"+
		"\u0000\u0000\u0000\u0e8e\u0e8c\u0001\u0000\u0000\u0000\u0e8f\u0e90\u0003"+
		"\u015c\u00ae\u0000\u0e90\u0e91\u0003\u017e\u00bf\u0000\u0e91\u0e9b\u0001"+
		"\u0000\u0000\u0000\u0e92\u0e93\u0003\u015c\u00ae\u0000\u0e93\u0e94\u0003"+
		"\u017e\u00bf\u0000\u0e94\u0e95\u0003\u016a\u00b5\u0000\u0e95\u0e9b\u0001"+
		"\u0000\u0000\u0000\u0e96\u0e97\u0003\u015c\u00ae\u0000\u0e97\u0e98\u0005"+
		"\u01e9\u0000\u0000\u0e98\u0e99\u0005\u00e1\u0000\u0000\u0e99\u0e9b\u0001"+
		"\u0000\u0000\u0000\u0e9a\u0e8f\u0001\u0000\u0000\u0000\u0e9a\u0e92\u0001"+
		"\u0000\u0000\u0000\u0e9a\u0e96\u0001\u0000\u0000\u0000\u0e9b\u0169\u0001"+
		"\u0000\u0000\u0000\u0e9c\u0e9d\u0006\u00b5\uffff\uffff\u0000\u0e9d\u0e9e"+
		"\u0003\u016c\u00b6\u0000\u0e9e\u0ea3\u0001\u0000\u0000\u0000\u0e9f\u0ea0"+
		"\n\u0001\u0000\u0000\u0ea0\u0ea2\u0003\u016c\u00b6\u0000\u0ea1\u0e9f\u0001"+
		"\u0000\u0000\u0000\u0ea2\u0ea5\u0001\u0000\u0000\u0000\u0ea3\u0ea1\u0001"+
		"\u0000\u0000\u0000\u0ea3\u0ea4\u0001\u0000\u0000\u0000\u0ea4\u016b\u0001"+
		"\u0000\u0000\u0000\u0ea5\u0ea3\u0001\u0000\u0000\u0000\u0ea6\u0ea7\u0003"+
		"\u00e4r\u0000\u0ea7\u0ea8\u0003\u010e\u0087\u0000\u0ea8\u0eaf\u0001\u0000"+
		"\u0000\u0000\u0ea9\u0eaa\u0005\u0217\u0000\u0000\u0eaa\u0eaf\u0003\u010e"+
		"\u0087\u0000\u0eab\u0eac\u0005\u01ee\u0000\u0000\u0eac\u0eaf\u0005\u01ef"+
		"\u0000\u0000\u0ead\u0eaf\u0005\u01ef\u0000\u0000\u0eae\u0ea6\u0001\u0000"+
		"\u0000\u0000\u0eae\u0ea9\u0001\u0000\u0000\u0000\u0eae\u0eab\u0001\u0000"+
		"\u0000\u0000\u0eae\u0ead\u0001\u0000\u0000\u0000\u0eaf\u016d\u0001\u0000"+
		"\u0000\u0000\u0eb0\u0eb5\u0003\u0170\u00b8\u0000\u0eb1\u0eb2\u0005$\u0000"+
		"\u0000\u0eb2\u0eb4\u0003\u0170\u00b8\u0000\u0eb3\u0eb1\u0001\u0000\u0000"+
		"\u0000\u0eb4\u0eb7\u0001\u0000\u0000\u0000\u0eb5\u0eb3\u0001\u0000\u0000"+
		"\u0000\u0eb5\u0eb6\u0001\u0000\u0000\u0000\u0eb6\u016f\u0001\u0000\u0000"+
		"\u0000\u0eb7\u0eb5\u0001\u0000\u0000\u0000\u0eb8\u0eb9\u0003\u010e\u0087"+
		"\u0000\u0eb9\u0eba\u0005\u01e4\u0000\u0000\u0eba\u0ebb\u0003\u00e4r\u0000"+
		"\u0ebb\u0ebf\u0001\u0000\u0000\u0000\u0ebc\u0ebd\u0005\u0217\u0000\u0000"+
		"\u0ebd\u0ebf\u0003\u010e\u0087\u0000\u0ebe\u0eb8\u0001\u0000\u0000\u0000"+
		"\u0ebe\u0ebc\u0001\u0000\u0000\u0000\u0ebf\u0171\u0001\u0000\u0000\u0000"+
		"\u0ec0\u0ec2\u0003\u0152\u00a9\u0000\u0ec1\u0ec3\u0003\u0174\u00ba\u0000"+
		"\u0ec2\u0ec1\u0001\u0000\u0000\u0000\u0ec2\u0ec3\u0001\u0000\u0000\u0000"+
		"\u0ec3\u0ec5\u0001\u0000\u0000\u0000\u0ec4\u0ec6\u0003\u0176\u00bb\u0000"+
		"\u0ec5\u0ec4\u0001\u0000\u0000\u0000\u0ec5\u0ec6\u0001\u0000\u0000\u0000"+
		"\u0ec6\u0ec8\u0001\u0000\u0000\u0000\u0ec7\u0ec9\u0003\u01fa\u00fd\u0000"+
		"\u0ec8\u0ec7\u0001\u0000\u0000\u0000\u0ec8\u0ec9\u0001\u0000\u0000\u0000"+
		"\u0ec9\u0ecc\u0001\u0000\u0000\u0000\u0eca\u0ecc\u0003\u017c\u00be\u0000"+
		"\u0ecb\u0ec0\u0001\u0000\u0000\u0000\u0ecb\u0eca\u0001\u0000\u0000\u0000"+
		"\u0ecc\u0173\u0001\u0000\u0000\u0000\u0ecd\u0ece\u0005\u00b5\u0000\u0000"+
		"\u0ece\u0ecf\u0005\u01f8\u0000\u0000\u0ecf\u0ed0\u0005\u001e\u0000\u0000"+
		"\u0ed0\u0ed1\u0003\u01ee\u00f7\u0000\u0ed1\u0ed2\u0005\u001f\u0000\u0000"+
		"\u0ed2\u0175\u0001\u0000\u0000\u0000\u0ed3\u0ed4\u0005|\u0000\u0000\u0ed4"+
		"\u0ed5\u0005\u001e\u0000\u0000\u0ed5\u0ed6\u0005\u01e3\u0000\u0000\u0ed6"+
		"\u0ed7\u0003\u010c\u0086\u0000\u0ed7\u0ed8\u0005\u001f\u0000\u0000\u0ed8"+
		"\u0177\u0001\u0000\u0000\u0000\u0ed9\u0edc\u0003\u0152\u00a9\u0000\u0eda"+
		"\u0edc\u0003\u017c\u00be\u0000\u0edb\u0ed9\u0001\u0000\u0000\u0000\u0edb"+
		"\u0eda\u0001\u0000\u0000\u0000\u0edc\u0179\u0001\u0000\u0000\u0000\u0edd"+
		"\u0ede\u0005\u01d1\u0000\u0000\u0ede\u0edf\u0005\u00e1\u0000\u0000\u0edf"+
		"\u017b\u0001\u0000\u0000\u0000\u0ee0\u0ee1\u0005\u0228\u0000\u0000\u0ee1"+
		"\u0ee2\u0005\u01e9\u0000\u0000\u0ee2\u0ee3\u0005\u001e\u0000\u0000\u0ee3"+
		"\u0ee4\u0003\u010c\u0086\u0000\u0ee4\u0ee5\u0005\u001f\u0000\u0000\u0ee5"+
		"\u0fb5\u0001\u0000\u0000\u0000\u0ee6\u0fb5\u0005\u0233\u0000\u0000\u0ee7"+
		"\u0fb5\u0005\u0234\u0000\u0000\u0ee8\u0ee9\u0005\u0234\u0000\u0000\u0ee9"+
		"\u0eea\u0005\u001e\u0000\u0000\u0eea\u0eeb\u0005\u0250\u0000\u0000\u0eeb"+
		"\u0fb5\u0005\u001f\u0000\u0000\u0eec\u0fb5\u0005m\u0000\u0000\u0eed\u0eee"+
		"\u0005m\u0000\u0000\u0eee\u0eef\u0005\u001e\u0000\u0000\u0eef\u0ef0\u0005"+
		"\u0250\u0000\u0000\u0ef0\u0fb5\u0005\u001f\u0000\u0000\u0ef1\u0fb5\u0005"+
		"\u020c\u0000\u0000\u0ef2\u0ef3\u0005\u020c\u0000\u0000\u0ef3\u0ef4\u0005"+
		"\u001e\u0000\u0000\u0ef4\u0ef5\u0005\u0250\u0000\u0000\u0ef5\u0fb5\u0005"+
		"\u001f\u0000\u0000\u0ef6\u0fb5\u0005\u020d\u0000\u0000\u0ef7\u0ef8\u0005"+
		"\u020d\u0000\u0000\u0ef8\u0ef9\u0005\u001e\u0000\u0000\u0ef9\u0efa\u0005"+
		"\u0250\u0000\u0000\u0efa\u0fb5\u0005\u001f\u0000\u0000\u0efb\u0fb5\u0005"+
		"\u00e2\u0000\u0000\u0efc\u0fb5\u0005\u0220\u0000\u0000\u0efd\u0fb5\u0005"+
		"\u00a8\u0000\u0000\u0efe\u0fb5\u0005a\u0000\u0000\u0eff\u0fb5\u0005\u00e3"+
		"\u0000\u0000\u0f00\u0fb5\u0005\u00e4\u0000\u0000\u0f01\u0f02\u0005\u01d6"+
		"\u0000\u0000\u0f02\u0f03\u0005\u001e\u0000\u0000\u0f03\u0f04\u0003\u010c"+
		"\u0086\u0000\u0f04\u0f05\u0005\u01e4\u0000\u0000\u0f05\u0f06\u0003\u017e"+
		"\u00bf\u0000\u0f06\u0f07\u0005\u001f\u0000\u0000\u0f07\u0fb5\u0001\u0000"+
		"\u0000\u0000\u0f08\u0f09\u0005{\u0000\u0000\u0f09\u0f0b\u0005\u001e\u0000"+
		"\u0000\u0f0a\u0f0c\u0003\u0186\u00c3\u0000\u0f0b\u0f0a\u0001\u0000\u0000"+
		"\u0000\u0f0b\u0f0c\u0001\u0000\u0000\u0000\u0f0c\u0f0d\u0001\u0000\u0000"+
		"\u0000\u0f0d\u0fb5\u0005\u001f\u0000\u0000\u0f0e\u0f0f\u0005\u00e5\u0000"+
		"\u0000\u0f0f\u0f10\u0005\u001e\u0000\u0000\u0f10\u0f11\u0003\u010c\u0086"+
		"\u0000\u0f11\u0f12\u0005\u001f\u0000\u0000\u0f12\u0fb5\u0001\u0000\u0000"+
		"\u0000\u0f13\u0f14\u0005\u00e5\u0000\u0000\u0f14\u0f15\u0005\u001e\u0000"+
		"\u0000\u0f15\u0f16\u0003\u010c\u0086\u0000\u0f16\u0f17\u0005$\u0000\u0000"+
		"\u0f17\u0f18\u0003\u01b2\u00d9\u0000\u0f18\u0f19\u0005\u001f\u0000\u0000"+
		"\u0f19\u0fb5\u0001\u0000\u0000\u0000\u0f1a\u0f1b\u0005\u00e6\u0000\u0000"+
		"\u0f1b\u0f1c\u0005\u001e\u0000\u0000\u0f1c\u0f1d\u0003\u01b6\u00db\u0000"+
		"\u0f1d\u0f1e\u0005\u001f\u0000\u0000\u0f1e\u0fb5\u0001\u0000\u0000\u0000"+
		"\u0f1f\u0f20\u0005\u01c9\u0000\u0000\u0f20\u0f21\u0005\u001e\u0000\u0000"+
		"\u0f21\u0f22\u0003\u01be\u00df\u0000\u0f22\u0f23\u0005\u001f\u0000\u0000"+
		"\u0f23\u0fb5\u0001\u0000\u0000\u0000\u0f24\u0f25\u0005\u01d8\u0000\u0000"+
		"\u0f25\u0f26\u0005\u001e\u0000\u0000\u0f26\u0f27\u0003\u01c0\u00e0\u0000"+
		"\u0f27\u0f28\u0005\u001f\u0000\u0000\u0f28\u0fb5\u0001\u0000\u0000\u0000"+
		"\u0f29\u0f2a\u0005\u00ef\u0000\u0000\u0f2a\u0f2b\u0005\u001e\u0000\u0000"+
		"\u0f2b\u0f2c\u0003\u010c\u0086\u0000\u0f2c\u0f2d\u0005\u01e4\u0000\u0000"+
		"\u0f2d\u0f2e\u0003\u017e\u00bf\u0000\u0f2e\u0f2f\u0005\u001f\u0000\u0000"+
		"\u0f2f\u0fb5\u0001\u0000\u0000\u0000\u0f30\u0f31\u0005\u01d7\u0000\u0000"+
		"\u0f31\u0f32\u0005\u001e\u0000\u0000\u0f32\u0f33\u0005\u023a\u0000\u0000"+
		"\u0f33\u0f34\u0003\u01b4\u00da\u0000\u0f34\u0f35\u0005\u001f\u0000\u0000"+
		"\u0f35\u0fb5\u0001\u0000\u0000\u0000\u0f36\u0f37\u0005\u01d7\u0000\u0000"+
		"\u0f37\u0f38\u0005\u001e\u0000\u0000\u0f38\u0f39\u0005\u023b\u0000\u0000"+
		"\u0f39\u0f3a\u0003\u01b4\u00da\u0000\u0f3a\u0f3b\u0005\u001f\u0000\u0000"+
		"\u0f3b\u0fb5\u0001\u0000\u0000\u0000\u0f3c\u0f3d\u0005\u01d7\u0000\u0000"+
		"\u0f3d\u0f3e\u0005\u001e\u0000\u0000\u0f3e\u0f3f\u0005\u023c\u0000\u0000"+
		"\u0f3f\u0f40\u0003\u01b4\u00da\u0000\u0f40\u0f41\u0005\u001f\u0000\u0000"+
		"\u0f41\u0fb5\u0001\u0000\u0000\u0000\u0f42\u0f43\u0005\u01d7\u0000\u0000"+
		"\u0f43\u0f44\u0005\u001e\u0000\u0000\u0f44\u0f45\u0003\u01b4\u00da\u0000"+
		"\u0f45\u0f46\u0005\u001f\u0000\u0000\u0f46\u0fb5\u0001\u0000\u0000\u0000"+
		"\u0f47\u0f48\u0005\u0235\u0000\u0000\u0f48\u0f49\u0005\u001e\u0000\u0000"+
		"\u0f49\u0f4a\u0003\u010c\u0086\u0000\u0f4a\u0f4b\u0005$\u0000\u0000\u0f4b"+
		"\u0f4c\u0003\u010c\u0086\u0000\u0f4c\u0f4d\u0005\u001f\u0000\u0000\u0f4d"+
		"\u0fb5\u0001\u0000\u0000\u0000\u0f4e\u0f4f\u0005\u023d\u0000\u0000\u0f4f"+
		"\u0f50\u0005\u001e\u0000\u0000\u0f50\u0f51\u0003\u0184\u00c2\u0000\u0f51"+
		"\u0f52\u0005\u001f\u0000\u0000\u0f52\u0fb5\u0001\u0000\u0000\u0000\u0f53"+
		"\u0f54\u0005\u00fb\u0000\u0000\u0f54\u0f55\u0005\u001e\u0000\u0000\u0f55"+
		"\u0f56\u0003\u0184\u00c2\u0000\u0f56\u0f57\u0005\u001f\u0000\u0000\u0f57"+
		"\u0fb5\u0001\u0000\u0000\u0000\u0f58\u0f59\u0005\u00fc\u0000\u0000\u0f59"+
		"\u0f5a\u0005\u001e\u0000\u0000\u0f5a\u0f5b\u0003\u0184\u00c2\u0000\u0f5b"+
		"\u0f5c\u0005\u001f\u0000\u0000\u0f5c\u0fb5\u0001\u0000\u0000\u0000\u0f5d"+
		"\u0f5e\u0005\u00e7\u0000\u0000\u0f5e\u0f5f\u0005\u001e\u0000\u0000\u0f5f"+
		"\u0f60\u0003\u0184\u00c2\u0000\u0f60\u0f61\u0005\u001f\u0000\u0000\u0f61"+
		"\u0fb5\u0001\u0000\u0000\u0000\u0f62\u0f63\u0005\u00e8\u0000\u0000\u0f63"+
		"\u0f64\u0005\u001e\u0000\u0000\u0f64\u0f65\u0005\u0227\u0000\u0000\u0f65"+
		"\u0f66\u0003\u00e4r\u0000\u0f66\u0f67\u0005\u001f\u0000\u0000\u0f67\u0fb5"+
		"\u0001\u0000\u0000\u0000\u0f68\u0f69\u0005\u00e8\u0000\u0000\u0f69\u0f6a"+
		"\u0005\u001e\u0000\u0000\u0f6a\u0f6b\u0005\u0227\u0000\u0000\u0f6b\u0f6c"+
		"\u0003\u00e4r\u0000\u0f6c\u0f6d\u0005$\u0000\u0000\u0f6d\u0f6e\u0003\u01c2"+
		"\u00e1\u0000\u0f6e\u0f6f\u0005\u001f\u0000\u0000\u0f6f\u0fb5\u0001\u0000"+
		"\u0000\u0000\u0f70\u0f71\u0005\u00e8\u0000\u0000\u0f71\u0f72\u0005\u001e"+
		"\u0000\u0000\u0f72\u0f73\u0005\u0227\u0000\u0000\u0f73\u0f74\u0003\u00e4"+
		"r\u0000\u0f74\u0f75\u0005$\u0000\u0000\u0f75\u0f76\u0003\u0184\u00c2\u0000"+
		"\u0f76\u0f77\u0005\u001f\u0000\u0000\u0f77\u0fb5\u0001\u0000\u0000\u0000"+
		"\u0f78\u0f79\u0005\u00e8\u0000\u0000\u0f79\u0f7a\u0005\u001e\u0000\u0000"+
		"\u0f7a\u0f7b\u0005\u0227\u0000\u0000\u0f7b\u0f7c\u0003\u00e4r\u0000\u0f7c"+
		"\u0f7d\u0005$\u0000\u0000\u0f7d\u0f7e\u0003\u01c2\u00e1\u0000\u0f7e\u0f7f"+
		"\u0005$\u0000\u0000\u0f7f\u0f80\u0003\u0184\u00c2\u0000\u0f80\u0f81\u0005"+
		"\u001f\u0000\u0000\u0f81\u0fb5\u0001\u0000\u0000\u0000\u0f82\u0f83\u0005"+
		"\u00e9\u0000\u0000\u0f83\u0f84\u0005\u001e\u0000\u0000\u0f84\u0f85\u0003"+
		"\u0110\u0088\u0000\u0f85\u0f86\u0003\u01c8\u00e4\u0000\u0f86\u0f87\u0005"+
		"\u001f\u0000\u0000\u0f87\u0fb5\u0001\u0000\u0000\u0000\u0f88\u0f89\u0005"+
		"\u00ea\u0000\u0000\u0f89\u0f8a\u0005\u001e\u0000\u0000\u0f8a\u0f8b\u0003"+
		"\u01c4\u00e2\u0000\u0f8b\u0f8c\u0005\u001f\u0000\u0000\u0f8c\u0fb5\u0001"+
		"\u0000\u0000\u0000\u0f8d\u0f8e\u0005\u00eb\u0000\u0000\u0f8e\u0f8f\u0005"+
		"\u001e\u0000\u0000\u0f8f\u0f90\u0003\u01cc\u00e6\u0000\u0f90\u0f91\u0003"+
		"\u010c\u0086\u0000\u0f91\u0f92\u0003\u01ce\u00e7\u0000\u0f92\u0f93\u0005"+
		"\u001f\u0000\u0000\u0f93\u0fb5\u0001\u0000\u0000\u0000\u0f94\u0f95\u0005"+
		"\u00ec\u0000\u0000\u0f95\u0f96\u0005\u001e\u0000\u0000\u0f96\u0f97\u0005"+
		"\u0227\u0000\u0000\u0f97\u0f98\u0003\u00e4r\u0000\u0f98\u0f99\u0005\u001f"+
		"\u0000\u0000\u0f99\u0fb5\u0001\u0000\u0000\u0000\u0f9a\u0f9b\u0005\u00ec"+
		"\u0000\u0000\u0f9b\u0f9c\u0005\u001e\u0000\u0000\u0f9c\u0f9d\u0005\u0227"+
		"\u0000\u0000\u0f9d\u0f9e\u0003\u00e4r\u0000\u0f9e\u0f9f\u0005$\u0000\u0000"+
		"\u0f9f\u0fa0\u0003\u010c\u0086\u0000\u0fa0\u0fa1\u0005\u001f\u0000\u0000"+
		"\u0fa1\u0fb5\u0001\u0000\u0000\u0000\u0fa2\u0fa3\u0005\u00ed\u0000\u0000"+
		"\u0fa3\u0fa4\u0005\u001e\u0000\u0000\u0fa4\u0fa5\u0003\u010c\u0086\u0000"+
		"\u0fa5\u0fa6\u0005$\u0000\u0000\u0fa6\u0fa8\u0003\u01d0\u00e8\u0000\u0fa7"+
		"\u0fa9\u0003\u01d2\u00e9\u0000\u0fa8\u0fa7\u0001\u0000\u0000\u0000\u0fa8"+
		"\u0fa9\u0001\u0000\u0000\u0000\u0fa9\u0faa\u0001\u0000\u0000\u0000\u0faa"+
		"\u0fab\u0005\u001f\u0000\u0000\u0fab\u0fb5\u0001\u0000\u0000\u0000\u0fac"+
		"\u0fad\u0005\u00ee\u0000\u0000\u0fad\u0fae\u0005\u001e\u0000\u0000\u0fae"+
		"\u0faf\u0003\u01cc\u00e6\u0000\u0faf\u0fb0\u0003\u010c\u0086\u0000\u0fb0"+
		"\u0fb1\u0005\u01e4\u0000\u0000\u0fb1\u0fb2\u0003\u0180\u00c0\u0000\u0fb2"+
		"\u0fb3\u0005\u001f\u0000\u0000\u0fb3\u0fb5\u0001\u0000\u0000\u0000\u0fb4"+
		"\u0ee0\u0001\u0000\u0000\u0000\u0fb4\u0ee6\u0001\u0000\u0000\u0000\u0fb4"+
		"\u0ee7\u0001\u0000\u0000\u0000\u0fb4\u0ee8\u0001\u0000\u0000\u0000\u0fb4"+
		"\u0eec\u0001\u0000\u0000\u0000\u0fb4\u0eed\u0001\u0000\u0000\u0000\u0fb4"+
		"\u0ef1\u0001\u0000\u0000\u0000\u0fb4\u0ef2\u0001\u0000\u0000\u0000\u0fb4"+
		"\u0ef6\u0001\u0000\u0000\u0000\u0fb4\u0ef7\u0001\u0000\u0000\u0000\u0fb4"+
		"\u0efb\u0001\u0000\u0000\u0000\u0fb4\u0efc\u0001\u0000\u0000\u0000\u0fb4"+
		"\u0efd\u0001\u0000\u0000\u0000\u0fb4\u0efe\u0001\u0000\u0000\u0000\u0fb4"+
		"\u0eff\u0001\u0000\u0000\u0000\u0fb4\u0f00\u0001\u0000\u0000\u0000\u0fb4"+
		"\u0f01\u0001\u0000\u0000\u0000\u0fb4\u0f08\u0001\u0000\u0000\u0000\u0fb4"+
		"\u0f0e\u0001\u0000\u0000\u0000\u0fb4\u0f13\u0001\u0000\u0000\u0000\u0fb4"+
		"\u0f1a\u0001\u0000\u0000\u0000\u0fb4\u0f1f\u0001\u0000\u0000\u0000\u0fb4"+
		"\u0f24\u0001\u0000\u0000\u0000\u0fb4\u0f29\u0001\u0000\u0000\u0000\u0fb4"+
		"\u0f30\u0001\u0000\u0000\u0000\u0fb4\u0f36\u0001\u0000\u0000\u0000\u0fb4"+
		"\u0f3c\u0001\u0000\u0000\u0000\u0fb4\u0f42\u0001\u0000\u0000\u0000\u0fb4"+
		"\u0f47\u0001\u0000\u0000\u0000\u0fb4\u0f4e\u0001\u0000\u0000\u0000\u0fb4"+
		"\u0f53\u0001\u0000\u0000\u0000\u0fb4\u0f58\u0001\u0000\u0000\u0000\u0fb4"+
		"\u0f5d\u0001\u0000\u0000\u0000\u0fb4\u0f62\u0001\u0000\u0000\u0000\u0fb4"+
		"\u0f68\u0001\u0000\u0000\u0000\u0fb4\u0f70\u0001\u0000\u0000\u0000\u0fb4"+
		"\u0f78\u0001\u0000\u0000\u0000\u0fb4\u0f82\u0001\u0000\u0000\u0000\u0fb4"+
		"\u0f88\u0001\u0000\u0000\u0000\u0fb4\u0f8d\u0001\u0000\u0000\u0000\u0fb4"+
		"\u0f94\u0001\u0000\u0000\u0000\u0fb4\u0f9a\u0001\u0000\u0000\u0000\u0fb4"+
		"\u0fa2\u0001\u0000\u0000\u0000\u0fb4\u0fac\u0001\u0000\u0000\u0000\u0fb5"+
		"\u017d\u0001\u0000\u0000\u0000\u0fb6\u0fb7\u0003\u0180\u00c0\u0000\u0fb7"+
		"\u0fb8\u0003\u01ae\u00d7\u0000\u0fb8\u0fd2\u0001\u0000\u0000\u0000\u0fb9"+
		"\u0fba\u0005\u00f0\u0000\u0000\u0fba\u0fbb\u0003\u0180\u00c0\u0000\u0fbb"+
		"\u0fbc\u0003\u01ae\u00d7\u0000\u0fbc\u0fd2\u0001\u0000\u0000\u0000\u0fbd"+
		"\u0fbe\u0003\u0180\u00c0\u0000\u0fbe\u0fbf\u0005\u0207\u0000\u0000\u0fbf"+
		"\u0fc0\u0005\"\u0000\u0000\u0fc0\u0fc1\u0005\u0250\u0000\u0000\u0fc1\u0fc2"+
		"\u0005#\u0000\u0000\u0fc2\u0fd2\u0001\u0000\u0000\u0000\u0fc3\u0fc4\u0005"+
		"\u00f0\u0000\u0000\u0fc4\u0fc5\u0003\u0180\u00c0\u0000\u0fc5\u0fc6\u0005"+
		"\u0207\u0000\u0000\u0fc6\u0fc7\u0005\"\u0000\u0000\u0fc7\u0fc8\u0005\u0250"+
		"\u0000\u0000\u0fc8\u0fc9\u0005#\u0000\u0000\u0fc9\u0fd2\u0001\u0000\u0000"+
		"\u0000\u0fca\u0fcb\u0003\u0180\u00c0\u0000\u0fcb\u0fcc\u0005\u0207\u0000"+
		"\u0000\u0fcc\u0fd2\u0001\u0000\u0000\u0000\u0fcd\u0fce\u0005\u00f0\u0000"+
		"\u0000\u0fce\u0fcf\u0003\u0180\u00c0\u0000\u0fcf\u0fd0\u0005\u0207\u0000"+
		"\u0000\u0fd0\u0fd2\u0001\u0000\u0000\u0000\u0fd1\u0fb6\u0001\u0000\u0000"+
		"\u0000\u0fd1\u0fb9\u0001\u0000\u0000\u0000\u0fd1\u0fbd\u0001\u0000\u0000"+
		"\u0000\u0fd1\u0fc3\u0001\u0000\u0000\u0000\u0fd1\u0fca\u0001\u0000\u0000"+
		"\u0000\u0fd1\u0fcd\u0001\u0000\u0000\u0000\u0fd2\u017f\u0001\u0000\u0000"+
		"\u0000\u0fd3\u0fe1\u0003\u018a\u00c5\u0000\u0fd4\u0fe1\u0003\u018e\u00c7"+
		"\u0000\u0fd5\u0fe1\u0003\u01a4\u00d2\u0000\u0fd6\u0fe1\u0003\u0194\u00ca"+
		"\u0000\u0fd7\u0fe1\u0003\u0190\u00c8\u0000\u0fd8\u0fd9\u0003\u01aa\u00d5"+
		"\u0000\u0fd9\u0fda\u0003\u01ac\u00d6\u0000\u0fda\u0fe1\u0001\u0000\u0000"+
		"\u0000\u0fdb\u0fdc\u0003\u01aa\u00d5\u0000\u0fdc\u0fdd\u0005\u001e\u0000"+
		"\u0000\u0fdd\u0fde\u0005\u0250\u0000\u0000\u0fde\u0fdf\u0005\u001f\u0000"+
		"\u0000\u0fdf\u0fe1\u0001\u0000\u0000\u0000\u0fe0\u0fd3\u0001\u0000\u0000"+
		"\u0000\u0fe0\u0fd4\u0001\u0000\u0000\u0000\u0fe0\u0fd5\u0001\u0000\u0000"+
		"\u0000\u0fe0\u0fd6\u0001\u0000\u0000\u0000\u0fe0\u0fd7\u0001\u0000\u0000"+
		"\u0000\u0fe0\u0fd8\u0001\u0000\u0000\u0000\u0fe0\u0fdb\u0001\u0000\u0000"+
		"\u0000\u0fe1\u0181\u0001\u0000\u0000\u0000\u0fe2\u0fe7\u0003\u018e\u00c7"+
		"\u0000\u0fe3\u0fe7\u0003\u01a4\u00d2\u0000\u0fe4\u0fe7\u0003\u0194\u00ca"+
		"\u0000\u0fe5\u0fe7\u0003\u0190\u00c8\u0000\u0fe6\u0fe2\u0001\u0000\u0000"+
		"\u0000\u0fe6\u0fe3\u0001\u0000\u0000\u0000\u0fe6\u0fe4\u0001\u0000\u0000"+
		"\u0000\u0fe6\u0fe5\u0001\u0000\u0000\u0000\u0fe7\u0183\u0001\u0000\u0000"+
		"\u0000\u0fe8\u0fe9\u0006\u00c2\uffff\uffff\u0000\u0fe9\u0fea\u0003\u010c"+
		"\u0086\u0000\u0fea\u0ff0\u0001\u0000\u0000\u0000\u0feb\u0fec\n\u0001\u0000"+
		"\u0000\u0fec\u0fed\u0005$\u0000\u0000\u0fed\u0fef\u0003\u010c\u0086\u0000"+
		"\u0fee\u0feb\u0001\u0000\u0000\u0000\u0fef\u0ff2\u0001\u0000\u0000\u0000"+
		"\u0ff0\u0fee\u0001\u0000\u0000\u0000\u0ff0\u0ff1\u0001\u0000\u0000\u0000"+
		"\u0ff1\u0185\u0001\u0000\u0000\u0000\u0ff2\u0ff0\u0001\u0000\u0000\u0000"+
		"\u0ff3\u0ff4\u0003\u0188\u00c4\u0000\u0ff4\u0ff5\u0005\u01d9\u0000\u0000"+
		"\u0ff5\u0ff6\u0003\u010c\u0086\u0000\u0ff6\u0187\u0001\u0000\u0000\u0000"+
		"\u0ff7\u1001\u0005\u020e\u0000\u0000\u0ff8\u1001\u0005\u020f\u0000\u0000"+
		"\u0ff9\u1001\u0005\u0210\u0000\u0000\u0ffa\u1001\u0005\u0211\u0000\u0000"+
		"\u0ffb\u1001\u0005\u0212\u0000\u0000\u0ffc\u1001\u0005\u0213\u0000\u0000"+
		"\u0ffd\u1001\u0005\u0214\u0000\u0000\u0ffe\u1001\u0005\u0215\u0000\u0000"+
		"\u0fff\u1001\u0003\u00e4r\u0000\u1000\u0ff7\u0001\u0000\u0000\u0000\u1000"+
		"\u0ff8\u0001\u0000\u0000\u0000\u1000\u0ff9\u0001\u0000\u0000\u0000\u1000"+
		"\u0ffa\u0001\u0000\u0000\u0000\u1000\u0ffb\u0001\u0000\u0000\u0000\u1000"+
		"\u0ffc\u0001\u0000\u0000\u0000\u1000\u0ffd\u0001\u0000\u0000\u0000\u1000"+
		"\u0ffe\u0001\u0000\u0000\u0000\u1000\u0fff\u0001\u0000\u0000\u0000\u1001"+
		"\u0189\u0001\u0000\u0000\u0000\u1002\u1004\u0003\u0160\u00b0\u0000\u1003"+
		"\u1005\u0003\u018c\u00c6\u0000\u1004\u1003\u0001\u0000\u0000\u0000\u1004"+
		"\u1005\u0001\u0000\u0000\u0000\u1005\u100c\u0001\u0000\u0000\u0000\u1006"+
		"\u1007\u0003\u0160\u00b0\u0000\u1007\u1009\u0003\u019e\u00cf\u0000\u1008"+
		"\u100a\u0003\u018c\u00c6\u0000\u1009\u1008\u0001\u0000\u0000\u0000\u1009"+
		"\u100a\u0001\u0000\u0000\u0000\u100a\u100c\u0001\u0000\u0000\u0000\u100b"+
		"\u1002\u0001\u0000\u0000\u0000\u100b\u1006\u0001\u0000\u0000\u0000\u100c"+
		"\u018b\u0001\u0000\u0000\u0000\u100d\u100e\u0005\u001e\u0000\u0000\u100e"+
		"\u100f\u0003\u0184\u00c2\u0000\u100f\u1010\u0005\u001f\u0000\u0000\u1010"+
		"\u018d\u0001\u0000\u0000\u0000\u1011\u102d\u0005\u00bc\u0000\u0000\u1012"+
		"\u102d\u0005\u022a\u0000\u0000\u1013\u102d\u0005\u022e\u0000\u0000\u1014"+
		"\u102d\u0005\u022f\u0000\u0000\u1015\u102d\u0005\u022b\u0000\u0000\u1016"+
		"\u1017\u0005\u00c0\u0000\u0000\u1017\u102d\u0003\u019c\u00ce\u0000\u1018"+
		"\u1019\u0005\u0204\u0000\u0000\u1019\u102d\u0005\u01ca\u0000\u0000\u101a"+
		"\u101c\u0005\u022c\u0000\u0000\u101b\u101d\u0003\u018c\u00c6\u0000\u101c"+
		"\u101b\u0001\u0000\u0000\u0000\u101c\u101d\u0001\u0000\u0000\u0000\u101d"+
		"\u102d\u0001\u0000\u0000\u0000\u101e\u1020\u0005\u024a\u0000\u0000\u101f"+
		"\u1021\u0003\u018c\u00c6\u0000\u1020\u101f\u0001\u0000\u0000\u0000\u1020"+
		"\u1021\u0001\u0000\u0000\u0000\u1021\u102d\u0001\u0000\u0000\u0000\u1022"+
		"\u1024\u0005\u0230\u0000\u0000\u1023\u1025\u0003\u018c\u00c6\u0000\u1024"+
		"\u1023\u0001\u0000\u0000\u0000\u1024\u1025\u0001\u0000\u0000\u0000\u1025"+
		"\u102d\u0001\u0000\u0000\u0000\u1026\u102d\u0005\u0203\u0000\u0000\u1027"+
		"\u102d\u0005\u00c2\u0000\u0000\u1028\u102d\u0005\u00c1\u0000\u0000\u1029"+
		"\u102d\u0005\u00bd\u0000\u0000\u102a\u102d\u0005\u00be\u0000\u0000\u102b"+
		"\u102d\u0005\u00bf\u0000\u0000\u102c\u1011\u0001\u0000\u0000\u0000\u102c"+
		"\u1012\u0001\u0000\u0000\u0000\u102c\u1013\u0001\u0000\u0000\u0000\u102c"+
		"\u1014\u0001\u0000\u0000\u0000\u102c\u1015\u0001\u0000\u0000\u0000\u102c"+
		"\u1016\u0001\u0000\u0000\u0000\u102c\u1018\u0001\u0000\u0000\u0000\u102c"+
		"\u101a\u0001\u0000\u0000\u0000\u102c\u101e\u0001\u0000\u0000\u0000\u102c"+
		"\u1022\u0001\u0000\u0000\u0000\u102c\u1026\u0001\u0000\u0000\u0000\u102c"+
		"\u1027\u0001\u0000\u0000\u0000\u102c\u1028\u0001\u0000\u0000\u0000\u102c"+
		"\u1029\u0001\u0000\u0000\u0000\u102c\u102a\u0001\u0000\u0000\u0000\u102c"+
		"\u102b\u0001\u0000\u0000\u0000\u102d\u018f\u0001\u0000\u0000\u0000\u102e"+
		"\u102f\u0005\u020b\u0000\u0000\u102f\u1030\u0005\u001e\u0000\u0000\u1030"+
		"\u1031\u0005\u0250\u0000\u0000\u1031\u1033\u0005\u001f\u0000\u0000\u1032"+
		"\u1034\u0003\u0192\u00c9\u0000\u1033\u1032\u0001\u0000\u0000\u0000\u1033"+
		"\u1034\u0001\u0000\u0000\u0000\u1034\u1046\u0001\u0000\u0000\u0000\u1035"+
		"\u1037\u0005\u020b\u0000\u0000\u1036\u1038\u0003\u0192\u00c9\u0000\u1037"+
		"\u1036\u0001\u0000\u0000\u0000\u1037\u1038\u0001\u0000\u0000\u0000\u1038"+
		"\u1046\u0001\u0000\u0000\u0000\u1039\u103a\u0005\u020a\u0000\u0000\u103a"+
		"\u103b\u0005\u001e\u0000\u0000\u103b\u103c\u0005\u0250\u0000\u0000\u103c"+
		"\u103e\u0005\u001f\u0000\u0000\u103d\u103f\u0003\u0192\u00c9\u0000\u103e"+
		"\u103d\u0001\u0000\u0000\u0000\u103e\u103f\u0001\u0000\u0000\u0000\u103f"+
		"\u1046\u0001\u0000\u0000\u0000\u1040\u1042\u0005\u020a\u0000\u0000\u1041"+
		"\u1043\u0003\u0192\u00c9\u0000\u1042\u1041\u0001\u0000\u0000\u0000\u1042"+
		"\u1043\u0001\u0000\u0000\u0000\u1043\u1046\u0001\u0000\u0000\u0000\u1044"+
		"\u1046\u0005\u0209\u0000\u0000\u1045\u102e\u0001\u0000\u0000\u0000\u1045"+
		"\u1035\u0001\u0000\u0000\u0000\u1045\u1039\u0001\u0000\u0000\u0000\u1045"+
		"\u1040\u0001\u0000\u0000\u0000\u1045\u1044\u0001\u0000\u0000\u0000\u1046"+
		"\u0191\u0001\u0000\u0000\u0000\u1047\u1048\u0005\u01d1\u0000\u0000\u1048"+
		"\u1049\u0005\u020a\u0000\u0000\u1049\u104e\u0005\u00b7\u0000\u0000\u104a"+
		"\u104b\u0005\u00b6\u0000\u0000\u104b\u104c\u0005\u020a\u0000\u0000\u104c"+
		"\u104e\u0005\u00b7\u0000\u0000\u104d\u1047\u0001\u0000\u0000\u0000\u104d"+
		"\u104a\u0001\u0000\u0000\u0000\u104e\u0193\u0001\u0000\u0000\u0000\u104f"+
		"\u1052\u0003\u0196\u00cb\u0000\u1050\u1052\u0003\u0198\u00cc\u0000\u1051"+
		"\u104f\u0001\u0000\u0000\u0000\u1051\u1050\u0001\u0000\u0000\u0000\u1052"+
		"\u0195\u0001\u0000\u0000\u0000\u1053\u1054\u0003\u019a\u00cd\u0000\u1054"+
		"\u1055\u0005\u001e\u0000\u0000\u1055\u1056\u0005\u0250\u0000\u0000\u1056"+
		"\u1057\u0005\u001f\u0000\u0000\u1057\u0197\u0001\u0000\u0000\u0000\u1058"+
		"\u1059\u0003\u019a\u00cd\u0000\u1059\u0199\u0001\u0000\u0000\u0000\u105a"+
		"\u105c\u0005\u0206\u0000\u0000\u105b\u105d\u0005\u0236\u0000\u0000\u105c"+
		"\u105b\u0001\u0000\u0000\u0000\u105c\u105d\u0001\u0000\u0000\u0000\u105d"+
		"\u1072\u0001\u0000\u0000\u0000\u105e\u1060\u0005\u0205\u0000\u0000\u105f"+
		"\u1061\u0005\u0236\u0000\u0000\u1060\u105f\u0001\u0000\u0000\u0000\u1060"+
		"\u1061\u0001\u0000\u0000\u0000\u1061\u1072\u0001\u0000\u0000\u0000\u1062"+
		"\u1072\u0005\u00c6\u0000\u0000\u1063\u1064\u0005\u0237\u0000\u0000\u1064"+
		"\u1066\u0005\u0206\u0000\u0000\u1065\u1067\u0005\u0236\u0000\u0000\u1066"+
		"\u1065\u0001\u0000\u0000\u0000\u1066\u1067\u0001\u0000\u0000\u0000\u1067"+
		"\u1072\u0001\u0000\u0000\u0000\u1068\u1069\u0005\u0237\u0000\u0000\u1069"+
		"\u106b\u0005\u0205\u0000\u0000\u106a\u106c\u0005\u0236\u0000\u0000\u106b"+
		"\u106a\u0001\u0000\u0000\u0000\u106b\u106c\u0001\u0000\u0000\u0000\u106c"+
		"\u1072\u0001\u0000\u0000\u0000\u106d\u106f\u0005\u0238\u0000\u0000\u106e"+
		"\u1070\u0005\u0236\u0000\u0000\u106f\u106e\u0001\u0000\u0000\u0000\u106f"+
		"\u1070\u0001\u0000\u0000\u0000\u1070\u1072\u0001\u0000\u0000\u0000\u1071"+
		"\u105a\u0001\u0000\u0000\u0000\u1071\u105e\u0001\u0000\u0000\u0000\u1071"+
		"\u1062\u0001\u0000\u0000\u0000\u1071\u1063\u0001\u0000\u0000\u0000\u1071"+
		"\u1068\u0001\u0000\u0000\u0000\u1071\u106d\u0001\u0000\u0000\u0000\u1072"+
		"\u019b\u0001\u0000\u0000\u0000\u1073\u1074\u0005\u001e\u0000\u0000\u1074"+
		"\u1075\u0005\u0250\u0000\u0000\u1075\u1078\u0005\u001f\u0000\u0000\u1076"+
		"\u1078\u0001\u0000\u0000\u0000\u1077\u1073\u0001\u0000\u0000\u0000\u1077"+
		"\u1076\u0001\u0000\u0000\u0000\u1078\u019d\u0001\u0000\u0000\u0000\u1079"+
		"\u107a\u0006\u00cf\uffff\uffff\u0000\u107a\u107b\u0005\u0012\u0000\u0000"+
		"\u107b\u107c\u0003\u01a0\u00d0\u0000\u107c\u1082\u0001\u0000\u0000\u0000"+
		"\u107d\u107e\n\u0001\u0000\u0000\u107e\u107f\u0005\u0012\u0000\u0000\u107f"+
		"\u1081\u0003\u01a0\u00d0\u0000\u1080\u107d\u0001\u0000\u0000\u0000\u1081"+
		"\u1084\u0001\u0000\u0000\u0000\u1082\u1080\u0001\u0000\u0000\u0000\u1082"+
		"\u1083\u0001\u0000\u0000\u0000\u1083\u019f\u0001\u0000\u0000\u0000\u1084"+
		"\u1082\u0001\u0000\u0000\u0000\u1085\u1086\u0003\u01a2\u00d1\u0000\u1086"+
		"\u01a1\u0001\u0000\u0000\u0000\u1087\u108c\u0003\u00e4r\u0000\u1088\u108c"+
		"\u0003\u0224\u0112\u0000\u1089\u108c\u0003\u00eau\u0000\u108a\u108c\u0003"+
		"\u00deo\u0000\u108b\u1087\u0001\u0000\u0000\u0000\u108b\u1088\u0001\u0000"+
		"\u0000\u0000\u108b\u1089\u0001\u0000\u0000\u0000\u108b\u108a\u0001\u0000"+
		"\u0000\u0000\u108c\u01a3\u0001\u0000\u0000\u0000\u108d\u1090\u0003\u01a6"+
		"\u00d3\u0000\u108e\u1090\u0003\u01a8\u00d4\u0000\u108f\u108d\u0001\u0000"+
		"\u0000\u0000\u108f\u108e\u0001\u0000\u0000\u0000\u1090\u01a5\u0001\u0000"+
		"\u0000\u0000\u1091\u1093\u0005\u00d4\u0000\u0000\u1092\u1094\u0005\u0236"+
		"\u0000\u0000\u1093\u1092\u0001\u0000\u0000\u0000\u1093\u1094\u0001\u0000"+
		"\u0000\u0000\u1094\u1095\u0001\u0000\u0000\u0000\u1095\u1096\u0005\u001e"+
		"\u0000\u0000\u1096\u1097\u0003\u0184\u00c2\u0000\u1097\u1098\u0005\u001f"+
		"\u0000\u0000\u1098\u01a7\u0001\u0000\u0000\u0000\u1099\u109b\u0005\u00d4"+
		"\u0000\u0000\u109a\u109c\u0005\u0236\u0000\u0000\u109b\u109a\u0001\u0000"+
		"\u0000\u0000\u109b\u109c\u0001\u0000\u0000\u0000\u109c\u01a9\u0001\u0000"+
		"\u0000\u0000\u109d\u109e\u0005\u0208\u0000\u0000\u109e\u01ab\u0001\u0000"+
		"\u0000\u0000\u109f\u10bc\u0005\u020e\u0000\u0000\u10a0\u10bc\u0005\u0210"+
		"\u0000\u0000\u10a1\u10bc\u0005\u0212\u0000\u0000\u10a2\u10bc\u0005\u0213"+
		"\u0000\u0000\u10a3\u10bc\u0005\u0214\u0000\u0000\u10a4\u10bc\u0003\u01b0"+
		"\u00d8\u0000\u10a5\u10a6\u0005\u020e\u0000\u0000\u10a6\u10a7\u0005\u01ea"+
		"\u0000\u0000\u10a7\u10bc\u0005\u0210\u0000\u0000\u10a8\u10a9\u0005\u0212"+
		"\u0000\u0000\u10a9\u10aa\u0005\u01ea\u0000\u0000\u10aa\u10bc\u0005\u0213"+
		"\u0000\u0000\u10ab\u10ac\u0005\u0212\u0000\u0000\u10ac\u10ad\u0005\u01ea"+
		"\u0000\u0000\u10ad\u10bc\u0005\u0214\u0000\u0000\u10ae\u10af\u0005\u0212"+
		"\u0000\u0000\u10af\u10b0\u0005\u01ea\u0000\u0000\u10b0\u10bc\u0003\u01b0"+
		"\u00d8\u0000\u10b1\u10b2\u0005\u0213\u0000\u0000\u10b2\u10b3\u0005\u01ea"+
		"\u0000\u0000\u10b3\u10bc\u0005\u0214\u0000\u0000\u10b4\u10b5\u0005\u0213"+
		"\u0000\u0000\u10b5\u10b6\u0005\u01ea\u0000\u0000\u10b6\u10bc\u0003\u01b0"+
		"\u00d8\u0000\u10b7\u10b8\u0005\u0214\u0000\u0000\u10b8\u10b9\u0005\u01ea"+
		"\u0000\u0000\u10b9\u10bc\u0003\u01b0\u00d8\u0000\u10ba\u10bc\u0001\u0000"+
		"\u0000\u0000\u10bb\u109f\u0001\u0000\u0000\u0000\u10bb\u10a0\u0001\u0000"+
		"\u0000\u0000\u10bb\u10a1\u0001\u0000\u0000\u0000\u10bb\u10a2\u0001\u0000"+
		"\u0000\u0000\u10bb\u10a3\u0001\u0000\u0000\u0000\u10bb\u10a4\u0001\u0000"+
		"\u0000\u0000\u10bb\u10a5\u0001\u0000\u0000\u0000\u10bb\u10a8\u0001\u0000"+
		"\u0000\u0000\u10bb\u10ab\u0001\u0000\u0000\u0000\u10bb\u10ae\u0001\u0000"+
		"\u0000\u0000\u10bb\u10b1\u0001\u0000\u0000\u0000\u10bb\u10b4\u0001\u0000"+
		"\u0000\u0000\u10bb\u10b7\u0001\u0000\u0000\u0000\u10bb\u10ba\u0001\u0000"+
		"\u0000\u0000\u10bc\u01ad\u0001\u0000\u0000\u0000\u10bd\u10c7\u0006\u00d7"+
		"\uffff\uffff\u0000\u10be\u10bf\n\u0003\u0000\u0000\u10bf\u10c0\u0005\""+
		"\u0000\u0000\u10c0\u10c6\u0005#\u0000\u0000\u10c1\u10c2\n\u0002\u0000"+
		"\u0000\u10c2\u10c3\u0005\"\u0000\u0000\u10c3\u10c4\u0005\u0250\u0000\u0000"+
		"\u10c4\u10c6\u0005#\u0000\u0000\u10c5\u10be\u0001\u0000\u0000\u0000\u10c5"+
		"\u10c1\u0001\u0000\u0000\u0000\u10c6\u10c9\u0001\u0000\u0000\u0000\u10c7"+
		"\u10c5\u0001\u0000\u0000\u0000\u10c7\u10c8\u0001\u0000\u0000\u0000\u10c8"+
		"\u01af\u0001\u0000\u0000\u0000\u10c9\u10c7\u0001\u0000\u0000\u0000\u10ca"+
		"\u10d0\u0005\u0215\u0000\u0000\u10cb\u10cc\u0005\u0215\u0000\u0000\u10cc"+
		"\u10cd\u0005\u001e\u0000\u0000\u10cd\u10ce\u0005\u0250\u0000\u0000\u10ce"+
		"\u10d0\u0005\u001f\u0000\u0000\u10cf\u10ca\u0001\u0000\u0000\u0000\u10cf"+
		"\u10cb\u0001\u0000\u0000\u0000\u10d0\u01b1\u0001\u0000\u0000\u0000\u10d1"+
		"\u10d2\u0007\u0013\u0000\u0000\u10d2\u01b3\u0001\u0000\u0000\u0000\u10d3"+
		"\u10d4\u0003\u010c\u0086\u0000\u10d4\u10d5\u0005\u01d9\u0000\u0000\u10d5"+
		"\u10d6\u0003\u0184\u00c2\u0000\u10d6\u10db\u0001\u0000\u0000\u0000\u10d7"+
		"\u10d8\u0005\u01d9\u0000\u0000\u10d8\u10db\u0003\u0184\u00c2\u0000\u10d9"+
		"\u10db\u0003\u0184\u00c2\u0000\u10da\u10d3\u0001\u0000\u0000\u0000\u10da"+
		"\u10d7\u0001\u0000\u0000\u0000\u10da\u10d9\u0001\u0000\u0000\u0000\u10db"+
		"\u01b5\u0001\u0000\u0000\u0000\u10dc\u10dd\u0003\u010c\u0086\u0000\u10dd"+
		"\u10de\u0003\u01b8\u00dc\u0000\u10de\u10df\u0003\u01ba\u00dd\u0000\u10df"+
		"\u10e0\u0003\u01bc\u00de\u0000\u10e0\u10e6\u0001\u0000\u0000\u0000\u10e1"+
		"\u10e2\u0003\u010c\u0086\u0000\u10e2\u10e3\u0003\u01b8\u00dc\u0000\u10e3"+
		"\u10e4\u0003\u01ba\u00dd\u0000\u10e4\u10e6\u0001\u0000\u0000\u0000\u10e5"+
		"\u10dc\u0001\u0000\u0000\u0000\u10e5\u10e1\u0001\u0000\u0000\u0000\u10e6"+
		"\u01b7\u0001\u0000\u0000\u0000\u10e7\u10e8\u0005\u0112\u0000\u0000\u10e8"+
		"\u10e9\u0003\u010c\u0086\u0000\u10e9\u01b9\u0001\u0000\u0000\u0000\u10ea"+
		"\u10eb\u0005\u01d9\u0000\u0000\u10eb\u10ec\u0003\u010c\u0086\u0000\u10ec"+
		"\u01bb\u0001\u0000\u0000\u0000\u10ed\u10ee\u0005\u01e9\u0000\u0000\u10ee"+
		"\u10ef\u0003\u010c\u0086\u0000\u10ef\u01bd\u0001\u0000\u0000\u0000\u10f0"+
		"\u10f1\u0003\u010e\u0087\u0000\u10f1\u10f2\u0005\u01f3\u0000\u0000\u10f2"+
		"\u10f3\u0003\u010e\u0087\u0000\u10f3\u10f6\u0001\u0000\u0000\u0000\u10f4"+
		"\u10f6\u0001\u0000\u0000\u0000\u10f5\u10f0\u0001\u0000\u0000\u0000\u10f5"+
		"\u10f4\u0001\u0000\u0000\u0000\u10f6\u01bf\u0001\u0000\u0000\u0000\u10f7"+
		"\u10f8\u0003\u010c\u0086\u0000\u10f8\u10f9\u0003\u01ba\u00dd\u0000\u10f9"+
		"\u10fa\u0003\u01bc\u00de\u0000\u10fa\u1108\u0001\u0000\u0000\u0000\u10fb"+
		"\u10fc\u0003\u010c\u0086\u0000\u10fc\u10fd\u0003\u01bc\u00de\u0000\u10fd"+
		"\u10fe\u0003\u01ba\u00dd\u0000\u10fe\u1108\u0001\u0000\u0000\u0000\u10ff"+
		"\u1100\u0003\u010c\u0086\u0000\u1100\u1101\u0003\u01ba\u00dd\u0000\u1101"+
		"\u1108\u0001\u0000\u0000\u0000\u1102\u1103\u0003\u010c\u0086\u0000\u1103"+
		"\u1104\u0003\u01bc\u00de\u0000\u1104\u1108\u0001\u0000\u0000\u0000\u1105"+
		"\u1108\u0003\u0184\u00c2\u0000\u1106\u1108\u0001\u0000\u0000\u0000\u1107"+
		"\u10f7\u0001\u0000\u0000\u0000\u1107\u10fb\u0001\u0000\u0000\u0000\u1107"+
		"\u10ff\u0001\u0000\u0000\u0000\u1107\u1102\u0001\u0000\u0000\u0000\u1107"+
		"\u1105\u0001\u0000\u0000\u0000\u1107\u1106\u0001\u0000\u0000\u0000\u1108"+
		"\u01c1\u0001\u0000\u0000\u0000\u1109\u110a\u0005\u00f5\u0000\u0000\u110a"+
		"\u110b\u0005\u001e\u0000\u0000\u110b\u110c\u0003\u01c4\u00e2\u0000\u110c"+
		"\u110d\u0005\u001f\u0000\u0000\u110d\u01c3\u0001\u0000\u0000\u0000\u110e"+
		"\u1113\u0003\u01c6\u00e3\u0000\u110f\u1110\u0005$\u0000\u0000\u1110\u1112"+
		"\u0003\u01c6\u00e3\u0000\u1111\u110f\u0001\u0000\u0000\u0000\u1112\u1115"+
		"\u0001\u0000\u0000\u0000\u1113\u1111\u0001\u0000\u0000\u0000\u1113\u1114"+
		"\u0001\u0000\u0000\u0000\u1114\u01c5\u0001\u0000\u0000\u0000\u1115\u1113"+
		"\u0001\u0000\u0000\u0000\u1116\u1117\u0003\u010c\u0086\u0000\u1117\u1118"+
		"\u0005\u01e4\u0000\u0000\u1118\u1119\u0003\u00e4r\u0000\u1119\u111c\u0001"+
		"\u0000\u0000\u0000\u111a\u111c\u0003\u010c\u0086\u0000\u111b\u1116\u0001"+
		"\u0000\u0000\u0000\u111b\u111a\u0001\u0000\u0000\u0000\u111c\u01c7\u0001"+
		"\u0000\u0000\u0000\u111d\u111e\u0005\u00f7\u0000\u0000\u111e\u112d\u0003"+
		"\u0110\u0088\u0000\u111f\u1120\u0005\u00f7\u0000\u0000\u1120\u1121\u0003"+
		"\u0110\u0088\u0000\u1121\u1122\u0003\u01ca\u00e5\u0000\u1122\u112d\u0001"+
		"\u0000\u0000\u0000\u1123\u1124\u0005\u00f7\u0000\u0000\u1124\u1125\u0003"+
		"\u01ca\u00e5\u0000\u1125\u1126\u0003\u0110\u0088\u0000\u1126\u112d\u0001"+
		"\u0000\u0000\u0000\u1127\u1128\u0005\u00f7\u0000\u0000\u1128\u1129\u0003"+
		"\u01ca\u00e5\u0000\u1129\u112a\u0003\u0110\u0088\u0000\u112a\u112b\u0003"+
		"\u01ca\u00e5\u0000\u112b\u112d\u0001\u0000\u0000\u0000\u112c\u111d\u0001"+
		"\u0000\u0000\u0000\u112c\u111f\u0001\u0000\u0000\u0000\u112c\u1123\u0001"+
		"\u0000\u0000\u0000\u112c\u1127\u0001\u0000\u0000\u0000\u112d\u01c9\u0001"+
		"\u0000\u0000\u0000\u112e\u112f\u0005\u01f9\u0000\u0000\u112f\u1133\u0005"+
		"\u00f6\u0000\u0000\u1130\u1131\u0005\u01f9\u0000\u0000\u1131\u1133\u0005"+
		"\u0239\u0000\u0000\u1132\u112e\u0001\u0000\u0000\u0000\u1132\u1130\u0001"+
		"\u0000\u0000\u0000\u1133\u01cb\u0001\u0000\u0000\u0000\u1134\u1135\u0007"+
		"\u0014\u0000\u0000\u1135\u01cd\u0001\u0000\u0000\u0000\u1136\u1137\u0005"+
		"\u021d\u0000\u0000\u1137\u113c\u0005\u0110\u0000\u0000\u1138\u1139\u0005"+
		"\u010f\u0000\u0000\u1139\u113c\u0005\u0110\u0000\u0000\u113a\u113c\u0001"+
		"\u0000\u0000\u0000\u113b\u1136\u0001\u0000\u0000\u0000\u113b\u1138\u0001"+
		"\u0000\u0000\u0000\u113b\u113a\u0001\u0000\u0000\u0000\u113c\u01cf\u0001"+
		"\u0000\u0000\u0000\u113d\u113e\u0005\u00f8\u0000\u0000\u113e\u1143\u0003"+
		"\u010c\u0086\u0000\u113f\u1140\u0005\u00f8\u0000\u0000\u1140\u1141\u0005"+
		"X\u0000\u0000\u1141\u1143\u0005\u0239\u0000\u0000\u1142\u113d\u0001\u0000"+
		"\u0000\u0000\u1142\u113f\u0001\u0000\u0000\u0000\u1143\u01d1\u0001\u0000"+
		"\u0000\u0000\u1144\u1145\u0005$\u0000\u0000\u1145\u1146\u0005\u00fa\u0000"+
		"\u0000\u1146\u114f\u0005\u00f9\u0000\u0000\u1147\u1148\u0005$\u0000\u0000"+
		"\u1148\u1149\u0005\u00fa\u0000\u0000\u1149\u114f\u0005X\u0000\u0000\u114a"+
		"\u114b\u0005$\u0000\u0000\u114b\u114c\u0005\u00fa\u0000\u0000\u114c\u114d"+
		"\u0005X\u0000\u0000\u114d\u114f\u0005\u0239\u0000\u0000\u114e\u1144\u0001"+
		"\u0000\u0000\u0000\u114e\u1147\u0001\u0000\u0000\u0000\u114e\u114a\u0001"+
		"\u0000\u0000\u0000\u114f\u01d3\u0001\u0000\u0000\u0000\u1150\u1151\u0003"+
		"\u0178\u00bc\u0000\u1151\u1152\u0003\u01d8\u00ec\u0000\u1152\u01d5\u0001"+
		"\u0000\u0000\u0000\u1153\u1158\u0003\u01d4\u00ea\u0000\u1154\u1155\u0005"+
		"$\u0000\u0000\u1155\u1157\u0003\u01d4\u00ea\u0000\u1156\u1154\u0001\u0000"+
		"\u0000\u0000\u1157\u115a\u0001\u0000\u0000\u0000\u1158\u1156\u0001\u0000"+
		"\u0000\u0000\u1158\u1159\u0001\u0000\u0000\u0000\u1159\u01d7\u0001\u0000"+
		"\u0000\u0000\u115a\u1158\u0001\u0000\u0000\u0000\u115b\u115c\u0005\u01e4"+
		"\u0000\u0000\u115c\u115d\u0005\u001e\u0000\u0000\u115d\u115e\u0003\u01da"+
		"\u00ed\u0000\u115e\u115f\u0005\u001f\u0000\u0000\u115f\u01d9\u0001\u0000"+
		"\u0000\u0000\u1160\u1165\u0003\u01dc\u00ee\u0000\u1161\u1162\u0005$\u0000"+
		"\u0000\u1162\u1164\u0003\u01dc\u00ee\u0000\u1163\u1161\u0001\u0000\u0000"+
		"\u0000\u1164\u1167\u0001\u0000\u0000\u0000\u1165\u1163\u0001\u0000\u0000"+
		"\u0000\u1165\u1166\u0001\u0000\u0000\u0000\u1166\u01db\u0001\u0000\u0000"+
		"\u0000\u1167\u1165\u0001\u0000\u0000\u0000\u1168\u1169\u0003\u015c\u00ae"+
		"\u0000\u1169\u116b\u0003\u017e\u00bf\u0000\u116a\u116c\u0003\u01de\u00ef"+
		"\u0000\u116b\u116a\u0001\u0000\u0000\u0000\u116b\u116c\u0001\u0000\u0000"+
		"\u0000\u116c\u01dd\u0001\u0000\u0000\u0000\u116d\u116f\u0005f\u0000\u0000"+
		"\u116e\u1170\u0005\u0016\u0000\u0000\u116f\u116e\u0001\u0000\u0000\u0000"+
		"\u116f\u1170\u0001\u0000\u0000\u0000\u1170\u1171\u0001\u0000\u0000\u0000"+
		"\u1171\u1172\u0003\u01e0\u00f0\u0000\u1172\u01df\u0001\u0000\u0000\u0000"+
		"\u1173\u1178\u0003\u015c\u00ae\u0000\u1174\u1175\u0003\u015c\u00ae\u0000"+
		"\u1175\u1176\u0003\u019e\u00cf\u0000\u1176\u1178\u0001\u0000\u0000\u0000"+
		"\u1177\u1173\u0001\u0000\u0000\u0000\u1177\u1174\u0001\u0000\u0000\u0000"+
		"\u1178\u01e1\u0001\u0000\u0000\u0000\u1179\u117a\u0005\u01e4\u0000\u0000"+
		"\u117a\u117b\u0003\u015c\u00ae\u0000\u117b\u117c\u0005\u001e\u0000\u0000"+
		"\u117c\u117d\u0003\u01e4\u00f2\u0000\u117d\u117e\u0005\u001f\u0000\u0000"+
		"\u117e\u1188\u0001\u0000\u0000\u0000\u117f\u1180\u0005\u01e4\u0000\u0000"+
		"\u1180\u1188\u0003\u015c\u00ae\u0000\u1181\u1182\u0003\u015c\u00ae\u0000"+
		"\u1182\u1183\u0005\u001e\u0000\u0000\u1183\u1184\u0003\u01e4\u00f2\u0000"+
		"\u1184\u1185\u0005\u001f\u0000\u0000\u1185\u1188\u0001\u0000\u0000\u0000"+
		"\u1186\u1188\u0003\u015c\u00ae\u0000\u1187\u1179\u0001\u0000\u0000\u0000"+
		"\u1187\u117f\u0001\u0000\u0000\u0000\u1187\u1181\u0001\u0000\u0000\u0000"+
		"\u1187\u1186\u0001\u0000\u0000\u0000\u1188\u01e3\u0001\u0000\u0000\u0000"+
		"\u1189\u118a\u0006\u00f2\uffff\uffff\u0000\u118a\u118b\u0003\u00f4z\u0000"+
		"\u118b\u1191\u0001\u0000\u0000\u0000\u118c\u118d\n\u0001\u0000\u0000\u118d"+
		"\u118e\u0005$\u0000\u0000\u118e\u1190\u0003\u00f4z\u0000\u118f\u118c\u0001"+
		"\u0000\u0000\u0000\u1190\u1193\u0001\u0000\u0000\u0000\u1191\u118f\u0001"+
		"\u0000\u0000\u0000\u1191\u1192\u0001\u0000\u0000\u0000\u1192\u01e5\u0001"+
		"\u0000\u0000\u0000\u1193\u1191\u0001\u0000\u0000\u0000\u1194\u11a6\u0003"+
		"\u01e2\u00f1\u0000\u1195\u1196\u0005\u01e4\u0000\u0000\u1196\u1197\u0005"+
		"\u001e\u0000\u0000\u1197\u1198\u0003\u01da\u00ed\u0000\u1198\u1199\u0005"+
		"\u001f\u0000\u0000\u1199\u11a6\u0001\u0000\u0000\u0000\u119a\u119b\u0005"+
		"\u01e4\u0000\u0000\u119b\u119c\u0003\u015c\u00ae\u0000\u119c\u119d\u0005"+
		"\u001e\u0000\u0000\u119d\u119e\u0003\u01da\u00ed\u0000\u119e\u119f\u0005"+
		"\u001f\u0000\u0000\u119f\u11a6\u0001\u0000\u0000\u0000\u11a0\u11a1\u0003"+
		"\u015c\u00ae\u0000\u11a1\u11a2\u0005\u001e\u0000\u0000\u11a2\u11a3\u0003"+
		"\u01da\u00ed\u0000\u11a3\u11a4\u0005\u001f\u0000\u0000\u11a4\u11a6\u0001"+
		"\u0000\u0000\u0000\u11a5\u1194\u0001\u0000\u0000\u0000\u11a5\u1195\u0001"+
		"\u0000\u0000\u0000\u11a5\u119a\u0001\u0000\u0000\u0000\u11a5\u11a0\u0001"+
		"\u0000\u0000\u0000\u11a6\u01e7\u0001\u0000\u0000\u0000\u11a7\u11a8\u0005"+
		"\u00e0\u0000\u0000\u11a8\u11a9\u0003\u0154\u00aa\u0000\u11a9\u11aa\u0005"+
		"\u001e\u0000\u0000\u11aa\u11ab\u0003\u0184\u00c2\u0000\u11ab\u11ad\u0005"+
		"\u001f\u0000\u0000\u11ac\u11ae\u0003\u01ea\u00f5\u0000\u11ad\u11ac\u0001"+
		"\u0000\u0000\u0000\u11ad\u11ae\u0001\u0000\u0000\u0000\u11ae\u01e9\u0001"+
		"\u0000\u0000\u0000\u11af\u11b0\u0005\u0232\u0000\u0000\u11b0\u11b1\u0005"+
		"\u001e\u0000\u0000\u11b1\u11b2\u0003\u010c\u0086\u0000\u11b2\u11b3\u0005"+
		"\u001f\u0000\u0000\u11b3\u01eb\u0001\u0000\u0000\u0000\u11b4\u11b5\u0007"+
		"\u0015\u0000\u0000\u11b5\u01ed\u0001\u0000\u0000\u0000\u11b6\u11b7\u0005"+
		"\u01f7\u0000\u0000\u11b7\u11b8\u0005\u01f9\u0000\u0000\u11b8\u11b9\u0003"+
		"\u01f0\u00f8\u0000\u11b9\u01ef\u0001\u0000\u0000\u0000\u11ba\u11bf\u0003"+
		"\u01f2\u00f9\u0000\u11bb\u11bc\u0005$\u0000\u0000\u11bc\u11be\u0003\u01f2"+
		"\u00f9\u0000\u11bd\u11bb\u0001\u0000\u0000\u0000\u11be\u11c1\u0001\u0000"+
		"\u0000\u0000\u11bf\u11bd\u0001\u0000\u0000\u0000\u11bf\u11c0\u0001\u0000"+
		"\u0000\u0000\u11c0\u01f1\u0001\u0000\u0000\u0000\u11c1\u11bf\u0001\u0000"+
		"\u0000\u0000\u11c2\u11c3\u0003\u010c\u0086\u0000\u11c3\u11c4\u0005\u01e2"+
		"\u0000\u0000\u11c4\u11c6\u0003\u0136\u009b\u0000\u11c5\u11c7\u0003\u01f4"+
		"\u00fa\u0000\u11c6\u11c5\u0001\u0000\u0000\u0000\u11c6\u11c7\u0001\u0000"+
		"\u0000\u0000\u11c7\u11d0\u0001\u0000\u0000\u0000\u11c8\u11ca\u0003\u010c"+
		"\u0086\u0000\u11c9\u11cb\u0003\u0138\u009c\u0000\u11ca\u11c9\u0001\u0000"+
		"\u0000\u0000\u11ca\u11cb\u0001\u0000\u0000\u0000\u11cb\u11cd\u0001\u0000"+
		"\u0000\u0000\u11cc\u11ce\u0003\u01f4\u00fa\u0000\u11cd\u11cc\u0001\u0000"+
		"\u0000\u0000\u11cd\u11ce\u0001\u0000\u0000\u0000\u11ce\u11d0\u0001\u0000"+
		"\u0000\u0000\u11cf\u11c2\u0001\u0000\u0000\u0000\u11cf\u11c8\u0001\u0000"+
		"\u0000\u0000\u11d0\u01f3\u0001\u0000\u0000\u0000\u11d1\u11d2\u0005\u0093"+
		"\u0000\u0000\u11d2\u11d6\u0005}\u0000\u0000\u11d3\u11d4\u0005\u0093\u0000"+
		"\u0000\u11d4\u11d6\u0005\u008c\u0000\u0000\u11d5\u11d1\u0001\u0000\u0000"+
		"\u0000\u11d5\u11d3\u0001\u0000\u0000\u0000\u11d6\u01f5\u0001\u0000\u0000"+
		"\u0000\u11d7\u11df\u0005\u01d3\u0000\u0000\u11d8\u11d9\u0005\u01d3\u0000"+
		"\u0000\u11d9\u11da\u0005\u01e5\u0000\u0000\u11da\u11db\u0005\u001e\u0000"+
		"\u0000\u11db\u11dc\u0003\u0184\u00c2\u0000\u11dc\u11dd\u0005\u001f\u0000"+
		"\u0000\u11dd\u11df\u0001\u0000\u0000\u0000\u11de\u11d7\u0001\u0000\u0000"+
		"\u0000\u11de\u11d8\u0001\u0000\u0000\u0000\u11df\u01f7\u0001\u0000\u0000"+
		"\u0000\u11e0\u11e1\u0005\u01d3\u0000\u0000\u11e1\u01f9\u0001\u0000\u0000"+
		"\u0000\u11e2\u11e3\u0005\u0097\u0000\u0000\u11e3\u11e7\u0003\u009eO\u0000"+
		"\u11e4\u11e5\u0005\u0097\u0000\u0000\u11e5\u11e7\u0003\u015c\u00ae\u0000"+
		"\u11e6\u11e2\u0001\u0000\u0000\u0000\u11e6\u11e4\u0001\u0000\u0000\u0000"+
		"\u11e7\u01fb\u0001\u0000\u0000\u0000\u11e8\u11e9\u0003\u015c\u00ae\u0000"+
		"\u11e9\u01fd\u0001\u0000\u0000\u0000\u11ea\u11ef\u0003\u0202\u0101\u0000"+
		"\u11eb\u11ec\u0005$\u0000\u0000\u11ec\u11ee\u0003\u0202\u0101\u0000\u11ed"+
		"\u11eb\u0001\u0000\u0000\u0000\u11ee\u11f1\u0001\u0000\u0000\u0000\u11ef"+
		"\u11ed\u0001\u0000\u0000\u0000\u11ef\u11f0\u0001\u0000\u0000\u0000\u11f0"+
		"\u01ff\u0001\u0000\u0000\u0000\u11f1\u11ef\u0001\u0000\u0000\u0000\u11f2"+
		"\u11f4\u0003\u0204\u0102\u0000\u11f3\u11f2\u0001\u0000\u0000\u0000\u11f3"+
		"\u11f4\u0001\u0000\u0000\u0000\u11f4\u11f5\u0001\u0000\u0000\u0000\u11f5"+
		"\u11f7\u0003\u0206\u0103\u0000\u11f6\u11f8\u0003\u0138\u009c\u0000\u11f7"+
		"\u11f6\u0001\u0000\u0000\u0000\u11f7\u11f8\u0001\u0000\u0000\u0000\u11f8"+
		"\u11fa\u0001\u0000\u0000\u0000\u11f9\u11fb\u0003\u01f4\u00fa\u0000\u11fa"+
		"\u11f9\u0001\u0000\u0000\u0000\u11fa\u11fb\u0001\u0000\u0000\u0000\u11fb"+
		"\u1208\u0001\u0000\u0000\u0000\u11fc\u11fe\u0003\u0204\u0102\u0000\u11fd"+
		"\u11fc\u0001\u0000\u0000\u0000\u11fd\u11fe\u0001\u0000\u0000\u0000\u11fe"+
		"\u11ff\u0001\u0000\u0000\u0000\u11ff\u1200\u0003\u01e0\u00f0\u0000\u1200"+
		"\u1202\u0003\u0208\u0104\u0000\u1201\u1203\u0003\u0138\u009c\u0000\u1202"+
		"\u1201\u0001\u0000\u0000\u0000\u1202\u1203\u0001\u0000\u0000\u0000\u1203"+
		"\u1205\u0001\u0000\u0000\u0000\u1204\u1206\u0003\u01f4\u00fa\u0000\u1205"+
		"\u1204\u0001\u0000\u0000\u0000\u1205\u1206\u0001\u0000\u0000\u0000\u1206"+
		"\u1208\u0001\u0000\u0000\u0000\u1207\u11f3\u0001\u0000\u0000\u0000\u1207"+
		"\u11fd\u0001\u0000\u0000\u0000\u1208\u0201\u0001\u0000\u0000\u0000\u1209"+
		"\u120a\u0003\u015c\u00ae\u0000\u120a\u120b\u0003\u0200\u0100\u0000\u120b"+
		"\u1215\u0001\u0000\u0000\u0000\u120c\u120d\u0003\u0178\u00bc\u0000\u120d"+
		"\u120e\u0003\u0200\u0100\u0000\u120e\u1215\u0001\u0000\u0000\u0000\u120f"+
		"\u1210\u0005\u001e\u0000\u0000\u1210\u1211\u0003\u010c\u0086\u0000\u1211"+
		"\u1212\u0005\u001f\u0000\u0000\u1212\u1213\u0003\u0200\u0100\u0000\u1213"+
		"\u1215\u0001\u0000\u0000\u0000\u1214\u1209\u0001\u0000\u0000\u0000\u1214"+
		"\u120c\u0001\u0000\u0000\u0000\u1214\u120f\u0001\u0000\u0000\u0000\u1215"+
		"\u0203\u0001\u0000\u0000\u0000\u1216\u1217\u0005f\u0000\u0000\u1217\u1218"+
		"\u0003\u01e0\u00f0\u0000\u1218\u0205\u0001\u0000\u0000\u0000\u1219\u121c"+
		"\u0003\u01e0\u00f0\u0000\u121a\u121c\u0001\u0000\u0000\u0000\u121b\u1219"+
		"\u0001\u0000\u0000\u0000\u121b\u121a\u0001\u0000\u0000\u0000\u121c\u0207"+
		"\u0001\u0000\u0000\u0000\u121d\u121e\u0005\u001e\u0000\u0000\u121e\u121f"+
		"\u0003\u020a\u0105\u0000\u121f\u1220\u0005\u001f\u0000\u0000\u1220\u0209"+
		"\u0001\u0000\u0000\u0000\u1221\u1226\u0003\u020c\u0106\u0000\u1222\u1223"+
		"\u0005$\u0000\u0000\u1223\u1225\u0003\u020c\u0106\u0000\u1224\u1222\u0001"+
		"\u0000\u0000\u0000\u1225\u1228\u0001\u0000\u0000\u0000\u1226\u1224\u0001"+
		"\u0000\u0000\u0000\u1226\u1227\u0001\u0000\u0000\u0000\u1227\u020b\u0001"+
		"\u0000\u0000\u0000\u1228\u1226\u0001\u0000\u0000\u0000\u1229\u122a\u0003"+
		"\u00acV\u0000\u122a\u122b\u0005\u0016\u0000\u0000\u122b\u122c\u0003\u020e"+
		"\u0107\u0000\u122c\u1239\u0001\u0000\u0000\u0000\u122d\u1239\u0003\u00ac"+
		"V\u0000\u122e\u122f\u0003\u00acV\u0000\u122f\u1230\u0005\u0012\u0000\u0000"+
		"\u1230\u1231\u0003\u00acV\u0000\u1231\u1232\u0005\u0016\u0000\u0000\u1232"+
		"\u1233\u0003\u020e\u0107\u0000\u1233\u1239\u0001\u0000\u0000\u0000\u1234"+
		"\u1235\u0003\u00acV\u0000\u1235\u1236\u0005\u0012\u0000\u0000\u1236\u1237"+
		"\u0003\u00acV\u0000\u1237\u1239\u0001\u0000\u0000\u0000\u1238\u1229\u0001"+
		"\u0000\u0000\u0000\u1238\u122d\u0001\u0000\u0000\u0000\u1238\u122e\u0001"+
		"\u0000\u0000\u0000\u1238\u1234\u0001\u0000\u0000\u0000\u1239\u020d\u0001"+
		"\u0000\u0000\u0000\u123a\u124a\u0003\u0210\u0108\u0000\u123b\u124a\u0003"+
		"\u00deo\u0000\u123c\u124a\u0003\u0136\u009b\u0000\u123d\u124a\u0005\u0250"+
		"\u0000\u0000\u123e\u124a\u0005\u024f\u0000\u0000\u123f\u124a\u0005\u0115"+
		"\u0000\u0000\u1240\u1247\u0003\u0154\u00aa\u0000\u1241\u1242\u0005\u001e"+
		"\u0000\u0000\u1242\u1243\u0003\u0276\u013b\u0000\u1243\u1244\u0005\u001f"+
		"\u0000\u0000\u1244\u1248\u0001\u0000\u0000\u0000\u1245\u1246\u0005\u001e"+
		"\u0000\u0000\u1246\u1248\u0005\u001f\u0000\u0000\u1247\u1241\u0001\u0000"+
		"\u0000\u0000\u1247\u1245\u0001\u0000\u0000\u0000\u1248\u124a\u0001\u0000"+
		"\u0000\u0000\u1249\u123a\u0001\u0000\u0000\u0000\u1249\u123b\u0001\u0000"+
		"\u0000\u0000\u1249\u123c\u0001\u0000\u0000\u0000\u1249\u123d\u0001\u0000"+
		"\u0000\u0000\u1249\u123e\u0001\u0000\u0000\u0000\u1249\u123f\u0001\u0000"+
		"\u0000\u0000\u1249\u1240\u0001\u0000\u0000\u0000\u124a\u020f\u0001\u0000"+
		"\u0000\u0000\u124b\u1258\u0003\u017e\u00bf\u0000\u124c\u124d\u0003\u0160"+
		"\u00b0\u0000\u124d\u124e\u0003\u019e\u00cf\u0000\u124e\u124f\u0005\u000b"+
		"\u0000\u0000\u124f\u1250\u0005\u022d\u0000\u0000\u1250\u1258\u0001\u0000"+
		"\u0000\u0000\u1251\u1252\u0005\u00f0\u0000\u0000\u1252\u1253\u0003\u0160"+
		"\u00b0\u0000\u1253\u1254\u0003\u019e\u00cf\u0000\u1254\u1255\u0005\u000b"+
		"\u0000\u0000\u1255\u1256\u0005\u022d\u0000\u0000\u1256\u1258\u0001\u0000"+
		"\u0000\u0000\u1257\u124b\u0001\u0000\u0000\u0000\u1257\u124c\u0001\u0000"+
		"\u0000\u0000\u1257\u1251\u0001\u0000\u0000\u0000\u1258\u0211\u0001\u0000"+
		"\u0000\u0000\u1259\u125b\u0003\u0214\u010a\u0000\u125a\u125c\u0003\u0216"+
		"\u010b\u0000\u125b\u125a\u0001\u0000\u0000\u0000\u125b\u125c\u0001\u0000"+
		"\u0000\u0000\u125c\u125e\u0001\u0000\u0000\u0000\u125d\u125f\u0003\u0218"+
		"\u010c\u0000\u125e\u125d\u0001\u0000\u0000\u0000\u125e\u125f\u0001\u0000"+
		"\u0000\u0000\u125f\u1261\u0001\u0000\u0000\u0000\u1260\u1262\u0003\u01de"+
		"\u00ef\u0000\u1261\u1260\u0001\u0000\u0000\u0000\u1261\u1262\u0001\u0000"+
		"\u0000\u0000\u1262\u1275\u0001\u0000\u0000\u0000\u1263\u1264\u0003\u0214"+
		"\u010a\u0000\u1264\u1265\u0005\u001e\u0000\u0000\u1265\u126a\u0005\u024f"+
		"\u0000\u0000\u1266\u1267\u0005$\u0000\u0000\u1267\u1269\u0005\u024f\u0000"+
		"\u0000\u1268\u1266\u0001\u0000\u0000\u0000\u1269\u126c\u0001\u0000\u0000"+
		"\u0000\u126a\u1268\u0001\u0000\u0000\u0000\u126a\u126b\u0001\u0000\u0000"+
		"\u0000\u126b\u126d\u0001\u0000\u0000\u0000\u126c\u126a\u0001\u0000\u0000"+
		"\u0000\u126d\u126f\u0005\u001f\u0000\u0000\u126e\u1270\u0003\u0218\u010c"+
		"\u0000\u126f\u126e\u0001\u0000\u0000\u0000\u126f\u1270\u0001\u0000\u0000"+
		"\u0000\u1270\u1272\u0001\u0000\u0000\u0000\u1271\u1273\u0003\u01de\u00ef"+
		"\u0000\u1272\u1271\u0001\u0000\u0000\u0000\u1272\u1273\u0001\u0000\u0000"+
		"\u0000\u1273\u1275\u0001\u0000\u0000\u0000\u1274\u1259\u0001\u0000\u0000"+
		"\u0000\u1274\u1263\u0001\u0000\u0000\u0000\u1275\u0213\u0001\u0000\u0000"+
		"\u0000\u1276\u12b0\u0005\u00bc\u0000\u0000\u1277\u12b0\u0005\u00bd\u0000"+
		"\u0000\u1278\u12b0\u0005\u00be\u0000\u0000\u1279\u12b0\u0005\u00bf\u0000"+
		"\u0000\u127a\u12b0\u0005\u022e\u0000\u0000\u127b\u12b0\u0005\u022a\u0000"+
		"\u0000\u127c\u12b0\u0005\u022f\u0000\u0000\u127d\u12b0\u0005\u022c\u0000"+
		"\u0000\u127e\u12b0\u0005\u0230\u0000\u0000\u127f\u12b0\u0005\u022b\u0000"+
		"\u0000\u1280\u12b0\u0005\u00c0\u0000\u0000\u1281\u12b0\u0005\u00c1\u0000"+
		"\u0000\u1282\u12b0\u0005\u00c2\u0000\u0000\u1283\u1284\u0005\u0204\u0000"+
		"\u0000\u1284\u12b0\u0005\u01ca\u0000\u0000\u1285\u12b0\u0005\u00c3\u0000"+
		"\u0000\u1286\u12b0\u0005\u00c4\u0000\u0000\u1287\u12b0\u0005\u00c5\u0000"+
		"\u0000\u1288\u12b0\u0005\u00c6\u0000\u0000\u1289\u12b0\u0005\u0206\u0000"+
		"\u0000\u128a\u12b0\u0005\u0205\u0000\u0000\u128b\u12b0\u0005\u0231\u0000"+
		"\u0000\u128c\u12b0\u0005\u0227\u0000\u0000\u128d\u12b0\u0005\u00c7\u0000"+
		"\u0000\u128e\u12b0\u0005\u020b\u0000\u0000\u128f\u12b0\u0005\u0209\u0000"+
		"\u0000\u1290\u12b0\u0005\u020a\u0000\u0000\u1291\u12b0\u0005\u0208\u0000"+
		"\u0000\u1292\u12b0\u0005\u0203\u0000\u0000\u1293\u12b0\u0005\u00c8\u0000"+
		"\u0000\u1294\u12b0\u0005\u00c9\u0000\u0000\u1295\u12b0\u0005\u00ca\u0000"+
		"\u0000\u1296\u12b0\u0005\u00cb\u0000\u0000\u1297\u12b0\u0005\u00cc\u0000"+
		"\u0000\u1298\u12b0\u0005\u00cd\u0000\u0000\u1299\u12b0\u0005\u00ce\u0000"+
		"\u0000\u129a\u12b0\u0005\u00cf\u0000\u0000\u129b\u12b0\u0005\u00d0\u0000"+
		"\u0000\u129c\u12b0\u0005\u00d1\u0000\u0000\u129d\u12b0\u0005\u00d2\u0000"+
		"\u0000\u129e\u12b0\u0005\u00d3\u0000\u0000\u129f\u12b0\u0005\u00d4\u0000"+
		"\u0000\u12a0\u12b0\u0005\u00d5\u0000\u0000\u12a1\u12b0\u0005\u00d6\u0000"+
		"\u0000\u12a2\u12b0\u0005\u00d7\u0000\u0000\u12a3\u12b0\u0005\u00d8\u0000"+
		"\u0000\u12a4\u12b0\u0005\u00d9\u0000\u0000\u12a5\u12b0\u0005\u00da\u0000"+
		"\u0000\u12a6\u12b0\u0005\u00db\u0000\u0000\u12a7\u12b0\u0005\u00dc\u0000"+
		"\u0000\u12a8\u12b0\u0005\u00dd\u0000\u0000\u12a9\u12b0\u0005\u00de\u0000"+
		"\u0000\u12aa\u12b0\u0005\u00df\u0000\u0000\u12ab\u12b0\u0005\u0207\u0000"+
		"\u0000\u12ac\u12b0\u0003\u00e4r\u0000\u12ad\u12b0\u0003\u0190\u00c8\u0000"+
		"\u12ae\u12b0\u0003\u017e\u00bf\u0000\u12af\u1276\u0001\u0000\u0000\u0000"+
		"\u12af\u1277\u0001\u0000\u0000\u0000\u12af\u1278\u0001\u0000\u0000\u0000"+
		"\u12af\u1279\u0001\u0000\u0000\u0000\u12af\u127a\u0001\u0000\u0000\u0000"+
		"\u12af\u127b\u0001\u0000\u0000\u0000\u12af\u127c\u0001\u0000\u0000\u0000"+
		"\u12af\u127d\u0001\u0000\u0000\u0000\u12af\u127e\u0001\u0000\u0000\u0000"+
		"\u12af\u127f\u0001\u0000\u0000\u0000\u12af\u1280\u0001\u0000\u0000\u0000"+
		"\u12af\u1281\u0001\u0000\u0000\u0000\u12af\u1282\u0001\u0000\u0000\u0000"+
		"\u12af\u1283\u0001\u0000\u0000\u0000\u12af\u1285\u0001\u0000\u0000\u0000"+
		"\u12af\u1286\u0001\u0000\u0000\u0000\u12af\u1287\u0001\u0000\u0000\u0000"+
		"\u12af\u1288\u0001\u0000\u0000\u0000\u12af\u1289\u0001\u0000\u0000\u0000"+
		"\u12af\u128a\u0001\u0000\u0000\u0000\u12af\u128b\u0001\u0000\u0000\u0000"+
		"\u12af\u128c\u0001\u0000\u0000\u0000\u12af\u128d\u0001\u0000\u0000\u0000"+
		"\u12af\u128e\u0001\u0000\u0000\u0000\u12af\u128f\u0001\u0000\u0000\u0000"+
		"\u12af\u1290\u0001\u0000\u0000\u0000\u12af\u1291\u0001\u0000\u0000\u0000"+
		"\u12af\u1292\u0001\u0000\u0000\u0000\u12af\u1293\u0001\u0000\u0000\u0000"+
		"\u12af\u1294\u0001\u0000\u0000\u0000\u12af\u1295\u0001\u0000\u0000\u0000"+
		"\u12af\u1296\u0001\u0000\u0000\u0000\u12af\u1297\u0001\u0000\u0000\u0000"+
		"\u12af\u1298\u0001\u0000\u0000\u0000\u12af\u1299\u0001\u0000\u0000\u0000"+
		"\u12af\u129a\u0001\u0000\u0000\u0000\u12af\u129b\u0001\u0000\u0000\u0000"+
		"\u12af\u129c\u0001\u0000\u0000\u0000\u12af\u129d\u0001\u0000\u0000\u0000"+
		"\u12af\u129e\u0001\u0000\u0000\u0000\u12af\u129f\u0001\u0000\u0000\u0000"+
		"\u12af\u12a0\u0001\u0000\u0000\u0000\u12af\u12a1\u0001\u0000\u0000\u0000"+
		"\u12af\u12a2\u0001\u0000\u0000\u0000\u12af\u12a3\u0001\u0000\u0000\u0000"+
		"\u12af\u12a4\u0001\u0000\u0000\u0000\u12af\u12a5\u0001\u0000\u0000\u0000"+
		"\u12af\u12a6\u0001\u0000\u0000\u0000\u12af\u12a7\u0001\u0000\u0000\u0000"+
		"\u12af\u12a8\u0001\u0000\u0000\u0000\u12af\u12a9\u0001\u0000\u0000\u0000"+
		"\u12af\u12aa\u0001\u0000\u0000\u0000\u12af\u12ab\u0001\u0000\u0000\u0000"+
		"\u12af\u12ac\u0001\u0000\u0000\u0000\u12af\u12ad\u0001\u0000\u0000\u0000"+
		"\u12af\u12ae\u0001\u0000\u0000\u0000\u12b0\u0215\u0001\u0000\u0000\u0000"+
		"\u12b1\u12b2\u0005\u001e\u0000\u0000\u12b2\u12b5\u0005\u0250\u0000\u0000"+
		"\u12b3\u12b4\u0005$\u0000\u0000\u12b4\u12b6\u0005\u0250\u0000\u0000\u12b5"+
		"\u12b3\u0001\u0000\u0000\u0000\u12b5\u12b6\u0001\u0000\u0000\u0000\u12b6"+
		"\u12b7\u0001\u0000\u0000\u0000\u12b7\u12b8\u0005\u001f\u0000\u0000\u12b8"+
		"\u0217\u0001\u0000\u0000\u0000\u12b9\u12ba\u0007\u0016\u0000\u0000\u12ba"+
		"\u12bc\u0005\u01c0\u0000\u0000\u12bb\u12bd\u0005\u0016\u0000\u0000\u12bc"+
		"\u12bb\u0001\u0000\u0000\u0000\u12bc\u12bd\u0001\u0000\u0000\u0000\u12bd"+
		"\u12be\u0001\u0000\u0000\u0000\u12be\u12bf\u0003\u021a\u010d\u0000\u12bf"+
		"\u0219\u0001\u0000\u0000\u0000\u12c0\u12c3\u0003\u00e4r\u0000\u12c1\u12c2"+
		"\u0005\u0012\u0000\u0000\u12c2\u12c4\u0003\u00e4r\u0000\u12c3\u12c1\u0001"+
		"\u0000\u0000\u0000\u12c3\u12c4\u0001\u0000\u0000\u0000\u12c4\u021b\u0001"+
		"\u0000\u0000\u0000\u12c5\u12ca\u0003\u021a\u010d\u0000\u12c6\u12c7\u0005"+
		"$\u0000\u0000\u12c7\u12c9\u0003\u021a\u010d\u0000\u12c8\u12c6\u0001\u0000"+
		"\u0000\u0000\u12c9\u12cc\u0001\u0000\u0000\u0000\u12ca\u12c8\u0001\u0000"+
		"\u0000\u0000\u12ca\u12cb\u0001\u0000\u0000\u0000\u12cb\u021d\u0001\u0000"+
		"\u0000\u0000\u12cc\u12ca\u0001\u0000\u0000\u0000\u12cd\u12d3\u0005\u0250"+
		"\u0000\u0000\u12ce\u12cf\u0005\r\u0000\u0000\u12cf\u12d3\u0005\u0250\u0000"+
		"\u0000\u12d0\u12d1\u0005\u000e\u0000\u0000\u12d1\u12d3\u0005\u0250\u0000"+
		"\u0000\u12d2\u12cd\u0001\u0000\u0000\u0000\u12d2\u12ce\u0001\u0000\u0000"+
		"\u0000\u12d2\u12d0\u0001\u0000\u0000\u0000\u12d3\u021f\u0001\u0000\u0000"+
		"\u0000\u12d4\u12da\u0005\u01f0\u0000\u0000\u12d5\u12da\u0005\u01f1\u0000"+
		"\u0000\u12d6\u12da\u0005\u01e5\u0000\u0000\u12d7\u12da\u0003\u0222\u0111"+
		"\u0000\u12d8\u12da\u0005\u024f\u0000\u0000\u12d9\u12d4\u0001\u0000\u0000"+
		"\u0000\u12d9\u12d5\u0001\u0000\u0000\u0000\u12d9\u12d6\u0001\u0000\u0000"+
		"\u0000\u12d9\u12d7\u0001\u0000\u0000\u0000\u12d9\u12d8\u0001\u0000\u0000"+
		"\u0000\u12da\u0221\u0001\u0000\u0000\u0000\u12db\u12e0\u0003\u00e4r\u0000"+
		"\u12dc\u12e0\u0003\u00e8t\u0000\u12dd\u12e0\u0003\u0224\u0112\u0000\u12de"+
		"\u12e0\u0003\u00eau\u0000\u12df\u12db\u0001\u0000\u0000\u0000\u12df\u12dc"+
		"\u0001\u0000\u0000\u0000\u12df\u12dd\u0001\u0000\u0000\u0000\u12df\u12de"+
		"\u0001\u0000\u0000\u0000\u12e0\u0223\u0001\u0000\u0000\u0000\u12e1\u12e2"+
		"\u0007\u0017\u0000\u0000\u12e2\u0225\u0001\u0000\u0000\u0000\u12e3\u12e4"+
		"\u0003\u015c\u00ae\u0000\u12e4\u0227\u0001\u0000\u0000\u0000\u12e5\u12ec"+
		"\u0003\u00e4r\u0000\u12e6\u12ec\u0003\u0222\u0111\u0000\u12e7\u12ec\u0005"+
		"\u0220\u0000\u0000\u12e8\u12ec\u0005\u00a8\u0000\u0000\u12e9\u12ec\u0005"+
		"\u00e2\u0000\u0000\u12ea\u12ec\u0005\u0257\u0000\u0000\u12eb\u12e5\u0001"+
		"\u0000\u0000\u0000\u12eb\u12e6\u0001\u0000\u0000\u0000\u12eb\u12e7\u0001"+
		"\u0000\u0000\u0000\u12eb\u12e8\u0001\u0000\u0000\u0000\u12eb\u12e9\u0001"+
		"\u0000\u0000\u0000\u12eb\u12ea\u0001\u0000\u0000\u0000\u12ec\u0229\u0001"+
		"\u0000\u0000\u0000\u12ed\u12ee\u0006\u0115\uffff\uffff\u0000\u12ee\u12ef"+
		"\u0003\u015c\u00ae\u0000\u12ef\u12f5\u0001\u0000\u0000\u0000\u12f0\u12f1"+
		"\n\u0001\u0000\u0000\u12f1\u12f2\u0005\u0012\u0000\u0000\u12f2\u12f4\u0003"+
		"\u015c\u00ae\u0000\u12f3\u12f0\u0001\u0000\u0000\u0000\u12f4\u12f7\u0001"+
		"\u0000\u0000\u0000\u12f5\u12f3\u0001\u0000\u0000\u0000\u12f5\u12f6\u0001"+
		"\u0000\u0000\u0000\u12f6\u022b\u0001\u0000\u0000\u0000\u12f7\u12f5\u0001"+
		"\u0000\u0000\u0000\u12f8\u12fd\u0003\u022e\u0117\u0000\u12f9\u12fa\u0005"+
		"$\u0000\u0000\u12fa\u12fc\u0003\u022e\u0117\u0000\u12fb\u12f9\u0001\u0000"+
		"\u0000\u0000\u12fc\u12ff\u0001\u0000\u0000\u0000\u12fd\u12fb\u0001\u0000"+
		"\u0000\u0000\u12fd\u12fe\u0001\u0000\u0000\u0000\u12fe\u022d\u0001\u0000"+
		"\u0000\u0000\u12ff\u12fd\u0001\u0000\u0000\u0000\u1300\u1303\u0003\u0220"+
		"\u0110\u0000\u1301\u1303\u0003\u0232\u0119\u0000\u1302\u1300\u0001\u0000"+
		"\u0000\u0000\u1302\u1301\u0001\u0000\u0000\u0000\u1303\u022f\u0001\u0000"+
		"\u0000\u0000\u1304\u1312\u0005\u024f\u0000\u0000\u1305\u1312\u0003\u00e4"+
		"r\u0000\u1306\u1307\u0005\u0208\u0000\u0000\u1307\u1308\u0005\u024f\u0000"+
		"\u0000\u1308\u1312\u0003\u01ac\u00d6\u0000\u1309\u130a\u0005\u0208\u0000"+
		"\u0000\u130a\u130b\u0005\u001e\u0000\u0000\u130b\u130c\u0005\u0250\u0000"+
		"\u0000\u130c\u130d\u0005\u001f\u0000\u0000\u130d\u1312\u0005\u024f\u0000"+
		"\u0000\u130e\u1312\u0003\u0232\u0119\u0000\u130f\u1312\u0005\u0217\u0000"+
		"\u0000\u1310\u1312\u0005\u0223\u0000\u0000\u1311\u1304\u0001\u0000\u0000"+
		"\u0000\u1311\u1305\u0001\u0000\u0000\u0000\u1311\u1306\u0001\u0000\u0000"+
		"\u0000\u1311\u1309\u0001\u0000\u0000\u0000\u1311\u130e\u0001\u0000\u0000"+
		"\u0000\u1311\u130f\u0001\u0000\u0000\u0000\u1311\u1310\u0001\u0000\u0000"+
		"\u0000\u1312\u0231\u0001\u0000\u0000\u0000\u1313\u1319\u0005\u0250\u0000"+
		"\u0000\u1314\u1315\u0005\r\u0000\u0000\u1315\u1319\u0005\u0250\u0000\u0000"+
		"\u1316\u1317\u0005\u000e\u0000\u0000\u1317\u1319\u0005\u0250\u0000\u0000"+
		"\u1318\u1313\u0001\u0000\u0000\u0000\u1318\u1314\u0001\u0000\u0000\u0000"+
		"\u1318\u1316\u0001\u0000\u0000\u0000\u1319\u0233\u0001\u0000\u0000\u0000"+
		"\u131a\u131b\u0005[\u0000\u0000\u131b\u1322\u0005\u018b\u0000\u0000\u131c"+
		"\u131d\u0005[\u0000\u0000\u131d\u1322\u0005\u013f\u0000\u0000\u131e\u131f"+
		"\u0005\u0232\u0000\u0000\u131f\u1322\u0005[\u0000\u0000\u1320\u1322\u0005"+
		"\u0180\u0000\u0000\u1321\u131a\u0001\u0000\u0000\u0000\u1321\u131c\u0001"+
		"\u0000\u0000\u0000\u1321\u131e\u0001\u0000\u0000\u0000\u1321\u1320\u0001"+
		"\u0000\u0000\u0000\u1322\u0235\u0001\u0000\u0000\u0000\u1323\u1324\u0003"+
		"\u015c\u00ae\u0000\u1324\u1326\u0003\u017e\u00bf\u0000\u1325\u1327\u0003"+
		"\u0264\u0132\u0000\u1326\u1325\u0001\u0000\u0000\u0000\u1326\u1327\u0001"+
		"\u0000\u0000\u0000\u1327\u1328\u0001\u0000\u0000\u0000\u1328\u1329\u0003"+
		"\u0238\u011c\u0000\u1329\u0237\u0001\u0000\u0000\u0000\u132a\u132c\u0003"+
		"\u023a\u011d\u0000\u132b\u132a\u0001\u0000\u0000\u0000\u132c\u132f\u0001"+
		"\u0000\u0000\u0000\u132d\u132b\u0001\u0000\u0000\u0000\u132d\u132e\u0001"+
		"\u0000\u0000\u0000\u132e\u0239\u0001\u0000\u0000\u0000\u132f\u132d\u0001"+
		"\u0000\u0000\u0000\u1330\u1331\u0005\u01c4\u0000\u0000\u1331\u1332\u0003"+
		"\u00f4z\u0000\u1332\u1333\u0003\u023e\u011f\u0000\u1333\u1339\u0001\u0000"+
		"\u0000\u0000\u1334\u1339\u0003\u023e\u011f\u0000\u1335\u1339\u0003\u023c"+
		"\u011e\u0000\u1336\u1337\u0005f\u0000\u0000\u1337\u1339\u0003\u01e0\u00f0"+
		"\u0000\u1338\u1330\u0001\u0000\u0000\u0000\u1338\u1334\u0001\u0000\u0000"+
		"\u0000\u1338\u1335\u0001\u0000\u0000\u0000\u1338\u1336\u0001\u0000\u0000"+
		"\u0000\u1339\u023b\u0001\u0000\u0000\u0000\u133a\u1342\u0005r\u0000\u0000"+
		"\u133b\u133c\u0005\u01ee\u0000\u0000\u133c\u1342\u0005r\u0000\u0000\u133d"+
		"\u133e\u0005\u0088\u0000\u0000\u133e\u1342\u0005s\u0000\u0000\u133f\u1340"+
		"\u0005\u0088\u0000\u0000\u1340\u1342\u0005\u0082\u0000\u0000\u1341\u133a"+
		"\u0001\u0000\u0000\u0000\u1341\u133b\u0001\u0000\u0000\u0000\u1341\u133d"+
		"\u0001\u0000\u0000\u0000\u1341\u133f\u0001\u0000\u0000\u0000\u1342\u023d"+
		"\u0001\u0000\u0000\u0000\u1343\u1344\u0005\u01ee\u0000\u0000\u1344\u1377"+
		"\u0005\u01ef\u0000\u0000\u1345\u1377\u0005\u01ef\u0000\u0000\u1346\u1349"+
		"\u0005\u01c6\u0000\u0000\u1347\u1348\u0005\u01d1\u0000\u0000\u1348\u134a"+
		"\u0003\u0252\u0129\u0000\u1349\u1347\u0001\u0000\u0000\u0000\u1349\u134a"+
		"\u0001\u0000\u0000\u0000\u134a\u134b\u0001\u0000\u0000\u0000\u134b\u1377"+
		"\u0003\u0250\u0128\u0000\u134c\u134d\u0005\u01c5\u0000\u0000\u134d\u1350"+
		"\u0005\u01c8\u0000\u0000\u134e\u134f\u0005\u01d1\u0000\u0000\u134f\u1351"+
		"\u0003\u0252\u0129\u0000\u1350\u134e\u0001\u0000\u0000\u0000\u1350\u1351"+
		"\u0001\u0000\u0000\u0000\u1351\u1352\u0001\u0000\u0000\u0000\u1352\u1377"+
		"\u0003\u0250\u0128\u0000\u1353\u1354\u0005T\u0000\u0000\u1354\u1355\u0005"+
		"\u001e\u0000\u0000\u1355\u1356\u0003\u010c\u0086\u0000\u1356\u1358\u0005"+
		"\u001f\u0000\u0000\u1357\u1359\u0003\u024e\u0127\u0000\u1358\u1357\u0001"+
		"\u0000\u0000\u0000\u1358\u1359\u0001\u0000\u0000\u0000\u1359\u1377\u0001"+
		"\u0000\u0000\u0000\u135a\u135b\u0005\u0217\u0000\u0000\u135b\u1377\u0003"+
		"\u010e\u0087\u0000\u135c\u135d\u0005U\u0000\u0000\u135d\u135e\u0003\u024c"+
		"\u0126\u0000\u135e\u135f\u0005\u01e4\u0000\u0000\u135f\u1361\u0005\u0081"+
		"\u0000\u0000\u1360\u1362\u0003\u0240\u0120\u0000\u1361\u1360\u0001\u0000"+
		"\u0000\u0000\u1361\u1362\u0001\u0000\u0000\u0000\u1362\u1377\u0001\u0000"+
		"\u0000\u0000\u1363\u1364\u0005U\u0000\u0000\u1364\u1365\u0003\u024c\u0126"+
		"\u0000\u1365\u1366\u0005\u01e4\u0000\u0000\u1366\u1367\u0005\u001e\u0000"+
		"\u0000\u1367\u1368\u0003\u010c\u0086\u0000\u1368\u1369\u0005\u001f\u0000"+
		"\u0000\u1369\u136a\u0005\u0193\u0000\u0000\u136a\u1377\u0001\u0000\u0000"+
		"\u0000\u136b\u136c\u0005\\\u0000\u0000\u136c\u136e\u0003\u015a\u00ad\u0000"+
		"\u136d\u136f\u0003\u0246\u0123\u0000\u136e\u136d\u0001\u0000\u0000\u0000"+
		"\u136e\u136f\u0001\u0000\u0000\u0000\u136f\u1371\u0001\u0000\u0000\u0000"+
		"\u1370\u1372\u0003\u0262\u0131\u0000\u1371\u1370\u0001\u0000\u0000\u0000"+
		"\u1371\u1372\u0001\u0000\u0000\u0000\u1372\u1374\u0001\u0000\u0000\u0000"+
		"\u1373\u1375\u0003\u025a\u012d\u0000\u1374\u1373\u0001\u0000\u0000\u0000"+
		"\u1374\u1375\u0001\u0000\u0000\u0000\u1375\u1377\u0001\u0000\u0000\u0000"+
		"\u1376\u1343\u0001\u0000\u0000\u0000\u1376\u1345\u0001\u0000\u0000\u0000"+
		"\u1376\u1346\u0001\u0000\u0000\u0000\u1376\u134c\u0001\u0000\u0000\u0000"+
		"\u1376\u1353\u0001\u0000\u0000\u0000\u1376\u135a\u0001\u0000\u0000\u0000"+
		"\u1376\u135c\u0001\u0000\u0000\u0000\u1376\u1363\u0001\u0000\u0000\u0000"+
		"\u1376\u136b\u0001\u0000\u0000\u0000\u1377\u023f\u0001\u0000\u0000\u0000"+
		"\u1378\u1379\u0005\u001e\u0000\u0000\u1379\u137a\u0003\u0242\u0121\u0000"+
		"\u137a\u137b\u0005\u001f\u0000\u0000\u137b\u0241\u0001\u0000\u0000\u0000"+
		"\u137c\u137e\u0003\u0244\u0122\u0000\u137d\u137c\u0001\u0000\u0000\u0000"+
		"\u137e\u137f\u0001\u0000\u0000\u0000\u137f\u137d\u0001\u0000\u0000\u0000"+
		"\u137f\u1380\u0001\u0000\u0000\u0000\u1380\u0243\u0001\u0000\u0000\u0000"+
		"\u1381\u1382\u0005\u01e4\u0000\u0000\u1382\u13a7\u0003\u0180\u00c0\u0000"+
		"\u1383\u1384\u0005c\u0000\u0000\u1384\u13a7\u0003\u0232\u0119\u0000\u1385"+
		"\u1387\u0005X\u0000\u0000\u1386\u1385\u0001\u0000\u0000\u0000\u1386\u1387"+
		"\u0001\u0000\u0000\u0000\u1387\u1388\u0001\u0000\u0000\u0000\u1388\u13a7"+
		"\u0005n\u0000\u0000\u1389\u138b\u0005\u0084\u0000\u0000\u138a\u138c\u0005"+
		"\u01f9\u0000\u0000\u138b\u138a\u0001\u0000\u0000\u0000\u138b\u138c\u0001"+
		"\u0000\u0000\u0000\u138c\u138d\u0001\u0000\u0000\u0000\u138d\u13a7\u0003"+
		"\u0232\u0119\u0000\u138e\u138f\u0007\u0018\u0000\u0000\u138f\u13a7\u0003"+
		"\u0232\u0119\u0000\u1390\u1391\u0005X\u0000\u0000\u1391\u13a7\u0007\u0018"+
		"\u0000\u0000\u1392\u1393\u0005\u0098\u0000\u0000\u1393\u1396\u0005\u01f9"+
		"\u0000\u0000\u1394\u1397\u0003\u01e0\u00f0\u0000\u1395\u1397\u0005\u0115"+
		"\u0000\u0000\u1396\u1394\u0001\u0000\u0000\u0000\u1396\u1395\u0001\u0000"+
		"\u0000\u0000\u1397\u13a7\u0001\u0000\u0000\u0000\u1398\u1399\u0005\u00a6"+
		"\u0000\u0000\u1399\u139a\u0005\u0227\u0000\u0000\u139a\u13a7\u0003\u01e0"+
		"\u00f0\u0000\u139b\u139d\u0005_\u0000\u0000\u139c\u139e\u0005\u01d1\u0000"+
		"\u0000\u139d\u139c\u0001\u0000\u0000\u0000\u139d\u139e\u0001\u0000\u0000"+
		"\u0000\u139e\u139f\u0001\u0000\u0000\u0000\u139f\u13a7\u0003\u0232\u0119"+
		"\u0000\u13a0\u13a7\u0005\u00a1\u0000\u0000\u13a1\u13a3\u0005\u00a1\u0000"+
		"\u0000\u13a2\u13a4\u0005\u01d1\u0000\u0000\u13a3\u13a2\u0001\u0000\u0000"+
		"\u0000\u13a3\u13a4\u0001\u0000\u0000\u0000\u13a4\u13a5\u0001\u0000\u0000"+
		"\u0000\u13a5\u13a7\u0003\u0232\u0119\u0000\u13a6\u1381\u0001\u0000\u0000"+
		"\u0000\u13a6\u1383\u0001\u0000\u0000\u0000\u13a6\u1386\u0001\u0000\u0000"+
		"\u0000\u13a6\u1389\u0001\u0000\u0000\u0000\u13a6\u138e\u0001\u0000\u0000"+
		"\u0000\u13a6\u1390\u0001\u0000\u0000\u0000\u13a6\u1392\u0001\u0000\u0000"+
		"\u0000\u13a6\u1398\u0001\u0000\u0000\u0000\u13a6\u139b\u0001\u0000\u0000"+
		"\u0000\u13a6\u13a0\u0001\u0000\u0000\u0000\u13a6\u13a1\u0001\u0000\u0000"+
		"\u0000\u13a7\u0245\u0001\u0000\u0000\u0000\u13a8\u13a9\u0005\u001e\u0000"+
		"\u0000\u13a9\u13aa\u0003\u024a\u0125\u0000\u13aa\u13ab\u0005\u001f\u0000"+
		"\u0000\u13ab\u0247\u0001\u0000\u0000\u0000\u13ac\u13ad\u0003\u015c\u00ae"+
		"\u0000\u13ad\u0249\u0001\u0000\u0000\u0000\u13ae\u13b3\u0003\u0248\u0124"+
		"\u0000\u13af\u13b0\u0005$\u0000\u0000\u13b0\u13b2\u0003\u0248\u0124\u0000"+
		"\u13b1\u13af\u0001\u0000\u0000\u0000\u13b2\u13b5\u0001\u0000\u0000\u0000"+
		"\u13b3\u13b1\u0001\u0000\u0000\u0000\u13b3\u13b4\u0001\u0000\u0000\u0000"+
		"\u13b4\u024b\u0001\u0000\u0000\u0000\u13b5\u13b3\u0001\u0000\u0000\u0000"+
		"\u13b6\u13ba\u0005R\u0000\u0000\u13b7\u13b8\u0005\u01f9\u0000\u0000\u13b8"+
		"\u13ba\u0005\u0217\u0000\u0000\u13b9\u13b6\u0001\u0000\u0000\u0000\u13b9"+
		"\u13b7\u0001\u0000\u0000\u0000\u13ba\u024d\u0001\u0000\u0000\u0000\u13bb"+
		"\u13bc\u0005X\u0000\u0000\u13bc\u13bd\u0005\u0086\u0000\u0000\u13bd\u024f"+
		"\u0001\u0000\u0000\u0000\u13be\u13bf\u0005\u01e2\u0000\u0000\u13bf\u13c0"+
		"\u0005\u01c3\u0000\u0000\u13c0\u13c1\u0005\u00ad\u0000\u0000\u13c1\u13c2"+
		"\u0003\u00f4z\u0000\u13c2\u0251\u0001\u0000\u0000\u0000\u13c3\u13c4\u0005"+
		"\u001e\u0000\u0000\u13c4\u13c5\u0003\u0254\u012a\u0000\u13c5\u13c6\u0005"+
		"\u001f\u0000\u0000\u13c6\u0253\u0001\u0000\u0000\u0000\u13c7\u13cc\u0003"+
		"\u0256\u012b\u0000\u13c8\u13c9\u0005$\u0000\u0000\u13c9\u13cb\u0003\u0256"+
		"\u012b\u0000\u13ca\u13c8\u0001\u0000\u0000\u0000\u13cb\u13ce\u0001\u0000"+
		"\u0000\u0000\u13cc\u13ca\u0001\u0000\u0000\u0000\u13cc\u13cd\u0001\u0000"+
		"\u0000\u0000\u13cd\u0255\u0001\u0000\u0000\u0000\u13ce\u13cc\u0001\u0000"+
		"\u0000\u0000\u13cf\u13d0\u0003\u0258\u012c\u0000\u13d0\u13d1\u0005\u0016"+
		"\u0000\u0000\u13d1\u13d2\u0003\u020e\u0107\u0000\u13d2\u13d5\u0001\u0000"+
		"\u0000\u0000\u13d3\u13d5\u0003\u0258\u012c\u0000\u13d4\u13cf\u0001\u0000"+
		"\u0000\u0000\u13d4\u13d3\u0001\u0000\u0000\u0000\u13d5\u0257\u0001\u0000"+
		"\u0000\u0000\u13d6\u13dc\u0003\u00e4r\u0000\u13d7\u13dc\u0003\u00e8t\u0000"+
		"\u13d8\u13dc\u0003\u0224\u0112\u0000\u13d9\u13dc\u0003\u00eau\u0000\u13da"+
		"\u13dc\u0003\u00deo\u0000\u13db\u13d6\u0001\u0000\u0000\u0000\u13db\u13d7"+
		"\u0001\u0000\u0000\u0000\u13db\u13d8\u0001\u0000\u0000\u0000\u13db\u13d9"+
		"\u0001\u0000\u0000\u0000\u13db\u13da\u0001\u0000\u0000\u0000\u13dc\u0259"+
		"\u0001\u0000\u0000\u0000\u13dd\u13e6\u0003\u025e\u012f\u0000\u13de\u13e6"+
		"\u0003\u025c\u012e\u0000\u13df\u13e0\u0003\u025e\u012f\u0000\u13e0\u13e1"+
		"\u0003\u025c\u012e\u0000\u13e1\u13e6\u0001\u0000\u0000\u0000\u13e2\u13e3"+
		"\u0003\u025c\u012e\u0000\u13e3\u13e4\u0003\u025e\u012f\u0000\u13e4\u13e6"+
		"\u0001\u0000\u0000\u0000\u13e5\u13dd\u0001\u0000\u0000\u0000\u13e5\u13de"+
		"\u0001\u0000\u0000\u0000\u13e5\u13df\u0001\u0000\u0000\u0000\u13e5\u13e2"+
		"\u0001\u0000\u0000\u0000\u13e6\u025b\u0001\u0000\u0000\u0000\u13e7\u13e8"+
		"\u0005\u01e5\u0000\u0000\u13e8\u13e9\u0005\u01b7\u0000\u0000\u13e9\u13ea"+
		"\u0003\u0260\u0130\u0000\u13ea\u025d\u0001\u0000\u0000\u0000\u13eb\u13ec"+
		"\u0005\u01e5\u0000\u0000\u13ec\u13ed\u0005\u01b6\u0000\u0000\u13ed\u13ee"+
		"\u0003\u0260\u0130\u0000\u13ee\u025f\u0001\u0000\u0000\u0000\u13ef\u13f0"+
		"\u0005X\u0000\u0000\u13f0\u13f8\u0005b\u0000\u0000\u13f1\u13f8\u0005\u00a2"+
		"\u0000\u0000\u13f2\u13f8\u0005S\u0000\u0000\u13f3\u13f4\u0005\u01c0\u0000"+
		"\u0000\u13f4\u13f8\u0005\u01ef\u0000\u0000\u13f5\u13f6\u0005\u01c0\u0000"+
		"\u0000\u13f6\u13f8\u0005\u0217\u0000\u0000\u13f7\u13ef\u0001\u0000\u0000"+
		"\u0000\u13f7\u13f1\u0001\u0000\u0000\u0000\u13f7\u13f2\u0001\u0000\u0000"+
		"\u0000\u13f7\u13f3\u0001\u0000\u0000\u0000\u13f7\u13f5\u0001\u0000\u0000"+
		"\u0000\u13f8\u0261\u0001\u0000\u0000\u0000\u13f9\u13fa\u0005\u008f\u0000"+
		"\u0000\u13fa\u1400\u0005\u01dc\u0000\u0000\u13fb\u13fc\u0005\u008f\u0000"+
		"\u0000\u13fc\u1400\u0005\u009a\u0000\u0000\u13fd\u13fe\u0005\u008f\u0000"+
		"\u0000\u13fe\u1400\u0005\u00aa\u0000\u0000\u13ff\u13f9\u0001\u0000\u0000"+
		"\u0000\u13ff\u13fb\u0001\u0000\u0000\u0000\u13ff\u13fd\u0001\u0000\u0000"+
		"\u0000\u1400\u0263\u0001\u0000\u0000\u0000\u1401\u1402\u0005\u016e\u0000"+
		"\u0000\u1402\u1403\u0005\u001e\u0000\u0000\u1403\u1404\u0003\u0266\u0133"+
		"\u0000\u1404\u1405\u0005\u001f\u0000\u0000\u1405\u0265\u0001\u0000\u0000"+
		"\u0000\u1406\u140b\u0003\u0268\u0134\u0000\u1407\u1408\u0005$\u0000\u0000"+
		"\u1408\u140a\u0003\u0268\u0134\u0000\u1409\u1407\u0001\u0000\u0000\u0000"+
		"\u140a\u140d\u0001\u0000\u0000\u0000\u140b\u1409\u0001\u0000\u0000\u0000"+
		"\u140b\u140c\u0001\u0000\u0000\u0000\u140c\u0267\u0001\u0000\u0000\u0000"+
		"\u140d\u140b\u0001\u0000\u0000\u0000\u140e\u140f\u0003\u026c\u0136\u0000"+
		"\u140f\u1410\u0003\u026a\u0135\u0000\u1410\u0269\u0001\u0000\u0000\u0000"+
		"\u1411\u1412\u0005\u024f\u0000\u0000\u1412\u026b\u0001\u0000\u0000\u0000"+
		"\u1413\u1414\u0003\u01a2\u00d1\u0000\u1414\u026d\u0001\u0000\u0000\u0000"+
		"\u1415\u141c\u0005\u0092\u0000\u0000\u1416\u141c\u0005\u01dc\u0000\u0000"+
		"\u1417\u141c\u0005\u0217\u0000\u0000\u1418\u1419\u0005\u01e2\u0000\u0000"+
		"\u1419\u141a\u0005\u01c3\u0000\u0000\u141a\u141c\u0003\u00f4z\u0000\u141b"+
		"\u1415\u0001\u0000\u0000\u0000\u141b\u1416\u0001\u0000\u0000\u0000\u141b"+
		"\u1417\u0001\u0000\u0000\u0000\u141b\u1418\u0001\u0000\u0000\u0000\u141c"+
		"\u026f\u0001\u0000\u0000\u0000\u141d\u1420\u0005\u001e\u0000\u0000\u141e"+
		"\u1421\u0003\u017e\u00bf\u0000\u141f\u1421\u0005\u0115\u0000\u0000\u1420"+
		"\u141e\u0001\u0000\u0000\u0000\u1420\u141f\u0001\u0000\u0000\u0000\u1421"+
		"\u1422\u0001\u0000\u0000\u0000\u1422\u1423\u0005$\u0000\u0000\u1423\u1424"+
		"\u0003\u017e\u00bf\u0000\u1424\u1425\u0005\u001f\u0000\u0000\u1425\u0271"+
		"\u0001\u0000\u0000\u0000\u1426\u1427\u0003\u0274\u013a\u0000\u1427\u1428"+
		"\u0003\u014c\u00a6\u0000\u1428\u1429\u0003\u0210\u0108\u0000\u1429\u1436"+
		"\u0001\u0000\u0000\u0000\u142a\u142b\u0003\u014c\u00a6\u0000\u142b\u142c"+
		"\u0003\u0274\u013a\u0000\u142c\u142d\u0003\u0210\u0108\u0000\u142d\u1436"+
		"\u0001\u0000\u0000\u0000\u142e\u142f\u0003\u014c\u00a6\u0000\u142f\u1430"+
		"\u0003\u0210\u0108\u0000\u1430\u1436\u0001\u0000\u0000\u0000\u1431\u1432"+
		"\u0003\u0274\u013a\u0000\u1432\u1433\u0003\u0210\u0108\u0000\u1433\u1436"+
		"\u0001\u0000\u0000\u0000\u1434\u1436\u0003\u0210\u0108\u0000\u1435\u1426"+
		"\u0001\u0000\u0000\u0000\u1435\u142a\u0001\u0000\u0000\u0000\u1435\u142e"+
		"\u0001\u0000\u0000\u0000\u1435\u1431\u0001\u0000\u0000\u0000\u1435\u1434"+
		"\u0001\u0000\u0000\u0000\u1436\u0273\u0001\u0000\u0000\u0000\u1437\u143e"+
		"\u0005\u01f3\u0000\u0000\u1438\u143e\u0005\u019d\u0000\u0000\u1439\u143e"+
		"\u0005\u019e\u0000\u0000\u143a\u143b\u0005\u01f3\u0000\u0000\u143b\u143e"+
		"\u0005\u019d\u0000\u0000\u143c\u143e\u0005\u0109\u0000\u0000\u143d\u1437"+
		"\u0001\u0000\u0000\u0000\u143d\u1438\u0001\u0000\u0000\u0000\u143d\u1439"+
		"\u0001\u0000\u0000\u0000\u143d\u143a\u0001\u0000\u0000\u0000\u143d\u143c"+
		"\u0001\u0000\u0000\u0000\u143e\u0275\u0001\u0000\u0000\u0000\u143f\u1444"+
		"\u0003\u0272\u0139\u0000\u1440\u1441\u0005$\u0000\u0000\u1441\u1443\u0003"+
		"\u0272\u0139\u0000\u1442\u1440\u0001\u0000\u0000\u0000\u1443\u1446\u0001"+
		"\u0000\u0000\u0000\u1444\u1442\u0001\u0000\u0000\u0000\u1444\u1445\u0001"+
		"\u0000\u0000\u0000\u1445\u0277\u0001\u0000\u0000\u0000\u1446\u1444\u0001"+
		"\u0000\u0000\u0000\u1447\u144a\u0003\u0222\u0111\u0000\u1448\u144a\u0005"+
		"\u024f\u0000\u0000\u1449\u1447\u0001\u0000\u0000\u0000\u1449\u1448\u0001"+
		"\u0000\u0000\u0000\u144a\u0279\u0001\u0000\u0000\u0000\u144b\u144c\u0005"+
		"\u024f\u0000\u0000\u144c\u027b\u0001\u0000\u0000\u0000\u144d\u1452\u0003"+
		"\u0228\u0114\u0000\u144e\u144f\u0005$\u0000\u0000\u144f\u1451\u0003\u0228"+
		"\u0114\u0000\u1450\u144e\u0001\u0000\u0000\u0000\u1451\u1454\u0001\u0000"+
		"\u0000\u0000\u1452\u1450\u0001\u0000\u0000\u0000\u1452\u1453\u0001\u0000"+
		"\u0000\u0000\u1453\u027d\u0001\u0000\u0000\u0000\u1454\u1452\u0001\u0000"+
		"\u0000\u0000\u1455\u1456\u0005\u01c0\u0000\u0000\u1456\u1459\u0003\u0280"+
		"\u0140\u0000\u1457\u1459\u0003\u028c\u0146\u0000\u1458\u1455\u0001\u0000"+
		"\u0000\u0000\u1458\u1457\u0001\u0000\u0000\u0000\u1459\u027f\u0001\u0000"+
		"\u0000\u0000\u145a\u145b\u0005`\u0000\u0000\u145b\u1463\u0003\u0282\u0141"+
		"\u0000\u145c\u145d\u0005\u00a7\u0000\u0000\u145d\u145e\u0005d\u0000\u0000"+
		"\u145e\u145f\u0005\u01e4\u0000\u0000\u145f\u1460\u0005`\u0000\u0000\u1460"+
		"\u1463\u0003\u0282\u0141\u0000\u1461\u1463\u0003\u0286\u0143\u0000\u1462"+
		"\u145a\u0001\u0000\u0000\u0000\u1462\u145c\u0001\u0000\u0000\u0000\u1462"+
		"\u1461\u0001\u0000\u0000\u0000\u1463\u0281\u0001\u0000\u0000\u0000\u1464"+
		"\u146b\u0003\u0284\u0142\u0000\u1465\u1467\u0005$\u0000\u0000\u1466\u1465"+
		"\u0001\u0000\u0000\u0000\u1466\u1467\u0001\u0000\u0000\u0000\u1467\u1468"+
		"\u0001\u0000\u0000\u0000\u1468\u146a\u0003\u0284\u0142\u0000\u1469\u1466"+
		"\u0001\u0000\u0000\u0000\u146a\u146d\u0001\u0000\u0000\u0000\u146b\u1469"+
		"\u0001\u0000\u0000\u0000\u146b\u146c\u0001\u0000\u0000\u0000\u146c\u0283"+
		"\u0001\u0000\u0000\u0000\u146d\u146b\u0001\u0000\u0000\u0000\u146e\u146f"+
		"\u0005V\u0000\u0000\u146f\u1470\u0005W\u0000\u0000\u1470\u1479\u0003\u0234"+
		"\u011a\u0000\u1471\u1472\u0005[\u0000\u0000\u1472\u1479\u0005\u0096\u0000"+
		"\u0000\u1473\u1474\u0005[\u0000\u0000\u1474\u1479\u0005\u0194\u0000\u0000"+
		"\u1475\u1479\u0005r\u0000\u0000\u1476\u1477\u0005\u01ee\u0000\u0000\u1477"+
		"\u1479\u0005r\u0000\u0000\u1478\u146e\u0001\u0000\u0000\u0000\u1478\u1471"+
		"\u0001\u0000\u0000\u0000\u1478\u1473\u0001\u0000\u0000\u0000\u1478\u1475"+
		"\u0001\u0000\u0000\u0000\u1478\u1476\u0001\u0000\u0000\u0000\u1479\u0285"+
		"\u0001\u0000\u0000\u0000\u147a\u149b\u0003\u028a\u0145\u0000\u147b\u147c"+
		"\u0003\u022a\u0115\u0000\u147c\u147d\u0005\u01d9\u0000\u0000\u147d\u147e"+
		"\u0005\u0218\u0000\u0000\u147e\u149b\u0001\u0000\u0000\u0000\u147f\u1480"+
		"\u0005\u020a\u0000\u0000\u1480\u1481\u0005\u00b7\u0000\u0000\u1481\u149b"+
		"\u0003\u0230\u0118\u0000\u1482\u1483\u0005\u012d\u0000\u0000\u1483\u149b"+
		"\u0005\u024f\u0000\u0000\u1484\u1485\u0005\u01bc\u0000\u0000\u1485\u149b"+
		"\u0005\u024f\u0000\u0000\u1486\u1488\u0005\u0229\u0000\u0000\u1487\u1489"+
		"\u0003\u0288\u0144\u0000\u1488\u1487\u0001\u0000\u0000\u0000\u1488\u1489"+
		"\u0001\u0000\u0000\u0000\u1489\u149b\u0001\u0000\u0000\u0000\u148a\u148b"+
		"\u0005]\u0000\u0000\u148b\u149b\u0003\u0222\u0111\u0000\u148c\u149b\u0005"+
		"\u024f\u0000\u0000\u148d\u148e\u0005\u00a7\u0000\u0000\u148e\u148f\u0005"+
		"\u019a\u0000\u0000\u148f\u149b\u0003\u0222\u0111\u0000\u1490\u149b\u0005"+
		"\u024f\u0000\u0000\u1491\u1492\u0005\u00a7\u0000\u0000\u1492\u1493\u0005"+
		"\u019a\u0000\u0000\u1493\u149b\u0005\u0217\u0000\u0000\u1494\u1495\u0005"+
		"\u00d8\u0000\u0000\u1495\u1496\u0005Y\u0000\u0000\u1496\u149b\u0003\u01cc"+
		"\u00e6\u0000\u1497\u1498\u0005`\u0000\u0000\u1498\u1499\u0005\u016b\u0000"+
		"\u0000\u1499\u149b\u0005\u024f\u0000\u0000\u149a\u147a\u0001\u0000\u0000"+
		"\u0000\u149a\u147b\u0001\u0000\u0000\u0000\u149a\u147f\u0001\u0000\u0000"+
		"\u0000\u149a\u1482\u0001\u0000\u0000\u0000\u149a\u1484\u0001\u0000\u0000"+
		"\u0000\u149a\u1486\u0001\u0000\u0000\u0000\u149a\u148a\u0001\u0000\u0000"+
		"\u0000\u149a\u148c\u0001\u0000\u0000\u0000\u149a\u148d\u0001\u0000\u0000"+
		"\u0000\u149a\u1490\u0001\u0000\u0000\u0000\u149a\u1491\u0001\u0000\u0000"+
		"\u0000\u149a\u1494\u0001\u0000\u0000\u0000\u149a\u1497\u0001\u0000\u0000"+
		"\u0000\u149b\u0287\u0001\u0000\u0000\u0000\u149c\u149d\u0007\u0019\u0000"+
		"\u0000\u149d\u0289\u0001\u0000\u0000\u0000\u149e\u149f\u0003\u022a\u0115"+
		"\u0000\u149f\u14a2\u0007\u001a\u0000\u0000\u14a0\u14a3\u0003\u022c\u0116"+
		"\u0000\u14a1\u14a3\u0005\u0217\u0000\u0000\u14a2\u14a0\u0001\u0000\u0000"+
		"\u0000\u14a2\u14a1\u0001\u0000\u0000\u0000\u14a3\u028b\u0001\u0000\u0000"+
		"\u0000\u14a4\u14a5\u0005\u00a0\u0000\u0000\u14a5\u14a6\u0003\u028e\u0147"+
		"\u0000\u14a6\u028d\u0001\u0000\u0000\u0000\u14a7\u14b0\u0003\u0290\u0148"+
		"\u0000\u14a8\u14a9\u0005\u020a\u0000\u0000\u14a9\u14b0\u0005\u00b7\u0000"+
		"\u0000\u14aa\u14ab\u0005`\u0000\u0000\u14ab\u14ac\u0005V\u0000\u0000\u14ac"+
		"\u14b0\u0005W\u0000\u0000\u14ad\u14ae\u0005\u00a7\u0000\u0000\u14ae\u14b0"+
		"\u0005\u019a\u0000\u0000\u14af\u14a7\u0001\u0000\u0000\u0000\u14af\u14a8"+
		"\u0001\u0000\u0000\u0000\u14af\u14aa\u0001\u0000\u0000\u0000\u14af\u14ad"+
		"\u0001\u0000\u0000\u0000\u14b0\u028f\u0001\u0000\u0000\u0000\u14b1\u14b4"+
		"\u0003\u022a\u0115\u0000\u14b2\u14b4\u0005\u01f4\u0000\u0000\u14b3\u14b1"+
		"\u0001\u0000\u0000\u0000\u14b3\u14b2\u0001\u0000\u0000\u0000\u14b4\u0291"+
		"\u0001\u0000\u0000\u0000\u14b5\u14ba\u0003\u00c2a\u0000\u14b6\u14b7\u0005"+
		"$\u0000\u0000\u14b7\u14b9\u0003\u00c2a\u0000\u14b8\u14b6\u0001\u0000\u0000"+
		"\u0000\u14b9\u14bc\u0001\u0000\u0000\u0000\u14ba\u14b8\u0001\u0000\u0000"+
		"\u0000\u14ba\u14bb\u0001\u0000\u0000\u0000\u14bb\u0293\u0001\u0000\u0000"+
		"\u0000\u14bc\u14ba\u0001\u0000\u0000\u0000\u14bd\u14be\u0005\u012c\u0000"+
		"\u0000\u14be\u14bf\u0005\u01e5\u0000\u0000\u14bf\u14c0\u0005\u01ef\u0000"+
		"\u0000\u14c0\u14e1\u0005\u013b\u0000\u0000\u14c1\u14c2\u0005\u0181\u0000"+
		"\u0000\u14c2\u14c3\u0005\u01ef\u0000\u0000\u14c3\u14c4\u0005\u01e5\u0000"+
		"\u0000\u14c4\u14c5\u0005\u01ef\u0000\u0000\u14c5\u14e1\u0005\u013b\u0000"+
		"\u0000\u14c6\u14e1\u0005\u0195\u0000\u0000\u14c7\u14e1\u0005\u0152\u0000"+
		"\u0000\u14c8\u14e1\u0005\u0187\u0000\u0000\u14c9\u14e1\u0005\u0192\u0000"+
		"\u0000\u14ca\u14cb\u0005z\u0000\u0000\u14cb\u14cc\u0005\u00a5\u0000\u0000"+
		"\u14cc\u14e1\u0005\u021f\u0000\u0000\u14cd\u14ce\u0005z\u0000\u0000\u14ce"+
		"\u14cf\u0005\u00a5\u0000\u0000\u14cf\u14e1\u0005\u0170\u0000\u0000\u14d0"+
		"\u14d1\u0005\u00a5\u0000\u0000\u14d1\u14e1\u0005\u021f\u0000\u0000\u14d2"+
		"\u14d3\u0005\u00a5\u0000\u0000\u14d3\u14e1\u0005\u0170\u0000\u0000\u14d4"+
		"\u14e1\u0005\u013e\u0000\u0000\u14d5\u14d6\u0005\u01ee\u0000\u0000\u14d6"+
		"\u14e1\u0005\u013e\u0000\u0000\u14d7\u14d8\u0005\u012a\u0000\u0000\u14d8"+
		"\u14e1\u0003\u0232\u0119\u0000\u14d9\u14da\u0005^\u0000\u0000\u14da\u14e1"+
		"\u0003\u0232\u0119\u0000\u14db\u14dc\u0005\u0186\u0000\u0000\u14dc\u14e1"+
		"\u0003\u01e0\u00f0\u0000\u14dd\u14e1\u0003\u0296\u014b\u0000\u14de\u14df"+
		"\u0005\u013d\u0000\u0000\u14df\u14e1\u0003\u015c\u00ae\u0000\u14e0\u14bd"+
		"\u0001\u0000\u0000\u0000\u14e0\u14c1\u0001\u0000\u0000\u0000\u14e0\u14c6"+
		"\u0001\u0000\u0000\u0000\u14e0\u14c7\u0001\u0000\u0000\u0000\u14e0\u14c8"+
		"\u0001\u0000\u0000\u0000\u14e0\u14c9\u0001\u0000\u0000\u0000\u14e0\u14ca"+
		"\u0001\u0000\u0000\u0000\u14e0\u14cd\u0001\u0000\u0000\u0000\u14e0\u14d0"+
		"\u0001\u0000\u0000\u0000\u14e0\u14d2\u0001\u0000\u0000\u0000\u14e0\u14d4"+
		"\u0001\u0000\u0000\u0000\u14e0\u14d5\u0001\u0000\u0000\u0000\u14e0\u14d7"+
		"\u0001\u0000\u0000\u0000\u14e0\u14d9\u0001\u0000\u0000\u0000\u14e0\u14db"+
		"\u0001\u0000\u0000\u0000\u14e0\u14dd\u0001\u0000\u0000\u0000\u14e0\u14de"+
		"\u0001\u0000\u0000\u0000\u14e1\u0295\u0001\u0000\u0000\u0000\u14e2\u14e3"+
		"\u0005\u01c0\u0000\u0000\u14e3\u14e6\u0003\u0286\u0143\u0000\u14e4\u14e6"+
		"\u0003\u028c\u0146\u0000\u14e5\u14e2\u0001\u0000\u0000\u0000\u14e5\u14e4"+
		"\u0001\u0000\u0000\u0000\u14e6\u0297\u0001\u0000\u0000\u0000\u14e7\u14e8"+
		"\u0007\u001b\u0000\u0000\u14e8\u0299\u0001\u0000\u0000\u0000\u14e9\u14ea"+
		"\u0007\u001c\u0000\u0000\u14ea\u029b\u0001\u0000\u0000\u0000\u14eb\u14f0"+
		"\u0003\u017e\u00bf\u0000\u14ec\u14ed\u0005$\u0000\u0000\u14ed\u14ef\u0003"+
		"\u017e\u00bf\u0000\u14ee\u14ec\u0001\u0000\u0000\u0000\u14ef\u14f2\u0001"+
		"\u0000\u0000\u0000\u14f0\u14ee\u0001\u0000\u0000\u0000\u14f0\u14f1\u0001"+
		"\u0000\u0000\u0000\u14f1\u029d\u0001\u0000\u0000\u0000\u14f2\u14f0\u0001"+
		"\u0000\u0000\u0000\u14f3\u14f4\u0005\u01e6\u0000\u0000\u14f4\u14f5\u0005"+
		"\u01ee\u0000\u0000\u14f5\u14f6\u0005L\u0000\u0000\u14f6\u029f\u0001\u0000"+
		"\u0000\u0000\u14f7\u14f8\u0005\u01e6\u0000\u0000\u14f8\u14f9\u0005L\u0000"+
		"\u0000\u14f9\u02a1\u0001\u0000\u0000\u0000\u14fa\u14fb\u0007\u001d\u0000"+
		"\u0000\u14fb\u02a3\u0001\u0000\u0000\u0000\u14fc\u14fe\u0005\f\u0000\u0000"+
		"\u14fd\u14fc\u0001\u0000\u0000\u0000\u14fd\u14fe\u0001\u0000\u0000\u0000"+
		"\u14fe\u14ff\u0001\u0000\u0000\u0000\u14ff\u1500\u0003\u00e4r\u0000\u1500"+
		"\u02a5\u0001\u0000\u0000\u0000\u1501\u1504\u0005\u01bd\u0000\u0000\u1502"+
		"\u1505\u0003\u05aa\u02d5\u0000\u1503\u1505\u0003\u05ac\u02d6\u0000\u1504"+
		"\u1502\u0001\u0000\u0000\u0000\u1504\u1503\u0001\u0000\u0000\u0000\u1505"+
		"\u02a7\u0001\u0000\u0000\u0000\u1506\u1508\u0005\u01be\u0000\u0000\u1507"+
		"\u1509\u0003\u02aa\u0155\u0000\u1508\u1507\u0001\u0000\u0000\u0000\u1508"+
		"\u1509\u0001\u0000\u0000\u0000\u1509\u150c\u0001\u0000\u0000\u0000\u150a"+
		"\u150d\u0003\u05aa\u02d5\u0000\u150b\u150d\u0003\u05ac\u02d6\u0000\u150c"+
		"\u150a\u0001\u0000\u0000\u0000\u150c\u150b\u0001\u0000\u0000\u0000\u150d"+
		"\u150f\u0001\u0000\u0000\u0000\u150e\u1510\u0007\u001e\u0000\u0000\u150f"+
		"\u150e\u0001\u0000\u0000\u0000\u150f\u1510\u0001\u0000\u0000\u0000\u1510"+
		"\u02a9\u0001\u0000\u0000\u0000\u1511\u1512\u0007\u001f\u0000\u0000\u1512"+
		"\u1513\u0005Y\u0000\u0000\u1513\u1514\u0005\u01e9\u0000\u0000\u1514\u02ab"+
		"\u0001\u0000\u0000\u0000\u1515\u1516\u0005\u01b8\u0000\u0000\u1516\u1517"+
		"\u0005a\u0000\u0000\u1517\u1519\u0003\u0228\u0114\u0000\u1518\u151a\u0005"+
		"\u01d1\u0000\u0000\u1519\u1518\u0001\u0000\u0000\u0000\u1519\u151a\u0001"+
		"\u0000\u0000\u0000\u151a\u151e\u0001\u0000\u0000\u0000\u151b\u151d\u0003"+
		"\u02ae\u0157\u0000\u151c\u151b\u0001\u0000\u0000\u0000\u151d\u1520\u0001"+
		"\u0000\u0000\u0000\u151e\u151c\u0001\u0000\u0000\u0000\u151e\u151f\u0001"+
		"\u0000\u0000\u0000\u151f\u02ad\u0001\u0000\u0000\u0000\u1520\u151e\u0001"+
		"\u0000\u0000\u0000\u1521\u152f\u0003\u02b0\u0158\u0000\u1522\u1523\u0005"+
		"\u0175\u0000\u0000\u1523\u152f\u0005\u0250\u0000\u0000\u1524\u1525\u0005"+
		"I\u0000\u0000\u1525\u152f\u0003\u027c\u013e\u0000\u1526\u1527\u0005]\u0000"+
		"\u0000\u1527\u152f\u0003\u027c\u013e\u0000\u1528\u1529\u0005\u01f3\u0000"+
		"\u0000\u1529\u152a\u0005]\u0000\u0000\u152a\u152f\u0003\u027c\u013e\u0000"+
		"\u152b\u152c\u0005\u01f3\u0000\u0000\u152c\u152d\u0005\u01f8\u0000\u0000"+
		"\u152d\u152f\u0003\u027c\u013e\u0000\u152e\u1521\u0001\u0000\u0000\u0000"+
		"\u152e\u1522\u0001\u0000\u0000\u0000\u152e\u1524\u0001\u0000\u0000\u0000"+
		"\u152e\u1526\u0001\u0000\u0000\u0000\u152e\u1528\u0001\u0000\u0000\u0000"+
		"\u152e\u152b\u0001\u0000\u0000\u0000\u152f\u02af\u0001\u0000\u0000\u0000"+
		"\u1530\u1531\u0005\u0166\u0000\u0000\u1531\u1553\u0005\u024f\u0000\u0000"+
		"\u1532\u1533\u0005\u0166\u0000\u0000\u1533\u1553\u0005\u01ef\u0000\u0000"+
		"\u1534\u1535\u0005\u015f\u0000\u0000\u1535\u1536\u0005\u0166\u0000\u0000"+
		"\u1536\u1553\u0005\u024f\u0000\u0000\u1537\u1538\u0005\u0189\u0000\u0000"+
		"\u1538\u1539\u0005\u0166\u0000\u0000\u1539\u1553\u0005\u024f\u0000\u0000"+
		"\u153a\u1553\u0005\u0086\u0000\u0000\u153b\u153c\u0005\u0147\u0000\u0000"+
		"\u153c\u153d\u0005\u01fd\u0000\u0000\u153d\u1553\u0003\u021e\u010f\u0000"+
		"\u153e\u153f\u0005\u00b3\u0000\u0000\u153f\u1540\u0005\u0190\u0000\u0000"+
		"\u1540\u1553\u0005\u024f\u0000\u0000\u1541\u1542\u0005a\u0000\u0000\u1542"+
		"\u1553\u0003\u027c\u013e\u0000\u1543\u1553\u0003\u00e4r\u0000\u1544\u1553"+
		"\u0005\u01a3\u0000\u0000\u1545\u1553\u0005\u01a4\u0000\u0000\u1546\u1553"+
		"\u0005\u01a5\u0000\u0000\u1547\u1553\u0005\u01a6\u0000\u0000\u1548\u1553"+
		"\u0005\u01a7\u0000\u0000\u1549\u1553\u0005\u01a8\u0000\u0000\u154a\u1553"+
		"\u0005\u0086\u0000\u0000\u154b\u1553\u0005\u01a9\u0000\u0000\u154c\u1553"+
		"\u0005\u01aa\u0000\u0000\u154d\u1553\u0005\u01ab\u0000\u0000\u154e\u1553"+
		"\u0005\u01ac\u0000\u0000\u154f\u1553\u0005\u01ad\u0000\u0000\u1550\u1553"+
		"\u0005\u01ae\u0000\u0000\u1551\u1553\u0005\u01af\u0000\u0000\u1552\u1530"+
		"\u0001\u0000\u0000\u0000\u1552\u1532\u0001\u0000\u0000\u0000\u1552\u1534"+
		"\u0001\u0000\u0000\u0000\u1552\u1537\u0001\u0000\u0000\u0000\u1552\u153a"+
		"\u0001\u0000\u0000\u0000\u1552\u153b\u0001\u0000\u0000\u0000\u1552\u153e"+
		"\u0001\u0000\u0000\u0000\u1552\u1541\u0001\u0000\u0000\u0000\u1552\u1543"+
		"\u0001\u0000\u0000\u0000\u1552\u1544\u0001\u0000\u0000\u0000\u1552\u1545"+
		"\u0001\u0000\u0000\u0000\u1552\u1546\u0001\u0000\u0000\u0000\u1552\u1547"+
		"\u0001\u0000\u0000\u0000\u1552\u1548\u0001\u0000\u0000\u0000\u1552\u1549"+
		"\u0001\u0000\u0000\u0000\u1552\u154a\u0001\u0000\u0000\u0000\u1552\u154b"+
		"\u0001\u0000\u0000\u0000\u1552\u154c\u0001\u0000\u0000\u0000\u1552\u154d"+
		"\u0001\u0000\u0000\u0000\u1552\u154e\u0001\u0000\u0000\u0000\u1552\u154f"+
		"\u0001\u0000\u0000\u0000\u1552\u1550\u0001\u0000\u0000\u0000\u1552\u1551"+
		"\u0001\u0000\u0000\u0000\u1553\u02b1\u0001\u0000\u0000\u0000\u1554\u1555"+
		"\u0005\u01ba\u0000\u0000\u1555\u1557\u0005a\u0000\u0000\u1556\u1558\u0003"+
		"\u02a0\u0150\u0000\u1557\u1556\u0001\u0000\u0000\u0000\u1557\u1558\u0001"+
		"\u0000\u0000\u0000\u1558\u1559\u0001\u0000\u0000\u0000\u1559\u155a\u0003"+
		"\u027c\u013e\u0000\u155a\u02b3\u0001\u0000\u0000\u0000\u155b\u155c\u0005"+
		"\u01b9\u0000\u0000\u155c\u155d\u0005a\u0000\u0000\u155d\u155e\u0003\u02b6"+
		"\u015b\u0000\u155e\u02b5\u0001\u0000\u0000\u0000\u155f\u1561\u0003\u0228"+
		"\u0114\u0000\u1560\u1562\u0005\u01d1\u0000\u0000\u1561\u1560\u0001\u0000"+
		"\u0000\u0000\u1561\u1562\u0001\u0000\u0000\u0000\u1562\u1563\u0001\u0000"+
		"\u0000\u0000\u1563\u1564\u0003\u02b8\u015c\u0000\u1564\u157a\u0001\u0000"+
		"\u0000\u0000\u1565\u1569\u0003\u0228\u0114\u0000\u1566\u1567\u0005\u01f3"+
		"\u0000\u0000\u1567\u1568\u0005p\u0000\u0000\u1568\u156a\u0003\u00f4z\u0000"+
		"\u1569\u1566\u0001\u0000\u0000\u0000\u1569\u156a\u0001\u0000\u0000\u0000"+
		"\u156a\u156b\u0001\u0000\u0000\u0000\u156b\u156c\u0003\u027e\u013f\u0000"+
		"\u156c\u157a\u0001\u0000\u0000\u0000\u156d\u1571\u0005\u01f4\u0000\u0000"+
		"\u156e\u156f\u0005\u01f3\u0000\u0000\u156f\u1570\u0005p\u0000\u0000\u1570"+
		"\u1572\u0003\u00f4z\u0000\u1571\u156e\u0001\u0000\u0000\u0000\u1571\u1572"+
		"\u0001\u0000\u0000\u0000\u1572\u1573\u0001\u0000\u0000\u0000\u1573\u157a"+
		"\u0003\u027e\u013f\u0000\u1574\u1575\u0003\u0228\u0114\u0000\u1575\u1576"+
		"\u0005\u009e\u0000\u0000\u1576\u1577\u0005\u01ea\u0000\u0000\u1577\u1578"+
		"\u0003\u0228\u0114\u0000\u1578\u157a\u0001\u0000\u0000\u0000\u1579\u155f"+
		"\u0001\u0000\u0000\u0000\u1579\u1565\u0001\u0000\u0000\u0000\u1579\u156d"+
		"\u0001\u0000\u0000\u0000\u1579\u1574\u0001\u0000\u0000\u0000\u157a\u02b7"+
		"\u0001\u0000\u0000\u0000\u157b\u157d\u0003\u02b0\u0158\u0000\u157c\u157b"+
		"\u0001\u0000\u0000\u0000\u157d\u1580\u0001\u0000\u0000\u0000\u157e\u157c"+
		"\u0001\u0000\u0000\u0000\u157e\u157f\u0001\u0000\u0000\u0000\u157f\u02b9"+
		"\u0001\u0000\u0000\u0000\u1580\u157e\u0001\u0000\u0000\u0000\u1581\u1582"+
		"\u0005\u01b8\u0000\u0000\u1582\u1583\u0005]\u0000\u0000\u1583\u1585\u0003"+
		"\u0228\u0114\u0000\u1584\u1586\u0005\u01d1\u0000\u0000\u1585\u1584\u0001"+
		"\u0000\u0000\u0000\u1585\u1586\u0001\u0000\u0000\u0000\u1586\u158a\u0001"+
		"\u0000\u0000\u0000\u1587\u1589\u0003\u02ae\u0157\u0000\u1588\u1587\u0001"+
		"\u0000\u0000\u0000\u1589\u158c\u0001\u0000\u0000\u0000\u158a\u1588\u0001"+
		"\u0000\u0000\u0000\u158a\u158b\u0001\u0000\u0000\u0000\u158b\u02bb\u0001"+
		"\u0000\u0000\u0000\u158c\u158a\u0001\u0000\u0000\u0000\u158d\u158e\u0005"+
		"\u01ba\u0000\u0000\u158e\u1590\u0005]\u0000\u0000\u158f\u1591\u0003\u02a0"+
		"\u0150\u0000\u1590\u158f\u0001\u0000\u0000\u0000\u1590\u1591\u0001\u0000"+
		"\u0000\u0000\u1591\u1592\u0001\u0000\u0000\u0000\u1592\u1593\u0003\u027c"+
		"\u013e\u0000\u1593\u02bd\u0001\u0000\u0000\u0000\u1594\u1595\u0005\u01b9"+
		"\u0000\u0000\u1595\u1596\u0005]\u0000\u0000\u1596\u1597\u0003\u02b6\u015b"+
		"\u0000\u1597\u02bf\u0001\u0000\u0000\u0000\u1598\u1599\u0005\u01b8\u0000"+
		"\u0000\u1599\u159a\u0005\u01f8\u0000\u0000\u159a\u159c\u0003\u0228\u0114"+
		"\u0000\u159b\u159d\u0005\u01d1\u0000\u0000\u159c\u159b\u0001\u0000\u0000"+
		"\u0000\u159c\u159d\u0001\u0000\u0000\u0000\u159d\u15a1\u0001\u0000\u0000"+
		"\u0000\u159e\u15a0\u0003\u02ae\u0157\u0000\u159f\u159e\u0001\u0000\u0000"+
		"\u0000\u15a0\u15a3\u0001\u0000\u0000\u0000\u15a1\u159f\u0001\u0000\u0000"+
		"\u0000\u15a1\u15a2\u0001\u0000\u0000\u0000\u15a2\u02c1\u0001\u0000\u0000"+
		"\u0000\u15a3\u15a1\u0001\u0000\u0000\u0000\u15a4\u15a5\u0005\u0176\u0000"+
		"\u0000\u15a5\u15a6\u0005\u0098\u0000\u0000\u15a6\u15a7\u0005\u01f9\u0000"+
		"\u0000\u15a7\u15a8\u0003\u027c\u013e\u0000\u15a8\u15a9\u0005\u01ea\u0000"+
		"\u0000\u15a9\u15aa\u0003\u0228\u0114\u0000\u15aa\u02c3\u0001\u0000\u0000"+
		"\u0000\u15ab\u15ac\u0005\u01ba\u0000\u0000\u15ac\u15ae\u0005\u01f8\u0000"+
		"\u0000\u15ad\u15af\u0003\u02a0\u0150\u0000\u15ae\u15ad\u0001\u0000\u0000"+
		"\u0000\u15ae\u15af\u0001\u0000\u0000\u0000\u15af\u15b0\u0001\u0000\u0000"+
		"\u0000\u15b0\u15b1\u0003\u027c\u013e\u0000\u15b1\u02c5\u0001\u0000\u0000"+
		"\u0000\u15b2\u15b3\u0005\u01b8\u0000\u0000\u15b3\u15b4\u0003\u0306\u0183"+
		"\u0000\u15b4\u15b6\u0005\u01c1\u0000\u0000\u15b5\u15b7\u0003\u029e\u014f"+
		"\u0000\u15b6\u15b5\u0001\u0000\u0000\u0000\u15b6\u15b7\u0001\u0000\u0000"+
		"\u0000\u15b7\u15b8\u0001\u0000\u0000\u0000\u15b8\u15cd\u0003\u00eew\u0000"+
		"\u15b9\u15ce\u0003\u0308\u0184\u0000\u15ba\u15bb\u0005\u00b8\u0000\u0000"+
		"\u15bb\u15c0\u0003\u01e0\u00f0\u0000\u15bc\u15bd\u0005\u001e\u0000\u0000"+
		"\u15bd\u15be\u0003\u02d0\u0168\u0000\u15be\u15bf\u0005\u001f\u0000\u0000"+
		"\u15bf\u15c1\u0001\u0000\u0000\u0000\u15c0\u15bc\u0001\u0000\u0000\u0000"+
		"\u15c0\u15c1\u0001\u0000\u0000\u0000\u15c1\u15ce\u0001\u0000\u0000\u0000"+
		"\u15c2\u15c3\u0005O\u0000\u0000\u15c3\u15c4\u0005\u00b8\u0000\u0000\u15c4"+
		"\u15c9\u0003\u015a\u00ad\u0000\u15c5\u15c6\u0005\u001e\u0000\u0000\u15c6"+
		"\u15c7\u0003\u02d0\u0168\u0000\u15c7\u15c8\u0005\u001f\u0000\u0000\u15c8"+
		"\u15ca\u0001\u0000\u0000\u0000\u15c9\u15c5\u0001\u0000\u0000\u0000\u15c9"+
		"\u15ca\u0001\u0000\u0000\u0000\u15ca\u15cb\u0001\u0000\u0000\u0000\u15cb"+
		"\u15cc\u0003\u02ca\u0165\u0000\u15cc\u15ce\u0001\u0000\u0000\u0000\u15cd"+
		"\u15b9\u0001\u0000\u0000\u0000\u15cd\u15ba\u0001\u0000\u0000\u0000\u15cd"+
		"\u15c2\u0001\u0000\u0000\u0000\u15ce\u15cf\u0001\u0000\u0000\u0000\u15cf"+
		"\u15d1\u0003\u032e\u0197\u0000\u15d0\u15d2\u0003\u0330\u0198\u0000\u15d1"+
		"\u15d0\u0001\u0000\u0000\u0000\u15d1\u15d2\u0001\u0000\u0000\u0000\u15d2"+
		"\u15d4\u0001\u0000\u0000\u0000\u15d3\u15d5\u0003\u02de\u016f\u0000\u15d4"+
		"\u15d3\u0001\u0000\u0000\u0000\u15d4\u15d5\u0001\u0000\u0000\u0000\u15d5"+
		"\u15d7\u0001\u0000\u0000\u0000\u15d6\u15d8\u0003\u02dc\u016e\u0000\u15d7"+
		"\u15d6\u0001\u0000\u0000\u0000\u15d7\u15d8\u0001\u0000\u0000\u0000\u15d8"+
		"\u15da\u0001\u0000\u0000\u0000\u15d9\u15db\u0003\u02da\u016d\u0000\u15da"+
		"\u15d9\u0001\u0000\u0000\u0000\u15da\u15db\u0001\u0000\u0000\u0000\u15db"+
		"\u15dd\u0001\u0000\u0000\u0000\u15dc\u15de\u0003\u02d8\u016c\u0000\u15dd"+
		"\u15dc\u0001\u0000\u0000\u0000\u15dd\u15de\u0001\u0000\u0000\u0000\u15de"+
		"\u15e4\u0001\u0000\u0000\u0000\u15df\u15e0\u0005\u01e4\u0000\u0000\u15e0"+
		"\u15e2\u0003J%\u0000\u15e1\u15e3\u0003\u02d6\u016b\u0000\u15e2\u15e1\u0001"+
		"\u0000\u0000\u0000\u15e2\u15e3\u0001\u0000\u0000\u0000\u15e3\u15e5\u0001"+
		"\u0000\u0000\u0000\u15e4\u15df\u0001\u0000\u0000\u0000\u15e4\u15e5\u0001"+
		"\u0000\u0000\u0000\u15e5\u15ec\u0001\u0000\u0000\u0000\u15e6\u15e7\u0005"+
		"w\u0000\u0000\u15e7\u15e8\u0003\u00f4z\u0000\u15e8\u15ea\u0003\u02c8\u0164"+
		"\u0000\u15e9\u15eb\u0003\u02d6\u016b\u0000\u15ea\u15e9\u0001\u0000\u0000"+
		"\u0000\u15ea\u15eb\u0001\u0000\u0000\u0000\u15eb\u15ed\u0001\u0000\u0000"+
		"\u0000\u15ec\u15e6\u0001\u0000\u0000\u0000\u15ec\u15ed\u0001\u0000\u0000"+
		"\u0000\u15ed\u02c7\u0001\u0000\u0000\u0000\u15ee\u15ef\u0005\u001e\u0000"+
		"\u0000\u15ef\u15f0\u0003\u0184\u00c2\u0000\u15f0\u15f1\u0005\u001f\u0000"+
		"\u0000\u15f1\u02c9\u0001\u0000\u0000\u0000\u15f2\u15f3\u0005\u01e9\u0000"+
		"\u0000\u15f3\u15f4\u0005\u01d0\u0000\u0000\u15f4\u15f5\u0005\u01d1\u0000"+
		"\u0000\u15f5\u15f6\u0005\u001e\u0000\u0000\u15f6\u15f7\u0003\u02cc\u0166"+
		"\u0000\u15f7\u15f8\u0005\u001f\u0000\u0000\u15f8\u160d\u0001\u0000\u0000"+
		"\u0000\u15f9\u15fa\u0005\u01e9\u0000\u0000\u15fa\u15fb\u0005\u01d0\u0000"+
		"\u0000\u15fb\u15fc\u0005\u01f3\u0000\u0000\u15fc\u15fd\u0005\u001e\u0000"+
		"\u0000\u15fd\u15fe\u0003\u0184\u00c2\u0000\u15fe\u15ff\u0005\u001f\u0000"+
		"\u0000\u15ff\u160d\u0001\u0000\u0000\u0000\u1600\u1601\u0005\u01e9\u0000"+
		"\u0000\u1601\u1602\u0005\u01d0\u0000\u0000\u1602\u1603\u0005\u01d9\u0000"+
		"\u0000\u1603\u1604\u0005\u001e\u0000\u0000\u1604\u1605\u0003\u0184\u00c2"+
		"\u0000\u1605\u1606\u0005\u001f\u0000\u0000\u1606\u1607\u0005\u01ea\u0000"+
		"\u0000\u1607\u1608\u0005\u001e\u0000\u0000\u1608\u1609\u0003\u0184\u00c2"+
		"\u0000\u1609\u160a\u0005\u001f\u0000\u0000\u160a\u160d\u0001\u0000\u0000"+
		"\u0000\u160b\u160d\u0005\u0217\u0000\u0000\u160c\u15f2\u0001\u0000\u0000"+
		"\u0000\u160c\u15f9\u0001\u0000\u0000\u0000\u160c\u1600\u0001\u0000\u0000"+
		"\u0000\u160c\u160b\u0001\u0000\u0000\u0000\u160d\u02cb\u0001\u0000\u0000"+
		"\u0000\u160e\u1613\u0003\u02ce\u0167\u0000\u160f\u1610\u0005$\u0000\u0000"+
		"\u1610\u1612\u0003\u02ce\u0167\u0000\u1611\u160f\u0001\u0000\u0000\u0000"+
		"\u1612\u1615\u0001\u0000\u0000\u0000\u1613\u1611\u0001\u0000\u0000\u0000"+
		"\u1613\u1614\u0001\u0000\u0000\u0000\u1614\u02cd\u0001\u0000\u0000\u0000"+
		"\u1615\u1613\u0001\u0000\u0000\u0000\u1616\u1617\u0003\u0222\u0111\u0000"+
		"\u1617\u1618\u0005\u0250\u0000\u0000\u1618\u02cf\u0001\u0000\u0000\u0000"+
		"\u1619\u161e\u0003\u02d2\u0169\u0000\u161a\u161b\u0005$\u0000\u0000\u161b"+
		"\u161d\u0003\u02d2\u0169\u0000\u161c\u161a\u0001\u0000\u0000\u0000\u161d"+
		"\u1620\u0001\u0000\u0000\u0000\u161e\u161c\u0001\u0000\u0000\u0000\u161e"+
		"\u161f\u0001\u0000\u0000\u0000\u161f\u02d1\u0001\u0000\u0000\u0000\u1620"+
		"\u161e\u0001\u0000\u0000\u0000\u1621\u1624\u0003\u02d4\u016a\u0000\u1622"+
		"\u1624\u0003\u0324\u0192\u0000\u1623\u1621\u0001\u0000\u0000\u0000\u1623"+
		"\u1622\u0001\u0000\u0000\u0000\u1624\u02d3\u0001\u0000\u0000\u0000\u1625"+
		"\u1628\u0003\u015c\u00ae\u0000\u1626\u1627\u0005\u01d1\u0000\u0000\u1627"+
		"\u1629\u0005\u016e\u0000\u0000\u1628\u1626\u0001\u0000\u0000\u0000\u1628"+
		"\u1629\u0001\u0000\u0000\u0000\u1629\u162a\u0001\u0000\u0000\u0000\u162a"+
		"\u162b\u0003\u0238\u011c\u0000\u162b\u02d5\u0001\u0000\u0000\u0000\u162c"+
		"\u162d\u0005\u01d1\u0000\u0000\u162d\u1632\u0005o\u0000\u0000\u162e\u162f"+
		"\u0005\u01d1\u0000\u0000\u162f\u1630\u0005X\u0000\u0000\u1630\u1632\u0005"+
		"o\u0000\u0000\u1631\u162c\u0001\u0000\u0000\u0000\u1631\u162e\u0001\u0000"+
		"\u0000\u0000\u1632\u02d7\u0001\u0000\u0000\u0000\u1633\u1634\u0005\u00ad"+
		"\u0000\u0000\u1634\u1635\u0003\u00f4z\u0000\u1635\u02d9\u0001\u0000\u0000"+
		"\u0000\u1636\u1637\u0005\u01e5\u0000\u0000\u1637\u163d\u0005\u0200\u0000"+
		"\u0000\u1638\u163e\u0005\u01ba\u0000\u0000\u1639\u163a\u0005\u01b7\u0000"+
		"\u0000\u163a\u163e\u0005^\u0000\u0000\u163b\u163c\u0005\u021d\u0000\u0000"+
		"\u163c\u163e\u0005^\u0000\u0000\u163d\u1638\u0001\u0000\u0000\u0000\u163d"+
		"\u1639\u0001\u0000\u0000\u0000\u163d\u163b\u0001\u0000\u0000\u0000\u163e"+
		"\u02db\u0001\u0000\u0000\u0000\u163f\u1640\u0005\u01d1\u0000\u0000\u1640"+
		"\u1644\u0003\u0208\u0104\u0000\u1641\u1642\u0005\u00b6\u0000\u0000\u1642"+
		"\u1644\u0005\u0095\u0000\u0000\u1643\u163f\u0001\u0000\u0000\u0000\u1643"+
		"\u1641\u0001\u0000\u0000\u0000\u1644\u02dd\u0001\u0000\u0000\u0000\u1645"+
		"\u1646\u0005\u01e2\u0000\u0000\u1646\u1647\u0003\u02e0\u0170\u0000\u1647"+
		"\u02df\u0001\u0000\u0000\u0000\u1648\u164c\u0003\u00e4r\u0000\u1649\u164c"+
		"\u0003\u00e8t\u0000\u164a\u164c\u0003\u0224\u0112\u0000\u164b\u1648\u0001"+
		"\u0000\u0000\u0000\u164b\u1649\u0001\u0000\u0000\u0000\u164b\u164a\u0001"+
		"\u0000\u0000\u0000\u164c\u02e1\u0001\u0000\u0000\u0000\u164d\u164e\u0005"+
		"\u01b8\u0000\u0000\u164e\u164f\u0003\u033a\u019d\u0000\u164f\u1650\u0005"+
		"\u01c3\u0000\u0000\u1650\u1655\u0003\u033c\u019e\u0000\u1651\u1653\u0003"+
		"\u029e\u014f\u0000\u1652\u1651\u0001\u0000\u0000\u0000\u1652\u1653\u0001"+
		"\u0000\u0000\u0000\u1653\u1654\u0001\u0000\u0000\u0000\u1654\u1656\u0003"+
		"\u00fc~\u0000\u1655\u1652\u0001\u0000\u0000\u0000\u1655\u1656\u0001\u0000"+
		"\u0000\u0000\u1656\u1657\u0001\u0000\u0000\u0000\u1657\u1658\u0005\u01e5"+
		"\u0000\u0000\u1658\u1659\u0003\u033e\u019f\u0000\u1659\u165b\u0003\u00ee"+
		"w\u0000\u165a\u165c\u0003\u02e8\u0174\u0000\u165b\u165a\u0001\u0000\u0000"+
		"\u0000\u165b\u165c\u0001\u0000\u0000\u0000\u165c\u165d\u0001\u0000\u0000"+
		"\u0000\u165d\u165e\u0005\u001e\u0000\u0000\u165e\u165f\u0003\u01fe\u00ff"+
		"\u0000\u165f\u1661\u0005\u001f\u0000\u0000\u1660\u1662\u0003\u02e4\u0172"+
		"\u0000\u1661\u1660\u0001\u0000\u0000\u0000\u1661\u1662\u0001\u0000\u0000"+
		"\u0000\u1662\u1665\u0001\u0000\u0000\u0000\u1663\u1664\u0005\u01d1\u0000"+
		"\u0000\u1664\u1666\u0003\u0208\u0104\u0000\u1665\u1663\u0001\u0000\u0000"+
		"\u0000\u1665\u1666\u0001\u0000\u0000\u0000\u1666\u1668\u0001\u0000\u0000"+
		"\u0000\u1667\u1669\u0003\u02d8\u016c\u0000\u1668\u1667\u0001\u0000\u0000"+
		"\u0000\u1668\u1669\u0001\u0000\u0000\u0000\u1669\u166b\u0001\u0000\u0000"+
		"\u0000\u166a\u166c\u0003\u00c4b\u0000\u166b\u166a\u0001\u0000\u0000\u0000"+
		"\u166b\u166c\u0001\u0000\u0000\u0000\u166c\u02e3\u0001\u0000\u0000\u0000"+
		"\u166d\u166e\u0005\u0089\u0000\u0000\u166e\u166f\u0005\u001e\u0000\u0000"+
		"\u166f\u1670\u0003\u02e6\u0173\u0000\u1670\u1671\u0005\u001f\u0000\u0000"+
		"\u1671\u02e5\u0001\u0000\u0000\u0000\u1672\u1677\u0003\u0202\u0101\u0000"+
		"\u1673\u1674\u0005$\u0000\u0000\u1674\u1676\u0003\u0202\u0101\u0000\u1675"+
		"\u1673\u0001\u0000\u0000\u0000\u1676\u1679\u0001\u0000\u0000\u0000\u1677"+
		"\u1675\u0001\u0000\u0000\u0000\u1677\u1678\u0001\u0000\u0000\u0000\u1678"+
		"\u02e7\u0001\u0000\u0000\u0000\u1679\u1677\u0001\u0000\u0000\u0000\u167a"+
		"\u167b\u0005\u01e2\u0000\u0000\u167b\u167c\u0003\u02e0\u0170\u0000\u167c"+
		"\u02e9\u0001\u0000\u0000\u0000\u167d\u167e\u0005\u01b8\u0000\u0000\u167e"+
		"\u167f\u0005p\u0000\u0000\u167f\u1681\u0003\u00f4z\u0000\u1680\u1682\u0005"+
		"\u01d1\u0000\u0000\u1681\u1680\u0001\u0000\u0000\u0000\u1681\u1682\u0001"+
		"\u0000\u0000\u0000\u1682\u1686\u0001\u0000\u0000\u0000\u1683\u1685\u0003"+
		"\u02f2\u0179\u0000\u1684\u1683\u0001\u0000\u0000\u0000\u1685\u1688\u0001"+
		"\u0000\u0000\u0000\u1686\u1684\u0001\u0000\u0000\u0000\u1686\u1687\u0001"+
		"\u0000\u0000\u0000\u1687\u02eb\u0001\u0000\u0000\u0000\u1688\u1686\u0001"+
		"\u0000\u0000\u0000\u1689\u168c\u0005\u01b8\u0000\u0000\u168a\u168b\u0005"+
		"\u01ec\u0000\u0000\u168b\u168d\u0005\u016a\u0000\u0000\u168c\u168a\u0001"+
		"\u0000\u0000\u0000\u168c\u168d\u0001\u0000\u0000\u0000\u168d\u168f\u0001"+
		"\u0000\u0000\u0000\u168e\u1690\u0007 \u0000\u0000\u168f\u168e\u0001\u0000"+
		"\u0000\u0000\u168f\u1690\u0001\u0000\u0000\u0000\u1690\u1692\u0001\u0000"+
		"\u0000\u0000\u1691\u1693\u0005\u00bb\u0000\u0000\u1692\u1691\u0001\u0000"+
		"\u0000\u0000\u1692\u1693\u0001\u0000\u0000\u0000\u1693\u1694\u0001\u0000"+
		"\u0000\u0000\u1694\u1695\u0005\u01ce\u0000\u0000\u1695\u16a2\u0003\u015a"+
		"\u00ad\u0000\u1696\u169f\u0005\u001e\u0000\u0000\u1697\u169c\u0003\u024a"+
		"\u0125\u0000\u1698\u1699\u0005$\u0000\u0000\u1699\u169b\u0003\u024a\u0125"+
		"\u0000\u169a\u1698\u0001\u0000\u0000\u0000\u169b\u169e\u0001\u0000\u0000"+
		"\u0000\u169c\u169a\u0001\u0000\u0000\u0000\u169c\u169d\u0001\u0000\u0000"+
		"\u0000\u169d\u16a0\u0001\u0000\u0000\u0000\u169e\u169c\u0001\u0000\u0000"+
		"\u0000\u169f\u1697\u0001\u0000\u0000\u0000\u169f\u16a0\u0001\u0000\u0000"+
		"\u0000\u16a0\u16a1\u0001\u0000\u0000\u0000\u16a1\u16a3\u0005\u001f\u0000"+
		"\u0000\u16a2\u1696\u0001\u0000\u0000\u0000\u16a2\u16a3\u0001\u0000\u0000"+
		"\u0000\u16a3\u16a6\u0001\u0000\u0000\u0000\u16a4\u16a5\u0005\u01d1\u0000"+
		"\u0000\u16a5\u16a7\u0003\u0208\u0104\u0000\u16a6\u16a4\u0001\u0000\u0000"+
		"\u0000\u16a6\u16a7\u0001\u0000\u0000\u0000\u16a7\u16a8\u0001\u0000\u0000"+
		"\u0000\u16a8\u16a9\u0005\u01e4\u0000\u0000\u16a9\u16b0\u0003J%\u0000\u16aa"+
		"\u16ac\u0005\u01d1\u0000\u0000\u16ab\u16ad\u0007!\u0000\u0000\u16ac\u16ab"+
		"\u0001\u0000\u0000\u0000\u16ac\u16ad\u0001\u0000\u0000\u0000\u16ad\u16ae"+
		"\u0001\u0000\u0000\u0000\u16ae\u16af\u0005T\u0000\u0000\u16af\u16b1\u0005"+
		"Y\u0000\u0000\u16b0\u16aa\u0001\u0000\u0000\u0000\u16b0\u16b1\u0001\u0000"+
		"\u0000\u0000\u16b1\u02ed\u0001\u0000\u0000\u0000\u16b2\u16b3\u0005\u01ba"+
		"\u0000\u0000\u16b3\u16b5\u0005p\u0000\u0000\u16b4\u16b6\u0003\u02a0\u0150"+
		"\u0000\u16b5\u16b4\u0001\u0000\u0000\u0000\u16b5\u16b6\u0001\u0000\u0000"+
		"\u0000\u16b6\u16b7\u0001\u0000\u0000\u0000\u16b7\u16b8\u0003\u00f4z\u0000"+
		"\u16b8\u02ef\u0001\u0000\u0000\u0000\u16b9\u16ba\u0005\u01ba\u0000\u0000"+
		"\u16ba\u16bc\u0005\u01f8\u0000\u0000\u16bb\u16bd\u0003\u02a0\u0150\u0000"+
		"\u16bc\u16bb\u0001\u0000\u0000\u0000\u16bc\u16bd\u0001\u0000\u0000\u0000"+
		"\u16bd\u16be\u0001\u0000\u0000\u0000\u16be\u16c3\u0003\u00f4z\u0000\u16bf"+
		"\u16c0\u0005$\u0000\u0000\u16c0\u16c2\u0003\u00f4z\u0000\u16c1\u16bf\u0001"+
		"\u0000\u0000\u0000\u16c2\u16c5\u0001\u0000\u0000\u0000\u16c3\u16c1\u0001"+
		"\u0000\u0000\u0000\u16c3\u16c4\u0001\u0000\u0000\u0000\u16c4\u02f1\u0001"+
		"\u0000\u0000\u0000\u16c5\u16c3\u0001\u0000\u0000\u0000\u16c6\u16c8\u0003"+
		"\u02f4\u017a\u0000\u16c7\u16c9\u0005\u0016\u0000\u0000\u16c8\u16c7\u0001"+
		"\u0000\u0000\u0000\u16c8\u16c9\u0001\u0000\u0000\u0000\u16c9\u16cd\u0001"+
		"\u0000\u0000\u0000\u16ca\u16ce\u0003\u021e\u010f\u0000\u16cb\u16ce\u0003"+
		"\u0220\u0110\u0000\u16cc\u16ce\u0005\u0217\u0000\u0000\u16cd\u16ca\u0001"+
		"\u0000\u0000\u0000\u16cd\u16cb\u0001\u0000\u0000\u0000\u16cd\u16cc\u0001"+
		"\u0000\u0000\u0000\u16ce\u02f3\u0001\u0000\u0000\u0000\u16cf\u16d8\u0003"+
		"\u00e4r\u0000\u16d0\u16d1\u0005\u0147\u0000\u0000\u16d1\u16d8\u0005\u01fd"+
		"\u0000\u0000\u16d2\u16d8\u0005\u0140\u0000\u0000\u16d3\u16d8\u0005\u014d"+
		"\u0000\u0000\u16d4\u16d8\u0005\u0099\u0000\u0000\u16d5\u16d8\u0005\u00ad"+
		"\u0000\u0000\u16d6\u16d8\u0005\u0188\u0000\u0000\u16d7\u16cf\u0001\u0000"+
		"\u0000\u0000\u16d7\u16d0\u0001\u0000\u0000\u0000\u16d7\u16d2\u0001\u0000"+
		"\u0000\u0000\u16d7\u16d3\u0001\u0000\u0000\u0000\u16d7\u16d4\u0001\u0000"+
		"\u0000\u0000\u16d7\u16d5\u0001\u0000\u0000\u0000\u16d7\u16d6\u0001\u0000"+
		"\u0000\u0000\u16d8\u02f5\u0001\u0000\u0000\u0000\u16d9\u16da\u0005\u01b9"+
		"\u0000\u0000\u16da\u16f1\u0005\u01c1\u0000\u0000\u16db\u16dd\u0003\u02a0"+
		"\u0150\u0000\u16dc\u16db\u0001\u0000\u0000\u0000\u16dc\u16dd\u0001\u0000"+
		"\u0000\u0000\u16dd\u16de\u0001\u0000\u0000\u0000\u16de\u16df\u0003\u033e"+
		"\u019f\u0000\u16df\u16e0\u0003\u0352\u01a9\u0000\u16e0\u16e1\u0003\u0342"+
		"\u01a1\u0000\u16e1\u16f2\u0001\u0000\u0000\u0000\u16e2\u16e3\u0005\u01f4"+
		"\u0000\u0000\u16e3\u16e4\u0005\u01f3\u0000\u0000\u16e4\u16e5\u0005\u00ad"+
		"\u0000\u0000\u16e5\u16e9\u0003\u0352\u01a9\u0000\u16e6\u16e7\u0005\u0098"+
		"\u0000\u0000\u16e7\u16e8\u0005\u01f9\u0000\u0000\u16e8\u16ea\u0003\u027c"+
		"\u013e\u0000\u16e9\u16e6\u0001\u0000\u0000\u0000\u16e9\u16ea\u0001\u0000"+
		"\u0000\u0000\u16ea\u16eb\u0001\u0000\u0000\u0000\u16eb\u16ec\u0005\u01c0"+
		"\u0000\u0000\u16ec\u16ed\u0005\u00ad\u0000\u0000\u16ed\u16ef\u0003\u00f4"+
		"z\u0000\u16ee\u16f0\u0005\u010a\u0000\u0000\u16ef\u16ee\u0001\u0000\u0000"+
		"\u0000\u16ef\u16f0\u0001\u0000\u0000\u0000\u16f0\u16f2\u0001\u0000\u0000"+
		"\u0000\u16f1\u16dc\u0001\u0000\u0000\u0000\u16f1\u16e2\u0001\u0000\u0000"+
		"\u0000\u16f2\u02f7\u0001\u0000\u0000\u0000\u16f3\u16f4\u0005\u01b9\u0000"+
		"\u0000\u16f4\u16fb\u0005\u01c3\u0000\u0000\u16f5\u16f7\u0003\u02a0\u0150"+
		"\u0000\u16f6\u16f5\u0001\u0000\u0000\u0000\u16f6\u16f7\u0001\u0000\u0000"+
		"\u0000\u16f7\u16fc\u0001\u0000\u0000\u0000\u16f8\u16f9\u0005\u01f4\u0000"+
		"\u0000\u16f9\u16fa\u0005\u01f3\u0000\u0000\u16fa\u16fc\u0005\u00ad\u0000"+
		"\u0000\u16fb\u16f6\u0001\u0000\u0000\u0000\u16fb\u16f8\u0001\u0000\u0000"+
		"\u0000\u16fc\u16fd\u0001\u0000\u0000\u0000\u16fd\u16fe\u0003\u015a\u00ad"+
		"\u0000\u16fe\u16ff\u0003\u0346\u01a3\u0000\u16ff\u02f9\u0001\u0000\u0000"+
		"\u0000\u1700\u1701\u0005\u01ba\u0000\u0000\u1701\u1703\u0005\u01c1\u0000"+
		"\u0000\u1702\u1704\u0003\u02a0\u0150\u0000\u1703\u1702\u0001\u0000\u0000"+
		"\u0000\u1703\u1704\u0001\u0000\u0000\u0000\u1704\u1705\u0001\u0000\u0000"+
		"\u0000\u1705\u1707\u0003\u00f6{\u0000\u1706\u1708\u0003\u02fc\u017e\u0000"+
		"\u1707\u1706\u0001\u0000\u0000\u0000\u1707\u1708\u0001\u0000\u0000\u0000"+
		"\u1708\u02fb\u0001\u0000\u0000\u0000\u1709\u170a\u0007\u001e\u0000\u0000"+
		"\u170a\u02fd\u0001\u0000\u0000\u0000\u170b\u170c\u0005\u01ba\u0000\u0000"+
		"\u170c\u170d\u0005\u01c3\u0000\u0000\u170d\u170f\u0003\u033c\u019e\u0000"+
		"\u170e\u1710\u0003\u02a0\u0150\u0000\u170f\u170e\u0001\u0000\u0000\u0000"+
		"\u170f\u1710\u0001\u0000\u0000\u0000\u1710\u1711\u0001\u0000\u0000\u0000"+
		"\u1711\u1713\u0003p8\u0000\u1712\u1714\u0003\u0300\u0180\u0000\u1713\u1712"+
		"\u0001\u0000\u0000\u0000\u1713\u1714\u0001\u0000\u0000\u0000\u1714\u02ff"+
		"\u0001\u0000\u0000\u0000\u1715\u1716\u0007\u001e\u0000\u0000\u1716\u0301"+
		"\u0001\u0000\u0000\u0000\u1717\u1719\u0005\u01bb\u0000\u0000\u1718\u171a"+
		"\u0005\u01c1\u0000\u0000\u1719\u1718\u0001\u0000\u0000\u0000\u1719\u171a"+
		"\u0001\u0000\u0000\u0000\u171a\u171b\u0001\u0000\u0000\u0000\u171b\u171c"+
		"\u0003\u033e\u019f\u0000\u171c\u171e\u0003\u0350\u01a8\u0000\u171d\u171f"+
		"\u0003\u0304\u0182\u0000\u171e\u171d\u0001\u0000\u0000\u0000\u171e\u171f"+
		"\u0001\u0000\u0000\u0000\u171f\u1721\u0001\u0000\u0000\u0000\u1720\u1722"+
		"\u0003\u02fc\u017e\u0000\u1721\u1720\u0001\u0000\u0000\u0000\u1721\u1722"+
		"\u0001\u0000\u0000\u0000\u1722\u0303\u0001\u0000\u0000\u0000\u1723\u1724"+
		"\u0005\u0127\u0000\u0000\u1724\u1728\u0005\u0081\u0000\u0000\u1725\u1726"+
		"\u0005\u00a1\u0000\u0000\u1726\u1728\u0005\u0081\u0000\u0000\u1727\u1723"+
		"\u0001\u0000\u0000\u0000\u1727\u1725\u0001\u0000\u0000\u0000\u1728\u0305"+
		"\u0001\u0000\u0000\u0000\u1729\u172b\u0007\"\u0000\u0000\u172a\u1729\u0001"+
		"\u0000\u0000\u0000\u172a\u172b\u0001\u0000\u0000\u0000\u172b\u172c\u0001"+
		"\u0000\u0000\u0000\u172c\u172f\u0007 \u0000\u0000\u172d\u172f\u0005\u00b1"+
		"\u0000\u0000\u172e\u172a\u0001\u0000\u0000\u0000\u172e\u172d\u0001\u0000"+
		"\u0000\u0000\u172e\u172f\u0001\u0000\u0000\u0000\u172f\u0307\u0001\u0000"+
		"\u0000\u0000\u1730\u1739\u0005\u001e\u0000\u0000\u1731\u1736\u0003\u030a"+
		"\u0185\u0000\u1732\u1733\u0005$\u0000\u0000\u1733\u1735\u0003\u030a\u0185"+
		"\u0000\u1734\u1732\u0001\u0000\u0000\u0000\u1735\u1738\u0001\u0000\u0000"+
		"\u0000\u1736\u1734\u0001\u0000\u0000\u0000\u1736\u1737\u0001\u0000\u0000"+
		"\u0000\u1737\u173a\u0001\u0000\u0000\u0000\u1738\u1736\u0001\u0000\u0000"+
		"\u0000\u1739\u1731\u0001\u0000\u0000\u0000\u1739\u173a\u0001\u0000\u0000"+
		"\u0000\u173a\u173b\u0001\u0000\u0000\u0000\u173b\u173c\u0005\u001f\u0000"+
		"\u0000\u173c\u0309\u0001\u0000\u0000\u0000\u173d\u1748\u0003\u030c\u0186"+
		"\u0000\u173e\u1748\u0003\u0324\u0192\u0000\u173f\u1740\u0005\u01f6\u0000"+
		"\u0000\u1740\u1744\u0003\u00eew\u0000\u1741\u1743\u0003\u0322\u0191\u0000"+
		"\u1742\u1741\u0001\u0000\u0000\u0000\u1743\u1746\u0001\u0000\u0000\u0000"+
		"\u1744\u1742\u0001\u0000\u0000\u0000\u1744\u1745\u0001\u0000\u0000\u0000"+
		"\u1745\u1748\u0001\u0000\u0000\u0000\u1746\u1744\u0001\u0000\u0000\u0000"+
		"\u1747\u173d\u0001\u0000\u0000\u0000\u1747\u173e\u0001\u0000\u0000\u0000"+
		"\u1747\u173f\u0001\u0000\u0000\u0000\u1748\u030b\u0001\u0000\u0000\u0000"+
		"\u1749\u174a\u0003\u00f0x\u0000\u174a\u174c\u0003\u0212\u0109\u0000\u174b"+
		"\u174d\u0003\u01de\u00ef\u0000\u174c\u174b\u0001\u0000\u0000\u0000\u174c"+
		"\u174d\u0001\u0000\u0000\u0000\u174d\u1751\u0001\u0000\u0000\u0000\u174e"+
		"\u1750\u0003\u030e\u0187\u0000\u174f\u174e\u0001\u0000\u0000\u0000\u1750"+
		"\u1753\u0001\u0000\u0000\u0000\u1751\u174f\u0001\u0000\u0000\u0000\u1751"+
		"\u1752\u0001\u0000\u0000\u0000\u1752\u030d\u0001\u0000\u0000\u0000\u1753"+
		"\u1751\u0001\u0000\u0000\u0000\u1754\u1756\u0003\u0310\u0188\u0000\u1755"+
		"\u1754\u0001\u0000\u0000\u0000\u1755\u1756\u0001\u0000\u0000\u0000\u1756"+
		"\u1757\u0001\u0000\u0000\u0000\u1757\u1758\u0003\u0312\u0189\u0000\u1758"+
		"\u1759\u0003\u0320\u0190\u0000\u1759\u030f\u0001\u0000\u0000\u0000\u175a"+
		"\u175b\u0005\u01c4\u0000\u0000\u175b\u175c\u0003\u00fe\u007f\u0000\u175c"+
		"\u0311\u0001\u0000\u0000\u0000\u175d\u175f\u0005\u01ee\u0000\u0000\u175e"+
		"\u175d\u0001\u0000\u0000\u0000\u175e\u175f\u0001\u0000\u0000\u0000\u175f"+
		"\u1760\u0001\u0000\u0000\u0000\u1760\u1795\u0005\u01ef\u0000\u0000\u1761"+
		"\u1795\u0003\u0314\u018a\u0000\u1762\u1763\u0005\u0217\u0000\u0000\u1763"+
		"\u1795\u0003\u0316\u018b\u0000\u1764\u1765\u0005U\u0000\u0000\u1765\u1766"+
		"\u0005R\u0000\u0000\u1766\u1767\u0005\u01e4\u0000\u0000\u1767\u1768\u0005"+
		"\u001e\u0000\u0000\u1768\u1769\u0003\u010c\u0086\u0000\u1769\u176a\u0005"+
		"\u001f\u0000\u0000\u176a\u176b\u0005\u0193\u0000\u0000\u176b\u1795\u0001"+
		"\u0000\u0000\u0000\u176c\u1770\u0005U\u0000\u0000\u176d\u1771\u0005R\u0000"+
		"\u0000\u176e\u176f\u0005\u01f9\u0000\u0000\u176f\u1771\u0005\u0217\u0000"+
		"\u0000\u1770\u176d\u0001\u0000\u0000\u0000\u1770\u176e\u0001\u0000\u0000"+
		"\u0000\u1771\u1772\u0001\u0000\u0000\u0000\u1772\u1773\u0005\u01e4\u0000"+
		"\u0000\u1773\u1778\u0005\u0081\u0000\u0000\u1774\u1775\u0005\u001e\u0000"+
		"\u0000\u1775\u1776\u0003\u0318\u018c\u0000\u1776\u1777\u0005\u001f\u0000"+
		"\u0000\u1777\u1779\u0001\u0000\u0000\u0000\u1778\u1774\u0001\u0000\u0000"+
		"\u0000\u1778\u1779\u0001\u0000\u0000\u0000\u1779\u1795\u0001\u0000\u0000"+
		"\u0000\u177a\u177b\u0005\u01c6\u0000\u0000\u177b\u1795\u0003\u031c\u018e"+
		"\u0000\u177c\u177d\u0003\u0100\u0080\u0000\u177d\u177e\u0003\u031c\u018e"+
		"\u0000\u177e\u1795\u0001\u0000\u0000\u0000\u177f\u1780\u0005\\\u0000\u0000"+
		"\u1780\u1782\u0003\u00eew\u0000\u1781\u1783\u0003\u00f8|\u0000\u1782\u1781"+
		"\u0001\u0000\u0000\u0000\u1782\u1783\u0001\u0000\u0000\u0000\u1783\u178a"+
		"\u0001\u0000\u0000\u0000\u1784\u1785\u0005\u008f\u0000\u0000\u1785\u178b"+
		"\u0005\u01dc\u0000\u0000\u1786\u1787\u0005\u008f\u0000\u0000\u1787\u178b"+
		"\u0005\u009a\u0000\u0000\u1788\u1789\u0005\u008f\u0000\u0000\u1789\u178b"+
		"\u0005\u00aa\u0000\u0000\u178a\u1784\u0001\u0000\u0000\u0000\u178a\u1786"+
		"\u0001\u0000\u0000\u0000\u178a\u1788\u0001\u0000\u0000\u0000\u178a\u178b"+
		"\u0001\u0000\u0000\u0000\u178b\u1791\u0001\u0000\u0000\u0000\u178c\u178d"+
		"\u0005\u01e5\u0000\u0000\u178d\u178e\u0007#\u0000\u0000\u178e\u1790\u0003"+
		"\u031e\u018f\u0000\u178f\u178c\u0001\u0000\u0000\u0000\u1790\u1793\u0001"+
		"\u0000\u0000\u0000\u1791\u178f\u0001\u0000\u0000\u0000\u1791\u1792\u0001"+
		"\u0000\u0000\u0000\u1792\u1795\u0001\u0000\u0000\u0000\u1793\u1791\u0001"+
		"\u0000\u0000\u0000\u1794\u175e\u0001\u0000\u0000\u0000\u1794\u1761\u0001"+
		"\u0000\u0000\u0000\u1794\u1762\u0001\u0000\u0000\u0000\u1794\u1764\u0001"+
		"\u0000\u0000\u0000\u1794\u176c\u0001\u0000\u0000\u0000\u1794\u177a\u0001"+
		"\u0000\u0000\u0000\u1794\u177c\u0001\u0000\u0000\u0000\u1794\u177f\u0001"+
		"\u0000\u0000\u0000\u1795\u0313\u0001\u0000\u0000\u0000\u1796\u1797\u0005"+
		"T\u0000\u0000\u1797\u179a\u0003\u010c\u0086\u0000\u1798\u1799\u0005X\u0000"+
		"\u0000\u1799\u179b\u0005\u0086\u0000\u0000\u179a\u1798\u0001\u0000\u0000"+
		"\u0000\u179a\u179b\u0001\u0000\u0000\u0000\u179b\u0315\u0001\u0000\u0000"+
		"\u0000\u179c\u179f\u0005m\u0000\u0000\u179d\u179f\u0003\u010c\u0086\u0000"+
		"\u179e\u179c\u0001\u0000\u0000\u0000\u179e\u179d\u0001\u0000\u0000\u0000"+
		"\u179f\u0317\u0001\u0000\u0000\u0000\u17a0\u17a2\u0003\u031a\u018d\u0000"+
		"\u17a1\u17a0\u0001\u0000\u0000\u0000\u17a2\u17a3\u0001\u0000\u0000\u0000"+
		"\u17a3\u17a1\u0001\u0000\u0000\u0000\u17a3\u17a4\u0001\u0000\u0000\u0000"+
		"\u17a4\u0319\u0001\u0000\u0000\u0000\u17a5\u17a7\u0005_\u0000\u0000\u17a6"+
		"\u17a8\u0005\u01d1\u0000\u0000\u17a7\u17a6\u0001\u0000\u0000\u0000\u17a7"+
		"\u17a8\u0001\u0000\u0000\u0000\u17a8\u17a9\u0001\u0000\u0000\u0000\u17a9"+
		"\u17bf\u0005\u0250\u0000\u0000\u17aa\u17ac\u0005\u0084\u0000\u0000\u17ab"+
		"\u17ad\u0005\u01f9\u0000\u0000\u17ac\u17ab\u0001\u0000\u0000\u0000\u17ac"+
		"\u17ad\u0001\u0000\u0000\u0000\u17ad\u17ae\u0001\u0000\u0000\u0000\u17ae"+
		"\u17bf\u0005\u0250\u0000\u0000\u17af\u17b0\u0005\u0090\u0000\u0000\u17b0"+
		"\u17bf\u0005\u0250\u0000\u0000\u17b1\u17b2\u0005X\u0000\u0000\u17b2\u17bf"+
		"\u0005\u0090\u0000\u0000\u17b3\u17b4\u0005\u0091\u0000\u0000\u17b4\u17bf"+
		"\u0005\u0250\u0000\u0000\u17b5\u17b6\u0005X\u0000\u0000\u17b6\u17bf\u0005"+
		"\u0091\u0000\u0000\u17b7\u17bf\u0005n\u0000\u0000\u17b8\u17b9\u0005X\u0000"+
		"\u0000\u17b9\u17bf\u0005n\u0000\u0000\u17ba\u17bb\u0005c\u0000\u0000\u17bb"+
		"\u17bf\u0005\u0250\u0000\u0000\u17bc\u17bd\u0005\u0098\u0000\u0000\u17bd"+
		"\u17bf\u0005\u01f9\u0000\u0000\u17be\u17a5\u0001\u0000\u0000\u0000\u17be"+
		"\u17aa\u0001\u0000\u0000\u0000\u17be\u17af\u0001\u0000\u0000\u0000\u17be"+
		"\u17b1\u0001\u0000\u0000\u0000\u17be\u17b3\u0001\u0000\u0000\u0000\u17be"+
		"\u17b5\u0001\u0000\u0000\u0000\u17be\u17b7\u0001\u0000\u0000\u0000\u17be"+
		"\u17b8\u0001\u0000\u0000\u0000\u17be\u17ba\u0001\u0000\u0000\u0000\u17be"+
		"\u17bc\u0001\u0000\u0000\u0000\u17bf\u031b\u0001\u0000\u0000\u0000\u17c0"+
		"\u17c1\u0005\u01e2\u0000\u0000\u17c1\u17c2\u0005\u01c3\u0000\u0000\u17c2"+
		"\u17c3\u0005\u00ad\u0000\u0000\u17c3\u17c5\u0003\u021a\u010d\u0000\u17c4"+
		"\u17c0\u0001\u0000\u0000\u0000\u17c4\u17c5\u0001\u0000\u0000\u0000\u17c5"+
		"\u17cb\u0001\u0000\u0000\u0000\u17c6\u17c7\u0005\u0089\u0000\u0000\u17c7"+
		"\u17cb\u0003\u00f8|\u0000\u17c8\u17c9\u0005\u01d1\u0000\u0000\u17c9\u17cb"+
		"\u0003\u0252\u0129\u0000\u17ca\u17c4\u0001\u0000\u0000\u0000\u17ca\u17c6"+
		"\u0001\u0000\u0000\u0000\u17ca\u17c8\u0001\u0000\u0000\u0000\u17cb\u031d"+
		"\u0001\u0000\u0000\u0000\u17cc\u17cd\u0005X\u0000\u0000\u17cd\u17d3\u0005"+
		"b\u0000\u0000\u17ce\u17d3\u0005\u00a2\u0000\u0000\u17cf\u17d3\u0005S\u0000"+
		"\u0000\u17d0\u17d1\u0005\u01c0\u0000\u0000\u17d1\u17d3\u0007$\u0000\u0000"+
		"\u17d2\u17cc\u0001\u0000\u0000\u0000\u17d2\u17ce\u0001\u0000\u0000\u0000"+
		"\u17d2\u17cf\u0001\u0000\u0000\u0000\u17d2\u17d0\u0001\u0000\u0000\u0000"+
		"\u17d3\u031f\u0001\u0000\u0000\u0000\u17d4\u17d6\u0005\u01ee\u0000\u0000"+
		"\u17d5\u17d4\u0001\u0000\u0000\u0000\u17d5\u17d6\u0001\u0000\u0000\u0000"+
		"\u17d6\u17d7\u0001\u0000\u0000\u0000\u17d7\u17d9\u0005r\u0000\u0000\u17d8"+
		"\u17d5\u0001\u0000\u0000\u0000\u17d8\u17d9\u0001\u0000\u0000\u0000\u17d9"+
		"\u17dc\u0001\u0000\u0000\u0000\u17da\u17db\u0005\u0088\u0000\u0000\u17db"+
		"\u17dd\u0007\u0001\u0000\u0000\u17dc\u17da\u0001\u0000\u0000\u0000\u17dc"+
		"\u17dd\u0001\u0000\u0000\u0000\u17dd\u0321\u0001\u0000\u0000\u0000\u17de"+
		"\u17df\u0007%\u0000\u0000\u17df\u17e0\u0007&\u0000\u0000\u17e0\u0323\u0001"+
		"\u0000\u0000\u0000\u17e1\u17e3\u0003\u0310\u0188\u0000\u17e2\u17e1\u0001"+
		"\u0000\u0000\u0000\u17e2\u17e3\u0001\u0000\u0000\u0000\u17e3\u17e4\u0001"+
		"\u0000\u0000\u0000\u17e4\u17e5\u0003\u0326\u0193\u0000\u17e5\u17e6\u0003"+
		"\u0320\u0190\u0000\u17e6\u0325\u0001\u0000\u0000\u0000\u17e7\u1815\u0003"+
		"\u0314\u018a\u0000\u17e8\u17e9\u0005\u01c6\u0000\u0000\u17e9\u17ea\u0003"+
		"\u00f8|\u0000\u17ea\u17eb\u0003\u031c\u018e\u0000\u17eb\u1815\u0001\u0000"+
		"\u0000\u0000\u17ec\u17ed\u0003\u0100\u0080\u0000\u17ed\u17ee\u0003\u00f8"+
		"|\u0000\u17ee\u17ef\u0003\u031c\u018e\u0000\u17ef\u1815\u0001\u0000\u0000"+
		"\u0000\u17f0\u17f3\u0005M\u0000\u0000\u17f1\u17f2\u0005\u01e2\u0000\u0000"+
		"\u17f2\u17f4\u0003\u021a\u010d\u0000\u17f3\u17f1\u0001\u0000\u0000\u0000"+
		"\u17f3\u17f4\u0001\u0000\u0000\u0000\u17f4\u17f5\u0001\u0000\u0000\u0000"+
		"\u17f5\u17f6\u0005\u001e\u0000\u0000\u17f6\u17f7\u0003\u032a\u0195\u0000"+
		"\u17f7\u17f8\u0005\u001f\u0000\u0000\u17f8\u17fa\u0003\u031c\u018e\u0000"+
		"\u17f9\u17fb\u0003\u0328\u0194\u0000\u17fa\u17f9\u0001\u0000\u0000\u0000"+
		"\u17fa\u17fb\u0001\u0000\u0000\u0000\u17fb\u1815\u0001\u0000\u0000\u0000"+
		"\u17fc\u17fd\u0005\u01c7\u0000\u0000\u17fd\u17fe\u0005\u01c8\u0000\u0000"+
		"\u17fe\u17ff\u0003\u00f8|\u0000\u17ff\u1800\u0005\\\u0000\u0000\u1800"+
		"\u1802\u0003\u00eew\u0000\u1801\u1803\u0003\u00f8|\u0000\u1802\u1801\u0001"+
		"\u0000\u0000\u0000\u1802\u1803\u0001\u0000\u0000\u0000\u1803\u180a\u0001"+
		"\u0000\u0000\u0000\u1804\u1805\u0005\u008f\u0000\u0000\u1805\u180b\u0005"+
		"\u01dc\u0000\u0000\u1806\u1807\u0005\u008f\u0000\u0000\u1807\u180b\u0005"+
		"\u009a\u0000\u0000\u1808\u1809\u0005\u008f\u0000\u0000\u1809\u180b\u0005"+
		"\u00aa\u0000\u0000\u180a\u1804\u0001\u0000\u0000\u0000\u180a\u1806\u0001"+
		"\u0000\u0000\u0000\u180a\u1808\u0001\u0000\u0000\u0000\u180a\u180b\u0001"+
		"\u0000\u0000\u0000\u180b\u1811\u0001\u0000\u0000\u0000\u180c\u180d\u0005"+
		"\u01e5\u0000\u0000\u180d\u180e\u0007#\u0000\u0000\u180e\u1810\u0003\u031e"+
		"\u018f\u0000\u180f\u180c\u0001\u0000\u0000\u0000\u1810\u1813\u0001\u0000"+
		"\u0000\u0000\u1811\u180f\u0001\u0000\u0000\u0000\u1811\u1812\u0001\u0000"+
		"\u0000\u0000\u1812\u1815\u0001\u0000\u0000\u0000\u1813\u1811\u0001\u0000"+
		"\u0000\u0000\u1814\u17e7\u0001\u0000\u0000\u0000\u1814\u17e8\u0001\u0000"+
		"\u0000\u0000\u1814\u17ec\u0001\u0000\u0000\u0000\u1814\u17f0\u0001\u0000"+
		"\u0000\u0000\u1814\u17fc\u0001\u0000\u0000\u0000\u1815\u0327\u0001\u0000"+
		"\u0000\u0000\u1816\u1817\u0005\u01e3\u0000\u0000\u1817\u1818\u0005\u001e"+
		"\u0000\u0000\u1818\u1819\u0003\u010c\u0086\u0000\u1819\u181a\u0005\u001f"+
		"\u0000\u0000\u181a\u0329\u0001\u0000\u0000\u0000\u181b\u1820\u0003\u032c"+
		"\u0196\u0000\u181c\u181d\u0005$\u0000\u0000\u181d\u181f\u0003\u032c\u0196"+
		"\u0000\u181e\u181c\u0001\u0000\u0000\u0000\u181f\u1822\u0001\u0000\u0000"+
		"\u0000\u1820\u181e\u0001\u0000\u0000\u0000\u1820\u1821\u0001\u0000\u0000"+
		"\u0000\u1821\u032b\u0001\u0000\u0000\u0000\u1822\u1820\u0001\u0000\u0000"+
		"\u0000\u1823\u1824\u0003\u0202\u0101\u0000\u1824\u1825\u0005\u01d1\u0000"+
		"\u0000\u1825\u1826\u0003\u013a\u009d\u0000\u1826\u182f\u0001\u0000\u0000"+
		"\u0000\u1827\u1828\u0003\u0202\u0101\u0000\u1828\u1829\u0005\u01d1\u0000"+
		"\u0000\u1829\u182a\u0005\u00fe\u0000\u0000\u182a\u182b\u0005\u001e\u0000"+
		"\u0000\u182b\u182c\u0003\u013a\u009d\u0000\u182c\u182d\u0005\u001f\u0000"+
		"\u0000\u182d\u182f\u0001\u0000\u0000\u0000\u182e\u1823\u0001\u0000\u0000"+
		"\u0000\u182e\u1827\u0001\u0000\u0000\u0000\u182f\u032d\u0001\u0000\u0000"+
		"\u0000\u1830\u1831\u0005\u0087\u0000\u0000\u1831\u1833\u0003\u00f6{\u0000"+
		"\u1832\u1830\u0001\u0000\u0000\u0000\u1832\u1833\u0001\u0000\u0000\u0000"+
		"\u1833\u032f\u0001\u0000\u0000\u0000\u1834\u1835\u0005O\u0000\u0000\u1835"+
		"\u1836\u0005\u01f9\u0000\u0000\u1836\u1837\u0003\u0338\u019c\u0000\u1837"+
		"\u1838\u0005\u001e\u0000\u0000\u1838\u1839\u0003\u0332\u0199\u0000\u1839"+
		"\u183a\u0005\u001f\u0000\u0000\u183a\u0331\u0001\u0000\u0000\u0000\u183b"+
		"\u1840\u0003\u0334\u019a\u0000\u183c\u183d\u0005$\u0000\u0000\u183d\u183f"+
		"\u0003\u0334\u019a\u0000\u183e\u183c\u0001\u0000\u0000\u0000\u183f\u1842"+
		"\u0001\u0000\u0000\u0000\u1840\u183e\u0001\u0000\u0000\u0000\u1840\u1841"+
		"\u0001\u0000\u0000\u0000\u1841\u0333\u0001\u0000\u0000\u0000\u1842\u1840"+
		"\u0001\u0000\u0000\u0000\u1843\u1846\u0003\u015c\u00ae\u0000\u1844\u1845"+
		"\u0005f\u0000\u0000\u1845\u1847\u0003\u01e0\u00f0\u0000\u1846\u1844\u0001"+
		"\u0000\u0000\u0000\u1846\u1847\u0001\u0000\u0000\u0000\u1847\u1849\u0001"+
		"\u0000\u0000\u0000\u1848\u184a\u0003\u01e0\u00f0\u0000\u1849\u1848\u0001"+
		"\u0000\u0000\u0000\u1849\u184a\u0001\u0000\u0000\u0000\u184a\u185e\u0001"+
		"\u0000\u0000\u0000\u184b\u184c\u0005\u001e\u0000\u0000\u184c\u184d\u0003"+
		"\u010c\u0086\u0000\u184d\u1850\u0005\u001f\u0000\u0000\u184e\u184f\u0005"+
		"f\u0000\u0000\u184f\u1851\u0003\u01e0\u00f0\u0000\u1850\u184e\u0001\u0000"+
		"\u0000\u0000\u1850\u1851\u0001\u0000\u0000\u0000\u1851\u1853\u0001\u0000"+
		"\u0000\u0000\u1852\u1854\u0003\u01e0\u00f0\u0000\u1853\u1852\u0001\u0000"+
		"\u0000\u0000\u1853\u1854\u0001\u0000\u0000\u0000\u1854\u185e\u0001\u0000"+
		"\u0000\u0000\u1855\u1858\u0003\u0336\u019b\u0000\u1856\u1857\u0005f\u0000"+
		"\u0000\u1857\u1859\u0003\u01e0\u00f0\u0000\u1858\u1856\u0001\u0000\u0000"+
		"\u0000\u1858\u1859\u0001\u0000\u0000\u0000\u1859\u185b\u0001\u0000\u0000"+
		"\u0000\u185a\u185c\u0003\u01e0\u00f0\u0000\u185b\u185a\u0001\u0000\u0000"+
		"\u0000\u185b\u185c\u0001\u0000\u0000\u0000\u185c\u185e\u0001\u0000\u0000"+
		"\u0000\u185d\u1843\u0001\u0000\u0000\u0000\u185d\u184b\u0001\u0000\u0000"+
		"\u0000\u185d\u1855\u0001\u0000\u0000\u0000\u185e\u0335\u0001\u0000\u0000"+
		"\u0000\u185f\u1862\u0003\u0152\u00a9\u0000\u1860\u1862\u0003\u017c\u00be"+
		"\u0000\u1861\u185f\u0001\u0000\u0000\u0000\u1861\u1860\u0001\u0000\u0000"+
		"\u0000\u1862\u0337\u0001\u0000\u0000\u0000\u1863\u1866\u0003\u00e4r\u0000"+
		"\u1864\u1866\u0003\u00e8t\u0000\u1865\u1863\u0001\u0000\u0000\u0000\u1865"+
		"\u1864\u0001\u0000\u0000\u0000\u1866\u0339\u0001\u0000\u0000\u0000\u1867"+
		"\u1869\u0005\u01c6\u0000\u0000\u1868\u1867\u0001\u0000\u0000\u0000\u1868"+
		"\u1869\u0001\u0000\u0000\u0000\u1869\u033b\u0001\u0000\u0000\u0000\u186a"+
		"\u186c\u0005i\u0000\u0000\u186b\u186a\u0001\u0000\u0000\u0000\u186b\u186c"+
		"\u0001\u0000\u0000\u0000\u186c\u033d\u0001\u0000\u0000\u0000\u186d\u186f"+
		"\u0005\u0096\u0000\u0000\u186e\u186d\u0001\u0000\u0000\u0000\u186e\u186f"+
		"\u0001\u0000\u0000\u0000\u186f\u033f\u0001\u0000\u0000\u0000\u1870\u1872"+
		"\u0005\u000f\u0000\u0000\u1871\u1870\u0001\u0000\u0000\u0000\u1871\u1872"+
		"\u0001\u0000\u0000\u0000\u1872\u0341\u0001\u0000\u0000\u0000\u1873\u187c"+
		"\u0003\u0354\u01aa\u0000\u1874\u187c\u0003\u0374\u01ba\u0000\u1875\u187c"+
		"\u0003\u0376\u01bb\u0000\u1876\u187c\u0003\u0378\u01bc\u0000\u1877\u1878"+
		"\u0005\u01c0\u0000\u0000\u1878\u1879\u0005\u01bc\u0000\u0000\u1879\u187c"+
		"\u0003\u00f4z\u0000\u187a\u187c\u0003\u0344\u01a2\u0000\u187b\u1873\u0001"+
		"\u0000\u0000\u0000\u187b\u1874\u0001\u0000\u0000\u0000\u187b\u1875\u0001"+
		"\u0000\u0000\u0000\u187b\u1876\u0001\u0000\u0000\u0000\u187b\u1877\u0001"+
		"\u0000\u0000\u0000\u187b\u187a\u0001\u0000\u0000\u0000\u187c\u0343\u0001"+
		"\u0000\u0000\u0000\u187d\u187e\u0005\u0121\u0000\u0000\u187e\u187f\u0005"+
		"O\u0000\u0000\u187f\u1880\u0003\u015a\u00ad\u0000\u1880\u1881\u0003\u02ca"+
		"\u0165\u0000\u1881\u1889\u0001\u0000\u0000\u0000\u1882\u1883\u0005\u0133"+
		"\u0000\u0000\u1883\u1884\u0005O\u0000\u0000\u1884\u1886\u0003\u015a\u00ad"+
		"\u0000\u1885\u1887\u0007\'\u0000\u0000\u1886\u1885\u0001\u0000\u0000\u0000"+
		"\u1886\u1887\u0001\u0000\u0000\u0000\u1887\u1889\u0001\u0000\u0000\u0000"+
		"\u1888\u187d\u0001\u0000\u0000\u0000\u1888\u1882\u0001\u0000\u0000\u0000"+
		"\u1889\u0345\u0001\u0000\u0000\u0000\u188a\u1890\u0003\u034a\u01a5\u0000"+
		"\u188b\u1890\u0003\u034c\u01a6\u0000\u188c\u1890\u0003\u034e\u01a7\u0000"+
		"\u188d\u1890\u0003\u0384\u01c2\u0000\u188e\u1890\u0003\u0348\u01a4\u0000"+
		"\u188f\u188a\u0001\u0000\u0000\u0000\u188f\u188b\u0001\u0000\u0000\u0000"+
		"\u188f\u188c\u0001\u0000\u0000\u0000\u188f\u188d\u0001\u0000\u0000\u0000"+
		"\u188f\u188e\u0001\u0000\u0000\u0000\u1890\u0347\u0001\u0000\u0000\u0000"+
		"\u1891\u1892\u0005\u0121\u0000\u0000\u1892\u1893\u0005O\u0000\u0000\u1893"+
		"\u1894\u0003\u015a\u00ad\u0000\u1894\u0349\u0001\u0000\u0000\u0000\u1895"+
		"\u1896\u0005\u009e\u0000\u0000\u1896\u1897\u0005\u01ea\u0000\u0000\u1897"+
		"\u1898\u0003\u00fc~\u0000\u1898\u034b\u0001\u0000\u0000\u0000\u1899\u189a"+
		"\u0005t\u0000\u0000\u189a\u189b\u0005\u01e5\u0000\u0000\u189b\u189c\u0005"+
		"y\u0000\u0000\u189c\u189d\u0003\u021a\u010d\u0000\u189d\u034d\u0001\u0000"+
		"\u0000\u0000\u189e\u189f\u0005\u0098\u0000\u0000\u189f\u18a0\u0005\u01f9"+
		"\u0000\u0000\u18a0\u18a2\u0003\u021c\u010e\u0000\u18a1\u189e\u0001\u0000"+
		"\u0000\u0000\u18a1\u18a2\u0001\u0000\u0000\u0000\u18a2\u18a3\u0001\u0000"+
		"\u0000\u0000\u18a3\u18a4\u0005\u01c0\u0000\u0000\u18a4\u18a5\u0005\u00ad"+
		"\u0000\u0000\u18a5\u18a7\u0003\u00f4z\u0000\u18a6\u18a8\u0005\u010a\u0000"+
		"\u0000\u18a7\u18a6\u0001\u0000\u0000\u0000\u18a7\u18a8\u0001\u0000\u0000"+
		"\u0000\u18a8\u034f\u0001\u0000\u0000\u0000\u18a9\u18ae\u0003\u0352\u01a9"+
		"\u0000\u18aa\u18ab\u0005$\u0000\u0000\u18ab\u18ad\u0003\u0352\u01a9\u0000"+
		"\u18ac\u18aa\u0001\u0000\u0000\u0000\u18ad\u18b0\u0001\u0000\u0000\u0000"+
		"\u18ae\u18ac\u0001\u0000\u0000\u0000\u18ae\u18af\u0001\u0000\u0000\u0000"+
		"\u18af\u0351\u0001\u0000\u0000\u0000\u18b0\u18ae\u0001\u0000\u0000\u0000"+
		"\u18b1\u18b3\u0003\u00eew\u0000\u18b2\u18b4\u0005\u000f\u0000\u0000\u18b3"+
		"\u18b2\u0001\u0000\u0000\u0000\u18b3\u18b4\u0001\u0000\u0000\u0000\u18b4"+
		"\u0353\u0001\u0000\u0000\u0000\u18b5\u18ba\u0003\u0356\u01ab\u0000\u18b6"+
		"\u18b7\u0005$\u0000\u0000\u18b7\u18b9\u0003\u0356\u01ab\u0000\u18b8\u18b6"+
		"\u0001\u0000\u0000\u0000\u18b9\u18bc\u0001\u0000\u0000\u0000\u18ba\u18b8"+
		"\u0001\u0000\u0000\u0000\u18ba\u18bb\u0001\u0000\u0000\u0000\u18bb\u0355"+
		"\u0001\u0000\u0000\u0000\u18bc\u18ba\u0001\u0000\u0000\u0000\u18bd\u197b"+
		"\u0003\u0358\u01ac\u0000\u18be\u197b\u0003\u035a\u01ad\u0000\u18bf\u197b"+
		"\u0003\u035c\u01ae\u0000\u18c0\u197b\u0003\u0366\u01b3\u0000\u18c1\u197b"+
		"\u0003\u036a\u01b5\u0000\u18c2\u197b\u0003\u036c\u01b6\u0000\u18c3\u197b"+
		"\u0003\u036e\u01b7\u0000\u18c4\u18c6\u0005\u01b9\u0000\u0000\u18c5\u18c7"+
		"\u0005\u01c2\u0000\u0000\u18c6\u18c5\u0001\u0000\u0000\u0000\u18c6\u18c7"+
		"\u0001\u0000\u0000\u0000\u18c7\u18c8\u0001\u0000\u0000\u0000\u18c8\u18c9"+
		"\u0003\u015c\u00ae\u0000\u18c9\u18ca\u0005\u01c0\u0000\u0000\u18ca\u18cb"+
		"\u0005\u00ab\u0000\u0000\u18cb\u18cc\u0003\u021e\u010f\u0000\u18cc\u197b"+
		"\u0001\u0000\u0000\u0000\u18cd\u18cf\u0005\u01b9\u0000\u0000\u18ce\u18d0"+
		"\u0005\u01c2\u0000\u0000\u18cf\u18ce\u0001\u0000\u0000\u0000\u18cf\u18d0"+
		"\u0001\u0000\u0000\u0000\u18d0\u18d1\u0001\u0000\u0000\u0000\u18d1\u18d2"+
		"\u0005\u0250\u0000\u0000\u18d2\u18d3\u0005\u01c0\u0000\u0000\u18d3\u18d4"+
		"\u0005\u00ab\u0000\u0000\u18d4\u197b\u0003\u021e\u010f\u0000\u18d5\u18d7"+
		"\u0005\u01b9\u0000\u0000\u18d6\u18d8\u0005\u01c2\u0000\u0000\u18d7\u18d6"+
		"\u0001\u0000\u0000\u0000\u18d7\u18d8\u0001\u0000\u0000\u0000\u18d8\u18d9"+
		"\u0001\u0000\u0000\u0000\u18d9\u18da\u0003\u015c\u00ae\u0000\u18da\u18db"+
		"\u0005\u01c0\u0000\u0000\u18db\u18dc\u0003\u0208\u0104\u0000\u18dc\u197b"+
		"\u0001\u0000\u0000\u0000\u18dd\u18df\u0005\u01b9\u0000\u0000\u18de\u18e0"+
		"\u0005\u01c2\u0000\u0000\u18df\u18de\u0001\u0000\u0000\u0000\u18df\u18e0"+
		"\u0001\u0000\u0000\u0000\u18e0\u18e1\u0001\u0000\u0000\u0000\u18e1\u18e2"+
		"\u0003\u015c\u00ae\u0000\u18e2\u18e3\u0005\u00a0\u0000\u0000\u18e3\u18e4"+
		"\u0003\u0208\u0104\u0000\u18e4\u197b\u0001\u0000\u0000\u0000\u18e5\u18e7"+
		"\u0005\u01b9\u0000\u0000\u18e6\u18e8\u0005\u01c2\u0000\u0000\u18e7\u18e6"+
		"\u0001\u0000\u0000\u0000\u18e7\u18e8\u0001\u0000\u0000\u0000\u18e8\u18e9"+
		"\u0001\u0000\u0000\u0000\u18e9\u18ea\u0003\u015c\u00ae\u0000\u18ea\u18eb"+
		"\u0005\u01c0\u0000\u0000\u18eb\u18ec\u0005\u00ac\u0000\u0000\u18ec\u18ed"+
		"\u0003\u015c\u00ae\u0000\u18ed\u197b\u0001\u0000\u0000\u0000\u18ee\u18f0"+
		"\u0005\u01b9\u0000\u0000\u18ef\u18f1\u0005\u01c2\u0000\u0000\u18f0\u18ef"+
		"\u0001\u0000\u0000\u0000\u18f0\u18f1\u0001\u0000\u0000\u0000\u18f1\u18f2"+
		"\u0001\u0000\u0000\u0000\u18f2\u18f3\u0003\u015c\u00ae\u0000\u18f3\u18f4"+
		"\u0005\u01c0\u0000\u0000\u18f4\u18f5\u0003\u0388\u01c4\u0000\u18f5\u197b"+
		"\u0001\u0000\u0000\u0000\u18f6\u18f8\u0005\u01b9\u0000\u0000\u18f7\u18f9"+
		"\u0005\u01c2\u0000\u0000\u18f8\u18f7\u0001\u0000\u0000\u0000\u18f8\u18f9"+
		"\u0001\u0000\u0000\u0000\u18f9\u18fa\u0001\u0000\u0000\u0000\u18fa\u18fb"+
		"\u0003\u015c\u00ae\u0000\u18fb\u18fc\u0005\u01ba\u0000\u0000\u18fc\u18fe"+
		"\u0005\u0135\u0000\u0000\u18fd\u18ff\u0003\u02a0\u0150\u0000\u18fe\u18fd"+
		"\u0001\u0000\u0000\u0000\u18fe\u18ff\u0001\u0000\u0000\u0000\u18ff\u197b"+
		"\u0001\u0000\u0000\u0000\u1900\u1901\u0007(\u0000\u0000\u1901\u1905\u0005"+
		"\u01cc\u0000\u0000\u1902\u1906\u0003\u021a\u010d\u0000\u1903\u1906\u0005"+
		"\u01f4\u0000\u0000\u1904\u1906\u0005a\u0000\u0000\u1905\u1902\u0001\u0000"+
		"\u0000\u0000\u1905\u1903\u0001\u0000\u0000\u0000\u1905\u1904\u0001\u0000"+
		"\u0000\u0000\u1905\u1906\u0001\u0000\u0000\u0000\u1906\u197b\u0001\u0000"+
		"\u0000\u0000\u1907\u1908\u0005\u0219\u0000\u0000\u1908\u1909\u0007)\u0000"+
		"\u0000\u1909\u190a\u0005\u01cc\u0000\u0000\u190a\u197b\u0003\u021a\u010d"+
		"\u0000\u190b\u190c\u0007(\u0000\u0000\u190c\u190d\u0005\u00a4\u0000\u0000"+
		"\u190d\u197b\u0003\u021a\u010d\u0000\u190e\u190f\u0005\u0219\u0000\u0000"+
		"\u190f\u1910\u0007)\u0000\u0000\u1910\u1911\u0005\u00a4\u0000\u0000\u1911"+
		"\u197b\u0003\u021a\u010d\u0000\u1912\u1919\u0005\u021a\u0000\u0000\u1913"+
		"\u1919\u0005\u0219\u0000\u0000\u1914\u1916\u0005X\u0000\u0000\u1915\u1914"+
		"\u0001\u0000\u0000\u0000\u1915\u1916\u0001\u0000\u0000\u0000\u1916\u1917"+
		"\u0001\u0000\u0000\u0000\u1917\u1919\u0005\u007f\u0000\u0000\u1918\u1912"+
		"\u0001\u0000\u0000\u0000\u1918\u1913\u0001\u0000\u0000\u0000\u1918\u1915"+
		"\u0001\u0000\u0000\u0000\u1919\u191a\u0001\u0000\u0000\u0000\u191a\u191b"+
		"\u0005P\u0000\u0000\u191b\u191c\u0005W\u0000\u0000\u191c\u197b\u0005\u00a5"+
		"\u0000\u0000\u191d\u191e\u0005e\u0000\u0000\u191e\u191f\u0005\u01e5\u0000"+
		"\u0000\u191f\u197b\u0003\u00fc~\u0000\u1920\u1921\u0005\u01c0\u0000\u0000"+
		"\u1921\u1922\u0005\u011d\u0000\u0000\u1922\u1923\u0005\u0157\u0000\u0000"+
		"\u1923\u1924\u0003\u00f4z\u0000\u1924\u192b\u0001\u0000\u0000\u0000\u1925"+
		"\u1926\u0005$\u0000\u0000\u1926\u1927\u0005\u011d\u0000\u0000\u1927\u1928"+
		"\u0005\u0157\u0000\u0000\u1928\u192a\u0003\u00f4z\u0000\u1929\u1925\u0001"+
		"\u0000\u0000\u0000\u192a\u192d\u0001\u0000\u0000\u0000\u192b\u1929\u0001"+
		"\u0000\u0000\u0000\u192b\u192c\u0001\u0000\u0000\u0000\u192c\u197b\u0001"+
		"\u0000\u0000\u0000\u192d\u192b\u0001\u0000\u0000\u0000\u192e\u192f\u0005"+
		"\u01c0\u0000\u0000\u192f\u1930\u0005\u00b6\u0000\u0000\u1930\u197b\u0005"+
		"e\u0000\u0000\u1931\u1932\u0005\u01c0\u0000\u0000\u1932\u1933\u0007*\u0000"+
		"\u0000\u1933\u197b\u0005\u0095\u0000\u0000\u1934\u1935\u0005\u01c0\u0000"+
		"\u0000\u1935\u1936\u0005\u00ab\u0000\u0000\u1936\u197b\u0003\u021e\u010f"+
		"\u0000\u1937\u1938\u0005\u01c0\u0000\u0000\u1938\u1939\u0005\u00ad\u0000"+
		"\u0000\u1939\u197b\u0003\u021a\u010d\u0000\u193a\u193b\u0005\u01c0\u0000"+
		"\u0000\u193b\u197b\u0007+\u0000\u0000\u193c\u193d\u0005\u01c0\u0000\u0000"+
		"\u193d\u193e\u0005\u001e\u0000\u0000\u193e\u1943\u0003\u0370\u01b8\u0000"+
		"\u193f\u1940\u0005$\u0000\u0000\u1940\u1942\u0003\u0370\u01b8\u0000\u1941"+
		"\u193f\u0001\u0000\u0000\u0000\u1942\u1945\u0001\u0000\u0000\u0000\u1943"+
		"\u1941\u0001\u0000\u0000\u0000\u1943\u1944\u0001\u0000\u0000\u0000\u1944"+
		"\u1946\u0001\u0000\u0000\u0000\u1945\u1943\u0001\u0000\u0000\u0000\u1946"+
		"\u1947\u0005\u001f\u0000\u0000\u1947\u197b\u0001\u0000\u0000\u0000\u1948"+
		"\u1949\u0005\u01c0\u0000\u0000\u1949\u194a\u0005\u001e\u0000\u0000\u194a"+
		"\u194f\u0003\u0372\u01b9\u0000\u194b";
	private static final String _serializedATNSegment3 =
		"\u194c\u0005$\u0000\u0000\u194c\u194e\u0003\u0372\u01b9\u0000\u194d\u194b"+
		"\u0001\u0000\u0000\u0000\u194e\u1951\u0001\u0000\u0000\u0000\u194f\u194d"+
		"\u0001\u0000\u0000\u0000\u194f\u1950\u0001\u0000\u0000\u0000\u1950\u1952"+
		"\u0001\u0000\u0000\u0000\u1951\u194f\u0001\u0000\u0000\u0000\u1952\u1953"+
		"\u0005\u001f\u0000\u0000\u1953\u197b\u0001\u0000\u0000\u0000\u1954\u1955"+
		"\u0005\u00a0\u0000\u0000\u1955\u1956\u0005\u001e\u0000\u0000\u1956\u195b"+
		"\u0003\u0370\u01b8\u0000\u1957\u1958\u0005$\u0000\u0000\u1958\u195a\u0003"+
		"\u0370\u01b8\u0000\u1959\u1957\u0001\u0000\u0000\u0000\u195a\u195d\u0001"+
		"\u0000\u0000\u0000\u195b\u1959\u0001\u0000\u0000\u0000\u195b\u195c\u0001"+
		"\u0000\u0000\u0000\u195c\u195e\u0001\u0000\u0000\u0000\u195d\u195b\u0001"+
		"\u0000\u0000\u0000\u195e\u195f\u0005\u001f\u0000\u0000\u195f\u197b\u0001"+
		"\u0000\u0000\u0000\u1960\u1961\u0005\u0086\u0000\u0000\u1961\u197b\u0003"+
		"\u00eew\u0000\u1962\u1963\u0005X\u0000\u0000\u1963\u1964\u0005\u0086\u0000"+
		"\u0000\u1964\u197b\u0003\u00eew\u0000\u1965\u1966\u0005\u00b8\u0000\u0000"+
		"\u1966\u197b\u0003\u0214\u010a\u0000\u1967\u1968\u0005\u01ee\u0000\u0000"+
		"\u1968\u197b\u0005\u00b8\u0000\u0000\u1969\u196a\u0005\u0099\u0000\u0000"+
		"\u196a\u196e\u0005\u01ea\u0000\u0000\u196b\u196f\u0003\u021a\u010d\u0000"+
		"\u196c\u196f\u0005\u0220\u0000\u0000\u196d\u196f\u0005\u00a8\u0000\u0000"+
		"\u196e\u196b\u0001\u0000\u0000\u0000\u196e\u196c\u0001\u0000\u0000\u0000"+
		"\u196e\u196d\u0001\u0000\u0000\u0000\u196f\u197b\u0001\u0000\u0000\u0000"+
		"\u1970\u1971\u0005\u009f\u0000\u0000\u1971\u1978\u0005\u0081\u0000\u0000"+
		"\u1972\u1979\u0005\u0217\u0000\u0000\u1973\u1974\u0005\u01e2\u0000\u0000"+
		"\u1974\u1975\u0005\u01c3\u0000\u0000\u1975\u1979\u0003\u00fc~\u0000\u1976"+
		"\u1979\u0005\u01dc\u0000\u0000\u1977\u1979\u0005\u0092\u0000\u0000\u1978"+
		"\u1972\u0001\u0000\u0000\u0000\u1978\u1973\u0001\u0000\u0000\u0000\u1978"+
		"\u1976\u0001\u0000\u0000\u0000\u1978\u1977\u0001\u0000\u0000\u0000\u1979"+
		"\u197b\u0001\u0000\u0000\u0000\u197a\u18bd\u0001\u0000\u0000\u0000\u197a"+
		"\u18be\u0001\u0000\u0000\u0000\u197a\u18bf\u0001\u0000\u0000\u0000\u197a"+
		"\u18c0\u0001\u0000\u0000\u0000\u197a\u18c1\u0001\u0000\u0000\u0000\u197a"+
		"\u18c2\u0001\u0000\u0000\u0000\u197a\u18c3\u0001\u0000\u0000\u0000\u197a"+
		"\u18c4\u0001\u0000\u0000\u0000\u197a\u18cd\u0001\u0000\u0000\u0000\u197a"+
		"\u18d5\u0001\u0000\u0000\u0000\u197a\u18dd\u0001\u0000\u0000\u0000\u197a"+
		"\u18e5\u0001\u0000\u0000\u0000\u197a\u18ee\u0001\u0000\u0000\u0000\u197a"+
		"\u18f6\u0001\u0000\u0000\u0000\u197a\u1900\u0001\u0000\u0000\u0000\u197a"+
		"\u1907\u0001\u0000\u0000\u0000\u197a\u190b\u0001\u0000\u0000\u0000\u197a"+
		"\u190e\u0001\u0000\u0000\u0000\u197a\u1918\u0001\u0000\u0000\u0000\u197a"+
		"\u191d\u0001\u0000\u0000\u0000\u197a\u1920\u0001\u0000\u0000\u0000\u197a"+
		"\u192e\u0001\u0000\u0000\u0000\u197a\u1931\u0001\u0000\u0000\u0000\u197a"+
		"\u1934\u0001\u0000\u0000\u0000\u197a\u1937\u0001\u0000\u0000\u0000\u197a"+
		"\u193a\u0001\u0000\u0000\u0000\u197a\u193c\u0001\u0000\u0000\u0000\u197a"+
		"\u1948\u0001\u0000\u0000\u0000\u197a\u1954\u0001\u0000\u0000\u0000\u197a"+
		"\u1960\u0001\u0000\u0000\u0000\u197a\u1962\u0001\u0000\u0000\u0000\u197a"+
		"\u1965\u0001\u0000\u0000\u0000\u197a\u1967\u0001\u0000\u0000\u0000\u197a"+
		"\u1969\u0001\u0000\u0000\u0000\u197a\u1970\u0001\u0000\u0000\u0000\u197b"+
		"\u0357\u0001\u0000\u0000\u0000\u197c\u197e\u0005\u01bf\u0000\u0000\u197d"+
		"\u197f\u0005\u01c2\u0000\u0000\u197e\u197d\u0001\u0000\u0000\u0000\u197e"+
		"\u197f\u0001\u0000\u0000\u0000\u197f\u1981\u0001\u0000\u0000\u0000\u1980"+
		"\u1982\u0003\u029e\u014f\u0000\u1981\u1980\u0001\u0000\u0000\u0000\u1981"+
		"\u1982\u0001\u0000\u0000\u0000\u1982\u1983\u0001\u0000\u0000\u0000\u1983"+
		"\u1984\u0003\u030c\u0186\u0000\u1984\u0359\u0001\u0000\u0000\u0000\u1985"+
		"\u1987\u0005\u01ba\u0000\u0000\u1986\u1988\u0005\u01c2\u0000\u0000\u1987"+
		"\u1986\u0001\u0000\u0000\u0000\u1987\u1988\u0001\u0000\u0000\u0000\u1988"+
		"\u198a\u0001\u0000\u0000\u0000\u1989\u198b\u0003\u02a0\u0150\u0000\u198a"+
		"\u1989\u0001\u0000\u0000\u0000\u198a\u198b\u0001\u0000\u0000\u0000\u198b"+
		"\u198c\u0001\u0000\u0000\u0000\u198c\u198e\u0003\u00f0x\u0000\u198d\u198f"+
		"\u0007\u001e\u0000\u0000\u198e\u198d\u0001\u0000\u0000\u0000\u198e\u198f"+
		"\u0001\u0000\u0000\u0000\u198f\u035b\u0001\u0000\u0000\u0000\u1990\u1993"+
		"\u0003\u035e\u01af\u0000\u1991\u1992\u0005\u01c0\u0000\u0000\u1992\u1994"+
		"\u0005o\u0000\u0000\u1993\u1991\u0001\u0000\u0000\u0000\u1993\u1994\u0001"+
		"\u0000\u0000\u0000\u1994\u1995\u0001\u0000\u0000\u0000\u1995\u1996\u0005"+
		"\u022d\u0000\u0000\u1996\u1998\u0003\u0212\u0109\u0000\u1997\u1999\u0003"+
		"\u01de\u00ef\u0000\u1998\u1997\u0001\u0000\u0000\u0000\u1998\u1999\u0001"+
		"\u0000\u0000\u0000\u1999\u199c\u0001\u0000\u0000\u0000\u199a\u199b\u0005"+
		"\u01e2\u0000\u0000\u199b\u199d\u0003\u010c\u0086\u0000\u199c\u199a\u0001"+
		"\u0000\u0000\u0000\u199c\u199d\u0001\u0000\u0000\u0000\u199d\u19e1\u0001"+
		"\u0000\u0000\u0000\u199e\u199f\u0003\u035e\u01af\u0000\u199f\u19a0\u0005"+
		"\u01c0\u0000\u0000\u19a0\u19a1\u0005\u0217\u0000\u0000\u19a1\u19a2\u0003"+
		"\u010c\u0086\u0000\u19a2\u19e1\u0001\u0000\u0000\u0000\u19a3\u19a4\u0003"+
		"\u035e\u01af\u0000\u19a4\u19a5\u0005\u01ba\u0000\u0000\u19a5\u19a6\u0005"+
		"\u0217\u0000\u0000\u19a6\u19e1\u0001\u0000\u0000\u0000\u19a7\u19a8\u0003"+
		"\u035e\u01af\u0000\u19a8\u19a9\u0007,\u0000\u0000\u19a9\u19aa\u0005\u01ee"+
		"\u0000\u0000\u19aa\u19ab\u0005\u01ef\u0000\u0000\u19ab\u19e1\u0001\u0000"+
		"\u0000\u0000\u19ac\u19ad\u0003\u035e\u01af\u0000\u19ad\u19ae\u0005\u01bf"+
		"\u0000\u0000\u19ae\u19b2\u0005U\u0000\u0000\u19af\u19b3\u0005R\u0000\u0000"+
		"\u19b0\u19b1\u0005\u01f9\u0000\u0000\u19b1\u19b3\u0005\u0217\u0000\u0000"+
		"\u19b2\u19af\u0001\u0000\u0000\u0000\u19b2\u19b0\u0001\u0000\u0000\u0000"+
		"\u19b3\u19b4\u0001\u0000\u0000\u0000\u19b4\u19b5\u0005\u01e4\u0000\u0000"+
		"\u19b5\u19ba\u0005\u0081\u0000\u0000\u19b6\u19b7\u0005\u001e\u0000\u0000"+
		"\u19b7\u19b8\u0003\u0318\u018c\u0000\u19b8\u19b9\u0005\u001f\u0000\u0000"+
		"\u19b9\u19bb\u0001\u0000\u0000\u0000\u19ba\u19b6\u0001\u0000\u0000\u0000"+
		"\u19ba\u19bb\u0001\u0000\u0000\u0000\u19bb\u19e1\u0001\u0000\u0000\u0000"+
		"\u19bc\u19bd\u0003\u035e\u01af\u0000\u19bd\u19c1\u0003\u0360\u01b0\u0000"+
		"\u19be\u19c0\u0003\u0360\u01b0\u0000\u19bf\u19be\u0001\u0000\u0000\u0000"+
		"\u19c0\u19c3\u0001\u0000\u0000\u0000\u19c1\u19bf\u0001\u0000\u0000\u0000"+
		"\u19c1\u19c2\u0001\u0000\u0000\u0000\u19c2\u19e1\u0001\u0000\u0000\u0000"+
		"\u19c3\u19c1\u0001\u0000\u0000\u0000\u19c4\u19c5\u0003\u035e\u01af\u0000"+
		"\u19c5\u19c6\u0005\u01ba\u0000\u0000\u19c6\u19c8\u0005\u0081\u0000\u0000"+
		"\u19c7\u19c9\u0003\u02a0\u0150\u0000\u19c8\u19c7\u0001\u0000\u0000\u0000"+
		"\u19c8\u19c9\u0001\u0000\u0000\u0000\u19c9\u19e1\u0001\u0000\u0000\u0000"+
		"\u19ca\u19cb\u0003\u035e\u01af\u0000\u19cb\u19cc\u0005\u01c0\u0000\u0000"+
		"\u19cc\u19cd\u0005\u00ab\u0000\u0000\u19cd\u19ce\u0005\u0250\u0000\u0000"+
		"\u19ce\u19e1\u0001\u0000\u0000\u0000\u19cf\u19d0\u0003\u035e\u01af\u0000"+
		"\u19d0\u19d1\u0005\u01c0\u0000\u0000\u19d1\u19d2\u0005\u001e\u0000\u0000"+
		"\u19d2\u19d3\u0003\u0362\u01b1\u0000\u19d3\u19d4\u0005\u001f\u0000\u0000"+
		"\u19d4\u19e1\u0001\u0000\u0000\u0000\u19d5\u19d6\u0003\u035e\u01af\u0000"+
		"\u19d6\u19d7\u0005\u00a0\u0000\u0000\u19d7\u19d8\u0005\u001e\u0000\u0000"+
		"\u19d8\u19d9\u0003\u0362\u01b1\u0000\u19d9\u19da\u0005\u001f\u0000\u0000"+
		"\u19da\u19e1\u0001\u0000\u0000\u0000\u19db\u19dc\u0003\u035e\u01af\u0000"+
		"\u19dc\u19dd\u0005\u01c0\u0000\u0000\u19dd\u19de\u0005\u00ac\u0000\u0000"+
		"\u19de\u19df\u0007-\u0000\u0000\u19df\u19e1\u0001\u0000\u0000\u0000\u19e0"+
		"\u1990\u0001\u0000\u0000\u0000\u19e0\u199e\u0001\u0000\u0000\u0000\u19e0"+
		"\u19a3\u0001\u0000\u0000\u0000\u19e0\u19a7\u0001\u0000\u0000\u0000\u19e0"+
		"\u19ac\u0001\u0000\u0000\u0000\u19e0\u19bc\u0001\u0000\u0000\u0000\u19e0"+
		"\u19c4\u0001\u0000\u0000\u0000\u19e0\u19ca\u0001\u0000\u0000\u0000\u19e0"+
		"\u19cf\u0001\u0000\u0000\u0000\u19e0\u19d5\u0001\u0000\u0000\u0000\u19e0"+
		"\u19db\u0001\u0000\u0000\u0000\u19e1\u035d\u0001\u0000\u0000\u0000\u19e2"+
		"\u19e4\u0005\u01b9\u0000\u0000\u19e3\u19e5\u0005\u01c2\u0000\u0000\u19e4"+
		"\u19e3\u0001\u0000\u0000\u0000\u19e4\u19e5\u0001\u0000\u0000\u0000\u19e5"+
		"\u19e6\u0001\u0000\u0000\u0000\u19e6\u19e7\u0003\u00f0x\u0000\u19e7\u035f"+
		"\u0001\u0000\u0000\u0000\u19e8\u19f0\u0005\u01c0\u0000\u0000\u19e9\u19ed"+
		"\u0005U\u0000\u0000\u19ea\u19ee\u0005R\u0000\u0000\u19eb\u19ec\u0005\u01f9"+
		"\u0000\u0000\u19ec\u19ee\u0005\u0217\u0000\u0000\u19ed\u19ea\u0001\u0000"+
		"\u0000\u0000\u19ed\u19eb\u0001\u0000\u0000\u0000\u19ee\u19f1\u0001\u0000"+
		"\u0000\u0000\u19ef\u19f1\u0003\u031a\u018d\u0000\u19f0\u19e9\u0001\u0000"+
		"\u0000\u0000\u19f0\u19ef\u0001\u0000\u0000\u0000\u19f1\u19fa\u0001\u0000"+
		"\u0000\u0000\u19f2\u19f7\u0005\u00a1\u0000\u0000\u19f3\u19f5\u0005\u01d1"+
		"\u0000\u0000\u19f4\u19f3\u0001\u0000\u0000\u0000\u19f4\u19f5\u0001\u0000"+
		"\u0000\u0000\u19f5\u19f6\u0001\u0000\u0000\u0000\u19f6\u19f8\u0005\u0250"+
		"\u0000\u0000\u19f7\u19f4\u0001\u0000\u0000\u0000\u19f7\u19f8\u0001\u0000"+
		"\u0000\u0000\u19f8\u19fa\u0001\u0000\u0000\u0000\u19f9\u19e8\u0001\u0000"+
		"\u0000\u0000\u19f9\u19f2\u0001\u0000\u0000\u0000\u19fa\u0361\u0001\u0000"+
		"\u0000\u0000\u19fb\u1a00\u0003\u0364\u01b2\u0000\u19fc\u19fd\u0005$\u0000"+
		"\u0000\u19fd\u19ff\u0003\u0364\u01b2\u0000\u19fe\u19fc\u0001\u0000\u0000"+
		"\u0000\u19ff\u1a02\u0001\u0000\u0000\u0000\u1a00\u19fe\u0001\u0000\u0000"+
		"\u0000\u1a00\u1a01\u0001\u0000\u0000\u0000\u1a01\u0363\u0001\u0000\u0000"+
		"\u0000\u1a02\u1a00\u0001\u0000\u0000\u0000\u1a03\u1a04\u0005\u024e\u0000"+
		"\u0000\u1a04\u1a05\u0005\u0016\u0000\u0000\u1a05\u1a06\u0003\u010c\u0086"+
		"\u0000\u1a06\u0365\u0001\u0000\u0000\u0000\u1a07\u1a0e\u0005\u01bf\u0000"+
		"\u0000\u1a08\u1a0b\u0003\u0324\u0192\u0000\u1a09\u1a0a\u0005\u01ee\u0000"+
		"\u0000\u1a0a\u1a0c\u0005\u00b3\u0000\u0000\u1a0b\u1a09\u0001\u0000\u0000"+
		"\u0000\u1a0b\u1a0c\u0001\u0000\u0000\u0000\u1a0c\u1a0f\u0001\u0000\u0000"+
		"\u0000\u1a0d\u1a0f\u0003\u0368\u01b4\u0000\u1a0e\u1a08\u0001\u0000\u0000"+
		"\u0000\u1a0e\u1a0d\u0001\u0000\u0000\u0000\u1a0f\u0367\u0001\u0000\u0000"+
		"\u0000\u1a10\u1a11\u0005\u01c4\u0000\u0000\u1a11\u1a13\u0003\u00fe\u007f"+
		"\u0000\u1a12\u1a10\u0001\u0000\u0000\u0000\u1a12\u1a13\u0001\u0000\u0000"+
		"\u0000\u1a13\u1a16\u0001\u0000\u0000\u0000\u1a14\u1a17\u0005\u01c6\u0000"+
		"\u0000\u1a15\u1a17\u0003\u0100\u0080\u0000\u1a16\u1a14\u0001\u0000\u0000"+
		"\u0000\u1a16\u1a15\u0001\u0000\u0000\u0000\u1a17\u1a18\u0001\u0000\u0000"+
		"\u0000\u1a18\u1a19\u0005\u01e2\u0000\u0000\u1a19\u1a1a\u0005\u01c3\u0000"+
		"\u0000\u1a1a\u1a1b\u0003\u00fc~\u0000\u1a1b\u1a1c\u0003\u0320\u0190\u0000"+
		"\u1a1c\u0369\u0001\u0000\u0000\u0000\u1a1d\u1a1e\u0005\u01b9\u0000\u0000"+
		"\u1a1e\u1a1f\u0005\u01c4\u0000\u0000\u1a1f\u1a20\u0003\u00fe\u007f\u0000"+
		"\u1a20\u1a21\u0003\u0320\u0190\u0000\u1a21\u036b\u0001\u0000\u0000\u0000"+
		"\u1a22\u1a23\u0005\u00b4\u0000\u0000\u1a23\u1a24\u0005\u01c4\u0000\u0000"+
		"\u1a24\u1a25\u0003\u00fe\u007f\u0000\u1a25\u036d\u0001\u0000\u0000\u0000"+
		"\u1a26\u1a27\u0005\u01ba\u0000\u0000\u1a27\u1a29\u0005\u01c4\u0000\u0000"+
		"\u1a28\u1a2a\u0003\u02a0\u0150\u0000\u1a29\u1a28\u0001\u0000\u0000\u0000"+
		"\u1a29\u1a2a\u0001\u0000\u0000\u0000\u1a2a\u1a2b\u0001\u0000\u0000\u0000"+
		"\u1a2b\u1a2d\u0003\u00fe\u007f\u0000\u1a2c\u1a2e\u0007\u001e\u0000\u0000"+
		"\u1a2d\u1a2c\u0001\u0000\u0000\u0000\u1a2d\u1a2e\u0001\u0000\u0000\u0000"+
		"\u1a2e\u036f\u0001\u0000\u0000\u0000\u1a2f\u1a30\u0003\u0372\u01b9\u0000"+
		"\u1a30\u1a31\u0005\u0016\u0000\u0000\u1a31\u1a32\u0003\u010c\u0086\u0000"+
		"\u1a32\u0371\u0001\u0000\u0000\u0000\u1a33\u1a34\u0005\u024e\u0000\u0000"+
		"\u1a34\u0373\u0001\u0000\u0000\u0000\u1a35\u1a37\u0005\u009e\u0000\u0000"+
		"\u1a36\u1a38\u0005\u01c2\u0000\u0000\u1a37\u1a36\u0001\u0000\u0000\u0000"+
		"\u1a37\u1a38\u0001\u0000\u0000\u0000\u1a38\u1a39\u0001\u0000\u0000\u0000"+
		"\u1a39\u1a3a\u0003\u00f0x\u0000\u1a3a\u1a3b\u0005\u01ea\u0000\u0000\u1a3b"+
		"\u1a3c\u0003\u00f0x\u0000\u1a3c\u0375\u0001\u0000\u0000\u0000\u1a3d\u1a3e"+
		"\u0005\u009e\u0000\u0000\u1a3e\u1a3f\u0005\u01c4\u0000\u0000\u1a3f\u1a40"+
		"\u0003\u021a\u010d\u0000\u1a40\u1a41\u0005\u01ea\u0000\u0000\u1a41\u1a42"+
		"\u0003\u021a\u010d\u0000\u1a42\u0377\u0001\u0000\u0000\u0000\u1a43\u1a44"+
		"\u0005\u009e\u0000\u0000\u1a44\u1a45\u0005\u01ea\u0000\u0000\u1a45\u1a46"+
		"\u0003\u00e4r\u0000\u1a46\u0379\u0001\u0000\u0000\u0000\u1a47\u1a4c\u0003"+
		"\u00fc~\u0000\u1a48\u1a49\u0005$\u0000\u0000\u1a49\u1a4b\u0003\u00fc~"+
		"\u0000\u1a4a\u1a48\u0001\u0000\u0000\u0000\u1a4b\u1a4e\u0001\u0000\u0000"+
		"\u0000\u1a4c\u1a4a\u0001\u0000\u0000\u0000\u1a4c\u1a4d\u0001\u0000\u0000"+
		"\u0000\u1a4d\u037b\u0001\u0000\u0000\u0000\u1a4e\u1a4c\u0001\u0000\u0000"+
		"\u0000\u1a4f\u1a50\u0005\u01b9\u0000\u0000\u1a50\u1a51\u0005p\u0000\u0000"+
		"\u1a51\u1a52\u0003\u0226\u0113\u0000\u1a52\u1a53\u0003\u037e\u01bf\u0000"+
		"\u1a53\u037d\u0001\u0000\u0000\u0000\u1a54\u1a56\u0005\u01d1\u0000\u0000"+
		"\u1a55\u1a54\u0001\u0000\u0000\u0000\u1a55\u1a56\u0001\u0000\u0000\u0000"+
		"\u1a56\u1a58\u0001\u0000\u0000\u0000\u1a57\u1a59\u0003\u0380\u01c0\u0000"+
		"\u1a58\u1a57\u0001\u0000\u0000\u0000\u1a58\u1a59\u0001\u0000\u0000\u0000"+
		"\u1a59\u1a65\u0001\u0000\u0000\u0000\u1a5a\u1a5b\u0005\u009e\u0000\u0000"+
		"\u1a5b\u1a5c\u0005\u01ea\u0000\u0000\u1a5c\u1a65\u0003\u0226\u0113\u0000"+
		"\u1a5d\u1a5e\u0005\u0099\u0000\u0000\u1a5e\u1a5f\u0005\u01ea\u0000\u0000"+
		"\u1a5f\u1a65\u0003\u0228\u0114\u0000\u1a60\u1a61\u0005\u01c0\u0000\u0000"+
		"\u1a61\u1a62\u0005\u00ad\u0000\u0000\u1a62\u1a65\u0003\u00f4z\u0000\u1a63"+
		"\u1a65\u0003\u027e\u013f\u0000\u1a64\u1a55\u0001\u0000\u0000\u0000\u1a64"+
		"\u1a5a\u0001\u0000\u0000\u0000\u1a64\u1a5d\u0001\u0000\u0000\u0000\u1a64"+
		"\u1a60\u0001\u0000\u0000\u0000\u1a64\u1a63\u0001\u0000\u0000\u0000\u1a65"+
		"\u037f\u0001\u0000\u0000\u0000\u1a66\u1a68\u0003\u0382\u01c1\u0000\u1a67"+
		"\u1a66\u0001\u0000\u0000\u0000\u1a68\u1a69\u0001\u0000\u0000\u0000\u1a69"+
		"\u1a67\u0001\u0000\u0000\u0000\u1a69\u1a6a\u0001\u0000\u0000\u0000\u1a6a"+
		"\u0381\u0001\u0000\u0000\u0000\u1a6b\u1a6d\u0003\u02f4\u017a\u0000\u1a6c"+
		"\u1a6e\u0005\u0016\u0000\u0000\u1a6d\u1a6c\u0001\u0000\u0000\u0000\u1a6d"+
		"\u1a6e\u0001\u0000\u0000\u0000\u1a6e\u1a6f\u0001\u0000\u0000\u0000\u1a6f"+
		"\u1a70\u0003\u021e\u010f\u0000\u1a70\u1a7e\u0001\u0000\u0000\u0000\u1a71"+
		"\u1a73\u0003\u02f4\u017a\u0000\u1a72\u1a74\u0005\u0016\u0000\u0000\u1a73"+
		"\u1a72\u0001\u0000\u0000\u0000\u1a73\u1a74\u0001\u0000\u0000\u0000\u1a74"+
		"\u1a75\u0001\u0000\u0000\u0000\u1a75\u1a76\u0003\u0220\u0110\u0000\u1a76"+
		"\u1a7e\u0001\u0000\u0000\u0000\u1a77\u1a79\u0003\u02f4\u017a\u0000\u1a78"+
		"\u1a7a\u0005\u0016\u0000\u0000\u1a79\u1a78\u0001\u0000\u0000\u0000\u1a79"+
		"\u1a7a\u0001\u0000\u0000\u0000\u1a7a\u1a7b\u0001\u0000\u0000\u0000\u1a7b"+
		"\u1a7c\u0005\u0217\u0000\u0000\u1a7c\u1a7e\u0001\u0000\u0000\u0000\u1a7d"+
		"\u1a6b\u0001\u0000\u0000\u0000\u1a7d\u1a71\u0001\u0000\u0000\u0000\u1a7d"+
		"\u1a77\u0001\u0000\u0000\u0000\u1a7e\u0383\u0001\u0000\u0000\u0000\u1a7f"+
		"\u1a84\u0003\u0386\u01c3\u0000\u1a80\u1a81\u0005$\u0000\u0000\u1a81\u1a83"+
		"\u0003\u0386\u01c3\u0000\u1a82\u1a80\u0001\u0000\u0000\u0000\u1a83\u1a86"+
		"\u0001\u0000\u0000\u0000\u1a84\u1a82\u0001\u0000\u0000\u0000\u1a84\u1a85"+
		"\u0001\u0000\u0000\u0000\u1a85\u0385\u0001\u0000\u0000\u0000\u1a86\u1a84"+
		"\u0001\u0000\u0000\u0000\u1a87\u1a89\u0005\u01bf\u0000\u0000\u1a88\u1a8a"+
		"\u0005\u01c2\u0000\u0000\u1a89\u1a88\u0001\u0000\u0000\u0000\u1a89\u1a8a"+
		"\u0001\u0000\u0000\u0000\u1a8a\u1a8c\u0001\u0000\u0000\u0000\u1a8b\u1a8d"+
		"\u0003\u029e\u014f\u0000\u1a8c\u1a8b\u0001\u0000\u0000\u0000\u1a8c\u1a8d"+
		"\u0001\u0000\u0000\u0000\u1a8d\u1a8e\u0001\u0000\u0000\u0000\u1a8e\u1ba0"+
		"\u0003\u0236\u011b\u0000\u1a8f\u1a91\u0005\u01b9\u0000\u0000\u1a90\u1a92"+
		"\u0005\u01c2\u0000\u0000\u1a91\u1a90\u0001\u0000\u0000\u0000\u1a91\u1a92"+
		"\u0001\u0000\u0000\u0000\u1a92\u1a93\u0001\u0000\u0000\u0000\u1a93\u1a94"+
		"\u0003\u015c\u00ae\u0000\u1a94\u1a95\u0003\u039e\u01cf\u0000\u1a95\u1ba0"+
		"\u0001\u0000\u0000\u0000\u1a96\u1a98\u0005\u01b9\u0000\u0000\u1a97\u1a99"+
		"\u0005\u01c2\u0000\u0000\u1a98\u1a97\u0001\u0000\u0000\u0000\u1a98\u1a99"+
		"\u0001\u0000\u0000\u0000\u1a99\u1a9a\u0001\u0000\u0000\u0000\u1a9a\u1a9b"+
		"\u0003\u015c\u00ae\u0000\u1a9b\u1a9c\u0005\u01ba\u0000\u0000\u1a9c\u1a9d"+
		"\u0005\u01ee\u0000\u0000\u1a9d\u1a9e\u0005\u01ef\u0000\u0000\u1a9e\u1ba0"+
		"\u0001\u0000\u0000\u0000\u1a9f\u1aa1\u0005\u01b9\u0000\u0000\u1aa0\u1aa2"+
		"\u0005\u01c2\u0000\u0000\u1aa1\u1aa0\u0001\u0000\u0000\u0000\u1aa1\u1aa2"+
		"\u0001\u0000\u0000\u0000\u1aa2\u1aa3\u0001\u0000\u0000\u0000\u1aa3\u1aa4"+
		"\u0003\u015c\u00ae\u0000\u1aa4\u1aa5\u0005\u01c0\u0000\u0000\u1aa5\u1aa6"+
		"\u0005\u01ee\u0000\u0000\u1aa6\u1aa7\u0005\u01ef\u0000\u0000\u1aa7\u1ba0"+
		"\u0001\u0000\u0000\u0000\u1aa8\u1aaa\u0005\u01b9\u0000\u0000\u1aa9\u1aab"+
		"\u0005\u01c2\u0000\u0000\u1aaa\u1aa9\u0001\u0000\u0000\u0000\u1aaa\u1aab"+
		"\u0001\u0000\u0000\u0000\u1aab\u1aac\u0001\u0000\u0000\u0000\u1aac\u1aad"+
		"\u0003\u015c\u00ae\u0000\u1aad\u1aae\u0005\u01c0\u0000\u0000\u1aae\u1aaf"+
		"\u0005\u00ab\u0000\u0000\u1aaf\u1ab0\u0003\u021e\u010f\u0000\u1ab0\u1ba0"+
		"\u0001\u0000\u0000\u0000\u1ab1\u1ab3\u0005\u01b9\u0000\u0000\u1ab2\u1ab4"+
		"\u0005\u01c2\u0000\u0000\u1ab3\u1ab2\u0001\u0000\u0000\u0000\u1ab3\u1ab4"+
		"\u0001\u0000\u0000\u0000\u1ab4\u1ab5\u0001\u0000\u0000\u0000\u1ab5\u1ab6"+
		"\u0005\u0250\u0000\u0000\u1ab6\u1ab7\u0005\u01c0\u0000\u0000\u1ab7\u1ab8"+
		"\u0005\u00ab\u0000\u0000\u1ab8\u1ba0\u0003\u021e\u010f\u0000\u1ab9\u1abb"+
		"\u0005\u01b9\u0000\u0000\u1aba\u1abc\u0005\u01c2\u0000\u0000\u1abb\u1aba"+
		"\u0001\u0000\u0000\u0000\u1abb\u1abc\u0001\u0000\u0000\u0000\u1abc\u1abd"+
		"\u0001\u0000\u0000\u0000\u1abd\u1abe\u0003\u015c\u00ae\u0000\u1abe\u1abf"+
		"\u0005\u01c0\u0000\u0000\u1abf\u1ac0\u0003\u0208\u0104\u0000\u1ac0\u1ba0"+
		"\u0001\u0000\u0000\u0000\u1ac1\u1ac3\u0005\u01b9\u0000\u0000\u1ac2\u1ac4"+
		"\u0005\u01c2\u0000\u0000\u1ac3\u1ac2\u0001\u0000\u0000\u0000\u1ac3\u1ac4"+
		"\u0001\u0000\u0000\u0000\u1ac4\u1ac5\u0001\u0000\u0000\u0000\u1ac5\u1ac6"+
		"\u0003\u015c\u00ae\u0000\u1ac6\u1ac7\u0005\u00a0\u0000\u0000\u1ac7\u1ac8"+
		"\u0003\u0208\u0104\u0000\u1ac8\u1ba0\u0001\u0000\u0000\u0000\u1ac9\u1acb"+
		"\u0005\u01b9\u0000\u0000\u1aca\u1acc\u0005\u01c2\u0000\u0000\u1acb\u1aca"+
		"\u0001\u0000\u0000\u0000\u1acb\u1acc\u0001\u0000\u0000\u0000\u1acc\u1acd"+
		"\u0001\u0000\u0000\u0000\u1acd\u1ace\u0003\u015c\u00ae\u0000\u1ace\u1acf"+
		"\u0005\u01c0\u0000\u0000\u1acf\u1ad0\u0005\u00ac\u0000\u0000\u1ad0\u1ad1"+
		"\u0003\u015c\u00ae\u0000\u1ad1\u1ba0\u0001\u0000\u0000\u0000\u1ad2\u1ad4"+
		"\u0005\u01b9\u0000\u0000\u1ad3\u1ad5\u0005\u01c2\u0000\u0000\u1ad4\u1ad3"+
		"\u0001\u0000\u0000\u0000\u1ad4\u1ad5\u0001\u0000\u0000\u0000\u1ad5\u1ad6"+
		"\u0001\u0000\u0000\u0000\u1ad6\u1ad7\u0003\u015c\u00ae\u0000\u1ad7\u1ad8"+
		"\u0005\u01c0\u0000\u0000\u1ad8\u1ad9\u0003\u0388\u01c4\u0000\u1ad9\u1ba0"+
		"\u0001\u0000\u0000\u0000\u1ada\u1adc\u0005\u01b9\u0000\u0000\u1adb\u1add"+
		"\u0005\u01c2\u0000\u0000\u1adc\u1adb\u0001\u0000\u0000\u0000\u1adc\u1add"+
		"\u0001\u0000\u0000\u0000\u1add\u1ade\u0001\u0000\u0000\u0000\u1ade\u1adf"+
		"\u0003\u015c\u00ae\u0000\u1adf\u1ae0\u0005\u01bf\u0000\u0000\u1ae0\u1ae1"+
		"\u0005U\u0000\u0000\u1ae1\u1ae2\u0003\u024c\u0126\u0000\u1ae2\u1ae3\u0005"+
		"\u01e4\u0000\u0000\u1ae3\u1ae5\u0005\u0081\u0000\u0000\u1ae4\u1ae6\u0003"+
		"\u0240\u0120\u0000\u1ae5\u1ae4\u0001\u0000\u0000\u0000\u1ae5\u1ae6\u0001"+
		"\u0000\u0000\u0000\u1ae6\u1ba0\u0001\u0000\u0000\u0000\u1ae7\u1ae9\u0005"+
		"\u01b9\u0000\u0000\u1ae8\u1aea\u0005\u01c2\u0000\u0000\u1ae9\u1ae8\u0001"+
		"\u0000\u0000\u0000\u1ae9\u1aea\u0001\u0000\u0000\u0000\u1aea\u1aeb\u0001"+
		"\u0000\u0000\u0000\u1aeb\u1aec\u0003\u015c\u00ae\u0000\u1aec\u1aed\u0003"+
		"\u039a\u01cd\u0000\u1aed\u1ba0\u0001\u0000\u0000\u0000\u1aee\u1af0\u0005"+
		"\u01b9\u0000\u0000\u1aef\u1af1\u0005\u01c2\u0000\u0000\u1af0\u1aef\u0001"+
		"\u0000\u0000\u0000\u1af0\u1af1\u0001\u0000\u0000\u0000\u1af1\u1af2\u0001"+
		"\u0000\u0000\u0000\u1af2\u1af3\u0003\u015c\u00ae\u0000\u1af3\u1af4\u0005"+
		"\u01ba\u0000\u0000\u1af4\u1af5\u0005\u0081\u0000\u0000\u1af5\u1ba0\u0001"+
		"\u0000\u0000\u0000\u1af6\u1af8\u0005\u01b9\u0000\u0000\u1af7\u1af9\u0005"+
		"\u01c2\u0000\u0000\u1af8\u1af7\u0001\u0000\u0000\u0000\u1af8\u1af9\u0001"+
		"\u0000\u0000\u0000\u1af9\u1afa\u0001\u0000\u0000\u0000\u1afa\u1afb\u0003"+
		"\u015c\u00ae\u0000\u1afb\u1afc\u0005\u01ba\u0000\u0000\u1afc\u1afd\u0005"+
		"\u0081\u0000\u0000\u1afd\u1afe\u0003\u02a0\u0150\u0000\u1afe\u1ba0\u0001"+
		"\u0000\u0000\u0000\u1aff\u1b01\u0005\u01ba\u0000\u0000\u1b00\u1b02\u0005"+
		"\u01c2\u0000\u0000\u1b01\u1b00\u0001\u0000\u0000\u0000\u1b01\u1b02\u0001"+
		"\u0000\u0000\u0000\u1b02\u1b03\u0001\u0000\u0000\u0000\u1b03\u1b04\u0003"+
		"\u02a0\u0150\u0000\u1b04\u1b06\u0003\u015c\u00ae\u0000\u1b05\u1b07\u0003"+
		"\u0394\u01ca\u0000\u1b06\u1b05\u0001\u0000\u0000\u0000\u1b06\u1b07\u0001"+
		"\u0000\u0000\u0000\u1b07\u1ba0\u0001\u0000\u0000\u0000\u1b08\u1b0a\u0005"+
		"\u01ba\u0000\u0000\u1b09\u1b0b\u0005\u01c2\u0000\u0000\u1b0a\u1b09\u0001"+
		"\u0000\u0000\u0000\u1b0a\u1b0b\u0001\u0000\u0000\u0000\u1b0b\u1b0c\u0001"+
		"\u0000\u0000\u0000\u1b0c\u1b0e\u0003\u015c\u00ae\u0000\u1b0d\u1b0f\u0003"+
		"\u0394\u01ca\u0000\u1b0e\u1b0d\u0001\u0000\u0000\u0000\u1b0e\u1b0f\u0001"+
		"\u0000\u0000\u0000\u1b0f\u1ba0\u0001\u0000\u0000\u0000\u1b10\u1b12\u0005"+
		"\u01b9\u0000\u0000\u1b11\u1b13\u0005\u01c2\u0000\u0000\u1b12\u1b11\u0001"+
		"\u0000\u0000\u0000\u1b12\u1b13\u0001\u0000\u0000\u0000\u1b13\u1b14\u0001"+
		"\u0000\u0000\u0000\u1b14\u1b16\u0003\u015c\u00ae\u0000\u1b15\u1b17\u0003"+
		"\u0398\u01cc\u0000\u1b16\u1b15\u0001\u0000\u0000\u0000\u1b16\u1b17\u0001"+
		"\u0000\u0000\u0000\u1b17\u1b18\u0001\u0000\u0000\u0000\u1b18\u1b19\u0005"+
		"\u022d\u0000\u0000\u1b19\u1b1b\u0003\u017e\u00bf\u0000\u1b1a\u1b1c\u0003"+
		"\u01de\u00ef\u0000\u1b1b\u1b1a\u0001\u0000\u0000\u0000\u1b1b\u1b1c\u0001"+
		"\u0000\u0000\u0000\u1b1c\u1b1e\u0001\u0000\u0000\u0000\u1b1d\u1b1f\u0003"+
		"\u0396\u01cb\u0000\u1b1e\u1b1d\u0001\u0000\u0000\u0000\u1b1e\u1b1f\u0001"+
		"\u0000\u0000\u0000\u1b1f\u1ba0\u0001\u0000\u0000\u0000\u1b20\u1b22\u0005"+
		"\u01b9\u0000\u0000\u1b21\u1b23\u0005\u01c2\u0000\u0000\u1b22\u1b21\u0001"+
		"\u0000\u0000\u0000\u1b22\u1b23\u0001\u0000\u0000\u0000\u1b23\u1b24\u0001"+
		"\u0000\u0000\u0000\u1b24\u1b25\u0003\u015c\u00ae\u0000\u1b25\u1b26\u0003"+
		"\u038e\u01c7\u0000\u1b26\u1ba0\u0001\u0000\u0000\u0000\u1b27\u1b28\u0005"+
		"\u01bf\u0000\u0000\u1b28\u1b2b\u0003\u0324\u0192\u0000\u1b29\u1b2a\u0005"+
		"\u01ee\u0000\u0000\u1b2a\u1b2c\u0005\u00b3\u0000\u0000\u1b2b\u1b29\u0001"+
		"\u0000\u0000\u0000\u1b2b\u1b2c\u0001\u0000\u0000\u0000\u1b2c\u1ba0\u0001"+
		"\u0000\u0000\u0000\u1b2d\u1b2e\u0005\u01b9\u0000\u0000\u1b2e\u1b2f\u0005"+
		"\u01c4\u0000\u0000\u1b2f\u1b30\u0003\u00f4z\u0000\u1b30\u1b31\u0003\u038a"+
		"\u01c5\u0000\u1b31\u1ba0\u0001\u0000\u0000\u0000\u1b32\u1b33\u0005\u00b4"+
		"\u0000\u0000\u1b33\u1b34\u0005\u01c4\u0000\u0000\u1b34\u1ba0\u0003\u00f4"+
		"z\u0000\u1b35\u1b36\u0005\u01ba\u0000\u0000\u1b36\u1b37\u0005\u01c4\u0000"+
		"\u0000\u1b37\u1b38\u0003\u02a0\u0150\u0000\u1b38\u1b3a\u0003\u00f4z\u0000"+
		"\u1b39\u1b3b\u0003\u0394\u01ca\u0000\u1b3a\u1b39\u0001\u0000\u0000\u0000"+
		"\u1b3a\u1b3b\u0001\u0000\u0000\u0000\u1b3b\u1ba0\u0001\u0000\u0000\u0000"+
		"\u1b3c\u1b3d\u0005\u01ba\u0000\u0000\u1b3d\u1b3e\u0005\u01c4\u0000\u0000"+
		"\u1b3e\u1b40\u0003\u00f4z\u0000\u1b3f\u1b41\u0003\u0394\u01ca\u0000\u1b40"+
		"\u1b3f\u0001\u0000\u0000\u0000\u1b40\u1b41\u0001\u0000\u0000\u0000\u1b41"+
		"\u1ba0\u0001\u0000\u0000\u0000\u1b42\u1b43\u0005\u01c0\u0000\u0000\u1b43"+
		"\u1b44\u0005\u00b6\u0000\u0000\u1b44\u1ba0\u0005\u0095\u0000\u0000\u1b45"+
		"\u1b46\u0005e\u0000\u0000\u1b46\u1b47\u0005\u01e5\u0000\u0000\u1b47\u1ba0"+
		"\u0003\u00f4z\u0000\u1b48\u1b49\u0005\u01c0\u0000\u0000\u1b49\u1b4a\u0005"+
		"\u00b6\u0000\u0000\u1b4a\u1ba0\u0005e\u0000\u0000\u1b4b\u1b4c\u0005\u01c0"+
		"\u0000\u0000\u1b4c\u1ba0\u0005\u008d\u0000\u0000\u1b4d\u1b4e\u0005\u01c0"+
		"\u0000\u0000\u1b4e\u1ba0\u0005\u00b1\u0000\u0000\u1b4f\u1b50\u0005\u0219"+
		"\u0000\u0000\u1b50\u1b51\u0005\u01cc\u0000\u0000\u1b51\u1ba0\u0003\u00f4"+
		"z\u0000\u1b52\u1b53\u0005\u0219\u0000\u0000\u1b53\u1b54\u0005R\u0000\u0000"+
		"\u1b54\u1b55\u0005\u01cc\u0000\u0000\u1b55\u1ba0\u0003\u00f4z\u0000\u1b56"+
		"\u1b57\u0005\u0219\u0000\u0000\u1b57\u1b58\u0005\u009f\u0000\u0000\u1b58"+
		"\u1b59\u0005\u01cc\u0000\u0000\u1b59\u1ba0\u0003\u00f4z\u0000\u1b5a\u1b5b"+
		"\u0005\u0219\u0000\u0000\u1b5b\u1b5c\u0005\u01cc\u0000\u0000\u1b5c\u1ba0"+
		"\u0005\u01f4\u0000\u0000\u1b5d\u1b5e\u0005\u0219\u0000\u0000\u1b5e\u1b5f"+
		"\u0005\u01cc\u0000\u0000\u1b5f\u1ba0\u0005a\u0000\u0000\u1b60\u1b61\u0005"+
		"\u021a\u0000\u0000\u1b61\u1b62\u0005\u01cc\u0000\u0000\u1b62\u1ba0\u0003"+
		"\u00f4z\u0000\u1b63\u1b64\u0005\u021a\u0000\u0000\u1b64\u1b65\u0005\u01cc"+
		"\u0000\u0000\u1b65\u1ba0\u0005\u01f4\u0000\u0000\u1b66\u1b67\u0005\u021a"+
		"\u0000\u0000\u1b67\u1b68\u0005\u01cc\u0000\u0000\u1b68\u1ba0\u0005a\u0000"+
		"\u0000\u1b69\u1b6a\u0005\u0219\u0000\u0000\u1b6a\u1b6b\u0005\u00a4\u0000"+
		"\u0000\u1b6b\u1ba0\u0003\u00f4z\u0000\u1b6c\u1b6d\u0005\u0219\u0000\u0000"+
		"\u1b6d\u1b6e\u0005R\u0000\u0000\u1b6e\u1b6f\u0005\u00a4\u0000\u0000\u1b6f"+
		"\u1ba0\u0003\u00f4z\u0000\u1b70\u1b71\u0005\u0219\u0000\u0000\u1b71\u1b72"+
		"\u0005\u009f\u0000\u0000\u1b72\u1b73\u0005\u00a4\u0000\u0000\u1b73\u1ba0"+
		"\u0003\u00f4z\u0000\u1b74\u1b75\u0005\u021a\u0000\u0000\u1b75\u1b76\u0005"+
		"\u00a4\u0000\u0000\u1b76\u1ba0\u0003\u00f4z\u0000\u1b77\u1b78\u0005\u0086"+
		"\u0000\u0000\u1b78\u1ba0\u0003\u015a\u00ad\u0000\u1b79\u1b7a\u0005X\u0000"+
		"\u0000\u1b7a\u1b7b\u0005\u0086\u0000\u0000\u1b7b\u1ba0\u0003\u015a\u00ad"+
		"\u0000\u1b7c\u1b7d\u0005\u00b8\u0000\u0000\u1b7d\u1ba0\u0003\u01e0\u00f0"+
		"\u0000\u1b7e\u1b7f\u0005\u01ee\u0000\u0000\u1b7f\u1ba0\u0005\u00b8\u0000"+
		"\u0000\u1b80\u1b81\u0005\u0099\u0000\u0000\u1b81\u1b82\u0005\u01ea\u0000"+
		"\u0000\u1b82\u1ba0\u0003\u0228\u0114\u0000\u1b83\u1b84\u0005\u01c0\u0000"+
		"\u0000\u1b84\u1b85\u0005\u00ad\u0000\u0000\u1b85\u1ba0\u0003\u00f4z\u0000"+
		"\u1b86\u1b87\u0005\u01c0\u0000\u0000\u1b87\u1ba0\u0003\u0208\u0104\u0000"+
		"\u1b88\u1b89\u0005\u00a0\u0000\u0000\u1b89\u1ba0\u0003\u0208\u0104\u0000"+
		"\u1b8a\u1b8b\u0005\u009f\u0000\u0000\u1b8b\u1b8c\u0005\u0081\u0000\u0000"+
		"\u1b8c\u1ba0\u0003\u026e\u0137\u0000\u1b8d\u1b8e\u0005\u0219\u0000\u0000"+
		"\u1b8e\u1b8f\u0005P\u0000\u0000\u1b8f\u1b90\u0005W\u0000\u0000\u1b90\u1ba0"+
		"\u0005\u00a5\u0000\u0000\u1b91\u1b92\u0005\u021a\u0000\u0000\u1b92\u1b93"+
		"\u0005P\u0000\u0000\u1b93\u1b94\u0005W\u0000\u0000\u1b94\u1ba0\u0005\u00a5"+
		"\u0000\u0000\u1b95\u1b96\u0005\u007f\u0000\u0000\u1b96\u1b97\u0005P\u0000"+
		"\u0000\u1b97\u1b98\u0005W\u0000\u0000\u1b98\u1ba0\u0005\u00a5\u0000\u0000"+
		"\u1b99\u1b9a\u0005X\u0000\u0000\u1b9a\u1b9b\u0005\u007f\u0000\u0000\u1b9b"+
		"\u1b9c\u0005P\u0000\u0000\u1b9c\u1b9d\u0005W\u0000\u0000\u1b9d\u1ba0\u0005"+
		"\u00a5\u0000\u0000\u1b9e\u1ba0\u0003\u038e\u01c7\u0000\u1b9f\u1a87\u0001"+
		"\u0000\u0000\u0000\u1b9f\u1a8f\u0001\u0000\u0000\u0000\u1b9f\u1a96\u0001"+
		"\u0000\u0000\u0000\u1b9f\u1a9f\u0001\u0000\u0000\u0000\u1b9f\u1aa8\u0001"+
		"\u0000\u0000\u0000\u1b9f\u1ab1\u0001\u0000\u0000\u0000\u1b9f\u1ab9\u0001"+
		"\u0000\u0000\u0000\u1b9f\u1ac1\u0001\u0000\u0000\u0000\u1b9f\u1ac9\u0001"+
		"\u0000\u0000\u0000\u1b9f\u1ad2\u0001\u0000\u0000\u0000\u1b9f\u1ada\u0001"+
		"\u0000\u0000\u0000\u1b9f\u1ae7\u0001\u0000\u0000\u0000\u1b9f\u1aee\u0001"+
		"\u0000\u0000\u0000\u1b9f\u1af6\u0001\u0000\u0000\u0000\u1b9f\u1aff\u0001"+
		"\u0000\u0000\u0000\u1b9f\u1b08\u0001\u0000\u0000\u0000\u1b9f\u1b10\u0001"+
		"\u0000\u0000\u0000\u1b9f\u1b20\u0001\u0000\u0000\u0000\u1b9f\u1b27\u0001"+
		"\u0000\u0000\u0000\u1b9f\u1b2d\u0001\u0000\u0000\u0000\u1b9f\u1b32\u0001"+
		"\u0000\u0000\u0000\u1b9f\u1b35\u0001\u0000\u0000\u0000\u1b9f\u1b3c\u0001"+
		"\u0000\u0000\u0000\u1b9f\u1b42\u0001\u0000\u0000\u0000\u1b9f\u1b45\u0001"+
		"\u0000\u0000\u0000\u1b9f\u1b48\u0001\u0000\u0000\u0000\u1b9f\u1b4b\u0001"+
		"\u0000\u0000\u0000\u1b9f\u1b4d\u0001\u0000\u0000\u0000\u1b9f\u1b4f\u0001"+
		"\u0000\u0000\u0000\u1b9f\u1b52\u0001\u0000\u0000\u0000\u1b9f\u1b56\u0001"+
		"\u0000\u0000\u0000\u1b9f\u1b5a\u0001\u0000\u0000\u0000\u1b9f\u1b5d\u0001"+
		"\u0000\u0000\u0000\u1b9f\u1b60\u0001\u0000\u0000\u0000\u1b9f\u1b63\u0001"+
		"\u0000\u0000\u0000\u1b9f\u1b66\u0001\u0000\u0000\u0000\u1b9f\u1b69\u0001"+
		"\u0000\u0000\u0000\u1b9f\u1b6c\u0001\u0000\u0000\u0000\u1b9f\u1b70\u0001"+
		"\u0000\u0000\u0000\u1b9f\u1b74\u0001\u0000\u0000\u0000\u1b9f\u1b77\u0001"+
		"\u0000\u0000\u0000\u1b9f\u1b79\u0001\u0000\u0000\u0000\u1b9f\u1b7c\u0001"+
		"\u0000\u0000\u0000\u1b9f\u1b7e\u0001\u0000\u0000\u0000\u1b9f\u1b80\u0001"+
		"\u0000\u0000\u0000\u1b9f\u1b83\u0001\u0000\u0000\u0000\u1b9f\u1b86\u0001"+
		"\u0000\u0000\u0000\u1b9f\u1b88\u0001\u0000\u0000\u0000\u1b9f\u1b8a\u0001"+
		"\u0000\u0000\u0000\u1b9f\u1b8d\u0001\u0000\u0000\u0000\u1b9f\u1b91\u0001"+
		"\u0000\u0000\u0000\u1b9f\u1b95\u0001\u0000\u0000\u0000\u1b9f\u1b99\u0001"+
		"\u0000\u0000\u0000\u1b9f\u1b9e\u0001\u0000\u0000\u0000\u1ba0\u0387\u0001"+
		"\u0000\u0000\u0000\u1ba1\u1ba2\u0005h\u0000\u0000\u1ba2\u1ba6\u0003\u015c"+
		"\u00ae\u0000\u1ba3\u1ba4\u0005h\u0000\u0000\u1ba4\u1ba6\u0005\u0217\u0000"+
		"\u0000\u1ba5\u1ba1\u0001\u0000\u0000\u0000\u1ba5\u1ba3\u0001\u0000\u0000"+
		"\u0000\u1ba6\u0389\u0001\u0000\u0000\u0000\u1ba7\u1ba9\u0003\u038c\u01c6"+
		"\u0000\u1ba8\u1ba7\u0001\u0000\u0000\u0000\u1ba9\u1bac\u0001\u0000\u0000"+
		"\u0000\u1baa\u1ba8\u0001\u0000\u0000\u0000\u1baa\u1bab\u0001\u0000\u0000"+
		"\u0000\u1bab\u038b\u0001\u0000\u0000\u0000\u1bac\u1baa\u0001\u0000\u0000"+
		"\u0000\u1bad\u1bae\u0005\u01ee\u0000\u0000\u1bae\u1bb9\u0005r\u0000\u0000"+
		"\u1baf\u1bb9\u0005r\u0000\u0000\u1bb0\u1bb1\u0005\u0088\u0000\u0000\u1bb1"+
		"\u1bb9\u0005\u0082\u0000\u0000\u1bb2\u1bb3\u0005\u0088\u0000\u0000\u1bb3"+
		"\u1bb9\u0005s\u0000\u0000\u1bb4\u1bb5\u0005\u01ee\u0000\u0000\u1bb5\u1bb9"+
		"\u0005\u00b3\u0000\u0000\u1bb6\u1bb7\u0005X\u0000\u0000\u1bb7\u1bb9\u0005"+
		"\u0086\u0000\u0000\u1bb8\u1bad\u0001\u0000\u0000\u0000\u1bb8\u1baf\u0001"+
		"\u0000\u0000\u0000\u1bb8\u1bb0\u0001\u0000\u0000\u0000\u1bb8\u1bb2\u0001"+
		"\u0000\u0000\u0000\u1bb8\u1bb4\u0001\u0000\u0000\u0000\u1bb8\u1bb6\u0001"+
		"\u0000\u0000\u0000\u1bb9\u038d\u0001\u0000\u0000\u0000\u1bba\u1bbb\u0005"+
		"\u016e\u0000\u0000\u1bbb\u1bbc\u0005\u001e\u0000\u0000\u1bbc\u1bbd\u0003"+
		"\u0390\u01c8\u0000\u1bbd\u1bbe\u0005\u001f\u0000\u0000\u1bbe\u038f\u0001"+
		"\u0000\u0000\u0000\u1bbf\u1bc4\u0003\u0392\u01c9\u0000\u1bc0\u1bc1\u0005"+
		"$\u0000\u0000\u1bc1\u1bc3\u0003\u0392\u01c9\u0000\u1bc2\u1bc0\u0001\u0000"+
		"\u0000\u0000\u1bc3\u1bc6\u0001\u0000\u0000\u0000\u1bc4\u1bc2\u0001\u0000"+
		"\u0000\u0000\u1bc4\u1bc5\u0001\u0000\u0000\u0000\u1bc5\u0391\u0001\u0000"+
		"\u0000\u0000\u1bc6\u1bc4\u0001\u0000\u0000\u0000\u1bc7\u1bcf\u0003\u0268"+
		"\u0134\u0000\u1bc8\u1bc9\u0005\u01c0\u0000\u0000\u1bc9\u1bcf\u0003\u0268"+
		"\u0134\u0000\u1bca\u1bcb\u0005\u01bf\u0000\u0000\u1bcb\u1bcf\u0003\u0268"+
		"\u0134\u0000\u1bcc\u1bcd\u0005\u01ba\u0000\u0000\u1bcd\u1bcf\u0003\u026c"+
		"\u0136\u0000\u1bce\u1bc7\u0001\u0000\u0000\u0000\u1bce\u1bc8\u0001\u0000"+
		"\u0000\u0000\u1bce\u1bca\u0001\u0000\u0000\u0000\u1bce\u1bcc\u0001\u0000"+
		"\u0000\u0000\u1bcf\u0393\u0001\u0000\u0000\u0000\u1bd0\u1bd1\u0007\u001e"+
		"\u0000\u0000\u1bd1\u0395\u0001\u0000\u0000\u0000\u1bd2\u1bd3\u0005\u01e2"+
		"\u0000\u0000\u1bd3\u1bd4\u0003\u010c\u0086\u0000\u1bd4\u0397\u0001\u0000"+
		"\u0000\u0000\u1bd5\u1bd6\u0005\u01c0\u0000\u0000\u1bd6\u1bd7\u0005o\u0000"+
		"\u0000\u1bd7\u0399\u0001\u0000\u0000\u0000\u1bd8\u1bda\u0003\u039c\u01ce"+
		"\u0000\u1bd9\u1bd8\u0001\u0000\u0000\u0000\u1bda\u1bdb\u0001\u0000\u0000"+
		"\u0000\u1bdb\u1bd9\u0001\u0000\u0000\u0000\u1bdb\u1bdc\u0001\u0000\u0000"+
		"\u0000\u1bdc\u039b\u0001\u0000\u0000\u0000\u1bdd\u1be9\u0005\u00a1\u0000"+
		"\u0000\u1bde\u1be0\u0005\u00a1\u0000\u0000\u1bdf\u1be1\u0005\u01d1\u0000"+
		"\u0000\u1be0\u1bdf\u0001\u0000\u0000\u0000\u1be0\u1be1\u0001\u0000\u0000"+
		"\u0000\u1be1\u1be2\u0001\u0000\u0000\u0000\u1be2\u1be9\u0003\u0232\u0119"+
		"\u0000\u1be3\u1be4\u0005\u01c0\u0000\u0000\u1be4\u1be9\u0003\u0244\u0122"+
		"\u0000\u1be5\u1be6\u0005\u01c0\u0000\u0000\u1be6\u1be7\u0005U\u0000\u0000"+
		"\u1be7\u1be9\u0003\u024c\u0126\u0000\u1be8\u1bdd\u0001\u0000\u0000\u0000"+
		"\u1be8\u1bde\u0001\u0000\u0000\u0000\u1be8\u1be3\u0001\u0000\u0000\u0000"+
		"\u1be8\u1be5\u0001\u0000\u0000\u0000\u1be9\u039d\u0001\u0000\u0000\u0000"+
		"\u1bea\u1beb\u0005\u01c0\u0000\u0000\u1beb\u1bec\u0005\u0217\u0000\u0000"+
		"\u1bec\u1bf0\u0003\u010c\u0086\u0000\u1bed\u1bee\u0005\u01ba\u0000\u0000"+
		"\u1bee\u1bf0\u0005\u0217\u0000\u0000\u1bef\u1bea\u0001\u0000\u0000\u0000"+
		"\u1bef\u1bed\u0001\u0000\u0000\u0000\u1bf0\u039f\u0001\u0000\u0000\u0000"+
		"\u1bf1\u1bf2\u0005\u01b9\u0000\u0000\u1bf2\u1bf3\u0005\u00fe\u0000\u0000"+
		"\u1bf3\u1bf4\u0003\u03b0\u01d8\u0000\u1bf4\u03a1\u0001\u0000\u0000\u0000"+
		"\u1bf5\u1bf6\u0005\u01b9\u0000\u0000\u1bf6\u1bf7\u0005\u00fe\u0000\u0000"+
		"\u1bf7\u1bf8\u0005\u0130\u0000\u0000\u1bf8\u1bf9\u0003\u01e0\u00f0\u0000"+
		"\u1bf9\u1bfa\u0005\u01e2\u0000\u0000\u1bfa\u1bfb\u0003\u00f4z\u0000\u1bfb"+
		"\u1bfc\u0003\u03a4\u01d2\u0000\u1bfc\u03a3\u0001\u0000\u0000\u0000\u1bfd"+
		"\u1bfe\u0005\u009e\u0000\u0000\u1bfe\u1bff\u0005\u01ea\u0000\u0000\u1bff"+
		"\u1c07\u0003\u00f4z\u0000\u1c00\u1c01\u0005\u01c0\u0000\u0000\u1c01\u1c02"+
		"\u0005\u01bc\u0000\u0000\u1c02\u1c07\u0003\u00f4z\u0000\u1c03\u1c04\u0005"+
		"\u0099\u0000\u0000\u1c04\u1c05\u0005\u01ea\u0000\u0000\u1c05\u1c07\u0003"+
		"\u0228\u0114\u0000\u1c06\u1bfd\u0001\u0000\u0000\u0000\u1c06\u1c00\u0001"+
		"\u0000\u0000\u0000\u1c06\u1c03\u0001\u0000\u0000\u0000\u1c07\u03a5\u0001"+
		"\u0000\u0000\u0000\u1c08\u1c09\u0005\u01b9\u0000\u0000\u1c09\u1c0a\u0005"+
		"\u00fe\u0000\u0000\u1c0a\u1c0b\u0005\u0149\u0000\u0000\u1c0b\u1c0c\u0003"+
		"\u01e0\u00f0\u0000\u1c0c\u1c0d\u0005\u01e2\u0000\u0000\u1c0d\u1c0e\u0003"+
		"\u00f4z\u0000\u1c0e\u1c0f\u0003\u03a8\u01d4\u0000\u1c0f\u03a7\u0001\u0000"+
		"\u0000\u0000\u1c10\u1c11\u0007.\u0000\u0000\u1c11\u1c14\u0003\u03aa\u01d5"+
		"\u0000\u1c12\u1c14\u0003\u03a4\u01d2\u0000\u1c13\u1c10\u0001\u0000\u0000"+
		"\u0000\u1c13\u1c12\u0001\u0000\u0000\u0000\u1c14\u03a9\u0001\u0000\u0000"+
		"\u0000\u1c15\u1c1a\u0003\u03ac\u01d6\u0000\u1c16\u1c17\u0005$\u0000\u0000"+
		"\u1c17\u1c19\u0003\u03ac\u01d6\u0000\u1c18\u1c16\u0001\u0000\u0000\u0000"+
		"\u1c19\u1c1c\u0001\u0000\u0000\u0000\u1c1a\u1c18\u0001\u0000\u0000\u0000"+
		"\u1c1a\u1c1b\u0001\u0000\u0000\u0000\u1c1b\u03ab\u0001\u0000\u0000\u0000"+
		"\u1c1c\u1c1a\u0001\u0000\u0000\u0000\u1c1d\u1c1e\u0005\u00fe\u0000\u0000"+
		"\u1c1e\u1c1f\u0005\u0250\u0000\u0000\u1c1f\u1c21\u0003\u013a\u009d\u0000"+
		"\u1c20\u1c22\u0003\u03ae\u01d7\u0000\u1c21\u1c20\u0001\u0000\u0000\u0000"+
		"\u1c21\u1c22\u0001\u0000\u0000\u0000\u1c22\u1c24\u0001\u0000\u0000\u0000"+
		"\u1c23\u1c25\u0005\u017b\u0000\u0000\u1c24\u1c23\u0001\u0000\u0000\u0000"+
		"\u1c24\u1c25\u0001\u0000\u0000\u0000\u1c25\u1c3c\u0001\u0000\u0000\u0000"+
		"\u1c26\u1c27\u0005\u00fe\u0000\u0000\u1c27\u1c28\u0005\u0250\u0000\u0000"+
		"\u1c28\u1c2a\u0003\u03b8\u01dc\u0000\u1c29\u1c2b\u0003\u03ae\u01d7\u0000"+
		"\u1c2a\u1c29\u0001\u0000\u0000\u0000\u1c2a\u1c2b\u0001\u0000\u0000\u0000"+
		"\u1c2b\u1c2d\u0001\u0000\u0000\u0000\u1c2c\u1c2e\u0005\u017b\u0000\u0000"+
		"\u1c2d\u1c2c\u0001\u0000\u0000\u0000\u1c2d\u1c2e\u0001\u0000\u0000\u0000"+
		"\u1c2e\u1c3c\u0001\u0000\u0000\u0000\u1c2f\u1c30\u0005\u01cb\u0000\u0000"+
		"\u1c30\u1c31\u0005\u0250\u0000\u0000\u1c31\u1c3c\u0003\u03f4\u01fa\u0000"+
		"\u1c32\u1c33\u0005\u01cb\u0000\u0000\u1c33\u1c34\u0005\u0250\u0000\u0000"+
		"\u1c34\u1c35\u0005\u001e\u0000\u0000\u1c35\u1c36\u0003\u0150\u00a8\u0000"+
		"\u1c36\u1c37\u0005\u001f\u0000\u0000\u1c37\u1c38\u0003\u03f4\u01fa\u0000"+
		"\u1c38\u1c3c\u0001\u0000\u0000\u0000\u1c39\u1c3a\u0005\u00ac\u0000\u0000"+
		"\u1c3a\u1c3c\u0003\u017e\u00bf\u0000\u1c3b\u1c1d\u0001\u0000\u0000\u0000"+
		"\u1c3b\u1c26\u0001\u0000\u0000\u0000\u1c3b\u1c2f\u0001\u0000\u0000\u0000"+
		"\u1c3b\u1c32\u0001\u0000\u0000\u0000\u1c3b\u1c39\u0001\u0000\u0000\u0000"+
		"\u1c3c\u03ad\u0001\u0000\u0000\u0000\u1c3d\u1c3e\u0005\u01e9\u0000\u0000"+
		"\u1c3e\u1c44\u0005\u0179\u0000\u0000\u1c3f\u1c40\u0005\u01e9\u0000\u0000"+
		"\u1c40\u1c41\u0005\u01f7\u0000\u0000\u1c41\u1c42\u0005\u01f9\u0000\u0000"+
		"\u1c42\u1c44\u0003\u01e0\u00f0\u0000\u1c43\u1c3d\u0001\u0000\u0000\u0000"+
		"\u1c43\u1c3f\u0001\u0000\u0000\u0000\u1c44\u03af\u0001\u0000\u0000\u0000"+
		"\u1c45\u1c46\u0003\u03b8\u01dc\u0000\u1c46\u1c47\u0005\u01c0\u0000\u0000"+
		"\u1c47\u1c48\u0005\u01bc\u0000\u0000\u1c48\u1c49\u0003\u00ecv\u0000\u1c49"+
		"\u1c56\u0001\u0000\u0000\u0000\u1c4a\u1c4b\u0003\u03b8\u01dc\u0000\u1c4b"+
		"\u1c4c\u0005\u01c0\u0000\u0000\u1c4c\u1c4d\u0005\u001e\u0000\u0000\u1c4d"+
		"\u1c4e\u0003\u03b2\u01d9\u0000\u1c4e\u1c4f\u0005\u001f\u0000\u0000\u1c4f"+
		"\u1c56\u0001\u0000\u0000\u0000\u1c50\u1c51\u0003\u03b8\u01dc\u0000\u1c51"+
		"\u1c52\u0005\u0099\u0000\u0000\u1c52\u1c53\u0005\u01ea\u0000\u0000\u1c53"+
		"\u1c54\u0003\u0228\u0114\u0000\u1c54\u1c56\u0001\u0000\u0000\u0000\u1c55"+
		"\u1c45\u0001\u0000\u0000\u0000\u1c55\u1c4a\u0001\u0000\u0000\u0000\u1c55"+
		"\u1c50\u0001\u0000\u0000\u0000\u1c56\u03b1\u0001\u0000\u0000\u0000\u1c57"+
		"\u1c5c\u0003\u03b4\u01da\u0000\u1c58\u1c59\u0005$\u0000\u0000\u1c59\u1c5b"+
		"\u0003\u03b4\u01da\u0000\u1c5a\u1c58\u0001\u0000\u0000\u0000\u1c5b\u1c5e"+
		"\u0001\u0000\u0000\u0000\u1c5c\u1c5a\u0001\u0000\u0000\u0000\u1c5c\u1c5d"+
		"\u0001\u0000\u0000\u0000\u1c5d\u03b3\u0001\u0000\u0000\u0000\u1c5e\u1c5c"+
		"\u0001\u0000\u0000\u0000\u1c5f\u1c60\u0007/\u0000\u0000\u1c60\u1c63\u0005"+
		"\u0016\u0000\u0000\u1c61\u1c64\u0005\u0115\u0000\u0000\u1c62\u1c64\u0003"+
		"\u03b6\u01db\u0000\u1c63\u1c61\u0001\u0000\u0000\u0000\u1c63\u1c62\u0001"+
		"\u0000\u0000\u0000\u1c64\u03b5\u0001\u0000\u0000\u0000\u1c65\u1c6b\u0003"+
		"\u0210\u0108\u0000\u1c66\u1c6b\u0003\u00deo\u0000\u1c67\u1c6b\u0003\u0136"+
		"\u009b\u0000\u1c68\u1c6b\u0003\u0232\u0119\u0000\u1c69\u1c6b\u0005\u024f"+
		"\u0000\u0000\u1c6a\u1c65\u0001\u0000\u0000\u0000\u1c6a\u1c66\u0001\u0000"+
		"\u0000\u0000\u1c6a\u1c67\u0001\u0000\u0000\u0000\u1c6a\u1c68\u0001\u0000"+
		"\u0000\u0000\u1c6a\u1c69\u0001\u0000\u0000\u0000\u1c6b\u03b7\u0001\u0000"+
		"\u0000\u0000\u1c6c\u1c6d\u0003\u013a\u009d\u0000\u1c6d\u1c6e\u0003\u0270"+
		"\u0138\u0000\u1c6e\u03b9\u0001\u0000\u0000\u0000\u1c6f\u1c70\u0005\u01b9"+
		"\u0000\u0000\u1c70\u1c71\u0005\u011f\u0000\u0000\u1c71\u1c72\u0003\u03bc"+
		"\u01de\u0000\u1c72\u1c73\u0003\u03c4\u01e2\u0000\u1c73\u03bb\u0001\u0000"+
		"\u0000\u0000\u1c74\u1c75\u0003\u0154\u00aa\u0000\u1c75\u1c76\u0003\u03be"+
		"\u01df\u0000\u1c76\u03bd\u0001\u0000\u0000\u0000\u1c77\u1c78\u0005\u001e"+
		"\u0000\u0000\u1c78\u1c79\u0005\u000f\u0000\u0000\u1c79\u1c8c\u0005\u001f"+
		"\u0000\u0000\u1c7a\u1c7b\u0005\u001e\u0000\u0000\u1c7b\u1c7c\u0003\u03c0"+
		"\u01e0\u0000\u1c7c\u1c7d\u0005\u001f\u0000\u0000\u1c7d\u1c8c\u0001\u0000"+
		"\u0000\u0000\u1c7e\u1c7f\u0005\u001e\u0000\u0000\u1c7f\u1c80\u0005\u01f7"+
		"\u0000\u0000\u1c80\u1c81\u0005\u01f9\u0000\u0000\u1c81\u1c82\u0003\u03c0"+
		"\u01e0\u0000\u1c82\u1c83\u0005\u001f\u0000\u0000\u1c83\u1c8c\u0001\u0000"+
		"\u0000\u0000\u1c84\u1c85\u0005\u001e\u0000\u0000\u1c85\u1c86\u0003\u03c0"+
		"\u01e0\u0000\u1c86\u1c87\u0005\u01f7\u0000\u0000\u1c87\u1c88\u0005\u01f9"+
		"\u0000\u0000\u1c88\u1c89\u0003\u03c0\u01e0\u0000\u1c89\u1c8a\u0005\u001f"+
		"\u0000\u0000\u1c8a\u1c8c\u0001\u0000\u0000\u0000\u1c8b\u1c77\u0001\u0000"+
		"\u0000\u0000\u1c8b\u1c7a\u0001\u0000\u0000\u0000\u1c8b\u1c7e\u0001\u0000"+
		"\u0000\u0000\u1c8b\u1c84\u0001\u0000\u0000\u0000\u1c8c\u03bf\u0001\u0000"+
		"\u0000\u0000\u1c8d\u1c92\u0003\u03c2\u01e1\u0000\u1c8e\u1c8f\u0005$\u0000"+
		"\u0000\u1c8f\u1c91\u0003\u03c2\u01e1\u0000\u1c90\u1c8e\u0001\u0000\u0000"+
		"\u0000\u1c91\u1c94\u0001\u0000\u0000\u0000\u1c92\u1c90\u0001\u0000\u0000"+
		"\u0000\u1c92\u1c93\u0001\u0000\u0000\u0000\u1c93\u03c1\u0001\u0000\u0000"+
		"\u0000\u1c94\u1c92\u0001\u0000\u0000\u0000\u1c95\u1c96\u0003\u0272\u0139"+
		"\u0000\u1c96\u03c3\u0001\u0000\u0000\u0000\u1c97\u1c98\u0005\u009e\u0000"+
		"\u0000\u1c98\u1c99\u0005\u01ea\u0000\u0000\u1c99\u1ca1\u0003\u00f4z\u0000"+
		"\u1c9a\u1c9b\u0005\u0099\u0000\u0000\u1c9b\u1c9c\u0005\u01ea\u0000\u0000"+
		"\u1c9c\u1ca1\u0003\u0228\u0114\u0000\u1c9d\u1c9e\u0005\u01c0\u0000\u0000"+
		"\u1c9e\u1c9f\u0005\u01bc\u0000\u0000\u1c9f\u1ca1\u0003\u00ecv\u0000\u1ca0"+
		"\u1c97\u0001\u0000\u0000\u0000\u1ca0\u1c9a\u0001\u0000\u0000\u0000\u1ca0"+
		"\u1c9d\u0001\u0000\u0000\u0000\u1ca1\u03c5\u0001\u0000\u0000\u0000\u1ca2"+
		"\u1ca3\u0005\u01b9\u0000\u0000\u1ca3\u1ca4\u0005\u0228\u0000\u0000\u1ca4"+
		"\u1ca5\u0003\u01e0\u00f0\u0000\u1ca5\u1ca6\u0003\u03c8\u01e4\u0000\u1ca6"+
		"\u03c7\u0001\u0000\u0000\u0000\u1ca7\u1ca8\u0005\u016c\u0000\u0000\u1ca8"+
		"\u1cb3\u0005\u00f8\u0000\u0000\u1ca9\u1caa\u0005\u009e\u0000\u0000\u1caa"+
		"\u1cab\u0005\u01ea\u0000\u0000\u1cab\u1cb3\u0003\u00f4z\u0000\u1cac\u1cad"+
		"\u0005\u0099\u0000\u0000\u1cad\u1cae\u0005\u01ea\u0000\u0000\u1cae\u1cb3"+
		"\u0003\u0228\u0114\u0000\u1caf\u1cb0\u0005\u01c0\u0000\u0000\u1cb0\u1cb1"+
		"\u0005\u01bc\u0000\u0000\u1cb1\u1cb3\u0003\u00ecv\u0000\u1cb2\u1ca7\u0001"+
		"\u0000\u0000\u0000\u1cb2\u1ca9\u0001\u0000\u0000\u0000\u1cb2\u1cac\u0001"+
		"\u0000\u0000\u0000\u1cb2\u1caf\u0001\u0000\u0000\u0000\u1cb3\u03c9\u0001"+
		"\u0000\u0000\u0000\u1cb4\u1cb5\u0005\u01b9\u0000\u0000\u1cb5\u1cb6\u0005"+
		"\u0128\u0000\u0000\u1cb6\u1cb7\u0003\u01e0\u00f0\u0000\u1cb7\u1cb8\u0003"+
		"\u03cc\u01e6\u0000\u1cb8\u03cb\u0001\u0000\u0000\u0000\u1cb9\u1cba\u0005"+
		"\u009e\u0000\u0000\u1cba\u1cbb\u0005\u01ea\u0000\u0000\u1cbb\u1cc3\u0003"+
		"\u00f4z\u0000\u1cbc\u1cbd\u0005\u0099\u0000\u0000\u1cbd\u1cbe\u0005\u01ea"+
		"\u0000\u0000\u1cbe\u1cc3\u0003\u0228\u0114\u0000\u1cbf\u1cc0\u0005\u01c0"+
		"\u0000\u0000\u1cc0\u1cc1\u0005\u01bc\u0000\u0000\u1cc1\u1cc3\u0003\u00ec"+
		"v\u0000\u1cc2\u1cb9\u0001\u0000\u0000\u0000\u1cc2\u1cbc\u0001\u0000\u0000"+
		"\u0000\u1cc2\u1cbf\u0001\u0000\u0000\u0000\u1cc3\u03cd\u0001\u0000\u0000"+
		"\u0000\u1cc4\u1cc5\u0005\u01b9\u0000\u0000\u1cc5\u1cc6\u0005\u0217\u0000"+
		"\u0000\u1cc6\u1cc8\u0005Z\u0000\u0000\u1cc7\u1cc9\u0003\u03e0\u01f0\u0000"+
		"\u1cc8\u1cc7\u0001\u0000\u0000\u0000\u1cc8\u1cc9\u0001\u0000\u0000\u0000"+
		"\u1cc9\u1cca\u0001\u0000\u0000\u0000\u1cca\u1ccb\u0003\u03d0\u01e8\u0000"+
		"\u1ccb\u03cf\u0001\u0000\u0000\u0000\u1ccc\u1ccd\u0005\u01bd\u0000\u0000"+
		"\u1ccd\u1cce\u0003\u03da\u01ed\u0000\u1cce\u1ccf\u0005\u01e5\u0000\u0000"+
		"\u1ccf\u1cd0\u0003\u03d8\u01ec\u0000\u1cd0\u1cd1\u0005\u01ea\u0000\u0000"+
		"\u1cd1\u1cd3\u0003\u03d4\u01ea\u0000\u1cd2\u1cd4\u0003\u03d2\u01e9\u0000"+
		"\u1cd3\u1cd2\u0001\u0000\u0000\u0000\u1cd3\u1cd4\u0001\u0000\u0000\u0000"+
		"\u1cd4\u1ceb\u0001\u0000\u0000\u0000\u1cd5\u1cd6\u0005\u01be\u0000\u0000"+
		"\u1cd6\u1cd7\u0003\u03da\u01ed\u0000\u1cd7\u1cd8\u0005\u01e5\u0000\u0000"+
		"\u1cd8\u1cd9\u0003\u03d8\u01ec\u0000\u1cd9\u1cda\u0005\u01d9\u0000\u0000"+
		"\u1cda\u1cdc\u0003\u03d4\u01ea\u0000\u1cdb\u1cdd\u0003\u0394\u01ca\u0000"+
		"\u1cdc\u1cdb\u0001\u0000\u0000\u0000\u1cdc\u1cdd\u0001\u0000\u0000\u0000"+
		"\u1cdd\u1ceb\u0001\u0000\u0000\u0000\u1cde\u1cdf\u0005\u01be\u0000\u0000"+
		"\u1cdf\u1ce0\u0005\u01bd\u0000\u0000\u1ce0\u1ce1\u0005Y\u0000\u0000\u1ce1"+
		"\u1ce2\u0005\u01e9\u0000\u0000\u1ce2\u1ce3\u0003\u03da\u01ed\u0000\u1ce3"+
		"\u1ce4\u0005\u01e5\u0000\u0000\u1ce4\u1ce5\u0003\u03d8\u01ec\u0000\u1ce5"+
		"\u1ce6\u0005\u01d9\u0000\u0000\u1ce6\u1ce8\u0003\u03d4\u01ea\u0000\u1ce7"+
		"\u1ce9\u0003\u0394\u01ca\u0000\u1ce8\u1ce7\u0001\u0000\u0000\u0000\u1ce8"+
		"\u1ce9\u0001\u0000\u0000\u0000\u1ce9\u1ceb\u0001\u0000\u0000\u0000\u1cea"+
		"\u1ccc\u0001\u0000\u0000\u0000\u1cea\u1cd5\u0001\u0000\u0000\u0000\u1cea"+
		"\u1cde\u0001\u0000\u0000\u0000\u1ceb\u03d1\u0001\u0000\u0000\u0000\u1cec"+
		"\u1ced\u0005\u01d1\u0000\u0000\u1ced\u1cee\u0005\u01bd\u0000\u0000\u1cee"+
		"\u1cef\u0005Y\u0000\u0000\u1cef\u03d3\u0001\u0000\u0000\u0000\u1cf0\u1cf5"+
		"\u0003\u03d6\u01eb\u0000\u1cf1\u1cf2\u0005$\u0000\u0000\u1cf2\u1cf4\u0003"+
		"\u03d6\u01eb\u0000\u1cf3\u1cf1\u0001\u0000\u0000\u0000\u1cf4\u1cf7\u0001"+
		"\u0000\u0000\u0000\u1cf5\u1cf3\u0001\u0000\u0000\u0000\u1cf5\u1cf6\u0001"+
		"\u0000\u0000\u0000\u1cf6\u03d5\u0001\u0000\u0000\u0000\u1cf7\u1cf5\u0001"+
		"\u0000\u0000\u0000\u1cf8\u1cfa\u0005\u01f8\u0000\u0000\u1cf9\u1cf8\u0001"+
		"\u0000\u0000\u0000\u1cf9\u1cfa\u0001\u0000\u0000\u0000\u1cfa\u1cfb\u0001"+
		"\u0000\u0000\u0000\u1cfb\u1cfc\u0003\u0228\u0114\u0000\u1cfc\u03d7\u0001"+
		"\u0000\u0000\u0000\u1cfd\u1cfe\u00070\u0000\u0000\u1cfe\u03d9\u0001\u0000"+
		"\u0000\u0000\u1cff\u1d0f\u0003\u03dc\u01ee\u0000\u1d00\u1d0f\u0005\u01f4"+
		"\u0000\u0000\u1d01\u1d02\u0005\u01f4\u0000\u0000\u1d02\u1d0f\u0005Z\u0000"+
		"\u0000\u1d03\u1d04\u0005\u01f4\u0000\u0000\u1d04\u1d05\u0005\u001e\u0000"+
		"\u0000\u1d05\u1d06\u0003\u024a\u0125\u0000\u1d06\u1d07\u0005\u001f\u0000"+
		"\u0000\u1d07\u1d0f\u0001\u0000\u0000\u0000\u1d08\u1d09\u0005\u01f4\u0000"+
		"\u0000\u1d09\u1d0a\u0005Z\u0000\u0000\u1d0a\u1d0b\u0005\u001e\u0000\u0000"+
		"\u1d0b\u1d0c\u0003\u024a\u0125\u0000\u1d0c\u1d0d\u0005\u001f\u0000\u0000"+
		"\u1d0d\u1d0f\u0001\u0000\u0000\u0000\u1d0e\u1cff\u0001\u0000\u0000\u0000"+
		"\u1d0e\u1d00\u0001\u0000\u0000\u0000\u1d0e\u1d01\u0001\u0000\u0000\u0000"+
		"\u1d0e\u1d03\u0001\u0000\u0000\u0000\u1d0e\u1d08\u0001\u0000\u0000\u0000"+
		"\u1d0f\u03db\u0001\u0000\u0000\u0000\u1d10\u1d15\u0003\u03de\u01ef\u0000"+
		"\u1d11\u1d12\u0005$\u0000\u0000\u1d12\u1d14\u0003\u03de\u01ef\u0000\u1d13"+
		"\u1d11\u0001\u0000\u0000\u0000\u1d14\u1d17\u0001\u0000\u0000\u0000\u1d15"+
		"\u1d13\u0001\u0000\u0000\u0000\u1d15\u1d16\u0001\u0000\u0000\u0000\u1d16"+
		"\u03dd\u0001\u0000\u0000\u0000\u1d17\u1d15\u0001\u0000\u0000\u0000\u1d18"+
		"\u1d1a\u0005\u01b4\u0000\u0000\u1d19\u1d1b\u0003\u0246\u0123\u0000\u1d1a"+
		"\u1d19\u0001\u0000\u0000\u0000\u1d1a\u1d1b\u0001\u0000\u0000\u0000\u1d1b"+
		"\u1d29\u0001\u0000\u0000\u0000\u1d1c\u1d1e\u0005\\\u0000\u0000\u1d1d\u1d1f"+
		"\u0003\u0246\u0123\u0000\u1d1e\u1d1d\u0001\u0000\u0000\u0000\u1d1e\u1d1f"+
		"\u0001\u0000\u0000\u0000\u1d1f\u1d29\u0001\u0000\u0000\u0000\u1d20\u1d22"+
		"\u0005\u01b8\u0000\u0000\u1d21\u1d23\u0003\u0246\u0123\u0000\u1d22\u1d21"+
		"\u0001\u0000\u0000\u0000\u1d22\u1d23\u0001\u0000\u0000\u0000\u1d23\u1d29"+
		"\u0001\u0000\u0000\u0000\u1d24\u1d26\u0003\u015c\u00ae\u0000\u1d25\u1d27"+
		"\u0003\u0246\u0123\u0000\u1d26\u1d25\u0001\u0000\u0000\u0000\u1d26\u1d27"+
		"\u0001\u0000\u0000\u0000\u1d27\u1d29\u0001\u0000\u0000\u0000\u1d28\u1d18"+
		"\u0001\u0000\u0000\u0000\u1d28\u1d1c\u0001\u0000\u0000\u0000\u1d28\u1d20"+
		"\u0001\u0000\u0000\u0000\u1d28\u1d24\u0001\u0000\u0000\u0000\u1d29\u03df"+
		"\u0001\u0000\u0000\u0000\u1d2a\u1d2c\u0003\u03e2\u01f1\u0000\u1d2b\u1d2a"+
		"\u0001\u0000\u0000\u0000\u1d2c\u1d2d\u0001\u0000\u0000\u0000\u1d2d\u1d2b"+
		"\u0001\u0000\u0000\u0000\u1d2d\u1d2e\u0001\u0000\u0000\u0000\u1d2e\u03e1"+
		"\u0001\u0000\u0000\u0000\u1d2f\u1d30\u0005\u01f3\u0000\u0000\u1d30\u1d31"+
		"\u0005\u01bc\u0000\u0000\u1d31\u1d36\u0003\u03e4\u01f2\u0000\u1d32\u1d33"+
		"\u0005\u01e9\u0000\u0000\u1d33\u1d34\u00071\u0000\u0000\u1d34\u1d36\u0003"+
		"\u027c\u013e\u0000\u1d35\u1d2f\u0001\u0000\u0000\u0000\u1d35\u1d32\u0001"+
		"\u0000\u0000\u0000\u1d36\u03e3\u0001\u0000\u0000\u0000\u1d37\u1d38\u0003"+
		"\u01e4\u00f2\u0000\u1d38\u03e5\u0001\u0000\u0000\u0000\u1d39\u1d3a\u0005"+
		"\u01b9\u0000\u0000\u1d3a\u1d3b\u0005u\u0000\u0000\u1d3b\u1d3c\u0003\u03e8"+
		"\u01f4\u0000\u1d3c\u03e7\u0001\u0000\u0000\u0000\u1d3d\u1d3e\u0003\u01e0"+
		"\u00f0\u0000\u1d3e\u1d3f\u0007,\u0000\u0000\u1d3f\u1d40\u0005\u01ee\u0000"+
		"\u0000\u1d40\u1d41\u0005\u01ef\u0000\u0000\u1d41\u1d72\u0001\u0000\u0000"+
		"\u0000\u1d42\u1d43\u0003\u01e0\u00f0\u0000\u1d43\u1d44\u0005\u01bf\u0000"+
		"\u0000\u1d44\u1d47\u0003\u0324\u0192\u0000\u1d45\u1d46\u0005\u01ee\u0000"+
		"\u0000\u1d46\u1d48\u0005\u00b3\u0000\u0000\u1d47\u1d45\u0001\u0000\u0000"+
		"\u0000\u1d47\u1d48\u0001\u0000\u0000\u0000\u1d48\u1d72\u0001\u0000\u0000"+
		"\u0000\u1d49\u1d4a\u0003\u01e0\u00f0\u0000\u1d4a\u1d4b\u0005\u01ba\u0000"+
		"\u0000\u1d4b\u1d4d\u0005\u01c4\u0000\u0000\u1d4c\u1d4e\u0003\u02a0\u0150"+
		"\u0000\u1d4d\u1d4c\u0001\u0000\u0000\u0000\u1d4d\u1d4e\u0001\u0000\u0000"+
		"\u0000\u1d4e\u1d4f\u0001\u0000\u0000\u0000\u1d4f\u1d51\u0003\u00f4z\u0000"+
		"\u1d50\u1d52\u0003\u0394\u01ca\u0000\u1d51\u1d50\u0001\u0000\u0000\u0000"+
		"\u1d51\u1d52\u0001\u0000\u0000\u0000\u1d52\u1d72\u0001\u0000\u0000\u0000"+
		"\u1d53\u1d54\u0003\u01e0\u00f0\u0000\u1d54\u1d55\u0005\u00b4\u0000\u0000"+
		"\u1d55\u1d56\u0005\u01c4\u0000\u0000\u1d56\u1d57\u0003\u00f4z\u0000\u1d57"+
		"\u1d72\u0001\u0000\u0000\u0000\u1d58\u1d59\u0003\u01e0\u00f0\u0000\u1d59"+
		"\u1d5a\u0005\u009e\u0000\u0000\u1d5a\u1d5b\u0005\u01c4\u0000\u0000\u1d5b"+
		"\u1d5c\u0003\u00fe\u007f\u0000\u1d5c\u1d5d\u0005\u01ea\u0000\u0000\u1d5d"+
		"\u1d5e\u0003\u00fe\u007f\u0000\u1d5e\u1d72\u0001\u0000\u0000\u0000\u1d5f"+
		"\u1d60\u0003\u01e0\u00f0\u0000\u1d60\u1d61\u0005\u0099\u0000\u0000\u1d61"+
		"\u1d62\u0005\u01ea\u0000\u0000\u1d62\u1d63\u0003\u0228\u0114\u0000\u1d63"+
		"\u1d72\u0001\u0000\u0000\u0000\u1d64\u1d65\u0003\u01e0\u00f0\u0000\u1d65"+
		"\u1d66\u0005\u009e\u0000\u0000\u1d66\u1d67\u0005\u01ea\u0000\u0000\u1d67"+
		"\u1d68\u0003\u01e0\u00f0\u0000\u1d68\u1d72\u0001\u0000\u0000\u0000\u1d69"+
		"\u1d6a\u0003\u01e0\u00f0\u0000\u1d6a\u1d6b\u0005\u01c0\u0000\u0000\u1d6b"+
		"\u1d6c\u0005\u01bc\u0000\u0000\u1d6c\u1d6d\u0003\u00f4z\u0000\u1d6d\u1d72"+
		"\u0001\u0000\u0000\u0000\u1d6e\u1d6f\u0003\u01e0\u00f0\u0000\u1d6f\u1d70"+
		"\u0003\u039e\u01cf\u0000\u1d70\u1d72\u0001\u0000\u0000\u0000\u1d71\u1d3d"+
		"\u0001\u0000\u0000\u0000\u1d71\u1d42\u0001\u0000\u0000\u0000\u1d71\u1d49"+
		"\u0001\u0000\u0000\u0000\u1d71\u1d53\u0001\u0000\u0000\u0000\u1d71\u1d58"+
		"\u0001\u0000\u0000\u0000\u1d71\u1d5f\u0001\u0000\u0000\u0000\u1d71\u1d64"+
		"\u0001\u0000\u0000\u0000\u1d71\u1d69\u0001\u0000\u0000\u0000\u1d71\u1d6e"+
		"\u0001\u0000\u0000\u0000\u1d72\u03e9\u0001\u0000\u0000\u0000\u1d73\u1d74"+
		"\u0005\u01b9\u0000\u0000\u1d74\u1d75\u0005\u0145\u0000\u0000\u1d75\u1d76"+
		"\u0005\u01cc\u0000\u0000\u1d76\u1d77\u0003\u03ee\u01f7\u0000\u1d77\u1d78"+
		"\u0003\u03ec\u01f6\u0000\u1d78\u03eb\u0001\u0000\u0000\u0000\u1d79\u1d83"+
		"\u0005\u021a\u0000\u0000\u1d7a\u1d7b\u0005\u0219\u0000\u0000\u1d7b\u1d83"+
		"\u0007)\u0000\u0000\u1d7c\u1d7d\u0005\u0099\u0000\u0000\u1d7d\u1d7e\u0005"+
		"\u01ea\u0000\u0000\u1d7e\u1d83\u0003\u0228\u0114\u0000\u1d7f\u1d80\u0005"+
		"\u009e\u0000\u0000\u1d80\u1d81\u0005\u01ea\u0000\u0000\u1d81\u1d83\u0003"+
		"\u03ee\u01f7\u0000\u1d82\u1d79\u0001\u0000\u0000\u0000\u1d82\u1d7a\u0001"+
		"\u0000\u0000\u0000\u1d82\u1d7c\u0001\u0000\u0000\u0000\u1d82\u1d7f\u0001"+
		"\u0000\u0000\u0000\u1d83\u03ed\u0001\u0000\u0000\u0000\u1d84\u1d85\u0003"+
		"\u015c\u00ae\u0000\u1d85\u03ef\u0001\u0000\u0000\u0000\u1d86\u1d87\u0005"+
		"\u01b9\u0000\u0000\u1d87\u1d88\u0005y\u0000\u0000\u1d88\u1d89\u0003\u00f4"+
		"z\u0000\u1d89\u1d8a\u0003\u03f2\u01f9\u0000\u1d8a\u03f1\u0001\u0000\u0000"+
		"\u0000\u1d8b\u1d8c\u0005\u01b6\u0000\u0000\u1d8c\u1e00\u0003\u03fa\u01fd"+
		"\u0000\u1d8d\u1d8e\u0007.\u0000\u0000\u1d8e\u1d8f\u0005\u011d\u0000\u0000"+
		"\u1d8f\u1d90\u0005\u0157\u0000\u0000\u1d90\u1e00\u0003\u00f4z\u0000\u1d91"+
		"\u1d92\u0007.\u0000\u0000\u1d92\u1d93\u0005\u011f\u0000\u0000\u1d93\u1e00"+
		"\u0003\u03f8\u01fc\u0000\u1d94\u1d95\u0007.\u0000\u0000\u1d95\u1d96\u0005"+
		"\u01d6\u0000\u0000\u1d96\u1d97\u0005\u001e\u0000\u0000\u1d97\u1d98\u0003"+
		"\u017e\u00bf\u0000\u1d98\u1d99\u0005\u01e4\u0000\u0000\u1d99\u1d9a\u0003"+
		"\u017e\u00bf\u0000\u1d9a\u1d9b\u0005\u001f\u0000\u0000\u1d9b\u1e00\u0001"+
		"\u0000\u0000\u0000\u1d9c\u1d9d\u0007.\u0000\u0000\u1d9d\u1d9e\u0005\u0228"+
		"\u0000\u0000\u1d9e\u1e00\u0003\u01e0\u00f0\u0000\u1d9f\u1da0\u0007.\u0000"+
		"\u0000\u1da0\u1da1\u0005\u0128\u0000\u0000\u1da1\u1e00\u0003\u01e0\u00f0"+
		"\u0000\u1da2\u1da3\u0007.\u0000\u0000\u1da3\u1da4\u0005u\u0000\u0000\u1da4"+
		"\u1e00\u0003\u017e\u00bf\u0000\u1da5\u1da6\u0007.\u0000\u0000\u1da6\u1da7"+
		"\u0005\u01cb\u0000\u0000\u1da7\u1e00\u0003\u03f4\u01fa\u0000\u1da8\u1daa"+
		"\u0007.\u0000\u0000\u1da9\u1dab\u0005\u015c\u0000\u0000\u1daa\u1da9\u0001"+
		"\u0000\u0000\u0000\u1daa\u1dab\u0001\u0000\u0000\u0000\u1dab\u1dac\u0001"+
		"\u0000\u0000\u0000\u1dac\u1dad\u0005\u008a\u0000\u0000\u1dad\u1e00\u0003"+
		"\u00f4z\u0000\u1dae\u1daf\u0007.\u0000\u0000\u1daf\u1db0\u0005\u00fe\u0000"+
		"\u0000\u1db0\u1e00\u0003\u03b8\u01dc\u0000\u1db1\u1db2\u0007.\u0000\u0000"+
		"\u1db2\u1db3\u0005\u00fe\u0000\u0000\u1db3\u1db4\u00072\u0000\u0000\u1db4"+
		"\u1db5\u0003\u01e0\u00f0\u0000\u1db5\u1db6\u0005\u01e2\u0000\u0000\u1db6"+
		"\u1db7\u0003\u02e0\u0170\u0000\u1db7\u1e00\u0001\u0000\u0000\u0000\u1db8"+
		"\u1db9\u0007.\u0000\u0000\u1db9\u1dba\u0005\u01cd\u0000\u0000\u1dba\u1e00"+
		"\u0003\u03f4\u01fa\u0000\u1dbb\u1dbc\u0007.\u0000\u0000\u1dbc\u1dbd\u0005"+
		"\u00a3\u0000\u0000\u1dbd\u1e00\u0003\u03f4\u01fa\u0000\u1dbe\u1dbf\u0007"+
		".\u0000\u0000\u1dbf\u1dc0\u0005\u01bc\u0000\u0000\u1dc0\u1e00\u0003\u00f4"+
		"z\u0000\u1dc1\u1dc2\u0007.\u0000\u0000\u1dc2\u1dc3\u0005\u0145\u0000\u0000"+
		"\u1dc3\u1dc4\u0005\u01cc\u0000\u0000\u1dc4\u1e00\u0003\u00f4z\u0000\u1dc5"+
		"\u1dc6\u0007.\u0000\u0000\u1dc6\u1dc7\u0005\u01c1\u0000\u0000\u1dc7\u1e00"+
		"\u0003\u01e0\u00f0\u0000\u1dc8\u1dc9\u0007.\u0000\u0000\u1dc9\u1dca\u0005"+
		"\u0231\u0000\u0000\u1dca\u1dcb\u0005\u0179\u0000\u0000\u1dcb\u1dcc\u0005"+
		"\u015d\u0000\u0000\u1dcc\u1e00\u0003\u01e0\u00f0\u0000\u1dcd\u1dce\u0007"+
		".\u0000\u0000\u1dce\u1dcf\u0005\u0231\u0000\u0000\u1dcf\u1dd0\u0005\u0179"+
		"\u0000\u0000\u1dd0\u1dd1\u0005\u0134\u0000\u0000\u1dd1\u1e00\u0003\u01e0"+
		"\u00f0\u0000\u1dd2\u1dd3\u0007.\u0000\u0000\u1dd3\u1dd4\u0005\u0231\u0000"+
		"\u0000\u1dd4\u1dd5\u0005\u0179\u0000\u0000\u1dd5\u1dd6\u0005\u0188\u0000"+
		"\u0000\u1dd6\u1e00\u0003\u01e0\u00f0\u0000\u1dd7\u1dd8\u0007.\u0000\u0000"+
		"\u1dd8\u1dd9\u0005\u0231\u0000\u0000\u1dd9\u1dda\u0005\u0179\u0000\u0000"+
		"\u1dda\u1ddb\u0005\u0131\u0000\u0000\u1ddb\u1e00\u0003\u01e0\u00f0\u0000"+
		"\u1ddc\u1ddd\u0007.\u0000\u0000\u1ddd\u1dde\u0005\u00a6\u0000\u0000\u1dde"+
		"\u1e00\u0003\u01e0\u00f0\u0000\u1ddf\u1de0\u0007.\u0000\u0000\u1de0\u1de1"+
		"\u0005\u01ce\u0000\u0000\u1de1\u1e00\u0003\u01e0\u00f0\u0000\u1de2\u1de3"+
		"\u0007.\u0000\u0000\u1de3\u1de4\u0005\u00fd\u0000\u0000\u1de4\u1de5\u0005"+
		"\u01ce\u0000\u0000\u1de5\u1e00\u0003\u01e0\u00f0\u0000\u1de6\u1de7\u0007"+
		".\u0000\u0000\u1de7\u1de8\u0005\u01c7\u0000\u0000\u1de8\u1de9\u0005\u01c1"+
		"\u0000\u0000\u1de9\u1e00\u0003\u01e0\u00f0\u0000\u1dea\u1deb\u0007.\u0000"+
		"\u0000\u1deb\u1dec\u0005\u01c7\u0000\u0000\u1dec\u1ded\u0005o\u0000\u0000"+
		"\u1ded\u1dee\u0005\u0197\u0000\u0000\u1dee\u1e00\u0003\u00f4z\u0000\u1def"+
		"\u1df0\u0007.\u0000\u0000\u1df0\u1df1\u0005\u0177\u0000\u0000\u1df1\u1e00"+
		"\u0003\u00f4z\u0000\u1df2\u1df3\u0007.\u0000\u0000\u1df3\u1df4\u0005\u018c"+
		"\u0000\u0000\u1df4\u1df5\u0005\u01e9\u0000\u0000\u1df5\u1df6\u0003\u017e"+
		"\u00bf\u0000\u1df6\u1df7\u0005\u008a\u0000\u0000\u1df7\u1df8\u0003\u00f4"+
		"z\u0000\u1df8\u1e00\u0001\u0000\u0000\u0000\u1df9\u1dfa\u0007.\u0000\u0000"+
		"\u1dfa\u1dfb\u0005\u022d\u0000\u0000\u1dfb\u1e00\u0003\u017e\u00bf\u0000"+
		"\u1dfc\u1dfd\u0005\u01c0\u0000\u0000\u1dfd\u1dfe\u0005\u01bc\u0000\u0000"+
		"\u1dfe\u1e00\u0003\u00f4z\u0000\u1dff\u1d8b\u0001\u0000\u0000\u0000\u1dff"+
		"\u1d8d\u0001\u0000\u0000\u0000\u1dff\u1d91\u0001\u0000\u0000\u0000\u1dff"+
		"\u1d94\u0001\u0000\u0000\u0000\u1dff\u1d9c\u0001\u0000\u0000\u0000\u1dff"+
		"\u1d9f\u0001\u0000\u0000\u0000\u1dff\u1da2\u0001\u0000\u0000\u0000\u1dff"+
		"\u1da5\u0001\u0000\u0000\u0000\u1dff\u1da8\u0001\u0000\u0000\u0000\u1dff"+
		"\u1dae\u0001\u0000\u0000\u0000\u1dff\u1db1\u0001\u0000\u0000\u0000\u1dff"+
		"\u1db8\u0001\u0000\u0000\u0000\u1dff\u1dbb\u0001\u0000\u0000\u0000\u1dff"+
		"\u1dbe\u0001\u0000\u0000\u0000\u1dff\u1dc1\u0001\u0000\u0000\u0000\u1dff"+
		"\u1dc5\u0001\u0000\u0000\u0000\u1dff\u1dc8\u0001\u0000\u0000\u0000\u1dff"+
		"\u1dcd\u0001\u0000\u0000\u0000\u1dff\u1dd2\u0001\u0000\u0000\u0000\u1dff"+
		"\u1dd7\u0001\u0000\u0000\u0000\u1dff\u1ddc\u0001\u0000\u0000\u0000\u1dff"+
		"\u1ddf\u0001\u0000\u0000\u0000\u1dff\u1de2\u0001\u0000\u0000\u0000\u1dff"+
		"\u1de6\u0001\u0000\u0000\u0000\u1dff\u1dea\u0001\u0000\u0000\u0000\u1dff"+
		"\u1def\u0001\u0000\u0000\u0000\u1dff\u1df2\u0001\u0000\u0000\u0000\u1dff"+
		"\u1df9\u0001\u0000\u0000\u0000\u1dff\u1dfc\u0001\u0000\u0000\u0000\u1e00"+
		"\u03f3\u0001\u0000\u0000\u0000\u1e01\u1e02\u0003\u0154\u00aa\u0000\u1e02"+
		"\u1e03\u0003\u03f6\u01fb\u0000\u1e03\u1e0a\u0001\u0000\u0000\u0000\u1e04"+
		"\u1e0a\u0003\u00eau\u0000\u1e05\u1e0a\u0003\u015c\u00ae\u0000\u1e06\u1e07"+
		"\u0003\u015c\u00ae\u0000\u1e07\u1e08\u0003\u0112\u0089\u0000\u1e08\u1e0a"+
		"\u0001\u0000\u0000\u0000\u1e09\u1e01\u0001\u0000\u0000\u0000\u1e09\u1e04"+
		"\u0001\u0000\u0000\u0000\u1e09\u1e05\u0001\u0000\u0000\u0000\u1e09\u1e06"+
		"\u0001\u0000\u0000\u0000\u1e0a\u03f5\u0001\u0000\u0000\u0000\u1e0b\u1e0c"+
		"\u0005\u001e\u0000\u0000\u1e0c\u1e0d\u0003\u0276\u013b\u0000\u1e0d\u1e0e"+
		"\u0005\u001f\u0000\u0000\u1e0e\u1e12\u0001\u0000\u0000\u0000\u1e0f\u1e10"+
		"\u0005\u001e\u0000\u0000\u1e10\u1e12\u0005\u001f\u0000\u0000\u1e11\u1e0b"+
		"\u0001\u0000\u0000\u0000\u1e11\u1e0f\u0001\u0000\u0000\u0000\u1e12\u03f7"+
		"\u0001\u0000\u0000\u0000\u1e13\u1e14\u0003\u0154\u00aa\u0000\u1e14\u1e15"+
		"\u0003\u03be\u01df\u0000\u1e15\u03f9\u0001\u0000\u0000\u0000\u1e16\u1e18"+
		"\u0003\u03fc\u01fe\u0000\u1e17\u1e16\u0001\u0000\u0000\u0000\u1e18\u1e1b"+
		"\u0001\u0000\u0000\u0000\u1e19\u1e17\u0001\u0000\u0000\u0000\u1e19\u1e1a"+
		"\u0001\u0000\u0000\u0000\u1e1a\u03fb\u0001\u0000\u0000\u0000\u1e1b\u1e19"+
		"\u0001\u0000\u0000\u0000\u1e1c\u1e1f\u0005\u01ea\u0000\u0000\u1e1d\u1e20"+
		"\u0003\u0222\u0111\u0000\u1e1e\u1e20\u0005\u024f\u0000\u0000\u1e1f\u1e1d"+
		"\u0001\u0000\u0000\u0000\u1e1f\u1e1e\u0001\u0000\u0000\u0000\u1e20\u03fd"+
		"\u0001\u0000\u0000\u0000\u1e21\u1e22\u0005\u01b9\u0000\u0000\u1e22\u1e23"+
		"\u0005\u01c7\u0000\u0000\u1e23\u1e24\u0005o\u0000\u0000\u1e24\u1e25\u0005"+
		"\u0197\u0000\u0000\u1e25\u1e26\u0003\u015c\u00ae\u0000\u1e26\u1e27\u0003"+
		"\u0400\u0200\u0000\u1e27\u03ff\u0001\u0000\u0000\u0000\u1e28\u1e2a\u0003"+
		"\u0402\u0201\u0000\u1e29\u1e28\u0001\u0000\u0000\u0000\u1e29\u1e2a\u0001"+
		"\u0000\u0000\u0000\u1e2a\u1e2b\u0001\u0000\u0000\u0000\u1e2b\u1e34\u0003"+
		"\u038e\u01c7\u0000\u1e2c\u1e34\u0003\u0402\u0201\u0000\u1e2d\u1e2e\u0005"+
		"\u009e\u0000\u0000\u1e2e\u1e2f\u0005\u01ea\u0000\u0000\u1e2f\u1e34\u0003"+
		"\u00f4z\u0000\u1e30\u1e31\u0005\u0099\u0000\u0000\u1e31\u1e32\u0005\u01ea"+
		"\u0000\u0000\u1e32\u1e34\u0003\u0228\u0114\u0000\u1e33\u1e29\u0001\u0000"+
		"\u0000\u0000\u1e33\u1e2c\u0001\u0000\u0000\u0000\u1e33\u1e2d\u0001\u0000"+
		"\u0000\u0000\u1e33\u1e30\u0001\u0000\u0000\u0000\u1e34\u0401\u0001\u0000"+
		"\u0000\u0000\u1e35\u1e37\u0003\u0404\u0202\u0000\u1e36\u1e35\u0001\u0000"+
		"\u0000\u0000\u1e37\u1e38\u0001\u0000\u0000\u0000\u1e38\u1e36\u0001\u0000"+
		"\u0000\u0000\u1e38\u1e39\u0001\u0000\u0000\u0000\u1e39\u0403\u0001\u0000"+
		"\u0000\u0000\u1e3a\u1e3b\u0005\u0150\u0000\u0000\u1e3b\u1e43\u0003\u0406"+
		"\u0203\u0000\u1e3c\u1e3d\u0005X\u0000\u0000\u1e3d\u1e43\u0005\u0150\u0000"+
		"\u0000\u1e3e\u1e3f\u0005\u018f\u0000\u0000\u1e3f\u1e43\u0003\u0406\u0203"+
		"\u0000\u1e40\u1e41\u0005X\u0000\u0000\u1e41\u1e43\u0005\u018f\u0000\u0000"+
		"\u1e42\u1e3a\u0001\u0000\u0000\u0000\u1e42\u1e3c\u0001\u0000\u0000\u0000"+
		"\u1e42\u1e3e\u0001\u0000\u0000\u0000\u1e42\u1e40\u0001\u0000\u0000\u0000"+
		"\u1e43\u0405\u0001\u0000\u0000\u0000\u1e44\u1e45\u0003\u01e0\u00f0\u0000"+
		"\u1e45\u0407\u0001\u0000\u0000\u0000\u1e46\u1e47\u0005\u01b9\u0000\u0000"+
		"\u1e47\u1e48\u0005\u01f8\u0000\u0000\u1e48\u1e49\u0003\u040a\u0205\u0000"+
		"\u1e49\u0409\u0001\u0000\u0000\u0000\u1e4a\u1e4b\u0003\u0228\u0114\u0000"+
		"\u1e4b\u1e4c\u0007.\u0000\u0000\u1e4c\u1e4d\u0005a\u0000\u0000\u1e4d\u1e4e"+
		"\u0003\u027c\u013e\u0000\u1e4e\u1e55\u0001\u0000\u0000\u0000\u1e4f\u1e50"+
		"\u0003\u0228\u0114\u0000\u1e50\u1e51\u0005\u009e\u0000\u0000\u1e51\u1e52"+
		"\u0005\u01ea\u0000\u0000\u1e52\u1e53\u0003\u0228\u0114\u0000\u1e53\u1e55"+
		"\u0001\u0000\u0000\u0000\u1e54\u1e4a\u0001\u0000\u0000\u0000\u1e54\u1e4f"+
		"\u0001\u0000\u0000\u0000\u1e55\u040b\u0001\u0000\u0000\u0000\u1e56\u1e58"+
		"\u0005\u01b9\u0000\u0000\u1e57\u1e59\u0005\u015c\u0000\u0000\u1e58\u1e57"+
		"\u0001\u0000\u0000\u0000\u1e58\u1e59\u0001\u0000\u0000\u0000\u1e59\u1e5a"+
		"\u0001\u0000\u0000\u0000\u1e5a\u1e5b\u0005\u008a\u0000\u0000\u1e5b\u1e66"+
		"\u0003\u015c\u00ae\u0000\u1e5c\u1e5d\u0005\u009e\u0000\u0000\u1e5d\u1e5e"+
		"\u0005\u01ea\u0000\u0000\u1e5e\u1e67\u0003\u015c\u00ae\u0000\u1e5f\u1e60"+
		"\u0005\u0099\u0000\u0000\u1e60\u1e64\u0005\u01ea\u0000\u0000\u1e61\u1e65"+
		"\u0003\u021a\u010d\u0000\u1e62\u1e65\u0005\u0220\u0000\u0000\u1e63\u1e65"+
		"\u0005\u00a8\u0000\u0000\u1e64\u1e61\u0001\u0000\u0000\u0000\u1e64\u1e62"+
		"\u0001\u0000\u0000\u0000\u1e64\u1e63\u0001\u0000\u0000\u0000\u1e65\u1e67"+
		"\u0001\u0000\u0000\u0000\u1e66\u1e5c\u0001\u0000\u0000\u0000\u1e66\u1e5f"+
		"\u0001\u0000\u0000\u0000\u1e67\u040d\u0001\u0000\u0000\u0000\u1e68\u1e69"+
		"\u0005\u01b9\u0000\u0000\u1e69\u1e6a\u0005\u008b\u0000\u0000\u1e6a\u1e6b"+
		"\u0005\u0094\u0000\u0000\u1e6b\u1e6c\u0003\u0232\u0119\u0000\u1e6c\u1e6d"+
		"\u0005\u0099\u0000\u0000\u1e6d\u1e71\u0005\u01ea\u0000\u0000\u1e6e\u1e72"+
		"\u0003\u021a\u010d\u0000\u1e6f\u1e72\u0005\u0220\u0000\u0000\u1e70\u1e72"+
		"\u0005\u00a8\u0000\u0000\u1e71\u1e6e\u0001\u0000\u0000\u0000\u1e71\u1e6f"+
		"\u0001\u0000\u0000\u0000\u1e71\u1e70\u0001\u0000\u0000\u0000\u1e72\u040f"+
		"\u0001\u0000\u0000\u0000\u1e73\u1e74\u0005\u01b9\u0000\u0000\u1e74\u1e75"+
		"\u0005\u00fd\u0000\u0000\u1e75\u1e76\u0005\u01ce\u0000\u0000\u1e76\u1e77"+
		"\u0003\u0412\u0209\u0000\u1e77\u0411\u0001\u0000\u0000\u0000\u1e78\u1e7a"+
		"\u0003\u02a0\u0150\u0000\u1e79\u1e78\u0001\u0000\u0000\u0000\u1e79\u1e7a"+
		"\u0001\u0000\u0000\u0000\u1e7a\u1e7b\u0001\u0000\u0000\u0000\u1e7b\u1e7c"+
		"\u0003\u015a\u00ad\u0000\u1e7c\u1e7d\u0003\u0384\u01c2\u0000\u1e7d\u1eaf"+
		"\u0001\u0000\u0000\u0000\u1e7e\u1e7f\u0003\u015a\u00ad\u0000\u1e7f\u1e80"+
		"\u0005t\u0000\u0000\u1e80\u1e81\u0005\u01e5\u0000\u0000\u1e81\u1e82\u0005"+
		"y\u0000\u0000\u1e82\u1e83\u0003\u00f4z\u0000\u1e83\u1eaf\u0001\u0000\u0000"+
		"\u0000\u1e84\u1e86\u0003\u02a0\u0150\u0000\u1e85\u1e84\u0001\u0000\u0000"+
		"\u0000\u1e85\u1e86\u0001\u0000\u0000\u0000\u1e86\u1e87\u0001\u0000\u0000"+
		"\u0000\u1e87\u1e88\u0003\u015a\u00ad\u0000\u1e88\u1e8a\u0005\u009e\u0000"+
		"\u0000\u1e89\u1e8b\u0005\u01c2\u0000\u0000\u1e8a\u1e89\u0001\u0000\u0000"+
		"\u0000\u1e8a\u1e8b\u0001\u0000\u0000\u0000\u1e8b\u1e8c\u0001\u0000\u0000"+
		"\u0000\u1e8c\u1e8d\u0003\u00f0x\u0000\u1e8d\u1e8e\u0005\u01ea\u0000\u0000"+
		"\u1e8e\u1e8f\u0003\u00f0x\u0000\u1e8f\u1eaf\u0001\u0000\u0000\u0000\u1e90"+
		"\u1e92\u0003\u02a0\u0150\u0000\u1e91\u1e90\u0001\u0000\u0000\u0000\u1e91"+
		"\u1e92\u0001\u0000\u0000\u0000\u1e92\u1e93\u0001\u0000\u0000\u0000\u1e93"+
		"\u1e94\u0003\u015a\u00ad\u0000\u1e94\u1e95\u0005\u009e\u0000\u0000\u1e95"+
		"\u1e96\u0005\u01ea\u0000\u0000\u1e96\u1e97\u0003\u015a\u00ad\u0000\u1e97"+
		"\u1eaf\u0001\u0000\u0000\u0000\u1e98\u1e9a\u0003\u02a0\u0150\u0000\u1e99"+
		"\u1e98\u0001\u0000\u0000\u0000\u1e99\u1e9a\u0001\u0000\u0000\u0000\u1e9a"+
		"\u1e9b\u0001\u0000\u0000\u0000\u1e9b\u1e9c\u0003\u015a\u00ad\u0000\u1e9c"+
		"\u1e9d\u0005\u01c0\u0000\u0000\u1e9d\u1e9e\u0005\u01bc\u0000\u0000\u1e9e"+
		"\u1e9f\u0003\u00ecv\u0000\u1e9f\u1eaf\u0001\u0000\u0000\u0000\u1ea0\u1ea1"+
		"\u0005\u01f4\u0000\u0000\u1ea1\u1ea2\u0005\u01f3\u0000\u0000\u1ea2\u1ea3"+
		"\u0005\u00ad\u0000\u0000\u1ea3\u1ea4\u0003\u00f4z\u0000\u1ea4\u1ea5\u0005"+
		"\u0098\u0000\u0000\u1ea5\u1ea6\u0005\u01f9\u0000\u0000\u1ea6\u1ea7\u0003"+
		"\u027c\u013e\u0000\u1ea7\u1ea8\u0001\u0000\u0000\u0000\u1ea8\u1ea9\u0005"+
		"\u01c0\u0000\u0000\u1ea9\u1eaa\u0005\u00ad\u0000\u0000\u1eaa\u1eac\u0003"+
		"\u00f4z\u0000\u1eab\u1ead\u0005\u010a\u0000\u0000\u1eac\u1eab\u0001\u0000"+
		"\u0000\u0000\u1eac\u1ead\u0001\u0000\u0000\u0000\u1ead\u1eaf\u0001\u0000"+
		"\u0000\u0000\u1eae\u1e79\u0001\u0000\u0000\u0000\u1eae\u1e7e\u0001\u0000"+
		"\u0000\u0000\u1eae\u1e85\u0001\u0000\u0000\u0000\u1eae\u1e91\u0001\u0000"+
		"\u0000\u0000\u1eae\u1e99\u0001\u0000\u0000\u0000\u1eae\u1ea0\u0001\u0000"+
		"\u0000\u0000\u1eaf\u0413\u0001\u0000\u0000\u0000\u1eb0\u1eb1\u0005w\u0000"+
		"\u0000\u1eb1\u1eb3\u0003\u00f4z\u0000\u1eb2\u1eb4\u0003\u02c8\u0164\u0000"+
		"\u1eb3\u1eb2\u0001\u0000\u0000\u0000\u1eb3\u1eb4\u0001\u0000\u0000\u0000"+
		"\u1eb4\u0415\u0001\u0000\u0000\u0000\u1eb5\u1eb7\u0005\u01b8\u0000\u0000"+
		"\u1eb6\u1eb8\u0005\u00b1\u0000\u0000\u1eb7\u1eb6\u0001\u0000\u0000\u0000"+
		"\u1eb7\u1eb8\u0001\u0000\u0000\u0000\u1eb8\u1eb9\u0001\u0000\u0000\u0000"+
		"\u1eb9\u1eba\u0005\u00fd\u0000\u0000\u1eba\u1ebc\u0005\u01ce\u0000\u0000"+
		"\u1ebb\u1ebd\u0003\u029e\u014f\u0000\u1ebc\u1ebb\u0001\u0000\u0000\u0000"+
		"\u1ebc\u1ebd\u0001\u0000\u0000\u0000\u1ebd\u1ebe\u0001\u0000\u0000\u0000"+
		"\u1ebe\u1ebf\u0003\u0418\u020c\u0000\u1ebf\u1ec0\u0005\u01e4\u0000\u0000"+
		"\u1ec0\u1ec6\u0003J%\u0000\u1ec1\u1ec2\u0005\u01d1\u0000\u0000\u1ec2\u1ec7"+
		"\u0005o\u0000\u0000\u1ec3\u1ec4\u0005\u01d1\u0000\u0000\u1ec4\u1ec5\u0005"+
		"X\u0000\u0000\u1ec5\u1ec7\u0005o\u0000\u0000\u1ec6\u1ec1\u0001\u0000\u0000"+
		"\u0000\u1ec6\u1ec3\u0001\u0000\u0000\u0000\u1ec6\u1ec7\u0001\u0000\u0000"+
		"\u0000\u1ec7\u0417\u0001\u0000\u0000\u0000\u1ec8\u1eca\u0003\u015a\u00ad"+
		"\u0000\u1ec9\u1ecb\u0003\u0246\u0123\u0000\u1eca\u1ec9\u0001\u0000\u0000"+
		"\u0000\u1eca\u1ecb\u0001\u0000\u0000\u0000\u1ecb\u1ecd\u0001\u0000\u0000"+
		"\u0000\u1ecc\u1ece\u0003\u02de\u016f\u0000\u1ecd\u1ecc\u0001\u0000\u0000"+
		"\u0000\u1ecd\u1ece\u0001\u0000\u0000\u0000\u1ece\u1ed1\u0001\u0000\u0000"+
		"\u0000\u1ecf\u1ed0\u0005\u01d1\u0000\u0000\u1ed0\u1ed2\u0003\u0208\u0104"+
		"\u0000\u1ed1\u1ecf\u0001\u0000\u0000\u0000\u1ed1\u1ed2\u0001\u0000\u0000"+
		"\u0000\u1ed2\u1ed5\u0001\u0000\u0000\u0000\u1ed3\u1ed4\u0005\u00ad\u0000"+
		"\u0000\u1ed4\u1ed6\u0003\u00f4z\u0000\u1ed5\u1ed3\u0001\u0000\u0000\u0000"+
		"\u1ed5\u1ed6\u0001\u0000\u0000\u0000\u1ed6\u0419\u0001\u0000\u0000\u0000"+
		"\u1ed7\u1ed8\u0005\u01b9\u0000\u0000\u1ed8\u1ed9\u0005\u017c\u0000\u0000"+
		"\u1ed9\u1eda\u0003\u00f4z\u0000\u1eda\u1edb\u0005\u01e5\u0000\u0000\u1edb"+
		"\u1edc\u0003\u00eew\u0000\u1edc\u1edd\u0003\u041c\u020e\u0000\u1edd\u041b"+
		"\u0001\u0000\u0000\u0000\u1ede\u1edf\u0005\u01ea\u0000\u0000\u1edf\u1ee1"+
		"\u0003\u027c\u013e\u0000\u1ee0\u1ede\u0001\u0000\u0000\u0000\u1ee0\u1ee1"+
		"\u0001\u0000\u0000\u0000\u1ee1\u1ee7\u0001\u0000\u0000\u0000\u1ee2\u1ee3"+
		"\u0005\u01e2\u0000\u0000\u1ee3\u1ee4\u0005\u001e\u0000\u0000\u1ee4\u1ee5"+
		"\u0003\u010c\u0086\u0000\u1ee5\u1ee6\u0005\u001f\u0000\u0000\u1ee6\u1ee8"+
		"\u0001\u0000\u0000\u0000\u1ee7\u1ee2\u0001\u0000\u0000\u0000\u1ee7\u1ee8"+
		"\u0001\u0000\u0000\u0000\u1ee8\u1eef\u0001\u0000\u0000\u0000\u1ee9\u1eea"+
		"\u0005\u01d1\u0000\u0000\u1eea\u1eeb\u0005T\u0000\u0000\u1eeb\u1eec\u0005"+
		"\u001e\u0000\u0000\u1eec\u1eed\u0003\u010c\u0086\u0000\u1eed\u1eee\u0005"+
		"\u001f\u0000\u0000\u1eee\u1ef0\u0001\u0000\u0000\u0000\u1eef\u1ee9\u0001"+
		"\u0000\u0000\u0000\u1eef\u1ef0\u0001\u0000\u0000\u0000\u1ef0\u1ef5\u0001"+
		"\u0000\u0000\u0000\u1ef1\u1ef2\u0005\u009e\u0000\u0000\u1ef2\u1ef3\u0005"+
		"\u01ea\u0000\u0000\u1ef3\u1ef5\u0003\u00f4z\u0000\u1ef4\u1ee0\u0001\u0000"+
		"\u0000\u0000\u1ef4\u1ef1\u0001\u0000\u0000\u0000\u1ef5\u041d\u0001\u0000"+
		"\u0000\u0000\u1ef6\u1ef7\u0005\u016c\u0000\u0000\u1ef7\u1ef8\u0005\u00fd"+
		"\u0000\u0000\u1ef8\u1efa\u0005\u01ce\u0000\u0000\u1ef9\u1efb\u0005i\u0000"+
		"\u0000\u1efa\u1ef9\u0001\u0000\u0000\u0000\u1efa\u1efb\u0001\u0000\u0000"+
		"\u0000\u1efb\u1efc\u0001\u0000\u0000\u0000\u1efc\u1f02\u0003\u015a\u00ad"+
		"\u0000\u1efd\u1efe\u0005\u01d1\u0000\u0000\u1efe\u1f03\u0005o\u0000\u0000"+
		"\u1eff\u1f00\u0005\u01d1\u0000\u0000\u1f00\u1f01\u0005X\u0000\u0000\u1f01"+
		"\u1f03\u0005o\u0000\u0000\u1f02\u1efd\u0001\u0000\u0000\u0000\u1f02\u1eff"+
		"\u0001\u0000\u0000\u0000\u1f02\u1f03\u0001\u0000\u0000\u0000\u1f03\u041f"+
		"\u0001\u0000\u0000\u0000\u1f04\u1f05\u0005\u01b9\u0000\u0000\u1f05\u1f06"+
		"\u0005\u01cd\u0000\u0000\u1f06\u1f07\u0003\u03f4\u01fa\u0000\u1f07\u1f08"+
		"\u0003\u0422\u0211\u0000\u1f08\u0421\u0001\u0000\u0000\u0000\u1f09\u1f0b"+
		"\u0003\u0424\u0212\u0000\u1f0a\u1f0c\u0005\u00a2\u0000\u0000\u1f0b\u1f0a"+
		"\u0001\u0000\u0000\u0000\u1f0b\u1f0c\u0001\u0000\u0000\u0000\u1f0c\u1f1e"+
		"\u0001\u0000\u0000\u0000\u1f0d\u1f0e\u0005\u009e\u0000\u0000\u1f0e\u1f0f"+
		"\u0005\u01ea\u0000\u0000\u1f0f\u1f1e\u0003\u00f4z\u0000\u1f10\u1f12\u0005"+
		"X\u0000\u0000\u1f11\u1f10\u0001\u0000\u0000\u0000\u1f11\u1f12\u0001\u0000"+
		"\u0000\u0000\u1f12\u1f13\u0001\u0000\u0000\u0000\u1f13\u1f14\u0005t\u0000"+
		"\u0000\u1f14\u1f15\u0005\u01e5\u0000\u0000\u1f15\u1f16\u0005y\u0000\u0000"+
		"\u1f16\u1f1e\u0003\u00f4z\u0000\u1f17\u1f18\u0005\u01c0\u0000\u0000\u1f18"+
		"\u1f19\u0005\u01bc\u0000\u0000\u1f19\u1f1e\u0003\u00f4z\u0000\u1f1a\u1f1b"+
		"\u0005\u0099\u0000\u0000\u1f1b\u1f1c\u0005\u01ea\u0000\u0000\u1f1c\u1f1e"+
		"\u0003\u0228\u0114\u0000\u1f1d\u1f09\u0001\u0000\u0000\u0000\u1f1d\u1f0d"+
		"\u0001\u0000\u0000\u0000\u1f1d\u1f11\u0001\u0000\u0000\u0000\u1f1d\u1f17"+
		"\u0001\u0000\u0000\u0000\u1f1d\u1f1a\u0001\u0000\u0000\u0000\u1f1e\u0423"+
		"\u0001\u0000\u0000\u0000\u1f1f\u1f21\u0003\u0294\u014a\u0000\u1f20\u1f1f"+
		"\u0001\u0000\u0000\u0000\u1f21\u1f22\u0001\u0000\u0000\u0000\u1f22\u1f20"+
		"\u0001\u0000\u0000\u0000\u1f22\u1f23\u0001\u0000\u0000\u0000\u1f23\u0425"+
		"\u0001\u0000\u0000\u0000\u1f24\u1f25\u0005\u01b9\u0000\u0000\u1f25\u1f26"+
		"\u0005\u01cb\u0000\u0000\u1f26\u1f27\u0003\u03f4\u01fa\u0000\u1f27\u1f28"+
		"\u0003\u0428\u0214\u0000\u1f28\u0427\u0001\u0000\u0000\u0000\u1f29\u1f2b"+
		"\u0003\u0424\u0212\u0000\u1f2a\u1f2c\u0005\u00a2\u0000\u0000\u1f2b\u1f2a"+
		"\u0001\u0000\u0000\u0000\u1f2b\u1f2c\u0001\u0000\u0000\u0000\u1f2c\u1f3e"+
		"\u0001\u0000\u0000\u0000\u1f2d\u1f2e\u0005\u009e\u0000\u0000\u1f2e\u1f2f"+
		"\u0005\u01ea\u0000\u0000\u1f2f\u1f3e\u0003\u00f4z\u0000\u1f30\u1f32\u0005"+
		"X\u0000\u0000\u1f31\u1f30\u0001\u0000\u0000\u0000\u1f31\u1f32\u0001\u0000"+
		"\u0000\u0000\u1f32\u1f33\u0001\u0000\u0000\u0000\u1f33\u1f34\u0005t\u0000"+
		"\u0000\u1f34\u1f35\u0005\u01e5\u0000\u0000\u1f35\u1f36\u0005y\u0000\u0000"+
		"\u1f36\u1f3e\u0003\u00f4z\u0000\u1f37\u1f38\u0005\u01c0\u0000\u0000\u1f38"+
		"\u1f39\u0005\u01bc\u0000\u0000\u1f39\u1f3e\u0003\u00f4z\u0000\u1f3a\u1f3b"+
		"\u0005\u0099\u0000\u0000\u1f3b\u1f3c\u0005\u01ea\u0000\u0000\u1f3c\u1f3e"+
		"\u0003\u0228\u0114\u0000\u1f3d\u1f29\u0001\u0000\u0000\u0000\u1f3d\u1f2d"+
		"\u0001\u0000\u0000\u0000\u1f3d\u1f31\u0001\u0000\u0000\u0000\u1f3d\u1f37"+
		"\u0001\u0000\u0000\u0000\u1f3d\u1f3a\u0001\u0000\u0000\u0000\u1f3e\u0429"+
		"\u0001\u0000\u0000\u0000\u1f3f\u1f40\u0005\u01b9\u0000\u0000\u1f40\u1f41"+
		"\u0005\u0160\u0000\u0000\u1f41\u1f4d\u0003\u00f4z\u0000\u1f42\u1f43\u0005"+
		"\u009e\u0000\u0000\u1f43\u1f44\u0005\u01ea\u0000\u0000\u1f44\u1f4e\u0003"+
		"\u00f4z\u0000\u1f45\u1f46\u0005\u0099\u0000\u0000\u1f46\u1f47\u0005\u01ea"+
		"\u0000\u0000\u1f47\u1f4e\u0003\u0228\u0114\u0000\u1f48\u1f49\u0005\u01c0"+
		"\u0000\u0000\u1f49\u1f4e\u0003\u0252\u0129\u0000\u1f4a\u1f4b\u00073\u0000"+
		"\u0000\u1f4b\u1f4c\u0005\u01c1\u0000\u0000\u1f4c\u1f4e\u0003\u0292\u0149"+
		"\u0000\u1f4d\u1f42\u0001\u0000\u0000\u0000\u1f4d\u1f45\u0001\u0000\u0000"+
		"\u0000\u1f4d\u1f48\u0001\u0000\u0000\u0000\u1f4d\u1f4a\u0001\u0000\u0000"+
		"\u0000\u1f4e\u042b\u0001\u0000\u0000\u0000\u1f4f\u1f50\u0005\u01b9\u0000"+
		"\u0000\u1f50\u1f51\u0005\u00a3\u0000\u0000\u1f51\u1f52\u0003\u03f4\u01fa"+
		"\u0000\u1f52\u1f53\u0003\u0422\u0211\u0000\u1f53\u042d\u0001\u0000\u0000"+
		"\u0000\u1f54\u1f55\u0005\u01b9\u0000\u0000\u1f55\u1f56\u0005\u00a4\u0000"+
		"\u0000\u1f56\u1f57\u0003\u00f4z\u0000\u1f57\u1f58\u0005\u01e5\u0000\u0000"+
		"\u1f58\u1f59\u0003\u015a\u00ad\u0000\u1f59\u1f5a\u0005\u009e\u0000\u0000"+
		"\u1f5a\u1f5b\u0005\u01ea\u0000\u0000\u1f5b\u1f5c\u0003\u00f4z\u0000\u1f5c"+
		"\u042f\u0001\u0000\u0000\u0000\u1f5d\u1f5e\u0005\u01b9\u0000\u0000\u1f5e"+
		"\u1f60\u0005\u00a6\u0000\u0000\u1f5f\u1f61\u0003\u02a0\u0150\u0000\u1f60"+
		"\u1f5f\u0001\u0000\u0000\u0000\u1f60\u1f61\u0001\u0000\u0000\u0000\u1f61"+
		"\u1f62\u0001\u0000\u0000\u0000\u1f62\u1f63\u0003\u015a\u00ad\u0000\u1f63"+
		"\u1f64\u0003\u0432\u0219\u0000\u1f64\u0431\u0001\u0000\u0000\u0000\u1f65"+
		"\u1f66\u0005\u0099\u0000\u0000\u1f66\u1f67\u0005\u01ea\u0000\u0000\u1f67"+
		"\u1f70\u0003\u0228\u0114\u0000\u1f68\u1f70\u0003\u0242\u0121\u0000\u1f69"+
		"\u1f6a\u0005\u009e\u0000\u0000\u1f6a\u1f6b\u0005\u01ea\u0000\u0000\u1f6b"+
		"\u1f70\u0003\u00f4z\u0000\u1f6c\u1f6d\u0005\u01c0\u0000\u0000\u1f6d\u1f6e"+
		"\u0005\u01bc\u0000\u0000\u1f6e\u1f70\u0003\u00f4z\u0000\u1f6f\u1f65\u0001"+
		"\u0000\u0000\u0000\u1f6f\u1f68\u0001\u0000\u0000\u0000\u1f6f\u1f69\u0001"+
		"\u0000\u0000\u0000\u1f6f\u1f6c\u0001\u0000\u0000\u0000\u1f70\u0433\u0001"+
		"\u0000\u0000\u0000\u1f71\u1f72\u0005\u01b9\u0000\u0000\u1f72\u1f73\u0005"+
		"\u0177\u0000\u0000\u1f73\u1f7f\u0003\u00f4z\u0000\u1f74\u1f75\u0003\u0436"+
		"\u021b\u0000\u1f75\u1f76\u0003\u038e\u01c7\u0000\u1f76\u1f80\u0001\u0000"+
		"\u0000\u0000\u1f77\u1f80\u0003\u0436\u021b\u0000\u1f78\u1f80\u0003\u038e"+
		"\u01c7\u0000\u1f79\u1f7a\u0005\u009e\u0000\u0000\u1f7a\u1f7b\u0005\u01ea"+
		"\u0000\u0000\u1f7b\u1f80\u0003\u00f4z\u0000\u1f7c\u1f7d\u0005\u0099\u0000"+
		"\u0000\u1f7d\u1f7e\u0005\u01ea\u0000\u0000\u1f7e\u1f80\u0003\u0228\u0114"+
		"\u0000\u1f7f\u1f74\u0001\u0000\u0000\u0000\u1f7f\u1f77\u0001\u0000\u0000"+
		"\u0000\u1f7f\u1f78\u0001\u0000\u0000\u0000\u1f7f\u1f79\u0001\u0000\u0000"+
		"\u0000\u1f7f\u1f7c\u0001\u0000\u0000\u0000\u1f80\u0435\u0001\u0000\u0000"+
		"\u0000\u1f81\u1f82\u0005\u00f8\u0000\u0000\u1f82\u1f83\u00074\u0000\u0000"+
		"\u1f83\u0437\u0001\u0000\u0000\u0000\u1f84\u1f85\u0005\u01b9\u0000\u0000"+
		"\u1f85\u1f9d\u0005\u00ab\u0000\u0000\u1f86\u1f88\u0003\u02a0\u0150\u0000"+
		"\u1f87\u1f86\u0001\u0000\u0000\u0000\u1f87\u1f88\u0001\u0000\u0000\u0000"+
		"\u1f88\u1f89\u0001\u0000\u0000\u0000\u1f89\u1f8a\u0003\u01e0\u00f0\u0000"+
		"\u1f8a\u1f8b\u0005\u01c0\u0000\u0000\u1f8b\u1f8c\u0005\u00ab\u0000\u0000"+
		"\u1f8c\u1f8d\u0003\u021e\u010f\u0000\u1f8d\u1f9e\u0001\u0000\u0000\u0000"+
		"\u1f8e\u1f8f\u0003\u01e0\u00f0\u0000\u1f8f\u1f90\u0005\u009e\u0000\u0000"+
		"\u1f90\u1f91\u0005\u01ea\u0000\u0000\u1f91\u1f92\u0003\u00f4z\u0000\u1f92"+
		"\u1f9e\u0001\u0000\u0000\u0000\u1f93\u1f94\u0003\u01e0\u00f0\u0000\u1f94"+
		"\u1f95\u0005\u01c0\u0000\u0000\u1f95\u1f96\u0005\u01bc\u0000\u0000\u1f96"+
		"\u1f97\u0003\u00f4z\u0000\u1f97\u1f9e\u0001\u0000\u0000\u0000\u1f98\u1f99"+
		"\u0003\u01e0\u00f0\u0000\u1f99\u1f9a\u0005\u0099\u0000\u0000\u1f9a\u1f9b"+
		"\u0005\u01ea\u0000\u0000\u1f9b\u1f9c\u0003\u0228\u0114\u0000\u1f9c\u1f9e"+
		"\u0001\u0000\u0000\u0000\u1f9d\u1f87\u0001\u0000\u0000\u0000\u1f9d\u1f8e"+
		"\u0001\u0000\u0000\u0000\u1f9d\u1f93\u0001\u0000\u0000\u0000\u1f9d\u1f98"+
		"\u0001\u0000\u0000\u0000\u1f9e\u0439\u0001\u0000\u0000\u0000\u1f9f\u1fa0"+
		"\u0005\u01b9\u0000\u0000\u1fa0\u1fa1\u0005\u0178\u0000\u0000\u1fa1\u1fc8"+
		"\u0003\u00f4z\u0000\u1fa2\u1fa3\u0005\u009e\u0000\u0000\u1fa3\u1fa4\u0005"+
		"\u01ea\u0000\u0000\u1fa4\u1fc9\u0003\u00f4z\u0000\u1fa5\u1fa6\u0005\u0099"+
		"\u0000\u0000\u1fa6\u1fa7\u0005\u01ea\u0000\u0000\u1fa7\u1fc9\u0003\u0228"+
		"\u0114\u0000\u1fa8\u1fa9\u0005\u01c0\u0000\u0000\u1fa9\u1fc9\u0003\u0252"+
		"\u0129\u0000\u1faa\u1fab\u0005\u0147\u0000\u0000\u1fab\u1fc9\u0005\u024f"+
		"\u0000\u0000\u1fac\u1fad\u0005\u016c\u0000\u0000\u1fad\u1fb0\u0005\u0160"+
		"\u0000\u0000\u1fae\u1faf\u0005\u01d1\u0000\u0000\u1faf\u1fb1\u0003\u0252"+
		"\u0129\u0000\u1fb0\u1fae\u0001\u0000\u0000\u0000\u1fb0\u1fb1\u0001\u0000"+
		"\u0000\u0000\u1fb1\u1fc9\u0001\u0000\u0000\u0000\u1fb2\u1fb3\u0005\u01c0"+
		"\u0000\u0000\u1fb3\u1fb4\u0005\u0160\u0000\u0000\u1fb4\u1fb7\u0003\u043c"+
		"\u021e\u0000\u1fb5\u1fb6\u0005\u01d1\u0000\u0000\u1fb6\u1fb8\u0003\u0252"+
		"\u0129\u0000\u1fb7\u1fb5\u0001\u0000\u0000\u0000\u1fb7\u1fb8\u0001\u0000"+
		"\u0000\u0000\u1fb8\u1fc9\u0001\u0000\u0000\u0000\u1fb9\u1fba\u0005\u01bf"+
		"\u0000\u0000\u1fba\u1fbb\u0005\u0160\u0000\u0000\u1fbb\u1fbe\u0003\u043c"+
		"\u021e\u0000\u1fbc\u1fbd\u0005\u01d1\u0000\u0000\u1fbd\u1fbf\u0003\u0252"+
		"\u0129\u0000\u1fbe\u1fbc\u0001\u0000\u0000\u0000\u1fbe\u1fbf\u0001\u0000"+
		"\u0000\u0000\u1fbf\u1fc9\u0001\u0000\u0000\u0000\u1fc0\u1fc1\u0005\u01ba"+
		"\u0000\u0000\u1fc1\u1fc2\u0005\u0160\u0000\u0000\u1fc2\u1fc5\u0003\u043c"+
		"\u021e\u0000\u1fc3\u1fc4\u0005\u01d1\u0000\u0000\u1fc4\u1fc6\u0003\u0252"+
		"\u0129\u0000\u1fc5\u1fc3\u0001\u0000\u0000\u0000\u1fc5\u1fc6\u0001\u0000"+
		"\u0000\u0000\u1fc6\u1fc9\u0001\u0000\u0000\u0000\u1fc7\u1fc9\u0007(\u0000"+
		"\u0000\u1fc8\u1fa2\u0001\u0000\u0000\u0000\u1fc8\u1fa5\u0001\u0000\u0000"+
		"\u0000\u1fc8\u1fa8\u0001\u0000\u0000\u0000\u1fc8\u1faa\u0001\u0000\u0000"+
		"\u0000\u1fc8\u1fac\u0001\u0000\u0000\u0000\u1fc8\u1fb2\u0001\u0000\u0000"+
		"\u0000\u1fc8\u1fb9\u0001\u0000\u0000\u0000\u1fc8\u1fc0\u0001\u0000\u0000"+
		"\u0000\u1fc8\u1fc7\u0001\u0000\u0000\u0000\u1fc9\u043b\u0001\u0000\u0000"+
		"\u0000\u1fca\u1fcf\u0003\u043e\u021f\u0000\u1fcb\u1fcc\u0005$\u0000\u0000"+
		"\u1fcc\u1fce\u0003\u043e\u021f\u0000\u1fcd\u1fcb\u0001\u0000\u0000\u0000"+
		"\u1fce\u1fd1\u0001\u0000\u0000\u0000\u1fcf\u1fcd\u0001\u0000\u0000\u0000"+
		"\u1fcf\u1fd0\u0001\u0000\u0000\u0000\u1fd0\u043d\u0001\u0000\u0000\u0000"+
		"\u1fd1\u1fcf\u0001\u0000\u0000\u0000\u1fd2\u1fd3\u0003\u0258\u012c\u0000"+
		"\u1fd3\u043f\u0001\u0000\u0000\u0000\u1fd4\u1fd5\u0005\u01b9\u0000\u0000"+
		"\u1fd5\u1fda\u0005\u011a\u0000\u0000\u1fd6\u1fd7\u0005\u01c0\u0000\u0000"+
		"\u1fd7\u1fdb\u0003\u028a\u0145\u0000\u1fd8\u1fd9\u0005\u00a0\u0000\u0000"+
		"\u1fd9\u1fdb\u0003\u0290\u0148\u0000\u1fda\u1fd6\u0001\u0000\u0000\u0000"+
		"\u1fda\u1fd8\u0001\u0000\u0000\u0000\u1fdb\u0441\u0001\u0000\u0000\u0000"+
		"\u1fdc\u1fdd\u0005\u01b9\u0000\u0000\u1fdd\u1fde\u0005\u00ad\u0000\u0000"+
		"\u1fde\u1fe8\u0003\u00f4z\u0000\u1fdf\u1fe9\u0005\u01c0\u0000\u0000\u1fe0"+
		"\u1fe1\u0005\u00a0\u0000\u0000\u1fe1\u1fe9\u0003\u0208\u0104\u0000\u1fe2"+
		"\u1fe3\u0005\u009e\u0000\u0000\u1fe3\u1fe4\u0005\u01ea\u0000\u0000\u1fe4"+
		"\u1fe9\u0003\u00f4z\u0000\u1fe5\u1fe6\u0005\u0099\u0000\u0000\u1fe6\u1fe7"+
		"\u0005\u01ea\u0000\u0000\u1fe7\u1fe9\u0003\u0228\u0114\u0000\u1fe8\u1fdf"+
		"\u0001\u0000\u0000\u0000\u1fe8\u1fe0\u0001\u0000\u0000\u0000\u1fe8\u1fe2"+
		"\u0001\u0000\u0000\u0000\u1fe8\u1fe5\u0001\u0000\u0000\u0000\u1fe9\u0443"+
		"\u0001\u0000\u0000\u0000\u1fea\u1feb\u0005\u01b9\u0000\u0000\u1feb\u1fec"+
		"\u0005\u0231\u0000\u0000\u1fec\u1fed\u0005\u0179\u0000\u0000\u1fed\u1fee"+
		"\u0005\u0131\u0000\u0000\u1fee\u1fef\u0003\u01e0\u00f0\u0000\u1fef\u1ff0"+
		"\u0003\u0446\u0223\u0000\u1ff0\u0445\u0001\u0000\u0000\u0000\u1ff1\u1ff2"+
		"\u0005\u009e\u0000\u0000\u1ff2\u1ff3\u0005\u01ea\u0000\u0000\u1ff3\u2016"+
		"\u0003\u00f4z\u0000\u1ff4\u1ff5\u0005\u01c0\u0000\u0000\u1ff5\u1ff6\u0005"+
		"\u01bc\u0000\u0000\u1ff6\u2016\u0003\u00f4z\u0000\u1ff7\u1ff8\u0005\u0099"+
		"\u0000\u0000\u1ff8\u1ff9\u0005\u01ea\u0000\u0000\u1ff9\u2016\u0003\u0228"+
		"\u0114\u0000\u1ffa\u1ffb\u00075\u0000\u0000\u1ffb\u1ffc\u0005\u0155\u0000"+
		"\u0000\u1ffc\u1ffd\u0005\u01e9\u0000\u0000\u1ffd\u1fff\u0003\u01e4\u00f2"+
		"\u0000\u1ffe\u2000\u0005\u01d1\u0000\u0000\u1fff\u1ffe\u0001\u0000\u0000"+
		"\u0000\u1fff\u2000\u0001\u0000\u0000\u0000\u2000\u2001\u0001\u0000\u0000"+
		"\u0000\u2001\u2002\u0003\u0448\u0224\u0000\u2002\u2016\u0001\u0000\u0000"+
		"\u0000\u2003\u2004\u0005\u01b9\u0000\u0000\u2004\u2007\u0005\u0155\u0000"+
		"\u0000\u2005\u2006\u0005\u01e9\u0000\u0000\u2006\u2008\u0003\u01e4\u00f2"+
		"\u0000\u2007\u2005\u0001\u0000\u0000\u0000\u2007\u2008\u0001\u0000\u0000"+
		"\u0000\u2008\u2009\u0001\u0000\u0000\u0000\u2009\u200a\u0005\u016a\u0000"+
		"\u0000\u200a\u200b\u0003\u01e0\u00f0\u0000\u200b\u200c\u0005\u01d1\u0000"+
		"\u0000\u200c\u200d\u0003\u01e0\u00f0\u0000\u200d\u2016\u0001\u0000\u0000"+
		"\u0000\u200e\u200f\u0005\u01ba\u0000\u0000\u200f\u2011\u0005\u0155\u0000"+
		"\u0000\u2010\u2012\u0003\u02a0\u0150\u0000\u2011\u2010\u0001\u0000\u0000"+
		"\u0000\u2011\u2012\u0001\u0000\u0000\u0000\u2012\u2013\u0001\u0000\u0000"+
		"\u0000\u2013\u2014\u0005\u01e9\u0000\u0000\u2014\u2016\u0003\u01e4\u00f2"+
		"\u0000\u2015\u1ff1\u0001\u0000\u0000\u0000\u2015\u1ff4\u0001\u0000\u0000"+
		"\u0000\u2015\u1ff7\u0001\u0000\u0000\u0000\u2015\u1ffa\u0001\u0000\u0000"+
		"\u0000\u2015\u2003\u0001\u0000\u0000\u0000\u2015\u200e\u0001\u0000\u0000"+
		"\u0000\u2016\u0447\u0001\u0000\u0000\u0000\u2017\u201c\u0003\u01e0\u00f0"+
		"\u0000\u2018\u2019\u0005$\u0000\u0000\u2019\u201b\u0003\u01e0\u00f0\u0000"+
		"\u201a\u2018\u0001\u0000\u0000\u0000\u201b\u201e\u0001\u0000\u0000\u0000"+
		"\u201c\u201a\u0001\u0000\u0000\u0000\u201c\u201d\u0001\u0000\u0000\u0000"+
		"\u201d\u0449\u0001\u0000\u0000\u0000\u201e\u201c\u0001\u0000\u0000\u0000"+
		"\u201f\u2020\u0005\u01b9\u0000\u0000\u2020\u2021\u0005\u0231\u0000\u0000"+
		"\u2021\u2022\u0005\u0179\u0000\u0000\u2022\u2023\u0005\u0134\u0000\u0000"+
		"\u2023\u202e\u0003\u01e0\u00f0\u0000\u2024\u2025\u0005\u009e\u0000\u0000"+
		"\u2025\u2026\u0005\u01ea\u0000\u0000\u2026\u202f\u0003\u00f4z\u0000\u2027"+
		"\u2028\u0005\u01c0\u0000\u0000\u2028\u2029\u0005\u01bc\u0000\u0000\u2029"+
		"\u202f\u0003\u00f4z\u0000\u202a\u202b\u0005\u0099\u0000\u0000\u202b\u202c"+
		"\u0005\u01ea\u0000\u0000\u202c\u202f\u0003\u0228\u0114\u0000\u202d\u202f"+
		"\u0003\u0252\u0129\u0000\u202e\u2024\u0001\u0000\u0000\u0000\u202e\u2027"+
		"\u0001\u0000\u0000\u0000\u202e\u202a\u0001\u0000\u0000\u0000\u202e\u202d"+
		"\u0001\u0000\u0000\u0000\u202f\u044b\u0001\u0000\u0000\u0000\u2030\u2031"+
		"\u0005\u01b9\u0000\u0000\u2031\u2032\u0005\u0231\u0000\u0000\u2032\u2033"+
		"\u0005\u0179\u0000\u0000\u2033\u2034\u0005\u015d\u0000\u0000\u2034\u203b"+
		"\u0003\u01e0\u00f0\u0000\u2035\u2036\u0005\u009e\u0000\u0000\u2036\u2037"+
		"\u0005\u01ea\u0000\u0000\u2037\u203c\u0003\u00f4z\u0000\u2038\u2039\u0005"+
		"\u01c0\u0000\u0000\u2039\u203a\u0005\u01bc\u0000\u0000\u203a\u203c\u0003"+
		"\u00f4z\u0000\u203b\u2035\u0001\u0000\u0000\u0000\u203b\u2038\u0001\u0000"+
		"\u0000\u0000\u203c\u044d\u0001\u0000\u0000\u0000\u203d\u203e\u0005\u01b9"+
		"\u0000\u0000\u203e\u203f\u0005\u0231\u0000\u0000\u203f\u2040\u0005\u0179"+
		"\u0000\u0000\u2040\u2041\u0005\u0188\u0000\u0000\u2041\u2048\u0003\u01e0"+
		"\u00f0\u0000\u2042\u2043\u0005\u009e\u0000\u0000\u2043\u2044\u0005\u01ea"+
		"\u0000\u0000\u2044\u2049\u0003\u00f4z\u0000\u2045\u2046\u0005\u01c0\u0000"+
		"\u0000\u2046\u2047\u0005\u01bc\u0000\u0000\u2047\u2049\u0003\u00f4z\u0000"+
		"\u2048\u2042\u0001\u0000\u0000\u0000\u2048\u2045\u0001\u0000\u0000\u0000"+
		"\u2049\u044f\u0001\u0000\u0000\u0000\u204a\u204b\u0005\u01b9\u0000\u0000"+
		"\u204b\u204c\u0005\u01cc\u0000\u0000\u204c\u204d\u0003\u00f4z\u0000\u204d"+
		"\u204e\u0005\u01e5\u0000\u0000\u204e\u2059\u0003\u015a\u00ad\u0000\u204f"+
		"\u2050\u0005\u009e\u0000\u0000\u2050\u2051\u0005\u01ea\u0000\u0000\u2051"+
		"\u205a\u0003\u00f4z\u0000\u2052\u2054\u0005X\u0000\u0000\u2053\u2052\u0001"+
		"\u0000\u0000\u0000\u2053\u2054\u0001\u0000\u0000\u0000\u2054\u2055\u0001"+
		"\u0000\u0000\u0000\u2055\u2056\u0005t\u0000\u0000\u2056\u2057\u0005\u01e5"+
		"\u0000\u0000\u2057\u2058\u0005y\u0000\u0000\u2058\u205a\u0003\u00f4z\u0000"+
		"\u2059\u204f\u0001\u0000\u0000\u0000\u2059\u2053\u0001\u0000\u0000\u0000"+
		"\u205a\u0451\u0001\u0000\u0000\u0000\u205b\u205c\u0005\u01b9\u0000\u0000"+
		"\u205c\u205d\u0005\u022d\u0000\u0000\u205d\u205e\u0003\u01e0\u00f0\u0000"+
		"\u205e\u205f\u0003\u0454\u022a\u0000\u205f\u0453\u0001\u0000\u0000\u0000"+
		"\u2060\u2087\u0003\u0456\u022b\u0000\u2061\u2062\u0005\u01bf\u0000\u0000"+
		"\u2062\u2064\u0005\u0239\u0000\u0000\u2063\u2065\u0003\u029e\u014f\u0000"+
		"\u2064\u2063\u0001\u0000\u0000\u0000\u2064\u2065\u0001\u0000\u0000\u0000"+
		"\u2065\u2066\u0001\u0000\u0000\u0000\u2066\u2069\u0005\u024f\u0000\u0000"+
		"\u2067\u2068\u00076\u0000\u0000\u2068\u206a\u0005\u024f\u0000\u0000\u2069"+
		"\u2067\u0001\u0000\u0000\u0000\u2069\u206a\u0001\u0000\u0000\u0000\u206a"+
		"\u2087\u0001\u0000\u0000\u0000\u206b\u206c\u0005\u009e\u0000\u0000\u206c"+
		"\u206d\u0005\u0239\u0000\u0000\u206d\u206e\u0005\u024f\u0000\u0000\u206e"+
		"\u206f\u0005\u01ea\u0000\u0000\u206f\u2087\u0005\u024f\u0000\u0000\u2070"+
		"\u2071\u0005\u009e\u0000\u0000\u2071\u2072\u0005\u01ea\u0000\u0000\u2072"+
		"\u2087\u0003\u00f4z\u0000\u2073\u2074\u0005\u009e\u0000\u0000\u2074\u2075"+
		"\u0005\u0122\u0000\u0000\u2075\u2076\u0003\u00f4z\u0000\u2076\u2077\u0005"+
		"\u01ea\u0000\u0000\u2077\u2079\u0003\u00f4z\u0000\u2078\u207a\u0003\u0394"+
		"\u01ca\u0000\u2079\u2078\u0001\u0000\u0000\u0000\u2079\u207a\u0001\u0000"+
		"\u0000\u0000\u207a\u2087\u0001\u0000\u0000\u0000\u207b\u207c\u0005\u01c0"+
		"\u0000\u0000\u207c\u207d\u0005\u01bc\u0000\u0000\u207d\u2087\u0003\u00f4"+
		"z\u0000\u207e\u207f\u0005\u01c0\u0000\u0000\u207f\u2080\u0005\u001e\u0000"+
		"\u0000\u2080\u2081\u0003\u045a\u022d\u0000\u2081\u2082\u0005\u001f\u0000"+
		"\u0000\u2082\u2087\u0001\u0000\u0000\u0000\u2083\u2084\u0005\u0099\u0000"+
		"\u0000\u2084\u2085\u0005\u01ea\u0000\u0000\u2085\u2087\u0003\u0228\u0114"+
		"\u0000\u2086\u2060\u0001\u0000\u0000\u0000\u2086\u2061\u0001\u0000\u0000"+
		"\u0000\u2086\u206b\u0001\u0000\u0000\u0000\u2086\u2070\u0001\u0000\u0000"+
		"\u0000\u2086\u2073\u0001\u0000\u0000\u0000\u2086\u207b\u0001\u0000\u0000"+
		"\u0000\u2086\u207e\u0001\u0000\u0000\u0000\u2086\u2083\u0001\u0000\u0000"+
		"\u0000\u2087\u0455\u0001\u0000\u0000\u0000\u2088\u208b\u0003\u0458\u022c"+
		"\u0000\u2089\u208a\u0005$\u0000\u0000\u208a\u208c\u0003\u0458\u022c\u0000"+
		"\u208b\u2089\u0001\u0000\u0000\u0000\u208b\u208c\u0001\u0000\u0000\u0000"+
		"\u208c\u0457\u0001\u0000\u0000\u0000\u208d\u208e\u0005\u01bf\u0000\u0000"+
		"\u208e\u208f\u0005\u0122\u0000\u0000\u208f\u2091\u0003\u01dc\u00ee\u0000"+
		"\u2090\u2092\u0003\u0394\u01ca\u0000\u2091\u2090\u0001\u0000\u0000\u0000"+
		"\u2091\u2092\u0001\u0000\u0000\u0000\u2092\u20ab\u0001\u0000\u0000\u0000"+
		"\u2093\u2094\u0005\u01ba\u0000\u0000\u2094\u2096\u0005\u0122\u0000\u0000"+
		"\u2095\u2097\u0003\u02a0\u0150\u0000\u2096\u2095\u0001\u0000\u0000\u0000"+
		"\u2096\u2097\u0001\u0000\u0000\u0000\u2097\u2098\u0001\u0000\u0000\u0000"+
		"\u2098\u209a\u0003\u015c\u00ae\u0000\u2099\u209b\u0003\u0394\u01ca\u0000"+
		"\u209a\u2099\u0001\u0000\u0000\u0000\u209a\u209b\u0001\u0000\u0000\u0000"+
		"\u209b\u20ab\u0001\u0000\u0000\u0000\u209c\u209d\u0005\u01b9\u0000\u0000"+
		"\u209d\u209e\u0005\u0122\u0000\u0000\u209e\u20a0\u0003\u015c\u00ae\u0000"+
		"\u209f\u20a1\u0003\u0398\u01cc\u0000\u20a0\u209f\u0001\u0000\u0000\u0000"+
		"\u20a0\u20a1\u0001\u0000\u0000\u0000\u20a1\u20a2\u0001\u0000\u0000\u0000"+
		"\u20a2\u20a3\u0005\u022d\u0000\u0000\u20a3\u20a5\u0003\u017e\u00bf\u0000"+
		"\u20a4\u20a6\u0003\u01de\u00ef\u0000\u20a5\u20a4\u0001\u0000\u0000\u0000"+
		"\u20a5\u20a6\u0001\u0000\u0000\u0000\u20a6\u20a8\u0001\u0000\u0000\u0000"+
		"\u20a7\u20a9\u0003\u0394\u01ca\u0000\u20a8\u20a7\u0001\u0000\u0000\u0000"+
		"\u20a8\u20a9\u0001\u0000\u0000\u0000\u20a9\u20ab\u0001\u0000\u0000\u0000"+
		"\u20aa\u208d\u0001\u0000\u0000\u0000\u20aa\u2093\u0001\u0000\u0000\u0000"+
		"\u20aa\u209c\u0001\u0000\u0000\u0000\u20ab\u0459\u0001\u0000\u0000\u0000"+
		"\u20ac\u20b1\u0003\u045c\u022e\u0000\u20ad\u20ae\u0005$\u0000\u0000\u20ae"+
		"\u20b0\u0003\u045c\u022e\u0000\u20af\u20ad\u0001\u0000\u0000\u0000\u20b0"+
		"\u20b3\u0001\u0000\u0000\u0000\u20b1\u20af\u0001\u0000\u0000\u0000\u20b1"+
		"\u20b2\u0001\u0000\u0000\u0000\u20b2\u045b\u0001\u0000\u0000\u0000\u20b3"+
		"\u20b1\u0001\u0000\u0000\u0000\u20b4\u20b5\u00077\u0000\u0000\u20b5\u20b8"+
		"\u0005\u0016\u0000\u0000\u20b6\u20b9\u0005\u0115\u0000\u0000\u20b7\u20b9"+
		"\u0003\u045e\u022f\u0000\u20b8\u20b6\u0001\u0000\u0000\u0000\u20b8\u20b7"+
		"\u0001\u0000\u0000\u0000\u20b9\u045d\u0001\u0000\u0000\u0000\u20ba\u20c0"+
		"\u0003\u0210\u0108\u0000\u20bb\u20c0\u0003\u00deo\u0000\u20bc\u20c0\u0003"+
		"\u0136\u009b\u0000\u20bd\u20c0\u0003\u0232\u0119\u0000\u20be\u20c0\u0005"+
		"\u024f\u0000\u0000\u20bf\u20ba\u0001\u0000\u0000\u0000\u20bf\u20bb\u0001"+
		"\u0000\u0000\u0000\u20bf\u20bc\u0001\u0000\u0000\u0000\u20bf\u20bd\u0001"+
		"\u0000\u0000\u0000\u20bf\u20be\u0001\u0000\u0000\u0000\u20c0\u045f\u0001"+
		"\u0000\u0000\u0000\u20c1\u20c2\u0005\u01b9\u0000\u0000\u20c2\u20c3\u0005"+
		"a\u0000\u0000\u20c3\u20c4\u0005\u0155\u0000\u0000\u20c4\u20c5\u0005\u01e9"+
		"\u0000\u0000\u20c5\u20c6\u0003\u0462\u0231\u0000\u20c6\u20c7\u0005\u0177"+
		"\u0000\u0000\u20c7\u20c8\u0003\u00f4z\u0000\u20c8\u20c9\u0003\u038e\u01c7"+
		"\u0000\u20c9\u0461\u0001\u0000\u0000\u0000\u20ca\u20cd\u0003\u0228\u0114"+
		"\u0000\u20cb\u20cd\u0005a\u0000\u0000\u20cc\u20ca\u0001\u0000\u0000\u0000"+
		"\u20cc\u20cb\u0001\u0000\u0000\u0000\u20cd\u0463\u0001\u0000\u0000\u0000"+
		"\u20ce\u20cf\u0005\u01b9\u0000\u0000\u20cf\u20d1\u0005\u01ce\u0000\u0000"+
		"\u20d0\u20d2\u0003\u02a0\u0150\u0000\u20d1\u20d0\u0001\u0000\u0000\u0000"+
		"\u20d1\u20d2\u0001\u0000\u0000\u0000\u20d2\u20d3\u0001\u0000\u0000\u0000"+
		"\u20d3\u20d4\u0003\u015a\u00ad\u0000\u20d4\u20d5\u0003\u0466\u0233\u0000"+
		"\u20d5\u0465\u0001\u0000\u0000\u0000\u20d6\u20e6\u0003\u0384\u01c2\u0000"+
		"\u20d7\u20d8\u0005\u009e\u0000\u0000\u20d8\u20d9\u0005\u01ea\u0000\u0000"+
		"\u20d9\u20e6\u0003\u00f4z\u0000\u20da\u20dc\u0005\u009e\u0000\u0000\u20db"+
		"\u20dd\u0005\u01c2\u0000\u0000\u20dc\u20db\u0001\u0000\u0000\u0000\u20dc"+
		"\u20dd\u0001\u0000\u0000\u0000\u20dd\u20de\u0001\u0000\u0000\u0000\u20de"+
		"\u20df\u0003\u00f4z\u0000\u20df\u20e0\u0005\u01ea\u0000\u0000\u20e0\u20e1"+
		"\u0003\u00f4z\u0000\u20e1\u20e6\u0001\u0000\u0000\u0000\u20e2\u20e3\u0005"+
		"\u01c0\u0000\u0000\u20e3\u20e4\u0005\u01bc\u0000\u0000\u20e4\u20e6\u0003"+
		"\u00f4z\u0000\u20e5\u20d6\u0001\u0000\u0000\u0000\u20e5\u20d7\u0001\u0000"+
		"\u0000\u0000\u20e5\u20da\u0001\u0000\u0000\u0000\u20e5\u20e2\u0001\u0000"+
		"\u0000\u0000\u20e6\u0467\u0001\u0000\u0000\u0000\u20e7\u20ea\u0005\u0224"+
		"\u0000\u0000\u20e8\u20eb\u0003\u010a\u0085\u0000\u20e9\u20eb\u0005\u01f4"+
		"\u0000\u0000\u20ea\u20e8\u0001\u0000\u0000\u0000\u20ea\u20e9\u0001\u0000"+
		"\u0000\u0000\u20eb\u0469\u0001\u0000\u0000\u0000\u20ec\u20ee\u0005e\u0000"+
		"\u0000\u20ed\u20ef\u0003\u046c\u0236\u0000\u20ee\u20ed\u0001\u0000\u0000"+
		"\u0000\u20ee\u20ef\u0001\u0000\u0000\u0000\u20ef\u20f1\u0001\u0000\u0000"+
		"\u0000\u20f0\u20f2\u0003\u00eew\u0000\u20f1\u20f0\u0001\u0000\u0000\u0000"+
		"\u20f1\u20f2\u0001\u0000\u0000\u0000\u20f2\u20f4\u0001\u0000\u0000\u0000"+
		"\u20f3\u20f5\u0003\u046e\u0237\u0000\u20f4\u20f3\u0001\u0000\u0000\u0000"+
		"\u20f4\u20f5\u0001\u0000\u0000\u0000\u20f5\u046b\u0001\u0000\u0000\u0000"+
		"\u20f6\u20f9\u0005\u019b\u0000\u0000\u20f7\u20f9\u0003\u0470\u0238\u0000"+
		"\u20f8\u20f6\u0001\u0000\u0000\u0000\u20f8\u20f7\u0001\u0000\u0000\u0000"+
		"\u20f9\u046d\u0001\u0000\u0000\u0000\u20fa\u20fb\u0005\u01e2\u0000\u0000"+
		"\u20fb\u20fc\u0003\u00fc~\u0000\u20fc\u046f\u0001\u0000\u0000\u0000\u20fd"+
		"\u20fe\u0005\u001e\u0000\u0000\u20fe\u2103\u0003\u0472\u0239\u0000\u20ff"+
		"\u2100\u0005$\u0000\u0000\u2100\u2102\u0003\u0472\u0239\u0000\u2101\u20ff"+
		"\u0001\u0000\u0000\u0000\u2102\u2105\u0001\u0000\u0000\u0000\u2103\u2101"+
		"\u0001\u0000\u0000\u0000\u2103\u2104\u0001\u0000\u0000\u0000\u2104\u2106"+
		"\u0001\u0000\u0000\u0000\u2105\u2103\u0001\u0000\u0000\u0000\u2106\u2107"+
		"\u0005\u001f\u0000\u0000\u2107\u0471\u0001\u0000\u0000\u0000\u2108\u210a"+
		"\u0005\u019b\u0000\u0000\u2109\u210b\u0003\u02a2\u0151\u0000\u210a\u2109"+
		"\u0001\u0000\u0000\u0000\u210a\u210b\u0001\u0000\u0000\u0000\u210b\u0473"+
		"\u0001\u0000\u0000\u0000\u210c\u210d\u0005\u0132\u0000\u0000\u210d\u210e"+
		"\u0005\u01e5\u0000\u0000\u210e\u210f\u0003\u0476\u023b\u0000\u210f\u0475"+
		"\u0001\u0000\u0000\u0000\u2110\u2111\u0003\u047e\u023f\u0000\u2111\u2112"+
		"\u0003\u01e0\u00f0\u0000\u2112\u2113\u0005\u01ed\u0000\u0000\u2113\u2114"+
		"\u0003\u0480\u0240\u0000\u2114\u2179\u0001\u0000\u0000\u0000\u2115\u2116"+
		"\u0005\u01c2\u0000\u0000\u2116\u2117\u0003\u01e0\u00f0\u0000\u2117\u2118"+
		"\u0005\u01ed\u0000\u0000\u2118\u2119\u0003\u0480\u0240\u0000\u2119\u2179"+
		"\u0001\u0000\u0000\u0000\u211a\u211b\u0003\u047a\u023d\u0000\u211b\u211c"+
		"\u0003\u00f4z\u0000\u211c\u211d\u0005\u01ed\u0000\u0000\u211d\u211e\u0003"+
		"\u0480\u0240\u0000\u211e\u2179\u0001\u0000\u0000\u0000\u211f\u2120\u0005"+
		"\u022d\u0000\u0000\u2120\u2121\u0003\u017e\u00bf\u0000\u2121\u2122\u0005"+
		"\u01ed\u0000\u0000\u2122\u2123\u0003\u0480\u0240\u0000\u2123\u2179\u0001"+
		"\u0000\u0000\u0000\u2124\u2125\u0005u\u0000\u0000\u2125\u2126\u0003\u017e"+
		"\u00bf\u0000\u2126\u2127\u0005\u01ed\u0000\u0000\u2127\u2128\u0003\u0480"+
		"\u0240\u0000\u2128\u2179\u0001\u0000\u0000\u0000\u2129\u212a\u0005\u011f"+
		"\u0000\u0000\u212a\u212b\u0003\u03f8\u01fc\u0000\u212b\u212c\u0005\u01ed"+
		"\u0000\u0000\u212c\u212d\u0003\u0480\u0240\u0000\u212d\u2179\u0001\u0000"+
		"\u0000\u0000\u212e\u212f\u0005\u01cb\u0000\u0000\u212f\u2130\u0003\u03f4"+
		"\u01fa\u0000\u2130\u2131\u0005\u01ed\u0000\u0000\u2131\u2132\u0003\u0480"+
		"\u0240\u0000\u2132\u2179\u0001\u0000\u0000\u0000\u2133\u2134\u0005\u00fe"+
		"\u0000\u0000\u2134\u2135\u0003\u03b8\u01dc\u0000\u2135\u2136\u0005\u01ed"+
		"\u0000\u0000\u2136\u2137\u0003\u0480\u0240\u0000\u2137\u2179\u0001\u0000"+
		"\u0000\u0000\u2138\u2139\u0005\u01c4\u0000\u0000\u2139\u213a\u0003\u00f4"+
		"z\u0000\u213a\u213b\u0005\u01e5\u0000\u0000\u213b\u213c\u0005u\u0000\u0000"+
		"\u213c\u213d\u0003\u01e0\u00f0\u0000\u213d\u213e\u0005\u01ed\u0000\u0000"+
		"\u213e\u213f\u0003\u0480\u0240\u0000\u213f\u2179\u0001\u0000\u0000\u0000"+
		"\u2140\u2141\u0003\u0478\u023c\u0000\u2141\u2142\u0003\u00f4z\u0000\u2142"+
		"\u2143\u0005\u01e5\u0000\u0000\u2143\u2144\u0003\u00eew\u0000\u2144\u2145"+
		"\u0005\u01ed\u0000\u0000\u2145\u2146\u0003\u0480\u0240\u0000\u2146\u2179"+
		"\u0001\u0000\u0000\u0000\u2147\u2148\u0005\u01cd\u0000\u0000\u2148\u2149"+
		"\u0003\u03f4\u01fa\u0000\u2149\u214a\u0005\u01ed\u0000\u0000\u214a\u214b"+
		"\u0003\u0480\u0240\u0000\u214b\u2179\u0001\u0000\u0000\u0000\u214c\u214d"+
		"\u0005\u00a3\u0000\u0000\u214d\u214e\u0003\u03f4\u01fa\u0000\u214e\u214f"+
		"\u0005\u01ed\u0000\u0000\u214f\u2150\u0003\u0480\u0240\u0000\u2150\u2179"+
		"\u0001\u0000\u0000\u0000\u2151\u2152\u0005\u018c\u0000\u0000\u2152\u2153"+
		"\u0005\u01e9\u0000\u0000\u2153\u2154\u0003\u017e\u00bf\u0000\u2154\u2155"+
		"\u0005\u008a\u0000\u0000\u2155\u2156\u0003\u00f4z\u0000\u2156\u2157\u0005"+
		"\u01ed\u0000\u0000\u2157\u2158\u0003\u0480\u0240\u0000\u2158\u2179\u0001"+
		"\u0000\u0000\u0000\u2159\u215a\u0005\u00fe\u0000\u0000\u215a\u215b\u0005"+
		"\u0130\u0000\u0000\u215b\u215c\u0003\u01e0\u00f0\u0000\u215c\u215d\u0005"+
		"\u01e2\u0000\u0000\u215d\u215e\u0003\u00f4z\u0000\u215e\u215f\u0005\u01ed"+
		"\u0000\u0000\u215f\u2160\u0003\u0480\u0240\u0000\u2160\u2179\u0001\u0000"+
		"\u0000\u0000\u2161\u2162\u0005\u00fe\u0000\u0000\u2162\u2163\u0005\u0149"+
		"\u0000\u0000\u2163\u2164\u0003\u01e0\u00f0\u0000\u2164\u2165\u0005\u01e2"+
		"\u0000\u0000\u2165\u2166\u0003\u00f4z\u0000\u2166\u2167\u0005\u01ed\u0000"+
		"\u0000\u2167\u2168\u0003\u0480\u0240\u0000\u2168\u2179\u0001\u0000\u0000"+
		"\u0000\u2169\u216a\u0005\u008b\u0000\u0000\u216a\u216b\u0005\u0094\u0000"+
		"\u0000\u216b\u216c\u0003\u0232\u0119\u0000\u216c\u216d\u0005\u01ed\u0000"+
		"\u0000\u216d\u216e\u0003\u0480\u0240\u0000\u216e\u2179\u0001\u0000\u0000"+
		"\u0000\u216f\u2170\u0005\u01d6\u0000\u0000\u2170\u2171\u0005\u001e\u0000"+
		"\u0000\u2171\u2172\u0003\u017e\u00bf\u0000\u2172\u2173\u0005\u01e4\u0000"+
		"\u0000\u2173\u2174\u0003\u017e\u00bf\u0000\u2174\u2175\u0005\u001f\u0000"+
		"\u0000\u2175\u2176\u0005\u01ed\u0000\u0000\u2176\u2177\u0003\u0480\u0240"+
		"\u0000\u2177\u2179\u0001\u0000\u0000\u0000\u2178\u2110\u0001\u0000\u0000"+
		"\u0000\u2178\u2115\u0001\u0000\u0000\u0000\u2178\u211a\u0001\u0000\u0000"+
		"\u0000\u2178\u211f\u0001\u0000\u0000\u0000\u2178\u2124\u0001\u0000\u0000"+
		"\u0000\u2178\u2129\u0001\u0000\u0000\u0000\u2178\u212e\u0001\u0000\u0000"+
		"\u0000\u2178\u2133\u0001\u0000\u0000\u0000\u2178\u2138\u0001\u0000\u0000"+
		"\u0000\u2178\u2140\u0001\u0000\u0000\u0000\u2178\u2147\u0001\u0000\u0000"+
		"\u0000\u2178\u214c\u0001\u0000\u0000\u0000\u2178\u2151\u0001\u0000\u0000"+
		"\u0000\u2178\u2159\u0001\u0000\u0000\u0000\u2178\u2161\u0001\u0000\u0000"+
		"\u0000\u2178\u2169\u0001\u0000\u0000\u0000\u2178\u216f\u0001\u0000\u0000"+
		"\u0000\u2179\u0477\u0001\u0000\u0000\u0000\u217a\u217b\u00078\u0000\u0000"+
		"\u217b\u0479\u0001\u0000\u0000\u0000\u217c\u2182\u0003\u047c\u023e\u0000"+
		"\u217d\u2182\u0005p\u0000\u0000\u217e\u2182\u0005]\u0000\u0000\u217f\u2182"+
		"\u0005\u0178\u0000\u0000\u2180\u2182\u0005\u00ad\u0000\u0000\u2181\u217c"+
		"\u0001\u0000\u0000\u0000\u2181\u217d\u0001\u0000\u0000\u0000\u2181\u217e"+
		"\u0001\u0000\u0000\u0000\u2181\u217f\u0001\u0000\u0000\u0000\u2181\u2180"+
		"\u0001\u0000\u0000\u0000\u2182\u047b\u0001\u0000\u0000\u0000\u2183\u2184"+
		"\u0005\u011d\u0000\u0000\u2184\u2193\u0005\u0157\u0000\u0000\u2185\u2186"+
		"\u0005\u0145\u0000\u0000\u2186\u2193\u0005\u01cc\u0000\u0000\u2187\u2193"+
		"\u0005y\u0000\u0000\u2188\u2189\u0005\u01c7\u0000\u0000\u2189\u218a\u0005"+
		"o\u0000\u0000\u218a\u2193\u0005\u0197\u0000\u0000\u218b\u218d\u0005\u015c"+
		"\u0000\u0000\u218c\u218b\u0001\u0000\u0000\u0000\u218c\u218d\u0001\u0000"+
		"\u0000\u0000\u218d\u218e\u0001\u0000\u0000\u0000\u218e\u2193\u0005\u008a"+
		"\u0000\u0000\u218f\u2193\u0005\u0160\u0000\u0000\u2190\u2193\u0005\u01bc"+
		"\u0000\u0000\u2191\u2193\u0005\u0177\u0000\u0000\u2192\u2183\u0001\u0000"+
		"\u0000\u0000\u2192\u2185\u0001\u0000\u0000\u0000\u2192\u2187\u0001\u0000"+
		"\u0000\u0000\u2192\u2188\u0001\u0000\u0000\u0000\u2192\u218c\u0001\u0000"+
		"\u0000\u0000\u2192\u218f\u0001\u0000\u0000\u0000\u2192\u2190\u0001\u0000"+
		"\u0000\u0000\u2192\u2191\u0001\u0000\u0000\u0000\u2193\u047d\u0001\u0000"+
		"\u0000\u0000\u2194\u21ac\u0005\u01c1\u0000\u0000\u2195\u21ac\u0005\u00a6"+
		"\u0000\u0000\u2196\u21ac\u0005\u01ce\u0000\u0000\u2197\u2198\u0005\u00fd"+
		"\u0000\u0000\u2198\u21ac\u0005\u01ce\u0000\u0000\u2199\u21ac\u0005\u01c3"+
		"\u0000\u0000\u219a\u219b\u0005\u01c7\u0000\u0000\u219b\u21ac\u0005\u01c1"+
		"\u0000\u0000\u219c\u21ac\u0005\u0228\u0000\u0000\u219d\u21ac\u0005\u0128"+
		"\u0000\u0000\u219e\u21ac\u0005\u00ab\u0000\u0000\u219f\u21a0\u0005\u0231"+
		"\u0000\u0000\u21a0\u21a1\u0005\u0179\u0000\u0000\u21a1\u21ac\u0005\u015d"+
		"\u0000\u0000\u21a2\u21a3\u0005\u0231\u0000\u0000\u21a3\u21a4\u0005\u0179"+
		"\u0000\u0000\u21a4\u21ac\u0005\u0134\u0000\u0000\u21a5\u21a6\u0005\u0231"+
		"\u0000\u0000\u21a6\u21a7\u0005\u0179\u0000\u0000\u21a7\u21ac\u0005\u0188"+
		"\u0000\u0000\u21a8\u21a9\u0005\u0231\u0000\u0000\u21a9\u21aa\u0005\u0179"+
		"\u0000\u0000\u21aa\u21ac\u0005\u0131\u0000\u0000\u21ab\u2194\u0001\u0000"+
		"\u0000\u0000\u21ab\u2195\u0001\u0000\u0000\u0000\u21ab\u2196\u0001\u0000"+
		"\u0000\u0000\u21ab\u2197\u0001\u0000\u0000\u0000\u21ab\u2199\u0001\u0000"+
		"\u0000\u0000\u21ab\u219a\u0001\u0000\u0000\u0000\u21ab\u219c\u0001\u0000"+
		"\u0000\u0000\u21ab\u219d\u0001\u0000\u0000\u0000\u21ab\u219e\u0001\u0000"+
		"\u0000\u0000\u21ab\u219f\u0001\u0000\u0000\u0000\u21ab\u21a2\u0001\u0000"+
		"\u0000\u0000\u21ab\u21a5\u0001\u0000\u0000\u0000\u21ab\u21a8\u0001\u0000"+
		"\u0000\u0000\u21ac\u047f\u0001\u0000\u0000\u0000\u21ad\u21ae\u00074\u0000"+
		"\u0000\u21ae\u0481\u0001\u0000\u0000\u0000\u21af\u21b0\u0005\u01b8\u0000"+
		"\u0000\u21b0\u21b1\u0005\u011d\u0000\u0000\u21b1\u21b2\u0005\u0157\u0000"+
		"\u0000\u21b2\u21b3\u0003\u00f4z\u0000\u21b3\u21b4\u0005\u022d\u0000\u0000"+
		"\u21b4\u21b5\u00079\u0000\u0000\u21b5\u21b6\u0005\u0150\u0000\u0000\u21b6"+
		"\u21b7\u0003\u0406\u0203\u0000\u21b7\u0483\u0001\u0000\u0000\u0000\u21b8"+
		"\u21bb\u0005\u01b8\u0000\u0000\u21b9\u21ba\u0005\u01ec\u0000\u0000\u21ba"+
		"\u21bc\u0005\u016a\u0000\u0000\u21bb\u21b9\u0001\u0000\u0000\u0000\u21bb"+
		"\u21bc\u0001\u0000\u0000\u0000\u21bc\u21bd\u0001\u0000\u0000\u0000\u21bd"+
		"\u21be\u0005\u011f\u0000\u0000\u21be\u21c3\u0003\u0154\u00aa\u0000\u21bf"+
		"\u21c0\u0003\u03be\u01df\u0000\u21c0\u21c1\u0003\u0252\u0129\u0000\u21c1"+
		"\u21c4\u0001\u0000\u0000\u0000\u21c2\u21c4\u0003\u0486\u0243\u0000\u21c3"+
		"\u21bf\u0001\u0000\u0000\u0000\u21c3\u21c2\u0001\u0000\u0000\u0000\u21c4"+
		"\u0485\u0001\u0000\u0000\u0000\u21c5\u21c6\u0005\u001e\u0000\u0000\u21c6"+
		"\u21c7\u0003\u0488\u0244\u0000\u21c7\u21c8\u0005\u001f\u0000\u0000\u21c8"+
		"\u0487\u0001\u0000\u0000\u0000\u21c9\u21ce\u0003\u048a\u0245\u0000\u21ca"+
		"\u21cb\u0005$\u0000\u0000\u21cb\u21cd\u0003\u048a\u0245\u0000\u21cc\u21ca"+
		"\u0001\u0000\u0000\u0000\u21cd\u21d0\u0001\u0000\u0000\u0000\u21ce\u21cc"+
		"\u0001\u0000\u0000\u0000\u21ce\u21cf\u0001\u0000\u0000\u0000\u21cf\u0489"+
		"\u0001\u0000\u0000\u0000\u21d0\u21ce\u0001\u0000\u0000\u0000\u21d1\u21d2"+
		"\u0003\u00e4r\u0000\u21d2\u21d3\u0005\u0016\u0000\u0000\u21d3\u21d4\u0003"+
		"\u020e\u0107\u0000\u21d4\u048b\u0001\u0000\u0000\u0000\u21d5\u21d6\u0005"+
		"\u01b8\u0000\u0000\u21d6\u21d7\u0005\u01d6\u0000\u0000\u21d7\u21d8\u0005"+
		"\u001e\u0000\u0000\u21d8\u21d9\u0003\u017e\u00bf\u0000\u21d9\u21da\u0005"+
		"\u01e4\u0000\u0000\u21da\u21db\u0003\u017e\u00bf\u0000\u21db\u21ec\u0005"+
		"\u001f\u0000\u0000\u21dc\u21dd\u0005\u01d1\u0000\u0000\u21dd\u21de\u0005"+
		"\u01cb\u0000\u0000\u21de\u21e0\u0003\u03f4\u01fa\u0000\u21df\u21e1\u0003"+
		"\u048e\u0247\u0000\u21e0\u21df\u0001\u0000\u0000\u0000\u21e0\u21e1\u0001"+
		"\u0000\u0000\u0000\u21e1\u21ed\u0001\u0000\u0000\u0000\u21e2\u21e3\u0005"+
		"\u00b6\u0000\u0000\u21e3\u21e5\u0005\u01cb\u0000\u0000\u21e4\u21e6\u0003"+
		"\u048e\u0247\u0000\u21e5\u21e4\u0001\u0000\u0000\u0000\u21e5\u21e6\u0001"+
		"\u0000\u0000\u0000\u21e6\u21ed\u0001\u0000\u0000\u0000\u21e7\u21e8\u0005"+
		"\u01d1\u0000\u0000\u21e8\u21ea\u0005\u019e\u0000\u0000\u21e9\u21eb\u0003"+
		"\u048e\u0247\u0000\u21ea\u21e9\u0001\u0000\u0000\u0000\u21ea\u21eb\u0001"+
		"\u0000\u0000\u0000\u21eb\u21ed\u0001\u0000\u0000\u0000\u21ec\u21dc\u0001"+
		"\u0000\u0000\u0000\u21ec\u21e2\u0001\u0000\u0000\u0000\u21ec\u21e7\u0001"+
		"\u0000\u0000\u0000\u21ed\u048d\u0001\u0000\u0000\u0000\u21ee\u21ef\u0005"+
		"\u01e4\u0000\u0000\u21ef\u21f3\u0005\u0141\u0000\u0000\u21f0\u21f1\u0005"+
		"\u01e4\u0000\u0000\u21f1\u21f3\u0005\u0126\u0000\u0000\u21f2\u21ee\u0001"+
		"\u0000\u0000\u0000\u21f2\u21f0\u0001\u0000\u0000\u0000\u21f3\u048f\u0001"+
		"\u0000\u0000\u0000\u21f4\u21f5\u0005\u01b8\u0000\u0000\u21f5\u21f7\u0005"+
		"\u0228\u0000\u0000\u21f6\u21f8\u0003\u029e\u014f\u0000\u21f7\u21f6\u0001"+
		"\u0000\u0000\u0000\u21f7\u21f8\u0001\u0000\u0000\u0000\u21f8\u2200\u0001"+
		"\u0000\u0000\u0000\u21f9\u21fa\u0003\u01e0\u00f0\u0000\u21fa\u21fb\u0003"+
		"\u0252\u0129\u0000\u21fb\u2201\u0001\u0000\u0000\u0000\u21fc\u21fd\u0003"+
		"\u01e0\u00f0\u0000\u21fd\u21fe\u0005\u01d9\u0000\u0000\u21fe\u21ff\u0003"+
		"\u01e0\u00f0\u0000\u21ff\u2201\u0001\u0000\u0000\u0000\u2200\u21f9\u0001"+
		"\u0000\u0000\u0000\u2200\u21fc\u0001\u0000\u0000\u0000\u2201\u0491\u0001"+
		"\u0000\u0000\u0000\u2202\u2204\u0005\u01b8\u0000\u0000\u2203\u2205\u0005"+
		"\u0217\u0000\u0000\u2204\u2203\u0001\u0000\u0000\u0000\u2204\u2205\u0001"+
		"\u0000\u0000\u0000\u2205\u2206\u0001\u0000\u0000\u0000\u2206\u2207\u0005"+
		"\u0128\u0000\u0000\u2207\u2208\u0003\u01e0\u00f0\u0000\u2208\u2209\u0005"+
		"\u01e9\u0000\u0000\u2209\u220a\u0005\u024f\u0000\u0000\u220a\u220b\u0005"+
		"\u01ea\u0000\u0000\u220b\u220c\u0005\u024f\u0000\u0000\u220c\u220d\u0005"+
		"\u01d9\u0000\u0000\u220d\u220e\u0003\u01e0\u00f0\u0000\u220e\u0493\u0001"+
		"\u0000\u0000\u0000\u220f\u2210\u0005\u01b8\u0000\u0000\u2210\u2211\u0005"+
		"u\u0000\u0000\u2211\u2213\u0003\u01e0\u00f0\u0000\u2212\u2214\u0005\u01e4"+
		"\u0000\u0000\u2213\u2212\u0001\u0000\u0000\u0000\u2213\u2214\u0001\u0000"+
		"\u0000\u0000\u2214\u2215\u0001\u0000\u0000\u0000\u2215\u2216\u0003\u017e"+
		"\u00bf\u0000\u2216\u2217\u0003\u0238\u011c\u0000\u2217\u0495\u0001\u0000"+
		"\u0000\u0000\u2218\u2219\u0005\u01b8\u0000\u0000\u2219\u221a\u0005\u0145"+
		"\u0000\u0000\u221a\u221b\u0005\u01cc\u0000\u0000\u221b\u221c\u0003\u00f4"+
		"z\u0000\u221c\u221d\u0005\u01e5\u0000\u0000\u221d\u2220\u0003\u0258\u012c"+
		"\u0000\u221e\u221f\u0005\u01d5\u0000\u0000\u221f\u2221\u0003\u0498\u024c"+
		"\u0000\u2220\u221e\u0001\u0000\u0000\u0000\u2220\u2221\u0001\u0000\u0000"+
		"\u0000\u2221\u2222\u0001\u0000\u0000\u0000\u2222\u2223\u0005w\u0000\u0000"+
		"\u2223\u2224\u0007:\u0000\u0000\u2224\u2225\u0003\u0154\u00aa\u0000\u2225"+
		"\u2226\u0005\u001e\u0000\u0000\u2226\u2227\u0005\u001f\u0000\u0000\u2227"+
		"\u0497\u0001\u0000\u0000\u0000\u2228\u222d\u0003\u049a\u024d\u0000\u2229"+
		"\u222a\u0005\u01eb\u0000\u0000\u222a\u222c\u0003\u049a\u024d\u0000\u222b"+
		"\u2229\u0001\u0000\u0000\u0000\u222c\u222f\u0001\u0000\u0000\u0000\u222d"+
		"\u222b\u0001\u0000\u0000\u0000\u222d\u222e\u0001\u0000\u0000\u0000\u222e"+
		"\u0499\u0001\u0000\u0000\u0000\u222f\u222d\u0001\u0000\u0000\u0000\u2230"+
		"\u2231\u0003\u015c\u00ae\u0000\u2231\u2232\u0005\u01f3\u0000\u0000\u2232"+
		"\u2233\u0005\u001e\u0000\u0000\u2233\u2234\u0003\u049c\u024e\u0000\u2234"+
		"\u2235\u0005\u001f\u0000\u0000\u2235\u049b\u0001\u0000\u0000\u0000\u2236"+
		"\u223b\u0005\u024f\u0000\u0000\u2237\u2238\u0005$\u0000\u0000\u2238\u223a"+
		"\u0005\u024f\u0000\u0000\u2239\u2237\u0001\u0000\u0000\u0000\u223a\u223d"+
		"\u0001\u0000\u0000\u0000\u223b\u2239\u0001\u0000\u0000\u0000\u223b\u223c"+
		"\u0001\u0000\u0000\u0000\u223c\u049d\u0001\u0000\u0000\u0000\u223d\u223b"+
		"\u0001\u0000\u0000\u0000\u223e\u223f\u0005\u01b8\u0000\u0000\u223f\u2241"+
		"\u0005y\u0000\u0000\u2240\u2242\u0003\u029e\u014f\u0000\u2241\u2240\u0001"+
		"\u0000\u0000\u0000\u2241\u2242\u0001\u0000\u0000\u0000\u2242\u2243\u0001"+
		"\u0000\u0000\u0000\u2243\u2245\u0003\u00f4z\u0000\u2244\u2246\u0005\u01d1"+
		"\u0000\u0000\u2245\u2244\u0001\u0000\u0000\u0000\u2245\u2246\u0001\u0000"+
		"\u0000\u0000\u2246\u2247\u0001\u0000\u0000\u0000\u2247\u2248\u0003\u04a0"+
		"\u0250\u0000\u2248\u049f\u0001\u0000\u0000\u0000\u2249\u224b\u0003\u04a2"+
		"\u0251\u0000\u224a\u2249\u0001\u0000\u0000\u0000\u224b\u224e\u0001\u0000"+
		"\u0000\u0000\u224c\u224a\u0001\u0000\u0000\u0000\u224c\u224d\u0001\u0000"+
		"\u0000\u0000\u224d\u04a1\u0001\u0000\u0000\u0000\u224e\u224c\u0001\u0000"+
		"\u0000\u0000\u224f\u2250\u0005\u01bc\u0000\u0000\u2250\u2257\u0003\u00f4"+
		"z\u0000\u2251\u2252\u0005\u00f8\u0000\u0000\u2252\u2257\u0003\u0278\u013c"+
		"\u0000\u2253\u2254\u0005\u01d9\u0000\u0000\u2254\u2257\u0003\u0278\u013c"+
		"\u0000\u2255\u2257\u0005S\u0000\u0000\u2256\u224f\u0001\u0000\u0000\u0000"+
		"\u2256\u2251\u0001\u0000\u0000\u0000\u2256\u2253\u0001\u0000\u0000\u0000"+
		"\u2256\u2255\u0001\u0000\u0000\u0000\u2257\u04a3\u0001\u0000\u0000\u0000"+
		"\u2258\u2259\u0005\u01b8\u0000\u0000\u2259\u225a\u0005\u01c7\u0000\u0000"+
		"\u225a\u225b\u0005o\u0000\u0000\u225b\u225c\u0005\u0197\u0000\u0000\u225c"+
		"\u225e\u0003\u00f4z\u0000\u225d\u225f\u0003\u0402\u0201\u0000\u225e\u225d"+
		"\u0001\u0000\u0000\u0000\u225e\u225f\u0001\u0000\u0000\u0000\u225f\u2261"+
		"\u0001\u0000\u0000\u0000\u2260\u2262\u0003\u0264\u0132\u0000\u2261\u2260"+
		"\u0001\u0000\u0000\u0000\u2261\u2262\u0001\u0000\u0000\u0000\u2262\u04a5"+
		"\u0001\u0000\u0000\u0000\u2263\u2264\u0005\u01b8\u0000\u0000\u2264\u2265"+
		"\u0005\u01c7\u0000\u0000\u2265\u2266\u0005\u01c1\u0000\u0000\u2266\u2267"+
		"\u0003\u04a8\u0254\u0000\u2267\u04a7\u0001\u0000\u0000\u0000\u2268\u226a"+
		"\u0003\u029e\u014f\u0000\u2269\u2268\u0001\u0000\u0000\u0000\u2269\u226a"+
		"\u0001\u0000\u0000\u0000\u226a\u226b\u0001\u0000\u0000\u0000\u226b\u226c"+
		"\u0003\u015a\u00ad\u0000\u226c\u226e\u0005\u001e\u0000\u0000\u226d\u226f"+
		"\u0003\u04aa\u0255\u0000\u226e\u226d\u0001\u0000\u0000\u0000\u226e\u226f"+
		"\u0001\u0000\u0000\u0000\u226f\u2270\u0001\u0000\u0000\u0000\u2270\u2276"+
		"\u0005\u001f\u0000\u0000\u2271\u2272\u0005\u0087\u0000\u0000\u2272\u2273"+
		"\u0005\u001e\u0000\u0000\u2273\u2274\u0003p8\u0000\u2274\u2275\u0005\u001f"+
		"\u0000\u0000\u2275\u2277\u0001\u0000\u0000\u0000\u2276\u2271\u0001\u0000"+
		"\u0000\u0000\u2276\u2277\u0001\u0000\u0000\u0000\u2277\u2278\u0001\u0000"+
		"\u0000\u0000\u2278\u2279\u0005\u0177\u0000\u0000\u2279\u227b\u0003\u00f4"+
		"z\u0000\u227a\u227c\u0003\u0264\u0132\u0000\u227b\u227a\u0001\u0000\u0000"+
		"\u0000\u227b\u227c\u0001\u0000\u0000\u0000\u227c\u2291\u0001\u0000\u0000"+
		"\u0000\u227d\u227f\u0003\u029e\u014f\u0000\u227e\u227d\u0001\u0000\u0000"+
		"\u0000\u227e\u227f\u0001\u0000\u0000\u0000\u227f\u2280\u0001\u0000\u0000"+
		"\u0000\u2280\u2281\u0003\u015a\u00ad\u0000\u2281\u2282\u0005O\u0000\u0000"+
		"\u2282\u2283\u0005\u00b8\u0000\u0000\u2283\u2288\u0003\u015a\u00ad\u0000"+
		"\u2284\u2285\u0005\u001e\u0000\u0000\u2285\u2286\u0003\u02d0\u0168\u0000"+
		"\u2286\u2287\u0005\u001f\u0000\u0000\u2287\u2289\u0001\u0000\u0000\u0000"+
		"\u2288\u2284\u0001\u0000\u0000\u0000\u2288\u2289\u0001\u0000\u0000\u0000"+
		"\u2289\u228a\u0001\u0000\u0000\u0000\u228a\u228b\u0003\u02ca\u0165\u0000"+
		"\u228b\u228c\u0005\u0177\u0000\u0000\u228c\u228e\u0003\u00f4z\u0000\u228d"+
		"\u228f\u0003\u0264\u0132\u0000\u228e\u228d\u0001\u0000\u0000\u0000\u228e"+
		"\u228f\u0001\u0000\u0000\u0000\u228f\u2291\u0001\u0000\u0000\u0000\u2290"+
		"\u2269\u0001\u0000\u0000\u0000\u2290\u227e\u0001\u0000\u0000\u0000\u2291"+
		"\u04a9\u0001\u0000\u0000\u0000\u2292\u2297\u0003\u04ac\u0256\u0000\u2293"+
		"\u2294\u0005$\u0000\u0000\u2294\u2296\u0003\u04ac\u0256\u0000\u2295\u2293"+
		"\u0001\u0000\u0000\u0000\u2296\u2299\u0001\u0000\u0000\u0000\u2297\u2295"+
		"\u0001\u0000\u0000\u0000\u2297\u2298\u0001\u0000\u0000\u0000\u2298\u04ab"+
		"\u0001\u0000\u0000\u0000\u2299\u2297\u0001\u0000\u0000\u0000\u229a\u229e"+
		"\u0003\u0236\u011b\u0000\u229b\u229e\u0003\u04ae\u0257\u0000\u229c\u229e"+
		"\u0003\u0324\u0192\u0000\u229d\u229a\u0001\u0000\u0000\u0000\u229d\u229b"+
		"\u0001\u0000\u0000\u0000\u229d\u229c\u0001\u0000\u0000\u0000\u229e\u04ad"+
		"\u0001\u0000\u0000\u0000\u229f\u22a0\u0005\u01f6\u0000\u0000\u22a0\u22a1"+
		"\u0003\u015a\u00ad\u0000\u22a1\u22a2\u0003\u04b0\u0258\u0000\u22a2\u04af"+
		"\u0001\u0000\u0000\u0000\u22a3\u22a9\u0006\u0258\uffff\uffff\u0000\u22a4"+
		"\u22a5\n\u0002\u0000\u0000\u22a5\u22a6\u0007%\u0000\u0000\u22a6\u22a8"+
		"\u0003\u04b2\u0259\u0000\u22a7\u22a4\u0001\u0000\u0000\u0000\u22a8\u22ab"+
		"\u0001\u0000\u0000\u0000\u22a9\u22a7\u0001\u0000\u0000\u0000\u22a9\u22aa"+
		"\u0001\u0000\u0000\u0000\u22aa\u04b1\u0001\u0000\u0000\u0000\u22ab\u22a9"+
		"\u0001\u0000\u0000\u0000\u22ac\u22ad\u0007;\u0000\u0000\u22ad\u04b3\u0001"+
		"\u0000\u0000\u0000\u22ae\u22b1\u0005\u01b8\u0000\u0000\u22af\u22b0\u0005"+
		"\u01ec\u0000\u0000\u22b0\u22b2\u0005\u016a\u0000\u0000\u22b1\u22af\u0001"+
		"\u0000\u0000\u0000\u22b1\u22b2\u0001\u0000\u0000\u0000\u22b2\u22b3\u0001"+
		"\u0000\u0000\u0000\u22b3\u22b4\u0005\u01cb\u0000\u0000\u22b4\u22b5\u0003"+
		"\u0154\u00aa\u0000\u22b5\u22c2\u0003\u04c4\u0262\u0000\u22b6\u22b7\u0005"+
		"\u0181\u0000\u0000\u22b7\u22b8\u0003\u04c2\u0261\u0000\u22b8\u22b9\u0003"+
		"\u04ba\u025d\u0000\u22b9\u22c3\u0001\u0000\u0000\u0000\u22ba\u22bb\u0005"+
		"\u0181\u0000\u0000\u22bb\u22bc\u0005\u01c1\u0000\u0000\u22bc\u22bd\u0005"+
		"\u001e\u0000\u0000\u22bd\u22be\u0003\u04b6\u025b\u0000\u22be\u22bf\u0005"+
		"\u001f\u0000\u0000\u22bf\u22c0\u0003\u04ba\u025d\u0000\u22c0\u22c3\u0001"+
		"\u0000\u0000\u0000\u22c1\u22c3\u0003\u04ba\u025d\u0000\u22c2\u22b6\u0001"+
		"\u0000\u0000\u0000\u22c2\u22ba\u0001\u0000\u0000\u0000\u22c2\u22c1\u0001"+
		"\u0000\u0000\u0000\u22c3\u04b5\u0001\u0000\u0000\u0000\u22c4\u22c9\u0003"+
		"\u04b8\u025c\u0000\u22c5\u22c6\u0005$\u0000\u0000\u22c6\u22c8\u0003\u04b8"+
		"\u025c\u0000\u22c7\u22c5\u0001\u0000\u0000\u0000\u22c8\u22cb\u0001\u0000"+
		"\u0000\u0000\u22c9\u22c7\u0001\u0000\u0000\u0000\u22c9\u22ca\u0001\u0000"+
		"\u0000\u0000\u22ca\u04b7\u0001\u0000\u0000\u0000\u22cb\u22c9\u0001\u0000"+
		"\u0000\u0000\u22cc\u22cd\u0003\u014c\u00a6\u0000\u22cd\u22ce\u0003\u0210"+
		"\u0108\u0000\u22ce\u04b9\u0001\u0000\u0000\u0000\u22cf\u22d1\u0003\u04bc"+
		"\u025e\u0000\u22d0\u22cf\u0001\u0000\u0000\u0000\u22d1\u22d2\u0001\u0000"+
		"\u0000\u0000\u22d2\u22d0\u0001\u0000\u0000\u0000\u22d2\u22d3\u0001\u0000"+
		"\u0000\u0000\u22d3\u04bb\u0001\u0000\u0000\u0000\u22d4\u22d5\u0005\u01e4"+
		"\u0000\u0000\u22d5\u22dd\u0003\u04c0\u0260\u0000\u22d6\u22d7\u0005\u008a"+
		"\u0000\u0000\u22d7\u22dd\u0003\u0278\u013c\u0000\u22d8\u22d9\u0005\u018c"+
		"\u0000\u0000\u22d9\u22dd\u0003\u04be\u025f\u0000\u22da\u22dd\u0005\u0245"+
		"\u0000\u0000\u22db\u22dd\u0003\u0294\u014a\u0000\u22dc\u22d4\u0001\u0000"+
		"\u0000\u0000\u22dc\u22d6\u0001\u0000\u0000\u0000\u22dc\u22d8\u0001\u0000"+
		"\u0000\u0000\u22dc\u22da\u0001\u0000\u0000\u0000\u22dc\u22db\u0001\u0000"+
		"\u0000\u0000\u22dd\u04bd\u0001\u0000\u0000\u0000\u22de\u22df\u0005\u01e9"+
		"\u0000\u0000\u22df\u22e0\u0005\u022d\u0000\u0000\u22e0\u22e1\u0003\u017e"+
		"\u00bf\u0000\u22e1\u22e2\u0005$\u0000\u0000\u22e2\u22e3\u0005\u01e9\u0000"+
		"\u0000\u22e3\u22e4\u0005\u022d\u0000\u0000\u22e4\u22e5\u0003\u017e\u00bf"+
		"\u0000\u22e5\u04bf\u0001\u0000\u0000\u0000\u22e6\u22ee\u0003\u00e4r\u0000"+
		"\u22e7\u22eb\u0005\u024f\u0000\u0000\u22e8\u22e9\u0005$\u0000\u0000\u22e9"+
		"\u22ec\u0003\u00e4r\u0000\u22ea\u22ec\u0005\u024f\u0000\u0000\u22eb\u22e8"+
		"\u0001\u0000\u0000\u0000\u22eb\u22ea\u0001\u0000\u0000\u0000\u22eb\u22ec"+
		"\u0001\u0000\u0000\u0000\u22ec\u22ee\u0001\u0000\u0000\u0000\u22ed\u22e6"+
		"\u0001\u0000\u0000\u0000\u22ed\u22e7\u0001\u0000\u0000\u0000\u22ee\u04c1"+
		"\u0001\u0000\u0000\u0000\u22ef\u22f0\u0003\u0210\u0108\u0000\u22f0\u04c3"+
		"\u0001\u0000\u0000\u0000\u22f1\u22f3\u0005\u001e\u0000\u0000\u22f2\u22f4"+
		"\u0003\u04c6\u0263\u0000\u22f3\u22f2\u0001\u0000\u0000\u0000\u22f3\u22f4"+
		"\u0001\u0000\u0000\u0000\u22f4\u22f5\u0001\u0000\u0000\u0000\u22f5\u22f6"+
		"\u0005\u001f\u0000\u0000\u22f6\u04c5\u0001\u0000\u0000\u0000\u22f7\u22fc"+
		"\u0003\u04c8\u0264\u0000\u22f8\u22f9\u0005$\u0000\u0000\u22f9\u22fb\u0003"+
		"\u04c8\u0264\u0000\u22fa\u22f8\u0001\u0000\u0000\u0000\u22fb\u22fe\u0001"+
		"\u0000\u0000\u0000\u22fc\u22fa\u0001\u0000\u0000\u0000\u22fc\u22fd\u0001"+
		"\u0000\u0000\u0000\u22fd\u04c7\u0001\u0000\u0000\u0000\u22fe\u22fc\u0001"+
		"\u0000\u0000\u0000\u22ff\u2309\u0003\u0272\u0139\u0000\u2300\u2301\u0003"+
		"\u0272\u0139\u0000\u2301\u2302\u0005\u0217\u0000\u0000\u2302\u2303\u0003"+
		"\u010c\u0086\u0000\u2303\u2309\u0001\u0000\u0000\u0000\u2304\u2305\u0003"+
		"\u0272\u0139\u0000\u2305\u2306\u0005\u0016\u0000\u0000\u2306\u2307\u0003"+
		"\u010c\u0086\u0000\u2307\u2309\u0001\u0000\u0000\u0000\u2308\u22ff\u0001"+
		"\u0000\u0000\u0000\u2308\u2300\u0001\u0000\u0000\u0000\u2308\u2304\u0001"+
		"\u0000\u0000\u0000\u2309\u04c9\u0001\u0000\u0000\u0000\u230a\u230d\u0005"+
		"\u01b8\u0000\u0000\u230b\u230c\u0005\u01ec\u0000\u0000\u230c\u230e\u0005"+
		"\u016a\u0000\u0000\u230d\u230b\u0001\u0000\u0000\u0000\u230d\u230e\u0001"+
		"\u0000\u0000\u0000\u230e\u2310\u0001\u0000\u0000\u0000\u230f\u2311\u0005"+
		"\u018e\u0000\u0000\u2310\u230f\u0001\u0000\u0000\u0000\u2310\u2311\u0001"+
		"\u0000\u0000\u0000\u2311\u2313\u0001\u0000\u0000\u0000\u2312\u2314\u0005"+
		"\u015c\u0000\u0000\u2313\u2312\u0001\u0000\u0000\u0000\u2313\u2314\u0001"+
		"\u0000\u0000\u0000\u2314\u2315\u0001\u0000\u0000\u0000\u2315\u2316\u0005"+
		"\u008a\u0000\u0000\u2316\u2324\u0003\u00f4z\u0000\u2317\u2318\u0005\u0150"+
		"\u0000\u0000\u2318\u231b\u0003\u0406\u0203\u0000\u2319\u231a\u0005\u013c"+
		"\u0000\u0000\u231a\u231c\u0003\u0406\u0203\u0000\u231b\u2319\u0001\u0000"+
		"\u0000\u0000\u231b\u231c\u0001\u0000\u0000\u0000\u231c\u231e\u0001\u0000"+
		"\u0000\u0000\u231d\u231f\u0003\u04ce\u0267\u0000\u231e\u231d\u0001\u0000"+
		"\u0000\u0000\u231e\u231f\u0001\u0000\u0000\u0000\u231f\u2325\u0001\u0000"+
		"\u0000\u0000\u2320\u2321\u0005\u001e\u0000\u0000\u2321\u2322\u0003\u04cc"+
		"\u0266\u0000\u2322\u2323\u0005\u001f\u0000\u0000\u2323\u2325\u0001\u0000"+
		"\u0000\u0000\u2324\u2317\u0001\u0000\u0000\u0000\u2324\u2320\u0001\u0000"+
		"\u0000\u0000\u2324\u2325\u0001\u0000\u0000\u0000\u2325\u04cb\u0001\u0000"+
		"\u0000\u0000\u2326\u2327\u0005\u01d9\u0000\u0000\u2327\u2328\u0005\u0221"+
		"\u0000\u0000\u2328\u2329\u0005\u01d1\u0000\u0000\u2329\u232a\u0005\u01cb"+
		"\u0000\u0000\u232a\u232b\u0003\u03f4\u01fa\u0000\u232b\u232c\u0005$\u0000"+
		"\u0000\u232c\u232d\u0007\u0007\u0000\u0000\u232d\u232e\u0005\u0221\u0000"+
		"\u0000\u232e\u232f\u0005\u01d1\u0000\u0000\u232f\u2330\u0005\u01cb\u0000"+
		"\u0000\u2330\u2331\u0003\u03f4\u01fa\u0000\u2331\u2338\u0001\u0000\u0000"+
		"\u0000\u2332\u2333\u0007\u0007\u0000\u0000\u2333\u2334\u0005\u0221\u0000"+
		"\u0000\u2334\u2335\u0005\u01d1\u0000\u0000\u2335\u2336\u0005\u01cb\u0000"+
		"\u0000\u2336\u2338\u0003\u03f4\u01fa\u0000\u2337\u2326\u0001\u0000\u0000"+
		"\u0000\u2337\u2332\u0001\u0000\u0000\u0000\u2338\u04cd\u0001\u0000\u0000"+
		"\u0000\u2339\u233a\u0005\u018f\u0000\u0000\u233a\u233e\u0003\u0406\u0203"+
		"\u0000\u233b\u233c\u0005X\u0000\u0000\u233c\u233e\u0005\u018f\u0000\u0000"+
		"\u233d\u2339\u0001\u0000\u0000\u0000\u233d\u233b\u0001\u0000\u0000\u0000"+
		"\u233e\u04cf\u0001\u0000\u0000\u0000\u233f\u2340\u0005\u01b8\u0000\u0000"+
		"\u2340\u2341\u0005\u017c\u0000\u0000\u2341\u2342\u0003\u00f4z\u0000\u2342"+
		"\u2343\u0005\u01e5\u0000\u0000\u2343\u2346\u0003\u015a\u00ad\u0000\u2344"+
		"\u2345\u0005\u01e4\u0000\u0000\u2345\u2347\u0003\u00e4r\u0000\u2346\u2344"+
		"\u0001\u0000\u0000\u0000\u2346\u2347\u0001\u0000\u0000\u0000\u2347\u234a"+
		"\u0001\u0000\u0000\u0000\u2348\u2349\u0005\u01e9\u0000\u0000\u2349\u234b"+
		"\u0003\u0298\u014c\u0000\u234a\u2348\u0001\u0000\u0000\u0000\u234a\u234b"+
		"\u0001\u0000\u0000\u0000\u234b\u234e\u0001\u0000\u0000\u0000\u234c\u234d"+
		"\u0005\u01ea\u0000\u0000\u234d\u234f\u0003\u027c\u013e\u0000\u234e\u234c"+
		"\u0001\u0000\u0000\u0000\u234e\u234f\u0001\u0000\u0000\u0000\u234f\u2355"+
		"\u0001\u0000\u0000\u0000\u2350\u2351\u0005\u01e2\u0000\u0000\u2351\u2352"+
		"\u0005\u001e\u0000\u0000\u2352\u2353\u0003\u010c\u0086\u0000\u2353\u2354"+
		"\u0005\u001f\u0000\u0000\u2354\u2356\u0001\u0000\u0000\u0000\u2355\u2350"+
		"\u0001\u0000\u0000\u0000\u2355\u2356\u0001\u0000\u0000\u0000\u2356\u235d"+
		"\u0001\u0000\u0000\u0000\u2357\u2358\u0005\u01d1\u0000\u0000\u2358\u2359"+
		"\u0005T\u0000\u0000\u2359\u235a\u0005\u001e\u0000\u0000\u235a\u235b\u0003"+
		"\u010c\u0086\u0000\u235b\u235c\u0005\u001f\u0000\u0000\u235c\u235e\u0001"+
		"\u0000\u0000\u0000\u235d\u2357\u0001\u0000\u0000\u0000\u235d\u235e\u0001"+
		"\u0000\u0000\u0000\u235e\u04d1\u0001\u0000\u0000\u0000\u235f\u2362\u0005"+
		"\u01b8\u0000\u0000\u2360\u2361\u0005\u01ec\u0000\u0000\u2361\u2363\u0005"+
		"\u016a\u0000\u0000\u2362\u2360\u0001\u0000\u0000\u0000\u2362\u2363\u0001"+
		"\u0000\u0000\u0000\u2363\u2364\u0001\u0000\u0000\u0000\u2364\u2365\u0005"+
		"\u01cd\u0000\u0000\u2365\u2366\u0003\u0154\u00aa\u0000\u2366\u2367\u0003"+
		"\u04c4\u0262\u0000\u2367\u2368\u0003\u04ba\u025d\u0000\u2368\u04d3\u0001"+
		"\u0000\u0000\u0000\u2369\u236a\u0005\u01b8\u0000\u0000\u236a\u236b\u0005"+
		"\u0160\u0000\u0000\u236b\u236d\u0003\u00f4z\u0000\u236c\u236e\u0003\u04d6"+
		"\u026b\u0000\u236d\u236c\u0001\u0000\u0000\u0000\u236d\u236e\u0001\u0000"+
		"\u0000\u0000\u236e\u2371\u0001\u0000\u0000\u0000\u236f\u2370\u0005\u01d1"+
		"\u0000\u0000\u2370\u2372\u0003\u0252\u0129\u0000\u2371\u236f\u0001\u0000"+
		"\u0000\u0000\u2371\u2372\u0001\u0000\u0000\u0000\u2372\u04d5\u0001\u0000"+
		"\u0000\u0000\u2373\u2374\u0005\u01e9\u0000\u0000\u2374\u2375\u0005\u01c1"+
		"\u0000\u0000\u2375\u237a\u0003\u0292\u0149\u0000\u2376\u2377\u0005\u01e9"+
		"\u0000\u0000\u2377\u2378\u0005\u01f4\u0000\u0000\u2378\u237a\u0005\u0185"+
		"\u0000\u0000\u2379\u2373\u0001\u0000\u0000\u0000\u2379\u2376\u0001\u0000"+
		"\u0000\u0000\u237a\u04d7\u0001\u0000\u0000\u0000\u237b\u237e\u0005\u01b8"+
		"\u0000\u0000\u237c\u237d\u0005\u01ec\u0000\u0000\u237d\u237f\u0005\u016a"+
		"\u0000\u0000\u237e\u237c\u0001\u0000\u0000\u0000\u237e\u237f\u0001\u0000"+
		"\u0000\u0000\u237f\u2380\u0001\u0000\u0000\u0000\u2380\u2381\u0005\u00a4"+
		"\u0000\u0000\u2381\u2382\u0003\u00f4z\u0000\u2382\u2383\u0005\u01e4\u0000"+
		"\u0000\u2383\u2384\u0005\u01e5\u0000\u0000\u2384\u2385\u0003\u029a\u014d"+
		"\u0000\u2385\u2386\u0005\u01ea\u0000\u0000\u2386\u2389\u0003\u015a\u00ad"+
		"\u0000\u2387\u2388\u0005\u01e3\u0000\u0000\u2388\u238a\u0003\u010c\u0086"+
		"\u0000\u2389\u2387\u0001\u0000\u0000\u0000\u2389\u238a\u0001\u0000\u0000"+
		"\u0000\u238a\u238b\u0001\u0000\u0000\u0000\u238b\u238d\u0005\u021e\u0000"+
		"\u0000\u238c\u238e\u0007<\u0000\u0000\u238d\u238c\u0001\u0000\u0000\u0000"+
		"\u238d\u238e\u0001\u0000\u0000\u0000\u238e\u238f\u0001\u0000\u0000\u0000"+
		"\u238f\u2390\u0003\u04da\u026d\u0000\u2390\u04d9\u0001\u0000\u0000\u0000"+
		"\u2391\u2398\u0005\u0092\u0000\u0000\u2392\u2398\u0003\u04dc\u026e\u0000"+
		"\u2393\u2394\u0005\u001e\u0000\u0000\u2394\u2395\u0003\u04de\u026f\u0000"+
		"\u2395\u2396\u0005\u001f\u0000\u0000\u2396\u2398\u0001\u0000\u0000\u0000"+
		"\u2397\u2391\u0001\u0000\u0000\u0000\u2397\u2392\u0001\u0000\u0000\u0000"+
		"\u2397\u2393\u0001\u0000\u0000\u0000\u2398\u04db\u0001\u0000\u0000\u0000"+
		"\u2399\u239f\u0003J%\u0000\u239a\u239f\u0003(\u0014\u0000\u239b\u239f"+
		"\u00038\u001c\u0000\u239c\u239f\u0003D\"\u0000\u239d\u239f\u0003\u057a"+
		"\u02bd\u0000\u239e\u2399\u0001\u0000\u0000\u0000\u239e\u239a\u0001\u0000"+
		"\u0000\u0000\u239e\u239b\u0001\u0000\u0000\u0000\u239e\u239c\u0001\u0000"+
		"\u0000\u0000\u239e\u239d\u0001\u0000\u0000\u0000\u239f\u04dd\u0001\u0000"+
		"\u0000\u0000\u23a0\u23a2\u0003\u04dc\u026e\u0000\u23a1\u23a0\u0001\u0000"+
		"\u0000\u0000\u23a1\u23a2\u0001\u0000\u0000\u0000\u23a2\u23a9\u0001\u0000"+
		"\u0000\u0000\u23a3\u23a5\u0005+\u0000\u0000\u23a4\u23a6\u0003\u04dc\u026e"+
		"\u0000\u23a5\u23a4\u0001\u0000\u0000\u0000\u23a5\u23a6\u0001\u0000\u0000"+
		"\u0000\u23a6\u23a8\u0001\u0000\u0000\u0000\u23a7\u23a3\u0001\u0000\u0000"+
		"\u0000\u23a8\u23ab\u0001\u0000\u0000\u0000\u23a9\u23a7\u0001\u0000\u0000"+
		"\u0000\u23a9\u23aa\u0001\u0000\u0000\u0000\u23aa\u04df\u0001\u0000\u0000"+
		"\u0000\u23ab\u23a9\u0001\u0000\u0000\u0000\u23ac\u23ad\u0005\u01b8\u0000"+
		"\u0000\u23ad\u23ae\u0005\u01cc\u0000\u0000\u23ae\u23af\u0003\u00f4z\u0000"+
		"\u23af\u23b0\u0003\u04e6\u0273\u0000\u23b0\u23b1\u0003\u04e2\u0271\u0000"+
		"\u23b1\u23b2\u0005\u01e5\u0000\u0000\u23b2\u23b4\u0003\u015a\u00ad\u0000"+
		"\u23b3\u23b5\u0003\u04f0\u0278\u0000\u23b4\u23b3\u0001\u0000\u0000\u0000"+
		"\u23b4\u23b5\u0001\u0000\u0000\u0000\u23b5\u23b7\u0001\u0000\u0000\u0000"+
		"\u23b6\u23b8\u0003\u04ee\u0277\u0000\u23b7\u23b6\u0001\u0000\u0000\u0000"+
		"\u23b7\u23b8\u0001\u0000\u0000\u0000\u23b8\u23ba\u0001\u0000\u0000\u0000"+
		"\u23b9\u23bb\u0003\u04ec\u0276\u0000\u23ba\u23b9\u0001\u0000\u0000\u0000"+
		"\u23ba\u23bb\u0001\u0000\u0000\u0000\u23bb\u23bc\u0001\u0000\u0000\u0000"+
		"\u23bc\u23bd\u0005w\u0000\u0000\u23bd\u23be\u0007:\u0000\u0000\u23be\u23bf"+
		"\u0003\u0154\u00aa\u0000\u23bf\u23c1\u0005\u001e\u0000\u0000\u23c0\u23c2"+
		"\u0003\u04e8\u0274\u0000\u23c1\u23c0\u0001\u0000\u0000\u0000\u23c1\u23c2"+
		"\u0001\u0000\u0000\u0000\u23c2\u23c3\u0001\u0000\u0000\u0000\u23c3\u23c4"+
		"\u0005\u001f\u0000\u0000\u23c4\u23d9\u0001\u0000\u0000\u0000\u23c5\u23c6"+
		"\u0005\u01b8\u0000\u0000\u23c6\u23c7\u0005\u01c4\u0000\u0000\u23c7\u23ca"+
		"\u0005\u01cc\u0000\u0000\u23c8\u23c9\u0005\u01d9\u0000\u0000\u23c9\u23cb"+
		"\u0003\u015a\u00ad\u0000\u23ca\u23c8\u0001\u0000\u0000\u0000\u23ca\u23cb"+
		"\u0001\u0000\u0000\u0000\u23cb\u23cc\u0001\u0000\u0000\u0000\u23cc\u23cd"+
		"\u0003\u038a\u01c5\u0000\u23cd\u23ce\u0005\u01e9\u0000\u0000\u23ce\u23cf"+
		"\u0005\u0144\u0000\u0000\u23cf\u23d0\u0005P\u0000\u0000\u23d0\u23d1\u0003"+
		"\u04ec\u0276\u0000\u23d1\u23d2\u0005w\u0000\u0000\u23d2\u23d3\u0007:\u0000"+
		"\u0000\u23d3\u23d4\u0003\u0154\u00aa\u0000\u23d4\u23d5\u0005\u001e\u0000"+
		"\u0000\u23d5\u23d6\u0003\u04e8\u0274\u0000\u23d6\u23d7\u0005\u001f\u0000"+
		"\u0000\u23d7\u23d9\u0001\u0000\u0000\u0000\u23d8\u23ac\u0001\u0000\u0000"+
		"\u0000\u23d8\u23c5\u0001\u0000\u0000\u0000\u23d9\u04e1\u0001\u0000\u0000"+
		"\u0000\u23da\u23df\u0003\u04e4\u0272\u0000\u23db\u23dc\u0005\u01ec\u0000"+
		"\u0000\u23dc\u23de\u0003\u04e4\u0272\u0000\u23dd\u23db\u0001\u0000\u0000"+
		"\u0000\u23de\u23e1\u0001\u0000\u0000\u0000\u23df\u23dd\u0001\u0000\u0000"+
		"\u0000\u23df\u23e0\u0001\u0000\u0000\u0000\u23e0\u04e3\u0001\u0000\u0000"+
		"\u0000\u23e1\u23df\u0001\u0000\u0000\u0000\u23e2\u23ea\u0005\u01b5\u0000"+
		"\u0000\u23e3\u23ea\u0005\u01b7\u0000\u0000\u23e4\u23ea\u0005\u01b6\u0000"+
		"\u0000\u23e5\u23e6\u0005\u01b6\u0000\u0000\u23e6\u23e7\u0005\u00b8\u0000"+
		"\u0000\u23e7\u23ea\u0003\u024a\u0125\u0000\u23e8\u23ea\u0005\u01bb\u0000"+
		"\u0000\u23e9\u23e2\u0001\u0000\u0000\u0000\u23e9\u23e3\u0001\u0000\u0000"+
		"\u0000\u23e9\u23e4\u0001\u0000\u0000\u0000\u23e9\u23e5\u0001\u0000\u0000"+
		"\u0000\u23e9\u23e8\u0001\u0000\u0000\u0000\u23ea\u04e5\u0001\u0000\u0000"+
		"\u0000\u23eb\u23f0\u0005\u0124\u0000\u0000\u23ec\u23f0\u0005\u011e\u0000"+
		"\u0000\u23ed\u23ee\u0005\u0139\u0000\u0000\u23ee\u23f0\u0005\u00b8\u0000"+
		"\u0000\u23ef\u23eb\u0001\u0000\u0000\u0000\u23ef\u23ec\u0001\u0000\u0000"+
		"\u0000\u23ef\u23ed\u0001\u0000\u0000\u0000\u23f0\u04e7\u0001\u0000\u0000"+
		"\u0000\u23f1\u23f6\u0003\u04ea\u0275\u0000\u23f2\u23f3\u0005$\u0000\u0000"+
		"\u23f3\u23f5\u0003\u04ea\u0275\u0000\u23f4\u23f2\u0001\u0000\u0000\u0000"+
		"\u23f5\u23f8\u0001\u0000\u0000\u0000\u23f6\u23f4\u0001\u0000\u0000\u0000"+
		"\u23f6\u23f7\u0001\u0000\u0000\u0000\u23f7\u04e9\u0001\u0000\u0000\u0000"+
		"\u23f8\u23f6\u0001\u0000\u0000\u0000\u23f9\u23fd\u0005\u0250\u0000\u0000"+
		"\u23fa\u23fd\u0005\u024f\u0000\u0000\u23fb\u23fd\u0003\u0258\u012c\u0000"+
		"\u23fc\u23f9\u0001\u0000\u0000\u0000\u23fc\u23fa\u0001\u0000\u0000\u0000"+
		"\u23fc\u23fb\u0001\u0000\u0000\u0000\u23fd\u04eb\u0001\u0000\u0000\u0000"+
		"\u23fe\u23ff\u0005\u01d5\u0000\u0000\u23ff\u2400\u0005\u001e\u0000\u0000"+
		"\u2400\u2401\u0003\u010c\u0086\u0000\u2401\u2402\u0005\u001f\u0000\u0000"+
		"\u2402\u04ed\u0001\u0000\u0000\u0000\u2403\u2405\u0005\u01e9\u0000\u0000"+
		"\u2404\u2406\u0005\u0144\u0000\u0000\u2405\u2404\u0001\u0000\u0000\u0000"+
		"\u2405\u2406\u0001\u0000\u0000\u0000\u2406\u2407\u0001\u0000\u0000\u0000"+
		"\u2407\u2408\u0007=\u0000\u0000\u2408\u04ef\u0001\u0000\u0000\u0000\u2409"+
		"\u240a\u0005\u0162\u0000\u0000\u240a\u240b\u0003\u04f2\u0279\u0000\u240b"+
		"\u04f1\u0001\u0000\u0000\u0000\u240c\u240e\u0003\u04f4\u027a\u0000\u240d"+
		"\u240c\u0001\u0000\u0000\u0000\u240e\u240f\u0001\u0000\u0000\u0000\u240f"+
		"\u240d\u0001\u0000\u0000\u0000\u240f\u2410\u0001\u0000\u0000\u0000\u2410"+
		"\u04f3\u0001\u0000\u0000\u0000\u2411\u2412\u0003\u04fa\u027d\u0000\u2412"+
		"\u2414\u0003\u04f8\u027c\u0000\u2413\u2415\u0005\u01e4\u0000\u0000\u2414"+
		"\u2413\u0001\u0000\u0000\u0000\u2414\u2415\u0001\u0000\u0000\u0000\u2415"+
		"\u2416\u0001\u0000\u0000\u0000\u2416\u2417\u0003\u04f6\u027b\u0000\u2417"+
		"\u04f5\u0001\u0000\u0000\u0000\u2418\u2419\u0003\u015c\u00ae\u0000\u2419"+
		"\u04f7\u0001\u0000\u0000\u0000\u241a\u241b\u0007>\u0000\u0000\u241b\u04f9"+
		"\u0001\u0000\u0000\u0000\u241c\u241d\u0007?\u0000\u0000\u241d\u04fb\u0001"+
		"\u0000\u0000\u0000\u241e\u2420\u0005\u01b8\u0000\u0000\u241f\u2421\u0003"+
		"\u04fe\u027f\u0000\u2420\u241f\u0001\u0000\u0000\u0000\u2420\u2421\u0001"+
		"\u0000\u0000\u0000\u2421\u2422\u0001\u0000\u0000\u0000\u2422\u2424\u0005"+
		"\u00a6\u0000\u0000\u2423\u2425\u0003\u029e\u014f\u0000\u2424\u2423\u0001"+
		"\u0000\u0000\u0000\u2424\u2425\u0001\u0000\u0000\u0000\u2425\u2426\u0001"+
		"\u0000\u0000\u0000\u2426\u2428\u0003\u015a\u00ad\u0000\u2427\u2429\u0003"+
		"\u0242\u0121\u0000\u2428\u2427\u0001\u0000\u0000\u0000\u2428\u2429\u0001"+
		"\u0000\u0000\u0000\u2429\u04fd\u0001\u0000\u0000\u0000\u242a\u242c\u0007"+
		"\"\u0000\u0000\u242b\u242a\u0001\u0000\u0000\u0000\u242b\u242c\u0001\u0000"+
		"\u0000\u0000\u242c\u242d\u0001\u0000\u0000\u0000\u242d\u2430\u0007 \u0000"+
		"\u0000\u242e\u2430\u0005\u00b1\u0000\u0000\u242f\u242b\u0001\u0000\u0000"+
		"\u0000\u242f\u242e\u0001\u0000\u0000\u0000\u2430\u04ff\u0001\u0000\u0000"+
		"\u0000\u2431\u2432\u0005\u01b8\u0000\u0000\u2432\u2434\u0005\u0177\u0000"+
		"\u0000\u2433\u2435\u0003\u029e\u014f\u0000\u2434\u2433\u0001\u0000\u0000"+
		"\u0000\u2434\u2435\u0001\u0000\u0000\u0000\u2435\u2436\u0001\u0000\u0000"+
		"\u0000\u2436\u2439\u0003\u00f4z\u0000\u2437\u2438\u0005\u022d\u0000\u0000"+
		"\u2438\u243a\u0005\u024f\u0000\u0000\u2439\u2437\u0001\u0000\u0000\u0000"+
		"\u2439\u243a\u0001\u0000\u0000\u0000\u243a\u243c\u0001\u0000\u0000\u0000"+
		"\u243b\u243d\u0003\u0436\u021b\u0000\u243c\u243b\u0001\u0000\u0000\u0000"+
		"\u243c\u243d\u0001\u0000\u0000\u0000\u243d\u243e\u0001\u0000\u0000\u0000"+
		"\u243e\u243f\u0005\u01c7\u0000\u0000\u243f\u2440\u0005o\u0000\u0000\u2440"+
		"\u2441\u0005\u0197\u0000\u0000\u2441\u2442\u0003\u00f4z\u0000\u2442\u2443"+
		"\u0003\u0264\u0132\u0000\u2443\u0501\u0001\u0000\u0000\u0000\u2444\u2445"+
		"\u0005\u01b8\u0000\u0000\u2445\u2447\u0005\u00ab\u0000\u0000\u2446\u2448"+
		"\u0003\u029e\u014f\u0000\u2447\u2446\u0001\u0000\u0000\u0000\u2447\u2448"+
		"\u0001\u0000\u0000\u0000\u2448\u2449\u0001\u0000\u0000\u0000\u2449\u244a"+
		"\u0003\u01e0\u00f0\u0000\u244a\u244b\u0003`0\u0000\u244b\u244c\u0005\u01e5"+
		"\u0000\u0000\u244c\u244d\u0003\u0184\u00c2\u0000\u244d\u244e\u0005\u01d9"+
		"\u0000\u0000\u244e\u244f\u0003\u00b0X\u0000\u244f\u0503\u0001\u0000\u0000"+
		"\u0000\u2450\u2451\u0005\u01b8\u0000\u0000\u2451\u2452\u0005\u0178\u0000"+
		"\u0000\u2452\u2453\u0003\u00f4z\u0000\u2453\u2454\u0005\u0147\u0000\u0000"+
		"\u2454\u2455\u0005\u024f\u0000\u0000\u2455\u2456\u0005\u0160\u0000\u0000"+
		"\u2456\u2459\u0003\u043c\u021e\u0000\u2457\u2458\u0005\u01d1\u0000\u0000"+
		"\u2458\u245a\u0003\u0252\u0129\u0000\u2459\u2457\u0001\u0000\u0000\u0000"+
		"\u2459\u245a\u0001\u0000\u0000\u0000\u245a\u0505\u0001\u0000\u0000\u0000"+
		"\u245b\u245c\u0005\u01b8\u0000\u0000\u245c\u245d\u0005\u00ad\u0000\u0000"+
		"\u245d\u2460\u0003\u00f4z\u0000\u245e\u245f\u0005\u0099\u0000\u0000\u245f"+
		"\u2461\u0003\u0228\u0114\u0000\u2460\u245e\u0001\u0000\u0000\u0000\u2460"+
		"\u2461\u0001\u0000\u0000\u0000\u2461\u2462\u0001\u0000\u0000\u0000\u2462"+
		"\u2463\u0005\u014d\u0000\u0000\u2463\u2466\u0005\u024f\u0000\u0000\u2464"+
		"\u2465\u0005\u01d1\u0000\u0000\u2465\u2467\u0003\u0208\u0104\u0000\u2466"+
		"\u2464\u0001\u0000\u0000\u0000\u2466\u2467\u0001\u0000\u0000\u0000\u2467"+
		"\u0507\u0001\u0000\u0000\u0000\u2468\u2469\u0005\u01b8\u0000\u0000\u2469"+
		"\u246a\u0005\u0231\u0000\u0000\u246a\u246b\u0005\u0179\u0000\u0000\u246b"+
		"\u246c\u0007@\u0000\u0000\u246c\u246d\u0003\u01e0\u00f0\u0000\u246d\u246e"+
		"\u0003\u0252\u0129\u0000\u246e\u0509\u0001\u0000\u0000\u0000\u246f\u2472"+
		"\u0005\u01b8\u0000\u0000\u2470\u2471\u0005\u01ec\u0000\u0000\u2471\u2473"+
		"\u0005\u016a\u0000\u0000\u2472\u2470\u0001\u0000\u0000\u0000\u2472\u2473"+
		"\u0001\u0000\u0000\u0000\u2473\u2474\u0001\u0000\u0000\u0000\u2474\u2475"+
		"\u0005\u018c\u0000\u0000\u2475\u2476\u0005\u01e9\u0000\u0000\u2476\u2477"+
		"\u0003\u017e\u00bf\u0000\u2477\u2478\u0005\u008a\u0000\u0000\u2478\u2479"+
		"\u0003\u00f4z\u0000\u2479\u247a\u0005\u001e\u0000\u0000\u247a\u247b\u0003"+
		"\u04cc\u0266\u0000\u247b\u247c\u0005\u001f\u0000\u0000\u247c\u050b\u0001"+
		"\u0000\u0000\u0000\u247d\u247e\u0005\u01b8\u0000\u0000\u247e\u247f\u0005"+
		"\u022d\u0000\u0000\u247f\u2480\u0003\u01e0\u00f0\u0000\u2480\u2481\u0003"+
		"\u050e\u0287\u0000\u2481\u050d\u0001\u0000\u0000\u0000\u2482\u2484\u0003"+
		"\u0252\u0129\u0000\u2483\u2482\u0001\u0000\u0000\u0000\u2483\u2484\u0001"+
		"\u0000\u0000\u0000\u2484\u2496\u0001\u0000\u0000\u0000\u2485\u2486\u0005"+
		"\u01e4\u0000\u0000\u2486\u2488\u0005\u001e\u0000\u0000\u2487\u2489\u0003"+
		"\u01da\u00ed\u0000\u2488\u2487\u0001\u0000\u0000\u0000\u2488\u2489\u0001"+
		"\u0000\u0000\u0000\u2489\u248a\u0001\u0000\u0000\u0000\u248a\u2496\u0005"+
		"\u001f\u0000\u0000\u248b\u248c\u0005\u01e4\u0000\u0000\u248c\u248d\u0005"+
		"\u00c8\u0000\u0000\u248d\u248f\u0005\u001e\u0000\u0000\u248e\u2490\u0003"+
		"\u0510\u0288\u0000\u248f\u248e\u0001\u0000\u0000\u0000\u248f\u2490\u0001"+
		"\u0000\u0000\u0000\u2490\u2491\u0001\u0000\u0000\u0000\u2491\u2496\u0005"+
		"\u001f\u0000\u0000\u2492\u2493\u0005\u01e4\u0000\u0000\u2493\u2494\u0005"+
		"\u009d\u0000\u0000\u2494\u2496\u0003\u0252\u0129\u0000\u2495\u2483\u0001"+
		"\u0000\u0000\u0000\u2495\u2485\u0001\u0000\u0000\u0000\u2495\u248b\u0001"+
		"\u0000\u0000\u0000\u2495\u2492\u0001\u0000\u0000\u0000\u2496\u050f\u0001"+
		"\u0000\u0000\u0000\u2497\u249c\u0005\u024f\u0000\u0000\u2498\u2499\u0005"+
		"$\u0000\u0000\u2499\u249b\u0005\u024f\u0000\u0000\u249a\u2498\u0001\u0000"+
		"\u0000\u0000\u249b\u249e\u0001\u0000\u0000\u0000\u249c\u249a\u0001\u0000"+
		"\u0000\u0000\u249c\u249d\u0001\u0000\u0000\u0000\u249d\u0511\u0001\u0000"+
		"\u0000\u0000\u249e\u249c\u0001\u0000\u0000\u0000\u249f\u24a0\u0005\u01b8"+
		"\u0000\u0000\u24a0\u24a1\u0005a\u0000\u0000\u24a1\u24a3\u0005\u0155\u0000"+
		"\u0000\u24a2\u24a4\u0003\u029e\u014f\u0000\u24a3\u24a2\u0001\u0000\u0000"+
		"\u0000\u24a3\u24a4\u0001\u0000\u0000\u0000\u24a4\u24a5\u0001\u0000\u0000"+
		"\u0000\u24a5\u24a6\u0005\u01e9\u0000\u0000\u24a6\u24a7\u0003\u0462\u0231"+
		"\u0000\u24a7\u24a8\u0005\u0177\u0000\u0000\u24a8\u24a9\u0003\u00f4z\u0000"+
		"\u24a9\u24aa\u0003\u0264\u0132\u0000\u24aa\u0513\u0001\u0000\u0000\u0000"+
		"\u24ab\u24ac\u0005\u0137\u0000\u0000\u24ac\u24ad\u0007A\u0000\u0000\u24ad"+
		"\u0515\u0001\u0000\u0000\u0000\u24ae\u24af\u0005\u01ba\u0000\u0000\u24af"+
		"\u24b0\u0005\u011d\u0000\u0000\u24b0\u24b2\u0005\u0157\u0000\u0000\u24b1"+
		"\u24b3\u0003\u02a0\u0150\u0000\u24b2\u24b1\u0001\u0000\u0000\u0000\u24b2"+
		"\u24b3\u0001\u0000\u0000\u0000\u24b3\u24b4\u0001\u0000\u0000\u0000\u24b4"+
		"\u24b6\u0003\u00f4z\u0000\u24b5\u24b7\u0003\u0394\u01ca\u0000\u24b6\u24b5"+
		"\u0001\u0000\u0000\u0000\u24b6\u24b7\u0001\u0000\u0000\u0000\u24b7\u0517"+
		"\u0001\u0000\u0000\u0000\u24b8\u24b9\u0005\u01ba\u0000\u0000\u24b9\u24bb"+
		"\u0005\u011f\u0000\u0000\u24ba\u24bc\u0003\u02a0\u0150\u0000\u24bb\u24ba"+
		"\u0001\u0000\u0000\u0000\u24bb\u24bc\u0001\u0000\u0000\u0000\u24bc\u24bd"+
		"\u0001\u0000\u0000\u0000\u24bd\u24bf\u0003\u051a\u028d\u0000\u24be\u24c0"+
		"\u0003\u0394\u01ca\u0000\u24bf\u24be\u0001\u0000\u0000\u0000\u24bf\u24c0"+
		"\u0001\u0000\u0000\u0000\u24c0\u0519\u0001\u0000\u0000\u0000\u24c1\u24c6"+
		"\u0003\u03f8\u01fc\u0000\u24c2\u24c3\u0005$\u0000\u0000\u24c3\u24c5\u0003"+
		"\u03f8\u01fc\u0000\u24c4\u24c2\u0001\u0000\u0000\u0000\u24c5\u24c8\u0001"+
		"\u0000\u0000\u0000\u24c6\u24c4\u0001\u0000\u0000\u0000\u24c6\u24c7\u0001"+
		"\u0000\u0000\u0000\u24c7\u051b\u0001\u0000\u0000\u0000\u24c8\u24c6\u0001"+
		"\u0000\u0000\u0000\u24c9\u24ca\u0005\u01ba\u0000\u0000\u24ca\u24cc\u0005"+
		"\u01d6\u0000\u0000\u24cb\u24cd\u0003\u02a0\u0150\u0000\u24cc\u24cb\u0001"+
		"\u0000\u0000\u0000\u24cc\u24cd\u0001\u0000\u0000\u0000\u24cd\u24ce\u0001"+
		"\u0000\u0000\u0000\u24ce\u24cf\u0005\u001e\u0000\u0000\u24cf\u24d0\u0003"+
		"\u017e\u00bf\u0000\u24d0\u24d1\u0005\u01e4\u0000\u0000\u24d1\u24d2\u0003"+
		"\u017e\u00bf\u0000\u24d2\u24d4\u0005\u001f\u0000\u0000\u24d3\u24d5\u0003"+
		"\u0394\u01ca\u0000\u24d4\u24d3\u0001\u0000\u0000\u0000\u24d4\u24d5\u0001"+
		"\u0000\u0000\u0000\u24d5\u051d\u0001\u0000\u0000\u0000\u24d6\u24d7\u0005"+
		"\u01ba\u0000\u0000\u24d7\u24d9\u0005\u0228\u0000\u0000\u24d8\u24da\u0003"+
		"\u02a0\u0150\u0000\u24d9\u24d8\u0001\u0000\u0000\u0000\u24d9\u24da\u0001"+
		"\u0000\u0000\u0000\u24da\u24db\u0001\u0000\u0000\u0000\u24db\u24dd\u0003"+
		"\u00f4z\u0000\u24dc\u24de\u0003\u0394\u01ca\u0000\u24dd\u24dc\u0001\u0000"+
		"\u0000\u0000\u24dd\u24de\u0001\u0000\u0000\u0000\u24de\u051f\u0001\u0000"+
		"\u0000\u0000\u24df\u24e0\u0005\u01ba\u0000\u0000\u24e0\u24e2\u0005\u0128"+
		"\u0000\u0000\u24e1\u24e3\u0003\u02a0\u0150\u0000\u24e2\u24e1\u0001\u0000"+
		"\u0000\u0000\u24e2\u24e3\u0001\u0000\u0000\u0000\u24e3\u24e4\u0001\u0000"+
		"\u0000\u0000\u24e4\u24e6\u0003\u00f4z\u0000\u24e5\u24e7\u0003\u0394\u01ca"+
		"\u0000\u24e6\u24e5\u0001\u0000\u0000\u0000\u24e6\u24e7\u0001\u0000\u0000"+
		"\u0000\u24e7\u0521\u0001\u0000\u0000\u0000\u24e8\u24e9\u0005\u01ba\u0000"+
		"\u0000\u24e9\u24eb\u0005u\u0000\u0000\u24ea\u24ec\u0003\u02a0\u0150\u0000"+
		"\u24eb\u24ea\u0001\u0000\u0000\u0000\u24eb\u24ec\u0001\u0000\u0000\u0000"+
		"\u24ec\u24ed\u0001\u0000\u0000\u0000\u24ed\u24ef\u0003\u01e4\u00f2\u0000"+
		"\u24ee\u24f0\u0003\u0394\u01ca\u0000\u24ef\u24ee\u0001\u0000\u0000\u0000"+
		"\u24ef\u24f0\u0001\u0000\u0000\u0000\u24f0\u0523\u0001\u0000\u0000\u0000"+
		"\u24f1\u24f2\u0005\u01ba\u0000\u0000\u24f2\u24f3\u0005\u0145\u0000\u0000"+
		"\u24f3\u24f5\u0005\u01cc\u0000\u0000\u24f4\u24f6\u0003\u02a0\u0150\u0000"+
		"\u24f5\u24f4\u0001\u0000\u0000\u0000\u24f5\u24f6\u0001\u0000\u0000\u0000"+
		"\u24f6\u24f7\u0001\u0000\u0000\u0000\u24f7\u24f9\u0003\u01e4\u00f2\u0000"+
		"\u24f8\u24fa\u0003\u0394\u01ca\u0000\u24f9\u24f8\u0001\u0000\u0000\u0000"+
		"\u24f9\u24fa\u0001\u0000\u0000\u0000\u24fa\u0525\u0001\u0000\u0000\u0000"+
		"\u24fb\u24fc\u0005\u01ba\u0000\u0000\u24fc\u24fe\u0005y\u0000\u0000\u24fd"+
		"\u24ff\u0003\u02a0\u0150\u0000\u24fe\u24fd\u0001\u0000\u0000\u0000\u24fe"+
		"\u24ff\u0001\u0000\u0000\u0000\u24ff\u2500\u0001\u0000\u0000\u0000\u2500"+
		"\u2502\u0003\u01e4\u00f2\u0000\u2501\u2503\u0003\u0394\u01ca\u0000\u2502"+
		"\u2501\u0001\u0000\u0000\u0000\u2502\u2503\u0001\u0000\u0000\u0000\u2503"+
		"\u0527\u0001\u0000\u0000\u0000\u2504\u2505\u0005\u01ba\u0000\u0000\u2505"+
		"\u2506\u0005\u01c7\u0000\u0000\u2506\u2507\u0005o\u0000\u0000\u2507\u2509"+
		"\u0005\u0197\u0000\u0000\u2508\u250a\u0003\u02a0\u0150\u0000\u2509\u2508"+
		"\u0001\u0000\u0000\u0000\u2509\u250a\u0001\u0000\u0000\u0000\u250a\u250b"+
		"\u0001\u0000\u0000\u0000\u250b\u250d\u0003\u01e4\u00f2\u0000\u250c\u250e"+
		"\u0003\u0394\u01ca\u0000\u250d\u250c\u0001\u0000\u0000\u0000\u250d\u250e"+
		"\u0001\u0000\u0000\u0000\u250e\u0529\u0001\u0000\u0000\u0000\u250f\u2510"+
		"\u0005\u01ba\u0000\u0000\u2510\u2511\u0005\u01c7\u0000\u0000\u2511\u2513"+
		"\u0005\u01c1\u0000\u0000\u2512\u2514\u0003\u02a0\u0150\u0000\u2513\u2512"+
		"\u0001\u0000\u0000\u0000\u2513\u2514\u0001\u0000\u0000\u0000\u2514\u2515"+
		"\u0001\u0000\u0000\u0000\u2515\u251a\u0003\u00eew\u0000\u2516\u2517\u0005"+
		"$\u0000\u0000\u2517\u2519\u0003\u00eew\u0000\u2518\u2516\u0001\u0000\u0000"+
		"\u0000\u2519\u251c\u0001\u0000\u0000\u0000\u251a\u2518\u0001\u0000\u0000"+
		"\u0000\u251a\u251b\u0001\u0000\u0000\u0000\u251b\u251e\u0001\u0000\u0000";
	private static final String _serializedATNSegment4 =
		"\u0000\u251c\u251a\u0001\u0000\u0000\u0000\u251d\u251f\u0003\u0394\u01ca"+
		"\u0000\u251e\u251d\u0001\u0000\u0000\u0000\u251e\u251f\u0001\u0000\u0000"+
		"\u0000\u251f\u052b\u0001\u0000\u0000\u0000\u2520\u2521\u0005\u01ba\u0000"+
		"\u0000\u2521\u2523\u0005\u01cb\u0000\u0000\u2522\u2524\u0003\u02a0\u0150"+
		"\u0000\u2523\u2522\u0001\u0000\u0000\u0000\u2523\u2524\u0001\u0000\u0000"+
		"\u0000\u2524\u2525\u0001\u0000\u0000\u0000\u2525\u2527\u0003\u052e\u0297"+
		"\u0000\u2526\u2528\u0003\u0394\u01ca\u0000\u2527\u2526\u0001\u0000\u0000"+
		"\u0000\u2527\u2528\u0001\u0000\u0000\u0000\u2528\u052d\u0001\u0000\u0000"+
		"\u0000\u2529\u252e\u0003\u03f4\u01fa\u0000\u252a\u252b\u0005$\u0000\u0000"+
		"\u252b\u252d\u0003\u03f4\u01fa\u0000\u252c\u252a\u0001\u0000\u0000\u0000"+
		"\u252d\u2530\u0001\u0000\u0000\u0000\u252e\u252c\u0001\u0000\u0000\u0000"+
		"\u252e\u252f\u0001\u0000\u0000\u0000\u252f\u052f\u0001\u0000\u0000\u0000"+
		"\u2530\u252e\u0001\u0000\u0000\u0000\u2531\u2533\u0005\u01ba\u0000\u0000"+
		"\u2532\u2534\u0005\u015c\u0000\u0000\u2533\u2532\u0001\u0000\u0000\u0000"+
		"\u2533\u2534\u0001\u0000\u0000\u0000\u2534\u2535\u0001\u0000\u0000\u0000"+
		"\u2535\u2537\u0005\u008a\u0000\u0000\u2536\u2538\u0003\u02a0\u0150\u0000"+
		"\u2537\u2536\u0001\u0000\u0000\u0000\u2537\u2538\u0001\u0000\u0000\u0000"+
		"\u2538\u2539\u0001\u0000\u0000\u0000\u2539\u253b\u0003\u00f4z\u0000\u253a"+
		"\u253c\u0003\u0394\u01ca\u0000\u253b\u253a\u0001\u0000\u0000\u0000\u253b"+
		"\u253c\u0001\u0000\u0000\u0000\u253c\u0531\u0001\u0000\u0000\u0000\u253d"+
		"\u253e\u0005\u01ba\u0000\u0000\u253e\u253f\u0005\u00fd\u0000\u0000\u253f"+
		"\u2541\u0005\u01ce\u0000\u0000\u2540\u2542\u0003\u02a0\u0150\u0000\u2541"+
		"\u2540\u0001\u0000\u0000\u0000\u2541\u2542\u0001\u0000\u0000\u0000\u2542"+
		"\u2543\u0001\u0000\u0000\u0000\u2543\u2545\u0003\u0448\u0224\u0000\u2544"+
		"\u2546\u0003\u0394\u01ca\u0000\u2545\u2544\u0001\u0000\u0000\u0000\u2545"+
		"\u2546\u0001\u0000\u0000\u0000\u2546\u0533\u0001\u0000\u0000\u0000\u2547"+
		"\u2548\u0005\u01ba\u0000\u0000\u2548\u254a\u0005\u00fe\u0000\u0000\u2549"+
		"\u254b\u0003\u02a0\u0150\u0000\u254a\u2549\u0001\u0000\u0000\u0000\u254a"+
		"\u254b\u0001\u0000\u0000\u0000\u254b\u254c\u0001\u0000\u0000\u0000\u254c"+
		"\u254e\u0003\u0536\u029b\u0000\u254d\u254f\u0003\u0394\u01ca\u0000\u254e"+
		"\u254d\u0001\u0000\u0000\u0000\u254e\u254f\u0001\u0000\u0000\u0000\u254f"+
		"\u0535\u0001\u0000\u0000\u0000\u2550\u2555\u0003\u03b8\u01dc\u0000\u2551"+
		"\u2552\u0005$\u0000\u0000\u2552\u2554\u0003\u03b8\u01dc\u0000\u2553\u2551"+
		"\u0001\u0000\u0000\u0000\u2554\u2557\u0001\u0000\u0000\u0000\u2555\u2553"+
		"\u0001\u0000\u0000\u0000\u2555\u2556\u0001\u0000\u0000\u0000\u2556\u0537"+
		"\u0001\u0000\u0000\u0000\u2557\u2555\u0001\u0000\u0000\u0000\u2558\u2559"+
		"\u0005\u01ba\u0000\u0000\u2559\u255a\u0005\u00fe\u0000\u0000\u255a\u255c"+
		"\u0005\u0130\u0000\u0000\u255b\u255d\u0003\u02a0\u0150\u0000\u255c\u255b"+
		"\u0001\u0000\u0000\u0000\u255c\u255d\u0001\u0000\u0000\u0000\u255d\u255e"+
		"\u0001\u0000\u0000\u0000\u255e\u255f\u0003\u01e0\u00f0\u0000\u255f\u2560"+
		"\u0005\u01e2\u0000\u0000\u2560\u2562\u0003\u00f4z\u0000\u2561\u2563\u0003"+
		"\u0394\u01ca\u0000\u2562\u2561\u0001\u0000\u0000\u0000\u2562\u2563\u0001"+
		"\u0000\u0000\u0000\u2563\u0539\u0001\u0000\u0000\u0000\u2564\u2565\u0005"+
		"\u01ba\u0000\u0000\u2565\u2566\u0005\u00fe\u0000\u0000\u2566\u2568\u0005"+
		"\u0149\u0000\u0000\u2567\u2569\u0003\u02a0\u0150\u0000\u2568\u2567\u0001"+
		"\u0000\u0000\u0000\u2568\u2569\u0001\u0000\u0000\u0000\u2569\u256a\u0001"+
		"\u0000\u0000\u0000\u256a\u256b\u0003\u01e0\u00f0\u0000\u256b\u256c\u0005"+
		"\u01e2\u0000\u0000\u256c\u256e\u0003\u00f4z\u0000\u256d\u256f\u0003\u0394"+
		"\u01ca\u0000\u256e\u256d\u0001\u0000\u0000\u0000\u256e\u256f\u0001\u0000"+
		"\u0000\u0000\u256f\u053b\u0001\u0000\u0000\u0000\u2570\u2571\u0005\u01ba"+
		"\u0000\u0000\u2571\u2572\u0005\u0098\u0000\u0000\u2572\u2573\u0005\u01f9"+
		"\u0000\u0000\u2573\u2575\u0003\u027c\u013e\u0000\u2574\u2576\u0003\u0394"+
		"\u01ca\u0000\u2575\u2574\u0001\u0000\u0000\u0000\u2575\u2576\u0001\u0000"+
		"\u0000\u0000\u2576\u053d\u0001\u0000\u0000\u0000\u2577\u2578\u0005\u01ba"+
		"\u0000\u0000\u2578\u257a\u0005\u017c\u0000\u0000\u2579\u257b\u0003\u02a0"+
		"\u0150\u0000\u257a\u2579\u0001\u0000\u0000\u0000\u257a\u257b\u0001\u0000"+
		"\u0000\u0000\u257b\u257c\u0001\u0000\u0000\u0000\u257c\u257d\u0003\u00f4"+
		"z\u0000\u257d\u257e\u0005\u01e5\u0000\u0000\u257e\u2580\u0003\u00eew\u0000"+
		"\u257f\u2581\u0003\u0394\u01ca\u0000\u2580\u257f\u0001\u0000\u0000\u0000"+
		"\u2580\u2581\u0001\u0000\u0000\u0000\u2581\u053f\u0001\u0000\u0000\u0000"+
		"\u2582\u2583\u0005\u01ba\u0000\u0000\u2583\u2585\u0005\u01cd\u0000\u0000"+
		"\u2584\u2586\u0003\u02a0\u0150\u0000\u2585\u2584\u0001\u0000\u0000\u0000"+
		"\u2585\u2586\u0001\u0000\u0000\u0000\u2586\u2587\u0001\u0000\u0000\u0000"+
		"\u2587\u2589\u0003\u052e\u0297\u0000\u2588\u258a\u0003\u0394\u01ca\u0000"+
		"\u2589\u2588\u0001\u0000\u0000\u0000\u2589\u258a\u0001\u0000\u0000\u0000"+
		"\u258a\u0541\u0001\u0000\u0000\u0000\u258b\u258c\u0005\u01ba\u0000\u0000"+
		"\u258c\u258e\u0005\u0160\u0000\u0000\u258d\u258f\u0003\u02a0\u0150\u0000"+
		"\u258e\u258d\u0001\u0000\u0000\u0000\u258e\u258f\u0001\u0000\u0000\u0000"+
		"\u258f\u2590\u0001\u0000\u0000\u0000\u2590\u2592\u0003\u0448\u0224\u0000"+
		"\u2591\u2593\u0003\u0394\u01ca\u0000\u2592\u2591\u0001\u0000\u0000\u0000"+
		"\u2592\u2593\u0001\u0000\u0000\u0000\u2593\u0543\u0001\u0000\u0000\u0000"+
		"\u2594\u2595\u0005\u01ba\u0000\u0000\u2595\u2597\u0005\u00a3\u0000\u0000"+
		"\u2596\u2598\u0003\u02a0\u0150\u0000\u2597\u2596\u0001\u0000\u0000\u0000"+
		"\u2597\u2598\u0001\u0000\u0000\u0000\u2598\u2599\u0001\u0000\u0000\u0000"+
		"\u2599\u259b\u0003\u052e\u0297\u0000\u259a\u259c\u0003\u0394\u01ca\u0000"+
		"\u259b\u259a\u0001\u0000\u0000\u0000\u259b\u259c\u0001\u0000\u0000\u0000"+
		"\u259c\u0545\u0001\u0000\u0000\u0000\u259d\u259e\u0005\u01ba\u0000\u0000"+
		"\u259e\u25a0\u0005\u00a4\u0000\u0000\u259f\u25a1\u0003\u02a0\u0150\u0000"+
		"\u25a0\u259f\u0001\u0000\u0000\u0000\u25a0\u25a1\u0001\u0000\u0000\u0000"+
		"\u25a1\u25a2\u0001\u0000\u0000\u0000\u25a2\u25a3\u0003\u00f4z\u0000\u25a3"+
		"\u25a4\u0005\u01e5\u0000\u0000\u25a4\u25a6\u0003\u00eew\u0000\u25a5\u25a7"+
		"\u0003\u0394\u01ca\u0000\u25a6\u25a5\u0001\u0000\u0000\u0000\u25a6\u25a7"+
		"\u0001\u0000\u0000\u0000\u25a7\u0547\u0001\u0000\u0000\u0000\u25a8\u25a9"+
		"\u0005\u01ba\u0000\u0000\u25a9\u25ab\u0005\u00a6\u0000\u0000\u25aa\u25ac"+
		"\u0003\u02a0\u0150\u0000\u25ab\u25aa\u0001\u0000\u0000\u0000\u25ab\u25ac"+
		"\u0001\u0000\u0000\u0000\u25ac\u25ad\u0001\u0000\u0000\u0000\u25ad\u25af"+
		"\u0003p8\u0000\u25ae\u25b0\u0003\u0394\u01ca\u0000\u25af\u25ae\u0001\u0000"+
		"\u0000\u0000\u25af\u25b0\u0001\u0000\u0000\u0000\u25b0\u0549\u0001\u0000"+
		"\u0000\u0000\u25b1\u25b2\u0005\u01ba\u0000\u0000\u25b2\u25b4\u0005\u0177"+
		"\u0000\u0000\u25b3\u25b5\u0003\u02a0\u0150\u0000\u25b4\u25b3\u0001\u0000"+
		"\u0000\u0000\u25b4\u25b5\u0001\u0000\u0000\u0000\u25b5\u25b6\u0001\u0000"+
		"\u0000\u0000\u25b6\u25b8\u0003p8\u0000\u25b7\u25b9\u0003\u0394\u01ca\u0000"+
		"\u25b8\u25b7\u0001\u0000\u0000\u0000\u25b8\u25b9\u0001\u0000\u0000\u0000"+
		"\u25b9\u054b\u0001\u0000\u0000\u0000\u25ba\u25bb\u0005\u01ba\u0000\u0000"+
		"\u25bb\u25bd\u0005\u00ab\u0000\u0000\u25bc\u25be\u0003\u02a0\u0150\u0000"+
		"\u25bd\u25bc\u0001\u0000\u0000\u0000\u25bd\u25be\u0001\u0000\u0000\u0000"+
		"\u25be\u25bf\u0001\u0000\u0000\u0000\u25bf\u25c1\u0003p8\u0000\u25c0\u25c2"+
		"\u0003\u0394\u01ca\u0000\u25c1\u25c0\u0001\u0000\u0000\u0000\u25c1\u25c2"+
		"\u0001\u0000\u0000\u0000\u25c2\u054d\u0001\u0000\u0000\u0000\u25c3\u25c4"+
		"\u0005\u01ba\u0000\u0000\u25c4\u25c6\u0005\u0178\u0000\u0000\u25c5\u25c7"+
		"\u0003\u02a0\u0150\u0000\u25c6\u25c5\u0001\u0000\u0000\u0000\u25c6\u25c7"+
		"\u0001\u0000\u0000\u0000\u25c7\u25c8\u0001\u0000\u0000\u0000\u25c8\u25ca"+
		"\u0003\u015a\u00ad\u0000\u25c9\u25cb\u0003\u0394\u01ca\u0000\u25ca\u25c9"+
		"\u0001\u0000\u0000\u0000\u25ca\u25cb\u0001\u0000\u0000\u0000\u25cb\u054f"+
		"\u0001\u0000\u0000\u0000\u25cc\u25cd\u0005\u01ba\u0000\u0000\u25cd\u25cf"+
		"\u0005\u00ad\u0000\u0000\u25ce\u25d0\u0003\u02a0\u0150\u0000\u25cf\u25ce"+
		"\u0001\u0000\u0000\u0000\u25cf\u25d0\u0001\u0000\u0000\u0000\u25d0\u25d1"+
		"\u0001\u0000\u0000\u0000\u25d1\u25d2\u0003\u015a\u00ad\u0000\u25d2\u0551"+
		"\u0001\u0000\u0000\u0000\u25d3\u25d4\u0005\u01ba\u0000\u0000\u25d4\u25d5"+
		"\u0005\u0231\u0000\u0000\u25d5\u25d6\u0005\u0179\u0000\u0000\u25d6\u25d8"+
		"\u0007@\u0000\u0000\u25d7\u25d9\u0003\u02a0\u0150\u0000\u25d8\u25d7\u0001"+
		"\u0000\u0000\u0000\u25d8\u25d9\u0001\u0000\u0000\u0000\u25d9\u25da\u0001"+
		"\u0000\u0000\u0000\u25da\u25dc\u0003\u015a\u00ad\u0000\u25db\u25dd\u0003"+
		"\u0394\u01ca\u0000\u25dc\u25db\u0001\u0000\u0000\u0000\u25dc\u25dd\u0001"+
		"\u0000\u0000\u0000\u25dd\u0553\u0001\u0000\u0000\u0000\u25de\u25df\u0005"+
		"\u01ba\u0000\u0000\u25df\u25e1\u0005\u018c\u0000\u0000\u25e0\u25e2\u0003"+
		"\u02a0\u0150\u0000\u25e1\u25e0\u0001\u0000\u0000\u0000\u25e1\u25e2\u0001"+
		"\u0000\u0000\u0000\u25e2\u25e3\u0001\u0000\u0000\u0000\u25e3\u25e4\u0005"+
		"\u01e9\u0000\u0000\u25e4\u25e5\u0003\u017e\u00bf\u0000\u25e5\u25e6\u0005"+
		"\u008a\u0000\u0000\u25e6\u25e8\u0003\u00f4z\u0000\u25e7\u25e9\u0003\u0394"+
		"\u01ca\u0000\u25e8\u25e7\u0001\u0000\u0000\u0000\u25e8\u25e9\u0001\u0000"+
		"\u0000\u0000\u25e9\u0555\u0001\u0000\u0000\u0000\u25ea\u25eb\u0005\u01ba"+
		"\u0000\u0000\u25eb\u25ed\u0005\u01cc\u0000\u0000\u25ec\u25ee\u0003\u02a0"+
		"\u0150\u0000\u25ed\u25ec\u0001\u0000\u0000\u0000\u25ed\u25ee\u0001\u0000"+
		"\u0000\u0000\u25ee\u25ef\u0001\u0000\u0000\u0000\u25ef\u25f0\u0003\u015a"+
		"\u00ad\u0000\u25f0\u25f1\u0005\u01e5\u0000\u0000\u25f1\u25f3\u0003\u00ee"+
		"w\u0000\u25f2\u25f4\u0003\u0394\u01ca\u0000\u25f3\u25f2\u0001\u0000\u0000"+
		"\u0000\u25f3\u25f4\u0001\u0000\u0000\u0000\u25f4\u0557\u0001\u0000\u0000"+
		"\u0000\u25f5\u25f6\u0005\u01ba\u0000\u0000\u25f6\u25f8\u0005\u022d\u0000"+
		"\u0000\u25f7\u25f9\u0003\u02a0\u0150\u0000\u25f8\u25f7\u0001\u0000\u0000"+
		"\u0000\u25f8\u25f9\u0001\u0000\u0000\u0000\u25f9\u25fa\u0001\u0000\u0000"+
		"\u0000\u25fa\u25fc\u0003\u0448\u0224\u0000\u25fb\u25fd\u0003\u0394\u01ca"+
		"\u0000\u25fc\u25fb\u0001\u0000\u0000\u0000\u25fc\u25fd\u0001\u0000\u0000"+
		"\u0000\u25fd\u0559\u0001\u0000\u0000\u0000\u25fe\u25ff\u0005\u01ba\u0000"+
		"\u0000\u25ff\u2600\u0005a\u0000\u0000\u2600\u2602\u0005\u0155\u0000\u0000"+
		"\u2601\u2603\u0003\u02a0\u0150\u0000\u2602\u2601\u0001\u0000\u0000\u0000"+
		"\u2602\u2603\u0001\u0000\u0000\u0000\u2603\u2604\u0001\u0000\u0000\u0000"+
		"\u2604\u2605\u0005\u01e9\u0000\u0000\u2605\u2606\u0003\u0462\u0231\u0000"+
		"\u2606\u2607\u0005\u0177\u0000\u0000\u2607\u2608\u0003\u00f4z\u0000\u2608"+
		"\u055b\u0001\u0000\u0000\u0000\u2609\u260a\u0005\u01ba\u0000\u0000\u260a"+
		"\u260c\u0005\u01ce\u0000\u0000\u260b\u260d\u0003\u02a0\u0150\u0000\u260c"+
		"\u260b\u0001\u0000\u0000\u0000\u260c\u260d\u0001\u0000\u0000\u0000\u260d"+
		"\u260e\u0001\u0000\u0000\u0000\u260e\u2610\u0003p8\u0000\u260f\u2611\u0003"+
		"\u0394\u01ca\u0000\u2610\u260f\u0001\u0000\u0000\u0000\u2610\u2611\u0001"+
		"\u0000\u0000\u0000\u2611\u055d\u0001\u0000\u0000\u0000\u2612\u2613\u0005"+
		"\u016f\u0000\u0000\u2613\u2614\u0005\u01c7\u0000\u0000\u2614\u2615\u0005"+
		"\u01bc\u0000\u0000\u2615\u2617\u0003\u00f4z\u0000\u2616\u2618\u0003\u0560"+
		"\u02b0\u0000\u2617\u2616\u0001\u0000\u0000\u0000\u2617\u2618\u0001\u0000"+
		"\u0000\u0000\u2618\u2619\u0001\u0000\u0000\u0000\u2619\u261a\u0005\u01d9"+
		"\u0000\u0000\u261a\u261b\u0005\u0177\u0000\u0000\u261b\u261c\u0003\u00f4"+
		"z\u0000\u261c\u261d\u0005\u01cf\u0000\u0000\u261d\u261f\u0003\u00f4z\u0000"+
		"\u261e\u2620\u0003\u0264\u0132\u0000\u261f\u261e\u0001\u0000\u0000\u0000"+
		"\u261f\u2620\u0001\u0000\u0000\u0000\u2620\u055f\u0001\u0000\u0000\u0000"+
		"\u2621\u2622\u0003\u0562\u02b1\u0000\u2622\u2623\u0005\u001e\u0000\u0000"+
		"\u2623\u2624\u0003\u0292\u0149\u0000\u2624\u2625\u0005\u001f\u0000\u0000"+
		"\u2625\u0561\u0001\u0000\u0000\u0000\u2626\u2627\u0005\u01fd\u0000\u0000"+
		"\u2627\u262a\u0005\u01ea\u0000\u0000\u2628\u262a\u0005\u023f\u0000\u0000"+
		"\u2629\u2626\u0001\u0000\u0000\u0000\u2629\u2628\u0001\u0000\u0000\u0000"+
		"\u262a\u0563\u0001\u0000\u0000\u0000\u262b\u262c\u0005\u0148\u0000\u0000"+
		"\u262c\u262d\u0003\u010a\u0085\u0000\u262d\u262e\u0003\u0566\u02b3\u0000"+
		"\u262e\u2631\u0005\u0143\u0000\u0000\u262f\u2630\u0007*\u0000\u0000\u2630"+
		"\u2632\u0005\u0154\u0000\u0000\u2631\u262f\u0001\u0000\u0000\u0000\u2631"+
		"\u2632\u0001\u0000\u0000\u0000\u2632\u2633\u0001\u0000\u0000\u0000\u2633"+
		"\u2634\u0005\u01e9\u0000\u0000\u2634\u2635\u0003J%\u0000\u2635\u0565\u0001"+
		"\u0000\u0000\u0000\u2636\u2638\u0005J\u0000\u0000\u2637\u2636\u0001\u0000"+
		"\u0000\u0000\u2637\u2638\u0001\u0000\u0000\u0000\u2638\u263a\u0001\u0000"+
		"\u0000\u0000\u2639\u263b\u0007B\u0000\u0000\u263a\u2639\u0001\u0000\u0000"+
		"\u0000\u263a\u263b\u0001\u0000\u0000\u0000\u263b\u2640\u0001\u0000\u0000"+
		"\u0000\u263c\u263e\u0005X\u0000\u0000\u263d\u263c\u0001\u0000\u0000\u0000"+
		"\u263d\u263e\u0001\u0000\u0000\u0000\u263e\u263f\u0001\u0000\u0000\u0000"+
		"\u263f\u2641\u0005\u0173\u0000\u0000\u2640\u263d\u0001\u0000\u0000\u0000"+
		"\u2640\u2641\u0001\u0000\u0000\u0000\u2641\u0567\u0001\u0000\u0000\u0000"+
		"\u2642\u2643\u0005\u0225\u0000\u0000\u2643\u2646\u0003\u010a\u0085\u0000"+
		"\u2644\u2647\u0003\u056a\u02b5\u0000\u2645\u2647\u0003\u056e\u02b7\u0000"+
		"\u2646\u2644\u0001\u0000\u0000\u0000\u2646\u2645\u0001\u0000\u0000\u0000"+
		"\u2646\u2647\u0001\u0000\u0000\u0000\u2647\u0569\u0001\u0000\u0000\u0000"+
		"\u2648\u2649\u0005\u01e2\u0000\u0000\u2649\u264e\u0003\u056c\u02b6\u0000"+
		"\u264a\u264b\u0005$\u0000\u0000\u264b\u264d\u0003\u056c\u02b6\u0000\u264c"+
		"\u264a\u0001\u0000\u0000\u0000\u264d\u2650\u0001\u0000\u0000\u0000\u264e"+
		"\u264c\u0001\u0000\u0000\u0000\u264e\u264f\u0001\u0000\u0000\u0000\u264f"+
		"\u056b\u0001\u0000\u0000\u0000\u2650\u264e\u0001\u0000\u0000\u0000\u2651"+
		"\u2654\u0003\u0156\u00ab\u0000\u2652\u2654\u0003\u02a4\u0152\u0000\u2653"+
		"\u2651\u0001\u0000\u0000\u0000\u2653\u2652\u0001\u0000\u0000\u0000\u2654"+
		"\u056d\u0001\u0000\u0000\u0000\u2655\u2656\u0005\u01e2\u0000\u0000\u2656"+
		"\u2657\u0005\u0221\u0000\u0000\u2657\u2658\u0005\u01b1\u0000\u0000\u2658"+
		"\u2659\u0003\u0570\u02b8\u0000\u2659\u056f\u0001\u0000\u0000\u0000\u265a"+
		"\u265d\u0003\u00e4r\u0000\u265b\u265d\u0003\u02a4\u0152\u0000\u265c\u265a"+
		"\u0001\u0000\u0000\u0000\u265c\u265b\u0001\u0000\u0000\u0000\u265d\u0571"+
		"\u0001\u0000\u0000\u0000\u265e\u2660\u0005\u015b\u0000\u0000\u265f\u2661"+
		"\u0003\u057c\u02be\u0000\u2660\u265f\u0001\u0000\u0000\u0000\u2660\u2661"+
		"\u0001\u0000\u0000\u0000\u2661\u2663\u0001\u0000\u0000\u0000\u2662\u2664"+
		"\u0007C\u0000\u0000\u2663\u2662\u0001\u0000\u0000\u0000\u2663\u2664\u0001"+
		"\u0000\u0000\u0000\u2664\u2665\u0001\u0000\u0000\u0000\u2665\u2666\u0003"+
		"\u010a\u0085\u0000\u2666\u0573\u0001\u0000\u0000\u0000\u2667\u2669\u0005"+
		"\u0241\u0000\u0000\u2668\u266a\u0003\u057c\u02be\u0000\u2669\u2668\u0001"+
		"\u0000\u0000\u0000\u2669\u266a\u0001\u0000\u0000\u0000\u266a\u266c\u0001"+
		"\u0000\u0000\u0000\u266b\u266d\u0007C\u0000\u0000\u266c\u266b\u0001\u0000"+
		"\u0000\u0000\u266c\u266d\u0001\u0000\u0000\u0000\u266d\u266e\u0001\u0000"+
		"\u0000\u0000\u266e\u266f\u0003\u010a\u0085\u0000\u266f\u0575\u0001\u0000"+
		"\u0000\u0000\u2670\u2671\u0005\u0159\u0000\u0000\u2671\u2672\u0003\u015e"+
		"\u00af\u0000\u2672\u0577\u0001\u0000\u0000\u0000\u2673\u2676\u0005\u018d"+
		"\u0000\u0000\u2674\u2677\u0003\u015e\u00af\u0000\u2675\u2677\u0005\u000f"+
		"\u0000\u0000\u2676\u2674\u0001\u0000\u0000\u0000\u2676\u2675\u0001\u0000"+
		"\u0000\u0000\u2677\u0579\u0001\u0000\u0000\u0000\u2678\u2679\u0005\u017d"+
		"\u0000\u0000\u2679\u267c\u0003\u015c\u00ae\u0000\u267a\u267b\u0005$\u0000"+
		"\u0000\u267b\u267d\u0005\u024f\u0000\u0000\u267c\u267a\u0001\u0000\u0000"+
		"\u0000\u267c\u267d\u0001\u0000\u0000\u0000\u267d\u057b\u0001\u0000\u0000"+
		"\u0000\u267e\u2693\u0005\u0226\u0000\u0000\u267f\u2693\u0005\u0165\u0000"+
		"\u0000\u2680\u2693\u0005}\u0000\u0000\u2681\u2693\u0005\u008c\u0000\u0000"+
		"\u2682\u2683\u0005\u011c\u0000\u0000\u2683\u2693\u0003\u021e\u010f\u0000"+
		"\u2684\u2685\u0005\u0167\u0000\u0000\u2685\u2693\u0003\u021e\u010f\u0000"+
		"\u2686\u2693\u0003\u021e\u010f\u0000\u2687\u2693\u0005\u01f4\u0000\u0000"+
		"\u2688\u2693\u0005\u014a\u0000\u0000\u2689\u268a\u0005\u014a\u0000\u0000"+
		"\u268a\u2693\u0003\u021e\u010f\u0000\u268b\u268c\u0005\u014a\u0000\u0000"+
		"\u268c\u2693\u0005\u01f4\u0000\u0000\u268d\u2693\u0005\u0123\u0000\u0000"+
		"\u268e\u268f\u0005\u0123\u0000\u0000\u268f\u2693\u0003\u021e\u010f\u0000"+
		"\u2690\u2691\u0005\u0123\u0000\u0000\u2691\u2693\u0005\u01f4\u0000\u0000"+
		"\u2692\u267e\u0001\u0000\u0000\u0000\u2692\u267f\u0001\u0000\u0000\u0000"+
		"\u2692\u2680\u0001\u0000\u0000\u0000\u2692\u2681\u0001\u0000\u0000\u0000"+
		"\u2692\u2682\u0001\u0000\u0000\u0000\u2692\u2684\u0001\u0000\u0000\u0000"+
		"\u2692\u2686\u0001\u0000\u0000\u0000\u2692\u2687\u0001\u0000\u0000\u0000"+
		"\u2692\u2688\u0001\u0000\u0000\u0000\u2692\u2689\u0001\u0000\u0000\u0000"+
		"\u2692\u268b\u0001\u0000\u0000\u0000\u2692\u268d\u0001\u0000\u0000\u0000"+
		"\u2692\u268e\u0001\u0000\u0000\u0000\u2692\u2690\u0001\u0000\u0000\u0000"+
		"\u2693\u057d\u0001\u0000\u0000\u0000\u2694\u2695\u0005\u016d\u0000\u0000"+
		"\u2695\u2697\u0003\u00f4z\u0000\u2696\u2698\u0003\u058e\u02c7\u0000\u2697"+
		"\u2696\u0001\u0000\u0000\u0000\u2697\u2698\u0001\u0000\u0000\u0000\u2698"+
		"\u2699\u0001\u0000\u0000\u0000\u2699\u269a\u0005\u01e4\u0000\u0000\u269a"+
		"\u269b\u0003b1\u0000\u269b\u057f\u0001\u0000\u0000\u0000\u269c\u269d\u0005"+
		"\u0164\u0000\u0000\u269d\u269e\u0003\u0582\u02c1\u0000\u269e\u0581\u0001"+
		"\u0000\u0000\u0000\u269f\u26a1\u0003\u058a\u02c5\u0000\u26a0\u26a2\u0005"+
		"i\u0000\u0000\u26a1\u26a0\u0001\u0000\u0000\u0000\u26a1\u26a2\u0001\u0000"+
		"\u0000\u0000\u26a2\u26a3\u0001\u0000\u0000\u0000\u26a3\u26a4\u0003\u015a"+
		"\u00ad\u0000\u26a4\u26be\u0001\u0000\u0000\u0000\u26a5\u26a7\u0003\u0588"+
		"\u02c4\u0000\u26a6\u26a8\u0005i\u0000\u0000\u26a7\u26a6\u0001\u0000\u0000"+
		"\u0000\u26a7\u26a8\u0001\u0000\u0000\u0000\u26a8\u26a9\u0001\u0000\u0000"+
		"\u0000\u26a9\u26aa\u0003\u00f4z\u0000\u26aa\u26be\u0001\u0000\u0000\u0000"+
		"\u26ab\u26ac\u0005\u001e\u0000\u0000\u26ac\u26ad\u0003\u0584\u02c2\u0000"+
		"\u26ad\u26ae\u0005\u001f\u0000\u0000\u26ae\u26b0\u0003\u058a\u02c5\u0000"+
		"\u26af\u26b1\u0005i\u0000\u0000\u26b0\u26af\u0001\u0000\u0000\u0000\u26b0"+
		"\u26b1\u0001\u0000\u0000\u0000\u26b1\u26b2\u0001\u0000\u0000\u0000\u26b2"+
		"\u26b3\u0003\u015a\u00ad\u0000\u26b3\u26be\u0001\u0000\u0000\u0000\u26b4"+
		"\u26b5\u0005\u001e\u0000\u0000\u26b5\u26b6\u0003\u0584\u02c2\u0000\u26b6"+
		"\u26b7\u0005\u001f\u0000\u0000\u26b7\u26b9\u0003\u0588\u02c4\u0000\u26b8"+
		"\u26ba\u0005i\u0000\u0000\u26b9\u26b8\u0001\u0000\u0000\u0000\u26b9\u26ba"+
		"\u0001\u0000\u0000\u0000\u26ba\u26bb\u0001\u0000\u0000\u0000\u26bb\u26bc"+
		"\u0003\u00f4z\u0000\u26bc\u26be\u0001\u0000\u0000\u0000\u26bd\u269f\u0001"+
		"\u0000\u0000\u0000\u26bd\u26a5\u0001\u0000\u0000\u0000\u26bd\u26ab\u0001"+
		"\u0000\u0000\u0000\u26bd\u26b4\u0001\u0000\u0000\u0000\u26be\u0583\u0001"+
		"\u0000\u0000\u0000\u26bf\u26c4\u0003\u0586\u02c3\u0000\u26c0\u26c1\u0005"+
		"$\u0000\u0000\u26c1\u26c3\u0003\u0586\u02c3\u0000\u26c2\u26c0\u0001\u0000"+
		"\u0000\u0000\u26c3\u26c6\u0001\u0000\u0000\u0000\u26c4\u26c2\u0001\u0000"+
		"\u0000\u0000\u26c4\u26c5\u0001\u0000\u0000\u0000\u26c5\u0585\u0001\u0000"+
		"\u0000\u0000\u26c6\u26c4\u0001\u0000\u0000\u0000\u26c7\u26c8\u0007D\u0000"+
		"\u0000\u26c8\u0587\u0001\u0000\u0000\u0000\u26c9\u26ca\u0007E\u0000\u0000"+
		"\u26ca\u0589\u0001\u0000\u0000\u0000\u26cb\u26cc\u00079\u0000\u0000\u26cc"+
		"\u058b\u0001\u0000\u0000\u0000\u26cd\u26cf\u0005\u0146\u0000\u0000\u26ce"+
		"\u26d0\u0005\u016d\u0000\u0000\u26cf\u26ce\u0001\u0000\u0000\u0000\u26cf"+
		"\u26d0\u0001\u0000\u0000\u0000\u26d0\u26d3\u0001\u0000\u0000\u0000\u26d1"+
		"\u26d4\u0003\u00f4z\u0000\u26d2\u26d4\u0005\u01f4\u0000\u0000\u26d3\u26d1"+
		"\u0001\u0000\u0000\u0000\u26d3\u26d2\u0001\u0000\u0000\u0000\u26d4\u058d"+
		"\u0001\u0000\u0000\u0000\u26d5\u26d6\u0005\u001e\u0000\u0000\u26d6\u26d7"+
		"\u0003\u0150\u00a8\u0000\u26d7\u26d8\u0005\u001f\u0000\u0000\u26d8\u058f"+
		"\u0001\u0000\u0000\u0000\u26d9\u26da\u0005\u016c\u0000\u0000\u26da\u26db"+
		"\u0005\u00fd\u0000\u0000\u26db\u26dd\u0005\u01ce\u0000\u0000\u26dc\u26de"+
		"\u0005i\u0000\u0000\u26dd\u26dc\u0001\u0000\u0000\u0000\u26dd\u26de\u0001"+
		"\u0000\u0000\u0000\u26de\u26df\u0001\u0000\u0000\u0000\u26df\u26e1\u0003"+
		"\u015a\u00ad\u0000\u26e0\u26e2\u0003\u02d6\u016b\u0000\u26e1\u26e0\u0001"+
		"\u0000\u0000\u0000\u26e1\u26e2\u0001\u0000\u0000\u0000\u26e2\u0591\u0001"+
		"\u0000\u0000\u0000\u26e3\u26e4\u0005\u01b9\u0000\u0000\u26e4\u26e5\u0005"+
		"\u01c7\u0000\u0000\u26e5\u26e7\u0005\u01c1\u0000\u0000\u26e6\u26e8\u0003"+
		"\u02a0\u0150\u0000\u26e7\u26e6\u0001\u0000\u0000\u0000\u26e7\u26e8\u0001"+
		"\u0000\u0000\u0000\u26e8\u26e9\u0001\u0000\u0000\u0000\u26e9\u26ea\u0003"+
		"\u00c2a\u0000\u26ea\u26eb\u0003\u0594\u02ca\u0000\u26eb\u0593\u0001\u0000"+
		"\u0000\u0000\u26ec\u26ed\u0005\u009e\u0000\u0000\u26ed\u26ee\u0005\u01ea"+
		"\u0000\u0000\u26ee\u26fc\u0003\u00f4z\u0000\u26ef\u26f1\u0005\u009e\u0000"+
		"\u0000\u26f0\u26f2\u0005\u01c2\u0000\u0000\u26f1\u26f0\u0001\u0000\u0000"+
		"\u0000\u26f1\u26f2\u0001\u0000\u0000\u0000\u26f2\u26f3\u0001\u0000\u0000"+
		"\u0000\u26f3\u26f4\u0003\u00f4z\u0000\u26f4\u26f5\u0005\u01ea\u0000\u0000"+
		"\u26f5\u26f6\u0003\u00f4z\u0000\u26f6\u26fc\u0001\u0000\u0000\u0000\u26f7"+
		"\u26fc\u0003\u0384\u01c2\u0000\u26f8\u26f9\u0005\u01c0\u0000\u0000\u26f9"+
		"\u26fa\u0005\u01bc\u0000\u0000\u26fa\u26fc\u0003\u00f4z\u0000\u26fb\u26ec"+
		"\u0001\u0000\u0000\u0000\u26fb\u26ef\u0001\u0000\u0000\u0000\u26fb\u26f7"+
		"\u0001\u0000\u0000\u0000\u26fb\u26f8\u0001\u0000\u0000\u0000\u26fc\u0595"+
		"\u0001\u0000\u0000\u0000\u26fd\u26fe\u0005\u01b8\u0000\u0000\u26fe\u26ff"+
		"\u0005\u00fe\u0000\u0000\u26ff\u2700\u0003\u013a\u009d\u0000\u2700\u2701"+
		"\u0003\u0252\u0129\u0000\u2701\u0597\u0001\u0000\u0000\u0000\u2702\u2703"+
		"\u0005\u01b8\u0000\u0000\u2703\u2704\u0005\u00fe\u0000\u0000\u2704\u2705"+
		"\u0005\u0130\u0000\u0000\u2705\u2707\u0003\u01e0\u00f0\u0000\u2706\u2708"+
		"\u0005\u0217\u0000\u0000\u2707\u2706\u0001\u0000\u0000\u0000\u2707\u2708"+
		"\u0001\u0000\u0000\u0000\u2708\u2709\u0001\u0000\u0000\u0000\u2709\u270a"+
		"\u0005\u01e9\u0000\u0000\u270a\u270b\u0005\u022d\u0000\u0000\u270b\u270c"+
		"\u0003\u017e\u00bf\u0000\u270c\u270d\u0005\u01e2\u0000\u0000\u270d\u2710"+
		"\u0003\u00f4z\u0000\u270e\u270f\u0005\u0149\u0000\u0000\u270f\u2711\u0003"+
		"\u01e0\u00f0\u0000\u2710\u270e\u0001\u0000\u0000\u0000\u2710\u2711\u0001"+
		"\u0000\u0000\u0000\u2711\u2712\u0001\u0000\u0000\u0000\u2712\u2713\u0005"+
		"\u01e4\u0000\u0000\u2713\u2714\u0003\u03aa\u01d5\u0000\u2714\u0599\u0001"+
		"\u0000\u0000\u0000\u2715\u2716\u0005\u01b8\u0000\u0000\u2716\u2717\u0005"+
		"\u00fe\u0000\u0000\u2717\u2718\u0005\u0149\u0000\u0000\u2718\u2719\u0003"+
		"\u01e0\u00f0\u0000\u2719\u271a\u0005\u01e2\u0000\u0000\u271a\u271b\u0003"+
		"\u00f4z\u0000\u271b\u059b\u0001\u0000\u0000\u0000\u271c\u271d\u0005\u01b8"+
		"\u0000\u0000\u271d\u271f\u0005\u01bc\u0000\u0000\u271e\u2720\u0003\u029e"+
		"\u014f\u0000\u271f\u271e\u0001\u0000\u0000\u0000\u271f\u2720\u0001\u0000"+
		"\u0000\u0000\u2720\u2721\u0001\u0000\u0000\u0000\u2721\u2722\u0003\u059e"+
		"\u02cf\u0000\u2722\u059d\u0001\u0000\u0000\u0000\u2723\u2725\u0003\u015c"+
		"\u00ae\u0000\u2724\u2723\u0001\u0000\u0000\u0000\u2724\u2725\u0001\u0000"+
		"\u0000\u0000\u2725\u2726\u0001\u0000\u0000\u0000\u2726\u2727\u0005\u019a"+
		"\u0000\u0000\u2727\u2728\u0003\u0228\u0114\u0000\u2728\u2729\u0003\u05a0"+
		"\u02d0\u0000\u2729\u272e\u0001\u0000\u0000\u0000\u272a\u272b\u0003\u015c"+
		"\u00ae\u0000\u272b\u272c\u0003\u05a0\u02d0\u0000\u272c\u272e\u0001\u0000"+
		"\u0000\u0000\u272d\u2724\u0001\u0000\u0000\u0000\u272d\u272a\u0001\u0000"+
		"\u0000\u0000\u272e\u059f\u0001\u0000\u0000\u0000\u272f\u2731\u0003\u05a2"+
		"\u02d1\u0000\u2730\u272f\u0001\u0000\u0000\u0000\u2731\u2734\u0001\u0000"+
		"\u0000\u0000\u2732\u2730\u0001\u0000\u0000\u0000\u2732\u2733\u0001\u0000"+
		"\u0000\u0000\u2733\u05a1\u0001\u0000\u0000\u0000\u2734\u2732\u0001\u0000"+
		"\u0000\u0000\u2735\u273c\u0003\u02c6\u0163\u0000\u2736\u273c\u0003\u02e2"+
		"\u0171\u0000\u2737\u273c\u0003\u04fc\u027e\u0000\u2738\u273c\u0003\u04e0"+
		"\u0270\u0000\u2739\u273c\u0003\u02a6\u0153\u0000\u273a\u273c\u0003\u02ec"+
		"\u0176\u0000\u273b\u2735\u0001\u0000\u0000\u0000\u273b\u2736\u0001\u0000"+
		"\u0000\u0000\u273b\u2737\u0001\u0000\u0000\u0000\u273b\u2738\u0001\u0000"+
		"\u0000\u0000\u273b\u2739\u0001\u0000\u0000\u0000\u273b\u273a\u0001\u0000"+
		"\u0000\u0000\u273c\u05a3\u0001\u0000\u0000\u0000\u273d\u273e\u0005\u00a5"+
		"\u0000\u0000\u273e\u2741\u0005\u014e\u0000\u0000\u273f\u2740\u0005\u01e9"+
		"\u0000\u0000\u2740\u2742\u0003\u0278\u013c\u0000\u2741\u273f\u0001\u0000"+
		"\u0000\u0000\u2741\u2742\u0001\u0000\u0000\u0000\u2742\u2743\u0001\u0000"+
		"\u0000\u0000\u2743\u2744\u0005\u01e5\u0000\u0000\u2744\u2745\u0003\u05a8"+
		"\u02d4\u0000\u2745\u2746\u0005\u01ed\u0000\u0000\u2746\u2747\u0003\u05a6"+
		"\u02d3\u0000\u2747\u05a5\u0001\u0000\u0000\u0000\u2748\u2749\u00074\u0000"+
		"\u0000\u2749\u05a7\u0001\u0000\u0000\u0000\u274a\u274b\u0003\u047e\u023f"+
		"\u0000\u274b\u274c\u0003\u01e0\u00f0\u0000\u274c\u2759\u0001\u0000\u0000"+
		"\u0000\u274d\u274e\u0005\u01c2\u0000\u0000\u274e\u2759\u0003\u01e0\u00f0"+
		"\u0000\u274f\u2750\u0007F\u0000\u0000\u2750\u2759\u0003\u017e\u00bf\u0000"+
		"\u2751\u2752\u0007G\u0000\u0000\u2752\u2759\u0003\u03f8\u01fc\u0000\u2753"+
		"\u2754\u0005\u008b\u0000\u0000\u2754\u2755\u0005\u0094\u0000\u0000\u2755"+
		"\u2759\u0003\u0232\u0119\u0000\u2756\u2757\u0007H\u0000\u0000\u2757\u2759"+
		"\u0003\u03f4\u01fa\u0000\u2758\u274a\u0001\u0000\u0000\u0000\u2758\u274d"+
		"\u0001\u0000\u0000\u0000\u2758\u274f\u0001\u0000\u0000\u0000\u2758\u2751"+
		"\u0001\u0000\u0000\u0000\u2758\u2753\u0001\u0000\u0000\u0000\u2758\u2756"+
		"\u0001\u0000\u0000\u0000\u2759\u05a9\u0001\u0000\u0000\u0000\u275a\u275b"+
		"\u0003\u05ae\u02d7\u0000\u275b\u275c\u0005\u01e5\u0000\u0000\u275c\u275d"+
		"\u0003\u05b0\u02d8\u0000\u275d\u275e\u0007\u0007\u0000\u0000\u275e\u2762"+
		"\u0003\u03d4\u01ea\u0000\u275f\u2760\u0005\u01d1\u0000\u0000\u2760\u2761"+
		"\u0005\u01bd\u0000\u0000\u2761\u2763\u0005Y\u0000\u0000\u2762\u275f\u0001"+
		"\u0000\u0000\u0000\u2762\u2763\u0001\u0000\u0000\u0000\u2763\u05ab\u0001"+
		"\u0000\u0000\u0000\u2764\u2765\u0003\u03dc\u01ee\u0000\u2765\u2766\u0007"+
		"\u0007\u0000\u0000\u2766\u276a\u0003\u027c\u013e\u0000\u2767\u2768\u0005"+
		"\u01d1\u0000\u0000\u2768\u2769\u0005I\u0000\u0000\u2769\u276b\u0005Y\u0000"+
		"\u0000\u276a\u2767\u0001\u0000\u0000\u0000\u276a\u276b\u0001\u0000\u0000"+
		"\u0000\u276b\u276f\u0001\u0000\u0000\u0000\u276c\u276d\u0005\u0153\u0000"+
		"\u0000\u276d\u276e\u0005\u01f9\u0000\u0000\u276e\u2770\u0003\u0228\u0114"+
		"\u0000\u276f\u276c\u0001\u0000\u0000\u0000\u276f\u2770\u0001\u0000\u0000"+
		"\u0000\u2770\u05ad\u0001\u0000\u0000\u0000\u2771\u2773\u0003\u05b8\u02dc"+
		"\u0000\u2772\u2774\u0003\u00f8|\u0000\u2773\u2772\u0001\u0000\u0000\u0000"+
		"\u2773\u2774\u0001\u0000\u0000\u0000\u2774\u277c\u0001\u0000\u0000\u0000"+
		"\u2775\u2776\u0005$\u0000\u0000\u2776\u2778\u0003\u05b8\u02dc\u0000\u2777"+
		"\u2779\u0003\u00f8|\u0000\u2778\u2777\u0001\u0000\u0000\u0000\u2778\u2779"+
		"\u0001\u0000\u0000\u0000\u2779\u277b\u0001\u0000\u0000\u0000\u277a\u2775"+
		"\u0001\u0000\u0000\u0000\u277b\u277e\u0001\u0000\u0000\u0000\u277c\u277a"+
		"\u0001\u0000\u0000\u0000\u277c\u277d\u0001\u0000\u0000\u0000\u277d\u05af"+
		"\u0001\u0000\u0000\u0000\u277e\u277c\u0001\u0000\u0000\u0000\u277f\u2780"+
		"\u0005p\u0000\u0000\u2780\u27bb\u0003\u01e4\u00f2\u0000\u2781\u2782\u0005"+
		"\u01bc\u0000\u0000\u2782\u27bb\u0003\u01e4\u00f2\u0000\u2783\u2784\u0005"+
		"u\u0000\u0000\u2784\u27bb\u0003\u0448\u0224\u0000\u2785\u2786\u0005\u01cb"+
		"\u0000\u0000\u2786\u27bb\u0003\u052e\u0297\u0000\u2787\u2788\u0005\u01cd"+
		"\u0000\u0000\u2788\u27bb\u0003\u052e\u0297\u0000\u2789\u278a\u0005\u00a3"+
		"\u0000\u0000\u278a\u27bb\u0003\u052e\u0297\u0000\u278b\u278c\u0005\u008a"+
		"\u0000\u0000\u278c\u27bb\u0003\u01e4\u00f2\u0000\u278d\u278e\u0005\u008b"+
		"\u0000\u0000\u278e\u278f\u0005\u0094\u0000\u0000\u278f\u27bb\u0003\u05b2"+
		"\u02d9\u0000\u2790\u2791\u0005\u00ad\u0000\u0000\u2791\u27bb\u0003\u01e4"+
		"\u00f2\u0000\u2792\u2793\u0005\u022d\u0000\u0000\u2793\u27bb\u0003\u0448"+
		"\u0224\u0000\u2794\u2795\u0005\u00a6\u0000\u0000\u2795\u27bb\u0003p8\u0000"+
		"\u2796\u2798\u0005\u01c1\u0000\u0000\u2797\u2796\u0001\u0000\u0000\u0000"+
		"\u2797\u2798\u0001\u0000\u0000\u0000\u2798\u2799\u0001\u0000\u0000\u0000"+
		"\u2799\u27bb\u0003\u05b4\u02da\u0000\u279a\u279b\u0005\u01c7\u0000\u0000"+
		"\u279b\u279c\u0005o\u0000\u0000\u279c\u279d\u0005\u0197\u0000\u0000\u279d"+
		"\u27bb\u0003\u01e4\u00f2\u0000\u279e\u279f\u0005\u01c7\u0000\u0000\u279f"+
		"\u27a0\u0005\u0177\u0000\u0000\u27a0\u27bb\u0003\u01e4\u00f2\u0000\u27a1"+
		"\u27a2\u0005\u01f4\u0000\u0000\u27a2\u27a3\u0005\u0185\u0000\u0000\u27a3"+
		"\u27a4\u0005\u01f3\u0000\u0000\u27a4\u27a5\u0005\u01bc\u0000\u0000\u27a5"+
		"\u27bb\u0003\u01e4\u00f2\u0000\u27a6\u27a7\u0005\u01f4\u0000\u0000\u27a7"+
		"\u27a8\u0005\u0174\u0000\u0000\u27a8\u27a9\u0005\u01f3\u0000\u0000\u27a9"+
		"\u27aa\u0005\u01bc\u0000\u0000\u27aa\u27bb\u0003\u01e4\u00f2\u0000\u27ab"+
		"\u27ac\u0005\u01f4\u0000\u0000\u27ac\u27ad\u0005\u014c\u0000\u0000\u27ad"+
		"\u27ae\u0005\u01f3\u0000\u0000\u27ae\u27af\u0005\u01bc\u0000\u0000\u27af"+
		"\u27bb\u0003\u01e4\u00f2\u0000\u27b0\u27b1\u0005\u01f4\u0000\u0000\u27b1"+
		"\u27b2\u0005\u015e\u0000\u0000\u27b2\u27b3\u0005\u01f3\u0000\u0000\u27b3"+
		"\u27b4\u0005\u01bc\u0000\u0000\u27b4\u27bb\u0003\u01e4\u00f2\u0000\u27b5"+
		"\u27b6\u0005\u01f4\u0000\u0000\u27b6\u27b7\u0005\u0169\u0000\u0000\u27b7"+
		"\u27b8\u0005\u01f3\u0000\u0000\u27b8\u27b9\u0005\u01bc\u0000\u0000\u27b9"+
		"\u27bb\u0003\u01e4\u00f2\u0000\u27ba\u277f\u0001\u0000\u0000\u0000\u27ba"+
		"\u2781\u0001\u0000\u0000\u0000\u27ba\u2783\u0001\u0000\u0000\u0000\u27ba"+
		"\u2785\u0001\u0000\u0000\u0000\u27ba\u2787\u0001\u0000\u0000\u0000\u27ba"+
		"\u2789\u0001\u0000\u0000\u0000\u27ba\u278b\u0001\u0000\u0000\u0000\u27ba"+
		"\u278d\u0001\u0000\u0000\u0000\u27ba\u2790\u0001\u0000\u0000\u0000\u27ba"+
		"\u2792\u0001\u0000\u0000\u0000\u27ba\u2794\u0001\u0000\u0000\u0000\u27ba"+
		"\u2797\u0001\u0000\u0000\u0000\u27ba\u279a\u0001\u0000\u0000\u0000\u27ba"+
		"\u279e\u0001\u0000\u0000\u0000\u27ba\u27a1\u0001\u0000\u0000\u0000\u27ba"+
		"\u27a6\u0001\u0000\u0000\u0000\u27ba\u27ab\u0001\u0000\u0000\u0000\u27ba"+
		"\u27b0\u0001\u0000\u0000\u0000\u27ba\u27b5\u0001\u0000\u0000\u0000\u27bb"+
		"\u05b1\u0001\u0000\u0000\u0000\u27bc\u27c1\u0003\u0232\u0119\u0000\u27bd"+
		"\u27be\u0005$\u0000\u0000\u27be\u27c0\u0003\u0232\u0119\u0000\u27bf\u27bd"+
		"\u0001\u0000\u0000\u0000\u27c0\u27c3\u0001\u0000\u0000\u0000\u27c1\u27bf"+
		"\u0001\u0000\u0000\u0000\u27c1\u27c2\u0001\u0000\u0000\u0000\u27c2\u05b3"+
		"\u0001\u0000\u0000\u0000\u27c3\u27c1\u0001\u0000\u0000\u0000\u27c4\u27d0"+
		"\u0005\u000f\u0000\u0000\u27c5\u27c6\u0005\u000f\u0000\u0000\u27c6\u27d0"+
		"\u0005\u0013\u0000\u0000\u27c7\u27c8\u0003\u00e4r\u0000\u27c8\u27c9\u0005"+
		"\u0013\u0000\u0000\u27c9\u27d0\u0001\u0000\u0000\u0000\u27ca\u27d0\u0003"+
		"\u00f6{\u0000\u27cb\u27cc\u0003\u00ecv\u0000\u27cc\u27cd\u0005\u0012\u0000"+
		"\u0000\u27cd\u27ce\u0003\u05b6\u02db\u0000\u27ce\u27d0\u0001\u0000\u0000"+
		"\u0000\u27cf\u27c4\u0001\u0000\u0000\u0000\u27cf\u27c5\u0001\u0000\u0000"+
		"\u0000\u27cf\u27c7\u0001\u0000\u0000\u0000\u27cf\u27ca\u0001\u0000\u0000"+
		"\u0000\u27cf\u27cb\u0001\u0000\u0000\u0000\u27d0\u05b5\u0001\u0000\u0000"+
		"\u0000\u27d1\u27d2\u0003\u00e4r\u0000\u27d2\u05b7\u0001\u0000\u0000\u0000"+
		"\u27d3\u27e5\u0005\u01b4\u0000\u0000\u27d4\u27e5\u0005\u01b5\u0000\u0000"+
		"\u27d5\u27e5\u0005\u01b6\u0000\u0000\u27d6\u27e5\u0005\u01b7\u0000\u0000"+
		"\u27d7\u27e5\u0005\u01bb\u0000\u0000\u27d8\u27e5\u0005\\\u0000\u0000\u27d9"+
		"\u27e5\u0005\u01cc\u0000\u0000\u27da\u27e5\u0005\u01b8\u0000\u0000\u27db"+
		"\u27e5\u0005k\u0000\u0000\u27dc\u27e5\u0005\u00af\u0000\u0000\u27dd\u27e5"+
		"\u0005\u00ae\u0000\u0000\u27de\u27e5\u0005w\u0000\u0000\u27df\u27e5\u0005"+
		"\u00b2\u0000\u0000\u27e0\u27e2\u0005\u01f4\u0000\u0000\u27e1\u27e3\u0005"+
		"Z\u0000\u0000\u27e2\u27e1\u0001\u0000\u0000\u0000\u27e2\u27e3\u0001\u0000"+
		"\u0000\u0000\u27e3\u27e5\u0001\u0000\u0000\u0000\u27e4\u27d3\u0001\u0000"+
		"\u0000\u0000\u27e4\u27d4\u0001\u0000\u0000\u0000\u27e4\u27d5\u0001\u0000"+
		"\u0000\u0000\u27e4\u27d6\u0001\u0000\u0000\u0000\u27e4\u27d7\u0001\u0000"+
		"\u0000\u0000\u27e4\u27d8\u0001\u0000\u0000\u0000\u27e4\u27d9\u0001\u0000"+
		"\u0000\u0000\u27e4\u27da\u0001\u0000\u0000\u0000\u27e4\u27db\u0001\u0000"+
		"\u0000\u0000\u27e4\u27dc\u0001\u0000\u0000\u0000\u27e4\u27dd\u0001\u0000"+
		"\u0000\u0000\u27e4\u27de\u0001\u0000\u0000\u0000\u27e4\u27df\u0001\u0000"+
		"\u0000\u0000\u27e4\u27e0\u0001\u0000\u0000\u0000\u27e5\u05b9\u0001\u0000"+
		"\u0000\u0000\u27e6\u27e7\u0005\u01b9\u0000\u0000\u27e7\u27e8\u0005\u01bc"+
		"\u0000\u0000\u27e8\u27ef\u0003\u00f4z\u0000\u27e9\u27ea\u0005\u009e\u0000"+
		"\u0000\u27ea\u27eb\u0005\u01ea\u0000\u0000\u27eb\u27f0\u0003\u00f4z\u0000"+
		"\u27ec\u27ed\u0005\u0099\u0000\u0000\u27ed\u27ee\u0005\u01ea\u0000\u0000"+
		"\u27ee\u27f0\u0003\u0228\u0114\u0000\u27ef\u27e9\u0001\u0000\u0000\u0000"+
		"\u27ef\u27ec\u0001\u0000\u0000\u0000\u27f0\u05bb\u0001\u0000\u0000\u0000"+
		"\u27f1\u27f2\u0005\u01ba\u0000\u0000\u27f2\u27f4\u0005\u01bc\u0000\u0000"+
		"\u27f3\u27f5\u0003\u02a0\u0150\u0000\u27f4\u27f3\u0001\u0000\u0000\u0000"+
		"\u27f4\u27f5\u0001\u0000\u0000\u0000\u27f5\u27f6\u0001\u0000\u0000\u0000"+
		"\u27f6\u27f8\u0003\u01e4\u00f2\u0000\u27f7\u27f9\u0003\u0394\u01ca\u0000"+
		"\u27f8\u27f7\u0001\u0000\u0000\u0000\u27f8\u27f9\u0001\u0000\u0000\u0000"+
		"\u27f9\u05bd\u0001\u0000\u0000\u0000\u27fa\u2804\u0005\u00a9\u0000\u0000"+
		"\u27fb\u2805\u0003\u022a\u0115\u0000\u27fc\u27fd\u0005\u020a\u0000\u0000"+
		"\u27fd\u2805\u0005\u00b7\u0000\u0000\u27fe\u27ff\u0005`\u0000\u0000\u27ff"+
		"\u2800\u0005V\u0000\u0000\u2800\u2805\u0005W\u0000\u0000\u2801\u2802\u0005"+
		"\u00a7\u0000\u0000\u2802\u2805\u0005\u019a\u0000\u0000\u2803\u2805\u0005"+
		"\u01f4\u0000\u0000\u2804\u27fb\u0001\u0000\u0000\u0000\u2804\u27fc\u0001"+
		"\u0000\u0000\u0000\u2804\u27fe\u0001\u0000\u0000\u0000\u2804\u2801\u0001"+
		"\u0000\u0000\u0000\u2804\u2803\u0001\u0000\u0000\u0000\u2805\u05bf\u0001"+
		"\u0000\u0000\u0000\u2806\u2808\u0005\u01c0\u0000\u0000\u2807\u2809\u0003"+
		"\u05c2\u02e1\u0000\u2808\u2807\u0001\u0000\u0000\u0000\u2808\u2809\u0001"+
		"\u0000\u0000\u0000\u2809\u2826\u0001\u0000\u0000\u0000\u280a\u2827\u0003"+
		"\u05c4\u02e2\u0000\u280b\u2827\u0003\u05c6\u02e3\u0000\u280c\u280d\u0003"+
		"\u022a\u0115\u0000\u280d\u280e\u0005\u01d9\u0000\u0000\u280e\u280f\u0005"+
		"\u0218\u0000\u0000\u280f\u2827\u0001\u0000\u0000\u0000\u2810\u2811\u0005"+
		"\u020a\u0000\u0000\u2811\u2812\u0005\u00b7\u0000\u0000\u2812\u2827\u0003"+
		"\u0230\u0118\u0000\u2813\u2814\u0005\u012d\u0000\u0000\u2814\u2827\u0005"+
		"\u024f\u0000\u0000\u2815\u2816\u0005\u01bc\u0000\u0000\u2816\u2827\u0005"+
		"\u024f\u0000\u0000\u2817\u2819\u0005\u0229\u0000\u0000\u2818\u281a\u0003"+
		"\u0288\u0144\u0000\u2819\u2818\u0001\u0000\u0000\u0000\u2819\u281a\u0001"+
		"\u0000\u0000\u0000\u281a\u2827\u0001\u0000\u0000\u0000\u281b\u281c\u0005"+
		"]\u0000\u0000\u281c\u2827\u0003\u0278\u013c\u0000\u281d\u281e\u0005\u00a7"+
		"\u0000\u0000\u281e\u281f\u0005\u019a\u0000\u0000\u281f\u2827\u0003\u0278"+
		"\u013c\u0000\u2820\u2821\u0005\u00a7\u0000\u0000\u2821\u2822\u0005\u019a"+
		"\u0000\u0000\u2822\u2827\u0005\u0217\u0000\u0000\u2823\u2824\u0005\u00d8"+
		"\u0000\u0000\u2824\u2825\u0005Y\u0000\u0000\u2825\u2827\u0003\u01cc\u00e6"+
		"\u0000\u2826\u280a\u0001\u0000\u0000\u0000\u2826\u280b\u0001\u0000\u0000"+
		"\u0000\u2826\u280c\u0001\u0000\u0000\u0000\u2826\u2810\u0001\u0000\u0000"+
		"\u0000\u2826\u2813\u0001\u0000\u0000\u0000\u2826\u2815\u0001\u0000\u0000"+
		"\u0000\u2826\u2817\u0001\u0000\u0000\u0000\u2826\u281b\u0001\u0000\u0000"+
		"\u0000\u2826\u281d\u0001\u0000\u0000\u0000\u2826\u2820\u0001\u0000\u0000"+
		"\u0000\u2826\u2823\u0001\u0000\u0000\u0000\u2827\u05c1\u0001\u0000\u0000"+
		"\u0000\u2828\u2829\u0007I\u0000\u0000\u2829\u05c3\u0001\u0000\u0000\u0000"+
		"\u282a\u282b\u0005\u020a\u0000\u0000\u282b\u282f\u0005\u00b7\u0000\u0000"+
		"\u282c\u2830\u0003\u00e0p\u0000\u282d\u2830\u0005\u0223\u0000\u0000\u282e"+
		"\u2830\u0005\u0217\u0000\u0000\u282f\u282c\u0001\u0000\u0000\u0000\u282f"+
		"\u282d\u0001\u0000\u0000\u0000\u282f\u282e\u0001\u0000\u0000\u0000\u2830"+
		"\u05c5\u0001\u0000\u0000\u0000\u2831\u2832\u0003\u022a\u0115\u0000\u2832"+
		"\u2835\u0007\u001a\u0000\u0000\u2833\u2836\u0003\u022c\u0116\u0000\u2834"+
		"\u2836\u0005\u0217\u0000\u0000\u2835\u2833\u0001\u0000\u0000\u0000\u2835"+
		"\u2834\u0001\u0000\u0000\u0000\u2836\u05c7\u0001\u0000\u0000\u0000\u2837"+
		"\u283a\u0005\u00a0\u0000\u0000\u2838\u283b\u0005\u01f4\u0000\u0000\u2839"+
		"\u283b\u0003\u00e4r\u0000\u283a\u2838\u0001\u0000\u0000\u0000\u283a\u2839"+
		"\u0001\u0000\u0000\u0000\u283b\u05c9\u0001\u0000\u0000\u0000\u283c\u2846"+
		"\u0005\u013a\u0000\u0000\u283d\u283f\u0003\u05d6\u02eb\u0000\u283e\u2840"+
		"\u0005\u019b\u0000\u0000\u283f\u283e\u0001\u0000\u0000\u0000\u283f\u2840"+
		"\u0001\u0000\u0000\u0000\u2840\u2847\u0001\u0000\u0000\u0000\u2841\u2847"+
		"\u0005\u019b\u0000\u0000\u2842\u2843\u0005\u001e\u0000\u0000\u2843\u2844"+
		"\u0003\u05ce\u02e7\u0000\u2844\u2845\u0005\u001f\u0000\u0000\u2845\u2847"+
		"\u0001\u0000\u0000\u0000\u2846\u283d\u0001\u0000\u0000\u0000\u2846\u2841"+
		"\u0001\u0000\u0000\u0000\u2846\u2842\u0001\u0000\u0000\u0000\u2846\u2847"+
		"\u0001\u0000\u0000\u0000\u2847\u2848\u0001\u0000\u0000\u0000\u2848\u2849"+
		"\u0003\u05cc\u02e6\u0000\u2849\u05cb\u0001\u0000\u0000\u0000\u284a\u2853"+
		"\u0003J%\u0000\u284b\u2853\u0003(\u0014\u0000\u284c\u2853\u00038\u001c"+
		"\u0000\u284d\u2853\u0003D\"\u0000\u284e\u2853\u0003\u0564\u02b2\u0000"+
		"\u284f\u2853\u0003\u0414\u020a\u0000\u2850\u2853\u0003\u0416\u020b\u0000"+
		"\u2851\u2853\u0003\u041e\u020f\u0000\u2852\u284a\u0001\u0000\u0000\u0000"+
		"\u2852\u284b\u0001\u0000\u0000\u0000\u2852\u284c\u0001\u0000\u0000\u0000"+
		"\u2852\u284d\u0001\u0000\u0000\u0000\u2852\u284e\u0001\u0000\u0000\u0000"+
		"\u2852\u284f\u0001\u0000\u0000\u0000\u2852\u2850\u0001\u0000\u0000\u0000"+
		"\u2852\u2851\u0001\u0000\u0000\u0000\u2853\u05cd\u0001\u0000\u0000\u0000"+
		"\u2854\u2859\u0003\u05d0\u02e8\u0000\u2855\u2856\u0005$\u0000\u0000\u2856"+
		"\u2858\u0003\u05d0\u02e8\u0000\u2857\u2855\u0001\u0000\u0000\u0000\u2858"+
		"\u285b\u0001\u0000\u0000\u0000\u2859\u2857\u0001\u0000\u0000\u0000\u2859"+
		"\u285a\u0001\u0000\u0000\u0000\u285a\u05cf\u0001\u0000\u0000\u0000\u285b"+
		"\u2859\u0001\u0000\u0000\u0000\u285c\u285e\u0003\u05d4\u02ea\u0000\u285d"+
		"\u285f\u0003\u05d2\u02e9\u0000\u285e\u285d\u0001\u0000\u0000\u0000\u285e"+
		"\u285f\u0001\u0000\u0000\u0000\u285f\u05d1\u0001\u0000\u0000\u0000\u2860"+
		"\u2863\u0003\u0220\u0110\u0000\u2861\u2863\u0003\u0232\u0119\u0000\u2862"+
		"\u2860\u0001\u0000\u0000\u0000\u2862\u2861\u0001\u0000\u0000\u0000\u2863"+
		"\u05d3\u0001\u0000\u0000\u0000\u2864\u2867\u0003\u0222\u0111\u0000\u2865"+
		"\u2867\u0003\u05d6\u02eb\u0000\u2866\u2864\u0001\u0000\u0000\u0000\u2866"+
		"\u2865\u0001\u0000\u0000\u0000\u2867\u05d5\u0001\u0000\u0000\u0000\u2868"+
		"\u2869\u0007J\u0000\u0000\u2869\u05d7\u0001\u0000\u0000\u0000\u286a\u2872"+
		"\u0003\u05d6\u02eb\u0000\u286b\u286d\u0005\u019b\u0000\u0000\u286c\u286b"+
		"\u0001\u0000\u0000\u0000\u286c\u286d\u0001\u0000\u0000\u0000\u286d\u2873"+
		"\u0001\u0000\u0000\u0000\u286e\u286f\u0005\u001e\u0000\u0000\u286f\u2870"+
		"\u0003\u05de\u02ef\u0000\u2870\u2871\u0005\u001f\u0000\u0000\u2871\u2873"+
		"\u0001\u0000\u0000\u0000\u2872\u286c\u0001\u0000\u0000\u0000\u2872\u286e"+
		"\u0001\u0000\u0000\u0000\u2873\u2875\u0001\u0000\u0000\u0000\u2874\u2876"+
		"\u0003\u05da\u02ed\u0000\u2875\u2874\u0001\u0000\u0000\u0000\u2875\u2876"+
		"\u0001\u0000\u0000\u0000\u2876\u05d9\u0001\u0000\u0000\u0000\u2877\u287c"+
		"\u0003\u05dc\u02ee\u0000\u2878\u2879\u0005$\u0000\u0000\u2879\u287b\u0003"+
		"\u05dc\u02ee\u0000\u287a\u2878\u0001\u0000\u0000\u0000\u287b\u287e\u0001"+
		"\u0000\u0000\u0000\u287c\u287a\u0001\u0000\u0000\u0000\u287c\u287d\u0001"+
		"\u0000\u0000\u0000\u287d\u05db\u0001\u0000\u0000\u0000\u287e\u287c\u0001"+
		"\u0000\u0000\u0000\u287f\u2880\u0003\u015a\u00ad\u0000\u2880\u2881\u0003"+
		"`0\u0000\u2881\u05dd\u0001\u0000\u0000\u0000\u2882\u2887\u0003\u05e0\u02f0"+
		"\u0000\u2883\u2884\u0005$\u0000\u0000\u2884\u2886\u0003\u05e0\u02f0\u0000"+
		"\u2885\u2883\u0001\u0000\u0000\u0000\u2886\u2889\u0001\u0000\u0000\u0000"+
		"\u2887\u2885\u0001\u0000\u0000\u0000\u2887\u2888\u0001\u0000\u0000\u0000"+
		"\u2888\u05df\u0001\u0000\u0000\u0000\u2889\u2887\u0001\u0000\u0000\u0000"+
		"\u288a\u288c\u0003\u05e4\u02f2\u0000\u288b\u288d\u0003\u05e2\u02f1\u0000"+
		"\u288c\u288b\u0001\u0000\u0000\u0000\u288c\u288d\u0001\u0000\u0000\u0000"+
		"\u288d\u05e1\u0001\u0000\u0000\u0000\u288e\u2891\u0003\u0220\u0110\u0000"+
		"\u288f\u2891\u0003\u0232\u0119\u0000\u2890\u288e\u0001\u0000\u0000\u0000"+
		"\u2890\u288f\u0001\u0000\u0000\u0000\u2891\u05e3\u0001\u0000\u0000\u0000"+
		"\u2892\u2895\u0003\u0222\u0111\u0000\u2893\u2895\u0003\u05d6\u02eb\u0000"+
		"\u2894\u2892\u0001\u0000\u0000\u0000\u2894\u2893\u0001\u0000\u0000\u0000"+
		"\u2895\u05e5\u0001\u0000\u0000\u0000\u2896\u2897\u0005\u0158\u0000\u0000"+
		"\u2897\u2898\u0003\u027a\u013d\u0000\u2898\u05e7\u0001\u0000\u0000\u0000"+
		"\u2899\u28aa\u0005\u0191\u0000\u0000\u289a\u289c\u0005\u01dc\u0000\u0000"+
		"\u289b\u289a\u0001\u0000\u0000\u0000\u289b\u289c\u0001\u0000\u0000\u0000"+
		"\u289c\u289e\u0001\u0000\u0000\u0000\u289d\u289f\u0005\u0199\u0000\u0000"+
		"\u289e\u289d\u0001\u0000\u0000\u0000\u289e\u289f\u0001\u0000\u0000\u0000"+
		"\u289f\u28a1\u0001\u0000\u0000\u0000\u28a0\u28a2\u0005\u019b\u0000\u0000"+
		"\u28a1\u28a0\u0001\u0000\u0000\u0000\u28a1\u28a2\u0001\u0000\u0000\u0000"+
		"\u28a2\u28a4\u0001\u0000\u0000\u0000\u28a3\u28a5\u0005\u0117\u0000\u0000"+
		"\u28a4\u28a3\u0001\u0000\u0000\u0000\u28a4\u28a5\u0001\u0000\u0000\u0000"+
		"\u28a5\u28ab\u0001\u0000\u0000\u0000\u28a6\u28a7\u0005\u001e\u0000\u0000"+
		"\u28a7\u28a8\u0003\u05de\u02ef\u0000\u28a8\u28a9\u0005\u001f\u0000\u0000"+
		"\u28a9\u28ab\u0001\u0000\u0000\u0000\u28aa\u289b\u0001\u0000\u0000\u0000"+
		"\u28aa\u28a6\u0001\u0000\u0000\u0000\u28ab\u28ad\u0001\u0000\u0000\u0000"+
		"\u28ac\u28ae\u0003\u05da\u02ed\u0000\u28ad\u28ac\u0001\u0000\u0000\u0000"+
		"\u28ad\u28ae\u0001\u0000\u0000\u0000\u28ae\u05e9\u0001\u0000\u0000\u0000"+
		"\u28af\u28b0\u0001\u0000\u0000\u0000\u28b0\u05eb\u0001\u0000\u0000\u0000"+
		"\u28b1\u28b2\u0005\u021b\u0000\u0000\u28b2\u28b3\u0003\u00e4r\u0000\u28b3"+
		"\u28b5\u0005\u001e\u0000\u0000\u28b4\u28b6\u0003\u05ee\u02f7\u0000\u28b5"+
		"\u28b4\u0001\u0000\u0000\u0000\u28b5\u28b6\u0001\u0000\u0000\u0000\u28b6"+
		"\u28b7\u0001\u0000\u0000\u0000\u28b7\u28b8\u0005\u001f\u0000\u0000\u28b8"+
		"\u05ed\u0001\u0000\u0000\u0000\u28b9\u28be\u0003\u05f0\u02f8\u0000\u28ba"+
		"\u28bb\u0005$\u0000\u0000\u28bb\u28bd\u0003\u05f0\u02f8\u0000\u28bc\u28ba"+
		"\u0001\u0000\u0000\u0000\u28bd\u28c0\u0001\u0000\u0000\u0000\u28be\u28bc"+
		"\u0001\u0000\u0000\u0000\u28be\u28bf\u0001\u0000\u0000\u0000\u28bf\u05ef"+
		"\u0001\u0000\u0000\u0000\u28c0\u28be\u0001\u0000\u0000\u0000\u28c1\u28c4"+
		"\u0003\u05f2\u02f9\u0000\u28c2\u28c4\u0003\u05f4\u02fa\u0000\u28c3\u28c1"+
		"\u0001\u0000\u0000\u0000\u28c3\u28c2\u0001\u0000\u0000\u0000\u28c4\u05f1"+
		"\u0001\u0000\u0000\u0000\u28c5\u28c6\u0003\u010c\u0086\u0000\u28c6\u05f3"+
		"\u0001\u0000\u0000\u0000\u28c7\u28c8\u0003\u00e4r\u0000\u28c8\u28c9\u0005"+
		"\u0016\u0000\u0000\u28c9\u28ca\u0005\u0019\u0000\u0000\u28ca\u28cb\u0003"+
		"\u010c\u0086\u0000\u28cb\u05f5\u0001\u0000\u0000\u0000\u0418\u0694\u0697"+
		"\u069f\u06a7\u06ab\u06ae\u06b2\u06b6\u06b9\u06c0\u06c4\u06c7\u06cc\u06d0"+
		"\u06d4\u06d7\u06db\u06df\u06e2\u06e6\u06ec\u06f0\u0705\u0709\u0710\u0713"+
		"\u0725\u072e\u0735\u0738\u073f\u0756\u0762\u0770\u0778\u077e\u0784\u0787"+
		"\u078e\u0791\u0794\u079e\u07ab\u07b7\u07be\u07c4\u07c7\u07ca\u07d4\u07db"+
		"\u07e5\u07ed\u07f1\u07f5\u07f9\u0805\u0809\u080e\u0812\u0814\u0819\u081e"+
		"\u0824\u0827\u0829\u082e\u0831\u0834\u0837\u083a\u083d\u0840\u0843\u0849"+
		"\u084c\u084f\u0852\u0855\u0858\u085d\u0864\u086b\u0870\u0876\u087c\u0882"+
		"\u0888\u088d\u0891\u0895\u089c\u08ab\u08b2\u08b8\u08be\u08c7\u08cc\u08cf"+
		"\u08d4\u08e1\u08ee\u08f3\u08f7\u08f9\u0909\u0911\u0916\u091b\u091f\u092c"+
		"\u0936\u094a\u0955\u095d\u097d\u0986\u0989\u098c\u098f\u09a5\u09ad\u09bb"+
		"\u09c8\u09cc\u09d9\u09df\u09e3\u09e9\u09ee\u09f2\u09f7\u09fb\u0a00\u0a07"+
		"\u0a09\u0a0f\u0a20\u0a26\u0a2c\u0a32\u0a38\u0a3b\u0a46\u0a53\u0a5d\u0a68"+
		"\u0a6d\u0a72\u0a77\u0a7d\u0a85\u0a88\u0a8e\u0a91\u0a98\u0a9f\u0aa7\u0ab0"+
		"\u0ab8\u0abd\u0ac3\u0ac9\u0acc\u0acf\u0ad3\u0ad6\u0ada\u0add\u0ae1\u0ae5"+
		"\u0ae8\u0aec\u0aef\u0af9\u0afc\u0b05\u0b09\u0b0b\u0b0d\u0b0f\u0b13\u0b1a"+
		"\u0b1d\u0b21\u0b27\u0b2b\u0b2f\u0b34\u0b38\u0b3e\u0b42\u0b45\u0b51\u0b58"+
		"\u0b5f\u0b68\u0b6f\u0b73\u0b7b\u0b82\u0b89\u0baa\u0bae\u0bc2\u0c01\u0c0b"+
		"\u0c8b\u0c8d\u0c99\u0cc5\u0cc7\u0ccf\u0ce9\u0cf2\u0cfa\u0d07\u0d0b\u0d0e"+
		"\u0d17\u0d1b\u0d1f\u0d26\u0d36\u0d3f\u0d4d\u0d51\u0d56\u0d69\u0d7f\u0d87"+
		"\u0d90\u0d9c\u0dac\u0db6\u0dca\u0dd1\u0dd9\u0de7\u0dee\u0df9\u0e02\u0e0d"+
		"\u0e16\u0e1f\u0e28\u0e2e\u0e36\u0e41\u0e4c\u0e4f\u0e57\u0e60\u0e64\u0e6c"+
		"\u0e6e\u0e85\u0e8c\u0e9a\u0ea3\u0eae\u0eb5\u0ebe\u0ec2\u0ec5\u0ec8\u0ecb"+
		"\u0edb\u0f0b\u0fa8\u0fb4\u0fd1\u0fe0\u0fe6\u0ff0\u1000\u1004\u1009\u100b"+
		"\u101c\u1020\u1024\u102c\u1033\u1037\u103e\u1042\u1045\u104d\u1051\u105c"+
		"\u1060\u1066\u106b\u106f\u1071\u1077\u1082\u108b\u108f\u1093\u109b\u10bb"+
		"\u10c5\u10c7\u10cf\u10da\u10e5\u10f5\u1107\u1113\u111b\u112c\u1132\u113b"+
		"\u1142\u114e\u1158\u1165\u116b\u116f\u1177\u1187\u1191\u11a5\u11ad\u11bf"+
		"\u11c6\u11ca\u11cd\u11cf\u11d5\u11de\u11e6\u11ef\u11f3\u11f7\u11fa\u11fd"+
		"\u1202\u1205\u1207\u1214\u121b\u1226\u1238\u1247\u1249\u1257\u125b\u125e"+
		"\u1261\u126a\u126f\u1272\u1274\u12af\u12b5\u12bc\u12c3\u12ca\u12d2\u12d9"+
		"\u12df\u12eb\u12f5\u12fd\u1302\u1311\u1318\u1321\u1326\u132d\u1338\u1341"+
		"\u1349\u1350\u1358\u1361\u136e\u1371\u1374\u1376\u137f\u1386\u138b\u1396"+
		"\u139d\u13a3\u13a6\u13b3\u13b9\u13cc\u13d4\u13db\u13e5\u13f7\u13ff\u140b"+
		"\u141b\u1420\u1435\u143d\u1444\u1449\u1452\u1458\u1462\u1466\u146b\u1478"+
		"\u1488\u149a\u14a2\u14af\u14b3\u14ba\u14e0\u14e5\u14f0\u14fd\u1504\u1508"+
		"\u150c\u150f\u1519\u151e\u152e\u1552\u1557\u1561\u1569\u1571\u1579\u157e"+
		"\u1585\u158a\u1590\u159c\u15a1\u15ae\u15b6\u15c0\u15c9\u15cd\u15d1\u15d4"+
		"\u15d7\u15da\u15dd\u15e2\u15e4\u15ea\u15ec\u160c\u1613\u161e\u1623\u1628"+
		"\u1631\u163d\u1643\u164b\u1652\u1655\u165b\u1661\u1665\u1668\u166b\u1677"+
		"\u1681\u1686\u168c\u168f\u1692\u169c\u169f\u16a2\u16a6\u16ac\u16b0\u16b5"+
		"\u16bc\u16c3\u16c8\u16cd\u16d7\u16dc\u16e9\u16ef\u16f1\u16f6\u16fb\u1703"+
		"\u1707\u170f\u1713\u1719\u171e\u1721\u1727\u172a\u172e\u1736\u1739\u1744"+
		"\u1747\u174c\u1751\u1755\u175e\u1770\u1778\u1782\u178a\u1791\u1794\u179a"+
		"\u179e\u17a3\u17a7\u17ac\u17be\u17c4\u17ca\u17d2\u17d5\u17d8\u17dc\u17e2"+
		"\u17f3\u17fa\u1802\u180a\u1811\u1814\u1820\u182e\u1832\u1840\u1846\u1849"+
		"\u1850\u1853\u1858\u185b\u185d\u1861\u1865\u1868\u186b\u186e\u1871\u187b"+
		"\u1886\u1888\u188f\u18a1\u18a7\u18ae\u18b3\u18ba\u18c6\u18cf\u18d7\u18df"+
		"\u18e7\u18f0\u18f8\u18fe\u1905\u1915\u1918\u192b\u1943\u194f\u195b\u196e"+
		"\u1978\u197a\u197e\u1981\u1987\u198a\u198e\u1993\u1998\u199c\u19b2\u19ba"+
		"\u19c1\u19c8\u19e0\u19e4\u19ed\u19f0\u19f4\u19f7\u19f9\u1a00\u1a0b\u1a0e"+
		"\u1a12\u1a16\u1a29\u1a2d\u1a37\u1a4c\u1a55\u1a58\u1a64\u1a69\u1a6d\u1a73"+
		"\u1a79\u1a7d\u1a84\u1a89\u1a8c\u1a91\u1a98\u1aa1\u1aaa\u1ab3\u1abb\u1ac3"+
		"\u1acb\u1ad4\u1adc\u1ae5\u1ae9\u1af0\u1af8\u1b01\u1b06\u1b0a\u1b0e\u1b12"+
		"\u1b16\u1b1b\u1b1e\u1b22\u1b2b\u1b3a\u1b40\u1b9f\u1ba5\u1baa\u1bb8\u1bc4"+
		"\u1bce\u1bdb\u1be0\u1be8\u1bef\u1c06\u1c13\u1c1a\u1c21\u1c24\u1c2a\u1c2d"+
		"\u1c3b\u1c43\u1c55\u1c5c\u1c63\u1c6a\u1c8b\u1c92\u1ca0\u1cb2\u1cc2\u1cc8"+
		"\u1cd3\u1cdc\u1ce8\u1cea\u1cf5\u1cf9\u1d0e\u1d15\u1d1a\u1d1e\u1d22\u1d26"+
		"\u1d28\u1d2d\u1d35\u1d47\u1d4d\u1d51\u1d71\u1d82\u1daa\u1dff\u1e09\u1e11"+
		"\u1e19\u1e1f\u1e29\u1e33\u1e38\u1e42\u1e54\u1e58\u1e64\u1e66\u1e71\u1e79"+
		"\u1e85\u1e8a\u1e91\u1e99\u1eac\u1eae\u1eb3\u1eb7\u1ebc\u1ec6\u1eca\u1ecd"+
		"\u1ed1\u1ed5\u1ee0\u1ee7\u1eef\u1ef4\u1efa\u1f02\u1f0b\u1f11\u1f1d\u1f22"+
		"\u1f2b\u1f31\u1f3d\u1f4d\u1f60\u1f6f\u1f7f\u1f87\u1f9d\u1fb0\u1fb7\u1fbe"+
		"\u1fc5\u1fc8\u1fcf\u1fda\u1fe8\u1fff\u2007\u2011\u2015\u201c\u202e\u203b"+
		"\u2048\u2053\u2059\u2064\u2069\u2079\u2086\u208b\u2091\u2096\u209a\u20a0"+
		"\u20a5\u20a8\u20aa\u20b1\u20b8\u20bf\u20cc\u20d1\u20dc\u20e5\u20ea\u20ee"+
		"\u20f1\u20f4\u20f8\u2103\u210a\u2178\u2181\u218c\u2192\u21ab\u21bb\u21c3"+
		"\u21ce\u21e0\u21e5\u21ea\u21ec\u21f2\u21f7\u2200\u2204\u2213\u2220\u222d"+
		"\u223b\u2241\u2245\u224c\u2256\u225e\u2261\u2269\u226e\u2276\u227b\u227e"+
		"\u2288\u228e\u2290\u2297\u229d\u22a9\u22b1\u22c2\u22c9\u22d2\u22dc\u22eb"+
		"\u22ed\u22f3\u22fc\u2308\u230d\u2310\u2313\u231b\u231e\u2324\u2337\u233d"+
		"\u2346\u234a\u234e\u2355\u235d\u2362\u236d\u2371\u2379\u237e\u2389\u238d"+
		"\u2397\u239e\u23a1\u23a5\u23a9\u23b4\u23b7\u23ba\u23c1\u23ca\u23d8\u23df"+
		"\u23e9\u23ef\u23f6\u23fc\u2405\u240f\u2414\u2420\u2424\u2428\u242b\u242f"+
		"\u2434\u2439\u243c\u2447\u2459\u2460\u2466\u2472\u2483\u2488\u248f\u2495"+
		"\u249c\u24a3\u24b2\u24b6\u24bb\u24bf\u24c6\u24cc\u24d4\u24d9\u24dd\u24e2"+
		"\u24e6\u24eb\u24ef\u24f5\u24f9\u24fe\u2502\u2509\u250d\u2513\u251a\u251e"+
		"\u2523\u2527\u252e\u2533\u2537\u253b\u2541\u2545\u254a\u254e\u2555\u255c"+
		"\u2562\u2568\u256e\u2575\u257a\u2580\u2585\u2589\u258e\u2592\u2597\u259b"+
		"\u25a0\u25a6\u25ab\u25af\u25b4\u25b8\u25bd\u25c1\u25c6\u25ca\u25cf\u25d8"+
		"\u25dc\u25e1\u25e8\u25ed\u25f3\u25f8\u25fc\u2602\u260c\u2610\u2617\u261f"+
		"\u2629\u2631\u2637\u263a\u263d\u2640\u2646\u264e\u2653\u265c\u2660\u2663"+
		"\u2669\u266c\u2676\u267c\u2692\u2697\u26a1\u26a7\u26b0\u26b9\u26bd\u26c4"+
		"\u26cf\u26d3\u26dd\u26e1\u26e7\u26f1\u26fb\u2707\u2710\u271f\u2724\u272d"+
		"\u2732\u273b\u2741\u2758\u2762\u276a\u276f\u2773\u2778\u277c\u2797\u27ba"+
		"\u27c1\u27cf\u27e2\u27e4\u27ef\u27f4\u27f8\u2804\u2808\u2819\u2826\u282f"+
		"\u2835\u283a\u283f\u2846\u2852\u2859\u285e\u2862\u2866\u286c\u2872\u2875"+
		"\u287c\u2887\u288c\u2890\u2894\u289b\u289e\u28a1\u28a4\u28aa\u28ad\u28b5"+
		"\u28be\u28c3";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3,
			_serializedATNSegment4
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}