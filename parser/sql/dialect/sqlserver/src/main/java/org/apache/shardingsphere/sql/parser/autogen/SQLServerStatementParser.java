// Generated from /Users/code/gitcode/shardingsphere/parser/sql/dialect/sqlserver/src/main/antlr4/org/apache/shardingsphere/sql/parser/autogen/SQLServerStatement.g4 by ANTLR 4.13.2
package org.apache.shardingsphere.sql.parser.autogen;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue", "this-escape"})
public class SQLServerStatementParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.13.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, BLOCK_COMMENT=2, INLINE_COMMENT=3, AND_=4, OR_=5, NOT_=6, TILDE_=7, 
		VERTICAL_BAR_=8, AMPERSAND_=9, SIGNED_LEFT_SHIFT_=10, SIGNED_RIGHT_SHIFT_=11, 
		CARET_=12, MOD_=13, COLON_=14, PLUS_=15, MINUS_=16, ASTERISK_=17, SLASH_=18, 
		BACKSLASH_=19, DOT_=20, DOT_ASTERISK_=21, SAFE_EQ_=22, DEQ_=23, EQ_=24, 
		NEQ_=25, GT_=26, GTE_=27, LT_=28, LTE_=29, POUND_=30, LP_=31, RP_=32, 
		LBE_=33, RBE_=34, LBT_=35, RBT_=36, COMMA_=37, DQ_=38, SQ_=39, BQ_=40, 
		QUESTION_=41, AT_=42, SEMI_=43, DOLLAR_=44, WS=45, SELECT=46, INSERT=47, 
		UPDATE=48, DELETE=49, CREATE=50, ALTER=51, DROP=52, TRUNCATE=53, SCHEMA=54, 
		GRANT=55, REVOKE=56, ADD=57, SET=58, TABLE=59, COLUMN=60, COLUMNS=61, 
		INDEX=62, CONSTRAINT=63, PRIMARY=64, UNIQUE=65, FOREIGN=66, KEY=67, POSITION=68, 
		PRECISION=69, FUNCTION=70, TRIGGER=71, PROCEDURE=72, PROC=73, VIEW=74, 
		INTO=75, VALUES=76, WITH=77, UNION=78, DISTINCT=79, CASE=80, WHEN=81, 
		CAST=82, TRIM=83, SUBSTRING=84, FROM=85, NATURAL=86, JOIN=87, FULL=88, 
		INNER=89, OUTER=90, LEFT=91, RIGHT=92, CROSS=93, USING=94, WHERE=95, AS=96, 
		ON=97, OFF=98, IF=99, ELSE=100, THEN=101, FOR=102, TO=103, AND=104, OR=105, 
		IS=106, NOT=107, NULL=108, TRUE=109, FALSE=110, EXISTS=111, BETWEEN=112, 
		IN=113, ALL=114, ANY=115, LIKE=116, ORDER=117, GROUP=118, BY=119, ASC=120, 
		DESC=121, HAVING=122, LIMIT=123, OFFSET=124, BEGIN=125, COMMIT=126, ROLLBACK=127, 
		SAVEPOINT=128, BOOLEAN=129, DOUBLE=130, CHAR=131, CHARACTER=132, ARRAY=133, 
		INTERVAL=134, DATE=135, TIME=136, TIMESTAMP=137, LOCALTIME=138, LOCALTIMESTAMP=139, 
		YEAR=140, QUARTER=141, MONTH=142, WEEK=143, DAY=144, HOUR=145, MINUTE=146, 
		SECOND=147, MICROSECOND=148, MAX=149, MIN=150, SUM=151, COUNT=152, AVG=153, 
		DEFAULT=154, CURRENT=155, ENABLE=156, DISABLE=157, CALL=158, INSTANCE=159, 
		PRESERVE=160, DO=161, DEFINER=162, CURRENT_USER=163, SQL=164, CASCADED=165, 
		LOCAL=166, CLOSE=167, OPEN=168, NEXT=169, NAME=170, COLLATION=171, NAMES=172, 
		INTEGER=173, REAL=174, DECIMAL=175, TYPE=176, BIT=177, SMALLINT=178, INT=179, 
		TINYINT=180, NUMERIC=181, FLOAT=182, BIGINT=183, TEXT=184, VARCHAR=185, 
		PERCENT=186, TIES=187, EXCEPT=188, INTERSECT=189, USE=190, MERGE=191, 
		LOOP=192, EXPAND=193, VIEWS=194, FAST=195, FORCE=196, KEEP=197, PLAN=198, 
		OPTIMIZE=199, SIMPLE=200, FORCED=201, HINT=202, READ_ONLY=203, DATABASE=204, 
		DECLARE=205, CURSOR=206, OF=207, RETURNS=208, DATEPART=209, RETURN=210, 
		READONLY=211, AT=212, PASSWORD=213, WITHOUT=214, APPLY=215, KEEPIDENTITY=216, 
		KEEPDEFAULTS=217, HOLDLOCK=218, IGNORE_CONSTRAINTS=219, IGNORE_TRIGGERS=220, 
		NOLOCK=221, NOWAIT=222, PAGLOCK=223, READCOMMITTED=224, READCOMMITTEDLOCK=225, 
		READPAST=226, REPEATABLEREAD=227, ROWLOCK=228, TABLOCK=229, TABLOCKX=230, 
		UPDLOCK=231, XLOCK=232, JSON_OBJECT=233, JSON_ARRAY=234, FIRST_VALUE=235, 
		LAST_VALUE=236, APPROX_PERCENTILE_CONT=237, APPROX_PERCENTILE_DISC=238, 
		WITHIN=239, OPENDATASOURCE=240, MATCHED=241, TARGET=242, LEADING=243, 
		BOTH=244, TRAILING=245, CONNECTION=246, FOR_GENERATOR=247, BINARY=248, 
		ESCAPE=249, HIDDEN_=250, MOD=251, PARTITION=252, PARTITIONS=253, TOP=254, 
		ROW=255, ROWS=256, UNKNOWN=257, XOR=258, ALWAYS=259, CASCADE=260, CHECK=261, 
		GENERATED=262, NO=263, OPTION=264, PRIVILEGES=265, REFERENCES=266, USER=267, 
		ROLE=268, START=269, TRANSACTION=270, ACTION=271, ALGORITHM=272, AUTO=273, 
		BLOCKERS=274, CLUSTERED=275, NONCLUSTERED=276, COLLATE=277, COLUMNSTORE=278, 
		CONTENT=279, CONVERT=280, YEARS=281, MONTHS=282, WEEKS=283, DAYS=284, 
		MINUTES=285, DENY=286, DETERMINISTIC=287, DISTRIBUTION=288, DOCUMENT=289, 
		DURABILITY=290, ENCRYPTED=291, END=292, FILESTREAM=293, FILETABLE=294, 
		FILLFACTOR=295, FOLLOWING=296, HASH=297, HEAP=298, IDENTITY=299, INBOUND=300, 
		OUTBOUND=301, UNBOUNDED=302, INFINITE=303, LOGIN=304, MASKED=305, MAXDOP=306, 
		MOVE=307, NOCHECK=308, NONE=309, OBJECT=310, ONLINE=311, OVER=312, PAGE=313, 
		PAUSED=314, PERIOD=315, PERSISTED=316, PRECEDING=317, RANDOMIZED=318, 
		RANGE=319, REBUILD=320, REPLICATE=321, REPLICATION=322, RESUMABLE=323, 
		ROWGUIDCOL=324, SAVE=325, SELF=326, SPARSE=327, SWITCH=328, TRAN=329, 
		TRANCOUNT=330, ZONE=331, EXECUTE=332, EXEC=333, SESSION=334, CONNECT=335, 
		CATALOG=336, CONTROL=337, CONCAT=338, TAKE=339, OWNERSHIP=340, DEFINITION=341, 
		APPLICATION=342, ASSEMBLY=343, SYMMETRIC=344, ASYMMETRIC=345, SERVER=346, 
		RECEIVE=347, CHANGE=348, TRACE=349, TRACKING=350, RESOURCES=351, SETTINGS=352, 
		STATE=353, AVAILABILITY=354, CREDENTIAL=355, ENDPOINT=356, EVENT=357, 
		NOTIFICATION=358, LINKED=359, AUDIT=360, DDL=361, XML=362, IMPERSONATE=363, 
		SECURABLES=364, AUTHENTICATE=365, EXTERNAL=366, ACCESS=367, ADMINISTER=368, 
		BULK=369, OPERATIONS=370, UNSAFE=371, SHUTDOWN=372, SCOPED=373, CONFIGURATION=374, 
		DATASPACE=375, SERVICE=376, CERTIFICATE=377, CONTRACT=378, ENCRYPTION=379, 
		MASTER=380, DATA=381, SOURCE=382, FILE=383, FORMAT=384, LIBRARY=385, FULLTEXT=386, 
		MASK=387, UNMASK=388, MESSAGE=389, REMOTE=390, BINDING=391, ROUTE=392, 
		SECURITY=393, POLICY=394, AGGREGATE=395, QUEUE=396, RULE=397, SYNONYM=398, 
		COLLECTION=399, SCRIPT=400, KILL=401, BACKUP=402, LOG=403, SHOWPLAN=404, 
		SUBSCRIBE=405, QUERY=406, NOTIFICATIONS=407, CHECKPOINT=408, SEQUENCE=409, 
		ABORT_AFTER_WAIT=410, ALLOW_PAGE_LOCKS=411, ALLOW_ROW_LOCKS=412, ALL_SPARSE_COLUMNS=413, 
		BUCKET_COUNT=414, COLUMNSTORE_ARCHIVE=415, COLUMN_ENCRYPTION_KEY=416, 
		COLUMN_SET=417, COMPRESSION_DELAY=418, DATABASE_DEAULT=419, DATA_COMPRESSION=420, 
		DATA_CONSISTENCY_CHECK=421, ENCRYPTION_TYPE=422, SYSTEM_TIME=423, SYSTEM_VERSIONING=424, 
		TEXTIMAGE_ON=425, WAIT_AT_LOW_PRIORITY=426, STATISTICS_INCREMENTAL=427, 
		STATISTICS_NORECOMPUTE=428, ROUND_ROBIN=429, SCHEMA_AND_DATA=430, SCHEMA_ONLY=431, 
		SORT_IN_TEMPDB=432, IGNORE_DUP_KEY=433, IMPLICIT_TRANSACTIONS=434, MAX_DURATION=435, 
		MEMORY_OPTIMIZED=436, MIGRATION_STATE=437, PAD_INDEX=438, REMOTE_DATA_ARCHIVE=439, 
		FILESTREAM_ON=440, FILETABLE_COLLATE_FILENAME=441, FILETABLE_DIRECTORY=442, 
		FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME=443, FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME=444, 
		FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME=445, FILTER_PREDICATE=446, HISTORY_RETENTION_PERIOD=447, 
		HISTORY_TABLE=448, LOCK_ESCALATION=449, DROP_EXISTING=450, ROW_NUMBER=451, 
		FETCH=452, FIRST=453, ONLY=454, MONEY=455, SMALLMONEY=456, DATETIMEOFFSET=457, 
		DATETIME=458, DATETIME2=459, SMALLDATETIME=460, NCHAR=461, NVARCHAR=462, 
		NTEXT=463, VARBINARY=464, IMAGE=465, SQL_VARIANT=466, UNIQUEIDENTIFIER=467, 
		HIERARCHYID=468, GEOMETRY=469, GEOGRAPHY=470, OUTPUT=471, INSERTED=472, 
		DELETED=473, ASSUME_JOIN_PREDICATE_DEPENDS_ON_FILTERS=474, ASSUME_MIN_SELECTIVITY_FOR_FILTER_ESTIMATES=475, 
		DISABLE_BATCH_MODE_ADAPTIVE_JOINS=476, DISABLE_BATCH_MODE_MEMORY_GRANT_FEEDBACK=477, 
		DISABLE_DEFERRED_COMPILATION_TV=478, DISABLE_INTERLEAVED_EXECUTION_TVF=479, 
		DISABLE_OPTIMIZED_NESTED_LOOP=480, DISABLE_OPTIMIZER_ROWGOAL=481, DISABLE_PARAMETER_SNIFFING=482, 
		DISABLE_ROW_MODE_MEMORY_GRANT_FEEDBACK=483, DISABLE_TSQL_SCALAR_UDF_INLINING=484, 
		DISALLOW_BATCH_MODE=485, ENABLE_HIST_AMENDMENT_FOR_ASC_KEYS=486, ENABLE_QUERY_OPTIMIZER_HOTFIXES=487, 
		FORCE_DEFAULT_CARDINALITY_ESTIMATION=488, FORCE_LEGACY_CARDINALITY_ESTIMATION=489, 
		QUERY_OPTIMIZER_COMPATIBILITY_LEVEL_n=490, QUERY_PLAN_PROFILE=491, EXTERNALPUSHDOWN=492, 
		SCALEOUTEXECUTION=493, IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX=494, KEEPFIXED=495, 
		MAX_GRANT_PERCENT=496, MIN_GRANT_PERCENT=497, MAXRECURSION=498, NO_PERFORMANCE_SPOOL=499, 
		PARAMETERIZATION=500, QUERYTRACEON=501, RECOMPILE=502, ROBUST=503, OPTIMIZE_FOR_SEQUENTIAL_KEY=504, 
		DATA_DELETION=505, FILTER_COLUMN=506, RETENTION_PERIOD=507, CONTAINMENT=508, 
		PARTIAL=509, FILENAME=510, SIZE=511, MAXSIZE=512, FILEGROWTH=513, UNLIMITED=514, 
		KB=515, MB=516, GB=517, TB=518, CONTAINS=519, MEMORY_OPTIMIZED_DATA=520, 
		FILEGROUP=521, NON_TRANSACTED_ACCESS=522, DB_CHAINING=523, TRUSTWORTHY=524, 
		FORWARD_ONLY=525, SCROLL=526, STATIC=527, KEYSET=528, DYNAMIC=529, FAST_FORWARD=530, 
		SCROLL_LOCKS=531, OPTIMISTIC=532, TYPE_WARNING=533, SCHEMABINDING=534, 
		CALLER=535, INPUT=536, CALLED=537, VARYING=538, OUT=539, OWNER=540, ATOMIC=541, 
		LANGUAGE=542, LEVEL=543, ISOLATION=544, SNAPSHOT=545, REPEATABLE=546, 
		READ=547, SERIALIZABLE=548, NATIVE_COMPILATION=549, VIEW_METADATA=550, 
		AFTER=551, INSTEAD=552, APPEND=553, INCREMENT=554, CYCLE=555, CACHE=556, 
		MINVALUE=557, MAXVALUE=558, RESTART=559, LOB_COMPACTION=560, COMPRESS_ALL_ROW_GROUPS=561, 
		REORGANIZE=562, RESUME=563, PAUSE=564, ABORT=565, INCLUDE=566, DISTRIBUTED=567, 
		MARK=568, WORK=569, REMOVE=570, AUTOGROW_SINGLE_FILE=571, AUTOGROW_ALL_FILES=572, 
		READWRITE=573, READ_WRITE=574, MODIFY=575, ACCELERATED_DATABASE_RECOVERY=576, 
		PERSISTENT_VERSION_STORE_FILEGROUP=577, IMMEDIATE=578, NO_WAIT=579, TARGET_RECOVERY_TIME=580, 
		SECONDS=581, HONOR_BROKER_PRIORITY=582, ERROR_BROKER_CONVERSATIONS=583, 
		NEW_BROKER=584, DISABLE_BROKER=585, ENABLE_BROKER=586, MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT=587, 
		READ_COMMITTED_SNAPSHOT=588, ALLOW_SNAPSHOT_ISOLATION=589, RECURSIVE_TRIGGERS=590, 
		QUOTED_IDENTIFIER=591, NUMERIC_ROUNDABORT=592, CONCAT_NULL_YIELDS_NULL=593, 
		COMPATIBILITY_LEVEL=594, ARITHABORT=595, ANSI_WARNINGS=596, ANSI_PADDING=597, 
		ANSI_NULLS=598, ANSI_NULL_DEFAULT=599, PAGE_VERIFY=600, CHECKSUM=601, 
		TORN_PAGE_DETECTION=602, BULK_LOGGED=603, RECOVERY=604, TOTAL_EXECUTION_CPU_TIME_MS=605, 
		TOTAL_COMPILE_CPU_TIME_MS=606, STALE_CAPTURE_POLICY_THRESHOLD=607, EXECUTION_COUNT=608, 
		QUERY_CAPTURE_POLICY=609, WAIT_STATS_CAPTURE_MODE=610, MAX_PLANS_PER_QUERY=611, 
		QUERY_CAPTURE_MODE=612, SIZE_BASED_CLEANUP_MODE=613, INTERVAL_LENGTH_MINUTES=614, 
		MAX_STORAGE_SIZE_MB=615, DATA_FLUSH_INTERVAL_SECONDS=616, CLEANUP_POLICY=617, 
		CUSTOM=618, STALE_QUERY_THRESHOLD_DAYS=619, OPERATION_MODE=620, QUERY_STORE=621, 
		CURSOR_DEFAULT=622, GLOBAL=623, CURSOR_CLOSE_ON_COMMIT=624, HOURS=625, 
		CHANGE_RETENTION=626, AUTO_CLEANUP=627, CHANGE_TRACKING=628, AUTOMATIC_TUNING=629, 
		FORCE_LAST_GOOD_PLAN=630, AUTO_UPDATE_STATISTICS_ASYNC=631, AUTO_UPDATE_STATISTICS=632, 
		AUTO_SHRINK=633, AUTO_CREATE_STATISTICS=634, INCREMENTAL=635, AUTO_CLOSE=636, 
		DATA_RETENTION=637, TEMPORAL_HISTORY_RETENTION=638, EDITION=639, MIXED_PAGE_ALLOCATION=640, 
		DISABLED=641, ALLOWED=642, HADR=643, MULTI_USER=644, RESTRICTED_USER=645, 
		SINGLE_USER=646, OFFLINE=647, EMERGENCY=648, SUSPEND=649, DATE_CORRELATION_OPTIMIZATION=650, 
		ELASTIC_POOL=651, SERVICE_OBJECTIVE=652, DATABASE_NAME=653, ALLOW_CONNECTIONS=654, 
		GEO=655, NAMED=656, DATEFIRST=657, BACKUP_STORAGE_REDUNDANCY=658, FORCE_FAILOVER_ALLOW_DATA_LOSS=659, 
		SECONDARY=660, FAILOVER=661, DEFAULT_FULLTEXT_LANGUAGE=662, DEFAULT_LANGUAGE=663, 
		INLINE=664, NESTED_TRIGGERS=665, TRANSFORM_NOISE_WORDS=666, TWO_DIGIT_YEAR_CUTOFF=667, 
		PERSISTENT_LOG_BUFFER=668, DIRECTORY_NAME=669, DATEFORMAT=670, DELAYED_DURABILITY=671, 
		AUTHORIZATION=672, TRANSFER=673, EXPLAIN=674, WITH_RECOMMENDATIONS=675, 
		BATCH_SIZE=676, SETUSER=677, NORESET=678, DEFAULT_SCHEMA=679, ALLOW_ENCRYPTED_VALUE_MODIFICATIONS=680, 
		OLD_PASSWORD=681, PROVIDER=682, SID=683, UNCOMMITTED=684, COMMITTED=685, 
		STOPLIST=686, SEARCH=687, PROPERTY=688, LIST=689, SEND=690, MEMBER=691, 
		HASHED=692, MUST_CHANGE=693, DEFAULT_DATABASE=694, CHECK_EXPIRATION=695, 
		CHECK_POLICY=696, WINDOWS=697, UNLOCK=698, REVERT=699, COOKIE=700, BROWSE=701, 
		RAW=702, XMLDATA=703, XMLSCHEMA=704, ELEMENTS=705, XSINIL=706, ABSENT=707, 
		EXPLICIT=708, PATH=709, BASE64=710, ROOT=711, JSON=712, INCLUDE_NULL_VALUES=713, 
		WITHOUT_ARRAY_WRAPPER=714, XMLNAMESPACES=715, STATISTICS=716, FULLSCAN=717, 
		SAMPLE=718, RESAMPLE=719, NORECOMPUTE=720, AUTO_DROP=721, PERSIST_SAMPLE_PERCENT=722, 
		OPENJSON=723, OPENROWSET=724, TRY_CAST=725, TRY_CONVERT=726, OPENQUERY=727, 
		MATCH=728, LAST_NODE=729, SHORTEST_PATH=730, STRING_AGG=731, GRAPH=732, 
		IDENTIFIER_=733, DELIMITED_IDENTIFIER_=734, STRING_=735, NUMBER_=736, 
		INT_NUM_=737, FLOAT_NUM_=738, DECIMAL_NUM_=739, HEX_DIGIT_=740, BIT_NUM_=741, 
		NCHAR_TEXT=742, RESPECT=743, IGNORE=744, NULLS=745;
	public static final int
		RULE_execute = 0, RULE_setTransaction = 1, RULE_isolationLevel = 2, RULE_setImplicitTransactions = 3, 
		RULE_implicitTransactionsValue = 4, RULE_beginTransaction = 5, RULE_beginDistributedTransaction = 6, 
		RULE_commit = 7, RULE_commitWork = 8, RULE_rollback = 9, RULE_rollbackWork = 10, 
		RULE_savepoint = 11, RULE_parameterMarker = 12, RULE_literals = 13, RULE_stringLiterals = 14, 
		RULE_numberLiterals = 15, RULE_dateTimeLiterals = 16, RULE_hexadecimalLiterals = 17, 
		RULE_bitValueLiterals = 18, RULE_booleanLiterals = 19, RULE_nullValueLiterals = 20, 
		RULE_identifier = 21, RULE_regularIdentifier = 22, RULE_delimitedIdentifier = 23, 
		RULE_unreservedWord = 24, RULE_databaseName = 25, RULE_schemaName = 26, 
		RULE_functionName = 27, RULE_procedureName = 28, RULE_viewName = 29, RULE_triggerName = 30, 
		RULE_sequenceName = 31, RULE_tableName = 32, RULE_queueName = 33, RULE_contractName = 34, 
		RULE_serviceName = 35, RULE_columnName = 36, RULE_scriptVariableName = 37, 
		RULE_owner = 38, RULE_name = 39, RULE_columnNames = 40, RULE_columnNamesWithSort = 41, 
		RULE_tableNames = 42, RULE_indexName = 43, RULE_constraintName = 44, RULE_collationName = 45, 
		RULE_alias = 46, RULE_dataTypeLength = 47, RULE_primaryKey = 48, RULE_expr = 49, 
		RULE_andOperator = 50, RULE_orOperator = 51, RULE_distinctFrom = 52, RULE_notOperator = 53, 
		RULE_booleanPrimary = 54, RULE_comparisonOperator = 55, RULE_predicate = 56, 
		RULE_bitExpr = 57, RULE_simpleExpr = 58, RULE_functionCall = 59, RULE_aggregationFunction = 60, 
		RULE_aggregationFunctionName = 61, RULE_distinct = 62, RULE_specialFunction = 63, 
		RULE_trimFunction = 64, RULE_graphFunction = 65, RULE_graphAggFunction = 66, 
		RULE_graphAggFunctionName = 67, RULE_rowNumberFunction = 68, RULE_openDatasourceFunction = 69, 
		RULE_approxFunction = 70, RULE_conversionFunction = 71, RULE_castFunction = 72, 
		RULE_convertFunction = 73, RULE_jsonFunction = 74, RULE_jsonObjectFunction = 75, 
		RULE_jsonArrayFunction = 76, RULE_jsonKeyValue = 77, RULE_jsonNullClause = 78, 
		RULE_charFunction = 79, RULE_openJsonFunction = 80, RULE_openJsonWithclause = 81, 
		RULE_jsonColumnDefinition = 82, RULE_openRowSetFunction = 83, RULE_openQueryFunction = 84, 
		RULE_rowSetFunction = 85, RULE_regularFunction = 86, RULE_regularFunctionName = 87, 
		RULE_caseExpression = 88, RULE_caseWhen = 89, RULE_caseElse = 90, RULE_privateExprOfDb = 91, 
		RULE_orderByClause = 92, RULE_orderByItem = 93, RULE_dataType = 94, RULE_dataTypeName = 95, 
		RULE_atTimeZoneExpr = 96, RULE_castExpr = 97, RULE_convertExpr = 98, RULE_windowFunction = 99, 
		RULE_nullTreatment = 100, RULE_overClause = 101, RULE_partitionByClause = 102, 
		RULE_rowRangeClause = 103, RULE_windowFrameExtent = 104, RULE_windowFrameBetween = 105, 
		RULE_windowFrameBound = 106, RULE_windowFramePreceding = 107, RULE_windowFrameFollowing = 108, 
		RULE_columnNameWithSort = 109, RULE_indexOption = 110, RULE_compressionOption = 111, 
		RULE_eqTime = 112, RULE_eqOnOffOption = 113, RULE_eqKey = 114, RULE_eqOnOff = 115, 
		RULE_onPartitionClause = 116, RULE_partitionExpressions = 117, RULE_partitionExpression = 118, 
		RULE_numberRange = 119, RULE_lowPriorityLockWait = 120, RULE_onLowPriorLockWait = 121, 
		RULE_ignoredIdentifier = 122, RULE_ignoredIdentifiers = 123, RULE_matchNone = 124, 
		RULE_variableName = 125, RULE_executeAsClause = 126, RULE_transactionName = 127, 
		RULE_transactionVariableName = 128, RULE_savepointName = 129, RULE_savepointVariableName = 130, 
		RULE_entityType = 131, RULE_ifExists = 132, RULE_tableHintLimited = 133, 
		RULE_matchExpression = 134, RULE_simpleMatch = 135, RULE_simpleMatchClause = 136, 
		RULE_lastNode = 137, RULE_arbitratyLengthMatch = 138, RULE_arbitraryLength = 139, 
		RULE_arbitraryLengthClause = 140, RULE_edgeNodeAl = 141, RULE_edgeAliasPath = 142, 
		RULE_outEdgePath = 143, RULE_inEdgePath = 144, RULE_alPatternQuantifier = 145, 
		RULE_nodeAlias = 146, RULE_edgeAlias = 147, RULE_call = 148, RULE_explain = 149, 
		RULE_explainableStatement = 150, RULE_createTable = 151, RULE_createTableClause = 152, 
		RULE_createIndex = 153, RULE_createDatabase = 154, RULE_createFunction = 155, 
		RULE_createProcedure = 156, RULE_createView = 157, RULE_createTrigger = 158, 
		RULE_createSequence = 159, RULE_createService = 160, RULE_createSchema = 161, 
		RULE_alterTable = 162, RULE_alterIndex = 163, RULE_alterDatabase = 164, 
		RULE_alterProcedure = 165, RULE_alterFunction = 166, RULE_alterView = 167, 
		RULE_alterTrigger = 168, RULE_alterSequence = 169, RULE_alterService = 170, 
		RULE_alterSchema = 171, RULE_securableName = 172, RULE_dropTable = 173, 
		RULE_dropIndex = 174, RULE_dropDatabase = 175, RULE_dropFunction = 176, 
		RULE_dropProcedure = 177, RULE_dropView = 178, RULE_dropTrigger = 179, 
		RULE_dropSequence = 180, RULE_dropService = 181, RULE_dropSchema = 182, 
		RULE_truncateTable = 183, RULE_updateStatistics = 184, RULE_statisticsWithClause = 185, 
		RULE_sampleOption = 186, RULE_statisticsOptions = 187, RULE_statisticsOption = 188, 
		RULE_fileTableClause = 189, RULE_createDefinitionClause = 190, RULE_createTableDefinitions = 191, 
		RULE_createTableDefinition = 192, RULE_columnDefinition = 193, RULE_columnDefinitionOption = 194, 
		RULE_encryptedOptions = 195, RULE_columnConstraint = 196, RULE_computedColumnConstraint = 197, 
		RULE_computedColumnForeignKeyConstraint = 198, RULE_computedColumnForeignKeyOnAction = 199, 
		RULE_primaryKeyConstraint = 200, RULE_diskTablePrimaryKeyConstraintOption = 201, 
		RULE_clusterOption = 202, RULE_primaryKeyWithClause = 203, RULE_primaryKeyOnClause = 204, 
		RULE_onSchemaColumn = 205, RULE_onFileGroup = 206, RULE_onString = 207, 
		RULE_memoryTablePrimaryKeyConstraintOption = 208, RULE_withBucket = 209, 
		RULE_columnForeignKeyConstraint = 210, RULE_foreignKeyOnAction = 211, 
		RULE_foreignKeyOn = 212, RULE_checkConstraint = 213, RULE_columnIndex = 214, 
		RULE_withIndexOption = 215, RULE_indexOnClause = 216, RULE_onDefault = 217, 
		RULE_fileStreamOn = 218, RULE_columnConstraints = 219, RULE_computedColumnDefinition = 220, 
		RULE_columnSetDefinition = 221, RULE_tableConstraint = 222, RULE_edgeConstraint = 223, 
		RULE_connectionClause = 224, RULE_tablePrimaryConstraint = 225, RULE_primaryKeyUnique = 226, 
		RULE_diskTablePrimaryConstraintOption = 227, RULE_memoryTablePrimaryConstraintOption = 228, 
		RULE_hashWithBucket = 229, RULE_tableForeignKeyConstraint = 230, RULE_tableIndex = 231, 
		RULE_indexNameOption = 232, RULE_indexOptions = 233, RULE_periodClause = 234, 
		RULE_partitionScheme = 235, RULE_fileGroup = 236, RULE_tableOptions = 237, 
		RULE_tableOption = 238, RULE_dataDelectionOption = 239, RULE_tableStretchOptions = 240, 
		RULE_tableStretchOption = 241, RULE_migrationState_ = 242, RULE_tableOperationOption = 243, 
		RULE_distributionOption = 244, RULE_dataWareHouseTableOption = 245, RULE_dataWareHousePartitionOption = 246, 
		RULE_createIndexSpecification = 247, RULE_alterDefinitionClause = 248, 
		RULE_addColumnSpecification = 249, RULE_modifyColumnSpecification = 250, 
		RULE_alterColumnOperation = 251, RULE_alterColumnAddOptions = 252, RULE_alterColumnAddOption = 253, 
		RULE_constraintForColumn = 254, RULE_generatedColumnNamesClause = 255, 
		RULE_generatedColumnNameClause = 256, RULE_generatedColumnName = 257, 
		RULE_alterDrop = 258, RULE_alterTableDropConstraint = 259, RULE_dropConstraintName = 260, 
		RULE_dropConstraintWithClause = 261, RULE_dropConstraintOption = 262, 
		RULE_onOffOption = 263, RULE_dropColumnSpecification = 264, RULE_dropIndexSpecification = 265, 
		RULE_alterCheckConstraint = 266, RULE_alterTableTrigger = 267, RULE_alterSwitch = 268, 
		RULE_alterSet = 269, RULE_setFileStreamClause = 270, RULE_setSystemVersionClause = 271, 
		RULE_alterSetOnClause = 272, RULE_dataConsistencyCheckClause = 273, RULE_historyRetentionPeriodClause = 274, 
		RULE_historyRetentionPeriod = 275, RULE_alterTableTableIndex = 276, RULE_indexWithName = 277, 
		RULE_indexNonClusterClause = 278, RULE_alterTableIndexOnClause = 279, 
		RULE_indexClusterClause = 280, RULE_alterTableOption = 281, RULE_onHistoryTableClause = 282, 
		RULE_createDatabaseClause = 283, RULE_fileDefinitionClause = 284, RULE_databaseOption = 285, 
		RULE_fileStreamOption = 286, RULE_fileSpec = 287, RULE_databaseFileSpecOption = 288, 
		RULE_databaseFileGroup = 289, RULE_databaseFileGroupContains = 290, RULE_databaseLogOns = 291, 
		RULE_declareVariable = 292, RULE_variable = 293, RULE_tableVariable = 294, 
		RULE_variTableTypeDefinition = 295, RULE_tableVariableClause = 296, RULE_variableTableColumnDefinition = 297, 
		RULE_variableTableColumnConstraint = 298, RULE_variableTableConstraint = 299, 
		RULE_setVariable = 300, RULE_setVariableClause = 301, RULE_cursorVariable = 302, 
		RULE_cursorClause = 303, RULE_compoundOperation = 304, RULE_funcParameters = 305, 
		RULE_funcReturns = 306, RULE_funcMutiReturn = 307, RULE_funcInlineReturn = 308, 
		RULE_funcScalarReturn = 309, RULE_tableTypeDefinition = 310, RULE_compoundStatement = 311, 
		RULE_functionOption = 312, RULE_validStatement = 313, RULE_procParameters = 314, 
		RULE_procParameter = 315, RULE_createOrAlterProcClause = 316, RULE_withCreateProcOption = 317, 
		RULE_procOption = 318, RULE_procAsClause = 319, RULE_procSetOption = 320, 
		RULE_createOrAlterViewClause = 321, RULE_viewAttribute = 322, RULE_withCommonTableExpr = 323, 
		RULE_commonTableExpr = 324, RULE_createTriggerClause = 325, RULE_dmlTriggerOption = 326, 
		RULE_methodSpecifier = 327, RULE_triggerTarget = 328, RULE_createOrAlterSequenceClause = 329, 
		RULE_createIndexClause = 330, RULE_filterPredicate = 331, RULE_conjunct = 332, 
		RULE_alterIndexClause = 333, RULE_relationalIndexOption = 334, RULE_partitionNumberRange = 335, 
		RULE_reorganizeOption = 336, RULE_setIndexOption = 337, RULE_resumableIndexOptions = 338, 
		RULE_alterDatabaseClause = 339, RULE_addSecondaryOption = 340, RULE_editionOptions = 341, 
		RULE_serviceObjective = 342, RULE_alterDatabaseOptionSpec = 343, RULE_fileAndFilegroupOptions = 344, 
		RULE_addOrModifyFilegroups = 345, RULE_filegroupUpdatabilityOption = 346, 
		RULE_addOrModifyFiles = 347, RULE_acceleratedDatabaseRecovery = 348, RULE_autoOption = 349, 
		RULE_automaticTuningOption = 350, RULE_changeTrackingOption = 351, RULE_changeTrackingOptionList = 352, 
		RULE_cursorOption = 353, RULE_externalAccessOption = 354, RULE_queryStoreOptions = 355, 
		RULE_queryStoreOptionList = 356, RULE_queryCapturePolicyOptionList = 357, 
		RULE_recoveryOption = 358, RULE_sqlOption = 359, RULE_snapshotOption = 360, 
		RULE_serviceBrokerOption = 361, RULE_targetRecoveryTimeOption = 362, RULE_termination = 363, 
		RULE_createServiceClause = 364, RULE_alterServiceClause = 365, RULE_alterServiceOptArg = 366, 
		RULE_schemaNameClause = 367, RULE_schemaElement = 368, RULE_createTableAsSelectClause = 369, 
		RULE_createTableAsSelect = 370, RULE_createRemoteTableAsSelect = 371, 
		RULE_withDistributionOption = 372, RULE_optionQueryHintClause = 373, RULE_insert = 374, 
		RULE_insertDefaultValue = 375, RULE_insertValuesClause = 376, RULE_insertSelectClause = 377, 
		RULE_insertExecClause = 378, RULE_merge = 379, RULE_mergeIntoClause = 380, 
		RULE_mergeUsingClause = 381, RULE_withMergeHint = 382, RULE_mergeWhenClause = 383, 
		RULE_mergeUpdateClause = 384, RULE_mergeDeleteClause = 385, RULE_mergeInsertClause = 386, 
		RULE_withTableHint = 387, RULE_exec = 388, RULE_update = 389, RULE_assignment = 390, 
		RULE_setAssignmentsClause = 391, RULE_assignmentValues = 392, RULE_assignmentValue = 393, 
		RULE_delete = 394, RULE_optionHint = 395, RULE_singleTableClause = 396, 
		RULE_multipleTablesClause = 397, RULE_multipleTableNames = 398, RULE_select = 399, 
		RULE_aggregationClause = 400, RULE_selectClause = 401, RULE_duplicateSpecification = 402, 
		RULE_projections = 403, RULE_projection = 404, RULE_top = 405, RULE_topNum = 406, 
		RULE_unqualifiedShorthand = 407, RULE_qualifiedShorthand = 408, RULE_intoClause = 409, 
		RULE_fromClause = 410, RULE_tableReferences = 411, RULE_tableReference = 412, 
		RULE_tableFactor = 413, RULE_joinedTable = 414, RULE_joinSpecification = 415, 
		RULE_whereClause = 416, RULE_groupByClause = 417, RULE_havingClause = 418, 
		RULE_subquery = 419, RULE_withTempTable = 420, RULE_withClause = 421, 
		RULE_cteClauseSet = 422, RULE_cteClause = 423, RULE_outputClause = 424, 
		RULE_outputWithColumns = 425, RULE_scalarExpression = 426, RULE_outputWithColumn = 427, 
		RULE_outputWithAaterisk = 428, RULE_outputTableName = 429, RULE_queryHint = 430, 
		RULE_useHitName = 431, RULE_forClause = 432, RULE_forXmlClause = 433, 
		RULE_commonDirectivesForXml = 434, RULE_forJsonClause = 435, RULE_selectWithClause = 436, 
		RULE_xmlNamespacesClause = 437, RULE_xmlNamespaceDeclarationItem = 438, 
		RULE_xmlNamespaceUri = 439, RULE_xmlNamespacePrefix = 440, RULE_xmlDefaultNamespaceDeclarationItem = 441, 
		RULE_grant = 442, RULE_grantClassPrivilegesClause = 443, RULE_grantClassTypePrivilegesClause = 444, 
		RULE_classPrivileges = 445, RULE_onClassClause = 446, RULE_classTypePrivileges = 447, 
		RULE_onClassTypeClause = 448, RULE_securable = 449, RULE_principal = 450, 
		RULE_revoke = 451, RULE_revokeClassPrivilegesClause = 452, RULE_revokeClassTypePrivilegesClause = 453, 
		RULE_deny = 454, RULE_denyClassPrivilegesClause = 455, RULE_denyClassTypePrivilegesClause = 456, 
		RULE_optionForClause = 457, RULE_privilegeType = 458, RULE_objectPermission = 459, 
		RULE_serverPermission = 460, RULE_serverPrincipalPermission = 461, RULE_databasePermission = 462, 
		RULE_databasePrincipalPermission = 463, RULE_databaseUserPermission = 464, 
		RULE_databaseRolePermission = 465, RULE_applicationRolePermission = 466, 
		RULE_databaseScopedCredentialPermission = 467, RULE_schemaPermission = 468, 
		RULE_searchPropertyListPermission = 469, RULE_serviceBrokerPermission = 470, 
		RULE_serviceBrokerContractsPermission = 471, RULE_serviceBrokerMessageTypesPermission = 472, 
		RULE_serviceBrokerRemoteServiceBindingsPermission = 473, RULE_serviceBrokerRoutesPermission = 474, 
		RULE_serviceBrokerServicesPermission = 475, RULE_endpointPermission = 476, 
		RULE_certificatePermission = 477, RULE_symmetricKeyPermission = 478, RULE_asymmetricKeyPermission = 479, 
		RULE_assemblyPermission = 480, RULE_availabilityGroupPermission = 481, 
		RULE_fullTextPermission = 482, RULE_fullTextCatalogPermission = 483, RULE_fullTextStoplistPermission = 484, 
		RULE_typePermission = 485, RULE_xmlSchemaCollectionPermission = 486, RULE_systemObjectPermission = 487, 
		RULE_class_ = 488, RULE_classItem = 489, RULE_classType = 490, RULE_roleClause = 491, 
		RULE_setUser = 492, RULE_createUser = 493, RULE_createUserLoginClause = 494, 
		RULE_createUserWindowsPrincipalClause = 495, RULE_createUserLoginWindowsPrincipalClause = 496, 
		RULE_createUserWithoutLoginClause = 497, RULE_optionsList = 498, RULE_limitedOptionsList = 499, 
		RULE_createUserFromExternalProviderClause = 500, RULE_createUserWithDefaultSchema = 501, 
		RULE_createUserWithAzureActiveDirectoryPrincipalClause = 502, RULE_windowsPrincipal = 503, 
		RULE_azureActiveDirectoryPrincipal = 504, RULE_userName = 505, RULE_ignoredNameIdentifier = 506, 
		RULE_dropUser = 507, RULE_alterUser = 508, RULE_setItem = 509, RULE_createRole = 510, 
		RULE_dropRole = 511, RULE_alterRole = 512, RULE_createLogin = 513, RULE_createLoginForSQLServerClause = 514, 
		RULE_createLoginForSQLServerOptionList = 515, RULE_createLoginForSQLServerOptionListClause = 516, 
		RULE_hashedPassword = 517, RULE_sid = 518, RULE_sources = 519, RULE_windowsOptions = 520, 
		RULE_createLoginForAzureSQLDatabaseClause = 521, RULE_createLoginForAzureSQLDatabaseOptionList = 522, 
		RULE_createLoginForAzureManagedInstanceClause = 523, RULE_azureManagedInstanceOptionList = 524, 
		RULE_createLoginForAzureSynapseAnalyticsClause = 525, RULE_createLoginForAzureSynapseAnalyticsOptionList = 526, 
		RULE_createLoginForAnalyticsPlatformSystemClause = 527, RULE_createLoginForAnalyticsPlatformSystemOptionList = 528, 
		RULE_createLoginForAnalyticsPlatformSystemOptionListClause = 529, RULE_dropLogin = 530, 
		RULE_alterLogin = 531, RULE_statusOptionClause = 532, RULE_setOptionClause = 533, 
		RULE_passwordOptionClause = 534, RULE_cryptographicCredentialsOptionClause = 535, 
		RULE_revert = 536;
	private static String[] makeRuleNames() {
		return new String[] {
			"execute", "setTransaction", "isolationLevel", "setImplicitTransactions", 
			"implicitTransactionsValue", "beginTransaction", "beginDistributedTransaction", 
			"commit", "commitWork", "rollback", "rollbackWork", "savepoint", "parameterMarker", 
			"literals", "stringLiterals", "numberLiterals", "dateTimeLiterals", "hexadecimalLiterals", 
			"bitValueLiterals", "booleanLiterals", "nullValueLiterals", "identifier", 
			"regularIdentifier", "delimitedIdentifier", "unreservedWord", "databaseName", 
			"schemaName", "functionName", "procedureName", "viewName", "triggerName", 
			"sequenceName", "tableName", "queueName", "contractName", "serviceName", 
			"columnName", "scriptVariableName", "owner", "name", "columnNames", "columnNamesWithSort", 
			"tableNames", "indexName", "constraintName", "collationName", "alias", 
			"dataTypeLength", "primaryKey", "expr", "andOperator", "orOperator", 
			"distinctFrom", "notOperator", "booleanPrimary", "comparisonOperator", 
			"predicate", "bitExpr", "simpleExpr", "functionCall", "aggregationFunction", 
			"aggregationFunctionName", "distinct", "specialFunction", "trimFunction", 
			"graphFunction", "graphAggFunction", "graphAggFunctionName", "rowNumberFunction", 
			"openDatasourceFunction", "approxFunction", "conversionFunction", "castFunction", 
			"convertFunction", "jsonFunction", "jsonObjectFunction", "jsonArrayFunction", 
			"jsonKeyValue", "jsonNullClause", "charFunction", "openJsonFunction", 
			"openJsonWithclause", "jsonColumnDefinition", "openRowSetFunction", "openQueryFunction", 
			"rowSetFunction", "regularFunction", "regularFunctionName", "caseExpression", 
			"caseWhen", "caseElse", "privateExprOfDb", "orderByClause", "orderByItem", 
			"dataType", "dataTypeName", "atTimeZoneExpr", "castExpr", "convertExpr", 
			"windowFunction", "nullTreatment", "overClause", "partitionByClause", 
			"rowRangeClause", "windowFrameExtent", "windowFrameBetween", "windowFrameBound", 
			"windowFramePreceding", "windowFrameFollowing", "columnNameWithSort", 
			"indexOption", "compressionOption", "eqTime", "eqOnOffOption", "eqKey", 
			"eqOnOff", "onPartitionClause", "partitionExpressions", "partitionExpression", 
			"numberRange", "lowPriorityLockWait", "onLowPriorLockWait", "ignoredIdentifier", 
			"ignoredIdentifiers", "matchNone", "variableName", "executeAsClause", 
			"transactionName", "transactionVariableName", "savepointName", "savepointVariableName", 
			"entityType", "ifExists", "tableHintLimited", "matchExpression", "simpleMatch", 
			"simpleMatchClause", "lastNode", "arbitratyLengthMatch", "arbitraryLength", 
			"arbitraryLengthClause", "edgeNodeAl", "edgeAliasPath", "outEdgePath", 
			"inEdgePath", "alPatternQuantifier", "nodeAlias", "edgeAlias", "call", 
			"explain", "explainableStatement", "createTable", "createTableClause", 
			"createIndex", "createDatabase", "createFunction", "createProcedure", 
			"createView", "createTrigger", "createSequence", "createService", "createSchema", 
			"alterTable", "alterIndex", "alterDatabase", "alterProcedure", "alterFunction", 
			"alterView", "alterTrigger", "alterSequence", "alterService", "alterSchema", 
			"securableName", "dropTable", "dropIndex", "dropDatabase", "dropFunction", 
			"dropProcedure", "dropView", "dropTrigger", "dropSequence", "dropService", 
			"dropSchema", "truncateTable", "updateStatistics", "statisticsWithClause", 
			"sampleOption", "statisticsOptions", "statisticsOption", "fileTableClause", 
			"createDefinitionClause", "createTableDefinitions", "createTableDefinition", 
			"columnDefinition", "columnDefinitionOption", "encryptedOptions", "columnConstraint", 
			"computedColumnConstraint", "computedColumnForeignKeyConstraint", "computedColumnForeignKeyOnAction", 
			"primaryKeyConstraint", "diskTablePrimaryKeyConstraintOption", "clusterOption", 
			"primaryKeyWithClause", "primaryKeyOnClause", "onSchemaColumn", "onFileGroup", 
			"onString", "memoryTablePrimaryKeyConstraintOption", "withBucket", "columnForeignKeyConstraint", 
			"foreignKeyOnAction", "foreignKeyOn", "checkConstraint", "columnIndex", 
			"withIndexOption", "indexOnClause", "onDefault", "fileStreamOn", "columnConstraints", 
			"computedColumnDefinition", "columnSetDefinition", "tableConstraint", 
			"edgeConstraint", "connectionClause", "tablePrimaryConstraint", "primaryKeyUnique", 
			"diskTablePrimaryConstraintOption", "memoryTablePrimaryConstraintOption", 
			"hashWithBucket", "tableForeignKeyConstraint", "tableIndex", "indexNameOption", 
			"indexOptions", "periodClause", "partitionScheme", "fileGroup", "tableOptions", 
			"tableOption", "dataDelectionOption", "tableStretchOptions", "tableStretchOption", 
			"migrationState_", "tableOperationOption", "distributionOption", "dataWareHouseTableOption", 
			"dataWareHousePartitionOption", "createIndexSpecification", "alterDefinitionClause", 
			"addColumnSpecification", "modifyColumnSpecification", "alterColumnOperation", 
			"alterColumnAddOptions", "alterColumnAddOption", "constraintForColumn", 
			"generatedColumnNamesClause", "generatedColumnNameClause", "generatedColumnName", 
			"alterDrop", "alterTableDropConstraint", "dropConstraintName", "dropConstraintWithClause", 
			"dropConstraintOption", "onOffOption", "dropColumnSpecification", "dropIndexSpecification", 
			"alterCheckConstraint", "alterTableTrigger", "alterSwitch", "alterSet", 
			"setFileStreamClause", "setSystemVersionClause", "alterSetOnClause", 
			"dataConsistencyCheckClause", "historyRetentionPeriodClause", "historyRetentionPeriod", 
			"alterTableTableIndex", "indexWithName", "indexNonClusterClause", "alterTableIndexOnClause", 
			"indexClusterClause", "alterTableOption", "onHistoryTableClause", "createDatabaseClause", 
			"fileDefinitionClause", "databaseOption", "fileStreamOption", "fileSpec", 
			"databaseFileSpecOption", "databaseFileGroup", "databaseFileGroupContains", 
			"databaseLogOns", "declareVariable", "variable", "tableVariable", "variTableTypeDefinition", 
			"tableVariableClause", "variableTableColumnDefinition", "variableTableColumnConstraint", 
			"variableTableConstraint", "setVariable", "setVariableClause", "cursorVariable", 
			"cursorClause", "compoundOperation", "funcParameters", "funcReturns", 
			"funcMutiReturn", "funcInlineReturn", "funcScalarReturn", "tableTypeDefinition", 
			"compoundStatement", "functionOption", "validStatement", "procParameters", 
			"procParameter", "createOrAlterProcClause", "withCreateProcOption", "procOption", 
			"procAsClause", "procSetOption", "createOrAlterViewClause", "viewAttribute", 
			"withCommonTableExpr", "commonTableExpr", "createTriggerClause", "dmlTriggerOption", 
			"methodSpecifier", "triggerTarget", "createOrAlterSequenceClause", "createIndexClause", 
			"filterPredicate", "conjunct", "alterIndexClause", "relationalIndexOption", 
			"partitionNumberRange", "reorganizeOption", "setIndexOption", "resumableIndexOptions", 
			"alterDatabaseClause", "addSecondaryOption", "editionOptions", "serviceObjective", 
			"alterDatabaseOptionSpec", "fileAndFilegroupOptions", "addOrModifyFilegroups", 
			"filegroupUpdatabilityOption", "addOrModifyFiles", "acceleratedDatabaseRecovery", 
			"autoOption", "automaticTuningOption", "changeTrackingOption", "changeTrackingOptionList", 
			"cursorOption", "externalAccessOption", "queryStoreOptions", "queryStoreOptionList", 
			"queryCapturePolicyOptionList", "recoveryOption", "sqlOption", "snapshotOption", 
			"serviceBrokerOption", "targetRecoveryTimeOption", "termination", "createServiceClause", 
			"alterServiceClause", "alterServiceOptArg", "schemaNameClause", "schemaElement", 
			"createTableAsSelectClause", "createTableAsSelect", "createRemoteTableAsSelect", 
			"withDistributionOption", "optionQueryHintClause", "insert", "insertDefaultValue", 
			"insertValuesClause", "insertSelectClause", "insertExecClause", "merge", 
			"mergeIntoClause", "mergeUsingClause", "withMergeHint", "mergeWhenClause", 
			"mergeUpdateClause", "mergeDeleteClause", "mergeInsertClause", "withTableHint", 
			"exec", "update", "assignment", "setAssignmentsClause", "assignmentValues", 
			"assignmentValue", "delete", "optionHint", "singleTableClause", "multipleTablesClause", 
			"multipleTableNames", "select", "aggregationClause", "selectClause", 
			"duplicateSpecification", "projections", "projection", "top", "topNum", 
			"unqualifiedShorthand", "qualifiedShorthand", "intoClause", "fromClause", 
			"tableReferences", "tableReference", "tableFactor", "joinedTable", "joinSpecification", 
			"whereClause", "groupByClause", "havingClause", "subquery", "withTempTable", 
			"withClause", "cteClauseSet", "cteClause", "outputClause", "outputWithColumns", 
			"scalarExpression", "outputWithColumn", "outputWithAaterisk", "outputTableName", 
			"queryHint", "useHitName", "forClause", "forXmlClause", "commonDirectivesForXml", 
			"forJsonClause", "selectWithClause", "xmlNamespacesClause", "xmlNamespaceDeclarationItem", 
			"xmlNamespaceUri", "xmlNamespacePrefix", "xmlDefaultNamespaceDeclarationItem", 
			"grant", "grantClassPrivilegesClause", "grantClassTypePrivilegesClause", 
			"classPrivileges", "onClassClause", "classTypePrivileges", "onClassTypeClause", 
			"securable", "principal", "revoke", "revokeClassPrivilegesClause", "revokeClassTypePrivilegesClause", 
			"deny", "denyClassPrivilegesClause", "denyClassTypePrivilegesClause", 
			"optionForClause", "privilegeType", "objectPermission", "serverPermission", 
			"serverPrincipalPermission", "databasePermission", "databasePrincipalPermission", 
			"databaseUserPermission", "databaseRolePermission", "applicationRolePermission", 
			"databaseScopedCredentialPermission", "schemaPermission", "searchPropertyListPermission", 
			"serviceBrokerPermission", "serviceBrokerContractsPermission", "serviceBrokerMessageTypesPermission", 
			"serviceBrokerRemoteServiceBindingsPermission", "serviceBrokerRoutesPermission", 
			"serviceBrokerServicesPermission", "endpointPermission", "certificatePermission", 
			"symmetricKeyPermission", "asymmetricKeyPermission", "assemblyPermission", 
			"availabilityGroupPermission", "fullTextPermission", "fullTextCatalogPermission", 
			"fullTextStoplistPermission", "typePermission", "xmlSchemaCollectionPermission", 
			"systemObjectPermission", "class_", "classItem", "classType", "roleClause", 
			"setUser", "createUser", "createUserLoginClause", "createUserWindowsPrincipalClause", 
			"createUserLoginWindowsPrincipalClause", "createUserWithoutLoginClause", 
			"optionsList", "limitedOptionsList", "createUserFromExternalProviderClause", 
			"createUserWithDefaultSchema", "createUserWithAzureActiveDirectoryPrincipalClause", 
			"windowsPrincipal", "azureActiveDirectoryPrincipal", "userName", "ignoredNameIdentifier", 
			"dropUser", "alterUser", "setItem", "createRole", "dropRole", "alterRole", 
			"createLogin", "createLoginForSQLServerClause", "createLoginForSQLServerOptionList", 
			"createLoginForSQLServerOptionListClause", "hashedPassword", "sid", "sources", 
			"windowsOptions", "createLoginForAzureSQLDatabaseClause", "createLoginForAzureSQLDatabaseOptionList", 
			"createLoginForAzureManagedInstanceClause", "azureManagedInstanceOptionList", 
			"createLoginForAzureSynapseAnalyticsClause", "createLoginForAzureSynapseAnalyticsOptionList", 
			"createLoginForAnalyticsPlatformSystemClause", "createLoginForAnalyticsPlatformSystemOptionList", 
			"createLoginForAnalyticsPlatformSystemOptionListClause", "dropLogin", 
			"alterLogin", "statusOptionClause", "setOptionClause", "passwordOptionClause", 
			"cryptographicCredentialsOptionClause", "revert"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'Default does not match anything'", null, null, "'&&'", "'||'", 
			"'!'", "'~'", "'|'", "'&'", "'<<'", "'>>'", "'^'", "'%'", "':'", "'+'", 
			"'-'", "'*'", "'/'", "'\\'", "'.'", "'.*'", "'<=>'", "'=='", "'='", null, 
			"'>'", "'>='", "'<'", "'<='", "'#'", "'('", "')'", "'{'", "'}'", "'['", 
			"']'", "','", "'\"'", "'''", "'`'", "'?'", "'@'", "';'", "'$'", null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, "'DO NOT MATCH ANY THING, JUST FOR GENERATOR'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, "BLOCK_COMMENT", "INLINE_COMMENT", "AND_", "OR_", "NOT_", 
			"TILDE_", "VERTICAL_BAR_", "AMPERSAND_", "SIGNED_LEFT_SHIFT_", "SIGNED_RIGHT_SHIFT_", 
			"CARET_", "MOD_", "COLON_", "PLUS_", "MINUS_", "ASTERISK_", "SLASH_", 
			"BACKSLASH_", "DOT_", "DOT_ASTERISK_", "SAFE_EQ_", "DEQ_", "EQ_", "NEQ_", 
			"GT_", "GTE_", "LT_", "LTE_", "POUND_", "LP_", "RP_", "LBE_", "RBE_", 
			"LBT_", "RBT_", "COMMA_", "DQ_", "SQ_", "BQ_", "QUESTION_", "AT_", "SEMI_", 
			"DOLLAR_", "WS", "SELECT", "INSERT", "UPDATE", "DELETE", "CREATE", "ALTER", 
			"DROP", "TRUNCATE", "SCHEMA", "GRANT", "REVOKE", "ADD", "SET", "TABLE", 
			"COLUMN", "COLUMNS", "INDEX", "CONSTRAINT", "PRIMARY", "UNIQUE", "FOREIGN", 
			"KEY", "POSITION", "PRECISION", "FUNCTION", "TRIGGER", "PROCEDURE", "PROC", 
			"VIEW", "INTO", "VALUES", "WITH", "UNION", "DISTINCT", "CASE", "WHEN", 
			"CAST", "TRIM", "SUBSTRING", "FROM", "NATURAL", "JOIN", "FULL", "INNER", 
			"OUTER", "LEFT", "RIGHT", "CROSS", "USING", "WHERE", "AS", "ON", "OFF", 
			"IF", "ELSE", "THEN", "FOR", "TO", "AND", "OR", "IS", "NOT", "NULL", 
			"TRUE", "FALSE", "EXISTS", "BETWEEN", "IN", "ALL", "ANY", "LIKE", "ORDER", 
			"GROUP", "BY", "ASC", "DESC", "HAVING", "LIMIT", "OFFSET", "BEGIN", "COMMIT", 
			"ROLLBACK", "SAVEPOINT", "BOOLEAN", "DOUBLE", "CHAR", "CHARACTER", "ARRAY", 
			"INTERVAL", "DATE", "TIME", "TIMESTAMP", "LOCALTIME", "LOCALTIMESTAMP", 
			"YEAR", "QUARTER", "MONTH", "WEEK", "DAY", "HOUR", "MINUTE", "SECOND", 
			"MICROSECOND", "MAX", "MIN", "SUM", "COUNT", "AVG", "DEFAULT", "CURRENT", 
			"ENABLE", "DISABLE", "CALL", "INSTANCE", "PRESERVE", "DO", "DEFINER", 
			"CURRENT_USER", "SQL", "CASCADED", "LOCAL", "CLOSE", "OPEN", "NEXT", 
			"NAME", "COLLATION", "NAMES", "INTEGER", "REAL", "DECIMAL", "TYPE", "BIT", 
			"SMALLINT", "INT", "TINYINT", "NUMERIC", "FLOAT", "BIGINT", "TEXT", "VARCHAR", 
			"PERCENT", "TIES", "EXCEPT", "INTERSECT", "USE", "MERGE", "LOOP", "EXPAND", 
			"VIEWS", "FAST", "FORCE", "KEEP", "PLAN", "OPTIMIZE", "SIMPLE", "FORCED", 
			"HINT", "READ_ONLY", "DATABASE", "DECLARE", "CURSOR", "OF", "RETURNS", 
			"DATEPART", "RETURN", "READONLY", "AT", "PASSWORD", "WITHOUT", "APPLY", 
			"KEEPIDENTITY", "KEEPDEFAULTS", "HOLDLOCK", "IGNORE_CONSTRAINTS", "IGNORE_TRIGGERS", 
			"NOLOCK", "NOWAIT", "PAGLOCK", "READCOMMITTED", "READCOMMITTEDLOCK", 
			"READPAST", "REPEATABLEREAD", "ROWLOCK", "TABLOCK", "TABLOCKX", "UPDLOCK", 
			"XLOCK", "JSON_OBJECT", "JSON_ARRAY", "FIRST_VALUE", "LAST_VALUE", "APPROX_PERCENTILE_CONT", 
			"APPROX_PERCENTILE_DISC", "WITHIN", "OPENDATASOURCE", "MATCHED", "TARGET", 
			"LEADING", "BOTH", "TRAILING", "CONNECTION", "FOR_GENERATOR", "BINARY", 
			"ESCAPE", "HIDDEN_", "MOD", "PARTITION", "PARTITIONS", "TOP", "ROW", 
			"ROWS", "UNKNOWN", "XOR", "ALWAYS", "CASCADE", "CHECK", "GENERATED", 
			"NO", "OPTION", "PRIVILEGES", "REFERENCES", "USER", "ROLE", "START", 
			"TRANSACTION", "ACTION", "ALGORITHM", "AUTO", "BLOCKERS", "CLUSTERED", 
			"NONCLUSTERED", "COLLATE", "COLUMNSTORE", "CONTENT", "CONVERT", "YEARS", 
			"MONTHS", "WEEKS", "DAYS", "MINUTES", "DENY", "DETERMINISTIC", "DISTRIBUTION", 
			"DOCUMENT", "DURABILITY", "ENCRYPTED", "END", "FILESTREAM", "FILETABLE", 
			"FILLFACTOR", "FOLLOWING", "HASH", "HEAP", "IDENTITY", "INBOUND", "OUTBOUND", 
			"UNBOUNDED", "INFINITE", "LOGIN", "MASKED", "MAXDOP", "MOVE", "NOCHECK", 
			"NONE", "OBJECT", "ONLINE", "OVER", "PAGE", "PAUSED", "PERIOD", "PERSISTED", 
			"PRECEDING", "RANDOMIZED", "RANGE", "REBUILD", "REPLICATE", "REPLICATION", 
			"RESUMABLE", "ROWGUIDCOL", "SAVE", "SELF", "SPARSE", "SWITCH", "TRAN", 
			"TRANCOUNT", "ZONE", "EXECUTE", "EXEC", "SESSION", "CONNECT", "CATALOG", 
			"CONTROL", "CONCAT", "TAKE", "OWNERSHIP", "DEFINITION", "APPLICATION", 
			"ASSEMBLY", "SYMMETRIC", "ASYMMETRIC", "SERVER", "RECEIVE", "CHANGE", 
			"TRACE", "TRACKING", "RESOURCES", "SETTINGS", "STATE", "AVAILABILITY", 
			"CREDENTIAL", "ENDPOINT", "EVENT", "NOTIFICATION", "LINKED", "AUDIT", 
			"DDL", "XML", "IMPERSONATE", "SECURABLES", "AUTHENTICATE", "EXTERNAL", 
			"ACCESS", "ADMINISTER", "BULK", "OPERATIONS", "UNSAFE", "SHUTDOWN", "SCOPED", 
			"CONFIGURATION", "DATASPACE", "SERVICE", "CERTIFICATE", "CONTRACT", "ENCRYPTION", 
			"MASTER", "DATA", "SOURCE", "FILE", "FORMAT", "LIBRARY", "FULLTEXT", 
			"MASK", "UNMASK", "MESSAGE", "REMOTE", "BINDING", "ROUTE", "SECURITY", 
			"POLICY", "AGGREGATE", "QUEUE", "RULE", "SYNONYM", "COLLECTION", "SCRIPT", 
			"KILL", "BACKUP", "LOG", "SHOWPLAN", "SUBSCRIBE", "QUERY", "NOTIFICATIONS", 
			"CHECKPOINT", "SEQUENCE", "ABORT_AFTER_WAIT", "ALLOW_PAGE_LOCKS", "ALLOW_ROW_LOCKS", 
			"ALL_SPARSE_COLUMNS", "BUCKET_COUNT", "COLUMNSTORE_ARCHIVE", "COLUMN_ENCRYPTION_KEY", 
			"COLUMN_SET", "COMPRESSION_DELAY", "DATABASE_DEAULT", "DATA_COMPRESSION", 
			"DATA_CONSISTENCY_CHECK", "ENCRYPTION_TYPE", "SYSTEM_TIME", "SYSTEM_VERSIONING", 
			"TEXTIMAGE_ON", "WAIT_AT_LOW_PRIORITY", "STATISTICS_INCREMENTAL", "STATISTICS_NORECOMPUTE", 
			"ROUND_ROBIN", "SCHEMA_AND_DATA", "SCHEMA_ONLY", "SORT_IN_TEMPDB", "IGNORE_DUP_KEY", 
			"IMPLICIT_TRANSACTIONS", "MAX_DURATION", "MEMORY_OPTIMIZED", "MIGRATION_STATE", 
			"PAD_INDEX", "REMOTE_DATA_ARCHIVE", "FILESTREAM_ON", "FILETABLE_COLLATE_FILENAME", 
			"FILETABLE_DIRECTORY", "FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME", "FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME", 
			"FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME", "FILTER_PREDICATE", "HISTORY_RETENTION_PERIOD", 
			"HISTORY_TABLE", "LOCK_ESCALATION", "DROP_EXISTING", "ROW_NUMBER", "FETCH", 
			"FIRST", "ONLY", "MONEY", "SMALLMONEY", "DATETIMEOFFSET", "DATETIME", 
			"DATETIME2", "SMALLDATETIME", "NCHAR", "NVARCHAR", "NTEXT", "VARBINARY", 
			"IMAGE", "SQL_VARIANT", "UNIQUEIDENTIFIER", "HIERARCHYID", "GEOMETRY", 
			"GEOGRAPHY", "OUTPUT", "INSERTED", "DELETED", "ASSUME_JOIN_PREDICATE_DEPENDS_ON_FILTERS", 
			"ASSUME_MIN_SELECTIVITY_FOR_FILTER_ESTIMATES", "DISABLE_BATCH_MODE_ADAPTIVE_JOINS", 
			"DISABLE_BATCH_MODE_MEMORY_GRANT_FEEDBACK", "DISABLE_DEFERRED_COMPILATION_TV", 
			"DISABLE_INTERLEAVED_EXECUTION_TVF", "DISABLE_OPTIMIZED_NESTED_LOOP", 
			"DISABLE_OPTIMIZER_ROWGOAL", "DISABLE_PARAMETER_SNIFFING", "DISABLE_ROW_MODE_MEMORY_GRANT_FEEDBACK", 
			"DISABLE_TSQL_SCALAR_UDF_INLINING", "DISALLOW_BATCH_MODE", "ENABLE_HIST_AMENDMENT_FOR_ASC_KEYS", 
			"ENABLE_QUERY_OPTIMIZER_HOTFIXES", "FORCE_DEFAULT_CARDINALITY_ESTIMATION", 
			"FORCE_LEGACY_CARDINALITY_ESTIMATION", "QUERY_OPTIMIZER_COMPATIBILITY_LEVEL_n", 
			"QUERY_PLAN_PROFILE", "EXTERNALPUSHDOWN", "SCALEOUTEXECUTION", "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX", 
			"KEEPFIXED", "MAX_GRANT_PERCENT", "MIN_GRANT_PERCENT", "MAXRECURSION", 
			"NO_PERFORMANCE_SPOOL", "PARAMETERIZATION", "QUERYTRACEON", "RECOMPILE", 
			"ROBUST", "OPTIMIZE_FOR_SEQUENTIAL_KEY", "DATA_DELETION", "FILTER_COLUMN", 
			"RETENTION_PERIOD", "CONTAINMENT", "PARTIAL", "FILENAME", "SIZE", "MAXSIZE", 
			"FILEGROWTH", "UNLIMITED", "KB", "MB", "GB", "TB", "CONTAINS", "MEMORY_OPTIMIZED_DATA", 
			"FILEGROUP", "NON_TRANSACTED_ACCESS", "DB_CHAINING", "TRUSTWORTHY", "FORWARD_ONLY", 
			"SCROLL", "STATIC", "KEYSET", "DYNAMIC", "FAST_FORWARD", "SCROLL_LOCKS", 
			"OPTIMISTIC", "TYPE_WARNING", "SCHEMABINDING", "CALLER", "INPUT", "CALLED", 
			"VARYING", "OUT", "OWNER", "ATOMIC", "LANGUAGE", "LEVEL", "ISOLATION", 
			"SNAPSHOT", "REPEATABLE", "READ", "SERIALIZABLE", "NATIVE_COMPILATION", 
			"VIEW_METADATA", "AFTER", "INSTEAD", "APPEND", "INCREMENT", "CYCLE", 
			"CACHE", "MINVALUE", "MAXVALUE", "RESTART", "LOB_COMPACTION", "COMPRESS_ALL_ROW_GROUPS", 
			"REORGANIZE", "RESUME", "PAUSE", "ABORT", "INCLUDE", "DISTRIBUTED", "MARK", 
			"WORK", "REMOVE", "AUTOGROW_SINGLE_FILE", "AUTOGROW_ALL_FILES", "READWRITE", 
			"READ_WRITE", "MODIFY", "ACCELERATED_DATABASE_RECOVERY", "PERSISTENT_VERSION_STORE_FILEGROUP", 
			"IMMEDIATE", "NO_WAIT", "TARGET_RECOVERY_TIME", "SECONDS", "HONOR_BROKER_PRIORITY", 
			"ERROR_BROKER_CONVERSATIONS", "NEW_BROKER", "DISABLE_BROKER", "ENABLE_BROKER", 
			"MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT", "READ_COMMITTED_SNAPSHOT", "ALLOW_SNAPSHOT_ISOLATION", 
			"RECURSIVE_TRIGGERS", "QUOTED_IDENTIFIER", "NUMERIC_ROUNDABORT", "CONCAT_NULL_YIELDS_NULL", 
			"COMPATIBILITY_LEVEL", "ARITHABORT", "ANSI_WARNINGS", "ANSI_PADDING", 
			"ANSI_NULLS", "ANSI_NULL_DEFAULT", "PAGE_VERIFY", "CHECKSUM", "TORN_PAGE_DETECTION", 
			"BULK_LOGGED", "RECOVERY", "TOTAL_EXECUTION_CPU_TIME_MS", "TOTAL_COMPILE_CPU_TIME_MS", 
			"STALE_CAPTURE_POLICY_THRESHOLD", "EXECUTION_COUNT", "QUERY_CAPTURE_POLICY", 
			"WAIT_STATS_CAPTURE_MODE", "MAX_PLANS_PER_QUERY", "QUERY_CAPTURE_MODE", 
			"SIZE_BASED_CLEANUP_MODE", "INTERVAL_LENGTH_MINUTES", "MAX_STORAGE_SIZE_MB", 
			"DATA_FLUSH_INTERVAL_SECONDS", "CLEANUP_POLICY", "CUSTOM", "STALE_QUERY_THRESHOLD_DAYS", 
			"OPERATION_MODE", "QUERY_STORE", "CURSOR_DEFAULT", "GLOBAL", "CURSOR_CLOSE_ON_COMMIT", 
			"HOURS", "CHANGE_RETENTION", "AUTO_CLEANUP", "CHANGE_TRACKING", "AUTOMATIC_TUNING", 
			"FORCE_LAST_GOOD_PLAN", "AUTO_UPDATE_STATISTICS_ASYNC", "AUTO_UPDATE_STATISTICS", 
			"AUTO_SHRINK", "AUTO_CREATE_STATISTICS", "INCREMENTAL", "AUTO_CLOSE", 
			"DATA_RETENTION", "TEMPORAL_HISTORY_RETENTION", "EDITION", "MIXED_PAGE_ALLOCATION", 
			"DISABLED", "ALLOWED", "HADR", "MULTI_USER", "RESTRICTED_USER", "SINGLE_USER", 
			"OFFLINE", "EMERGENCY", "SUSPEND", "DATE_CORRELATION_OPTIMIZATION", "ELASTIC_POOL", 
			"SERVICE_OBJECTIVE", "DATABASE_NAME", "ALLOW_CONNECTIONS", "GEO", "NAMED", 
			"DATEFIRST", "BACKUP_STORAGE_REDUNDANCY", "FORCE_FAILOVER_ALLOW_DATA_LOSS", 
			"SECONDARY", "FAILOVER", "DEFAULT_FULLTEXT_LANGUAGE", "DEFAULT_LANGUAGE", 
			"INLINE", "NESTED_TRIGGERS", "TRANSFORM_NOISE_WORDS", "TWO_DIGIT_YEAR_CUTOFF", 
			"PERSISTENT_LOG_BUFFER", "DIRECTORY_NAME", "DATEFORMAT", "DELAYED_DURABILITY", 
			"AUTHORIZATION", "TRANSFER", "EXPLAIN", "WITH_RECOMMENDATIONS", "BATCH_SIZE", 
			"SETUSER", "NORESET", "DEFAULT_SCHEMA", "ALLOW_ENCRYPTED_VALUE_MODIFICATIONS", 
			"OLD_PASSWORD", "PROVIDER", "SID", "UNCOMMITTED", "COMMITTED", "STOPLIST", 
			"SEARCH", "PROPERTY", "LIST", "SEND", "MEMBER", "HASHED", "MUST_CHANGE", 
			"DEFAULT_DATABASE", "CHECK_EXPIRATION", "CHECK_POLICY", "WINDOWS", "UNLOCK", 
			"REVERT", "COOKIE", "BROWSE", "RAW", "XMLDATA", "XMLSCHEMA", "ELEMENTS", 
			"XSINIL", "ABSENT", "EXPLICIT", "PATH", "BASE64", "ROOT", "JSON", "INCLUDE_NULL_VALUES", 
			"WITHOUT_ARRAY_WRAPPER", "XMLNAMESPACES", "STATISTICS", "FULLSCAN", "SAMPLE", 
			"RESAMPLE", "NORECOMPUTE", "AUTO_DROP", "PERSIST_SAMPLE_PERCENT", "OPENJSON", 
			"OPENROWSET", "TRY_CAST", "TRY_CONVERT", "OPENQUERY", "MATCH", "LAST_NODE", 
			"SHORTEST_PATH", "STRING_AGG", "GRAPH", "IDENTIFIER_", "DELIMITED_IDENTIFIER_", 
			"STRING_", "NUMBER_", "INT_NUM_", "FLOAT_NUM_", "DECIMAL_NUM_", "HEX_DIGIT_", 
			"BIT_NUM_", "NCHAR_TEXT", "RESPECT", "IGNORE", "NULLS"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "SQLServerStatement.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public SQLServerStatementParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExecuteContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(SQLServerStatementParser.EOF, 0); }
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public InsertContext insert() {
			return getRuleContext(InsertContext.class,0);
		}
		public UpdateContext update() {
			return getRuleContext(UpdateContext.class,0);
		}
		public DeleteContext delete() {
			return getRuleContext(DeleteContext.class,0);
		}
		public CreateIndexContext createIndex() {
			return getRuleContext(CreateIndexContext.class,0);
		}
		public AlterIndexContext alterIndex() {
			return getRuleContext(AlterIndexContext.class,0);
		}
		public DropIndexContext dropIndex() {
			return getRuleContext(DropIndexContext.class,0);
		}
		public CreateTableContext createTable() {
			return getRuleContext(CreateTableContext.class,0);
		}
		public CreateDatabaseContext createDatabase() {
			return getRuleContext(CreateDatabaseContext.class,0);
		}
		public CreateProcedureContext createProcedure() {
			return getRuleContext(CreateProcedureContext.class,0);
		}
		public CreateViewContext createView() {
			return getRuleContext(CreateViewContext.class,0);
		}
		public CreateTriggerContext createTrigger() {
			return getRuleContext(CreateTriggerContext.class,0);
		}
		public CreateSequenceContext createSequence() {
			return getRuleContext(CreateSequenceContext.class,0);
		}
		public CreateServiceContext createService() {
			return getRuleContext(CreateServiceContext.class,0);
		}
		public CreateSchemaContext createSchema() {
			return getRuleContext(CreateSchemaContext.class,0);
		}
		public AlterTableContext alterTable() {
			return getRuleContext(AlterTableContext.class,0);
		}
		public AlterTriggerContext alterTrigger() {
			return getRuleContext(AlterTriggerContext.class,0);
		}
		public AlterSequenceContext alterSequence() {
			return getRuleContext(AlterSequenceContext.class,0);
		}
		public AlterDatabaseContext alterDatabase() {
			return getRuleContext(AlterDatabaseContext.class,0);
		}
		public AlterServiceContext alterService() {
			return getRuleContext(AlterServiceContext.class,0);
		}
		public AlterSchemaContext alterSchema() {
			return getRuleContext(AlterSchemaContext.class,0);
		}
		public AlterViewContext alterView() {
			return getRuleContext(AlterViewContext.class,0);
		}
		public DropTableContext dropTable() {
			return getRuleContext(DropTableContext.class,0);
		}
		public DropDatabaseContext dropDatabase() {
			return getRuleContext(DropDatabaseContext.class,0);
		}
		public DropFunctionContext dropFunction() {
			return getRuleContext(DropFunctionContext.class,0);
		}
		public DropProcedureContext dropProcedure() {
			return getRuleContext(DropProcedureContext.class,0);
		}
		public DropViewContext dropView() {
			return getRuleContext(DropViewContext.class,0);
		}
		public DropTriggerContext dropTrigger() {
			return getRuleContext(DropTriggerContext.class,0);
		}
		public DropSequenceContext dropSequence() {
			return getRuleContext(DropSequenceContext.class,0);
		}
		public DropServiceContext dropService() {
			return getRuleContext(DropServiceContext.class,0);
		}
		public DropSchemaContext dropSchema() {
			return getRuleContext(DropSchemaContext.class,0);
		}
		public TruncateTableContext truncateTable() {
			return getRuleContext(TruncateTableContext.class,0);
		}
		public CreateFunctionContext createFunction() {
			return getRuleContext(CreateFunctionContext.class,0);
		}
		public SetTransactionContext setTransaction() {
			return getRuleContext(SetTransactionContext.class,0);
		}
		public BeginTransactionContext beginTransaction() {
			return getRuleContext(BeginTransactionContext.class,0);
		}
		public BeginDistributedTransactionContext beginDistributedTransaction() {
			return getRuleContext(BeginDistributedTransactionContext.class,0);
		}
		public SetImplicitTransactionsContext setImplicitTransactions() {
			return getRuleContext(SetImplicitTransactionsContext.class,0);
		}
		public CommitContext commit() {
			return getRuleContext(CommitContext.class,0);
		}
		public CommitWorkContext commitWork() {
			return getRuleContext(CommitWorkContext.class,0);
		}
		public RollbackContext rollback() {
			return getRuleContext(RollbackContext.class,0);
		}
		public RollbackWorkContext rollbackWork() {
			return getRuleContext(RollbackWorkContext.class,0);
		}
		public SavepointContext savepoint() {
			return getRuleContext(SavepointContext.class,0);
		}
		public GrantContext grant() {
			return getRuleContext(GrantContext.class,0);
		}
		public RevokeContext revoke() {
			return getRuleContext(RevokeContext.class,0);
		}
		public DenyContext deny() {
			return getRuleContext(DenyContext.class,0);
		}
		public CreateUserContext createUser() {
			return getRuleContext(CreateUserContext.class,0);
		}
		public DropUserContext dropUser() {
			return getRuleContext(DropUserContext.class,0);
		}
		public AlterUserContext alterUser() {
			return getRuleContext(AlterUserContext.class,0);
		}
		public CreateRoleContext createRole() {
			return getRuleContext(CreateRoleContext.class,0);
		}
		public DropRoleContext dropRole() {
			return getRuleContext(DropRoleContext.class,0);
		}
		public AlterRoleContext alterRole() {
			return getRuleContext(AlterRoleContext.class,0);
		}
		public CreateLoginContext createLogin() {
			return getRuleContext(CreateLoginContext.class,0);
		}
		public DropLoginContext dropLogin() {
			return getRuleContext(DropLoginContext.class,0);
		}
		public AlterLoginContext alterLogin() {
			return getRuleContext(AlterLoginContext.class,0);
		}
		public CallContext call() {
			return getRuleContext(CallContext.class,0);
		}
		public ExplainContext explain() {
			return getRuleContext(ExplainContext.class,0);
		}
		public SetUserContext setUser() {
			return getRuleContext(SetUserContext.class,0);
		}
		public RevertContext revert() {
			return getRuleContext(RevertContext.class,0);
		}
		public UpdateStatisticsContext updateStatistics() {
			return getRuleContext(UpdateStatisticsContext.class,0);
		}
		public MergeContext merge() {
			return getRuleContext(MergeContext.class,0);
		}
		public TerminalNode SEMI_() { return getToken(SQLServerStatementParser.SEMI_, 0); }
		public ExecuteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterExecute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitExecute(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitExecute(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteContext execute() throws RecognitionException {
		ExecuteContext _localctx = new ExecuteContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_execute);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1134);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				setState(1074);
				select();
				}
				break;
			case 2:
				{
				setState(1075);
				insert();
				}
				break;
			case 3:
				{
				setState(1076);
				update();
				}
				break;
			case 4:
				{
				setState(1077);
				delete();
				}
				break;
			case 5:
				{
				setState(1078);
				createIndex();
				}
				break;
			case 6:
				{
				setState(1079);
				alterIndex();
				}
				break;
			case 7:
				{
				setState(1080);
				dropIndex();
				}
				break;
			case 8:
				{
				setState(1081);
				createTable();
				}
				break;
			case 9:
				{
				setState(1082);
				createDatabase();
				}
				break;
			case 10:
				{
				setState(1083);
				createProcedure();
				}
				break;
			case 11:
				{
				setState(1084);
				createView();
				}
				break;
			case 12:
				{
				setState(1085);
				createTrigger();
				}
				break;
			case 13:
				{
				setState(1086);
				createSequence();
				}
				break;
			case 14:
				{
				setState(1087);
				createService();
				}
				break;
			case 15:
				{
				setState(1088);
				createSchema();
				}
				break;
			case 16:
				{
				setState(1089);
				alterTable();
				}
				break;
			case 17:
				{
				setState(1090);
				alterTrigger();
				}
				break;
			case 18:
				{
				setState(1091);
				alterSequence();
				}
				break;
			case 19:
				{
				setState(1092);
				alterDatabase();
				}
				break;
			case 20:
				{
				setState(1093);
				alterService();
				}
				break;
			case 21:
				{
				setState(1094);
				alterSchema();
				}
				break;
			case 22:
				{
				setState(1095);
				alterView();
				}
				break;
			case 23:
				{
				setState(1096);
				dropTable();
				}
				break;
			case 24:
				{
				setState(1097);
				dropDatabase();
				}
				break;
			case 25:
				{
				setState(1098);
				dropFunction();
				}
				break;
			case 26:
				{
				setState(1099);
				dropProcedure();
				}
				break;
			case 27:
				{
				setState(1100);
				dropView();
				}
				break;
			case 28:
				{
				setState(1101);
				dropTrigger();
				}
				break;
			case 29:
				{
				setState(1102);
				dropSequence();
				}
				break;
			case 30:
				{
				setState(1103);
				dropService();
				}
				break;
			case 31:
				{
				setState(1104);
				dropSchema();
				}
				break;
			case 32:
				{
				setState(1105);
				truncateTable();
				}
				break;
			case 33:
				{
				setState(1106);
				createFunction();
				}
				break;
			case 34:
				{
				setState(1107);
				setTransaction();
				}
				break;
			case 35:
				{
				setState(1108);
				beginTransaction();
				}
				break;
			case 36:
				{
				setState(1109);
				beginDistributedTransaction();
				}
				break;
			case 37:
				{
				setState(1110);
				setImplicitTransactions();
				}
				break;
			case 38:
				{
				setState(1111);
				commit();
				}
				break;
			case 39:
				{
				setState(1112);
				commitWork();
				}
				break;
			case 40:
				{
				setState(1113);
				rollback();
				}
				break;
			case 41:
				{
				setState(1114);
				rollbackWork();
				}
				break;
			case 42:
				{
				setState(1115);
				savepoint();
				}
				break;
			case 43:
				{
				setState(1116);
				grant();
				}
				break;
			case 44:
				{
				setState(1117);
				revoke();
				}
				break;
			case 45:
				{
				setState(1118);
				deny();
				}
				break;
			case 46:
				{
				setState(1119);
				createUser();
				}
				break;
			case 47:
				{
				setState(1120);
				dropUser();
				}
				break;
			case 48:
				{
				setState(1121);
				alterUser();
				}
				break;
			case 49:
				{
				setState(1122);
				createRole();
				}
				break;
			case 50:
				{
				setState(1123);
				dropRole();
				}
				break;
			case 51:
				{
				setState(1124);
				alterRole();
				}
				break;
			case 52:
				{
				setState(1125);
				createLogin();
				}
				break;
			case 53:
				{
				setState(1126);
				dropLogin();
				}
				break;
			case 54:
				{
				setState(1127);
				alterLogin();
				}
				break;
			case 55:
				{
				setState(1128);
				call();
				}
				break;
			case 56:
				{
				setState(1129);
				explain();
				}
				break;
			case 57:
				{
				setState(1130);
				setUser();
				}
				break;
			case 58:
				{
				setState(1131);
				revert();
				}
				break;
			case 59:
				{
				setState(1132);
				updateStatistics();
				}
				break;
			case 60:
				{
				setState(1133);
				merge();
				}
				break;
			}
			setState(1137);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMI_) {
				{
				setState(1136);
				match(SEMI_);
				}
			}

			setState(1139);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetTransactionContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SQLServerStatementParser.SET, 0); }
		public TerminalNode TRANSACTION() { return getToken(SQLServerStatementParser.TRANSACTION, 0); }
		public TerminalNode ISOLATION() { return getToken(SQLServerStatementParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(SQLServerStatementParser.LEVEL, 0); }
		public IsolationLevelContext isolationLevel() {
			return getRuleContext(IsolationLevelContext.class,0);
		}
		public SetTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setTransaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSetTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSetTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSetTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetTransactionContext setTransaction() throws RecognitionException {
		SetTransactionContext _localctx = new SetTransactionContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_setTransaction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1141);
			match(SET);
			setState(1142);
			match(TRANSACTION);
			setState(1143);
			match(ISOLATION);
			setState(1144);
			match(LEVEL);
			setState(1145);
			isolationLevel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IsolationLevelContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(SQLServerStatementParser.READ, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(SQLServerStatementParser.UNCOMMITTED, 0); }
		public TerminalNode COMMITTED() { return getToken(SQLServerStatementParser.COMMITTED, 0); }
		public TerminalNode REPEATABLE() { return getToken(SQLServerStatementParser.REPEATABLE, 0); }
		public TerminalNode SNAPSHOT() { return getToken(SQLServerStatementParser.SNAPSHOT, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(SQLServerStatementParser.SERIALIZABLE, 0); }
		public IsolationLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isolationLevel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterIsolationLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitIsolationLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitIsolationLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IsolationLevelContext isolationLevel() throws RecognitionException {
		IsolationLevelContext _localctx = new IsolationLevelContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_isolationLevel);
		try {
			setState(1155);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1147);
				match(READ);
				setState(1148);
				match(UNCOMMITTED);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1149);
				match(READ);
				setState(1150);
				match(COMMITTED);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1151);
				match(REPEATABLE);
				setState(1152);
				match(READ);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1153);
				match(SNAPSHOT);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1154);
				match(SERIALIZABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetImplicitTransactionsContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SQLServerStatementParser.SET, 0); }
		public TerminalNode IMPLICIT_TRANSACTIONS() { return getToken(SQLServerStatementParser.IMPLICIT_TRANSACTIONS, 0); }
		public ImplicitTransactionsValueContext implicitTransactionsValue() {
			return getRuleContext(ImplicitTransactionsValueContext.class,0);
		}
		public SetImplicitTransactionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setImplicitTransactions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSetImplicitTransactions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSetImplicitTransactions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSetImplicitTransactions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetImplicitTransactionsContext setImplicitTransactions() throws RecognitionException {
		SetImplicitTransactionsContext _localctx = new SetImplicitTransactionsContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_setImplicitTransactions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1157);
			match(SET);
			setState(1158);
			match(IMPLICIT_TRANSACTIONS);
			setState(1159);
			implicitTransactionsValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ImplicitTransactionsValueContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode OFF() { return getToken(SQLServerStatementParser.OFF, 0); }
		public ImplicitTransactionsValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implicitTransactionsValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterImplicitTransactionsValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitImplicitTransactionsValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitImplicitTransactionsValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ImplicitTransactionsValueContext implicitTransactionsValue() throws RecognitionException {
		ImplicitTransactionsValueContext _localctx = new ImplicitTransactionsValueContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_implicitTransactionsValue);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1161);
			_la = _input.LA(1);
			if ( !(_la==ON || _la==OFF) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BeginTransactionContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(SQLServerStatementParser.BEGIN, 0); }
		public TerminalNode TRAN() { return getToken(SQLServerStatementParser.TRAN, 0); }
		public TerminalNode TRANSACTION() { return getToken(SQLServerStatementParser.TRANSACTION, 0); }
		public TransactionNameContext transactionName() {
			return getRuleContext(TransactionNameContext.class,0);
		}
		public TransactionVariableNameContext transactionVariableName() {
			return getRuleContext(TransactionVariableNameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public TerminalNode MARK() { return getToken(SQLServerStatementParser.MARK, 0); }
		public StringLiteralsContext stringLiterals() {
			return getRuleContext(StringLiteralsContext.class,0);
		}
		public TerminalNode NCHAR_TEXT() { return getToken(SQLServerStatementParser.NCHAR_TEXT, 0); }
		public BeginTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginTransaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterBeginTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitBeginTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitBeginTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BeginTransactionContext beginTransaction() throws RecognitionException {
		BeginTransactionContext _localctx = new BeginTransactionContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_beginTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1163);
			match(BEGIN);
			setState(1164);
			_la = _input.LA(1);
			if ( !(_la==TRANSACTION || _la==TRAN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1177);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 53)) & ~0x3f) == 0 && ((1L << (_la - 53)) & 35737886458179L) != 0) || ((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & 331536634476137569L) != 0) || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & 288230376740488193L) != 0) || ((((_la - 248)) & ~0x3f) == 0 && ((1L << (_la - 248)) & -2308112406049976835L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -33030145L) != 0) || ((((_la - 376)) & ~0x3f) == 0 && ((1L << (_la - 376)) & -1L) != 0) || ((((_la - 440)) & ~0x3f) == 0 && ((1L << (_la - 440)) & 15032922111L) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & 72020040051130367L) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & -1L) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & 2405748621443071L) != 0) || ((((_la - 712)) & ~0x3f) == 0 && ((1L << (_la - 712)) & 6324225L) != 0)) {
				{
				setState(1167);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
				case 1:
					{
					setState(1165);
					transactionName();
					}
					break;
				case 2:
					{
					setState(1166);
					transactionVariableName();
					}
					break;
				}
				setState(1175);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1169);
					match(WITH);
					setState(1170);
					match(MARK);
					setState(1173);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
					case 1:
						{
						setState(1171);
						stringLiterals();
						}
						break;
					case 2:
						{
						setState(1172);
						match(NCHAR_TEXT);
						}
						break;
					}
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BeginDistributedTransactionContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(SQLServerStatementParser.BEGIN, 0); }
		public TerminalNode DISTRIBUTED() { return getToken(SQLServerStatementParser.DISTRIBUTED, 0); }
		public TerminalNode TRAN() { return getToken(SQLServerStatementParser.TRAN, 0); }
		public TerminalNode TRANSACTION() { return getToken(SQLServerStatementParser.TRANSACTION, 0); }
		public TransactionNameContext transactionName() {
			return getRuleContext(TransactionNameContext.class,0);
		}
		public TransactionVariableNameContext transactionVariableName() {
			return getRuleContext(TransactionVariableNameContext.class,0);
		}
		public BeginDistributedTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginDistributedTransaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterBeginDistributedTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitBeginDistributedTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitBeginDistributedTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BeginDistributedTransactionContext beginDistributedTransaction() throws RecognitionException {
		BeginDistributedTransactionContext _localctx = new BeginDistributedTransactionContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_beginDistributedTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1179);
			match(BEGIN);
			setState(1180);
			match(DISTRIBUTED);
			setState(1181);
			_la = _input.LA(1);
			if ( !(_la==TRANSACTION || _la==TRAN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1184);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				setState(1182);
				transactionName();
				}
				break;
			case 2:
				{
				setState(1183);
				transactionVariableName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CommitContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(SQLServerStatementParser.COMMIT, 0); }
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public TerminalNode DELAYED_DURABILITY() { return getToken(SQLServerStatementParser.DELAYED_DURABILITY, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public TerminalNode TRAN() { return getToken(SQLServerStatementParser.TRAN, 0); }
		public TerminalNode TRANSACTION() { return getToken(SQLServerStatementParser.TRANSACTION, 0); }
		public TerminalNode OFF() { return getToken(SQLServerStatementParser.OFF, 0); }
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TransactionNameContext transactionName() {
			return getRuleContext(TransactionNameContext.class,0);
		}
		public TransactionVariableNameContext transactionVariableName() {
			return getRuleContext(TransactionVariableNameContext.class,0);
		}
		public CommitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCommit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCommit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCommit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommitContext commit() throws RecognitionException {
		CommitContext _localctx = new CommitContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_commit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1186);
			match(COMMIT);
			setState(1192);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TRANSACTION || _la==TRAN) {
				{
				setState(1187);
				_la = _input.LA(1);
				if ( !(_la==TRANSACTION || _la==TRAN) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1190);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,8,_ctx) ) {
				case 1:
					{
					setState(1188);
					transactionName();
					}
					break;
				case 2:
					{
					setState(1189);
					transactionVariableName();
					}
					break;
				}
				}
			}

			setState(1200);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1194);
				match(WITH);
				setState(1195);
				match(LP_);
				setState(1196);
				match(DELAYED_DURABILITY);
				setState(1197);
				match(EQ_);
				setState(1198);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1199);
				match(RP_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CommitWorkContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(SQLServerStatementParser.COMMIT, 0); }
		public TerminalNode WORK() { return getToken(SQLServerStatementParser.WORK, 0); }
		public CommitWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commitWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCommitWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCommitWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCommitWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommitWorkContext commitWork() throws RecognitionException {
		CommitWorkContext _localctx = new CommitWorkContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_commitWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1202);
			match(COMMIT);
			setState(1204);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(1203);
				match(WORK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RollbackContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(SQLServerStatementParser.ROLLBACK, 0); }
		public TerminalNode TRAN() { return getToken(SQLServerStatementParser.TRAN, 0); }
		public TerminalNode TRANSACTION() { return getToken(SQLServerStatementParser.TRANSACTION, 0); }
		public TransactionNameContext transactionName() {
			return getRuleContext(TransactionNameContext.class,0);
		}
		public TransactionVariableNameContext transactionVariableName() {
			return getRuleContext(TransactionVariableNameContext.class,0);
		}
		public SavepointNameContext savepointName() {
			return getRuleContext(SavepointNameContext.class,0);
		}
		public SavepointVariableNameContext savepointVariableName() {
			return getRuleContext(SavepointVariableNameContext.class,0);
		}
		public RollbackContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterRollback(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitRollback(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitRollback(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollbackContext rollback() throws RecognitionException {
		RollbackContext _localctx = new RollbackContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_rollback);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1206);
			match(ROLLBACK);
			setState(1207);
			_la = _input.LA(1);
			if ( !(_la==TRANSACTION || _la==TRAN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1212);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
			case 1:
				{
				setState(1208);
				transactionName();
				}
				break;
			case 2:
				{
				setState(1209);
				transactionVariableName();
				}
				break;
			case 3:
				{
				setState(1210);
				savepointName();
				}
				break;
			case 4:
				{
				setState(1211);
				savepointVariableName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RollbackWorkContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(SQLServerStatementParser.ROLLBACK, 0); }
		public TerminalNode WORK() { return getToken(SQLServerStatementParser.WORK, 0); }
		public RollbackWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollbackWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterRollbackWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitRollbackWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitRollbackWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollbackWorkContext rollbackWork() throws RecognitionException {
		RollbackWorkContext _localctx = new RollbackWorkContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_rollbackWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1214);
			match(ROLLBACK);
			setState(1216);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(1215);
				match(WORK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SavepointContext extends ParserRuleContext {
		public TerminalNode SAVE() { return getToken(SQLServerStatementParser.SAVE, 0); }
		public TerminalNode TRAN() { return getToken(SQLServerStatementParser.TRAN, 0); }
		public TerminalNode TRANSACTION() { return getToken(SQLServerStatementParser.TRANSACTION, 0); }
		public SavepointNameContext savepointName() {
			return getRuleContext(SavepointNameContext.class,0);
		}
		public SavepointVariableNameContext savepointVariableName() {
			return getRuleContext(SavepointVariableNameContext.class,0);
		}
		public SavepointContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSavepoint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSavepoint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSavepoint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SavepointContext savepoint() throws RecognitionException {
		SavepointContext _localctx = new SavepointContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_savepoint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1218);
			match(SAVE);
			setState(1219);
			_la = _input.LA(1);
			if ( !(_la==TRANSACTION || _la==TRAN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1222);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {
			case 1:
				{
				setState(1220);
				savepointName();
				}
				break;
			case 2:
				{
				setState(1221);
				savepointVariableName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ParameterMarkerContext extends ParserRuleContext {
		public TerminalNode QUESTION_() { return getToken(SQLServerStatementParser.QUESTION_, 0); }
		public ParameterMarkerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterMarker; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterParameterMarker(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitParameterMarker(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitParameterMarker(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterMarkerContext parameterMarker() throws RecognitionException {
		ParameterMarkerContext _localctx = new ParameterMarkerContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_parameterMarker);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1224);
			match(QUESTION_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LiteralsContext extends ParserRuleContext {
		public StringLiteralsContext stringLiterals() {
			return getRuleContext(StringLiteralsContext.class,0);
		}
		public NumberLiteralsContext numberLiterals() {
			return getRuleContext(NumberLiteralsContext.class,0);
		}
		public DateTimeLiteralsContext dateTimeLiterals() {
			return getRuleContext(DateTimeLiteralsContext.class,0);
		}
		public HexadecimalLiteralsContext hexadecimalLiterals() {
			return getRuleContext(HexadecimalLiteralsContext.class,0);
		}
		public BitValueLiteralsContext bitValueLiterals() {
			return getRuleContext(BitValueLiteralsContext.class,0);
		}
		public BooleanLiteralsContext booleanLiterals() {
			return getRuleContext(BooleanLiteralsContext.class,0);
		}
		public NullValueLiteralsContext nullValueLiterals() {
			return getRuleContext(NullValueLiteralsContext.class,0);
		}
		public LiteralsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literals; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterLiterals(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitLiterals(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitLiterals(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LiteralsContext literals() throws RecognitionException {
		LiteralsContext _localctx = new LiteralsContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_literals);
		try {
			setState(1233);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_:
			case NCHAR_TEXT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1226);
				stringLiterals();
				}
				break;
			case PLUS_:
			case MINUS_:
			case NUMBER_:
				enterOuterAlt(_localctx, 2);
				{
				setState(1227);
				numberLiterals();
				}
				break;
			case LBE_:
			case DATE:
			case TIME:
			case TIMESTAMP:
				enterOuterAlt(_localctx, 3);
				{
				setState(1228);
				dateTimeLiterals();
				}
				break;
			case HEX_DIGIT_:
				enterOuterAlt(_localctx, 4);
				{
				setState(1229);
				hexadecimalLiterals();
				}
				break;
			case BIT_NUM_:
				enterOuterAlt(_localctx, 5);
				{
				setState(1230);
				bitValueLiterals();
				}
				break;
			case TRUE:
			case FALSE:
				enterOuterAlt(_localctx, 6);
				{
				setState(1231);
				booleanLiterals();
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 7);
				{
				setState(1232);
				nullValueLiterals();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StringLiteralsContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(SQLServerStatementParser.STRING_, 0); }
		public TerminalNode NCHAR_TEXT() { return getToken(SQLServerStatementParser.NCHAR_TEXT, 0); }
		public StringLiteralsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringLiterals; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterStringLiterals(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitStringLiterals(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitStringLiterals(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringLiteralsContext stringLiterals() throws RecognitionException {
		StringLiteralsContext _localctx = new StringLiteralsContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_stringLiterals);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1235);
			_la = _input.LA(1);
			if ( !(_la==STRING_ || _la==NCHAR_TEXT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NumberLiteralsContext extends ParserRuleContext {
		public TerminalNode NUMBER_() { return getToken(SQLServerStatementParser.NUMBER_, 0); }
		public TerminalNode PLUS_() { return getToken(SQLServerStatementParser.PLUS_, 0); }
		public TerminalNode MINUS_() { return getToken(SQLServerStatementParser.MINUS_, 0); }
		public NumberLiteralsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numberLiterals; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterNumberLiterals(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitNumberLiterals(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitNumberLiterals(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumberLiteralsContext numberLiterals() throws RecognitionException {
		NumberLiteralsContext _localctx = new NumberLiteralsContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_numberLiterals);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1238);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PLUS_ || _la==MINUS_) {
				{
				setState(1237);
				_la = _input.LA(1);
				if ( !(_la==PLUS_ || _la==MINUS_) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1240);
			match(NUMBER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DateTimeLiteralsContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(SQLServerStatementParser.STRING_, 0); }
		public TerminalNode DATE() { return getToken(SQLServerStatementParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(SQLServerStatementParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(SQLServerStatementParser.TIMESTAMP, 0); }
		public TerminalNode LBE_() { return getToken(SQLServerStatementParser.LBE_, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode RBE_() { return getToken(SQLServerStatementParser.RBE_, 0); }
		public DateTimeLiteralsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dateTimeLiterals; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDateTimeLiterals(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDateTimeLiterals(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDateTimeLiterals(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DateTimeLiteralsContext dateTimeLiterals() throws RecognitionException {
		DateTimeLiteralsContext _localctx = new DateTimeLiteralsContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_dateTimeLiterals);
		int _la;
		try {
			setState(1249);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATE:
			case TIME:
			case TIMESTAMP:
				enterOuterAlt(_localctx, 1);
				{
				setState(1242);
				_la = _input.LA(1);
				if ( !(((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & 7L) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1243);
				match(STRING_);
				}
				break;
			case LBE_:
				enterOuterAlt(_localctx, 2);
				{
				setState(1244);
				match(LBE_);
				setState(1245);
				identifier();
				setState(1246);
				match(STRING_);
				setState(1247);
				match(RBE_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HexadecimalLiteralsContext extends ParserRuleContext {
		public TerminalNode HEX_DIGIT_() { return getToken(SQLServerStatementParser.HEX_DIGIT_, 0); }
		public HexadecimalLiteralsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hexadecimalLiterals; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterHexadecimalLiterals(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitHexadecimalLiterals(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitHexadecimalLiterals(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HexadecimalLiteralsContext hexadecimalLiterals() throws RecognitionException {
		HexadecimalLiteralsContext _localctx = new HexadecimalLiteralsContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_hexadecimalLiterals);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1251);
			match(HEX_DIGIT_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BitValueLiteralsContext extends ParserRuleContext {
		public TerminalNode BIT_NUM_() { return getToken(SQLServerStatementParser.BIT_NUM_, 0); }
		public BitValueLiteralsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitValueLiterals; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterBitValueLiterals(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitBitValueLiterals(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitBitValueLiterals(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitValueLiteralsContext bitValueLiterals() throws RecognitionException {
		BitValueLiteralsContext _localctx = new BitValueLiteralsContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_bitValueLiterals);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1253);
			match(BIT_NUM_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BooleanLiteralsContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(SQLServerStatementParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(SQLServerStatementParser.FALSE, 0); }
		public BooleanLiteralsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanLiterals; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterBooleanLiterals(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitBooleanLiterals(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitBooleanLiterals(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanLiteralsContext booleanLiterals() throws RecognitionException {
		BooleanLiteralsContext _localctx = new BooleanLiteralsContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_booleanLiterals);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1255);
			_la = _input.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NullValueLiteralsContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(SQLServerStatementParser.NULL, 0); }
		public NullValueLiteralsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullValueLiterals; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterNullValueLiterals(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitNullValueLiterals(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitNullValueLiterals(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullValueLiteralsContext nullValueLiterals() throws RecognitionException {
		NullValueLiteralsContext _localctx = new NullValueLiteralsContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_nullValueLiterals);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1257);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentifierContext extends ParserRuleContext {
		public RegularIdentifierContext regularIdentifier() {
			return getRuleContext(RegularIdentifierContext.class,0);
		}
		public DelimitedIdentifierContext delimitedIdentifier() {
			return getRuleContext(DelimitedIdentifierContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_identifier);
		try {
			setState(1261);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TRUNCATE:
			case SCHEMA:
			case TABLE:
			case COLUMNS:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case RIGHT:
			case OFF:
			case GROUP:
			case LIMIT:
			case OFFSET:
			case SAVEPOINT:
			case BOOLEAN:
			case ARRAY:
			case DATE:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MICROSECOND:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case AVG:
			case ENABLE:
			case DISABLE:
			case INSTANCE:
			case DO:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case NEXT:
			case NAME:
			case INTEGER:
			case TYPE:
			case TEXT:
			case VIEWS:
			case READ_ONLY:
			case DATABASE:
			case RETURNS:
			case DATEPART:
			case PASSWORD:
			case TARGET:
			case BINARY:
			case HIDDEN_:
			case MOD:
			case PARTITION:
			case PARTITIONS:
			case TOP:
			case ROW:
			case ROWS:
			case XOR:
			case ALWAYS:
			case USER:
			case ROLE:
			case START:
			case ACTION:
			case ALGORITHM:
			case AUTO:
			case BLOCKERS:
			case CLUSTERED:
			case NONCLUSTERED:
			case COLUMNSTORE:
			case CONTENT:
			case YEARS:
			case MONTHS:
			case WEEKS:
			case DAYS:
			case MINUTES:
			case DENY:
			case DETERMINISTIC:
			case DISTRIBUTION:
			case DOCUMENT:
			case DURABILITY:
			case ENCRYPTED:
			case FILESTREAM:
			case FILETABLE:
			case FILLFACTOR:
			case FOLLOWING:
			case HASH:
			case HEAP:
			case INBOUND:
			case OUTBOUND:
			case UNBOUNDED:
			case INFINITE:
			case LOGIN:
			case MASKED:
			case MAXDOP:
			case MOVE:
			case NOCHECK:
			case OBJECT:
			case ONLINE:
			case OVER:
			case PAGE:
			case PAUSED:
			case PERIOD:
			case PERSISTED:
			case PRECEDING:
			case RANDOMIZED:
			case RANGE:
			case REBUILD:
			case REPLICATE:
			case REPLICATION:
			case RESUMABLE:
			case ROWGUIDCOL:
			case SAVE:
			case SELF:
			case SPARSE:
			case SWITCH:
			case TRAN:
			case TRANCOUNT:
			case CONTROL:
			case CONCAT:
			case TAKE:
			case OWNERSHIP:
			case DEFINITION:
			case APPLICATION:
			case ASSEMBLY:
			case SYMMETRIC:
			case ASYMMETRIC:
			case SERVER:
			case RECEIVE:
			case CHANGE:
			case TRACE:
			case TRACKING:
			case RESOURCES:
			case SETTINGS:
			case STATE:
			case AVAILABILITY:
			case CREDENTIAL:
			case ENDPOINT:
			case EVENT:
			case NOTIFICATION:
			case LINKED:
			case AUDIT:
			case DDL:
			case XML:
			case IMPERSONATE:
			case SECURABLES:
			case AUTHENTICATE:
			case EXTERNAL:
			case ACCESS:
			case ADMINISTER:
			case BULK:
			case OPERATIONS:
			case UNSAFE:
			case SHUTDOWN:
			case SCOPED:
			case CONFIGURATION:
			case DATASPACE:
			case SERVICE:
			case CERTIFICATE:
			case CONTRACT:
			case ENCRYPTION:
			case MASTER:
			case DATA:
			case SOURCE:
			case FILE:
			case FORMAT:
			case LIBRARY:
			case FULLTEXT:
			case MASK:
			case UNMASK:
			case MESSAGE:
			case REMOTE:
			case BINDING:
			case ROUTE:
			case SECURITY:
			case POLICY:
			case AGGREGATE:
			case QUEUE:
			case RULE:
			case SYNONYM:
			case COLLECTION:
			case SCRIPT:
			case KILL:
			case BACKUP:
			case LOG:
			case SHOWPLAN:
			case SUBSCRIBE:
			case QUERY:
			case NOTIFICATIONS:
			case CHECKPOINT:
			case SEQUENCE:
			case ABORT_AFTER_WAIT:
			case ALLOW_PAGE_LOCKS:
			case ALLOW_ROW_LOCKS:
			case ALL_SPARSE_COLUMNS:
			case BUCKET_COUNT:
			case COLUMNSTORE_ARCHIVE:
			case COLUMN_ENCRYPTION_KEY:
			case COLUMN_SET:
			case COMPRESSION_DELAY:
			case DATABASE_DEAULT:
			case DATA_COMPRESSION:
			case DATA_CONSISTENCY_CHECK:
			case ENCRYPTION_TYPE:
			case SYSTEM_TIME:
			case SYSTEM_VERSIONING:
			case TEXTIMAGE_ON:
			case WAIT_AT_LOW_PRIORITY:
			case STATISTICS_INCREMENTAL:
			case STATISTICS_NORECOMPUTE:
			case ROUND_ROBIN:
			case SCHEMA_AND_DATA:
			case SCHEMA_ONLY:
			case SORT_IN_TEMPDB:
			case IGNORE_DUP_KEY:
			case IMPLICIT_TRANSACTIONS:
			case MAX_DURATION:
			case MEMORY_OPTIMIZED:
			case MIGRATION_STATE:
			case PAD_INDEX:
			case REMOTE_DATA_ARCHIVE:
			case FILESTREAM_ON:
			case FILETABLE_COLLATE_FILENAME:
			case FILETABLE_DIRECTORY:
			case FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME:
			case FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME:
			case FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME:
			case FILTER_PREDICATE:
			case HISTORY_RETENTION_PERIOD:
			case HISTORY_TABLE:
			case LOCK_ESCALATION:
			case DROP_EXISTING:
			case ROW_NUMBER:
			case FIRST:
			case DATETIME2:
			case OUTPUT:
			case INSERTED:
			case DELETED:
			case FILENAME:
			case SIZE:
			case MAXSIZE:
			case FILEGROWTH:
			case UNLIMITED:
			case KB:
			case MB:
			case GB:
			case TB:
			case CONTAINS:
			case MEMORY_OPTIMIZED_DATA:
			case FILEGROUP:
			case NON_TRANSACTED_ACCESS:
			case DB_CHAINING:
			case TRUSTWORTHY:
			case FORWARD_ONLY:
			case KEYSET:
			case FAST_FORWARD:
			case SCROLL_LOCKS:
			case OPTIMISTIC:
			case TYPE_WARNING:
			case SCHEMABINDING:
			case CALLER:
			case INPUT:
			case OWNER:
			case SNAPSHOT:
			case REPEATABLE:
			case SERIALIZABLE:
			case NATIVE_COMPILATION:
			case VIEW_METADATA:
			case INSTEAD:
			case APPEND:
			case INCREMENT:
			case CACHE:
			case MINVALUE:
			case MAXVALUE:
			case RESTART:
			case LOB_COMPACTION:
			case COMPRESS_ALL_ROW_GROUPS:
			case REORGANIZE:
			case RESUME:
			case PAUSE:
			case ABORT:
			case ACCELERATED_DATABASE_RECOVERY:
			case PERSISTENT_VERSION_STORE_FILEGROUP:
			case IMMEDIATE:
			case NO_WAIT:
			case TARGET_RECOVERY_TIME:
			case SECONDS:
			case HONOR_BROKER_PRIORITY:
			case ERROR_BROKER_CONVERSATIONS:
			case NEW_BROKER:
			case DISABLE_BROKER:
			case ENABLE_BROKER:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case READ_COMMITTED_SNAPSHOT:
			case ALLOW_SNAPSHOT_ISOLATION:
			case RECURSIVE_TRIGGERS:
			case QUOTED_IDENTIFIER:
			case NUMERIC_ROUNDABORT:
			case CONCAT_NULL_YIELDS_NULL:
			case COMPATIBILITY_LEVEL:
			case ARITHABORT:
			case ANSI_WARNINGS:
			case ANSI_PADDING:
			case ANSI_NULLS:
			case ANSI_NULL_DEFAULT:
			case PAGE_VERIFY:
			case CHECKSUM:
			case TORN_PAGE_DETECTION:
			case BULK_LOGGED:
			case RECOVERY:
			case TOTAL_EXECUTION_CPU_TIME_MS:
			case TOTAL_COMPILE_CPU_TIME_MS:
			case STALE_CAPTURE_POLICY_THRESHOLD:
			case EXECUTION_COUNT:
			case QUERY_CAPTURE_POLICY:
			case WAIT_STATS_CAPTURE_MODE:
			case MAX_PLANS_PER_QUERY:
			case QUERY_CAPTURE_MODE:
			case SIZE_BASED_CLEANUP_MODE:
			case INTERVAL_LENGTH_MINUTES:
			case MAX_STORAGE_SIZE_MB:
			case DATA_FLUSH_INTERVAL_SECONDS:
			case CLEANUP_POLICY:
			case CUSTOM:
			case STALE_QUERY_THRESHOLD_DAYS:
			case OPERATION_MODE:
			case QUERY_STORE:
			case CURSOR_DEFAULT:
			case GLOBAL:
			case CURSOR_CLOSE_ON_COMMIT:
			case HOURS:
			case CHANGE_RETENTION:
			case AUTO_CLEANUP:
			case CHANGE_TRACKING:
			case AUTOMATIC_TUNING:
			case FORCE_LAST_GOOD_PLAN:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_CREATE_STATISTICS:
			case INCREMENTAL:
			case AUTO_CLOSE:
			case DATA_RETENTION:
			case TEMPORAL_HISTORY_RETENTION:
			case EDITION:
			case MIXED_PAGE_ALLOCATION:
			case DISABLED:
			case ALLOWED:
			case HADR:
			case MULTI_USER:
			case RESTRICTED_USER:
			case SINGLE_USER:
			case OFFLINE:
			case EMERGENCY:
			case SUSPEND:
			case DATE_CORRELATION_OPTIMIZATION:
			case ELASTIC_POOL:
			case SERVICE_OBJECTIVE:
			case DATABASE_NAME:
			case ALLOW_CONNECTIONS:
			case GEO:
			case NAMED:
			case DATEFIRST:
			case BACKUP_STORAGE_REDUNDANCY:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case SECONDARY:
			case FAILOVER:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case INLINE:
			case NESTED_TRIGGERS:
			case TRANSFORM_NOISE_WORDS:
			case TWO_DIGIT_YEAR_CUTOFF:
			case PERSISTENT_LOG_BUFFER:
			case DIRECTORY_NAME:
			case DATEFORMAT:
			case DELAYED_DURABILITY:
			case AUTHORIZATION:
			case TRANSFER:
			case PROVIDER:
			case SID:
			case SEARCH:
			case MEMBER:
			case JSON:
			case OPENQUERY:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1259);
				regularIdentifier();
				}
				break;
			case DELIMITED_IDENTIFIER_:
				enterOuterAlt(_localctx, 2);
				{
				setState(1260);
				delimitedIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RegularIdentifierContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(SQLServerStatementParser.IDENTIFIER_, 0); }
		public UnreservedWordContext unreservedWord() {
			return getRuleContext(UnreservedWordContext.class,0);
		}
		public RegularIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regularIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterRegularIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitRegularIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitRegularIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RegularIdentifierContext regularIdentifier() throws RecognitionException {
		RegularIdentifierContext _localctx = new RegularIdentifierContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_regularIdentifier);
		try {
			setState(1265);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1263);
				match(IDENTIFIER_);
				}
				break;
			case TRUNCATE:
			case SCHEMA:
			case TABLE:
			case COLUMNS:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case RIGHT:
			case OFF:
			case GROUP:
			case LIMIT:
			case OFFSET:
			case SAVEPOINT:
			case BOOLEAN:
			case ARRAY:
			case DATE:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MICROSECOND:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case AVG:
			case ENABLE:
			case DISABLE:
			case INSTANCE:
			case DO:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case NEXT:
			case NAME:
			case INTEGER:
			case TYPE:
			case TEXT:
			case VIEWS:
			case READ_ONLY:
			case DATABASE:
			case RETURNS:
			case DATEPART:
			case PASSWORD:
			case TARGET:
			case BINARY:
			case HIDDEN_:
			case MOD:
			case PARTITION:
			case PARTITIONS:
			case TOP:
			case ROW:
			case ROWS:
			case XOR:
			case ALWAYS:
			case USER:
			case ROLE:
			case START:
			case ACTION:
			case ALGORITHM:
			case AUTO:
			case BLOCKERS:
			case CLUSTERED:
			case NONCLUSTERED:
			case COLUMNSTORE:
			case CONTENT:
			case YEARS:
			case MONTHS:
			case WEEKS:
			case DAYS:
			case MINUTES:
			case DENY:
			case DETERMINISTIC:
			case DISTRIBUTION:
			case DOCUMENT:
			case DURABILITY:
			case ENCRYPTED:
			case FILESTREAM:
			case FILETABLE:
			case FILLFACTOR:
			case FOLLOWING:
			case HASH:
			case HEAP:
			case INBOUND:
			case OUTBOUND:
			case UNBOUNDED:
			case INFINITE:
			case LOGIN:
			case MASKED:
			case MAXDOP:
			case MOVE:
			case NOCHECK:
			case OBJECT:
			case ONLINE:
			case OVER:
			case PAGE:
			case PAUSED:
			case PERIOD:
			case PERSISTED:
			case PRECEDING:
			case RANDOMIZED:
			case RANGE:
			case REBUILD:
			case REPLICATE:
			case REPLICATION:
			case RESUMABLE:
			case ROWGUIDCOL:
			case SAVE:
			case SELF:
			case SPARSE:
			case SWITCH:
			case TRAN:
			case TRANCOUNT:
			case CONTROL:
			case CONCAT:
			case TAKE:
			case OWNERSHIP:
			case DEFINITION:
			case APPLICATION:
			case ASSEMBLY:
			case SYMMETRIC:
			case ASYMMETRIC:
			case SERVER:
			case RECEIVE:
			case CHANGE:
			case TRACE:
			case TRACKING:
			case RESOURCES:
			case SETTINGS:
			case STATE:
			case AVAILABILITY:
			case CREDENTIAL:
			case ENDPOINT:
			case EVENT:
			case NOTIFICATION:
			case LINKED:
			case AUDIT:
			case DDL:
			case XML:
			case IMPERSONATE:
			case SECURABLES:
			case AUTHENTICATE:
			case EXTERNAL:
			case ACCESS:
			case ADMINISTER:
			case BULK:
			case OPERATIONS:
			case UNSAFE:
			case SHUTDOWN:
			case SCOPED:
			case CONFIGURATION:
			case DATASPACE:
			case SERVICE:
			case CERTIFICATE:
			case CONTRACT:
			case ENCRYPTION:
			case MASTER:
			case DATA:
			case SOURCE:
			case FILE:
			case FORMAT:
			case LIBRARY:
			case FULLTEXT:
			case MASK:
			case UNMASK:
			case MESSAGE:
			case REMOTE:
			case BINDING:
			case ROUTE:
			case SECURITY:
			case POLICY:
			case AGGREGATE:
			case QUEUE:
			case RULE:
			case SYNONYM:
			case COLLECTION:
			case SCRIPT:
			case KILL:
			case BACKUP:
			case LOG:
			case SHOWPLAN:
			case SUBSCRIBE:
			case QUERY:
			case NOTIFICATIONS:
			case CHECKPOINT:
			case SEQUENCE:
			case ABORT_AFTER_WAIT:
			case ALLOW_PAGE_LOCKS:
			case ALLOW_ROW_LOCKS:
			case ALL_SPARSE_COLUMNS:
			case BUCKET_COUNT:
			case COLUMNSTORE_ARCHIVE:
			case COLUMN_ENCRYPTION_KEY:
			case COLUMN_SET:
			case COMPRESSION_DELAY:
			case DATABASE_DEAULT:
			case DATA_COMPRESSION:
			case DATA_CONSISTENCY_CHECK:
			case ENCRYPTION_TYPE:
			case SYSTEM_TIME:
			case SYSTEM_VERSIONING:
			case TEXTIMAGE_ON:
			case WAIT_AT_LOW_PRIORITY:
			case STATISTICS_INCREMENTAL:
			case STATISTICS_NORECOMPUTE:
			case ROUND_ROBIN:
			case SCHEMA_AND_DATA:
			case SCHEMA_ONLY:
			case SORT_IN_TEMPDB:
			case IGNORE_DUP_KEY:
			case IMPLICIT_TRANSACTIONS:
			case MAX_DURATION:
			case MEMORY_OPTIMIZED:
			case MIGRATION_STATE:
			case PAD_INDEX:
			case REMOTE_DATA_ARCHIVE:
			case FILESTREAM_ON:
			case FILETABLE_COLLATE_FILENAME:
			case FILETABLE_DIRECTORY:
			case FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME:
			case FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME:
			case FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME:
			case FILTER_PREDICATE:
			case HISTORY_RETENTION_PERIOD:
			case HISTORY_TABLE:
			case LOCK_ESCALATION:
			case DROP_EXISTING:
			case ROW_NUMBER:
			case FIRST:
			case DATETIME2:
			case OUTPUT:
			case INSERTED:
			case DELETED:
			case FILENAME:
			case SIZE:
			case MAXSIZE:
			case FILEGROWTH:
			case UNLIMITED:
			case KB:
			case MB:
			case GB:
			case TB:
			case CONTAINS:
			case MEMORY_OPTIMIZED_DATA:
			case FILEGROUP:
			case NON_TRANSACTED_ACCESS:
			case DB_CHAINING:
			case TRUSTWORTHY:
			case FORWARD_ONLY:
			case KEYSET:
			case FAST_FORWARD:
			case SCROLL_LOCKS:
			case OPTIMISTIC:
			case TYPE_WARNING:
			case SCHEMABINDING:
			case CALLER:
			case INPUT:
			case OWNER:
			case SNAPSHOT:
			case REPEATABLE:
			case SERIALIZABLE:
			case NATIVE_COMPILATION:
			case VIEW_METADATA:
			case INSTEAD:
			case APPEND:
			case INCREMENT:
			case CACHE:
			case MINVALUE:
			case MAXVALUE:
			case RESTART:
			case LOB_COMPACTION:
			case COMPRESS_ALL_ROW_GROUPS:
			case REORGANIZE:
			case RESUME:
			case PAUSE:
			case ABORT:
			case ACCELERATED_DATABASE_RECOVERY:
			case PERSISTENT_VERSION_STORE_FILEGROUP:
			case IMMEDIATE:
			case NO_WAIT:
			case TARGET_RECOVERY_TIME:
			case SECONDS:
			case HONOR_BROKER_PRIORITY:
			case ERROR_BROKER_CONVERSATIONS:
			case NEW_BROKER:
			case DISABLE_BROKER:
			case ENABLE_BROKER:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case READ_COMMITTED_SNAPSHOT:
			case ALLOW_SNAPSHOT_ISOLATION:
			case RECURSIVE_TRIGGERS:
			case QUOTED_IDENTIFIER:
			case NUMERIC_ROUNDABORT:
			case CONCAT_NULL_YIELDS_NULL:
			case COMPATIBILITY_LEVEL:
			case ARITHABORT:
			case ANSI_WARNINGS:
			case ANSI_PADDING:
			case ANSI_NULLS:
			case ANSI_NULL_DEFAULT:
			case PAGE_VERIFY:
			case CHECKSUM:
			case TORN_PAGE_DETECTION:
			case BULK_LOGGED:
			case RECOVERY:
			case TOTAL_EXECUTION_CPU_TIME_MS:
			case TOTAL_COMPILE_CPU_TIME_MS:
			case STALE_CAPTURE_POLICY_THRESHOLD:
			case EXECUTION_COUNT:
			case QUERY_CAPTURE_POLICY:
			case WAIT_STATS_CAPTURE_MODE:
			case MAX_PLANS_PER_QUERY:
			case QUERY_CAPTURE_MODE:
			case SIZE_BASED_CLEANUP_MODE:
			case INTERVAL_LENGTH_MINUTES:
			case MAX_STORAGE_SIZE_MB:
			case DATA_FLUSH_INTERVAL_SECONDS:
			case CLEANUP_POLICY:
			case CUSTOM:
			case STALE_QUERY_THRESHOLD_DAYS:
			case OPERATION_MODE:
			case QUERY_STORE:
			case CURSOR_DEFAULT:
			case GLOBAL:
			case CURSOR_CLOSE_ON_COMMIT:
			case HOURS:
			case CHANGE_RETENTION:
			case AUTO_CLEANUP:
			case CHANGE_TRACKING:
			case AUTOMATIC_TUNING:
			case FORCE_LAST_GOOD_PLAN:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_CREATE_STATISTICS:
			case INCREMENTAL:
			case AUTO_CLOSE:
			case DATA_RETENTION:
			case TEMPORAL_HISTORY_RETENTION:
			case EDITION:
			case MIXED_PAGE_ALLOCATION:
			case DISABLED:
			case ALLOWED:
			case HADR:
			case MULTI_USER:
			case RESTRICTED_USER:
			case SINGLE_USER:
			case OFFLINE:
			case EMERGENCY:
			case SUSPEND:
			case DATE_CORRELATION_OPTIMIZATION:
			case ELASTIC_POOL:
			case SERVICE_OBJECTIVE:
			case DATABASE_NAME:
			case ALLOW_CONNECTIONS:
			case GEO:
			case NAMED:
			case DATEFIRST:
			case BACKUP_STORAGE_REDUNDANCY:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case SECONDARY:
			case FAILOVER:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case INLINE:
			case NESTED_TRIGGERS:
			case TRANSFORM_NOISE_WORDS:
			case TWO_DIGIT_YEAR_CUTOFF:
			case PERSISTENT_LOG_BUFFER:
			case DIRECTORY_NAME:
			case DATEFORMAT:
			case DELAYED_DURABILITY:
			case AUTHORIZATION:
			case TRANSFER:
			case PROVIDER:
			case SID:
			case SEARCH:
			case MEMBER:
			case JSON:
			case OPENQUERY:
				enterOuterAlt(_localctx, 2);
				{
				setState(1264);
				unreservedWord();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DelimitedIdentifierContext extends ParserRuleContext {
		public TerminalNode DELIMITED_IDENTIFIER_() { return getToken(SQLServerStatementParser.DELIMITED_IDENTIFIER_, 0); }
		public DelimitedIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delimitedIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDelimitedIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDelimitedIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDelimitedIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DelimitedIdentifierContext delimitedIdentifier() throws RecognitionException {
		DelimitedIdentifierContext _localctx = new DelimitedIdentifierContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_delimitedIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1267);
			match(DELIMITED_IDENTIFIER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnreservedWordContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(SQLServerStatementParser.TRUNCATE, 0); }
		public TerminalNode FUNCTION() { return getToken(SQLServerStatementParser.FUNCTION, 0); }
		public TerminalNode TRIGGER() { return getToken(SQLServerStatementParser.TRIGGER, 0); }
		public TerminalNode LIMIT() { return getToken(SQLServerStatementParser.LIMIT, 0); }
		public TerminalNode OFFSET() { return getToken(SQLServerStatementParser.OFFSET, 0); }
		public TerminalNode SAVEPOINT() { return getToken(SQLServerStatementParser.SAVEPOINT, 0); }
		public TerminalNode BOOLEAN() { return getToken(SQLServerStatementParser.BOOLEAN, 0); }
		public TerminalNode ARRAY() { return getToken(SQLServerStatementParser.ARRAY, 0); }
		public TerminalNode LOCALTIME() { return getToken(SQLServerStatementParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(SQLServerStatementParser.LOCALTIMESTAMP, 0); }
		public TerminalNode QUARTER() { return getToken(SQLServerStatementParser.QUARTER, 0); }
		public TerminalNode WEEK() { return getToken(SQLServerStatementParser.WEEK, 0); }
		public TerminalNode MICROSECOND() { return getToken(SQLServerStatementParser.MICROSECOND, 0); }
		public TerminalNode ENABLE() { return getToken(SQLServerStatementParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(SQLServerStatementParser.DISABLE, 0); }
		public TerminalNode BINARY() { return getToken(SQLServerStatementParser.BINARY, 0); }
		public TerminalNode HIDDEN_() { return getToken(SQLServerStatementParser.HIDDEN_, 0); }
		public TerminalNode MOD() { return getToken(SQLServerStatementParser.MOD, 0); }
		public TerminalNode PARTITION() { return getToken(SQLServerStatementParser.PARTITION, 0); }
		public TerminalNode TOP() { return getToken(SQLServerStatementParser.TOP, 0); }
		public TerminalNode ROW() { return getToken(SQLServerStatementParser.ROW, 0); }
		public TerminalNode XOR() { return getToken(SQLServerStatementParser.XOR, 0); }
		public TerminalNode ALWAYS() { return getToken(SQLServerStatementParser.ALWAYS, 0); }
		public TerminalNode ROLE() { return getToken(SQLServerStatementParser.ROLE, 0); }
		public TerminalNode START() { return getToken(SQLServerStatementParser.START, 0); }
		public TerminalNode ALGORITHM() { return getToken(SQLServerStatementParser.ALGORITHM, 0); }
		public TerminalNode AUTO() { return getToken(SQLServerStatementParser.AUTO, 0); }
		public TerminalNode BLOCKERS() { return getToken(SQLServerStatementParser.BLOCKERS, 0); }
		public TerminalNode CLUSTERED() { return getToken(SQLServerStatementParser.CLUSTERED, 0); }
		public TerminalNode COLUMNSTORE() { return getToken(SQLServerStatementParser.COLUMNSTORE, 0); }
		public TerminalNode CONTENT() { return getToken(SQLServerStatementParser.CONTENT, 0); }
		public TerminalNode CONCAT() { return getToken(SQLServerStatementParser.CONCAT, 0); }
		public TerminalNode DATABASE() { return getToken(SQLServerStatementParser.DATABASE, 0); }
		public TerminalNode DAYS() { return getToken(SQLServerStatementParser.DAYS, 0); }
		public TerminalNode DENY() { return getToken(SQLServerStatementParser.DENY, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(SQLServerStatementParser.DETERMINISTIC, 0); }
		public TerminalNode DISTRIBUTION() { return getToken(SQLServerStatementParser.DISTRIBUTION, 0); }
		public TerminalNode DOCUMENT() { return getToken(SQLServerStatementParser.DOCUMENT, 0); }
		public TerminalNode DURABILITY() { return getToken(SQLServerStatementParser.DURABILITY, 0); }
		public TerminalNode ENCRYPTED() { return getToken(SQLServerStatementParser.ENCRYPTED, 0); }
		public TerminalNode FILESTREAM() { return getToken(SQLServerStatementParser.FILESTREAM, 0); }
		public TerminalNode FILETABLE() { return getToken(SQLServerStatementParser.FILETABLE, 0); }
		public TerminalNode FOLLOWING() { return getToken(SQLServerStatementParser.FOLLOWING, 0); }
		public TerminalNode HASH() { return getToken(SQLServerStatementParser.HASH, 0); }
		public TerminalNode HEAP() { return getToken(SQLServerStatementParser.HEAP, 0); }
		public TerminalNode INBOUND() { return getToken(SQLServerStatementParser.INBOUND, 0); }
		public TerminalNode INFINITE() { return getToken(SQLServerStatementParser.INFINITE, 0); }
		public TerminalNode LOGIN() { return getToken(SQLServerStatementParser.LOGIN, 0); }
		public TerminalNode MASKED() { return getToken(SQLServerStatementParser.MASKED, 0); }
		public TerminalNode MAXDOP() { return getToken(SQLServerStatementParser.MAXDOP, 0); }
		public TerminalNode MINUTES() { return getToken(SQLServerStatementParser.MINUTES, 0); }
		public TerminalNode MONTHS() { return getToken(SQLServerStatementParser.MONTHS, 0); }
		public TerminalNode MOVE() { return getToken(SQLServerStatementParser.MOVE, 0); }
		public TerminalNode NOCHECK() { return getToken(SQLServerStatementParser.NOCHECK, 0); }
		public TerminalNode NONCLUSTERED() { return getToken(SQLServerStatementParser.NONCLUSTERED, 0); }
		public TerminalNode OBJECT() { return getToken(SQLServerStatementParser.OBJECT, 0); }
		public TerminalNode OFF() { return getToken(SQLServerStatementParser.OFF, 0); }
		public TerminalNode ONLINE() { return getToken(SQLServerStatementParser.ONLINE, 0); }
		public TerminalNode OUTBOUND() { return getToken(SQLServerStatementParser.OUTBOUND, 0); }
		public TerminalNode OVER() { return getToken(SQLServerStatementParser.OVER, 0); }
		public TerminalNode PAGE() { return getToken(SQLServerStatementParser.PAGE, 0); }
		public TerminalNode PARTITIONS() { return getToken(SQLServerStatementParser.PARTITIONS, 0); }
		public TerminalNode PAUSED() { return getToken(SQLServerStatementParser.PAUSED, 0); }
		public TerminalNode PERIOD() { return getToken(SQLServerStatementParser.PERIOD, 0); }
		public TerminalNode PERSISTED() { return getToken(SQLServerStatementParser.PERSISTED, 0); }
		public TerminalNode PRECEDING() { return getToken(SQLServerStatementParser.PRECEDING, 0); }
		public TerminalNode RANDOMIZED() { return getToken(SQLServerStatementParser.RANDOMIZED, 0); }
		public TerminalNode RANGE() { return getToken(SQLServerStatementParser.RANGE, 0); }
		public TerminalNode REBUILD() { return getToken(SQLServerStatementParser.REBUILD, 0); }
		public TerminalNode REPLICATE() { return getToken(SQLServerStatementParser.REPLICATE, 0); }
		public TerminalNode REPLICATION() { return getToken(SQLServerStatementParser.REPLICATION, 0); }
		public TerminalNode RESUMABLE() { return getToken(SQLServerStatementParser.RESUMABLE, 0); }
		public TerminalNode ROWGUIDCOL() { return getToken(SQLServerStatementParser.ROWGUIDCOL, 0); }
		public TerminalNode SAVE() { return getToken(SQLServerStatementParser.SAVE, 0); }
		public TerminalNode SELF() { return getToken(SQLServerStatementParser.SELF, 0); }
		public TerminalNode SPARSE() { return getToken(SQLServerStatementParser.SPARSE, 0); }
		public TerminalNode SWITCH() { return getToken(SQLServerStatementParser.SWITCH, 0); }
		public TerminalNode TRAN() { return getToken(SQLServerStatementParser.TRAN, 0); }
		public TerminalNode TRANCOUNT() { return getToken(SQLServerStatementParser.TRANCOUNT, 0); }
		public TerminalNode UNBOUNDED() { return getToken(SQLServerStatementParser.UNBOUNDED, 0); }
		public TerminalNode YEARS() { return getToken(SQLServerStatementParser.YEARS, 0); }
		public TerminalNode WEEKS() { return getToken(SQLServerStatementParser.WEEKS, 0); }
		public TerminalNode ABORT_AFTER_WAIT() { return getToken(SQLServerStatementParser.ABORT_AFTER_WAIT, 0); }
		public TerminalNode ALLOW_PAGE_LOCKS() { return getToken(SQLServerStatementParser.ALLOW_PAGE_LOCKS, 0); }
		public TerminalNode ALLOW_ROW_LOCKS() { return getToken(SQLServerStatementParser.ALLOW_ROW_LOCKS, 0); }
		public TerminalNode ALL_SPARSE_COLUMNS() { return getToken(SQLServerStatementParser.ALL_SPARSE_COLUMNS, 0); }
		public TerminalNode BUCKET_COUNT() { return getToken(SQLServerStatementParser.BUCKET_COUNT, 0); }
		public TerminalNode COLUMNSTORE_ARCHIVE() { return getToken(SQLServerStatementParser.COLUMNSTORE_ARCHIVE, 0); }
		public TerminalNode COLUMN_ENCRYPTION_KEY() { return getToken(SQLServerStatementParser.COLUMN_ENCRYPTION_KEY, 0); }
		public TerminalNode COLUMN_SET() { return getToken(SQLServerStatementParser.COLUMN_SET, 0); }
		public TerminalNode COMPRESSION_DELAY() { return getToken(SQLServerStatementParser.COMPRESSION_DELAY, 0); }
		public TerminalNode DATABASE_DEAULT() { return getToken(SQLServerStatementParser.DATABASE_DEAULT, 0); }
		public TerminalNode DATA_COMPRESSION() { return getToken(SQLServerStatementParser.DATA_COMPRESSION, 0); }
		public TerminalNode DATA_CONSISTENCY_CHECK() { return getToken(SQLServerStatementParser.DATA_CONSISTENCY_CHECK, 0); }
		public TerminalNode ENCRYPTION_TYPE() { return getToken(SQLServerStatementParser.ENCRYPTION_TYPE, 0); }
		public TerminalNode SYSTEM_TIME() { return getToken(SQLServerStatementParser.SYSTEM_TIME, 0); }
		public TerminalNode SYSTEM_VERSIONING() { return getToken(SQLServerStatementParser.SYSTEM_VERSIONING, 0); }
		public TerminalNode TEXTIMAGE_ON() { return getToken(SQLServerStatementParser.TEXTIMAGE_ON, 0); }
		public TerminalNode WAIT_AT_LOW_PRIORITY() { return getToken(SQLServerStatementParser.WAIT_AT_LOW_PRIORITY, 0); }
		public TerminalNode STATISTICS_INCREMENTAL() { return getToken(SQLServerStatementParser.STATISTICS_INCREMENTAL, 0); }
		public TerminalNode STATISTICS_NORECOMPUTE() { return getToken(SQLServerStatementParser.STATISTICS_NORECOMPUTE, 0); }
		public TerminalNode ROUND_ROBIN() { return getToken(SQLServerStatementParser.ROUND_ROBIN, 0); }
		public TerminalNode SCHEMA_AND_DATA() { return getToken(SQLServerStatementParser.SCHEMA_AND_DATA, 0); }
		public TerminalNode SCHEMA_ONLY() { return getToken(SQLServerStatementParser.SCHEMA_ONLY, 0); }
		public TerminalNode SORT_IN_TEMPDB() { return getToken(SQLServerStatementParser.SORT_IN_TEMPDB, 0); }
		public TerminalNode IGNORE_DUP_KEY() { return getToken(SQLServerStatementParser.IGNORE_DUP_KEY, 0); }
		public TerminalNode IMPLICIT_TRANSACTIONS() { return getToken(SQLServerStatementParser.IMPLICIT_TRANSACTIONS, 0); }
		public TerminalNode MAX_DURATION() { return getToken(SQLServerStatementParser.MAX_DURATION, 0); }
		public TerminalNode MEMORY_OPTIMIZED() { return getToken(SQLServerStatementParser.MEMORY_OPTIMIZED, 0); }
		public TerminalNode MIGRATION_STATE() { return getToken(SQLServerStatementParser.MIGRATION_STATE, 0); }
		public TerminalNode PAD_INDEX() { return getToken(SQLServerStatementParser.PAD_INDEX, 0); }
		public TerminalNode REMOTE_DATA_ARCHIVE() { return getToken(SQLServerStatementParser.REMOTE_DATA_ARCHIVE, 0); }
		public TerminalNode FILESTREAM_ON() { return getToken(SQLServerStatementParser.FILESTREAM_ON, 0); }
		public TerminalNode FILETABLE_COLLATE_FILENAME() { return getToken(SQLServerStatementParser.FILETABLE_COLLATE_FILENAME, 0); }
		public TerminalNode FILETABLE_DIRECTORY() { return getToken(SQLServerStatementParser.FILETABLE_DIRECTORY, 0); }
		public TerminalNode FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME() { return getToken(SQLServerStatementParser.FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME, 0); }
		public TerminalNode FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME() { return getToken(SQLServerStatementParser.FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME, 0); }
		public TerminalNode FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME() { return getToken(SQLServerStatementParser.FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME, 0); }
		public TerminalNode FILLFACTOR() { return getToken(SQLServerStatementParser.FILLFACTOR, 0); }
		public TerminalNode FILTER_PREDICATE() { return getToken(SQLServerStatementParser.FILTER_PREDICATE, 0); }
		public TerminalNode HISTORY_RETENTION_PERIOD() { return getToken(SQLServerStatementParser.HISTORY_RETENTION_PERIOD, 0); }
		public TerminalNode HISTORY_TABLE() { return getToken(SQLServerStatementParser.HISTORY_TABLE, 0); }
		public TerminalNode LOCK_ESCALATION() { return getToken(SQLServerStatementParser.LOCK_ESCALATION, 0); }
		public TerminalNode DROP_EXISTING() { return getToken(SQLServerStatementParser.DROP_EXISTING, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(SQLServerStatementParser.ROW_NUMBER, 0); }
		public TerminalNode CONTROL() { return getToken(SQLServerStatementParser.CONTROL, 0); }
		public TerminalNode TAKE() { return getToken(SQLServerStatementParser.TAKE, 0); }
		public TerminalNode OWNERSHIP() { return getToken(SQLServerStatementParser.OWNERSHIP, 0); }
		public TerminalNode DEFINITION() { return getToken(SQLServerStatementParser.DEFINITION, 0); }
		public TerminalNode APPLICATION() { return getToken(SQLServerStatementParser.APPLICATION, 0); }
		public TerminalNode ASSEMBLY() { return getToken(SQLServerStatementParser.ASSEMBLY, 0); }
		public TerminalNode SYMMETRIC() { return getToken(SQLServerStatementParser.SYMMETRIC, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(SQLServerStatementParser.ASYMMETRIC, 0); }
		public TerminalNode SERVER() { return getToken(SQLServerStatementParser.SERVER, 0); }
		public TerminalNode RECEIVE() { return getToken(SQLServerStatementParser.RECEIVE, 0); }
		public TerminalNode CHANGE() { return getToken(SQLServerStatementParser.CHANGE, 0); }
		public TerminalNode TRACE() { return getToken(SQLServerStatementParser.TRACE, 0); }
		public TerminalNode TRACKING() { return getToken(SQLServerStatementParser.TRACKING, 0); }
		public TerminalNode RESOURCES() { return getToken(SQLServerStatementParser.RESOURCES, 0); }
		public TerminalNode SETTINGS() { return getToken(SQLServerStatementParser.SETTINGS, 0); }
		public TerminalNode STATE() { return getToken(SQLServerStatementParser.STATE, 0); }
		public TerminalNode AVAILABILITY() { return getToken(SQLServerStatementParser.AVAILABILITY, 0); }
		public TerminalNode CREDENTIAL() { return getToken(SQLServerStatementParser.CREDENTIAL, 0); }
		public TerminalNode ENDPOINT() { return getToken(SQLServerStatementParser.ENDPOINT, 0); }
		public TerminalNode EVENT() { return getToken(SQLServerStatementParser.EVENT, 0); }
		public TerminalNode NOTIFICATION() { return getToken(SQLServerStatementParser.NOTIFICATION, 0); }
		public TerminalNode LINKED() { return getToken(SQLServerStatementParser.LINKED, 0); }
		public TerminalNode AUDIT() { return getToken(SQLServerStatementParser.AUDIT, 0); }
		public TerminalNode DDL() { return getToken(SQLServerStatementParser.DDL, 0); }
		public TerminalNode SQL() { return getToken(SQLServerStatementParser.SQL, 0); }
		public TerminalNode XML() { return getToken(SQLServerStatementParser.XML, 0); }
		public TerminalNode IMPERSONATE() { return getToken(SQLServerStatementParser.IMPERSONATE, 0); }
		public TerminalNode SECURABLES() { return getToken(SQLServerStatementParser.SECURABLES, 0); }
		public TerminalNode AUTHENTICATE() { return getToken(SQLServerStatementParser.AUTHENTICATE, 0); }
		public TerminalNode EXTERNAL() { return getToken(SQLServerStatementParser.EXTERNAL, 0); }
		public TerminalNode ACCESS() { return getToken(SQLServerStatementParser.ACCESS, 0); }
		public TerminalNode ADMINISTER() { return getToken(SQLServerStatementParser.ADMINISTER, 0); }
		public TerminalNode BULK() { return getToken(SQLServerStatementParser.BULK, 0); }
		public TerminalNode OPERATIONS() { return getToken(SQLServerStatementParser.OPERATIONS, 0); }
		public TerminalNode UNSAFE() { return getToken(SQLServerStatementParser.UNSAFE, 0); }
		public TerminalNode SHUTDOWN() { return getToken(SQLServerStatementParser.SHUTDOWN, 0); }
		public TerminalNode SCOPED() { return getToken(SQLServerStatementParser.SCOPED, 0); }
		public TerminalNode CONFIGURATION() { return getToken(SQLServerStatementParser.CONFIGURATION, 0); }
		public TerminalNode DATASPACE() { return getToken(SQLServerStatementParser.DATASPACE, 0); }
		public TerminalNode SERVICE() { return getToken(SQLServerStatementParser.SERVICE, 0); }
		public TerminalNode CERTIFICATE() { return getToken(SQLServerStatementParser.CERTIFICATE, 0); }
		public TerminalNode CONTRACT() { return getToken(SQLServerStatementParser.CONTRACT, 0); }
		public TerminalNode ENCRYPTION() { return getToken(SQLServerStatementParser.ENCRYPTION, 0); }
		public TerminalNode MASTER() { return getToken(SQLServerStatementParser.MASTER, 0); }
		public TerminalNode DATA() { return getToken(SQLServerStatementParser.DATA, 0); }
		public TerminalNode SOURCE() { return getToken(SQLServerStatementParser.SOURCE, 0); }
		public TerminalNode FILE() { return getToken(SQLServerStatementParser.FILE, 0); }
		public TerminalNode FORMAT() { return getToken(SQLServerStatementParser.FORMAT, 0); }
		public TerminalNode LIBRARY() { return getToken(SQLServerStatementParser.LIBRARY, 0); }
		public TerminalNode FULLTEXT() { return getToken(SQLServerStatementParser.FULLTEXT, 0); }
		public TerminalNode MASK() { return getToken(SQLServerStatementParser.MASK, 0); }
		public TerminalNode UNMASK() { return getToken(SQLServerStatementParser.UNMASK, 0); }
		public TerminalNode MESSAGE() { return getToken(SQLServerStatementParser.MESSAGE, 0); }
		public TerminalNode TYPE() { return getToken(SQLServerStatementParser.TYPE, 0); }
		public TerminalNode REMOTE() { return getToken(SQLServerStatementParser.REMOTE, 0); }
		public TerminalNode BINDING() { return getToken(SQLServerStatementParser.BINDING, 0); }
		public TerminalNode ROUTE() { return getToken(SQLServerStatementParser.ROUTE, 0); }
		public TerminalNode SECURITY() { return getToken(SQLServerStatementParser.SECURITY, 0); }
		public TerminalNode POLICY() { return getToken(SQLServerStatementParser.POLICY, 0); }
		public TerminalNode AGGREGATE() { return getToken(SQLServerStatementParser.AGGREGATE, 0); }
		public TerminalNode QUEUE() { return getToken(SQLServerStatementParser.QUEUE, 0); }
		public TerminalNode RULE() { return getToken(SQLServerStatementParser.RULE, 0); }
		public TerminalNode SYNONYM() { return getToken(SQLServerStatementParser.SYNONYM, 0); }
		public TerminalNode COLLECTION() { return getToken(SQLServerStatementParser.COLLECTION, 0); }
		public TerminalNode SCRIPT() { return getToken(SQLServerStatementParser.SCRIPT, 0); }
		public TerminalNode KILL() { return getToken(SQLServerStatementParser.KILL, 0); }
		public TerminalNode BACKUP() { return getToken(SQLServerStatementParser.BACKUP, 0); }
		public TerminalNode LOG() { return getToken(SQLServerStatementParser.LOG, 0); }
		public TerminalNode SHOWPLAN() { return getToken(SQLServerStatementParser.SHOWPLAN, 0); }
		public TerminalNode SUBSCRIBE() { return getToken(SQLServerStatementParser.SUBSCRIBE, 0); }
		public TerminalNode QUERY() { return getToken(SQLServerStatementParser.QUERY, 0); }
		public TerminalNode NOTIFICATIONS() { return getToken(SQLServerStatementParser.NOTIFICATIONS, 0); }
		public TerminalNode CHECKPOINT() { return getToken(SQLServerStatementParser.CHECKPOINT, 0); }
		public TerminalNode SEQUENCE() { return getToken(SQLServerStatementParser.SEQUENCE, 0); }
		public TerminalNode INSTANCE() { return getToken(SQLServerStatementParser.INSTANCE, 0); }
		public TerminalNode DO() { return getToken(SQLServerStatementParser.DO, 0); }
		public TerminalNode DEFINER() { return getToken(SQLServerStatementParser.DEFINER, 0); }
		public TerminalNode LOCAL() { return getToken(SQLServerStatementParser.LOCAL, 0); }
		public TerminalNode CASCADED() { return getToken(SQLServerStatementParser.CASCADED, 0); }
		public TerminalNode NEXT() { return getToken(SQLServerStatementParser.NEXT, 0); }
		public TerminalNode NAME() { return getToken(SQLServerStatementParser.NAME, 0); }
		public TerminalNode INTEGER() { return getToken(SQLServerStatementParser.INTEGER, 0); }
		public TerminalNode MAX() { return getToken(SQLServerStatementParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(SQLServerStatementParser.MIN, 0); }
		public TerminalNode SUM() { return getToken(SQLServerStatementParser.SUM, 0); }
		public TerminalNode COUNT() { return getToken(SQLServerStatementParser.COUNT, 0); }
		public TerminalNode AVG() { return getToken(SQLServerStatementParser.AVG, 0); }
		public TerminalNode FIRST() { return getToken(SQLServerStatementParser.FIRST, 0); }
		public TerminalNode DATETIME2() { return getToken(SQLServerStatementParser.DATETIME2, 0); }
		public TerminalNode OUTPUT() { return getToken(SQLServerStatementParser.OUTPUT, 0); }
		public TerminalNode INSERTED() { return getToken(SQLServerStatementParser.INSERTED, 0); }
		public TerminalNode DELETED() { return getToken(SQLServerStatementParser.DELETED, 0); }
		public TerminalNode KB() { return getToken(SQLServerStatementParser.KB, 0); }
		public TerminalNode MB() { return getToken(SQLServerStatementParser.MB, 0); }
		public TerminalNode GB() { return getToken(SQLServerStatementParser.GB, 0); }
		public TerminalNode TB() { return getToken(SQLServerStatementParser.TB, 0); }
		public TerminalNode FILENAME() { return getToken(SQLServerStatementParser.FILENAME, 0); }
		public TerminalNode MAXSIZE() { return getToken(SQLServerStatementParser.MAXSIZE, 0); }
		public TerminalNode FILEGROWTH() { return getToken(SQLServerStatementParser.FILEGROWTH, 0); }
		public TerminalNode UNLIMITED() { return getToken(SQLServerStatementParser.UNLIMITED, 0); }
		public TerminalNode MEMORY_OPTIMIZED_DATA() { return getToken(SQLServerStatementParser.MEMORY_OPTIMIZED_DATA, 0); }
		public TerminalNode FILEGROUP() { return getToken(SQLServerStatementParser.FILEGROUP, 0); }
		public TerminalNode NON_TRANSACTED_ACCESS() { return getToken(SQLServerStatementParser.NON_TRANSACTED_ACCESS, 0); }
		public TerminalNode DB_CHAINING() { return getToken(SQLServerStatementParser.DB_CHAINING, 0); }
		public TerminalNode TRUSTWORTHY() { return getToken(SQLServerStatementParser.TRUSTWORTHY, 0); }
		public TerminalNode GROUP() { return getToken(SQLServerStatementParser.GROUP, 0); }
		public TerminalNode ROWS() { return getToken(SQLServerStatementParser.ROWS, 0); }
		public TerminalNode DATE() { return getToken(SQLServerStatementParser.DATE, 0); }
		public TerminalNode DATEPART() { return getToken(SQLServerStatementParser.DATEPART, 0); }
		public TerminalNode CAST() { return getToken(SQLServerStatementParser.CAST, 0); }
		public TerminalNode DAY() { return getToken(SQLServerStatementParser.DAY, 0); }
		public TerminalNode FORWARD_ONLY() { return getToken(SQLServerStatementParser.FORWARD_ONLY, 0); }
		public TerminalNode KEYSET() { return getToken(SQLServerStatementParser.KEYSET, 0); }
		public TerminalNode FAST_FORWARD() { return getToken(SQLServerStatementParser.FAST_FORWARD, 0); }
		public TerminalNode READ_ONLY() { return getToken(SQLServerStatementParser.READ_ONLY, 0); }
		public TerminalNode SCROLL_LOCKS() { return getToken(SQLServerStatementParser.SCROLL_LOCKS, 0); }
		public TerminalNode OPTIMISTIC() { return getToken(SQLServerStatementParser.OPTIMISTIC, 0); }
		public TerminalNode TYPE_WARNING() { return getToken(SQLServerStatementParser.TYPE_WARNING, 0); }
		public TerminalNode SCHEMABINDING() { return getToken(SQLServerStatementParser.SCHEMABINDING, 0); }
		public TerminalNode CALLER() { return getToken(SQLServerStatementParser.CALLER, 0); }
		public TerminalNode OWNER() { return getToken(SQLServerStatementParser.OWNER, 0); }
		public TerminalNode SNAPSHOT() { return getToken(SQLServerStatementParser.SNAPSHOT, 0); }
		public TerminalNode REPEATABLE() { return getToken(SQLServerStatementParser.REPEATABLE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(SQLServerStatementParser.SERIALIZABLE, 0); }
		public TerminalNode NATIVE_COMPILATION() { return getToken(SQLServerStatementParser.NATIVE_COMPILATION, 0); }
		public TerminalNode VIEW_METADATA() { return getToken(SQLServerStatementParser.VIEW_METADATA, 0); }
		public TerminalNode INSTEAD() { return getToken(SQLServerStatementParser.INSTEAD, 0); }
		public TerminalNode APPEND() { return getToken(SQLServerStatementParser.APPEND, 0); }
		public TerminalNode INCREMENT() { return getToken(SQLServerStatementParser.INCREMENT, 0); }
		public TerminalNode CACHE() { return getToken(SQLServerStatementParser.CACHE, 0); }
		public TerminalNode MINVALUE() { return getToken(SQLServerStatementParser.MINVALUE, 0); }
		public TerminalNode MAXVALUE() { return getToken(SQLServerStatementParser.MAXVALUE, 0); }
		public TerminalNode RESTART() { return getToken(SQLServerStatementParser.RESTART, 0); }
		public TerminalNode LOB_COMPACTION() { return getToken(SQLServerStatementParser.LOB_COMPACTION, 0); }
		public TerminalNode COMPRESS_ALL_ROW_GROUPS() { return getToken(SQLServerStatementParser.COMPRESS_ALL_ROW_GROUPS, 0); }
		public TerminalNode REORGANIZE() { return getToken(SQLServerStatementParser.REORGANIZE, 0); }
		public TerminalNode RESUME() { return getToken(SQLServerStatementParser.RESUME, 0); }
		public TerminalNode PAUSE() { return getToken(SQLServerStatementParser.PAUSE, 0); }
		public TerminalNode ABORT() { return getToken(SQLServerStatementParser.ABORT, 0); }
		public TerminalNode ACCELERATED_DATABASE_RECOVERY() { return getToken(SQLServerStatementParser.ACCELERATED_DATABASE_RECOVERY, 0); }
		public TerminalNode PERSISTENT_VERSION_STORE_FILEGROUP() { return getToken(SQLServerStatementParser.PERSISTENT_VERSION_STORE_FILEGROUP, 0); }
		public TerminalNode IMMEDIATE() { return getToken(SQLServerStatementParser.IMMEDIATE, 0); }
		public TerminalNode NO_WAIT() { return getToken(SQLServerStatementParser.NO_WAIT, 0); }
		public TerminalNode TARGET_RECOVERY_TIME() { return getToken(SQLServerStatementParser.TARGET_RECOVERY_TIME, 0); }
		public TerminalNode SECONDS() { return getToken(SQLServerStatementParser.SECONDS, 0); }
		public TerminalNode HONOR_BROKER_PRIORITY() { return getToken(SQLServerStatementParser.HONOR_BROKER_PRIORITY, 0); }
		public TerminalNode ERROR_BROKER_CONVERSATIONS() { return getToken(SQLServerStatementParser.ERROR_BROKER_CONVERSATIONS, 0); }
		public TerminalNode NEW_BROKER() { return getToken(SQLServerStatementParser.NEW_BROKER, 0); }
		public TerminalNode DISABLE_BROKER() { return getToken(SQLServerStatementParser.DISABLE_BROKER, 0); }
		public TerminalNode ENABLE_BROKER() { return getToken(SQLServerStatementParser.ENABLE_BROKER, 0); }
		public TerminalNode MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT() { return getToken(SQLServerStatementParser.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT, 0); }
		public TerminalNode READ_COMMITTED_SNAPSHOT() { return getToken(SQLServerStatementParser.READ_COMMITTED_SNAPSHOT, 0); }
		public TerminalNode ALLOW_SNAPSHOT_ISOLATION() { return getToken(SQLServerStatementParser.ALLOW_SNAPSHOT_ISOLATION, 0); }
		public TerminalNode RECURSIVE_TRIGGERS() { return getToken(SQLServerStatementParser.RECURSIVE_TRIGGERS, 0); }
		public TerminalNode QUOTED_IDENTIFIER() { return getToken(SQLServerStatementParser.QUOTED_IDENTIFIER, 0); }
		public TerminalNode NUMERIC_ROUNDABORT() { return getToken(SQLServerStatementParser.NUMERIC_ROUNDABORT, 0); }
		public TerminalNode CONCAT_NULL_YIELDS_NULL() { return getToken(SQLServerStatementParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public TerminalNode COMPATIBILITY_LEVEL() { return getToken(SQLServerStatementParser.COMPATIBILITY_LEVEL, 0); }
		public TerminalNode ARITHABORT() { return getToken(SQLServerStatementParser.ARITHABORT, 0); }
		public TerminalNode ANSI_WARNINGS() { return getToken(SQLServerStatementParser.ANSI_WARNINGS, 0); }
		public TerminalNode ANSI_PADDING() { return getToken(SQLServerStatementParser.ANSI_PADDING, 0); }
		public TerminalNode ANSI_NULLS() { return getToken(SQLServerStatementParser.ANSI_NULLS, 0); }
		public TerminalNode ANSI_NULL_DEFAULT() { return getToken(SQLServerStatementParser.ANSI_NULL_DEFAULT, 0); }
		public TerminalNode PAGE_VERIFY() { return getToken(SQLServerStatementParser.PAGE_VERIFY, 0); }
		public TerminalNode CHECKSUM() { return getToken(SQLServerStatementParser.CHECKSUM, 0); }
		public TerminalNode TORN_PAGE_DETECTION() { return getToken(SQLServerStatementParser.TORN_PAGE_DETECTION, 0); }
		public TerminalNode BULK_LOGGED() { return getToken(SQLServerStatementParser.BULK_LOGGED, 0); }
		public TerminalNode RECOVERY() { return getToken(SQLServerStatementParser.RECOVERY, 0); }
		public TerminalNode TOTAL_EXECUTION_CPU_TIME_MS() { return getToken(SQLServerStatementParser.TOTAL_EXECUTION_CPU_TIME_MS, 0); }
		public TerminalNode TOTAL_COMPILE_CPU_TIME_MS() { return getToken(SQLServerStatementParser.TOTAL_COMPILE_CPU_TIME_MS, 0); }
		public TerminalNode STALE_CAPTURE_POLICY_THRESHOLD() { return getToken(SQLServerStatementParser.STALE_CAPTURE_POLICY_THRESHOLD, 0); }
		public TerminalNode EXECUTION_COUNT() { return getToken(SQLServerStatementParser.EXECUTION_COUNT, 0); }
		public TerminalNode QUERY_CAPTURE_POLICY() { return getToken(SQLServerStatementParser.QUERY_CAPTURE_POLICY, 0); }
		public TerminalNode WAIT_STATS_CAPTURE_MODE() { return getToken(SQLServerStatementParser.WAIT_STATS_CAPTURE_MODE, 0); }
		public TerminalNode MAX_PLANS_PER_QUERY() { return getToken(SQLServerStatementParser.MAX_PLANS_PER_QUERY, 0); }
		public TerminalNode QUERY_CAPTURE_MODE() { return getToken(SQLServerStatementParser.QUERY_CAPTURE_MODE, 0); }
		public TerminalNode SIZE_BASED_CLEANUP_MODE() { return getToken(SQLServerStatementParser.SIZE_BASED_CLEANUP_MODE, 0); }
		public TerminalNode INTERVAL_LENGTH_MINUTES() { return getToken(SQLServerStatementParser.INTERVAL_LENGTH_MINUTES, 0); }
		public TerminalNode MAX_STORAGE_SIZE_MB() { return getToken(SQLServerStatementParser.MAX_STORAGE_SIZE_MB, 0); }
		public TerminalNode DATA_FLUSH_INTERVAL_SECONDS() { return getToken(SQLServerStatementParser.DATA_FLUSH_INTERVAL_SECONDS, 0); }
		public TerminalNode CLEANUP_POLICY() { return getToken(SQLServerStatementParser.CLEANUP_POLICY, 0); }
		public TerminalNode CUSTOM() { return getToken(SQLServerStatementParser.CUSTOM, 0); }
		public TerminalNode STALE_QUERY_THRESHOLD_DAYS() { return getToken(SQLServerStatementParser.STALE_QUERY_THRESHOLD_DAYS, 0); }
		public TerminalNode OPERATION_MODE() { return getToken(SQLServerStatementParser.OPERATION_MODE, 0); }
		public TerminalNode QUERY_STORE() { return getToken(SQLServerStatementParser.QUERY_STORE, 0); }
		public TerminalNode CURSOR_DEFAULT() { return getToken(SQLServerStatementParser.CURSOR_DEFAULT, 0); }
		public TerminalNode GLOBAL() { return getToken(SQLServerStatementParser.GLOBAL, 0); }
		public TerminalNode CURSOR_CLOSE_ON_COMMIT() { return getToken(SQLServerStatementParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		public TerminalNode HOURS() { return getToken(SQLServerStatementParser.HOURS, 0); }
		public TerminalNode CHANGE_RETENTION() { return getToken(SQLServerStatementParser.CHANGE_RETENTION, 0); }
		public TerminalNode AUTO_CLEANUP() { return getToken(SQLServerStatementParser.AUTO_CLEANUP, 0); }
		public TerminalNode CHANGE_TRACKING() { return getToken(SQLServerStatementParser.CHANGE_TRACKING, 0); }
		public TerminalNode AUTOMATIC_TUNING() { return getToken(SQLServerStatementParser.AUTOMATIC_TUNING, 0); }
		public TerminalNode FORCE_LAST_GOOD_PLAN() { return getToken(SQLServerStatementParser.FORCE_LAST_GOOD_PLAN, 0); }
		public TerminalNode AUTO_UPDATE_STATISTICS_ASYNC() { return getToken(SQLServerStatementParser.AUTO_UPDATE_STATISTICS_ASYNC, 0); }
		public TerminalNode AUTO_UPDATE_STATISTICS() { return getToken(SQLServerStatementParser.AUTO_UPDATE_STATISTICS, 0); }
		public TerminalNode AUTO_SHRINK() { return getToken(SQLServerStatementParser.AUTO_SHRINK, 0); }
		public TerminalNode AUTO_CREATE_STATISTICS() { return getToken(SQLServerStatementParser.AUTO_CREATE_STATISTICS, 0); }
		public TerminalNode INCREMENTAL() { return getToken(SQLServerStatementParser.INCREMENTAL, 0); }
		public TerminalNode AUTO_CLOSE() { return getToken(SQLServerStatementParser.AUTO_CLOSE, 0); }
		public TerminalNode DATA_RETENTION() { return getToken(SQLServerStatementParser.DATA_RETENTION, 0); }
		public TerminalNode TEMPORAL_HISTORY_RETENTION() { return getToken(SQLServerStatementParser.TEMPORAL_HISTORY_RETENTION, 0); }
		public TerminalNode EDITION() { return getToken(SQLServerStatementParser.EDITION, 0); }
		public TerminalNode MIXED_PAGE_ALLOCATION() { return getToken(SQLServerStatementParser.MIXED_PAGE_ALLOCATION, 0); }
		public TerminalNode DISABLED() { return getToken(SQLServerStatementParser.DISABLED, 0); }
		public TerminalNode ALLOWED() { return getToken(SQLServerStatementParser.ALLOWED, 0); }
		public TerminalNode HADR() { return getToken(SQLServerStatementParser.HADR, 0); }
		public TerminalNode MULTI_USER() { return getToken(SQLServerStatementParser.MULTI_USER, 0); }
		public TerminalNode RESTRICTED_USER() { return getToken(SQLServerStatementParser.RESTRICTED_USER, 0); }
		public TerminalNode SINGLE_USER() { return getToken(SQLServerStatementParser.SINGLE_USER, 0); }
		public TerminalNode OFFLINE() { return getToken(SQLServerStatementParser.OFFLINE, 0); }
		public TerminalNode EMERGENCY() { return getToken(SQLServerStatementParser.EMERGENCY, 0); }
		public TerminalNode SUSPEND() { return getToken(SQLServerStatementParser.SUSPEND, 0); }
		public TerminalNode DATE_CORRELATION_OPTIMIZATION() { return getToken(SQLServerStatementParser.DATE_CORRELATION_OPTIMIZATION, 0); }
		public TerminalNode ELASTIC_POOL() { return getToken(SQLServerStatementParser.ELASTIC_POOL, 0); }
		public TerminalNode SERVICE_OBJECTIVE() { return getToken(SQLServerStatementParser.SERVICE_OBJECTIVE, 0); }
		public TerminalNode DATABASE_NAME() { return getToken(SQLServerStatementParser.DATABASE_NAME, 0); }
		public TerminalNode ALLOW_CONNECTIONS() { return getToken(SQLServerStatementParser.ALLOW_CONNECTIONS, 0); }
		public TerminalNode GEO() { return getToken(SQLServerStatementParser.GEO, 0); }
		public TerminalNode NAMED() { return getToken(SQLServerStatementParser.NAMED, 0); }
		public TerminalNode DATEFIRST() { return getToken(SQLServerStatementParser.DATEFIRST, 0); }
		public TerminalNode BACKUP_STORAGE_REDUNDANCY() { return getToken(SQLServerStatementParser.BACKUP_STORAGE_REDUNDANCY, 0); }
		public TerminalNode FORCE_FAILOVER_ALLOW_DATA_LOSS() { return getToken(SQLServerStatementParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0); }
		public TerminalNode SECONDARY() { return getToken(SQLServerStatementParser.SECONDARY, 0); }
		public TerminalNode FAILOVER() { return getToken(SQLServerStatementParser.FAILOVER, 0); }
		public TerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return getToken(SQLServerStatementParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(SQLServerStatementParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode INLINE() { return getToken(SQLServerStatementParser.INLINE, 0); }
		public TerminalNode NESTED_TRIGGERS() { return getToken(SQLServerStatementParser.NESTED_TRIGGERS, 0); }
		public TerminalNode TRANSFORM_NOISE_WORDS() { return getToken(SQLServerStatementParser.TRANSFORM_NOISE_WORDS, 0); }
		public TerminalNode TWO_DIGIT_YEAR_CUTOFF() { return getToken(SQLServerStatementParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public TerminalNode PERSISTENT_LOG_BUFFER() { return getToken(SQLServerStatementParser.PERSISTENT_LOG_BUFFER, 0); }
		public TerminalNode DIRECTORY_NAME() { return getToken(SQLServerStatementParser.DIRECTORY_NAME, 0); }
		public TerminalNode DATEFORMAT() { return getToken(SQLServerStatementParser.DATEFORMAT, 0); }
		public TerminalNode DELAYED_DURABILITY() { return getToken(SQLServerStatementParser.DELAYED_DURABILITY, 0); }
		public TerminalNode TRANSFER() { return getToken(SQLServerStatementParser.TRANSFER, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLServerStatementParser.SCHEMA, 0); }
		public TerminalNode PASSWORD() { return getToken(SQLServerStatementParser.PASSWORD, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(SQLServerStatementParser.AUTHORIZATION, 0); }
		public TerminalNode MEMBER() { return getToken(SQLServerStatementParser.MEMBER, 0); }
		public TerminalNode SEARCH() { return getToken(SQLServerStatementParser.SEARCH, 0); }
		public TerminalNode TEXT() { return getToken(SQLServerStatementParser.TEXT, 0); }
		public TerminalNode SECOND() { return getToken(SQLServerStatementParser.SECOND, 0); }
		public TerminalNode PRECISION() { return getToken(SQLServerStatementParser.PRECISION, 0); }
		public TerminalNode VIEWS() { return getToken(SQLServerStatementParser.VIEWS, 0); }
		public TerminalNode PROVIDER() { return getToken(SQLServerStatementParser.PROVIDER, 0); }
		public TerminalNode COLUMNS() { return getToken(SQLServerStatementParser.COLUMNS, 0); }
		public TerminalNode SUBSTRING() { return getToken(SQLServerStatementParser.SUBSTRING, 0); }
		public TerminalNode RETURNS() { return getToken(SQLServerStatementParser.RETURNS, 0); }
		public TerminalNode SIZE() { return getToken(SQLServerStatementParser.SIZE, 0); }
		public TerminalNode CONTAINS() { return getToken(SQLServerStatementParser.CONTAINS, 0); }
		public TerminalNode MONTH() { return getToken(SQLServerStatementParser.MONTH, 0); }
		public TerminalNode INPUT() { return getToken(SQLServerStatementParser.INPUT, 0); }
		public TerminalNode YEAR() { return getToken(SQLServerStatementParser.YEAR, 0); }
		public TerminalNode TIMESTAMP() { return getToken(SQLServerStatementParser.TIMESTAMP, 0); }
		public TerminalNode TRIM() { return getToken(SQLServerStatementParser.TRIM, 0); }
		public TerminalNode USER() { return getToken(SQLServerStatementParser.USER, 0); }
		public TerminalNode RIGHT() { return getToken(SQLServerStatementParser.RIGHT, 0); }
		public TerminalNode JSON() { return getToken(SQLServerStatementParser.JSON, 0); }
		public TerminalNode SID() { return getToken(SQLServerStatementParser.SID, 0); }
		public TerminalNode OPENQUERY() { return getToken(SQLServerStatementParser.OPENQUERY, 0); }
		public TerminalNode ACTION() { return getToken(SQLServerStatementParser.ACTION, 0); }
		public TerminalNode TARGET() { return getToken(SQLServerStatementParser.TARGET, 0); }
		public TerminalNode HOUR() { return getToken(SQLServerStatementParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(SQLServerStatementParser.MINUTE, 0); }
		public TerminalNode TABLE() { return getToken(SQLServerStatementParser.TABLE, 0); }
		public UnreservedWordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unreservedWord; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterUnreservedWord(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitUnreservedWord(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitUnreservedWord(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnreservedWordContext unreservedWord() throws RecognitionException {
		UnreservedWordContext _localctx = new UnreservedWordContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_unreservedWord);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1269);
			_la = _input.LA(1);
			if ( !(((((_la - 53)) & ~0x3f) == 0 && ((1L << (_la - 53)) & 35737886458179L) != 0) || ((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & 331536634476137569L) != 0) || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & 288230376740488193L) != 0) || ((((_la - 248)) & ~0x3f) == 0 && ((1L << (_la - 248)) & -2308112406049976835L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -33030145L) != 0) || ((((_la - 376)) & ~0x3f) == 0 && ((1L << (_la - 376)) & -1L) != 0) || ((((_la - 440)) & ~0x3f) == 0 && ((1L << (_la - 440)) & 15032922111L) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & 72020040051130367L) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & -1L) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & 2405748621443071L) != 0) || _la==JSON || _la==OPENQUERY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DatabaseNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DatabaseNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_databaseName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDatabaseName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDatabaseName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDatabaseName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatabaseNameContext databaseName() throws RecognitionException {
		DatabaseNameContext _localctx = new DatabaseNameContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_databaseName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1271);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SchemaNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSchemaName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSchemaName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSchemaName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaNameContext schemaName() throws RecognitionException {
		SchemaNameContext _localctx = new SchemaNameContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_schemaName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1273);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionNameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(SQLServerStatementParser.DOT_, 0); }
		public FunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitFunctionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionNameContext functionName() throws RecognitionException {
		FunctionNameContext _localctx = new FunctionNameContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_functionName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1278);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,20,_ctx) ) {
			case 1:
				{
				setState(1275);
				owner();
				setState(1276);
				match(DOT_);
				}
				break;
			}
			setState(1280);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProcedureNameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(SQLServerStatementParser.DOT_, 0); }
		public TerminalNode SEMI_() { return getToken(SQLServerStatementParser.SEMI_, 0); }
		public NumberLiteralsContext numberLiterals() {
			return getRuleContext(NumberLiteralsContext.class,0);
		}
		public ProcedureNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterProcedureName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitProcedureName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitProcedureName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureNameContext procedureName() throws RecognitionException {
		ProcedureNameContext _localctx = new ProcedureNameContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_procedureName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1285);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {
			case 1:
				{
				setState(1282);
				owner();
				setState(1283);
				match(DOT_);
				}
				break;
			}
			setState(1287);
			name();
			setState(1290);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,22,_ctx) ) {
			case 1:
				{
				setState(1288);
				match(SEMI_);
				setState(1289);
				numberLiterals();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ViewNameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(SQLServerStatementParser.DOT_, 0); }
		public ViewNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterViewName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitViewName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitViewName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewNameContext viewName() throws RecognitionException {
		ViewNameContext _localctx = new ViewNameContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_viewName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1295);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,23,_ctx) ) {
			case 1:
				{
				setState(1292);
				owner();
				setState(1293);
				match(DOT_);
				}
				break;
			}
			setState(1297);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerNameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(SQLServerStatementParser.DOT_, 0); }
		public TriggerNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterTriggerName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitTriggerName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitTriggerName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerNameContext triggerName() throws RecognitionException {
		TriggerNameContext _localctx = new TriggerNameContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_triggerName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1302);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,24,_ctx) ) {
			case 1:
				{
				setState(1299);
				schemaName();
				setState(1300);
				match(DOT_);
				}
				break;
			}
			setState(1304);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SequenceNameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(SQLServerStatementParser.DOT_, 0); }
		public SequenceNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequenceName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSequenceName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSequenceName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSequenceName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceNameContext sequenceName() throws RecognitionException {
		SequenceNameContext _localctx = new SequenceNameContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_sequenceName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1309);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				setState(1306);
				schemaName();
				setState(1307);
				match(DOT_);
				}
				break;
			}
			setState(1311);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableNameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public List<TerminalNode> DOT_() { return getTokens(SQLServerStatementParser.DOT_); }
		public TerminalNode DOT_(int i) {
			return getToken(SQLServerStatementParser.DOT_, i);
		}
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNameContext tableName() throws RecognitionException {
		TableNameContext _localctx = new TableNameContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_tableName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1322);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
			case 1:
				{
				setState(1316);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
				case 1:
					{
					setState(1313);
					databaseName();
					setState(1314);
					match(DOT_);
					}
					break;
				}
				{
				setState(1319);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 53)) & ~0x3f) == 0 && ((1L << (_la - 53)) & 35737886458179L) != 0) || ((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & 331536634476137569L) != 0) || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & 288230376740488193L) != 0) || ((((_la - 248)) & ~0x3f) == 0 && ((1L << (_la - 248)) & -2308112406049976835L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -33030145L) != 0) || ((((_la - 376)) & ~0x3f) == 0 && ((1L << (_la - 376)) & -1L) != 0) || ((((_la - 440)) & ~0x3f) == 0 && ((1L << (_la - 440)) & 15032922111L) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & 72020040051130367L) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & -1L) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & 2405748621443071L) != 0) || ((((_la - 712)) & ~0x3f) == 0 && ((1L << (_la - 712)) & 6324225L) != 0)) {
					{
					setState(1318);
					owner();
					}
				}

				setState(1321);
				match(DOT_);
				}
				}
				break;
			}
			setState(1324);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QueueNameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(SQLServerStatementParser.DOT_, 0); }
		public QueueNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queueName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterQueueName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitQueueName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitQueueName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueueNameContext queueName() throws RecognitionException {
		QueueNameContext _localctx = new QueueNameContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_queueName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1329);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				setState(1326);
				schemaName();
				setState(1327);
				match(DOT_);
				}
				break;
			}
			setState(1331);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ContractNameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ContractNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_contractName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterContractName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitContractName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitContractName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ContractNameContext contractName() throws RecognitionException {
		ContractNameContext _localctx = new ContractNameContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_contractName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1333);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ServiceNameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ServiceNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serviceName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterServiceName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitServiceName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitServiceName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServiceNameContext serviceName() throws RecognitionException {
		ServiceNameContext _localctx = new ServiceNameContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_serviceName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1335);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnNameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ScriptVariableNameContext scriptVariableName() {
			return getRuleContext(ScriptVariableNameContext.class,0);
		}
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public List<TerminalNode> DOT_() { return getTokens(SQLServerStatementParser.DOT_); }
		public TerminalNode DOT_(int i) {
			return getToken(SQLServerStatementParser.DOT_, i);
		}
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public ColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNameContext columnName() throws RecognitionException {
		ColumnNameContext _localctx = new ColumnNameContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_columnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1345);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,31,_ctx) ) {
			case 1:
				{
				setState(1340);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {
				case 1:
					{
					setState(1337);
					databaseName();
					setState(1338);
					match(DOT_);
					}
					break;
				}
				{
				setState(1342);
				owner();
				setState(1343);
				match(DOT_);
				}
				}
				break;
			}
			setState(1349);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TRUNCATE:
			case SCHEMA:
			case TABLE:
			case COLUMNS:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case RIGHT:
			case OFF:
			case GROUP:
			case LIMIT:
			case OFFSET:
			case SAVEPOINT:
			case BOOLEAN:
			case ARRAY:
			case DATE:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MICROSECOND:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case AVG:
			case ENABLE:
			case DISABLE:
			case INSTANCE:
			case DO:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case NEXT:
			case NAME:
			case INTEGER:
			case TYPE:
			case TEXT:
			case VIEWS:
			case READ_ONLY:
			case DATABASE:
			case RETURNS:
			case DATEPART:
			case PASSWORD:
			case TARGET:
			case BINARY:
			case HIDDEN_:
			case MOD:
			case PARTITION:
			case PARTITIONS:
			case TOP:
			case ROW:
			case ROWS:
			case XOR:
			case ALWAYS:
			case USER:
			case ROLE:
			case START:
			case ACTION:
			case ALGORITHM:
			case AUTO:
			case BLOCKERS:
			case CLUSTERED:
			case NONCLUSTERED:
			case COLUMNSTORE:
			case CONTENT:
			case YEARS:
			case MONTHS:
			case WEEKS:
			case DAYS:
			case MINUTES:
			case DENY:
			case DETERMINISTIC:
			case DISTRIBUTION:
			case DOCUMENT:
			case DURABILITY:
			case ENCRYPTED:
			case FILESTREAM:
			case FILETABLE:
			case FILLFACTOR:
			case FOLLOWING:
			case HASH:
			case HEAP:
			case INBOUND:
			case OUTBOUND:
			case UNBOUNDED:
			case INFINITE:
			case LOGIN:
			case MASKED:
			case MAXDOP:
			case MOVE:
			case NOCHECK:
			case OBJECT:
			case ONLINE:
			case OVER:
			case PAGE:
			case PAUSED:
			case PERIOD:
			case PERSISTED:
			case PRECEDING:
			case RANDOMIZED:
			case RANGE:
			case REBUILD:
			case REPLICATE:
			case REPLICATION:
			case RESUMABLE:
			case ROWGUIDCOL:
			case SAVE:
			case SELF:
			case SPARSE:
			case SWITCH:
			case TRAN:
			case TRANCOUNT:
			case CONTROL:
			case CONCAT:
			case TAKE:
			case OWNERSHIP:
			case DEFINITION:
			case APPLICATION:
			case ASSEMBLY:
			case SYMMETRIC:
			case ASYMMETRIC:
			case SERVER:
			case RECEIVE:
			case CHANGE:
			case TRACE:
			case TRACKING:
			case RESOURCES:
			case SETTINGS:
			case STATE:
			case AVAILABILITY:
			case CREDENTIAL:
			case ENDPOINT:
			case EVENT:
			case NOTIFICATION:
			case LINKED:
			case AUDIT:
			case DDL:
			case XML:
			case IMPERSONATE:
			case SECURABLES:
			case AUTHENTICATE:
			case EXTERNAL:
			case ACCESS:
			case ADMINISTER:
			case BULK:
			case OPERATIONS:
			case UNSAFE:
			case SHUTDOWN:
			case SCOPED:
			case CONFIGURATION:
			case DATASPACE:
			case SERVICE:
			case CERTIFICATE:
			case CONTRACT:
			case ENCRYPTION:
			case MASTER:
			case DATA:
			case SOURCE:
			case FILE:
			case FORMAT:
			case LIBRARY:
			case FULLTEXT:
			case MASK:
			case UNMASK:
			case MESSAGE:
			case REMOTE:
			case BINDING:
			case ROUTE:
			case SECURITY:
			case POLICY:
			case AGGREGATE:
			case QUEUE:
			case RULE:
			case SYNONYM:
			case COLLECTION:
			case SCRIPT:
			case KILL:
			case BACKUP:
			case LOG:
			case SHOWPLAN:
			case SUBSCRIBE:
			case QUERY:
			case NOTIFICATIONS:
			case CHECKPOINT:
			case SEQUENCE:
			case ABORT_AFTER_WAIT:
			case ALLOW_PAGE_LOCKS:
			case ALLOW_ROW_LOCKS:
			case ALL_SPARSE_COLUMNS:
			case BUCKET_COUNT:
			case COLUMNSTORE_ARCHIVE:
			case COLUMN_ENCRYPTION_KEY:
			case COLUMN_SET:
			case COMPRESSION_DELAY:
			case DATABASE_DEAULT:
			case DATA_COMPRESSION:
			case DATA_CONSISTENCY_CHECK:
			case ENCRYPTION_TYPE:
			case SYSTEM_TIME:
			case SYSTEM_VERSIONING:
			case TEXTIMAGE_ON:
			case WAIT_AT_LOW_PRIORITY:
			case STATISTICS_INCREMENTAL:
			case STATISTICS_NORECOMPUTE:
			case ROUND_ROBIN:
			case SCHEMA_AND_DATA:
			case SCHEMA_ONLY:
			case SORT_IN_TEMPDB:
			case IGNORE_DUP_KEY:
			case IMPLICIT_TRANSACTIONS:
			case MAX_DURATION:
			case MEMORY_OPTIMIZED:
			case MIGRATION_STATE:
			case PAD_INDEX:
			case REMOTE_DATA_ARCHIVE:
			case FILESTREAM_ON:
			case FILETABLE_COLLATE_FILENAME:
			case FILETABLE_DIRECTORY:
			case FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME:
			case FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME:
			case FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME:
			case FILTER_PREDICATE:
			case HISTORY_RETENTION_PERIOD:
			case HISTORY_TABLE:
			case LOCK_ESCALATION:
			case DROP_EXISTING:
			case ROW_NUMBER:
			case FIRST:
			case DATETIME2:
			case OUTPUT:
			case INSERTED:
			case DELETED:
			case FILENAME:
			case SIZE:
			case MAXSIZE:
			case FILEGROWTH:
			case UNLIMITED:
			case KB:
			case MB:
			case GB:
			case TB:
			case CONTAINS:
			case MEMORY_OPTIMIZED_DATA:
			case FILEGROUP:
			case NON_TRANSACTED_ACCESS:
			case DB_CHAINING:
			case TRUSTWORTHY:
			case FORWARD_ONLY:
			case KEYSET:
			case FAST_FORWARD:
			case SCROLL_LOCKS:
			case OPTIMISTIC:
			case TYPE_WARNING:
			case SCHEMABINDING:
			case CALLER:
			case INPUT:
			case OWNER:
			case SNAPSHOT:
			case REPEATABLE:
			case SERIALIZABLE:
			case NATIVE_COMPILATION:
			case VIEW_METADATA:
			case INSTEAD:
			case APPEND:
			case INCREMENT:
			case CACHE:
			case MINVALUE:
			case MAXVALUE:
			case RESTART:
			case LOB_COMPACTION:
			case COMPRESS_ALL_ROW_GROUPS:
			case REORGANIZE:
			case RESUME:
			case PAUSE:
			case ABORT:
			case ACCELERATED_DATABASE_RECOVERY:
			case PERSISTENT_VERSION_STORE_FILEGROUP:
			case IMMEDIATE:
			case NO_WAIT:
			case TARGET_RECOVERY_TIME:
			case SECONDS:
			case HONOR_BROKER_PRIORITY:
			case ERROR_BROKER_CONVERSATIONS:
			case NEW_BROKER:
			case DISABLE_BROKER:
			case ENABLE_BROKER:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case READ_COMMITTED_SNAPSHOT:
			case ALLOW_SNAPSHOT_ISOLATION:
			case RECURSIVE_TRIGGERS:
			case QUOTED_IDENTIFIER:
			case NUMERIC_ROUNDABORT:
			case CONCAT_NULL_YIELDS_NULL:
			case COMPATIBILITY_LEVEL:
			case ARITHABORT:
			case ANSI_WARNINGS:
			case ANSI_PADDING:
			case ANSI_NULLS:
			case ANSI_NULL_DEFAULT:
			case PAGE_VERIFY:
			case CHECKSUM:
			case TORN_PAGE_DETECTION:
			case BULK_LOGGED:
			case RECOVERY:
			case TOTAL_EXECUTION_CPU_TIME_MS:
			case TOTAL_COMPILE_CPU_TIME_MS:
			case STALE_CAPTURE_POLICY_THRESHOLD:
			case EXECUTION_COUNT:
			case QUERY_CAPTURE_POLICY:
			case WAIT_STATS_CAPTURE_MODE:
			case MAX_PLANS_PER_QUERY:
			case QUERY_CAPTURE_MODE:
			case SIZE_BASED_CLEANUP_MODE:
			case INTERVAL_LENGTH_MINUTES:
			case MAX_STORAGE_SIZE_MB:
			case DATA_FLUSH_INTERVAL_SECONDS:
			case CLEANUP_POLICY:
			case CUSTOM:
			case STALE_QUERY_THRESHOLD_DAYS:
			case OPERATION_MODE:
			case QUERY_STORE:
			case CURSOR_DEFAULT:
			case GLOBAL:
			case CURSOR_CLOSE_ON_COMMIT:
			case HOURS:
			case CHANGE_RETENTION:
			case AUTO_CLEANUP:
			case CHANGE_TRACKING:
			case AUTOMATIC_TUNING:
			case FORCE_LAST_GOOD_PLAN:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_CREATE_STATISTICS:
			case INCREMENTAL:
			case AUTO_CLOSE:
			case DATA_RETENTION:
			case TEMPORAL_HISTORY_RETENTION:
			case EDITION:
			case MIXED_PAGE_ALLOCATION:
			case DISABLED:
			case ALLOWED:
			case HADR:
			case MULTI_USER:
			case RESTRICTED_USER:
			case SINGLE_USER:
			case OFFLINE:
			case EMERGENCY:
			case SUSPEND:
			case DATE_CORRELATION_OPTIMIZATION:
			case ELASTIC_POOL:
			case SERVICE_OBJECTIVE:
			case DATABASE_NAME:
			case ALLOW_CONNECTIONS:
			case GEO:
			case NAMED:
			case DATEFIRST:
			case BACKUP_STORAGE_REDUNDANCY:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case SECONDARY:
			case FAILOVER:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case INLINE:
			case NESTED_TRIGGERS:
			case TRANSFORM_NOISE_WORDS:
			case TWO_DIGIT_YEAR_CUTOFF:
			case PERSISTENT_LOG_BUFFER:
			case DIRECTORY_NAME:
			case DATEFORMAT:
			case DELAYED_DURABILITY:
			case AUTHORIZATION:
			case TRANSFER:
			case PROVIDER:
			case SID:
			case SEARCH:
			case MEMBER:
			case JSON:
			case OPENQUERY:
			case IDENTIFIER_:
			case DELIMITED_IDENTIFIER_:
				{
				setState(1347);
				name();
				}
				break;
			case DOLLAR_:
				{
				setState(1348);
				scriptVariableName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ScriptVariableNameContext extends ParserRuleContext {
		public TerminalNode DOLLAR_() { return getToken(SQLServerStatementParser.DOLLAR_, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public ScriptVariableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scriptVariableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterScriptVariableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitScriptVariableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitScriptVariableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScriptVariableNameContext scriptVariableName() throws RecognitionException {
		ScriptVariableNameContext _localctx = new ScriptVariableNameContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_scriptVariableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1351);
			match(DOLLAR_);
			setState(1352);
			match(LP_);
			setState(1353);
			name();
			setState(1354);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OwnerContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public OwnerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_owner; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterOwner(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitOwner(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitOwner(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OwnerContext owner() throws RecognitionException {
		OwnerContext _localctx = new OwnerContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_owner);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1356);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public NameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NameContext name() throws RecognitionException {
		NameContext _localctx = new NameContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1358);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnNamesContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public ColumnNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnNames; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterColumnNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitColumnNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitColumnNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNamesContext columnNames() throws RecognitionException {
		ColumnNamesContext _localctx = new ColumnNamesContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_columnNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1360);
			match(LP_);
			setState(1361);
			columnName();
			setState(1366);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1362);
				match(COMMA_);
				setState(1363);
				columnName();
				}
				}
				setState(1368);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1369);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnNamesWithSortContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<ColumnNameWithSortContext> columnNameWithSort() {
			return getRuleContexts(ColumnNameWithSortContext.class);
		}
		public ColumnNameWithSortContext columnNameWithSort(int i) {
			return getRuleContext(ColumnNameWithSortContext.class,i);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public ColumnNamesWithSortContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnNamesWithSort; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterColumnNamesWithSort(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitColumnNamesWithSort(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitColumnNamesWithSort(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNamesWithSortContext columnNamesWithSort() throws RecognitionException {
		ColumnNamesWithSortContext _localctx = new ColumnNamesWithSortContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_columnNamesWithSort);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1371);
			match(LP_);
			setState(1372);
			columnNameWithSort();
			setState(1377);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1373);
				match(COMMA_);
				setState(1374);
				columnNameWithSort();
				}
				}
				setState(1379);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1380);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableNamesContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public TableNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableNames; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterTableNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitTableNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitTableNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNamesContext tableNames() throws RecognitionException {
		TableNamesContext _localctx = new TableNamesContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_tableNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1383);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(1382);
				match(LP_);
				}
			}

			setState(1385);
			tableName();
			setState(1390);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1386);
				match(COMMA_);
				setState(1387);
				tableName();
				}
				}
				setState(1392);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1394);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RP_) {
				{
				setState(1393);
				match(RP_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public IndexNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterIndexName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitIndexName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitIndexName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexNameContext indexName() throws RecognitionException {
		IndexNameContext _localctx = new IndexNameContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_indexName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1396);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstraintNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ConstraintNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterConstraintName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitConstraintName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitConstraintName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintNameContext constraintName() throws RecognitionException {
		ConstraintNameContext _localctx = new ConstraintNameContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_constraintName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1398);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CollationNameContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(SQLServerStatementParser.STRING_, 0); }
		public TerminalNode IDENTIFIER_() { return getToken(SQLServerStatementParser.IDENTIFIER_, 0); }
		public CollationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCollationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCollationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCollationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollationNameContext collationName() throws RecognitionException {
		CollationNameContext _localctx = new CollationNameContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_collationName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1400);
			_la = _input.LA(1);
			if ( !(_la==IDENTIFIER_ || _la==STRING_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode STRING_() { return getToken(SQLServerStatementParser.STRING_, 0); }
		public TerminalNode NCHAR_TEXT() { return getToken(SQLServerStatementParser.NCHAR_TEXT, 0); }
		public AliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AliasContext alias() throws RecognitionException {
		AliasContext _localctx = new AliasContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_alias);
		try {
			setState(1405);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TRUNCATE:
			case SCHEMA:
			case TABLE:
			case COLUMNS:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case RIGHT:
			case OFF:
			case GROUP:
			case LIMIT:
			case OFFSET:
			case SAVEPOINT:
			case BOOLEAN:
			case ARRAY:
			case DATE:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MICROSECOND:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case AVG:
			case ENABLE:
			case DISABLE:
			case INSTANCE:
			case DO:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case NEXT:
			case NAME:
			case INTEGER:
			case TYPE:
			case TEXT:
			case VIEWS:
			case READ_ONLY:
			case DATABASE:
			case RETURNS:
			case DATEPART:
			case PASSWORD:
			case TARGET:
			case BINARY:
			case HIDDEN_:
			case MOD:
			case PARTITION:
			case PARTITIONS:
			case TOP:
			case ROW:
			case ROWS:
			case XOR:
			case ALWAYS:
			case USER:
			case ROLE:
			case START:
			case ACTION:
			case ALGORITHM:
			case AUTO:
			case BLOCKERS:
			case CLUSTERED:
			case NONCLUSTERED:
			case COLUMNSTORE:
			case CONTENT:
			case YEARS:
			case MONTHS:
			case WEEKS:
			case DAYS:
			case MINUTES:
			case DENY:
			case DETERMINISTIC:
			case DISTRIBUTION:
			case DOCUMENT:
			case DURABILITY:
			case ENCRYPTED:
			case FILESTREAM:
			case FILETABLE:
			case FILLFACTOR:
			case FOLLOWING:
			case HASH:
			case HEAP:
			case INBOUND:
			case OUTBOUND:
			case UNBOUNDED:
			case INFINITE:
			case LOGIN:
			case MASKED:
			case MAXDOP:
			case MOVE:
			case NOCHECK:
			case OBJECT:
			case ONLINE:
			case OVER:
			case PAGE:
			case PAUSED:
			case PERIOD:
			case PERSISTED:
			case PRECEDING:
			case RANDOMIZED:
			case RANGE:
			case REBUILD:
			case REPLICATE:
			case REPLICATION:
			case RESUMABLE:
			case ROWGUIDCOL:
			case SAVE:
			case SELF:
			case SPARSE:
			case SWITCH:
			case TRAN:
			case TRANCOUNT:
			case CONTROL:
			case CONCAT:
			case TAKE:
			case OWNERSHIP:
			case DEFINITION:
			case APPLICATION:
			case ASSEMBLY:
			case SYMMETRIC:
			case ASYMMETRIC:
			case SERVER:
			case RECEIVE:
			case CHANGE:
			case TRACE:
			case TRACKING:
			case RESOURCES:
			case SETTINGS:
			case STATE:
			case AVAILABILITY:
			case CREDENTIAL:
			case ENDPOINT:
			case EVENT:
			case NOTIFICATION:
			case LINKED:
			case AUDIT:
			case DDL:
			case XML:
			case IMPERSONATE:
			case SECURABLES:
			case AUTHENTICATE:
			case EXTERNAL:
			case ACCESS:
			case ADMINISTER:
			case BULK:
			case OPERATIONS:
			case UNSAFE:
			case SHUTDOWN:
			case SCOPED:
			case CONFIGURATION:
			case DATASPACE:
			case SERVICE:
			case CERTIFICATE:
			case CONTRACT:
			case ENCRYPTION:
			case MASTER:
			case DATA:
			case SOURCE:
			case FILE:
			case FORMAT:
			case LIBRARY:
			case FULLTEXT:
			case MASK:
			case UNMASK:
			case MESSAGE:
			case REMOTE:
			case BINDING:
			case ROUTE:
			case SECURITY:
			case POLICY:
			case AGGREGATE:
			case QUEUE:
			case RULE:
			case SYNONYM:
			case COLLECTION:
			case SCRIPT:
			case KILL:
			case BACKUP:
			case LOG:
			case SHOWPLAN:
			case SUBSCRIBE:
			case QUERY:
			case NOTIFICATIONS:
			case CHECKPOINT:
			case SEQUENCE:
			case ABORT_AFTER_WAIT:
			case ALLOW_PAGE_LOCKS:
			case ALLOW_ROW_LOCKS:
			case ALL_SPARSE_COLUMNS:
			case BUCKET_COUNT:
			case COLUMNSTORE_ARCHIVE:
			case COLUMN_ENCRYPTION_KEY:
			case COLUMN_SET:
			case COMPRESSION_DELAY:
			case DATABASE_DEAULT:
			case DATA_COMPRESSION:
			case DATA_CONSISTENCY_CHECK:
			case ENCRYPTION_TYPE:
			case SYSTEM_TIME:
			case SYSTEM_VERSIONING:
			case TEXTIMAGE_ON:
			case WAIT_AT_LOW_PRIORITY:
			case STATISTICS_INCREMENTAL:
			case STATISTICS_NORECOMPUTE:
			case ROUND_ROBIN:
			case SCHEMA_AND_DATA:
			case SCHEMA_ONLY:
			case SORT_IN_TEMPDB:
			case IGNORE_DUP_KEY:
			case IMPLICIT_TRANSACTIONS:
			case MAX_DURATION:
			case MEMORY_OPTIMIZED:
			case MIGRATION_STATE:
			case PAD_INDEX:
			case REMOTE_DATA_ARCHIVE:
			case FILESTREAM_ON:
			case FILETABLE_COLLATE_FILENAME:
			case FILETABLE_DIRECTORY:
			case FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME:
			case FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME:
			case FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME:
			case FILTER_PREDICATE:
			case HISTORY_RETENTION_PERIOD:
			case HISTORY_TABLE:
			case LOCK_ESCALATION:
			case DROP_EXISTING:
			case ROW_NUMBER:
			case FIRST:
			case DATETIME2:
			case OUTPUT:
			case INSERTED:
			case DELETED:
			case FILENAME:
			case SIZE:
			case MAXSIZE:
			case FILEGROWTH:
			case UNLIMITED:
			case KB:
			case MB:
			case GB:
			case TB:
			case CONTAINS:
			case MEMORY_OPTIMIZED_DATA:
			case FILEGROUP:
			case NON_TRANSACTED_ACCESS:
			case DB_CHAINING:
			case TRUSTWORTHY:
			case FORWARD_ONLY:
			case KEYSET:
			case FAST_FORWARD:
			case SCROLL_LOCKS:
			case OPTIMISTIC:
			case TYPE_WARNING:
			case SCHEMABINDING:
			case CALLER:
			case INPUT:
			case OWNER:
			case SNAPSHOT:
			case REPEATABLE:
			case SERIALIZABLE:
			case NATIVE_COMPILATION:
			case VIEW_METADATA:
			case INSTEAD:
			case APPEND:
			case INCREMENT:
			case CACHE:
			case MINVALUE:
			case MAXVALUE:
			case RESTART:
			case LOB_COMPACTION:
			case COMPRESS_ALL_ROW_GROUPS:
			case REORGANIZE:
			case RESUME:
			case PAUSE:
			case ABORT:
			case ACCELERATED_DATABASE_RECOVERY:
			case PERSISTENT_VERSION_STORE_FILEGROUP:
			case IMMEDIATE:
			case NO_WAIT:
			case TARGET_RECOVERY_TIME:
			case SECONDS:
			case HONOR_BROKER_PRIORITY:
			case ERROR_BROKER_CONVERSATIONS:
			case NEW_BROKER:
			case DISABLE_BROKER:
			case ENABLE_BROKER:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case READ_COMMITTED_SNAPSHOT:
			case ALLOW_SNAPSHOT_ISOLATION:
			case RECURSIVE_TRIGGERS:
			case QUOTED_IDENTIFIER:
			case NUMERIC_ROUNDABORT:
			case CONCAT_NULL_YIELDS_NULL:
			case COMPATIBILITY_LEVEL:
			case ARITHABORT:
			case ANSI_WARNINGS:
			case ANSI_PADDING:
			case ANSI_NULLS:
			case ANSI_NULL_DEFAULT:
			case PAGE_VERIFY:
			case CHECKSUM:
			case TORN_PAGE_DETECTION:
			case BULK_LOGGED:
			case RECOVERY:
			case TOTAL_EXECUTION_CPU_TIME_MS:
			case TOTAL_COMPILE_CPU_TIME_MS:
			case STALE_CAPTURE_POLICY_THRESHOLD:
			case EXECUTION_COUNT:
			case QUERY_CAPTURE_POLICY:
			case WAIT_STATS_CAPTURE_MODE:
			case MAX_PLANS_PER_QUERY:
			case QUERY_CAPTURE_MODE:
			case SIZE_BASED_CLEANUP_MODE:
			case INTERVAL_LENGTH_MINUTES:
			case MAX_STORAGE_SIZE_MB:
			case DATA_FLUSH_INTERVAL_SECONDS:
			case CLEANUP_POLICY:
			case CUSTOM:
			case STALE_QUERY_THRESHOLD_DAYS:
			case OPERATION_MODE:
			case QUERY_STORE:
			case CURSOR_DEFAULT:
			case GLOBAL:
			case CURSOR_CLOSE_ON_COMMIT:
			case HOURS:
			case CHANGE_RETENTION:
			case AUTO_CLEANUP:
			case CHANGE_TRACKING:
			case AUTOMATIC_TUNING:
			case FORCE_LAST_GOOD_PLAN:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_CREATE_STATISTICS:
			case INCREMENTAL:
			case AUTO_CLOSE:
			case DATA_RETENTION:
			case TEMPORAL_HISTORY_RETENTION:
			case EDITION:
			case MIXED_PAGE_ALLOCATION:
			case DISABLED:
			case ALLOWED:
			case HADR:
			case MULTI_USER:
			case RESTRICTED_USER:
			case SINGLE_USER:
			case OFFLINE:
			case EMERGENCY:
			case SUSPEND:
			case DATE_CORRELATION_OPTIMIZATION:
			case ELASTIC_POOL:
			case SERVICE_OBJECTIVE:
			case DATABASE_NAME:
			case ALLOW_CONNECTIONS:
			case GEO:
			case NAMED:
			case DATEFIRST:
			case BACKUP_STORAGE_REDUNDANCY:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case SECONDARY:
			case FAILOVER:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case INLINE:
			case NESTED_TRIGGERS:
			case TRANSFORM_NOISE_WORDS:
			case TWO_DIGIT_YEAR_CUTOFF:
			case PERSISTENT_LOG_BUFFER:
			case DIRECTORY_NAME:
			case DATEFORMAT:
			case DELAYED_DURABILITY:
			case AUTHORIZATION:
			case TRANSFER:
			case PROVIDER:
			case SID:
			case SEARCH:
			case MEMBER:
			case JSON:
			case OPENQUERY:
			case IDENTIFIER_:
			case DELIMITED_IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1402);
				identifier();
				}
				break;
			case STRING_:
				enterOuterAlt(_localctx, 2);
				{
				setState(1403);
				match(STRING_);
				}
				break;
			case NCHAR_TEXT:
				enterOuterAlt(_localctx, 3);
				{
				setState(1404);
				match(NCHAR_TEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DataTypeLengthContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public List<TerminalNode> NUMBER_() { return getTokens(SQLServerStatementParser.NUMBER_); }
		public TerminalNode NUMBER_(int i) {
			return getToken(SQLServerStatementParser.NUMBER_, i);
		}
		public TerminalNode COMMA_() { return getToken(SQLServerStatementParser.COMMA_, 0); }
		public DataTypeLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDataTypeLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDataTypeLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDataTypeLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeLengthContext dataTypeLength() throws RecognitionException {
		DataTypeLengthContext _localctx = new DataTypeLengthContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_dataTypeLength);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1407);
			match(LP_);
			setState(1413);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NUMBER_) {
				{
				setState(1408);
				match(NUMBER_);
				setState(1411);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_) {
					{
					setState(1409);
					match(COMMA_);
					setState(1410);
					match(NUMBER_);
					}
				}

				}
			}

			setState(1415);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrimaryKeyContext extends ParserRuleContext {
		public TerminalNode KEY() { return getToken(SQLServerStatementParser.KEY, 0); }
		public TerminalNode PRIMARY() { return getToken(SQLServerStatementParser.PRIMARY, 0); }
		public PrimaryKeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primaryKey; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterPrimaryKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitPrimaryKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitPrimaryKey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrimaryKeyContext primaryKey() throws RecognitionException {
		PrimaryKeyContext _localctx = new PrimaryKeyContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_primaryKey);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1418);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PRIMARY) {
				{
				setState(1417);
				match(PRIMARY);
				}
			}

			setState(1420);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExprContext extends ParserRuleContext {
		public BooleanPrimaryContext booleanPrimary() {
			return getRuleContext(BooleanPrimaryContext.class,0);
		}
		public NotOperatorContext notOperator() {
			return getRuleContext(NotOperatorContext.class,0);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public AndOperatorContext andOperator() {
			return getRuleContext(AndOperatorContext.class,0);
		}
		public OrOperatorContext orOperator() {
			return getRuleContext(OrOperatorContext.class,0);
		}
		public DistinctFromContext distinctFrom() {
			return getRuleContext(DistinctFromContext.class,0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExprContext expr() throws RecognitionException {
		return expr(0);
	}

	private ExprContext expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 98;
		enterRecursionRule(_localctx, 98, RULE_expr, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1431);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
			case 1:
				{
				setState(1423);
				booleanPrimary(0);
				}
				break;
			case 2:
				{
				setState(1424);
				notOperator();
				setState(1425);
				expr(2);
				}
				break;
			case 3:
				{
				setState(1427);
				match(LP_);
				setState(1428);
				expr(0);
				setState(1429);
				match(RP_);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(1447);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,44,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(1445);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(1433);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(1434);
						andOperator();
						setState(1435);
						expr(6);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(1437);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(1438);
						orOperator();
						setState(1439);
						expr(5);
						}
						break;
					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(1441);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(1442);
						distinctFrom();
						setState(1443);
						expr(4);
						}
						break;
					}
					} 
				}
				setState(1449);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,44,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AndOperatorContext extends ParserRuleContext {
		public TerminalNode AND() { return getToken(SQLServerStatementParser.AND, 0); }
		public TerminalNode AND_() { return getToken(SQLServerStatementParser.AND_, 0); }
		public AndOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_andOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAndOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAndOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAndOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AndOperatorContext andOperator() throws RecognitionException {
		AndOperatorContext _localctx = new AndOperatorContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_andOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1450);
			_la = _input.LA(1);
			if ( !(_la==AND_ || _la==AND) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OrOperatorContext extends ParserRuleContext {
		public TerminalNode OR() { return getToken(SQLServerStatementParser.OR, 0); }
		public TerminalNode OR_() { return getToken(SQLServerStatementParser.OR_, 0); }
		public OrOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterOrOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitOrOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitOrOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrOperatorContext orOperator() throws RecognitionException {
		OrOperatorContext _localctx = new OrOperatorContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_orOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1452);
			_la = _input.LA(1);
			if ( !(_la==OR_ || _la==OR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DistinctFromContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(SQLServerStatementParser.IS, 0); }
		public TerminalNode DISTINCT() { return getToken(SQLServerStatementParser.DISTINCT, 0); }
		public TerminalNode FROM() { return getToken(SQLServerStatementParser.FROM, 0); }
		public TerminalNode NOT() { return getToken(SQLServerStatementParser.NOT, 0); }
		public DistinctFromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distinctFrom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDistinctFrom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDistinctFrom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDistinctFrom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DistinctFromContext distinctFrom() throws RecognitionException {
		DistinctFromContext _localctx = new DistinctFromContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_distinctFrom);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1454);
			match(IS);
			setState(1456);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(1455);
				match(NOT);
				}
			}

			setState(1458);
			match(DISTINCT);
			setState(1459);
			match(FROM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NotOperatorContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(SQLServerStatementParser.NOT, 0); }
		public TerminalNode NOT_() { return getToken(SQLServerStatementParser.NOT_, 0); }
		public NotOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterNotOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitNotOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitNotOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotOperatorContext notOperator() throws RecognitionException {
		NotOperatorContext _localctx = new NotOperatorContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_notOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1461);
			_la = _input.LA(1);
			if ( !(_la==NOT_ || _la==NOT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BooleanPrimaryContext extends ParserRuleContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public BooleanPrimaryContext booleanPrimary() {
			return getRuleContext(BooleanPrimaryContext.class,0);
		}
		public TerminalNode IS() { return getToken(SQLServerStatementParser.IS, 0); }
		public TerminalNode TRUE() { return getToken(SQLServerStatementParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(SQLServerStatementParser.FALSE, 0); }
		public TerminalNode UNKNOWN() { return getToken(SQLServerStatementParser.UNKNOWN, 0); }
		public TerminalNode NULL() { return getToken(SQLServerStatementParser.NULL, 0); }
		public TerminalNode NOT() { return getToken(SQLServerStatementParser.NOT, 0); }
		public TerminalNode SAFE_EQ_() { return getToken(SQLServerStatementParser.SAFE_EQ_, 0); }
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SQLServerStatementParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(SQLServerStatementParser.ANY, 0); }
		public BooleanPrimaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanPrimary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterBooleanPrimary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitBooleanPrimary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitBooleanPrimary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanPrimaryContext booleanPrimary() throws RecognitionException {
		return booleanPrimary(0);
	}

	private BooleanPrimaryContext booleanPrimary(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		BooleanPrimaryContext _localctx = new BooleanPrimaryContext(_ctx, _parentState);
		BooleanPrimaryContext _prevctx = _localctx;
		int _startState = 108;
		enterRecursionRule(_localctx, 108, RULE_booleanPrimary, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1464);
			predicate();
			}
			_ctx.stop = _input.LT(-1);
			setState(1486);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,48,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(1484);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,47,_ctx) ) {
					case 1:
						{
						_localctx = new BooleanPrimaryContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_booleanPrimary);
						setState(1466);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(1467);
						match(IS);
						setState(1469);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(1468);
							match(NOT);
							}
						}

						setState(1471);
						_la = _input.LA(1);
						if ( !(((((_la - 108)) & ~0x3f) == 0 && ((1L << (_la - 108)) & 7L) != 0) || _la==UNKNOWN) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 2:
						{
						_localctx = new BooleanPrimaryContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_booleanPrimary);
						setState(1472);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(1473);
						match(SAFE_EQ_);
						setState(1474);
						predicate();
						}
						break;
					case 3:
						{
						_localctx = new BooleanPrimaryContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_booleanPrimary);
						setState(1475);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(1476);
						comparisonOperator();
						setState(1477);
						predicate();
						}
						break;
					case 4:
						{
						_localctx = new BooleanPrimaryContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_booleanPrimary);
						setState(1479);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(1480);
						comparisonOperator();
						setState(1481);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==ANY) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(1482);
						subquery();
						}
						break;
					}
					} 
				}
				setState(1488);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,48,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ComparisonOperatorContext extends ParserRuleContext {
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode GTE_() { return getToken(SQLServerStatementParser.GTE_, 0); }
		public TerminalNode GT_() { return getToken(SQLServerStatementParser.GT_, 0); }
		public TerminalNode LTE_() { return getToken(SQLServerStatementParser.LTE_, 0); }
		public TerminalNode LT_() { return getToken(SQLServerStatementParser.LT_, 0); }
		public TerminalNode NEQ_() { return getToken(SQLServerStatementParser.NEQ_, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterComparisonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitComparisonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitComparisonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_comparisonOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1489);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1056964608L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PredicateContext extends ParserRuleContext {
		public List<BitExprContext> bitExpr() {
			return getRuleContexts(BitExprContext.class);
		}
		public BitExprContext bitExpr(int i) {
			return getRuleContext(BitExprContext.class,i);
		}
		public TerminalNode IN() { return getToken(SQLServerStatementParser.IN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SQLServerStatementParser.NOT, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public TerminalNode BETWEEN() { return getToken(SQLServerStatementParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(SQLServerStatementParser.AND, 0); }
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(SQLServerStatementParser.LIKE, 0); }
		public List<SimpleExprContext> simpleExpr() {
			return getRuleContexts(SimpleExprContext.class);
		}
		public SimpleExprContext simpleExpr(int i) {
			return getRuleContext(SimpleExprContext.class,i);
		}
		public TerminalNode ESCAPE() { return getToken(SQLServerStatementParser.ESCAPE, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_predicate);
		int _la;
		try {
			setState(1534);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,55,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1491);
				bitExpr(0);
				setState(1493);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1492);
					match(NOT);
					}
				}

				setState(1495);
				match(IN);
				setState(1496);
				subquery();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1498);
				bitExpr(0);
				setState(1500);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1499);
					match(NOT);
					}
				}

				setState(1502);
				match(IN);
				setState(1503);
				match(LP_);
				setState(1504);
				expr(0);
				setState(1509);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(1505);
					match(COMMA_);
					setState(1506);
					expr(0);
					}
					}
					setState(1511);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1512);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1514);
				bitExpr(0);
				setState(1516);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1515);
					match(NOT);
					}
				}

				setState(1518);
				match(BETWEEN);
				setState(1519);
				bitExpr(0);
				setState(1520);
				match(AND);
				setState(1521);
				predicate();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1523);
				bitExpr(0);
				setState(1525);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1524);
					match(NOT);
					}
				}

				setState(1527);
				match(LIKE);
				setState(1528);
				simpleExpr(0);
				setState(1531);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,54,_ctx) ) {
				case 1:
					{
					setState(1529);
					match(ESCAPE);
					setState(1530);
					simpleExpr(0);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1533);
				bitExpr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BitExprContext extends ParserRuleContext {
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public List<BitExprContext> bitExpr() {
			return getRuleContexts(BitExprContext.class);
		}
		public BitExprContext bitExpr(int i) {
			return getRuleContext(BitExprContext.class,i);
		}
		public TerminalNode VERTICAL_BAR_() { return getToken(SQLServerStatementParser.VERTICAL_BAR_, 0); }
		public TerminalNode AMPERSAND_() { return getToken(SQLServerStatementParser.AMPERSAND_, 0); }
		public TerminalNode SIGNED_LEFT_SHIFT_() { return getToken(SQLServerStatementParser.SIGNED_LEFT_SHIFT_, 0); }
		public TerminalNode SIGNED_RIGHT_SHIFT_() { return getToken(SQLServerStatementParser.SIGNED_RIGHT_SHIFT_, 0); }
		public TerminalNode PLUS_() { return getToken(SQLServerStatementParser.PLUS_, 0); }
		public TerminalNode MINUS_() { return getToken(SQLServerStatementParser.MINUS_, 0); }
		public TerminalNode ASTERISK_() { return getToken(SQLServerStatementParser.ASTERISK_, 0); }
		public TerminalNode SLASH_() { return getToken(SQLServerStatementParser.SLASH_, 0); }
		public TerminalNode MOD_() { return getToken(SQLServerStatementParser.MOD_, 0); }
		public TerminalNode CARET_() { return getToken(SQLServerStatementParser.CARET_, 0); }
		public BitExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterBitExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitBitExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitBitExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitExprContext bitExpr() throws RecognitionException {
		return bitExpr(0);
	}

	private BitExprContext bitExpr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		BitExprContext _localctx = new BitExprContext(_ctx, _parentState);
		BitExprContext _prevctx = _localctx;
		int _startState = 114;
		enterRecursionRule(_localctx, 114, RULE_bitExpr, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1537);
			simpleExpr(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(1571);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,57,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(1569);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,56,_ctx) ) {
					case 1:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1539);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(1540);
						match(VERTICAL_BAR_);
						setState(1541);
						bitExpr(12);
						}
						break;
					case 2:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1542);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(1543);
						match(AMPERSAND_);
						setState(1544);
						bitExpr(11);
						}
						break;
					case 3:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1545);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(1546);
						match(SIGNED_LEFT_SHIFT_);
						setState(1547);
						bitExpr(10);
						}
						break;
					case 4:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1548);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(1549);
						match(SIGNED_RIGHT_SHIFT_);
						setState(1550);
						bitExpr(9);
						}
						break;
					case 5:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1551);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(1552);
						match(PLUS_);
						setState(1553);
						bitExpr(8);
						}
						break;
					case 6:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1554);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(1555);
						match(MINUS_);
						setState(1556);
						bitExpr(7);
						}
						break;
					case 7:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1557);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(1558);
						match(ASTERISK_);
						setState(1559);
						bitExpr(6);
						}
						break;
					case 8:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1560);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(1561);
						match(SLASH_);
						setState(1562);
						bitExpr(5);
						}
						break;
					case 9:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1563);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(1564);
						match(MOD_);
						setState(1565);
						bitExpr(4);
						}
						break;
					case 10:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1566);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(1567);
						match(CARET_);
						setState(1568);
						bitExpr(3);
						}
						break;
					}
					} 
				}
				setState(1573);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,57,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimpleExprContext extends ParserRuleContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public ParameterMarkerContext parameterMarker() {
			return getRuleContext(ParameterMarkerContext.class,0);
		}
		public LiteralsContext literals() {
			return getRuleContext(LiteralsContext.class,0);
		}
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public VariableNameContext variableName() {
			return getRuleContext(VariableNameContext.class,0);
		}
		public List<SimpleExprContext> simpleExpr() {
			return getRuleContexts(SimpleExprContext.class);
		}
		public SimpleExprContext simpleExpr(int i) {
			return getRuleContext(SimpleExprContext.class,i);
		}
		public TerminalNode PLUS_() { return getToken(SQLServerStatementParser.PLUS_, 0); }
		public TerminalNode MINUS_() { return getToken(SQLServerStatementParser.MINUS_, 0); }
		public TerminalNode TILDE_() { return getToken(SQLServerStatementParser.TILDE_, 0); }
		public TerminalNode NOT_() { return getToken(SQLServerStatementParser.NOT_, 0); }
		public TerminalNode BINARY() { return getToken(SQLServerStatementParser.BINARY, 0); }
		public TerminalNode DOLLAR_() { return getToken(SQLServerStatementParser.DOLLAR_, 0); }
		public TerminalNode CURRENT() { return getToken(SQLServerStatementParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(SQLServerStatementParser.OF, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode GLOBAL() { return getToken(SQLServerStatementParser.GLOBAL, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public TerminalNode ROW() { return getToken(SQLServerStatementParser.ROW, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(SQLServerStatementParser.EXISTS, 0); }
		public TerminalNode LBT_() { return getToken(SQLServerStatementParser.LBT_, 0); }
		public TerminalNode RBT_() { return getToken(SQLServerStatementParser.RBT_, 0); }
		public TerminalNode LBE_() { return getToken(SQLServerStatementParser.LBE_, 0); }
		public TerminalNode RBE_() { return getToken(SQLServerStatementParser.RBE_, 0); }
		public List<TerminalNode> DOT_() { return getTokens(SQLServerStatementParser.DOT_); }
		public TerminalNode DOT_(int i) {
			return getToken(SQLServerStatementParser.DOT_, i);
		}
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode COLUMNS() { return getToken(SQLServerStatementParser.COLUMNS, 0); }
		public TerminalNode ROWS() { return getToken(SQLServerStatementParser.ROWS, 0); }
		public CaseExpressionContext caseExpression() {
			return getRuleContext(CaseExpressionContext.class,0);
		}
		public PrivateExprOfDbContext privateExprOfDb() {
			return getRuleContext(PrivateExprOfDbContext.class,0);
		}
		public MatchExpressionContext matchExpression() {
			return getRuleContext(MatchExpressionContext.class,0);
		}
		public TerminalNode OR_() { return getToken(SQLServerStatementParser.OR_, 0); }
		public SimpleExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSimpleExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSimpleExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSimpleExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleExprContext simpleExpr() throws RecognitionException {
		return simpleExpr(0);
	}

	private SimpleExprContext simpleExpr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		SimpleExprContext _localctx = new SimpleExprContext(_ctx, _parentState);
		SimpleExprContext _prevctx = _localctx;
		int _startState = 116;
		enterRecursionRule(_localctx, 116, RULE_simpleExpr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1634);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,65,_ctx) ) {
			case 1:
				{
				setState(1575);
				functionCall();
				}
				break;
			case 2:
				{
				setState(1576);
				parameterMarker();
				}
				break;
			case 3:
				{
				setState(1577);
				literals();
				}
				break;
			case 4:
				{
				setState(1578);
				columnName();
				}
				break;
			case 5:
				{
				setState(1579);
				variableName();
				}
				break;
			case 6:
				{
				setState(1580);
				_la = _input.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 17592186142912L) != 0) || _la==BINARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1581);
				simpleExpr(9);
				}
				break;
			case 7:
				{
				setState(1582);
				match(CURRENT);
				setState(1583);
				match(OF);
				setState(1585);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,58,_ctx) ) {
				case 1:
					{
					setState(1584);
					match(GLOBAL);
					}
					break;
				}
				setState(1587);
				expr(0);
				}
				break;
			case 8:
				{
				setState(1589);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROW) {
					{
					setState(1588);
					match(ROW);
					}
				}

				setState(1591);
				match(LP_);
				setState(1592);
				expr(0);
				setState(1597);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(1593);
					match(COMMA_);
					setState(1594);
					expr(0);
					}
					}
					setState(1599);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1600);
				match(RP_);
				}
				break;
			case 9:
				{
				setState(1603);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXISTS) {
					{
					setState(1602);
					match(EXISTS);
					}
				}

				setState(1605);
				subquery();
				}
				break;
			case 10:
				{
				setState(1606);
				match(LBT_);
				setState(1607);
				expr(0);
				setState(1608);
				match(RBT_);
				}
				break;
			case 11:
				{
				setState(1610);
				match(LBE_);
				setState(1611);
				expr(0);
				setState(1616);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DOT_) {
					{
					{
					setState(1612);
					match(DOT_);
					setState(1613);
					expr(0);
					}
					}
					setState(1618);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1623);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(1619);
					match(COMMA_);
					setState(1620);
					expr(0);
					}
					}
					setState(1625);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1626);
				match(RBE_);
				setState(1629);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,64,_ctx) ) {
				case 1:
					{
					setState(1627);
					match(ON);
					setState(1628);
					_la = _input.LA(1);
					if ( !(_la==COLUMNS || _la==ROWS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case 12:
				{
				setState(1631);
				caseExpression();
				}
				break;
			case 13:
				{
				setState(1632);
				privateExprOfDb();
				}
				break;
			case 14:
				{
				setState(1633);
				matchExpression();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(1641);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,66,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SimpleExprContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_simpleExpr);
					setState(1636);
					if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
					setState(1637);
					match(OR_);
					setState(1638);
					simpleExpr(11);
					}
					} 
				}
				setState(1643);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,66,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionCallContext extends ParserRuleContext {
		public AggregationFunctionContext aggregationFunction() {
			return getRuleContext(AggregationFunctionContext.class,0);
		}
		public SpecialFunctionContext specialFunction() {
			return getRuleContext(SpecialFunctionContext.class,0);
		}
		public RegularFunctionContext regularFunction() {
			return getRuleContext(RegularFunctionContext.class,0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionCall; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionCallContext functionCall() throws RecognitionException {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_functionCall);
		try {
			setState(1647);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,67,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1644);
				aggregationFunction();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1645);
				specialFunction();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1646);
				regularFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AggregationFunctionContext extends ParserRuleContext {
		public AggregationFunctionNameContext aggregationFunctionName() {
			return getRuleContext(AggregationFunctionNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public DistinctContext distinct() {
			return getRuleContext(DistinctContext.class,0);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode ASTERISK_() { return getToken(SQLServerStatementParser.ASTERISK_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public AggregationFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregationFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAggregationFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAggregationFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAggregationFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregationFunctionContext aggregationFunction() throws RecognitionException {
		AggregationFunctionContext _localctx = new AggregationFunctionContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_aggregationFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1649);
			aggregationFunctionName();
			setState(1650);
			match(LP_);
			setState(1652);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISTINCT) {
				{
				setState(1651);
				distinct();
				}
			}

			setState(1663);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT_:
			case TILDE_:
			case PLUS_:
			case MINUS_:
			case LP_:
			case LBE_:
			case LBT_:
			case QUESTION_:
			case DOLLAR_:
			case TRUNCATE:
			case SCHEMA:
			case TABLE:
			case COLUMNS:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case CASE:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case RIGHT:
			case OFF:
			case IF:
			case NOT:
			case NULL:
			case TRUE:
			case FALSE:
			case EXISTS:
			case GROUP:
			case LIMIT:
			case OFFSET:
			case SAVEPOINT:
			case BOOLEAN:
			case CHAR:
			case ARRAY:
			case INTERVAL:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MICROSECOND:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case AVG:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case INSTANCE:
			case DO:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case NEXT:
			case NAME:
			case INTEGER:
			case TYPE:
			case TEXT:
			case VIEWS:
			case READ_ONLY:
			case DATABASE:
			case RETURNS:
			case DATEPART:
			case PASSWORD:
			case JSON_OBJECT:
			case JSON_ARRAY:
			case FIRST_VALUE:
			case LAST_VALUE:
			case APPROX_PERCENTILE_CONT:
			case APPROX_PERCENTILE_DISC:
			case OPENDATASOURCE:
			case TARGET:
			case BINARY:
			case HIDDEN_:
			case MOD:
			case PARTITION:
			case PARTITIONS:
			case TOP:
			case ROW:
			case ROWS:
			case XOR:
			case ALWAYS:
			case USER:
			case ROLE:
			case START:
			case ACTION:
			case ALGORITHM:
			case AUTO:
			case BLOCKERS:
			case CLUSTERED:
			case NONCLUSTERED:
			case COLUMNSTORE:
			case CONTENT:
			case CONVERT:
			case YEARS:
			case MONTHS:
			case WEEKS:
			case DAYS:
			case MINUTES:
			case DENY:
			case DETERMINISTIC:
			case DISTRIBUTION:
			case DOCUMENT:
			case DURABILITY:
			case ENCRYPTED:
			case FILESTREAM:
			case FILETABLE:
			case FILLFACTOR:
			case FOLLOWING:
			case HASH:
			case HEAP:
			case INBOUND:
			case OUTBOUND:
			case UNBOUNDED:
			case INFINITE:
			case LOGIN:
			case MASKED:
			case MAXDOP:
			case MOVE:
			case NOCHECK:
			case OBJECT:
			case ONLINE:
			case OVER:
			case PAGE:
			case PAUSED:
			case PERIOD:
			case PERSISTED:
			case PRECEDING:
			case RANDOMIZED:
			case RANGE:
			case REBUILD:
			case REPLICATE:
			case REPLICATION:
			case RESUMABLE:
			case ROWGUIDCOL:
			case SAVE:
			case SELF:
			case SPARSE:
			case SWITCH:
			case TRAN:
			case TRANCOUNT:
			case CONTROL:
			case CONCAT:
			case TAKE:
			case OWNERSHIP:
			case DEFINITION:
			case APPLICATION:
			case ASSEMBLY:
			case SYMMETRIC:
			case ASYMMETRIC:
			case SERVER:
			case RECEIVE:
			case CHANGE:
			case TRACE:
			case TRACKING:
			case RESOURCES:
			case SETTINGS:
			case STATE:
			case AVAILABILITY:
			case CREDENTIAL:
			case ENDPOINT:
			case EVENT:
			case NOTIFICATION:
			case LINKED:
			case AUDIT:
			case DDL:
			case XML:
			case IMPERSONATE:
			case SECURABLES:
			case AUTHENTICATE:
			case EXTERNAL:
			case ACCESS:
			case ADMINISTER:
			case BULK:
			case OPERATIONS:
			case UNSAFE:
			case SHUTDOWN:
			case SCOPED:
			case CONFIGURATION:
			case DATASPACE:
			case SERVICE:
			case CERTIFICATE:
			case CONTRACT:
			case ENCRYPTION:
			case MASTER:
			case DATA:
			case SOURCE:
			case FILE:
			case FORMAT:
			case LIBRARY:
			case FULLTEXT:
			case MASK:
			case UNMASK:
			case MESSAGE:
			case REMOTE:
			case BINDING:
			case ROUTE:
			case SECURITY:
			case POLICY:
			case AGGREGATE:
			case QUEUE:
			case RULE:
			case SYNONYM:
			case COLLECTION:
			case SCRIPT:
			case KILL:
			case BACKUP:
			case LOG:
			case SHOWPLAN:
			case SUBSCRIBE:
			case QUERY:
			case NOTIFICATIONS:
			case CHECKPOINT:
			case SEQUENCE:
			case ABORT_AFTER_WAIT:
			case ALLOW_PAGE_LOCKS:
			case ALLOW_ROW_LOCKS:
			case ALL_SPARSE_COLUMNS:
			case BUCKET_COUNT:
			case COLUMNSTORE_ARCHIVE:
			case COLUMN_ENCRYPTION_KEY:
			case COLUMN_SET:
			case COMPRESSION_DELAY:
			case DATABASE_DEAULT:
			case DATA_COMPRESSION:
			case DATA_CONSISTENCY_CHECK:
			case ENCRYPTION_TYPE:
			case SYSTEM_TIME:
			case SYSTEM_VERSIONING:
			case TEXTIMAGE_ON:
			case WAIT_AT_LOW_PRIORITY:
			case STATISTICS_INCREMENTAL:
			case STATISTICS_NORECOMPUTE:
			case ROUND_ROBIN:
			case SCHEMA_AND_DATA:
			case SCHEMA_ONLY:
			case SORT_IN_TEMPDB:
			case IGNORE_DUP_KEY:
			case IMPLICIT_TRANSACTIONS:
			case MAX_DURATION:
			case MEMORY_OPTIMIZED:
			case MIGRATION_STATE:
			case PAD_INDEX:
			case REMOTE_DATA_ARCHIVE:
			case FILESTREAM_ON:
			case FILETABLE_COLLATE_FILENAME:
			case FILETABLE_DIRECTORY:
			case FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME:
			case FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME:
			case FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME:
			case FILTER_PREDICATE:
			case HISTORY_RETENTION_PERIOD:
			case HISTORY_TABLE:
			case LOCK_ESCALATION:
			case DROP_EXISTING:
			case ROW_NUMBER:
			case FIRST:
			case DATETIME2:
			case OUTPUT:
			case INSERTED:
			case DELETED:
			case FILENAME:
			case SIZE:
			case MAXSIZE:
			case FILEGROWTH:
			case UNLIMITED:
			case KB:
			case MB:
			case GB:
			case TB:
			case CONTAINS:
			case MEMORY_OPTIMIZED_DATA:
			case FILEGROUP:
			case NON_TRANSACTED_ACCESS:
			case DB_CHAINING:
			case TRUSTWORTHY:
			case FORWARD_ONLY:
			case KEYSET:
			case FAST_FORWARD:
			case SCROLL_LOCKS:
			case OPTIMISTIC:
			case TYPE_WARNING:
			case SCHEMABINDING:
			case CALLER:
			case INPUT:
			case OWNER:
			case SNAPSHOT:
			case REPEATABLE:
			case SERIALIZABLE:
			case NATIVE_COMPILATION:
			case VIEW_METADATA:
			case INSTEAD:
			case APPEND:
			case INCREMENT:
			case CACHE:
			case MINVALUE:
			case MAXVALUE:
			case RESTART:
			case LOB_COMPACTION:
			case COMPRESS_ALL_ROW_GROUPS:
			case REORGANIZE:
			case RESUME:
			case PAUSE:
			case ABORT:
			case ACCELERATED_DATABASE_RECOVERY:
			case PERSISTENT_VERSION_STORE_FILEGROUP:
			case IMMEDIATE:
			case NO_WAIT:
			case TARGET_RECOVERY_TIME:
			case SECONDS:
			case HONOR_BROKER_PRIORITY:
			case ERROR_BROKER_CONVERSATIONS:
			case NEW_BROKER:
			case DISABLE_BROKER:
			case ENABLE_BROKER:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case READ_COMMITTED_SNAPSHOT:
			case ALLOW_SNAPSHOT_ISOLATION:
			case RECURSIVE_TRIGGERS:
			case QUOTED_IDENTIFIER:
			case NUMERIC_ROUNDABORT:
			case CONCAT_NULL_YIELDS_NULL:
			case COMPATIBILITY_LEVEL:
			case ARITHABORT:
			case ANSI_WARNINGS:
			case ANSI_PADDING:
			case ANSI_NULLS:
			case ANSI_NULL_DEFAULT:
			case PAGE_VERIFY:
			case CHECKSUM:
			case TORN_PAGE_DETECTION:
			case BULK_LOGGED:
			case RECOVERY:
			case TOTAL_EXECUTION_CPU_TIME_MS:
			case TOTAL_COMPILE_CPU_TIME_MS:
			case STALE_CAPTURE_POLICY_THRESHOLD:
			case EXECUTION_COUNT:
			case QUERY_CAPTURE_POLICY:
			case WAIT_STATS_CAPTURE_MODE:
			case MAX_PLANS_PER_QUERY:
			case QUERY_CAPTURE_MODE:
			case SIZE_BASED_CLEANUP_MODE:
			case INTERVAL_LENGTH_MINUTES:
			case MAX_STORAGE_SIZE_MB:
			case DATA_FLUSH_INTERVAL_SECONDS:
			case CLEANUP_POLICY:
			case CUSTOM:
			case STALE_QUERY_THRESHOLD_DAYS:
			case OPERATION_MODE:
			case QUERY_STORE:
			case CURSOR_DEFAULT:
			case GLOBAL:
			case CURSOR_CLOSE_ON_COMMIT:
			case HOURS:
			case CHANGE_RETENTION:
			case AUTO_CLEANUP:
			case CHANGE_TRACKING:
			case AUTOMATIC_TUNING:
			case FORCE_LAST_GOOD_PLAN:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_CREATE_STATISTICS:
			case INCREMENTAL:
			case AUTO_CLOSE:
			case DATA_RETENTION:
			case TEMPORAL_HISTORY_RETENTION:
			case EDITION:
			case MIXED_PAGE_ALLOCATION:
			case DISABLED:
			case ALLOWED:
			case HADR:
			case MULTI_USER:
			case RESTRICTED_USER:
			case SINGLE_USER:
			case OFFLINE:
			case EMERGENCY:
			case SUSPEND:
			case DATE_CORRELATION_OPTIMIZATION:
			case ELASTIC_POOL:
			case SERVICE_OBJECTIVE:
			case DATABASE_NAME:
			case ALLOW_CONNECTIONS:
			case GEO:
			case NAMED:
			case DATEFIRST:
			case BACKUP_STORAGE_REDUNDANCY:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case SECONDARY:
			case FAILOVER:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case INLINE:
			case NESTED_TRIGGERS:
			case TRANSFORM_NOISE_WORDS:
			case TWO_DIGIT_YEAR_CUTOFF:
			case PERSISTENT_LOG_BUFFER:
			case DIRECTORY_NAME:
			case DATEFORMAT:
			case DELAYED_DURABILITY:
			case AUTHORIZATION:
			case TRANSFER:
			case PROVIDER:
			case SID:
			case SEARCH:
			case MEMBER:
			case JSON:
			case OPENJSON:
			case OPENROWSET:
			case TRY_CAST:
			case TRY_CONVERT:
			case OPENQUERY:
			case MATCH:
			case STRING_AGG:
			case IDENTIFIER_:
			case DELIMITED_IDENTIFIER_:
			case STRING_:
			case NUMBER_:
			case HEX_DIGIT_:
			case BIT_NUM_:
			case NCHAR_TEXT:
				{
				setState(1654);
				expr(0);
				setState(1659);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(1655);
					match(COMMA_);
					setState(1656);
					expr(0);
					}
					}
					setState(1661);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case ASTERISK_:
				{
				setState(1662);
				match(ASTERISK_);
				}
				break;
			case RP_:
				break;
			default:
				break;
			}
			setState(1665);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AggregationFunctionNameContext extends ParserRuleContext {
		public TerminalNode MAX() { return getToken(SQLServerStatementParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(SQLServerStatementParser.MIN, 0); }
		public TerminalNode SUM() { return getToken(SQLServerStatementParser.SUM, 0); }
		public TerminalNode COUNT() { return getToken(SQLServerStatementParser.COUNT, 0); }
		public TerminalNode AVG() { return getToken(SQLServerStatementParser.AVG, 0); }
		public AggregationFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregationFunctionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAggregationFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAggregationFunctionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAggregationFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregationFunctionNameContext aggregationFunctionName() throws RecognitionException {
		AggregationFunctionNameContext _localctx = new AggregationFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_aggregationFunctionName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1667);
			_la = _input.LA(1);
			if ( !(((((_la - 149)) & ~0x3f) == 0 && ((1L << (_la - 149)) & 31L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DistinctContext extends ParserRuleContext {
		public TerminalNode DISTINCT() { return getToken(SQLServerStatementParser.DISTINCT, 0); }
		public DistinctContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distinct; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDistinct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDistinct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDistinct(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DistinctContext distinct() throws RecognitionException {
		DistinctContext _localctx = new DistinctContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_distinct);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1669);
			match(DISTINCT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SpecialFunctionContext extends ParserRuleContext {
		public ConversionFunctionContext conversionFunction() {
			return getRuleContext(ConversionFunctionContext.class,0);
		}
		public CharFunctionContext charFunction() {
			return getRuleContext(CharFunctionContext.class,0);
		}
		public OpenJsonFunctionContext openJsonFunction() {
			return getRuleContext(OpenJsonFunctionContext.class,0);
		}
		public JsonFunctionContext jsonFunction() {
			return getRuleContext(JsonFunctionContext.class,0);
		}
		public OpenRowSetFunctionContext openRowSetFunction() {
			return getRuleContext(OpenRowSetFunctionContext.class,0);
		}
		public WindowFunctionContext windowFunction() {
			return getRuleContext(WindowFunctionContext.class,0);
		}
		public ApproxFunctionContext approxFunction() {
			return getRuleContext(ApproxFunctionContext.class,0);
		}
		public OpenDatasourceFunctionContext openDatasourceFunction() {
			return getRuleContext(OpenDatasourceFunctionContext.class,0);
		}
		public RowNumberFunctionContext rowNumberFunction() {
			return getRuleContext(RowNumberFunctionContext.class,0);
		}
		public GraphFunctionContext graphFunction() {
			return getRuleContext(GraphFunctionContext.class,0);
		}
		public TrimFunctionContext trimFunction() {
			return getRuleContext(TrimFunctionContext.class,0);
		}
		public SpecialFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specialFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSpecialFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSpecialFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSpecialFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpecialFunctionContext specialFunction() throws RecognitionException {
		SpecialFunctionContext _localctx = new SpecialFunctionContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_specialFunction);
		try {
			setState(1682);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,71,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1671);
				conversionFunction();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1672);
				charFunction();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1673);
				openJsonFunction();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1674);
				jsonFunction();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1675);
				openRowSetFunction();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1676);
				windowFunction();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1677);
				approxFunction();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1678);
				openDatasourceFunction();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1679);
				rowNumberFunction();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1680);
				graphFunction();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1681);
				trimFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TrimFunctionContext extends ParserRuleContext {
		public TerminalNode TRIM() { return getToken(SQLServerStatementParser.TRIM, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public TerminalNode FROM() { return getToken(SQLServerStatementParser.FROM, 0); }
		public TerminalNode LEADING() { return getToken(SQLServerStatementParser.LEADING, 0); }
		public TerminalNode BOTH() { return getToken(SQLServerStatementParser.BOTH, 0); }
		public TerminalNode TRAILING() { return getToken(SQLServerStatementParser.TRAILING, 0); }
		public TrimFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trimFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterTrimFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitTrimFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitTrimFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TrimFunctionContext trimFunction() throws RecognitionException {
		TrimFunctionContext _localctx = new TrimFunctionContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_trimFunction);
		int _la;
		try {
			setState(1706);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1684);
				match(TRIM);
				setState(1685);
				match(LP_);
				setState(1691);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 243)) & ~0x3f) == 0 && ((1L << (_la - 243)) & 7L) != 0)) {
					{
					setState(1686);
					_la = _input.LA(1);
					if ( !(((((_la - 243)) & ~0x3f) == 0 && ((1L << (_la - 243)) & 7L) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1688);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2909345195587895488L) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 6395682943653701639L) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & 2308104926726717439L) != 0) || ((((_la - 203)) & ~0x3f) == 0 && ((1L << (_la - 203)) & 125995991290610787L) != 0) || ((((_la - 267)) & ~0x3f) == 0 && ((1L << (_la - 267)) & -4402375033865L) != 0) || ((((_la - 337)) & ~0x3f) == 0 && ((1L << (_la - 337)) & -1L) != 0) || ((((_la - 401)) & ~0x3f) == 0 && ((1L << (_la - 401)) & 294985775592767487L) != 0) || ((((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -396317316964417529L) != 0) || ((((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -2196876891101L) != 0) || ((((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -1L) != 0) || ((((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -1152358554366638081L) != 0) || ((((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & 58323L) != 0)) {
						{
						setState(1687);
						expr(0);
						}
					}

					setState(1690);
					match(FROM);
					}
				}

				setState(1693);
				expr(0);
				setState(1694);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1696);
				match(TRIM);
				setState(1697);
				match(LP_);
				setState(1701);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
				case 1:
					{
					setState(1698);
					expr(0);
					setState(1699);
					match(FROM);
					}
					break;
				}
				setState(1703);
				expr(0);
				setState(1704);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphFunctionContext extends ParserRuleContext {
		public GraphAggFunctionContext graphAggFunction() {
			return getRuleContext(GraphAggFunctionContext.class,0);
		}
		public GraphFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterGraphFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitGraphFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitGraphFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GraphFunctionContext graphFunction() throws RecognitionException {
		GraphFunctionContext _localctx = new GraphFunctionContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_graphFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1708);
			graphAggFunction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphAggFunctionContext extends ParserRuleContext {
		public GraphAggFunctionNameContext graphAggFunctionName() {
			return getRuleContext(GraphAggFunctionNameContext.class,0);
		}
		public List<TerminalNode> LP_() { return getTokens(SQLServerStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(SQLServerStatementParser.LP_, i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> RP_() { return getTokens(SQLServerStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(SQLServerStatementParser.RP_, i);
		}
		public TerminalNode WITHIN() { return getToken(SQLServerStatementParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(SQLServerStatementParser.GROUP, 0); }
		public TerminalNode GRAPH() { return getToken(SQLServerStatementParser.GRAPH, 0); }
		public TerminalNode PATH() { return getToken(SQLServerStatementParser.PATH, 0); }
		public TerminalNode COMMA_() { return getToken(SQLServerStatementParser.COMMA_, 0); }
		public GraphAggFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphAggFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterGraphAggFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitGraphAggFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitGraphAggFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GraphAggFunctionContext graphAggFunction() throws RecognitionException {
		GraphAggFunctionContext _localctx = new GraphAggFunctionContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_graphAggFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1710);
			graphAggFunctionName();
			setState(1711);
			match(LP_);
			setState(1712);
			expr(0);
			setState(1715);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_) {
				{
				setState(1713);
				match(COMMA_);
				setState(1714);
				expr(0);
				}
			}

			setState(1717);
			match(RP_);
			setState(1718);
			match(WITHIN);
			setState(1719);
			match(GROUP);
			setState(1720);
			match(LP_);
			setState(1721);
			match(GRAPH);
			setState(1722);
			match(PATH);
			setState(1723);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphAggFunctionNameContext extends ParserRuleContext {
		public TerminalNode STRING_AGG() { return getToken(SQLServerStatementParser.STRING_AGG, 0); }
		public TerminalNode LAST_VALUE() { return getToken(SQLServerStatementParser.LAST_VALUE, 0); }
		public AggregationFunctionNameContext aggregationFunctionName() {
			return getRuleContext(AggregationFunctionNameContext.class,0);
		}
		public GraphAggFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphAggFunctionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterGraphAggFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitGraphAggFunctionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitGraphAggFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GraphAggFunctionNameContext graphAggFunctionName() throws RecognitionException {
		GraphAggFunctionNameContext _localctx = new GraphAggFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_graphAggFunctionName);
		try {
			setState(1728);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_AGG:
				enterOuterAlt(_localctx, 1);
				{
				setState(1725);
				match(STRING_AGG);
				}
				break;
			case LAST_VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1726);
				match(LAST_VALUE);
				}
				break;
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case AVG:
				enterOuterAlt(_localctx, 3);
				{
				setState(1727);
				aggregationFunctionName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RowNumberFunctionContext extends ParserRuleContext {
		public TerminalNode ROW_NUMBER() { return getToken(SQLServerStatementParser.ROW_NUMBER, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public OverClauseContext overClause() {
			return getRuleContext(OverClauseContext.class,0);
		}
		public RowNumberFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowNumberFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterRowNumberFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitRowNumberFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitRowNumberFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowNumberFunctionContext rowNumberFunction() throws RecognitionException {
		RowNumberFunctionContext _localctx = new RowNumberFunctionContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_rowNumberFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1730);
			match(ROW_NUMBER);
			setState(1731);
			match(LP_);
			setState(1732);
			match(RP_);
			setState(1733);
			overClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OpenDatasourceFunctionContext extends ParserRuleContext {
		public TerminalNode OPENDATASOURCE() { return getToken(SQLServerStatementParser.OPENDATASOURCE, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode COMMA_() { return getToken(SQLServerStatementParser.COMMA_, 0); }
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public TerminalNode DOT_() { return getToken(SQLServerStatementParser.DOT_, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public OpenDatasourceFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_openDatasourceFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterOpenDatasourceFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitOpenDatasourceFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitOpenDatasourceFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpenDatasourceFunctionContext openDatasourceFunction() throws RecognitionException {
		OpenDatasourceFunctionContext _localctx = new OpenDatasourceFunctionContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_openDatasourceFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1735);
			match(OPENDATASOURCE);
			setState(1736);
			match(LP_);
			setState(1737);
			expr(0);
			setState(1738);
			match(COMMA_);
			setState(1739);
			expr(0);
			setState(1740);
			match(RP_);
			}
			setState(1744);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,78,_ctx) ) {
			case 1:
				{
				setState(1742);
				match(DOT_);
				setState(1743);
				tableName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ApproxFunctionContext extends ParserRuleContext {
		public Token funcName;
		public List<TerminalNode> LP_() { return getTokens(SQLServerStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(SQLServerStatementParser.LP_, i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> RP_() { return getTokens(SQLServerStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(SQLServerStatementParser.RP_, i);
		}
		public TerminalNode WITHIN() { return getToken(SQLServerStatementParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(SQLServerStatementParser.GROUP, 0); }
		public TerminalNode ORDER() { return getToken(SQLServerStatementParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(SQLServerStatementParser.BY, 0); }
		public TerminalNode APPROX_PERCENTILE_CONT() { return getToken(SQLServerStatementParser.APPROX_PERCENTILE_CONT, 0); }
		public TerminalNode APPROX_PERCENTILE_DISC() { return getToken(SQLServerStatementParser.APPROX_PERCENTILE_DISC, 0); }
		public TerminalNode ASC() { return getToken(SQLServerStatementParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(SQLServerStatementParser.DESC, 0); }
		public ApproxFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_approxFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterApproxFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitApproxFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitApproxFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ApproxFunctionContext approxFunction() throws RecognitionException {
		ApproxFunctionContext _localctx = new ApproxFunctionContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_approxFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1746);
			((ApproxFunctionContext)_localctx).funcName = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==APPROX_PERCENTILE_CONT || _la==APPROX_PERCENTILE_DISC) ) {
				((ApproxFunctionContext)_localctx).funcName = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1747);
			match(LP_);
			setState(1748);
			expr(0);
			setState(1749);
			match(RP_);
			setState(1750);
			match(WITHIN);
			setState(1751);
			match(GROUP);
			setState(1752);
			match(LP_);
			setState(1753);
			match(ORDER);
			setState(1754);
			match(BY);
			setState(1755);
			expr(0);
			setState(1757);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(1756);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1759);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConversionFunctionContext extends ParserRuleContext {
		public CastFunctionContext castFunction() {
			return getRuleContext(CastFunctionContext.class,0);
		}
		public ConvertFunctionContext convertFunction() {
			return getRuleContext(ConvertFunctionContext.class,0);
		}
		public ConversionFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conversionFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterConversionFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitConversionFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitConversionFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConversionFunctionContext conversionFunction() throws RecognitionException {
		ConversionFunctionContext _localctx = new ConversionFunctionContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_conversionFunction);
		try {
			setState(1763);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CAST:
			case TRY_CAST:
				enterOuterAlt(_localctx, 1);
				{
				setState(1761);
				castFunction();
				}
				break;
			case CONVERT:
			case TRY_CONVERT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1762);
				convertFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CastFunctionContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode AS() { return getToken(SQLServerStatementParser.AS, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public TerminalNode CAST() { return getToken(SQLServerStatementParser.CAST, 0); }
		public TerminalNode TRY_CAST() { return getToken(SQLServerStatementParser.TRY_CAST, 0); }
		public CastFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCastFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCastFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCastFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CastFunctionContext castFunction() throws RecognitionException {
		CastFunctionContext _localctx = new CastFunctionContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_castFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1765);
			_la = _input.LA(1);
			if ( !(_la==CAST || _la==TRY_CAST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1766);
			match(LP_);
			setState(1767);
			expr(0);
			setState(1768);
			match(AS);
			setState(1769);
			dataType();
			setState(1770);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConvertFunctionContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public TerminalNode CONVERT() { return getToken(SQLServerStatementParser.CONVERT, 0); }
		public TerminalNode TRY_CONVERT() { return getToken(SQLServerStatementParser.TRY_CONVERT, 0); }
		public TerminalNode NUMBER_() { return getToken(SQLServerStatementParser.NUMBER_, 0); }
		public ConvertFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_convertFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterConvertFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitConvertFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitConvertFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConvertFunctionContext convertFunction() throws RecognitionException {
		ConvertFunctionContext _localctx = new ConvertFunctionContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_convertFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1772);
			_la = _input.LA(1);
			if ( !(_la==CONVERT || _la==TRY_CONVERT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1773);
			match(LP_);
			setState(1774);
			dataType();
			setState(1775);
			match(COMMA_);
			setState(1776);
			expr(0);
			setState(1779);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_) {
				{
				setState(1777);
				match(COMMA_);
				setState(1778);
				match(NUMBER_);
				}
			}

			setState(1781);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JsonFunctionContext extends ParserRuleContext {
		public JsonObjectFunctionContext jsonObjectFunction() {
			return getRuleContext(JsonObjectFunctionContext.class,0);
		}
		public JsonArrayFunctionContext jsonArrayFunction() {
			return getRuleContext(JsonArrayFunctionContext.class,0);
		}
		public JsonFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterJsonFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitJsonFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitJsonFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonFunctionContext jsonFunction() throws RecognitionException {
		JsonFunctionContext _localctx = new JsonFunctionContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_jsonFunction);
		try {
			setState(1785);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JSON_OBJECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1783);
				jsonObjectFunction();
				}
				break;
			case JSON_ARRAY:
				enterOuterAlt(_localctx, 2);
				{
				setState(1784);
				jsonArrayFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JsonObjectFunctionContext extends ParserRuleContext {
		public TerminalNode JSON_OBJECT() { return getToken(SQLServerStatementParser.JSON_OBJECT, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public List<JsonKeyValueContext> jsonKeyValue() {
			return getRuleContexts(JsonKeyValueContext.class);
		}
		public JsonKeyValueContext jsonKeyValue(int i) {
			return getRuleContext(JsonKeyValueContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public JsonNullClauseContext jsonNullClause() {
			return getRuleContext(JsonNullClauseContext.class,0);
		}
		public JsonObjectFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonObjectFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterJsonObjectFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitJsonObjectFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitJsonObjectFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonObjectFunctionContext jsonObjectFunction() throws RecognitionException {
		JsonObjectFunctionContext _localctx = new JsonObjectFunctionContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_jsonObjectFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1787);
			match(JSON_OBJECT);
			setState(1788);
			match(LP_);
			setState(1800);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2909345195587895488L) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 6395682943653701639L) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & 2308104926726717439L) != 0) || ((((_la - 203)) & ~0x3f) == 0 && ((1L << (_la - 203)) & 125995991290610787L) != 0) || ((((_la - 267)) & ~0x3f) == 0 && ((1L << (_la - 267)) & -4402375033865L) != 0) || ((((_la - 337)) & ~0x3f) == 0 && ((1L << (_la - 337)) & -1L) != 0) || ((((_la - 401)) & ~0x3f) == 0 && ((1L << (_la - 401)) & 294985775592767487L) != 0) || ((((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -396317316964417529L) != 0) || ((((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -2196876891101L) != 0) || ((((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -1L) != 0) || ((((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -1152358554366638081L) != 0) || ((((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & 58323L) != 0)) {
				{
				setState(1789);
				jsonKeyValue();
				setState(1794);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(1790);
					match(COMMA_);
					setState(1791);
					jsonKeyValue();
					}
					}
					setState(1796);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1798);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULL || _la==ABSENT) {
					{
					setState(1797);
					jsonNullClause();
					}
				}

				}
			}

			setState(1802);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JsonArrayFunctionContext extends ParserRuleContext {
		public TerminalNode JSON_ARRAY() { return getToken(SQLServerStatementParser.JSON_ARRAY, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public JsonNullClauseContext jsonNullClause() {
			return getRuleContext(JsonNullClauseContext.class,0);
		}
		public JsonArrayFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonArrayFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterJsonArrayFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitJsonArrayFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitJsonArrayFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonArrayFunctionContext jsonArrayFunction() throws RecognitionException {
		JsonArrayFunctionContext _localctx = new JsonArrayFunctionContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_jsonArrayFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1804);
			match(JSON_ARRAY);
			setState(1805);
			match(LP_);
			setState(1806);
			expr(0);
			setState(1811);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1807);
				match(COMMA_);
				setState(1808);
				expr(0);
				}
				}
				setState(1813);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1815);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NULL || _la==ABSENT) {
				{
				setState(1814);
				jsonNullClause();
				}
			}

			setState(1817);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JsonKeyValueContext extends ParserRuleContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode COLON_() { return getToken(SQLServerStatementParser.COLON_, 0); }
		public JsonKeyValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonKeyValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterJsonKeyValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitJsonKeyValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitJsonKeyValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonKeyValueContext jsonKeyValue() throws RecognitionException {
		JsonKeyValueContext _localctx = new JsonKeyValueContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_jsonKeyValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1819);
			expr(0);
			setState(1820);
			match(COLON_);
			setState(1821);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JsonNullClauseContext extends ParserRuleContext {
		public List<TerminalNode> NULL() { return getTokens(SQLServerStatementParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(SQLServerStatementParser.NULL, i);
		}
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode ABSENT() { return getToken(SQLServerStatementParser.ABSENT, 0); }
		public JsonNullClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonNullClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterJsonNullClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitJsonNullClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitJsonNullClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonNullClauseContext jsonNullClause() throws RecognitionException {
		JsonNullClauseContext _localctx = new JsonNullClauseContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_jsonNullClause);
		try {
			setState(1829);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NULL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1823);
				match(NULL);
				setState(1824);
				match(ON);
				setState(1825);
				match(NULL);
				}
				break;
			case ABSENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1826);
				match(ABSENT);
				setState(1827);
				match(ON);
				setState(1828);
				match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CharFunctionContext extends ParserRuleContext {
		public TerminalNode CHAR() { return getToken(SQLServerStatementParser.CHAR, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public TerminalNode USING() { return getToken(SQLServerStatementParser.USING, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public CharFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCharFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCharFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCharFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharFunctionContext charFunction() throws RecognitionException {
		CharFunctionContext _localctx = new CharFunctionContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_charFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1831);
			match(CHAR);
			setState(1832);
			match(LP_);
			setState(1833);
			expr(0);
			setState(1838);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1834);
				match(COMMA_);
				setState(1835);
				expr(0);
				}
				}
				setState(1840);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1843);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(1841);
				match(USING);
				setState(1842);
				ignoredIdentifier();
				}
			}

			setState(1845);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OpenJsonFunctionContext extends ParserRuleContext {
		public TerminalNode OPENJSON() { return getToken(SQLServerStatementParser.OPENJSON, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public TerminalNode COMMA_() { return getToken(SQLServerStatementParser.COMMA_, 0); }
		public OpenJsonWithclauseContext openJsonWithclause() {
			return getRuleContext(OpenJsonWithclauseContext.class,0);
		}
		public OpenJsonFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_openJsonFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterOpenJsonFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitOpenJsonFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitOpenJsonFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpenJsonFunctionContext openJsonFunction() throws RecognitionException {
		OpenJsonFunctionContext _localctx = new OpenJsonFunctionContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_openJsonFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1847);
			match(OPENJSON);
			setState(1848);
			match(LP_);
			setState(1849);
			expr(0);
			setState(1852);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_) {
				{
				setState(1850);
				match(COMMA_);
				setState(1851);
				expr(0);
				}
			}

			setState(1854);
			match(RP_);
			setState(1856);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,92,_ctx) ) {
			case 1:
				{
				setState(1855);
				openJsonWithclause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OpenJsonWithclauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<JsonColumnDefinitionContext> jsonColumnDefinition() {
			return getRuleContexts(JsonColumnDefinitionContext.class);
		}
		public JsonColumnDefinitionContext jsonColumnDefinition(int i) {
			return getRuleContext(JsonColumnDefinitionContext.class,i);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public OpenJsonWithclauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_openJsonWithclause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterOpenJsonWithclause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitOpenJsonWithclause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitOpenJsonWithclause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpenJsonWithclauseContext openJsonWithclause() throws RecognitionException {
		OpenJsonWithclauseContext _localctx = new OpenJsonWithclauseContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_openJsonWithclause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1858);
			match(WITH);
			setState(1859);
			match(LP_);
			setState(1860);
			jsonColumnDefinition();
			setState(1865);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1861);
				match(COMMA_);
				setState(1862);
				jsonColumnDefinition();
				}
				}
				setState(1867);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1868);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JsonColumnDefinitionContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode AS() { return getToken(SQLServerStatementParser.AS, 0); }
		public TerminalNode JSON() { return getToken(SQLServerStatementParser.JSON, 0); }
		public JsonColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonColumnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterJsonColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitJsonColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitJsonColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonColumnDefinitionContext jsonColumnDefinition() throws RecognitionException {
		JsonColumnDefinitionContext _localctx = new JsonColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_jsonColumnDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1870);
			columnName();
			setState(1871);
			dataType();
			setState(1873);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2909345195587895488L) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 6395682943653701639L) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & 2308104926726717439L) != 0) || ((((_la - 203)) & ~0x3f) == 0 && ((1L << (_la - 203)) & 125995991290610787L) != 0) || ((((_la - 267)) & ~0x3f) == 0 && ((1L << (_la - 267)) & -4402375033865L) != 0) || ((((_la - 337)) & ~0x3f) == 0 && ((1L << (_la - 337)) & -1L) != 0) || ((((_la - 401)) & ~0x3f) == 0 && ((1L << (_la - 401)) & 294985775592767487L) != 0) || ((((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -396317316964417529L) != 0) || ((((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -2196876891101L) != 0) || ((((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -1L) != 0) || ((((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -1152358554366638081L) != 0) || ((((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & 58323L) != 0)) {
				{
				setState(1872);
				expr(0);
				}
			}

			setState(1877);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(1875);
				match(AS);
				setState(1876);
				match(JSON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OpenRowSetFunctionContext extends ParserRuleContext {
		public TerminalNode OPENROWSET() { return getToken(SQLServerStatementParser.OPENROWSET, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<TerminalNode> SEMI_() { return getTokens(SQLServerStatementParser.SEMI_); }
		public TerminalNode SEMI_(int i) {
			return getToken(SQLServerStatementParser.SEMI_, i);
		}
		public TerminalNode BULK() { return getToken(SQLServerStatementParser.BULK, 0); }
		public OpenRowSetFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_openRowSetFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterOpenRowSetFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitOpenRowSetFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitOpenRowSetFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpenRowSetFunctionContext openRowSetFunction() throws RecognitionException {
		OpenRowSetFunctionContext _localctx = new OpenRowSetFunctionContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_openRowSetFunction);
		int _la;
		try {
			setState(1912);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,99,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1879);
				match(OPENROWSET);
				setState(1880);
				match(LP_);
				setState(1881);
				expr(0);
				setState(1882);
				match(COMMA_);
				setState(1890);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,96,_ctx) ) {
				case 1:
					{
					{
					setState(1883);
					expr(0);
					setState(1884);
					match(SEMI_);
					setState(1885);
					expr(0);
					setState(1886);
					match(SEMI_);
					setState(1887);
					expr(0);
					}
					}
					break;
				case 2:
					{
					setState(1889);
					expr(0);
					}
					break;
				}
				setState(1892);
				match(COMMA_);
				setState(1895);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,97,_ctx) ) {
				case 1:
					{
					setState(1893);
					tableName();
					}
					break;
				case 2:
					{
					setState(1894);
					expr(0);
					}
					break;
				}
				setState(1897);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1899);
				match(OPENROWSET);
				setState(1900);
				match(LP_);
				setState(1901);
				match(BULK);
				setState(1902);
				expr(0);
				setState(1907);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(1903);
					match(COMMA_);
					setState(1904);
					expr(0);
					}
					}
					setState(1909);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1910);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OpenQueryFunctionContext extends ParserRuleContext {
		public TerminalNode OPENQUERY() { return getToken(SQLServerStatementParser.OPENQUERY, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode COMMA_() { return getToken(SQLServerStatementParser.COMMA_, 0); }
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public OpenQueryFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_openQueryFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterOpenQueryFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitOpenQueryFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitOpenQueryFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpenQueryFunctionContext openQueryFunction() throws RecognitionException {
		OpenQueryFunctionContext _localctx = new OpenQueryFunctionContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_openQueryFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1914);
			match(OPENQUERY);
			setState(1915);
			match(LP_);
			setState(1916);
			expr(0);
			setState(1917);
			match(COMMA_);
			setState(1918);
			expr(0);
			setState(1919);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RowSetFunctionContext extends ParserRuleContext {
		public OpenRowSetFunctionContext openRowSetFunction() {
			return getRuleContext(OpenRowSetFunctionContext.class,0);
		}
		public OpenQueryFunctionContext openQueryFunction() {
			return getRuleContext(OpenQueryFunctionContext.class,0);
		}
		public RowSetFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowSetFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterRowSetFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitRowSetFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitRowSetFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowSetFunctionContext rowSetFunction() throws RecognitionException {
		RowSetFunctionContext _localctx = new RowSetFunctionContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_rowSetFunction);
		try {
			setState(1923);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENROWSET:
				enterOuterAlt(_localctx, 1);
				{
				setState(1921);
				openRowSetFunction();
				}
				break;
			case OPENQUERY:
				enterOuterAlt(_localctx, 2);
				{
				setState(1922);
				openQueryFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RegularFunctionContext extends ParserRuleContext {
		public RegularFunctionNameContext regularFunctionName() {
			return getRuleContext(RegularFunctionNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode ASTERISK_() { return getToken(SQLServerStatementParser.ASTERISK_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public RegularFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regularFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterRegularFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitRegularFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitRegularFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RegularFunctionContext regularFunction() throws RecognitionException {
		RegularFunctionContext _localctx = new RegularFunctionContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_regularFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1925);
			regularFunctionName();
			setState(1926);
			match(LP_);
			setState(1936);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT_:
			case TILDE_:
			case PLUS_:
			case MINUS_:
			case LP_:
			case LBE_:
			case LBT_:
			case QUESTION_:
			case DOLLAR_:
			case TRUNCATE:
			case SCHEMA:
			case TABLE:
			case COLUMNS:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case CASE:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case RIGHT:
			case OFF:
			case IF:
			case NOT:
			case NULL:
			case TRUE:
			case FALSE:
			case EXISTS:
			case GROUP:
			case LIMIT:
			case OFFSET:
			case SAVEPOINT:
			case BOOLEAN:
			case CHAR:
			case ARRAY:
			case INTERVAL:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MICROSECOND:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case AVG:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case INSTANCE:
			case DO:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case NEXT:
			case NAME:
			case INTEGER:
			case TYPE:
			case TEXT:
			case VIEWS:
			case READ_ONLY:
			case DATABASE:
			case RETURNS:
			case DATEPART:
			case PASSWORD:
			case JSON_OBJECT:
			case JSON_ARRAY:
			case FIRST_VALUE:
			case LAST_VALUE:
			case APPROX_PERCENTILE_CONT:
			case APPROX_PERCENTILE_DISC:
			case OPENDATASOURCE:
			case TARGET:
			case BINARY:
			case HIDDEN_:
			case MOD:
			case PARTITION:
			case PARTITIONS:
			case TOP:
			case ROW:
			case ROWS:
			case XOR:
			case ALWAYS:
			case USER:
			case ROLE:
			case START:
			case ACTION:
			case ALGORITHM:
			case AUTO:
			case BLOCKERS:
			case CLUSTERED:
			case NONCLUSTERED:
			case COLUMNSTORE:
			case CONTENT:
			case CONVERT:
			case YEARS:
			case MONTHS:
			case WEEKS:
			case DAYS:
			case MINUTES:
			case DENY:
			case DETERMINISTIC:
			case DISTRIBUTION:
			case DOCUMENT:
			case DURABILITY:
			case ENCRYPTED:
			case FILESTREAM:
			case FILETABLE:
			case FILLFACTOR:
			case FOLLOWING:
			case HASH:
			case HEAP:
			case INBOUND:
			case OUTBOUND:
			case UNBOUNDED:
			case INFINITE:
			case LOGIN:
			case MASKED:
			case MAXDOP:
			case MOVE:
			case NOCHECK:
			case OBJECT:
			case ONLINE:
			case OVER:
			case PAGE:
			case PAUSED:
			case PERIOD:
			case PERSISTED:
			case PRECEDING:
			case RANDOMIZED:
			case RANGE:
			case REBUILD:
			case REPLICATE:
			case REPLICATION:
			case RESUMABLE:
			case ROWGUIDCOL:
			case SAVE:
			case SELF:
			case SPARSE:
			case SWITCH:
			case TRAN:
			case TRANCOUNT:
			case CONTROL:
			case CONCAT:
			case TAKE:
			case OWNERSHIP:
			case DEFINITION:
			case APPLICATION:
			case ASSEMBLY:
			case SYMMETRIC:
			case ASYMMETRIC:
			case SERVER:
			case RECEIVE:
			case CHANGE:
			case TRACE:
			case TRACKING:
			case RESOURCES:
			case SETTINGS:
			case STATE:
			case AVAILABILITY:
			case CREDENTIAL:
			case ENDPOINT:
			case EVENT:
			case NOTIFICATION:
			case LINKED:
			case AUDIT:
			case DDL:
			case XML:
			case IMPERSONATE:
			case SECURABLES:
			case AUTHENTICATE:
			case EXTERNAL:
			case ACCESS:
			case ADMINISTER:
			case BULK:
			case OPERATIONS:
			case UNSAFE:
			case SHUTDOWN:
			case SCOPED:
			case CONFIGURATION:
			case DATASPACE:
			case SERVICE:
			case CERTIFICATE:
			case CONTRACT:
			case ENCRYPTION:
			case MASTER:
			case DATA:
			case SOURCE:
			case FILE:
			case FORMAT:
			case LIBRARY:
			case FULLTEXT:
			case MASK:
			case UNMASK:
			case MESSAGE:
			case REMOTE:
			case BINDING:
			case ROUTE:
			case SECURITY:
			case POLICY:
			case AGGREGATE:
			case QUEUE:
			case RULE:
			case SYNONYM:
			case COLLECTION:
			case SCRIPT:
			case KILL:
			case BACKUP:
			case LOG:
			case SHOWPLAN:
			case SUBSCRIBE:
			case QUERY:
			case NOTIFICATIONS:
			case CHECKPOINT:
			case SEQUENCE:
			case ABORT_AFTER_WAIT:
			case ALLOW_PAGE_LOCKS:
			case ALLOW_ROW_LOCKS:
			case ALL_SPARSE_COLUMNS:
			case BUCKET_COUNT:
			case COLUMNSTORE_ARCHIVE:
			case COLUMN_ENCRYPTION_KEY:
			case COLUMN_SET:
			case COMPRESSION_DELAY:
			case DATABASE_DEAULT:
			case DATA_COMPRESSION:
			case DATA_CONSISTENCY_CHECK:
			case ENCRYPTION_TYPE:
			case SYSTEM_TIME:
			case SYSTEM_VERSIONING:
			case TEXTIMAGE_ON:
			case WAIT_AT_LOW_PRIORITY:
			case STATISTICS_INCREMENTAL:
			case STATISTICS_NORECOMPUTE:
			case ROUND_ROBIN:
			case SCHEMA_AND_DATA:
			case SCHEMA_ONLY:
			case SORT_IN_TEMPDB:
			case IGNORE_DUP_KEY:
			case IMPLICIT_TRANSACTIONS:
			case MAX_DURATION:
			case MEMORY_OPTIMIZED:
			case MIGRATION_STATE:
			case PAD_INDEX:
			case REMOTE_DATA_ARCHIVE:
			case FILESTREAM_ON:
			case FILETABLE_COLLATE_FILENAME:
			case FILETABLE_DIRECTORY:
			case FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME:
			case FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME:
			case FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME:
			case FILTER_PREDICATE:
			case HISTORY_RETENTION_PERIOD:
			case HISTORY_TABLE:
			case LOCK_ESCALATION:
			case DROP_EXISTING:
			case ROW_NUMBER:
			case FIRST:
			case DATETIME2:
			case OUTPUT:
			case INSERTED:
			case DELETED:
			case FILENAME:
			case SIZE:
			case MAXSIZE:
			case FILEGROWTH:
			case UNLIMITED:
			case KB:
			case MB:
			case GB:
			case TB:
			case CONTAINS:
			case MEMORY_OPTIMIZED_DATA:
			case FILEGROUP:
			case NON_TRANSACTED_ACCESS:
			case DB_CHAINING:
			case TRUSTWORTHY:
			case FORWARD_ONLY:
			case KEYSET:
			case FAST_FORWARD:
			case SCROLL_LOCKS:
			case OPTIMISTIC:
			case TYPE_WARNING:
			case SCHEMABINDING:
			case CALLER:
			case INPUT:
			case OWNER:
			case SNAPSHOT:
			case REPEATABLE:
			case SERIALIZABLE:
			case NATIVE_COMPILATION:
			case VIEW_METADATA:
			case INSTEAD:
			case APPEND:
			case INCREMENT:
			case CACHE:
			case MINVALUE:
			case MAXVALUE:
			case RESTART:
			case LOB_COMPACTION:
			case COMPRESS_ALL_ROW_GROUPS:
			case REORGANIZE:
			case RESUME:
			case PAUSE:
			case ABORT:
			case ACCELERATED_DATABASE_RECOVERY:
			case PERSISTENT_VERSION_STORE_FILEGROUP:
			case IMMEDIATE:
			case NO_WAIT:
			case TARGET_RECOVERY_TIME:
			case SECONDS:
			case HONOR_BROKER_PRIORITY:
			case ERROR_BROKER_CONVERSATIONS:
			case NEW_BROKER:
			case DISABLE_BROKER:
			case ENABLE_BROKER:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case READ_COMMITTED_SNAPSHOT:
			case ALLOW_SNAPSHOT_ISOLATION:
			case RECURSIVE_TRIGGERS:
			case QUOTED_IDENTIFIER:
			case NUMERIC_ROUNDABORT:
			case CONCAT_NULL_YIELDS_NULL:
			case COMPATIBILITY_LEVEL:
			case ARITHABORT:
			case ANSI_WARNINGS:
			case ANSI_PADDING:
			case ANSI_NULLS:
			case ANSI_NULL_DEFAULT:
			case PAGE_VERIFY:
			case CHECKSUM:
			case TORN_PAGE_DETECTION:
			case BULK_LOGGED:
			case RECOVERY:
			case TOTAL_EXECUTION_CPU_TIME_MS:
			case TOTAL_COMPILE_CPU_TIME_MS:
			case STALE_CAPTURE_POLICY_THRESHOLD:
			case EXECUTION_COUNT:
			case QUERY_CAPTURE_POLICY:
			case WAIT_STATS_CAPTURE_MODE:
			case MAX_PLANS_PER_QUERY:
			case QUERY_CAPTURE_MODE:
			case SIZE_BASED_CLEANUP_MODE:
			case INTERVAL_LENGTH_MINUTES:
			case MAX_STORAGE_SIZE_MB:
			case DATA_FLUSH_INTERVAL_SECONDS:
			case CLEANUP_POLICY:
			case CUSTOM:
			case STALE_QUERY_THRESHOLD_DAYS:
			case OPERATION_MODE:
			case QUERY_STORE:
			case CURSOR_DEFAULT:
			case GLOBAL:
			case CURSOR_CLOSE_ON_COMMIT:
			case HOURS:
			case CHANGE_RETENTION:
			case AUTO_CLEANUP:
			case CHANGE_TRACKING:
			case AUTOMATIC_TUNING:
			case FORCE_LAST_GOOD_PLAN:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_CREATE_STATISTICS:
			case INCREMENTAL:
			case AUTO_CLOSE:
			case DATA_RETENTION:
			case TEMPORAL_HISTORY_RETENTION:
			case EDITION:
			case MIXED_PAGE_ALLOCATION:
			case DISABLED:
			case ALLOWED:
			case HADR:
			case MULTI_USER:
			case RESTRICTED_USER:
			case SINGLE_USER:
			case OFFLINE:
			case EMERGENCY:
			case SUSPEND:
			case DATE_CORRELATION_OPTIMIZATION:
			case ELASTIC_POOL:
			case SERVICE_OBJECTIVE:
			case DATABASE_NAME:
			case ALLOW_CONNECTIONS:
			case GEO:
			case NAMED:
			case DATEFIRST:
			case BACKUP_STORAGE_REDUNDANCY:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case SECONDARY:
			case FAILOVER:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case INLINE:
			case NESTED_TRIGGERS:
			case TRANSFORM_NOISE_WORDS:
			case TWO_DIGIT_YEAR_CUTOFF:
			case PERSISTENT_LOG_BUFFER:
			case DIRECTORY_NAME:
			case DATEFORMAT:
			case DELAYED_DURABILITY:
			case AUTHORIZATION:
			case TRANSFER:
			case PROVIDER:
			case SID:
			case SEARCH:
			case MEMBER:
			case JSON:
			case OPENJSON:
			case OPENROWSET:
			case TRY_CAST:
			case TRY_CONVERT:
			case OPENQUERY:
			case MATCH:
			case STRING_AGG:
			case IDENTIFIER_:
			case DELIMITED_IDENTIFIER_:
			case STRING_:
			case NUMBER_:
			case HEX_DIGIT_:
			case BIT_NUM_:
			case NCHAR_TEXT:
				{
				setState(1927);
				expr(0);
				setState(1932);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(1928);
					match(COMMA_);
					setState(1929);
					expr(0);
					}
					}
					setState(1934);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case ASTERISK_:
				{
				setState(1935);
				match(ASTERISK_);
				}
				break;
			case RP_:
				break;
			default:
				break;
			}
			setState(1938);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RegularFunctionNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(SQLServerStatementParser.DOT_, 0); }
		public TerminalNode IF() { return getToken(SQLServerStatementParser.IF, 0); }
		public TerminalNode LOCALTIME() { return getToken(SQLServerStatementParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(SQLServerStatementParser.LOCALTIMESTAMP, 0); }
		public TerminalNode INTERVAL() { return getToken(SQLServerStatementParser.INTERVAL, 0); }
		public RegularFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regularFunctionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterRegularFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitRegularFunctionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitRegularFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RegularFunctionNameContext regularFunctionName() throws RecognitionException {
		RegularFunctionNameContext _localctx = new RegularFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_regularFunctionName);
		try {
			setState(1950);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,104,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1943);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,103,_ctx) ) {
				case 1:
					{
					setState(1940);
					owner();
					setState(1941);
					match(DOT_);
					}
					break;
				}
				setState(1945);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1946);
				match(IF);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1947);
				match(LOCALTIME);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1948);
				match(LOCALTIMESTAMP);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1949);
				match(INTERVAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CaseExpressionContext extends ParserRuleContext {
		public TerminalNode CASE() { return getToken(SQLServerStatementParser.CASE, 0); }
		public TerminalNode END() { return getToken(SQLServerStatementParser.END, 0); }
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public List<CaseWhenContext> caseWhen() {
			return getRuleContexts(CaseWhenContext.class);
		}
		public CaseWhenContext caseWhen(int i) {
			return getRuleContext(CaseWhenContext.class,i);
		}
		public CaseElseContext caseElse() {
			return getRuleContext(CaseElseContext.class,0);
		}
		public CaseExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCaseExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCaseExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCaseExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseExpressionContext caseExpression() throws RecognitionException {
		CaseExpressionContext _localctx = new CaseExpressionContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_caseExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1952);
			match(CASE);
			setState(1954);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2909345195587895488L) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 6395682668775794695L) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & 2308104926726717439L) != 0) || ((((_la - 203)) & ~0x3f) == 0 && ((1L << (_la - 203)) & 125995991290610787L) != 0) || ((((_la - 267)) & ~0x3f) == 0 && ((1L << (_la - 267)) & -4402375033865L) != 0) || ((((_la - 337)) & ~0x3f) == 0 && ((1L << (_la - 337)) & -1L) != 0) || ((((_la - 401)) & ~0x3f) == 0 && ((1L << (_la - 401)) & 294985775592767487L) != 0) || ((((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -396317316964417529L) != 0) || ((((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -2196876891101L) != 0) || ((((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -1L) != 0) || ((((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -1152358554366638081L) != 0) || ((((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & 58323L) != 0)) {
				{
				setState(1953);
				simpleExpr(0);
				}
			}

			setState(1957); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1956);
				caseWhen();
				}
				}
				setState(1959); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(1962);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(1961);
				caseElse();
				}
			}

			setState(1964);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CaseWhenContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(SQLServerStatementParser.WHEN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode THEN() { return getToken(SQLServerStatementParser.THEN, 0); }
		public CaseWhenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseWhen; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCaseWhen(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCaseWhen(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCaseWhen(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseWhenContext caseWhen() throws RecognitionException {
		CaseWhenContext _localctx = new CaseWhenContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_caseWhen);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1966);
			match(WHEN);
			setState(1967);
			expr(0);
			setState(1968);
			match(THEN);
			setState(1969);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CaseElseContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(SQLServerStatementParser.ELSE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public CaseElseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseElse; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCaseElse(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCaseElse(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCaseElse(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseElseContext caseElse() throws RecognitionException {
		CaseElseContext _localctx = new CaseElseContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_caseElse);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1971);
			match(ELSE);
			setState(1972);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrivateExprOfDbContext extends ParserRuleContext {
		public WindowFunctionContext windowFunction() {
			return getRuleContext(WindowFunctionContext.class,0);
		}
		public AtTimeZoneExprContext atTimeZoneExpr() {
			return getRuleContext(AtTimeZoneExprContext.class,0);
		}
		public CastExprContext castExpr() {
			return getRuleContext(CastExprContext.class,0);
		}
		public ConvertExprContext convertExpr() {
			return getRuleContext(ConvertExprContext.class,0);
		}
		public PrivateExprOfDbContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privateExprOfDb; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterPrivateExprOfDb(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitPrivateExprOfDb(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitPrivateExprOfDb(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivateExprOfDbContext privateExprOfDb() throws RecognitionException {
		PrivateExprOfDbContext _localctx = new PrivateExprOfDbContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_privateExprOfDb);
		try {
			setState(1978);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FIRST_VALUE:
			case LAST_VALUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1974);
				windowFunction();
				}
				break;
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 2);
				{
				setState(1975);
				atTimeZoneExpr();
				}
				break;
			case CAST:
				enterOuterAlt(_localctx, 3);
				{
				setState(1976);
				castExpr();
				}
				break;
			case CONVERT:
				enterOuterAlt(_localctx, 4);
				{
				setState(1977);
				convertExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OrderByClauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(SQLServerStatementParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(SQLServerStatementParser.BY, 0); }
		public List<OrderByItemContext> orderByItem() {
			return getRuleContexts(OrderByItemContext.class);
		}
		public OrderByItemContext orderByItem(int i) {
			return getRuleContext(OrderByItemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public TerminalNode OFFSET() { return getToken(SQLServerStatementParser.OFFSET, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> ROW() { return getTokens(SQLServerStatementParser.ROW); }
		public TerminalNode ROW(int i) {
			return getToken(SQLServerStatementParser.ROW, i);
		}
		public List<TerminalNode> ROWS() { return getTokens(SQLServerStatementParser.ROWS); }
		public TerminalNode ROWS(int i) {
			return getToken(SQLServerStatementParser.ROWS, i);
		}
		public TerminalNode FETCH() { return getToken(SQLServerStatementParser.FETCH, 0); }
		public TerminalNode ONLY() { return getToken(SQLServerStatementParser.ONLY, 0); }
		public TerminalNode FIRST() { return getToken(SQLServerStatementParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(SQLServerStatementParser.NEXT, 0); }
		public OrderByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterOrderByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitOrderByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitOrderByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByClauseContext orderByClause() throws RecognitionException {
		OrderByClauseContext _localctx = new OrderByClauseContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_orderByClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1980);
			match(ORDER);
			setState(1981);
			match(BY);
			setState(1982);
			orderByItem();
			setState(1987);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1983);
				match(COMMA_);
				setState(1984);
				orderByItem();
				}
				}
				setState(1989);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2001);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFSET) {
				{
				setState(1990);
				match(OFFSET);
				setState(1991);
				expr(0);
				setState(1992);
				_la = _input.LA(1);
				if ( !(_la==ROW || _la==ROWS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1999);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FETCH) {
					{
					setState(1993);
					match(FETCH);
					setState(1994);
					_la = _input.LA(1);
					if ( !(_la==NEXT || _la==FIRST) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1995);
					expr(0);
					setState(1996);
					_la = _input.LA(1);
					if ( !(_la==ROW || _la==ROWS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1997);
					match(ONLY);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OrderByItemContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public NumberLiteralsContext numberLiterals() {
			return getRuleContext(NumberLiteralsContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(SQLServerStatementParser.COLLATE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ASC() { return getToken(SQLServerStatementParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(SQLServerStatementParser.DESC, 0); }
		public OrderByItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterOrderByItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitOrderByItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitOrderByItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByItemContext orderByItem() throws RecognitionException {
		OrderByItemContext _localctx = new OrderByItemContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_orderByItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2006);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,112,_ctx) ) {
			case 1:
				{
				setState(2003);
				columnName();
				}
				break;
			case 2:
				{
				setState(2004);
				numberLiterals();
				}
				break;
			case 3:
				{
				setState(2005);
				expr(0);
				}
				break;
			}
			setState(2010);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(2008);
				match(COLLATE);
				setState(2009);
				identifier();
				}
			}

			setState(2013);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(2012);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DataTypeContext extends ParserRuleContext {
		public DataTypeNameContext dataTypeName() {
			return getRuleContext(DataTypeNameContext.class,0);
		}
		public List<IgnoredIdentifierContext> ignoredIdentifier() {
			return getRuleContexts(IgnoredIdentifierContext.class);
		}
		public IgnoredIdentifierContext ignoredIdentifier(int i) {
			return getRuleContext(IgnoredIdentifierContext.class,i);
		}
		public TerminalNode DOT_() { return getToken(SQLServerStatementParser.DOT_, 0); }
		public DataTypeLengthContext dataTypeLength() {
			return getRuleContext(DataTypeLengthContext.class,0);
		}
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public TerminalNode MAX() { return getToken(SQLServerStatementParser.MAX, 0); }
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public TerminalNode CONTENT() { return getToken(SQLServerStatementParser.CONTENT, 0); }
		public TerminalNode DOCUMENT() { return getToken(SQLServerStatementParser.DOCUMENT, 0); }
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_dataType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2018);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
			case 1:
				{
				setState(2015);
				ignoredIdentifier();
				setState(2016);
				match(DOT_);
				}
				break;
			}
			setState(2020);
			dataTypeName();
			setState(2032);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
			case 1:
				{
				setState(2021);
				dataTypeLength();
				}
				break;
			case 2:
				{
				setState(2022);
				match(LP_);
				setState(2023);
				match(MAX);
				setState(2024);
				match(RP_);
				}
				break;
			case 3:
				{
				setState(2025);
				match(LP_);
				setState(2027);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONTENT || _la==DOCUMENT) {
					{
					setState(2026);
					_la = _input.LA(1);
					if ( !(_la==CONTENT || _la==DOCUMENT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2029);
				ignoredIdentifier();
				setState(2030);
				match(RP_);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DataTypeNameContext extends ParserRuleContext {
		public TerminalNode BIGINT() { return getToken(SQLServerStatementParser.BIGINT, 0); }
		public TerminalNode NUMERIC() { return getToken(SQLServerStatementParser.NUMERIC, 0); }
		public TerminalNode BIT() { return getToken(SQLServerStatementParser.BIT, 0); }
		public TerminalNode SMALLINT() { return getToken(SQLServerStatementParser.SMALLINT, 0); }
		public TerminalNode DECIMAL() { return getToken(SQLServerStatementParser.DECIMAL, 0); }
		public TerminalNode SMALLMONEY() { return getToken(SQLServerStatementParser.SMALLMONEY, 0); }
		public TerminalNode INT() { return getToken(SQLServerStatementParser.INT, 0); }
		public TerminalNode TINYINT() { return getToken(SQLServerStatementParser.TINYINT, 0); }
		public TerminalNode MONEY() { return getToken(SQLServerStatementParser.MONEY, 0); }
		public TerminalNode FLOAT() { return getToken(SQLServerStatementParser.FLOAT, 0); }
		public TerminalNode REAL() { return getToken(SQLServerStatementParser.REAL, 0); }
		public TerminalNode DATE() { return getToken(SQLServerStatementParser.DATE, 0); }
		public TerminalNode DATETIMEOFFSET() { return getToken(SQLServerStatementParser.DATETIMEOFFSET, 0); }
		public TerminalNode SMALLDATETIME() { return getToken(SQLServerStatementParser.SMALLDATETIME, 0); }
		public TerminalNode DATETIME() { return getToken(SQLServerStatementParser.DATETIME, 0); }
		public TerminalNode DATETIME2() { return getToken(SQLServerStatementParser.DATETIME2, 0); }
		public TerminalNode TIME() { return getToken(SQLServerStatementParser.TIME, 0); }
		public TerminalNode CHAR() { return getToken(SQLServerStatementParser.CHAR, 0); }
		public TerminalNode VARCHAR() { return getToken(SQLServerStatementParser.VARCHAR, 0); }
		public TerminalNode TEXT() { return getToken(SQLServerStatementParser.TEXT, 0); }
		public TerminalNode NCHAR() { return getToken(SQLServerStatementParser.NCHAR, 0); }
		public TerminalNode NVARCHAR() { return getToken(SQLServerStatementParser.NVARCHAR, 0); }
		public TerminalNode NTEXT() { return getToken(SQLServerStatementParser.NTEXT, 0); }
		public TerminalNode BINARY() { return getToken(SQLServerStatementParser.BINARY, 0); }
		public TerminalNode VARBINARY() { return getToken(SQLServerStatementParser.VARBINARY, 0); }
		public TerminalNode IMAGE() { return getToken(SQLServerStatementParser.IMAGE, 0); }
		public TerminalNode SQL_VARIANT() { return getToken(SQLServerStatementParser.SQL_VARIANT, 0); }
		public TerminalNode XML() { return getToken(SQLServerStatementParser.XML, 0); }
		public TerminalNode UNIQUEIDENTIFIER() { return getToken(SQLServerStatementParser.UNIQUEIDENTIFIER, 0); }
		public TerminalNode HIERARCHYID() { return getToken(SQLServerStatementParser.HIERARCHYID, 0); }
		public TerminalNode GEOMETRY() { return getToken(SQLServerStatementParser.GEOMETRY, 0); }
		public TerminalNode GEOGRAPHY() { return getToken(SQLServerStatementParser.GEOGRAPHY, 0); }
		public TerminalNode IDENTIFIER_() { return getToken(SQLServerStatementParser.IDENTIFIER_, 0); }
		public TerminalNode INTEGER() { return getToken(SQLServerStatementParser.INTEGER, 0); }
		public DataTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDataTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDataTypeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDataTypeName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeNameContext dataTypeName() throws RecognitionException {
		DataTypeNameContext _localctx = new DataTypeNameContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_dataTypeName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2034);
			_la = _input.LA(1);
			if ( !(((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & 35989214600364081L) != 0) || _la==BINARY || _la==XML || ((((_la - 455)) & ~0x3f) == 0 && ((1L << (_la - 455)) & 65535L) != 0) || _la==IDENTIFIER_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AtTimeZoneExprContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(SQLServerStatementParser.IDENTIFIER_, 0); }
		public TerminalNode STRING_() { return getToken(SQLServerStatementParser.STRING_, 0); }
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public TerminalNode TIME() { return getToken(SQLServerStatementParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(SQLServerStatementParser.ZONE, 0); }
		public AtTimeZoneExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_atTimeZoneExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAtTimeZoneExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAtTimeZoneExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAtTimeZoneExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AtTimeZoneExprContext atTimeZoneExpr() throws RecognitionException {
		AtTimeZoneExprContext _localctx = new AtTimeZoneExprContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_atTimeZoneExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2036);
			match(IDENTIFIER_);
			setState(2040);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2037);
				match(WITH);
				setState(2038);
				match(TIME);
				setState(2039);
				match(ZONE);
				}
			}

			setState(2042);
			match(STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CastExprContext extends ParserRuleContext {
		public TerminalNode CAST() { return getToken(SQLServerStatementParser.CAST, 0); }
		public List<TerminalNode> LP_() { return getTokens(SQLServerStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(SQLServerStatementParser.LP_, i);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode AS() { return getToken(SQLServerStatementParser.AS, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public List<TerminalNode> RP_() { return getTokens(SQLServerStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(SQLServerStatementParser.RP_, i);
		}
		public TerminalNode NUMBER_() { return getToken(SQLServerStatementParser.NUMBER_, 0); }
		public CastExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCastExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCastExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCastExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CastExprContext castExpr() throws RecognitionException {
		CastExprContext _localctx = new CastExprContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_castExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2044);
			match(CAST);
			setState(2045);
			match(LP_);
			setState(2046);
			expr(0);
			setState(2047);
			match(AS);
			setState(2048);
			dataType();
			setState(2052);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(2049);
				match(LP_);
				setState(2050);
				match(NUMBER_);
				setState(2051);
				match(RP_);
				}
			}

			setState(2054);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConvertExprContext extends ParserRuleContext {
		public TerminalNode CONVERT() { return getToken(SQLServerStatementParser.CONVERT, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<TerminalNode> NUMBER_() { return getTokens(SQLServerStatementParser.NUMBER_); }
		public TerminalNode NUMBER_(int i) {
			return getToken(SQLServerStatementParser.NUMBER_, i);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public ConvertExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_convertExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterConvertExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitConvertExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitConvertExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConvertExprContext convertExpr() throws RecognitionException {
		ConvertExprContext _localctx = new ConvertExprContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_convertExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2056);
			match(CONVERT);
			{
			setState(2057);
			dataType();
			setState(2061);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(2058);
				match(LP_);
				setState(2059);
				match(NUMBER_);
				setState(2060);
				match(RP_);
				}
			}

			setState(2063);
			match(COMMA_);
			setState(2064);
			expr(0);
			setState(2067);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,121,_ctx) ) {
			case 1:
				{
				setState(2065);
				match(COMMA_);
				setState(2066);
				match(NUMBER_);
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowFunctionContext extends ParserRuleContext {
		public Token funcName;
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public OverClauseContext overClause() {
			return getRuleContext(OverClauseContext.class,0);
		}
		public TerminalNode FIRST_VALUE() { return getToken(SQLServerStatementParser.FIRST_VALUE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(SQLServerStatementParser.LAST_VALUE, 0); }
		public NullTreatmentContext nullTreatment() {
			return getRuleContext(NullTreatmentContext.class,0);
		}
		public WindowFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterWindowFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitWindowFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitWindowFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFunctionContext windowFunction() throws RecognitionException {
		WindowFunctionContext _localctx = new WindowFunctionContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_windowFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2069);
			((WindowFunctionContext)_localctx).funcName = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				((WindowFunctionContext)_localctx).funcName = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2070);
			match(LP_);
			setState(2071);
			expr(0);
			setState(2072);
			match(RP_);
			setState(2074);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESPECT || _la==IGNORE) {
				{
				setState(2073);
				nullTreatment();
				}
			}

			setState(2076);
			overClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NullTreatmentContext extends ParserRuleContext {
		public TerminalNode NULLS() { return getToken(SQLServerStatementParser.NULLS, 0); }
		public TerminalNode RESPECT() { return getToken(SQLServerStatementParser.RESPECT, 0); }
		public TerminalNode IGNORE() { return getToken(SQLServerStatementParser.IGNORE, 0); }
		public NullTreatmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullTreatment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterNullTreatment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitNullTreatment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitNullTreatment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullTreatmentContext nullTreatment() throws RecognitionException {
		NullTreatmentContext _localctx = new NullTreatmentContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_nullTreatment);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2078);
			_la = _input.LA(1);
			if ( !(_la==RESPECT || _la==IGNORE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2079);
			match(NULLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OverClauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(SQLServerStatementParser.OVER, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public PartitionByClauseContext partitionByClause() {
			return getRuleContext(PartitionByClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public RowRangeClauseContext rowRangeClause() {
			return getRuleContext(RowRangeClauseContext.class,0);
		}
		public OverClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterOverClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitOverClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitOverClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OverClauseContext overClause() throws RecognitionException {
		OverClauseContext _localctx = new OverClauseContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_overClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2081);
			match(OVER);
			setState(2082);
			match(LP_);
			setState(2084);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2083);
				partitionByClause();
				}
			}

			setState(2087);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(2086);
				orderByClause();
				}
			}

			setState(2090);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROWS || _la==RANGE) {
				{
				setState(2089);
				rowRangeClause();
				}
			}

			setState(2092);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionByClauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(SQLServerStatementParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(SQLServerStatementParser.BY, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public PartitionByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterPartitionByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitPartitionByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitPartitionByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionByClauseContext partitionByClause() throws RecognitionException {
		PartitionByClauseContext _localctx = new PartitionByClauseContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_partitionByClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2094);
			match(PARTITION);
			setState(2095);
			match(BY);
			setState(2096);
			expr(0);
			setState(2101);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2097);
				match(COMMA_);
				setState(2098);
				expr(0);
				}
				}
				setState(2103);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RowRangeClauseContext extends ParserRuleContext {
		public WindowFrameExtentContext windowFrameExtent() {
			return getRuleContext(WindowFrameExtentContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(SQLServerStatementParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(SQLServerStatementParser.RANGE, 0); }
		public RowRangeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowRangeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterRowRangeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitRowRangeClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitRowRangeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowRangeClauseContext rowRangeClause() throws RecognitionException {
		RowRangeClauseContext _localctx = new RowRangeClauseContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_rowRangeClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2104);
			_la = _input.LA(1);
			if ( !(_la==ROWS || _la==RANGE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2105);
			windowFrameExtent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowFrameExtentContext extends ParserRuleContext {
		public WindowFramePrecedingContext windowFramePreceding() {
			return getRuleContext(WindowFramePrecedingContext.class,0);
		}
		public WindowFrameBetweenContext windowFrameBetween() {
			return getRuleContext(WindowFrameBetweenContext.class,0);
		}
		public WindowFrameExtentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameExtent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterWindowFrameExtent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitWindowFrameExtent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitWindowFrameExtent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFrameExtentContext windowFrameExtent() throws RecognitionException {
		WindowFrameExtentContext _localctx = new WindowFrameExtentContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_windowFrameExtent);
		try {
			setState(2109);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case UNBOUNDED:
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(2107);
				windowFramePreceding();
				}
				break;
			case BETWEEN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2108);
				windowFrameBetween();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowFrameBetweenContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(SQLServerStatementParser.BETWEEN, 0); }
		public List<WindowFrameBoundContext> windowFrameBound() {
			return getRuleContexts(WindowFrameBoundContext.class);
		}
		public WindowFrameBoundContext windowFrameBound(int i) {
			return getRuleContext(WindowFrameBoundContext.class,i);
		}
		public TerminalNode AND() { return getToken(SQLServerStatementParser.AND, 0); }
		public WindowFrameBetweenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameBetween; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterWindowFrameBetween(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitWindowFrameBetween(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitWindowFrameBetween(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFrameBetweenContext windowFrameBetween() throws RecognitionException {
		WindowFrameBetweenContext _localctx = new WindowFrameBetweenContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_windowFrameBetween);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2111);
			match(BETWEEN);
			setState(2112);
			windowFrameBound();
			setState(2113);
			match(AND);
			setState(2114);
			windowFrameBound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowFrameBoundContext extends ParserRuleContext {
		public WindowFramePrecedingContext windowFramePreceding() {
			return getRuleContext(WindowFramePrecedingContext.class,0);
		}
		public WindowFrameFollowingContext windowFrameFollowing() {
			return getRuleContext(WindowFrameFollowingContext.class,0);
		}
		public WindowFrameBoundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameBound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterWindowFrameBound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitWindowFrameBound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitWindowFrameBound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFrameBoundContext windowFrameBound() throws RecognitionException {
		WindowFrameBoundContext _localctx = new WindowFrameBoundContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_windowFrameBound);
		try {
			setState(2118);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,128,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2116);
				windowFramePreceding();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2117);
				windowFrameFollowing();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowFramePrecedingContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(SQLServerStatementParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(SQLServerStatementParser.PRECEDING, 0); }
		public TerminalNode NUMBER_() { return getToken(SQLServerStatementParser.NUMBER_, 0); }
		public TerminalNode CURRENT() { return getToken(SQLServerStatementParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(SQLServerStatementParser.ROW, 0); }
		public WindowFramePrecedingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFramePreceding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterWindowFramePreceding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitWindowFramePreceding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitWindowFramePreceding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFramePrecedingContext windowFramePreceding() throws RecognitionException {
		WindowFramePrecedingContext _localctx = new WindowFramePrecedingContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_windowFramePreceding);
		try {
			setState(2126);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNBOUNDED:
				enterOuterAlt(_localctx, 1);
				{
				setState(2120);
				match(UNBOUNDED);
				setState(2121);
				match(PRECEDING);
				}
				break;
			case NUMBER_:
				enterOuterAlt(_localctx, 2);
				{
				setState(2122);
				match(NUMBER_);
				setState(2123);
				match(PRECEDING);
				}
				break;
			case CURRENT:
				enterOuterAlt(_localctx, 3);
				{
				setState(2124);
				match(CURRENT);
				setState(2125);
				match(ROW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowFrameFollowingContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(SQLServerStatementParser.UNBOUNDED, 0); }
		public TerminalNode FOLLOWING() { return getToken(SQLServerStatementParser.FOLLOWING, 0); }
		public TerminalNode NUMBER_() { return getToken(SQLServerStatementParser.NUMBER_, 0); }
		public TerminalNode CURRENT() { return getToken(SQLServerStatementParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(SQLServerStatementParser.ROW, 0); }
		public WindowFrameFollowingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameFollowing; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterWindowFrameFollowing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitWindowFrameFollowing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitWindowFrameFollowing(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFrameFollowingContext windowFrameFollowing() throws RecognitionException {
		WindowFrameFollowingContext _localctx = new WindowFrameFollowingContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_windowFrameFollowing);
		try {
			setState(2134);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNBOUNDED:
				enterOuterAlt(_localctx, 1);
				{
				setState(2128);
				match(UNBOUNDED);
				setState(2129);
				match(FOLLOWING);
				}
				break;
			case NUMBER_:
				enterOuterAlt(_localctx, 2);
				{
				setState(2130);
				match(NUMBER_);
				setState(2131);
				match(FOLLOWING);
				}
				break;
			case CURRENT:
				enterOuterAlt(_localctx, 3);
				{
				setState(2132);
				match(CURRENT);
				setState(2133);
				match(ROW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnNameWithSortContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode ASC() { return getToken(SQLServerStatementParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(SQLServerStatementParser.DESC, 0); }
		public ColumnNameWithSortContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnNameWithSort; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterColumnNameWithSort(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitColumnNameWithSort(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitColumnNameWithSort(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNameWithSortContext columnNameWithSort() throws RecognitionException {
		ColumnNameWithSortContext _localctx = new ColumnNameWithSortContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_columnNameWithSort);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2136);
			columnName();
			setState(2138);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(2137);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexOptionContext extends ParserRuleContext {
		public TerminalNode FILLFACTOR() { return getToken(SQLServerStatementParser.FILLFACTOR, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode NUMBER_() { return getToken(SQLServerStatementParser.NUMBER_, 0); }
		public EqOnOffOptionContext eqOnOffOption() {
			return getRuleContext(EqOnOffOptionContext.class,0);
		}
		public EqTimeContext eqTime() {
			return getRuleContext(EqTimeContext.class,0);
		}
		public TerminalNode COMPRESSION_DELAY() { return getToken(SQLServerStatementParser.COMPRESSION_DELAY, 0); }
		public TerminalNode MAX_DURATION() { return getToken(SQLServerStatementParser.MAX_DURATION, 0); }
		public TerminalNode MAXDOP() { return getToken(SQLServerStatementParser.MAXDOP, 0); }
		public CompressionOptionContext compressionOption() {
			return getRuleContext(CompressionOptionContext.class,0);
		}
		public OnPartitionClauseContext onPartitionClause() {
			return getRuleContext(OnPartitionClauseContext.class,0);
		}
		public IndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterIndexOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitIndexOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitIndexOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexOptionContext indexOption() throws RecognitionException {
		IndexOptionContext _localctx = new IndexOptionContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_indexOption);
		int _la;
		try {
			setState(2153);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,133,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2140);
				match(FILLFACTOR);
				setState(2141);
				match(EQ_);
				setState(2142);
				match(NUMBER_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2143);
				eqOnOffOption();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2144);
				_la = _input.LA(1);
				if ( !(_la==COMPRESSION_DELAY || _la==MAX_DURATION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2145);
				eqTime();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2146);
				match(MAXDOP);
				setState(2147);
				match(EQ_);
				setState(2148);
				match(NUMBER_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2149);
				compressionOption();
				setState(2151);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(2150);
					onPartitionClause();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CompressionOptionContext extends ParserRuleContext {
		public TerminalNode DATA_COMPRESSION() { return getToken(SQLServerStatementParser.DATA_COMPRESSION, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode NONE() { return getToken(SQLServerStatementParser.NONE, 0); }
		public TerminalNode ROW() { return getToken(SQLServerStatementParser.ROW, 0); }
		public TerminalNode PAGE() { return getToken(SQLServerStatementParser.PAGE, 0); }
		public TerminalNode COLUMNSTORE() { return getToken(SQLServerStatementParser.COLUMNSTORE, 0); }
		public TerminalNode COLUMNSTORE_ARCHIVE() { return getToken(SQLServerStatementParser.COLUMNSTORE_ARCHIVE, 0); }
		public CompressionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compressionOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCompressionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCompressionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCompressionOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompressionOptionContext compressionOption() throws RecognitionException {
		CompressionOptionContext _localctx = new CompressionOptionContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_compressionOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2155);
			match(DATA_COMPRESSION);
			setState(2156);
			match(EQ_);
			setState(2157);
			_la = _input.LA(1);
			if ( !(((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & 306244774669582337L) != 0) || _la==COLUMNSTORE_ARCHIVE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EqTimeContext extends ParserRuleContext {
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode NUMBER_() { return getToken(SQLServerStatementParser.NUMBER_, 0); }
		public TerminalNode MINUTES() { return getToken(SQLServerStatementParser.MINUTES, 0); }
		public EqTimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_eqTime; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterEqTime(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitEqTime(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitEqTime(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EqTimeContext eqTime() throws RecognitionException {
		EqTimeContext _localctx = new EqTimeContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_eqTime);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2159);
			match(EQ_);
			setState(2160);
			match(NUMBER_);
			setState(2162);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MINUTES) {
				{
				setState(2161);
				match(MINUTES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EqOnOffOptionContext extends ParserRuleContext {
		public EqKeyContext eqKey() {
			return getRuleContext(EqKeyContext.class,0);
		}
		public EqOnOffContext eqOnOff() {
			return getRuleContext(EqOnOffContext.class,0);
		}
		public EqOnOffOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_eqOnOffOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterEqOnOffOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitEqOnOffOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitEqOnOffOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EqOnOffOptionContext eqOnOffOption() throws RecognitionException {
		EqOnOffOptionContext _localctx = new EqOnOffOptionContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_eqOnOffOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2164);
			eqKey();
			setState(2165);
			eqOnOff();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EqKeyContext extends ParserRuleContext {
		public TerminalNode PAD_INDEX() { return getToken(SQLServerStatementParser.PAD_INDEX, 0); }
		public TerminalNode SORT_IN_TEMPDB() { return getToken(SQLServerStatementParser.SORT_IN_TEMPDB, 0); }
		public TerminalNode IGNORE_DUP_KEY() { return getToken(SQLServerStatementParser.IGNORE_DUP_KEY, 0); }
		public TerminalNode STATISTICS_NORECOMPUTE() { return getToken(SQLServerStatementParser.STATISTICS_NORECOMPUTE, 0); }
		public TerminalNode STATISTICS_INCREMENTAL() { return getToken(SQLServerStatementParser.STATISTICS_INCREMENTAL, 0); }
		public TerminalNode DROP_EXISTING() { return getToken(SQLServerStatementParser.DROP_EXISTING, 0); }
		public TerminalNode ONLINE() { return getToken(SQLServerStatementParser.ONLINE, 0); }
		public TerminalNode RESUMABLE() { return getToken(SQLServerStatementParser.RESUMABLE, 0); }
		public TerminalNode ALLOW_ROW_LOCKS() { return getToken(SQLServerStatementParser.ALLOW_ROW_LOCKS, 0); }
		public TerminalNode ALLOW_PAGE_LOCKS() { return getToken(SQLServerStatementParser.ALLOW_PAGE_LOCKS, 0); }
		public TerminalNode COMPRESSION_DELAY() { return getToken(SQLServerStatementParser.COMPRESSION_DELAY, 0); }
		public TerminalNode OPTIMIZE_FOR_SEQUENTIAL_KEY() { return getToken(SQLServerStatementParser.OPTIMIZE_FOR_SEQUENTIAL_KEY, 0); }
		public EqKeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_eqKey; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterEqKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitEqKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitEqKey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EqKeyContext eqKey() throws RecognitionException {
		EqKeyContext _localctx = new EqKeyContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_eqKey);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2167);
			_la = _input.LA(1);
			if ( !(_la==ONLINE || _la==RESUMABLE || ((((_la - 411)) & ~0x3f) == 0 && ((1L << (_la - 411)) & 549896519811L) != 0) || _la==OPTIMIZE_FOR_SEQUENTIAL_KEY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EqOnOffContext extends ParserRuleContext {
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode OFF() { return getToken(SQLServerStatementParser.OFF, 0); }
		public EqOnOffContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_eqOnOff; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterEqOnOff(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitEqOnOff(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitEqOnOff(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EqOnOffContext eqOnOff() throws RecognitionException {
		EqOnOffContext _localctx = new EqOnOffContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_eqOnOff);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2169);
			match(EQ_);
			setState(2170);
			_la = _input.LA(1);
			if ( !(_la==ON || _la==OFF) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OnPartitionClauseContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode PARTITIONS() { return getToken(SQLServerStatementParser.PARTITIONS, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public PartitionExpressionsContext partitionExpressions() {
			return getRuleContext(PartitionExpressionsContext.class,0);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public OnPartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onPartitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterOnPartitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitOnPartitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitOnPartitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnPartitionClauseContext onPartitionClause() throws RecognitionException {
		OnPartitionClauseContext _localctx = new OnPartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_onPartitionClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2172);
			match(ON);
			setState(2173);
			match(PARTITIONS);
			setState(2174);
			match(LP_);
			setState(2175);
			partitionExpressions();
			setState(2176);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionExpressionsContext extends ParserRuleContext {
		public List<PartitionExpressionContext> partitionExpression() {
			return getRuleContexts(PartitionExpressionContext.class);
		}
		public PartitionExpressionContext partitionExpression(int i) {
			return getRuleContext(PartitionExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public PartitionExpressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionExpressions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterPartitionExpressions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitPartitionExpressions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitPartitionExpressions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionExpressionsContext partitionExpressions() throws RecognitionException {
		PartitionExpressionsContext _localctx = new PartitionExpressionsContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_partitionExpressions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2178);
			partitionExpression();
			setState(2183);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2179);
				match(COMMA_);
				setState(2180);
				partitionExpression();
				}
				}
				setState(2185);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionExpressionContext extends ParserRuleContext {
		public TerminalNode NUMBER_() { return getToken(SQLServerStatementParser.NUMBER_, 0); }
		public NumberRangeContext numberRange() {
			return getRuleContext(NumberRangeContext.class,0);
		}
		public PartitionExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterPartitionExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitPartitionExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitPartitionExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionExpressionContext partitionExpression() throws RecognitionException {
		PartitionExpressionContext _localctx = new PartitionExpressionContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_partitionExpression);
		try {
			setState(2188);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,136,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2186);
				match(NUMBER_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2187);
				numberRange();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NumberRangeContext extends ParserRuleContext {
		public List<TerminalNode> NUMBER_() { return getTokens(SQLServerStatementParser.NUMBER_); }
		public TerminalNode NUMBER_(int i) {
			return getToken(SQLServerStatementParser.NUMBER_, i);
		}
		public TerminalNode TO() { return getToken(SQLServerStatementParser.TO, 0); }
		public NumberRangeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numberRange; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterNumberRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitNumberRange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitNumberRange(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumberRangeContext numberRange() throws RecognitionException {
		NumberRangeContext _localctx = new NumberRangeContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_numberRange);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2190);
			match(NUMBER_);
			setState(2191);
			match(TO);
			setState(2192);
			match(NUMBER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LowPriorityLockWaitContext extends ParserRuleContext {
		public TerminalNode WAIT_AT_LOW_PRIORITY() { return getToken(SQLServerStatementParser.WAIT_AT_LOW_PRIORITY, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public TerminalNode MAX_DURATION() { return getToken(SQLServerStatementParser.MAX_DURATION, 0); }
		public List<TerminalNode> EQ_() { return getTokens(SQLServerStatementParser.EQ_); }
		public TerminalNode EQ_(int i) {
			return getToken(SQLServerStatementParser.EQ_, i);
		}
		public TerminalNode NUMBER_() { return getToken(SQLServerStatementParser.NUMBER_, 0); }
		public TerminalNode COMMA_() { return getToken(SQLServerStatementParser.COMMA_, 0); }
		public TerminalNode ABORT_AFTER_WAIT() { return getToken(SQLServerStatementParser.ABORT_AFTER_WAIT, 0); }
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public TerminalNode NONE() { return getToken(SQLServerStatementParser.NONE, 0); }
		public TerminalNode SELF() { return getToken(SQLServerStatementParser.SELF, 0); }
		public TerminalNode BLOCKERS() { return getToken(SQLServerStatementParser.BLOCKERS, 0); }
		public TerminalNode MINUTES() { return getToken(SQLServerStatementParser.MINUTES, 0); }
		public LowPriorityLockWaitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lowPriorityLockWait; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterLowPriorityLockWait(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitLowPriorityLockWait(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitLowPriorityLockWait(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LowPriorityLockWaitContext lowPriorityLockWait() throws RecognitionException {
		LowPriorityLockWaitContext _localctx = new LowPriorityLockWaitContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_lowPriorityLockWait);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2194);
			match(WAIT_AT_LOW_PRIORITY);
			setState(2195);
			match(LP_);
			setState(2196);
			match(MAX_DURATION);
			setState(2197);
			match(EQ_);
			setState(2198);
			match(NUMBER_);
			setState(2200);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MINUTES) {
				{
				setState(2199);
				match(MINUTES);
				}
			}

			setState(2202);
			match(COMMA_);
			setState(2203);
			match(ABORT_AFTER_WAIT);
			setState(2204);
			match(EQ_);
			setState(2205);
			_la = _input.LA(1);
			if ( !(((((_la - 274)) & ~0x3f) == 0 && ((1L << (_la - 274)) & 4503633987108865L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2206);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OnLowPriorLockWaitContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public LowPriorityLockWaitContext lowPriorityLockWait() {
			return getRuleContext(LowPriorityLockWaitContext.class,0);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public OnLowPriorLockWaitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onLowPriorLockWait; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterOnLowPriorLockWait(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitOnLowPriorLockWait(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitOnLowPriorLockWait(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnLowPriorLockWaitContext onLowPriorLockWait() throws RecognitionException {
		OnLowPriorLockWaitContext _localctx = new OnLowPriorLockWaitContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_onLowPriorLockWait);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2208);
			match(ON);
			setState(2213);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(2209);
				match(LP_);
				setState(2210);
				lowPriorityLockWait();
				setState(2211);
				match(RP_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IgnoredIdentifierContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(SQLServerStatementParser.IDENTIFIER_, 0); }
		public IgnoredIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ignoredIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterIgnoredIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitIgnoredIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitIgnoredIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IgnoredIdentifierContext ignoredIdentifier() throws RecognitionException {
		IgnoredIdentifierContext _localctx = new IgnoredIdentifierContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_ignoredIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2215);
			match(IDENTIFIER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IgnoredIdentifiersContext extends ParserRuleContext {
		public List<IgnoredIdentifierContext> ignoredIdentifier() {
			return getRuleContexts(IgnoredIdentifierContext.class);
		}
		public IgnoredIdentifierContext ignoredIdentifier(int i) {
			return getRuleContext(IgnoredIdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public IgnoredIdentifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ignoredIdentifiers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterIgnoredIdentifiers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitIgnoredIdentifiers(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitIgnoredIdentifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IgnoredIdentifiersContext ignoredIdentifiers() throws RecognitionException {
		IgnoredIdentifiersContext _localctx = new IgnoredIdentifiersContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_ignoredIdentifiers);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2217);
			ignoredIdentifier();
			setState(2222);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,139,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2218);
					match(COMMA_);
					setState(2219);
					ignoredIdentifier();
					}
					} 
				}
				setState(2224);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,139,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MatchNoneContext extends ParserRuleContext {
		public MatchNoneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_matchNone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterMatchNone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitMatchNone(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitMatchNone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MatchNoneContext matchNone() throws RecognitionException {
		MatchNoneContext _localctx = new MatchNoneContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_matchNone);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2225);
			match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VariableNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public VariableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterVariableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitVariableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitVariableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableNameContext variableName() throws RecognitionException {
		VariableNameContext _localctx = new VariableNameContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_variableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2227);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExecuteAsClauseContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SQLServerStatementParser.AS, 0); }
		public TerminalNode EXEC() { return getToken(SQLServerStatementParser.EXEC, 0); }
		public TerminalNode EXECUTE() { return getToken(SQLServerStatementParser.EXECUTE, 0); }
		public TerminalNode CALLER() { return getToken(SQLServerStatementParser.CALLER, 0); }
		public TerminalNode SELF() { return getToken(SQLServerStatementParser.SELF, 0); }
		public TerminalNode OWNER() { return getToken(SQLServerStatementParser.OWNER, 0); }
		public StringLiteralsContext stringLiterals() {
			return getRuleContext(StringLiteralsContext.class,0);
		}
		public ExecuteAsClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeAsClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterExecuteAsClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitExecuteAsClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitExecuteAsClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteAsClauseContext executeAsClause() throws RecognitionException {
		ExecuteAsClauseContext _localctx = new ExecuteAsClauseContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_executeAsClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2229);
			_la = _input.LA(1);
			if ( !(_la==EXECUTE || _la==EXEC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2230);
			match(AS);
			setState(2235);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLER:
				{
				setState(2231);
				match(CALLER);
				}
				break;
			case SELF:
				{
				setState(2232);
				match(SELF);
				}
				break;
			case OWNER:
				{
				setState(2233);
				match(OWNER);
				}
				break;
			case STRING_:
			case NCHAR_TEXT:
				{
				setState(2234);
				stringLiterals();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransactionNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TransactionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterTransactionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitTransactionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitTransactionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionNameContext transactionName() throws RecognitionException {
		TransactionNameContext _localctx = new TransactionNameContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_transactionName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2237);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransactionVariableNameContext extends ParserRuleContext {
		public VariableNameContext variableName() {
			return getRuleContext(VariableNameContext.class,0);
		}
		public TransactionVariableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionVariableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterTransactionVariableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitTransactionVariableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitTransactionVariableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionVariableNameContext transactionVariableName() throws RecognitionException {
		TransactionVariableNameContext _localctx = new TransactionVariableNameContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_transactionVariableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2239);
			variableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SavepointNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SavepointNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepointName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSavepointName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSavepointName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSavepointName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SavepointNameContext savepointName() throws RecognitionException {
		SavepointNameContext _localctx = new SavepointNameContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_savepointName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2241);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SavepointVariableNameContext extends ParserRuleContext {
		public VariableNameContext variableName() {
			return getRuleContext(VariableNameContext.class,0);
		}
		public SavepointVariableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepointVariableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSavepointVariableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSavepointVariableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSavepointVariableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SavepointVariableNameContext savepointVariableName() throws RecognitionException {
		SavepointVariableNameContext _localctx = new SavepointVariableNameContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_savepointVariableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2243);
			variableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EntityTypeContext extends ParserRuleContext {
		public TerminalNode OBJECT() { return getToken(SQLServerStatementParser.OBJECT, 0); }
		public TerminalNode TYPE() { return getToken(SQLServerStatementParser.TYPE, 0); }
		public EntityTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_entityType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterEntityType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitEntityType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitEntityType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EntityTypeContext entityType() throws RecognitionException {
		EntityTypeContext _localctx = new EntityTypeContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_entityType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2245);
			_la = _input.LA(1);
			if ( !(_la==TYPE || _la==OBJECT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IfExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(SQLServerStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(SQLServerStatementParser.EXISTS, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterIfExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitIfExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitIfExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfExistsContext ifExists() throws RecognitionException {
		IfExistsContext _localctx = new IfExistsContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_ifExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2247);
			match(IF);
			setState(2248);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableHintLimitedContext extends ParserRuleContext {
		public TerminalNode KEEPIDENTITY() { return getToken(SQLServerStatementParser.KEEPIDENTITY, 0); }
		public TerminalNode KEEPDEFAULTS() { return getToken(SQLServerStatementParser.KEEPDEFAULTS, 0); }
		public TerminalNode HOLDLOCK() { return getToken(SQLServerStatementParser.HOLDLOCK, 0); }
		public TerminalNode IGNORE_CONSTRAINTS() { return getToken(SQLServerStatementParser.IGNORE_CONSTRAINTS, 0); }
		public TerminalNode IGNORE_TRIGGERS() { return getToken(SQLServerStatementParser.IGNORE_TRIGGERS, 0); }
		public TerminalNode NOLOCK() { return getToken(SQLServerStatementParser.NOLOCK, 0); }
		public TerminalNode NOWAIT() { return getToken(SQLServerStatementParser.NOWAIT, 0); }
		public TerminalNode PAGLOCK() { return getToken(SQLServerStatementParser.PAGLOCK, 0); }
		public TerminalNode READCOMMITTED() { return getToken(SQLServerStatementParser.READCOMMITTED, 0); }
		public TerminalNode READCOMMITTEDLOCK() { return getToken(SQLServerStatementParser.READCOMMITTEDLOCK, 0); }
		public TerminalNode READPAST() { return getToken(SQLServerStatementParser.READPAST, 0); }
		public TerminalNode REPEATABLEREAD() { return getToken(SQLServerStatementParser.REPEATABLEREAD, 0); }
		public TerminalNode ROWLOCK() { return getToken(SQLServerStatementParser.ROWLOCK, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(SQLServerStatementParser.SERIALIZABLE, 0); }
		public TerminalNode SNAPSHOT() { return getToken(SQLServerStatementParser.SNAPSHOT, 0); }
		public TerminalNode TABLOCK() { return getToken(SQLServerStatementParser.TABLOCK, 0); }
		public TerminalNode TABLOCKX() { return getToken(SQLServerStatementParser.TABLOCKX, 0); }
		public TerminalNode UPDLOCK() { return getToken(SQLServerStatementParser.UPDLOCK, 0); }
		public TerminalNode XLOCK() { return getToken(SQLServerStatementParser.XLOCK, 0); }
		public TableHintLimitedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableHintLimited; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterTableHintLimited(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitTableHintLimited(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitTableHintLimited(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableHintLimitedContext tableHintLimited() throws RecognitionException {
		TableHintLimitedContext _localctx = new TableHintLimitedContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_tableHintLimited);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2250);
			_la = _input.LA(1);
			if ( !(((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & 131071L) != 0) || _la==SNAPSHOT || _la==SERIALIZABLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MatchExpressionContext extends ParserRuleContext {
		public TerminalNode MATCH() { return getToken(SQLServerStatementParser.MATCH, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public ArbitratyLengthMatchContext arbitratyLengthMatch() {
			return getRuleContext(ArbitratyLengthMatchContext.class,0);
		}
		public SimpleMatchContext simpleMatch() {
			return getRuleContext(SimpleMatchContext.class,0);
		}
		public MatchExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_matchExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterMatchExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitMatchExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitMatchExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MatchExpressionContext matchExpression() throws RecognitionException {
		MatchExpressionContext _localctx = new MatchExpressionContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_matchExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2252);
			match(MATCH);
			setState(2253);
			match(LP_);
			setState(2256);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SHORTEST_PATH:
				{
				setState(2254);
				arbitratyLengthMatch();
				}
				break;
			case MINUS_:
			case DOT_:
			case LT_:
			case RP_:
			case TRUNCATE:
			case SCHEMA:
			case TABLE:
			case COLUMNS:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case RIGHT:
			case OFF:
			case AND:
			case GROUP:
			case LIMIT:
			case OFFSET:
			case SAVEPOINT:
			case BOOLEAN:
			case ARRAY:
			case DATE:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MICROSECOND:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case AVG:
			case ENABLE:
			case DISABLE:
			case INSTANCE:
			case DO:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case NEXT:
			case NAME:
			case INTEGER:
			case TYPE:
			case TEXT:
			case VIEWS:
			case READ_ONLY:
			case DATABASE:
			case RETURNS:
			case DATEPART:
			case PASSWORD:
			case TARGET:
			case BINARY:
			case HIDDEN_:
			case MOD:
			case PARTITION:
			case PARTITIONS:
			case TOP:
			case ROW:
			case ROWS:
			case XOR:
			case ALWAYS:
			case USER:
			case ROLE:
			case START:
			case ACTION:
			case ALGORITHM:
			case AUTO:
			case BLOCKERS:
			case CLUSTERED:
			case NONCLUSTERED:
			case COLUMNSTORE:
			case CONTENT:
			case YEARS:
			case MONTHS:
			case WEEKS:
			case DAYS:
			case MINUTES:
			case DENY:
			case DETERMINISTIC:
			case DISTRIBUTION:
			case DOCUMENT:
			case DURABILITY:
			case ENCRYPTED:
			case FILESTREAM:
			case FILETABLE:
			case FILLFACTOR:
			case FOLLOWING:
			case HASH:
			case HEAP:
			case INBOUND:
			case OUTBOUND:
			case UNBOUNDED:
			case INFINITE:
			case LOGIN:
			case MASKED:
			case MAXDOP:
			case MOVE:
			case NOCHECK:
			case OBJECT:
			case ONLINE:
			case OVER:
			case PAGE:
			case PAUSED:
			case PERIOD:
			case PERSISTED:
			case PRECEDING:
			case RANDOMIZED:
			case RANGE:
			case REBUILD:
			case REPLICATE:
			case REPLICATION:
			case RESUMABLE:
			case ROWGUIDCOL:
			case SAVE:
			case SELF:
			case SPARSE:
			case SWITCH:
			case TRAN:
			case TRANCOUNT:
			case CONTROL:
			case CONCAT:
			case TAKE:
			case OWNERSHIP:
			case DEFINITION:
			case APPLICATION:
			case ASSEMBLY:
			case SYMMETRIC:
			case ASYMMETRIC:
			case SERVER:
			case RECEIVE:
			case CHANGE:
			case TRACE:
			case TRACKING:
			case RESOURCES:
			case SETTINGS:
			case STATE:
			case AVAILABILITY:
			case CREDENTIAL:
			case ENDPOINT:
			case EVENT:
			case NOTIFICATION:
			case LINKED:
			case AUDIT:
			case DDL:
			case XML:
			case IMPERSONATE:
			case SECURABLES:
			case AUTHENTICATE:
			case EXTERNAL:
			case ACCESS:
			case ADMINISTER:
			case BULK:
			case OPERATIONS:
			case UNSAFE:
			case SHUTDOWN:
			case SCOPED:
			case CONFIGURATION:
			case DATASPACE:
			case SERVICE:
			case CERTIFICATE:
			case CONTRACT:
			case ENCRYPTION:
			case MASTER:
			case DATA:
			case SOURCE:
			case FILE:
			case FORMAT:
			case LIBRARY:
			case FULLTEXT:
			case MASK:
			case UNMASK:
			case MESSAGE:
			case REMOTE:
			case BINDING:
			case ROUTE:
			case SECURITY:
			case POLICY:
			case AGGREGATE:
			case QUEUE:
			case RULE:
			case SYNONYM:
			case COLLECTION:
			case SCRIPT:
			case KILL:
			case BACKUP:
			case LOG:
			case SHOWPLAN:
			case SUBSCRIBE:
			case QUERY:
			case NOTIFICATIONS:
			case CHECKPOINT:
			case SEQUENCE:
			case ABORT_AFTER_WAIT:
			case ALLOW_PAGE_LOCKS:
			case ALLOW_ROW_LOCKS:
			case ALL_SPARSE_COLUMNS:
			case BUCKET_COUNT:
			case COLUMNSTORE_ARCHIVE:
			case COLUMN_ENCRYPTION_KEY:
			case COLUMN_SET:
			case COMPRESSION_DELAY:
			case DATABASE_DEAULT:
			case DATA_COMPRESSION:
			case DATA_CONSISTENCY_CHECK:
			case ENCRYPTION_TYPE:
			case SYSTEM_TIME:
			case SYSTEM_VERSIONING:
			case TEXTIMAGE_ON:
			case WAIT_AT_LOW_PRIORITY:
			case STATISTICS_INCREMENTAL:
			case STATISTICS_NORECOMPUTE:
			case ROUND_ROBIN:
			case SCHEMA_AND_DATA:
			case SCHEMA_ONLY:
			case SORT_IN_TEMPDB:
			case IGNORE_DUP_KEY:
			case IMPLICIT_TRANSACTIONS:
			case MAX_DURATION:
			case MEMORY_OPTIMIZED:
			case MIGRATION_STATE:
			case PAD_INDEX:
			case REMOTE_DATA_ARCHIVE:
			case FILESTREAM_ON:
			case FILETABLE_COLLATE_FILENAME:
			case FILETABLE_DIRECTORY:
			case FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME:
			case FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME:
			case FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME:
			case FILTER_PREDICATE:
			case HISTORY_RETENTION_PERIOD:
			case HISTORY_TABLE:
			case LOCK_ESCALATION:
			case DROP_EXISTING:
			case ROW_NUMBER:
			case FIRST:
			case DATETIME2:
			case OUTPUT:
			case INSERTED:
			case DELETED:
			case FILENAME:
			case SIZE:
			case MAXSIZE:
			case FILEGROWTH:
			case UNLIMITED:
			case KB:
			case MB:
			case GB:
			case TB:
			case CONTAINS:
			case MEMORY_OPTIMIZED_DATA:
			case FILEGROUP:
			case NON_TRANSACTED_ACCESS:
			case DB_CHAINING:
			case TRUSTWORTHY:
			case FORWARD_ONLY:
			case KEYSET:
			case FAST_FORWARD:
			case SCROLL_LOCKS:
			case OPTIMISTIC:
			case TYPE_WARNING:
			case SCHEMABINDING:
			case CALLER:
			case INPUT:
			case OWNER:
			case SNAPSHOT:
			case REPEATABLE:
			case SERIALIZABLE:
			case NATIVE_COMPILATION:
			case VIEW_METADATA:
			case INSTEAD:
			case APPEND:
			case INCREMENT:
			case CACHE:
			case MINVALUE:
			case MAXVALUE:
			case RESTART:
			case LOB_COMPACTION:
			case COMPRESS_ALL_ROW_GROUPS:
			case REORGANIZE:
			case RESUME:
			case PAUSE:
			case ABORT:
			case ACCELERATED_DATABASE_RECOVERY:
			case PERSISTENT_VERSION_STORE_FILEGROUP:
			case IMMEDIATE:
			case NO_WAIT:
			case TARGET_RECOVERY_TIME:
			case SECONDS:
			case HONOR_BROKER_PRIORITY:
			case ERROR_BROKER_CONVERSATIONS:
			case NEW_BROKER:
			case DISABLE_BROKER:
			case ENABLE_BROKER:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case READ_COMMITTED_SNAPSHOT:
			case ALLOW_SNAPSHOT_ISOLATION:
			case RECURSIVE_TRIGGERS:
			case QUOTED_IDENTIFIER:
			case NUMERIC_ROUNDABORT:
			case CONCAT_NULL_YIELDS_NULL:
			case COMPATIBILITY_LEVEL:
			case ARITHABORT:
			case ANSI_WARNINGS:
			case ANSI_PADDING:
			case ANSI_NULLS:
			case ANSI_NULL_DEFAULT:
			case PAGE_VERIFY:
			case CHECKSUM:
			case TORN_PAGE_DETECTION:
			case BULK_LOGGED:
			case RECOVERY:
			case TOTAL_EXECUTION_CPU_TIME_MS:
			case TOTAL_COMPILE_CPU_TIME_MS:
			case STALE_CAPTURE_POLICY_THRESHOLD:
			case EXECUTION_COUNT:
			case QUERY_CAPTURE_POLICY:
			case WAIT_STATS_CAPTURE_MODE:
			case MAX_PLANS_PER_QUERY:
			case QUERY_CAPTURE_MODE:
			case SIZE_BASED_CLEANUP_MODE:
			case INTERVAL_LENGTH_MINUTES:
			case MAX_STORAGE_SIZE_MB:
			case DATA_FLUSH_INTERVAL_SECONDS:
			case CLEANUP_POLICY:
			case CUSTOM:
			case STALE_QUERY_THRESHOLD_DAYS:
			case OPERATION_MODE:
			case QUERY_STORE:
			case CURSOR_DEFAULT:
			case GLOBAL:
			case CURSOR_CLOSE_ON_COMMIT:
			case HOURS:
			case CHANGE_RETENTION:
			case AUTO_CLEANUP:
			case CHANGE_TRACKING:
			case AUTOMATIC_TUNING:
			case FORCE_LAST_GOOD_PLAN:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_CREATE_STATISTICS:
			case INCREMENTAL:
			case AUTO_CLOSE:
			case DATA_RETENTION:
			case TEMPORAL_HISTORY_RETENTION:
			case EDITION:
			case MIXED_PAGE_ALLOCATION:
			case DISABLED:
			case ALLOWED:
			case HADR:
			case MULTI_USER:
			case RESTRICTED_USER:
			case SINGLE_USER:
			case OFFLINE:
			case EMERGENCY:
			case SUSPEND:
			case DATE_CORRELATION_OPTIMIZATION:
			case ELASTIC_POOL:
			case SERVICE_OBJECTIVE:
			case DATABASE_NAME:
			case ALLOW_CONNECTIONS:
			case GEO:
			case NAMED:
			case DATEFIRST:
			case BACKUP_STORAGE_REDUNDANCY:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case SECONDARY:
			case FAILOVER:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case INLINE:
			case NESTED_TRIGGERS:
			case TRANSFORM_NOISE_WORDS:
			case TWO_DIGIT_YEAR_CUTOFF:
			case PERSISTENT_LOG_BUFFER:
			case DIRECTORY_NAME:
			case DATEFORMAT:
			case DELAYED_DURABILITY:
			case AUTHORIZATION:
			case TRANSFER:
			case PROVIDER:
			case SID:
			case SEARCH:
			case MEMBER:
			case JSON:
			case OPENQUERY:
			case LAST_NODE:
			case IDENTIFIER_:
			case DELIMITED_IDENTIFIER_:
				{
				setState(2255);
				simpleMatch();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2258);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimpleMatchContext extends ParserRuleContext {
		public List<SimpleMatchClauseContext> simpleMatchClause() {
			return getRuleContexts(SimpleMatchClauseContext.class);
		}
		public SimpleMatchClauseContext simpleMatchClause(int i) {
			return getRuleContext(SimpleMatchClauseContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(SQLServerStatementParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(SQLServerStatementParser.AND, i);
		}
		public List<SimpleMatchContext> simpleMatch() {
			return getRuleContexts(SimpleMatchContext.class);
		}
		public SimpleMatchContext simpleMatch(int i) {
			return getRuleContext(SimpleMatchContext.class,i);
		}
		public SimpleMatchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleMatch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSimpleMatch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSimpleMatch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSimpleMatch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleMatchContext simpleMatch() throws RecognitionException {
		SimpleMatchContext _localctx = new SimpleMatchContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_simpleMatch);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2263);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2909325359550889984L) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 1783988402937454599L) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & 2308104926722523125L) != 0) || ((((_la - 203)) & ~0x3f) == 0 && ((1L << (_la - 203)) & 125995786205922403L) != 0) || ((((_la - 267)) & ~0x3f) == 0 && ((1L << (_la - 267)) & -4402375042057L) != 0) || ((((_la - 337)) & ~0x3f) == 0 && ((1L << (_la - 337)) & -1L) != 0) || ((((_la - 401)) & ~0x3f) == 0 && ((1L << (_la - 401)) & 294985775592767487L) != 0) || ((((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -396317316964417529L) != 0) || ((((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -2196876891101L) != 0) || ((((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -1L) != 0) || ((((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & 562950240208895L) != 0) || ((((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & 197L) != 0)) {
				{
				{
				setState(2260);
				simpleMatchClause();
				}
				}
				setState(2265);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2270);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,143,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2266);
					match(AND);
					setState(2267);
					simpleMatch();
					}
					} 
				}
				setState(2272);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,143,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimpleMatchClauseContext extends ParserRuleContext {
		public LastNodeContext lastNode() {
			return getRuleContext(LastNodeContext.class,0);
		}
		public NodeAliasContext nodeAlias() {
			return getRuleContext(NodeAliasContext.class,0);
		}
		public InEdgePathContext inEdgePath() {
			return getRuleContext(InEdgePathContext.class,0);
		}
		public OutEdgePathContext outEdgePath() {
			return getRuleContext(OutEdgePathContext.class,0);
		}
		public SimpleMatchClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleMatchClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSimpleMatchClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSimpleMatchClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSimpleMatchClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleMatchClauseContext simpleMatchClause() throws RecognitionException {
		SimpleMatchClauseContext _localctx = new SimpleMatchClauseContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_simpleMatchClause);
		try {
			setState(2277);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LAST_NODE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2273);
				lastNode();
				}
				break;
			case DOT_:
			case TRUNCATE:
			case SCHEMA:
			case TABLE:
			case COLUMNS:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case RIGHT:
			case OFF:
			case GROUP:
			case LIMIT:
			case OFFSET:
			case SAVEPOINT:
			case BOOLEAN:
			case ARRAY:
			case DATE:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MICROSECOND:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case AVG:
			case ENABLE:
			case DISABLE:
			case INSTANCE:
			case DO:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case NEXT:
			case NAME:
			case INTEGER:
			case TYPE:
			case TEXT:
			case VIEWS:
			case READ_ONLY:
			case DATABASE:
			case RETURNS:
			case DATEPART:
			case PASSWORD:
			case TARGET:
			case BINARY:
			case HIDDEN_:
			case MOD:
			case PARTITION:
			case PARTITIONS:
			case TOP:
			case ROW:
			case ROWS:
			case XOR:
			case ALWAYS:
			case USER:
			case ROLE:
			case START:
			case ACTION:
			case ALGORITHM:
			case AUTO:
			case BLOCKERS:
			case CLUSTERED:
			case NONCLUSTERED:
			case COLUMNSTORE:
			case CONTENT:
			case YEARS:
			case MONTHS:
			case WEEKS:
			case DAYS:
			case MINUTES:
			case DENY:
			case DETERMINISTIC:
			case DISTRIBUTION:
			case DOCUMENT:
			case DURABILITY:
			case ENCRYPTED:
			case FILESTREAM:
			case FILETABLE:
			case FILLFACTOR:
			case FOLLOWING:
			case HASH:
			case HEAP:
			case INBOUND:
			case OUTBOUND:
			case UNBOUNDED:
			case INFINITE:
			case LOGIN:
			case MASKED:
			case MAXDOP:
			case MOVE:
			case NOCHECK:
			case OBJECT:
			case ONLINE:
			case OVER:
			case PAGE:
			case PAUSED:
			case PERIOD:
			case PERSISTED:
			case PRECEDING:
			case RANDOMIZED:
			case RANGE:
			case REBUILD:
			case REPLICATE:
			case REPLICATION:
			case RESUMABLE:
			case ROWGUIDCOL:
			case SAVE:
			case SELF:
			case SPARSE:
			case SWITCH:
			case TRAN:
			case TRANCOUNT:
			case CONTROL:
			case CONCAT:
			case TAKE:
			case OWNERSHIP:
			case DEFINITION:
			case APPLICATION:
			case ASSEMBLY:
			case SYMMETRIC:
			case ASYMMETRIC:
			case SERVER:
			case RECEIVE:
			case CHANGE:
			case TRACE:
			case TRACKING:
			case RESOURCES:
			case SETTINGS:
			case STATE:
			case AVAILABILITY:
			case CREDENTIAL:
			case ENDPOINT:
			case EVENT:
			case NOTIFICATION:
			case LINKED:
			case AUDIT:
			case DDL:
			case XML:
			case IMPERSONATE:
			case SECURABLES:
			case AUTHENTICATE:
			case EXTERNAL:
			case ACCESS:
			case ADMINISTER:
			case BULK:
			case OPERATIONS:
			case UNSAFE:
			case SHUTDOWN:
			case SCOPED:
			case CONFIGURATION:
			case DATASPACE:
			case SERVICE:
			case CERTIFICATE:
			case CONTRACT:
			case ENCRYPTION:
			case MASTER:
			case DATA:
			case SOURCE:
			case FILE:
			case FORMAT:
			case LIBRARY:
			case FULLTEXT:
			case MASK:
			case UNMASK:
			case MESSAGE:
			case REMOTE:
			case BINDING:
			case ROUTE:
			case SECURITY:
			case POLICY:
			case AGGREGATE:
			case QUEUE:
			case RULE:
			case SYNONYM:
			case COLLECTION:
			case SCRIPT:
			case KILL:
			case BACKUP:
			case LOG:
			case SHOWPLAN:
			case SUBSCRIBE:
			case QUERY:
			case NOTIFICATIONS:
			case CHECKPOINT:
			case SEQUENCE:
			case ABORT_AFTER_WAIT:
			case ALLOW_PAGE_LOCKS:
			case ALLOW_ROW_LOCKS:
			case ALL_SPARSE_COLUMNS:
			case BUCKET_COUNT:
			case COLUMNSTORE_ARCHIVE:
			case COLUMN_ENCRYPTION_KEY:
			case COLUMN_SET:
			case COMPRESSION_DELAY:
			case DATABASE_DEAULT:
			case DATA_COMPRESSION:
			case DATA_CONSISTENCY_CHECK:
			case ENCRYPTION_TYPE:
			case SYSTEM_TIME:
			case SYSTEM_VERSIONING:
			case TEXTIMAGE_ON:
			case WAIT_AT_LOW_PRIORITY:
			case STATISTICS_INCREMENTAL:
			case STATISTICS_NORECOMPUTE:
			case ROUND_ROBIN:
			case SCHEMA_AND_DATA:
			case SCHEMA_ONLY:
			case SORT_IN_TEMPDB:
			case IGNORE_DUP_KEY:
			case IMPLICIT_TRANSACTIONS:
			case MAX_DURATION:
			case MEMORY_OPTIMIZED:
			case MIGRATION_STATE:
			case PAD_INDEX:
			case REMOTE_DATA_ARCHIVE:
			case FILESTREAM_ON:
			case FILETABLE_COLLATE_FILENAME:
			case FILETABLE_DIRECTORY:
			case FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME:
			case FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME:
			case FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME:
			case FILTER_PREDICATE:
			case HISTORY_RETENTION_PERIOD:
			case HISTORY_TABLE:
			case LOCK_ESCALATION:
			case DROP_EXISTING:
			case ROW_NUMBER:
			case FIRST:
			case DATETIME2:
			case OUTPUT:
			case INSERTED:
			case DELETED:
			case FILENAME:
			case SIZE:
			case MAXSIZE:
			case FILEGROWTH:
			case UNLIMITED:
			case KB:
			case MB:
			case GB:
			case TB:
			case CONTAINS:
			case MEMORY_OPTIMIZED_DATA:
			case FILEGROUP:
			case NON_TRANSACTED_ACCESS:
			case DB_CHAINING:
			case TRUSTWORTHY:
			case FORWARD_ONLY:
			case KEYSET:
			case FAST_FORWARD:
			case SCROLL_LOCKS:
			case OPTIMISTIC:
			case TYPE_WARNING:
			case SCHEMABINDING:
			case CALLER:
			case INPUT:
			case OWNER:
			case SNAPSHOT:
			case REPEATABLE:
			case SERIALIZABLE:
			case NATIVE_COMPILATION:
			case VIEW_METADATA:
			case INSTEAD:
			case APPEND:
			case INCREMENT:
			case CACHE:
			case MINVALUE:
			case MAXVALUE:
			case RESTART:
			case LOB_COMPACTION:
			case COMPRESS_ALL_ROW_GROUPS:
			case REORGANIZE:
			case RESUME:
			case PAUSE:
			case ABORT:
			case ACCELERATED_DATABASE_RECOVERY:
			case PERSISTENT_VERSION_STORE_FILEGROUP:
			case IMMEDIATE:
			case NO_WAIT:
			case TARGET_RECOVERY_TIME:
			case SECONDS:
			case HONOR_BROKER_PRIORITY:
			case ERROR_BROKER_CONVERSATIONS:
			case NEW_BROKER:
			case DISABLE_BROKER:
			case ENABLE_BROKER:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case READ_COMMITTED_SNAPSHOT:
			case ALLOW_SNAPSHOT_ISOLATION:
			case RECURSIVE_TRIGGERS:
			case QUOTED_IDENTIFIER:
			case NUMERIC_ROUNDABORT:
			case CONCAT_NULL_YIELDS_NULL:
			case COMPATIBILITY_LEVEL:
			case ARITHABORT:
			case ANSI_WARNINGS:
			case ANSI_PADDING:
			case ANSI_NULLS:
			case ANSI_NULL_DEFAULT:
			case PAGE_VERIFY:
			case CHECKSUM:
			case TORN_PAGE_DETECTION:
			case BULK_LOGGED:
			case RECOVERY:
			case TOTAL_EXECUTION_CPU_TIME_MS:
			case TOTAL_COMPILE_CPU_TIME_MS:
			case STALE_CAPTURE_POLICY_THRESHOLD:
			case EXECUTION_COUNT:
			case QUERY_CAPTURE_POLICY:
			case WAIT_STATS_CAPTURE_MODE:
			case MAX_PLANS_PER_QUERY:
			case QUERY_CAPTURE_MODE:
			case SIZE_BASED_CLEANUP_MODE:
			case INTERVAL_LENGTH_MINUTES:
			case MAX_STORAGE_SIZE_MB:
			case DATA_FLUSH_INTERVAL_SECONDS:
			case CLEANUP_POLICY:
			case CUSTOM:
			case STALE_QUERY_THRESHOLD_DAYS:
			case OPERATION_MODE:
			case QUERY_STORE:
			case CURSOR_DEFAULT:
			case GLOBAL:
			case CURSOR_CLOSE_ON_COMMIT:
			case HOURS:
			case CHANGE_RETENTION:
			case AUTO_CLEANUP:
			case CHANGE_TRACKING:
			case AUTOMATIC_TUNING:
			case FORCE_LAST_GOOD_PLAN:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_CREATE_STATISTICS:
			case INCREMENTAL:
			case AUTO_CLOSE:
			case DATA_RETENTION:
			case TEMPORAL_HISTORY_RETENTION:
			case EDITION:
			case MIXED_PAGE_ALLOCATION:
			case DISABLED:
			case ALLOWED:
			case HADR:
			case MULTI_USER:
			case RESTRICTED_USER:
			case SINGLE_USER:
			case OFFLINE:
			case EMERGENCY:
			case SUSPEND:
			case DATE_CORRELATION_OPTIMIZATION:
			case ELASTIC_POOL:
			case SERVICE_OBJECTIVE:
			case DATABASE_NAME:
			case ALLOW_CONNECTIONS:
			case GEO:
			case NAMED:
			case DATEFIRST:
			case BACKUP_STORAGE_REDUNDANCY:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case SECONDARY:
			case FAILOVER:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case INLINE:
			case NESTED_TRIGGERS:
			case TRANSFORM_NOISE_WORDS:
			case TWO_DIGIT_YEAR_CUTOFF:
			case PERSISTENT_LOG_BUFFER:
			case DIRECTORY_NAME:
			case DATEFORMAT:
			case DELAYED_DURABILITY:
			case AUTHORIZATION:
			case TRANSFER:
			case PROVIDER:
			case SID:
			case SEARCH:
			case MEMBER:
			case JSON:
			case OPENQUERY:
			case IDENTIFIER_:
			case DELIMITED_IDENTIFIER_:
				enterOuterAlt(_localctx, 2);
				{
				setState(2274);
				nodeAlias();
				}
				break;
			case LT_:
				enterOuterAlt(_localctx, 3);
				{
				setState(2275);
				inEdgePath();
				}
				break;
			case MINUS_:
				enterOuterAlt(_localctx, 4);
				{
				setState(2276);
				outEdgePath();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LastNodeContext extends ParserRuleContext {
		public TerminalNode LAST_NODE() { return getToken(SQLServerStatementParser.LAST_NODE, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public NodeAliasContext nodeAlias() {
			return getRuleContext(NodeAliasContext.class,0);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public LastNodeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lastNode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterLastNode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitLastNode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitLastNode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LastNodeContext lastNode() throws RecognitionException {
		LastNodeContext _localctx = new LastNodeContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_lastNode);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2279);
			match(LAST_NODE);
			setState(2280);
			match(LP_);
			setState(2281);
			nodeAlias();
			setState(2282);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ArbitratyLengthMatchContext extends ParserRuleContext {
		public TerminalNode SHORTEST_PATH() { return getToken(SQLServerStatementParser.SHORTEST_PATH, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<ArbitraryLengthContext> arbitraryLength() {
			return getRuleContexts(ArbitraryLengthContext.class);
		}
		public ArbitraryLengthContext arbitraryLength(int i) {
			return getRuleContext(ArbitraryLengthContext.class,i);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public List<TerminalNode> AND() { return getTokens(SQLServerStatementParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(SQLServerStatementParser.AND, i);
		}
		public ArbitratyLengthMatchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arbitratyLengthMatch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterArbitratyLengthMatch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitArbitratyLengthMatch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitArbitratyLengthMatch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArbitratyLengthMatchContext arbitratyLengthMatch() throws RecognitionException {
		ArbitratyLengthMatchContext _localctx = new ArbitratyLengthMatchContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_arbitratyLengthMatch);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2284);
			match(SHORTEST_PATH);
			setState(2285);
			match(LP_);
			setState(2286);
			arbitraryLength();
			setState(2287);
			match(RP_);
			setState(2292);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AND) {
				{
				{
				setState(2288);
				match(AND);
				setState(2289);
				arbitraryLength();
				}
				}
				setState(2294);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ArbitraryLengthContext extends ParserRuleContext {
		public List<ArbitraryLengthClauseContext> arbitraryLengthClause() {
			return getRuleContexts(ArbitraryLengthClauseContext.class);
		}
		public ArbitraryLengthClauseContext arbitraryLengthClause(int i) {
			return getRuleContext(ArbitraryLengthClauseContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(SQLServerStatementParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(SQLServerStatementParser.AND, i);
		}
		public ArbitraryLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arbitraryLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterArbitraryLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitArbitraryLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitArbitraryLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArbitraryLengthContext arbitraryLength() throws RecognitionException {
		ArbitraryLengthContext _localctx = new ArbitraryLengthContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_arbitraryLength);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2295);
			arbitraryLengthClause();
			setState(2302);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,147,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2297);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AND) {
						{
						setState(2296);
						match(AND);
						}
					}

					setState(2299);
					arbitraryLengthClause();
					}
					} 
				}
				setState(2304);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,147,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ArbitraryLengthClauseContext extends ParserRuleContext {
		public LastNodeContext lastNode() {
			return getRuleContext(LastNodeContext.class,0);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<EdgeNodeAlContext> edgeNodeAl() {
			return getRuleContexts(EdgeNodeAlContext.class);
		}
		public EdgeNodeAlContext edgeNodeAl(int i) {
			return getRuleContext(EdgeNodeAlContext.class,i);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public AlPatternQuantifierContext alPatternQuantifier() {
			return getRuleContext(AlPatternQuantifierContext.class,0);
		}
		public ArbitraryLengthClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arbitraryLengthClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterArbitraryLengthClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitArbitraryLengthClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitArbitraryLengthClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArbitraryLengthClauseContext arbitraryLengthClause() throws RecognitionException {
		ArbitraryLengthClauseContext _localctx = new ArbitraryLengthClauseContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_arbitraryLengthClause);
		int _la;
		try {
			int _alt;
			setState(2335);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOT_:
			case TRUNCATE:
			case SCHEMA:
			case TABLE:
			case COLUMNS:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case RIGHT:
			case OFF:
			case GROUP:
			case LIMIT:
			case OFFSET:
			case SAVEPOINT:
			case BOOLEAN:
			case ARRAY:
			case DATE:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MICROSECOND:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case AVG:
			case ENABLE:
			case DISABLE:
			case INSTANCE:
			case DO:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case NEXT:
			case NAME:
			case INTEGER:
			case TYPE:
			case TEXT:
			case VIEWS:
			case READ_ONLY:
			case DATABASE:
			case RETURNS:
			case DATEPART:
			case PASSWORD:
			case TARGET:
			case BINARY:
			case HIDDEN_:
			case MOD:
			case PARTITION:
			case PARTITIONS:
			case TOP:
			case ROW:
			case ROWS:
			case XOR:
			case ALWAYS:
			case USER:
			case ROLE:
			case START:
			case ACTION:
			case ALGORITHM:
			case AUTO:
			case BLOCKERS:
			case CLUSTERED:
			case NONCLUSTERED:
			case COLUMNSTORE:
			case CONTENT:
			case YEARS:
			case MONTHS:
			case WEEKS:
			case DAYS:
			case MINUTES:
			case DENY:
			case DETERMINISTIC:
			case DISTRIBUTION:
			case DOCUMENT:
			case DURABILITY:
			case ENCRYPTED:
			case FILESTREAM:
			case FILETABLE:
			case FILLFACTOR:
			case FOLLOWING:
			case HASH:
			case HEAP:
			case INBOUND:
			case OUTBOUND:
			case UNBOUNDED:
			case INFINITE:
			case LOGIN:
			case MASKED:
			case MAXDOP:
			case MOVE:
			case NOCHECK:
			case OBJECT:
			case ONLINE:
			case OVER:
			case PAGE:
			case PAUSED:
			case PERIOD:
			case PERSISTED:
			case PRECEDING:
			case RANDOMIZED:
			case RANGE:
			case REBUILD:
			case REPLICATE:
			case REPLICATION:
			case RESUMABLE:
			case ROWGUIDCOL:
			case SAVE:
			case SELF:
			case SPARSE:
			case SWITCH:
			case TRAN:
			case TRANCOUNT:
			case CONTROL:
			case CONCAT:
			case TAKE:
			case OWNERSHIP:
			case DEFINITION:
			case APPLICATION:
			case ASSEMBLY:
			case SYMMETRIC:
			case ASYMMETRIC:
			case SERVER:
			case RECEIVE:
			case CHANGE:
			case TRACE:
			case TRACKING:
			case RESOURCES:
			case SETTINGS:
			case STATE:
			case AVAILABILITY:
			case CREDENTIAL:
			case ENDPOINT:
			case EVENT:
			case NOTIFICATION:
			case LINKED:
			case AUDIT:
			case DDL:
			case XML:
			case IMPERSONATE:
			case SECURABLES:
			case AUTHENTICATE:
			case EXTERNAL:
			case ACCESS:
			case ADMINISTER:
			case BULK:
			case OPERATIONS:
			case UNSAFE:
			case SHUTDOWN:
			case SCOPED:
			case CONFIGURATION:
			case DATASPACE:
			case SERVICE:
			case CERTIFICATE:
			case CONTRACT:
			case ENCRYPTION:
			case MASTER:
			case DATA:
			case SOURCE:
			case FILE:
			case FORMAT:
			case LIBRARY:
			case FULLTEXT:
			case MASK:
			case UNMASK:
			case MESSAGE:
			case REMOTE:
			case BINDING:
			case ROUTE:
			case SECURITY:
			case POLICY:
			case AGGREGATE:
			case QUEUE:
			case RULE:
			case SYNONYM:
			case COLLECTION:
			case SCRIPT:
			case KILL:
			case BACKUP:
			case LOG:
			case SHOWPLAN:
			case SUBSCRIBE:
			case QUERY:
			case NOTIFICATIONS:
			case CHECKPOINT:
			case SEQUENCE:
			case ABORT_AFTER_WAIT:
			case ALLOW_PAGE_LOCKS:
			case ALLOW_ROW_LOCKS:
			case ALL_SPARSE_COLUMNS:
			case BUCKET_COUNT:
			case COLUMNSTORE_ARCHIVE:
			case COLUMN_ENCRYPTION_KEY:
			case COLUMN_SET:
			case COMPRESSION_DELAY:
			case DATABASE_DEAULT:
			case DATA_COMPRESSION:
			case DATA_CONSISTENCY_CHECK:
			case ENCRYPTION_TYPE:
			case SYSTEM_TIME:
			case SYSTEM_VERSIONING:
			case TEXTIMAGE_ON:
			case WAIT_AT_LOW_PRIORITY:
			case STATISTICS_INCREMENTAL:
			case STATISTICS_NORECOMPUTE:
			case ROUND_ROBIN:
			case SCHEMA_AND_DATA:
			case SCHEMA_ONLY:
			case SORT_IN_TEMPDB:
			case IGNORE_DUP_KEY:
			case IMPLICIT_TRANSACTIONS:
			case MAX_DURATION:
			case MEMORY_OPTIMIZED:
			case MIGRATION_STATE:
			case PAD_INDEX:
			case REMOTE_DATA_ARCHIVE:
			case FILESTREAM_ON:
			case FILETABLE_COLLATE_FILENAME:
			case FILETABLE_DIRECTORY:
			case FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME:
			case FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME:
			case FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME:
			case FILTER_PREDICATE:
			case HISTORY_RETENTION_PERIOD:
			case HISTORY_TABLE:
			case LOCK_ESCALATION:
			case DROP_EXISTING:
			case ROW_NUMBER:
			case FIRST:
			case DATETIME2:
			case OUTPUT:
			case INSERTED:
			case DELETED:
			case FILENAME:
			case SIZE:
			case MAXSIZE:
			case FILEGROWTH:
			case UNLIMITED:
			case KB:
			case MB:
			case GB:
			case TB:
			case CONTAINS:
			case MEMORY_OPTIMIZED_DATA:
			case FILEGROUP:
			case NON_TRANSACTED_ACCESS:
			case DB_CHAINING:
			case TRUSTWORTHY:
			case FORWARD_ONLY:
			case KEYSET:
			case FAST_FORWARD:
			case SCROLL_LOCKS:
			case OPTIMISTIC:
			case TYPE_WARNING:
			case SCHEMABINDING:
			case CALLER:
			case INPUT:
			case OWNER:
			case SNAPSHOT:
			case REPEATABLE:
			case SERIALIZABLE:
			case NATIVE_COMPILATION:
			case VIEW_METADATA:
			case INSTEAD:
			case APPEND:
			case INCREMENT:
			case CACHE:
			case MINVALUE:
			case MAXVALUE:
			case RESTART:
			case LOB_COMPACTION:
			case COMPRESS_ALL_ROW_GROUPS:
			case REORGANIZE:
			case RESUME:
			case PAUSE:
			case ABORT:
			case ACCELERATED_DATABASE_RECOVERY:
			case PERSISTENT_VERSION_STORE_FILEGROUP:
			case IMMEDIATE:
			case NO_WAIT:
			case TARGET_RECOVERY_TIME:
			case SECONDS:
			case HONOR_BROKER_PRIORITY:
			case ERROR_BROKER_CONVERSATIONS:
			case NEW_BROKER:
			case DISABLE_BROKER:
			case ENABLE_BROKER:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case READ_COMMITTED_SNAPSHOT:
			case ALLOW_SNAPSHOT_ISOLATION:
			case RECURSIVE_TRIGGERS:
			case QUOTED_IDENTIFIER:
			case NUMERIC_ROUNDABORT:
			case CONCAT_NULL_YIELDS_NULL:
			case COMPATIBILITY_LEVEL:
			case ARITHABORT:
			case ANSI_WARNINGS:
			case ANSI_PADDING:
			case ANSI_NULLS:
			case ANSI_NULL_DEFAULT:
			case PAGE_VERIFY:
			case CHECKSUM:
			case TORN_PAGE_DETECTION:
			case BULK_LOGGED:
			case RECOVERY:
			case TOTAL_EXECUTION_CPU_TIME_MS:
			case TOTAL_COMPILE_CPU_TIME_MS:
			case STALE_CAPTURE_POLICY_THRESHOLD:
			case EXECUTION_COUNT:
			case QUERY_CAPTURE_POLICY:
			case WAIT_STATS_CAPTURE_MODE:
			case MAX_PLANS_PER_QUERY:
			case QUERY_CAPTURE_MODE:
			case SIZE_BASED_CLEANUP_MODE:
			case INTERVAL_LENGTH_MINUTES:
			case MAX_STORAGE_SIZE_MB:
			case DATA_FLUSH_INTERVAL_SECONDS:
			case CLEANUP_POLICY:
			case CUSTOM:
			case STALE_QUERY_THRESHOLD_DAYS:
			case OPERATION_MODE:
			case QUERY_STORE:
			case CURSOR_DEFAULT:
			case GLOBAL:
			case CURSOR_CLOSE_ON_COMMIT:
			case HOURS:
			case CHANGE_RETENTION:
			case AUTO_CLEANUP:
			case CHANGE_TRACKING:
			case AUTOMATIC_TUNING:
			case FORCE_LAST_GOOD_PLAN:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_CREATE_STATISTICS:
			case INCREMENTAL:
			case AUTO_CLOSE:
			case DATA_RETENTION:
			case TEMPORAL_HISTORY_RETENTION:
			case EDITION:
			case MIXED_PAGE_ALLOCATION:
			case DISABLED:
			case ALLOWED:
			case HADR:
			case MULTI_USER:
			case RESTRICTED_USER:
			case SINGLE_USER:
			case OFFLINE:
			case EMERGENCY:
			case SUSPEND:
			case DATE_CORRELATION_OPTIMIZATION:
			case ELASTIC_POOL:
			case SERVICE_OBJECTIVE:
			case DATABASE_NAME:
			case ALLOW_CONNECTIONS:
			case GEO:
			case NAMED:
			case DATEFIRST:
			case BACKUP_STORAGE_REDUNDANCY:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case SECONDARY:
			case FAILOVER:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case INLINE:
			case NESTED_TRIGGERS:
			case TRANSFORM_NOISE_WORDS:
			case TWO_DIGIT_YEAR_CUTOFF:
			case PERSISTENT_LOG_BUFFER:
			case DIRECTORY_NAME:
			case DATEFORMAT:
			case DELAYED_DURABILITY:
			case AUTHORIZATION:
			case TRANSFER:
			case PROVIDER:
			case SID:
			case SEARCH:
			case MEMBER:
			case JSON:
			case OPENQUERY:
			case LAST_NODE:
			case IDENTIFIER_:
			case DELIMITED_IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(2307);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LAST_NODE:
					{
					setState(2305);
					lastNode();
					}
					break;
				case DOT_:
				case TRUNCATE:
				case SCHEMA:
				case TABLE:
				case COLUMNS:
				case PRECISION:
				case FUNCTION:
				case TRIGGER:
				case CAST:
				case TRIM:
				case SUBSTRING:
				case RIGHT:
				case OFF:
				case GROUP:
				case LIMIT:
				case OFFSET:
				case SAVEPOINT:
				case BOOLEAN:
				case ARRAY:
				case DATE:
				case TIMESTAMP:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case YEAR:
				case QUARTER:
				case MONTH:
				case WEEK:
				case DAY:
				case HOUR:
				case MINUTE:
				case SECOND:
				case MICROSECOND:
				case MAX:
				case MIN:
				case SUM:
				case COUNT:
				case AVG:
				case ENABLE:
				case DISABLE:
				case INSTANCE:
				case DO:
				case DEFINER:
				case SQL:
				case CASCADED:
				case LOCAL:
				case NEXT:
				case NAME:
				case INTEGER:
				case TYPE:
				case TEXT:
				case VIEWS:
				case READ_ONLY:
				case DATABASE:
				case RETURNS:
				case DATEPART:
				case PASSWORD:
				case TARGET:
				case BINARY:
				case HIDDEN_:
				case MOD:
				case PARTITION:
				case PARTITIONS:
				case TOP:
				case ROW:
				case ROWS:
				case XOR:
				case ALWAYS:
				case USER:
				case ROLE:
				case START:
				case ACTION:
				case ALGORITHM:
				case AUTO:
				case BLOCKERS:
				case CLUSTERED:
				case NONCLUSTERED:
				case COLUMNSTORE:
				case CONTENT:
				case YEARS:
				case MONTHS:
				case WEEKS:
				case DAYS:
				case MINUTES:
				case DENY:
				case DETERMINISTIC:
				case DISTRIBUTION:
				case DOCUMENT:
				case DURABILITY:
				case ENCRYPTED:
				case FILESTREAM:
				case FILETABLE:
				case FILLFACTOR:
				case FOLLOWING:
				case HASH:
				case HEAP:
				case INBOUND:
				case OUTBOUND:
				case UNBOUNDED:
				case INFINITE:
				case LOGIN:
				case MASKED:
				case MAXDOP:
				case MOVE:
				case NOCHECK:
				case OBJECT:
				case ONLINE:
				case OVER:
				case PAGE:
				case PAUSED:
				case PERIOD:
				case PERSISTED:
				case PRECEDING:
				case RANDOMIZED:
				case RANGE:
				case REBUILD:
				case REPLICATE:
				case REPLICATION:
				case RESUMABLE:
				case ROWGUIDCOL:
				case SAVE:
				case SELF:
				case SPARSE:
				case SWITCH:
				case TRAN:
				case TRANCOUNT:
				case CONTROL:
				case CONCAT:
				case TAKE:
				case OWNERSHIP:
				case DEFINITION:
				case APPLICATION:
				case ASSEMBLY:
				case SYMMETRIC:
				case ASYMMETRIC:
				case SERVER:
				case RECEIVE:
				case CHANGE:
				case TRACE:
				case TRACKING:
				case RESOURCES:
				case SETTINGS:
				case STATE:
				case AVAILABILITY:
				case CREDENTIAL:
				case ENDPOINT:
				case EVENT:
				case NOTIFICATION:
				case LINKED:
				case AUDIT:
				case DDL:
				case XML:
				case IMPERSONATE:
				case SECURABLES:
				case AUTHENTICATE:
				case EXTERNAL:
				case ACCESS:
				case ADMINISTER:
				case BULK:
				case OPERATIONS:
				case UNSAFE:
				case SHUTDOWN:
				case SCOPED:
				case CONFIGURATION:
				case DATASPACE:
				case SERVICE:
				case CERTIFICATE:
				case CONTRACT:
				case ENCRYPTION:
				case MASTER:
				case DATA:
				case SOURCE:
				case FILE:
				case FORMAT:
				case LIBRARY:
				case FULLTEXT:
				case MASK:
				case UNMASK:
				case MESSAGE:
				case REMOTE:
				case BINDING:
				case ROUTE:
				case SECURITY:
				case POLICY:
				case AGGREGATE:
				case QUEUE:
				case RULE:
				case SYNONYM:
				case COLLECTION:
				case SCRIPT:
				case KILL:
				case BACKUP:
				case LOG:
				case SHOWPLAN:
				case SUBSCRIBE:
				case QUERY:
				case NOTIFICATIONS:
				case CHECKPOINT:
				case SEQUENCE:
				case ABORT_AFTER_WAIT:
				case ALLOW_PAGE_LOCKS:
				case ALLOW_ROW_LOCKS:
				case ALL_SPARSE_COLUMNS:
				case BUCKET_COUNT:
				case COLUMNSTORE_ARCHIVE:
				case COLUMN_ENCRYPTION_KEY:
				case COLUMN_SET:
				case COMPRESSION_DELAY:
				case DATABASE_DEAULT:
				case DATA_COMPRESSION:
				case DATA_CONSISTENCY_CHECK:
				case ENCRYPTION_TYPE:
				case SYSTEM_TIME:
				case SYSTEM_VERSIONING:
				case TEXTIMAGE_ON:
				case WAIT_AT_LOW_PRIORITY:
				case STATISTICS_INCREMENTAL:
				case STATISTICS_NORECOMPUTE:
				case ROUND_ROBIN:
				case SCHEMA_AND_DATA:
				case SCHEMA_ONLY:
				case SORT_IN_TEMPDB:
				case IGNORE_DUP_KEY:
				case IMPLICIT_TRANSACTIONS:
				case MAX_DURATION:
				case MEMORY_OPTIMIZED:
				case MIGRATION_STATE:
				case PAD_INDEX:
				case REMOTE_DATA_ARCHIVE:
				case FILESTREAM_ON:
				case FILETABLE_COLLATE_FILENAME:
				case FILETABLE_DIRECTORY:
				case FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME:
				case FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME:
				case FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME:
				case FILTER_PREDICATE:
				case HISTORY_RETENTION_PERIOD:
				case HISTORY_TABLE:
				case LOCK_ESCALATION:
				case DROP_EXISTING:
				case ROW_NUMBER:
				case FIRST:
				case DATETIME2:
				case OUTPUT:
				case INSERTED:
				case DELETED:
				case FILENAME:
				case SIZE:
				case MAXSIZE:
				case FILEGROWTH:
				case UNLIMITED:
				case KB:
				case MB:
				case GB:
				case TB:
				case CONTAINS:
				case MEMORY_OPTIMIZED_DATA:
				case FILEGROUP:
				case NON_TRANSACTED_ACCESS:
				case DB_CHAINING:
				case TRUSTWORTHY:
				case FORWARD_ONLY:
				case KEYSET:
				case FAST_FORWARD:
				case SCROLL_LOCKS:
				case OPTIMISTIC:
				case TYPE_WARNING:
				case SCHEMABINDING:
				case CALLER:
				case INPUT:
				case OWNER:
				case SNAPSHOT:
				case REPEATABLE:
				case SERIALIZABLE:
				case NATIVE_COMPILATION:
				case VIEW_METADATA:
				case INSTEAD:
				case APPEND:
				case INCREMENT:
				case CACHE:
				case MINVALUE:
				case MAXVALUE:
				case RESTART:
				case LOB_COMPACTION:
				case COMPRESS_ALL_ROW_GROUPS:
				case REORGANIZE:
				case RESUME:
				case PAUSE:
				case ABORT:
				case ACCELERATED_DATABASE_RECOVERY:
				case PERSISTENT_VERSION_STORE_FILEGROUP:
				case IMMEDIATE:
				case NO_WAIT:
				case TARGET_RECOVERY_TIME:
				case SECONDS:
				case HONOR_BROKER_PRIORITY:
				case ERROR_BROKER_CONVERSATIONS:
				case NEW_BROKER:
				case DISABLE_BROKER:
				case ENABLE_BROKER:
				case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
				case READ_COMMITTED_SNAPSHOT:
				case ALLOW_SNAPSHOT_ISOLATION:
				case RECURSIVE_TRIGGERS:
				case QUOTED_IDENTIFIER:
				case NUMERIC_ROUNDABORT:
				case CONCAT_NULL_YIELDS_NULL:
				case COMPATIBILITY_LEVEL:
				case ARITHABORT:
				case ANSI_WARNINGS:
				case ANSI_PADDING:
				case ANSI_NULLS:
				case ANSI_NULL_DEFAULT:
				case PAGE_VERIFY:
				case CHECKSUM:
				case TORN_PAGE_DETECTION:
				case BULK_LOGGED:
				case RECOVERY:
				case TOTAL_EXECUTION_CPU_TIME_MS:
				case TOTAL_COMPILE_CPU_TIME_MS:
				case STALE_CAPTURE_POLICY_THRESHOLD:
				case EXECUTION_COUNT:
				case QUERY_CAPTURE_POLICY:
				case WAIT_STATS_CAPTURE_MODE:
				case MAX_PLANS_PER_QUERY:
				case QUERY_CAPTURE_MODE:
				case SIZE_BASED_CLEANUP_MODE:
				case INTERVAL_LENGTH_MINUTES:
				case MAX_STORAGE_SIZE_MB:
				case DATA_FLUSH_INTERVAL_SECONDS:
				case CLEANUP_POLICY:
				case CUSTOM:
				case STALE_QUERY_THRESHOLD_DAYS:
				case OPERATION_MODE:
				case QUERY_STORE:
				case CURSOR_DEFAULT:
				case GLOBAL:
				case CURSOR_CLOSE_ON_COMMIT:
				case HOURS:
				case CHANGE_RETENTION:
				case AUTO_CLEANUP:
				case CHANGE_TRACKING:
				case AUTOMATIC_TUNING:
				case FORCE_LAST_GOOD_PLAN:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_CREATE_STATISTICS:
				case INCREMENTAL:
				case AUTO_CLOSE:
				case DATA_RETENTION:
				case TEMPORAL_HISTORY_RETENTION:
				case EDITION:
				case MIXED_PAGE_ALLOCATION:
				case DISABLED:
				case ALLOWED:
				case HADR:
				case MULTI_USER:
				case RESTRICTED_USER:
				case SINGLE_USER:
				case OFFLINE:
				case EMERGENCY:
				case SUSPEND:
				case DATE_CORRELATION_OPTIMIZATION:
				case ELASTIC_POOL:
				case SERVICE_OBJECTIVE:
				case DATABASE_NAME:
				case ALLOW_CONNECTIONS:
				case GEO:
				case NAMED:
				case DATEFIRST:
				case BACKUP_STORAGE_REDUNDANCY:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case SECONDARY:
				case FAILOVER:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case INLINE:
				case NESTED_TRIGGERS:
				case TRANSFORM_NOISE_WORDS:
				case TWO_DIGIT_YEAR_CUTOFF:
				case PERSISTENT_LOG_BUFFER:
				case DIRECTORY_NAME:
				case DATEFORMAT:
				case DELAYED_DURABILITY:
				case AUTHORIZATION:
				case TRANSFER:
				case PROVIDER:
				case SID:
				case SEARCH:
				case MEMBER:
				case JSON:
				case OPENQUERY:
				case IDENTIFIER_:
				case DELIMITED_IDENTIFIER_:
					{
					setState(2306);
					tableName();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2310);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(2309);
					match(LP_);
					}
				}

				setState(2313); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2312);
						edgeNodeAl();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2315); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,150,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(2318);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,151,_ctx) ) {
				case 1:
					{
					setState(2317);
					match(RP_);
					}
					break;
				}
				setState(2321);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PLUS_ || _la==LBE_) {
					{
					setState(2320);
					alPatternQuantifier();
					}
				}

				}
				break;
			case LP_:
				enterOuterAlt(_localctx, 2);
				{
				setState(2323);
				match(LP_);
				setState(2325); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2324);
					edgeNodeAl();
					}
					}
					setState(2327); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 2909325359550889984L) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 1783988402937454599L) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & 2308104926722523125L) != 0) || ((((_la - 203)) & ~0x3f) == 0 && ((1L << (_la - 203)) & 125995786205922403L) != 0) || ((((_la - 267)) & ~0x3f) == 0 && ((1L << (_la - 267)) & -4402375042057L) != 0) || ((((_la - 337)) & ~0x3f) == 0 && ((1L << (_la - 337)) & -1L) != 0) || ((((_la - 401)) & ~0x3f) == 0 && ((1L << (_la - 401)) & 294985775592767487L) != 0) || ((((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -396317316964417529L) != 0) || ((((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -2196876891101L) != 0) || ((((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -1L) != 0) || ((((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & 562950240208895L) != 0) || ((((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & 193L) != 0) );
				setState(2329);
				match(RP_);
				setState(2330);
				alPatternQuantifier();
				setState(2333);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LAST_NODE:
					{
					setState(2331);
					lastNode();
					}
					break;
				case DOT_:
				case TRUNCATE:
				case SCHEMA:
				case TABLE:
				case COLUMNS:
				case PRECISION:
				case FUNCTION:
				case TRIGGER:
				case CAST:
				case TRIM:
				case SUBSTRING:
				case RIGHT:
				case OFF:
				case GROUP:
				case LIMIT:
				case OFFSET:
				case SAVEPOINT:
				case BOOLEAN:
				case ARRAY:
				case DATE:
				case TIMESTAMP:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case YEAR:
				case QUARTER:
				case MONTH:
				case WEEK:
				case DAY:
				case HOUR:
				case MINUTE:
				case SECOND:
				case MICROSECOND:
				case MAX:
				case MIN:
				case SUM:
				case COUNT:
				case AVG:
				case ENABLE:
				case DISABLE:
				case INSTANCE:
				case DO:
				case DEFINER:
				case SQL:
				case CASCADED:
				case LOCAL:
				case NEXT:
				case NAME:
				case INTEGER:
				case TYPE:
				case TEXT:
				case VIEWS:
				case READ_ONLY:
				case DATABASE:
				case RETURNS:
				case DATEPART:
				case PASSWORD:
				case TARGET:
				case BINARY:
				case HIDDEN_:
				case MOD:
				case PARTITION:
				case PARTITIONS:
				case TOP:
				case ROW:
				case ROWS:
				case XOR:
				case ALWAYS:
				case USER:
				case ROLE:
				case START:
				case ACTION:
				case ALGORITHM:
				case AUTO:
				case BLOCKERS:
				case CLUSTERED:
				case NONCLUSTERED:
				case COLUMNSTORE:
				case CONTENT:
				case YEARS:
				case MONTHS:
				case WEEKS:
				case DAYS:
				case MINUTES:
				case DENY:
				case DETERMINISTIC:
				case DISTRIBUTION:
				case DOCUMENT:
				case DURABILITY:
				case ENCRYPTED:
				case FILESTREAM:
				case FILETABLE:
				case FILLFACTOR:
				case FOLLOWING:
				case HASH:
				case HEAP:
				case INBOUND:
				case OUTBOUND:
				case UNBOUNDED:
				case INFINITE:
				case LOGIN:
				case MASKED:
				case MAXDOP:
				case MOVE:
				case NOCHECK:
				case OBJECT:
				case ONLINE:
				case OVER:
				case PAGE:
				case PAUSED:
				case PERIOD:
				case PERSISTED:
				case PRECEDING:
				case RANDOMIZED:
				case RANGE:
				case REBUILD:
				case REPLICATE:
				case REPLICATION:
				case RESUMABLE:
				case ROWGUIDCOL:
				case SAVE:
				case SELF:
				case SPARSE:
				case SWITCH:
				case TRAN:
				case TRANCOUNT:
				case CONTROL:
				case CONCAT:
				case TAKE:
				case OWNERSHIP:
				case DEFINITION:
				case APPLICATION:
				case ASSEMBLY:
				case SYMMETRIC:
				case ASYMMETRIC:
				case SERVER:
				case RECEIVE:
				case CHANGE:
				case TRACE:
				case TRACKING:
				case RESOURCES:
				case SETTINGS:
				case STATE:
				case AVAILABILITY:
				case CREDENTIAL:
				case ENDPOINT:
				case EVENT:
				case NOTIFICATION:
				case LINKED:
				case AUDIT:
				case DDL:
				case XML:
				case IMPERSONATE:
				case SECURABLES:
				case AUTHENTICATE:
				case EXTERNAL:
				case ACCESS:
				case ADMINISTER:
				case BULK:
				case OPERATIONS:
				case UNSAFE:
				case SHUTDOWN:
				case SCOPED:
				case CONFIGURATION:
				case DATASPACE:
				case SERVICE:
				case CERTIFICATE:
				case CONTRACT:
				case ENCRYPTION:
				case MASTER:
				case DATA:
				case SOURCE:
				case FILE:
				case FORMAT:
				case LIBRARY:
				case FULLTEXT:
				case MASK:
				case UNMASK:
				case MESSAGE:
				case REMOTE:
				case BINDING:
				case ROUTE:
				case SECURITY:
				case POLICY:
				case AGGREGATE:
				case QUEUE:
				case RULE:
				case SYNONYM:
				case COLLECTION:
				case SCRIPT:
				case KILL:
				case BACKUP:
				case LOG:
				case SHOWPLAN:
				case SUBSCRIBE:
				case QUERY:
				case NOTIFICATIONS:
				case CHECKPOINT:
				case SEQUENCE:
				case ABORT_AFTER_WAIT:
				case ALLOW_PAGE_LOCKS:
				case ALLOW_ROW_LOCKS:
				case ALL_SPARSE_COLUMNS:
				case BUCKET_COUNT:
				case COLUMNSTORE_ARCHIVE:
				case COLUMN_ENCRYPTION_KEY:
				case COLUMN_SET:
				case COMPRESSION_DELAY:
				case DATABASE_DEAULT:
				case DATA_COMPRESSION:
				case DATA_CONSISTENCY_CHECK:
				case ENCRYPTION_TYPE:
				case SYSTEM_TIME:
				case SYSTEM_VERSIONING:
				case TEXTIMAGE_ON:
				case WAIT_AT_LOW_PRIORITY:
				case STATISTICS_INCREMENTAL:
				case STATISTICS_NORECOMPUTE:
				case ROUND_ROBIN:
				case SCHEMA_AND_DATA:
				case SCHEMA_ONLY:
				case SORT_IN_TEMPDB:
				case IGNORE_DUP_KEY:
				case IMPLICIT_TRANSACTIONS:
				case MAX_DURATION:
				case MEMORY_OPTIMIZED:
				case MIGRATION_STATE:
				case PAD_INDEX:
				case REMOTE_DATA_ARCHIVE:
				case FILESTREAM_ON:
				case FILETABLE_COLLATE_FILENAME:
				case FILETABLE_DIRECTORY:
				case FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME:
				case FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME:
				case FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME:
				case FILTER_PREDICATE:
				case HISTORY_RETENTION_PERIOD:
				case HISTORY_TABLE:
				case LOCK_ESCALATION:
				case DROP_EXISTING:
				case ROW_NUMBER:
				case FIRST:
				case DATETIME2:
				case OUTPUT:
				case INSERTED:
				case DELETED:
				case FILENAME:
				case SIZE:
				case MAXSIZE:
				case FILEGROWTH:
				case UNLIMITED:
				case KB:
				case MB:
				case GB:
				case TB:
				case CONTAINS:
				case MEMORY_OPTIMIZED_DATA:
				case FILEGROUP:
				case NON_TRANSACTED_ACCESS:
				case DB_CHAINING:
				case TRUSTWORTHY:
				case FORWARD_ONLY:
				case KEYSET:
				case FAST_FORWARD:
				case SCROLL_LOCKS:
				case OPTIMISTIC:
				case TYPE_WARNING:
				case SCHEMABINDING:
				case CALLER:
				case INPUT:
				case OWNER:
				case SNAPSHOT:
				case REPEATABLE:
				case SERIALIZABLE:
				case NATIVE_COMPILATION:
				case VIEW_METADATA:
				case INSTEAD:
				case APPEND:
				case INCREMENT:
				case CACHE:
				case MINVALUE:
				case MAXVALUE:
				case RESTART:
				case LOB_COMPACTION:
				case COMPRESS_ALL_ROW_GROUPS:
				case REORGANIZE:
				case RESUME:
				case PAUSE:
				case ABORT:
				case ACCELERATED_DATABASE_RECOVERY:
				case PERSISTENT_VERSION_STORE_FILEGROUP:
				case IMMEDIATE:
				case NO_WAIT:
				case TARGET_RECOVERY_TIME:
				case SECONDS:
				case HONOR_BROKER_PRIORITY:
				case ERROR_BROKER_CONVERSATIONS:
				case NEW_BROKER:
				case DISABLE_BROKER:
				case ENABLE_BROKER:
				case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
				case READ_COMMITTED_SNAPSHOT:
				case ALLOW_SNAPSHOT_ISOLATION:
				case RECURSIVE_TRIGGERS:
				case QUOTED_IDENTIFIER:
				case NUMERIC_ROUNDABORT:
				case CONCAT_NULL_YIELDS_NULL:
				case COMPATIBILITY_LEVEL:
				case ARITHABORT:
				case ANSI_WARNINGS:
				case ANSI_PADDING:
				case ANSI_NULLS:
				case ANSI_NULL_DEFAULT:
				case PAGE_VERIFY:
				case CHECKSUM:
				case TORN_PAGE_DETECTION:
				case BULK_LOGGED:
				case RECOVERY:
				case TOTAL_EXECUTION_CPU_TIME_MS:
				case TOTAL_COMPILE_CPU_TIME_MS:
				case STALE_CAPTURE_POLICY_THRESHOLD:
				case EXECUTION_COUNT:
				case QUERY_CAPTURE_POLICY:
				case WAIT_STATS_CAPTURE_MODE:
				case MAX_PLANS_PER_QUERY:
				case QUERY_CAPTURE_MODE:
				case SIZE_BASED_CLEANUP_MODE:
				case INTERVAL_LENGTH_MINUTES:
				case MAX_STORAGE_SIZE_MB:
				case DATA_FLUSH_INTERVAL_SECONDS:
				case CLEANUP_POLICY:
				case CUSTOM:
				case STALE_QUERY_THRESHOLD_DAYS:
				case OPERATION_MODE:
				case QUERY_STORE:
				case CURSOR_DEFAULT:
				case GLOBAL:
				case CURSOR_CLOSE_ON_COMMIT:
				case HOURS:
				case CHANGE_RETENTION:
				case AUTO_CLEANUP:
				case CHANGE_TRACKING:
				case AUTOMATIC_TUNING:
				case FORCE_LAST_GOOD_PLAN:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_CREATE_STATISTICS:
				case INCREMENTAL:
				case AUTO_CLOSE:
				case DATA_RETENTION:
				case TEMPORAL_HISTORY_RETENTION:
				case EDITION:
				case MIXED_PAGE_ALLOCATION:
				case DISABLED:
				case ALLOWED:
				case HADR:
				case MULTI_USER:
				case RESTRICTED_USER:
				case SINGLE_USER:
				case OFFLINE:
				case EMERGENCY:
				case SUSPEND:
				case DATE_CORRELATION_OPTIMIZATION:
				case ELASTIC_POOL:
				case SERVICE_OBJECTIVE:
				case DATABASE_NAME:
				case ALLOW_CONNECTIONS:
				case GEO:
				case NAMED:
				case DATEFIRST:
				case BACKUP_STORAGE_REDUNDANCY:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case SECONDARY:
				case FAILOVER:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case INLINE:
				case NESTED_TRIGGERS:
				case TRANSFORM_NOISE_WORDS:
				case TWO_DIGIT_YEAR_CUTOFF:
				case PERSISTENT_LOG_BUFFER:
				case DIRECTORY_NAME:
				case DATEFORMAT:
				case DELAYED_DURABILITY:
				case AUTHORIZATION:
				case TRANSFER:
				case PROVIDER:
				case SID:
				case SEARCH:
				case MEMBER:
				case JSON:
				case OPENQUERY:
				case IDENTIFIER_:
				case DELIMITED_IDENTIFIER_:
					{
					setState(2332);
					tableName();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgeNodeAlContext extends ParserRuleContext {
		public NodeAliasContext nodeAlias() {
			return getRuleContext(NodeAliasContext.class,0);
		}
		public EdgeAliasPathContext edgeAliasPath() {
			return getRuleContext(EdgeAliasPathContext.class,0);
		}
		public EdgeNodeAlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgeNodeAl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterEdgeNodeAl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitEdgeNodeAl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitEdgeNodeAl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EdgeNodeAlContext edgeNodeAl() throws RecognitionException {
		EdgeNodeAlContext _localctx = new EdgeNodeAlContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_edgeNodeAl);
		try {
			setState(2343);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOT_:
			case TRUNCATE:
			case SCHEMA:
			case TABLE:
			case COLUMNS:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case RIGHT:
			case OFF:
			case GROUP:
			case LIMIT:
			case OFFSET:
			case SAVEPOINT:
			case BOOLEAN:
			case ARRAY:
			case DATE:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MICROSECOND:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case AVG:
			case ENABLE:
			case DISABLE:
			case INSTANCE:
			case DO:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case NEXT:
			case NAME:
			case INTEGER:
			case TYPE:
			case TEXT:
			case VIEWS:
			case READ_ONLY:
			case DATABASE:
			case RETURNS:
			case DATEPART:
			case PASSWORD:
			case TARGET:
			case BINARY:
			case HIDDEN_:
			case MOD:
			case PARTITION:
			case PARTITIONS:
			case TOP:
			case ROW:
			case ROWS:
			case XOR:
			case ALWAYS:
			case USER:
			case ROLE:
			case START:
			case ACTION:
			case ALGORITHM:
			case AUTO:
			case BLOCKERS:
			case CLUSTERED:
			case NONCLUSTERED:
			case COLUMNSTORE:
			case CONTENT:
			case YEARS:
			case MONTHS:
			case WEEKS:
			case DAYS:
			case MINUTES:
			case DENY:
			case DETERMINISTIC:
			case DISTRIBUTION:
			case DOCUMENT:
			case DURABILITY:
			case ENCRYPTED:
			case FILESTREAM:
			case FILETABLE:
			case FILLFACTOR:
			case FOLLOWING:
			case HASH:
			case HEAP:
			case INBOUND:
			case OUTBOUND:
			case UNBOUNDED:
			case INFINITE:
			case LOGIN:
			case MASKED:
			case MAXDOP:
			case MOVE:
			case NOCHECK:
			case OBJECT:
			case ONLINE:
			case OVER:
			case PAGE:
			case PAUSED:
			case PERIOD:
			case PERSISTED:
			case PRECEDING:
			case RANDOMIZED:
			case RANGE:
			case REBUILD:
			case REPLICATE:
			case REPLICATION:
			case RESUMABLE:
			case ROWGUIDCOL:
			case SAVE:
			case SELF:
			case SPARSE:
			case SWITCH:
			case TRAN:
			case TRANCOUNT:
			case CONTROL:
			case CONCAT:
			case TAKE:
			case OWNERSHIP:
			case DEFINITION:
			case APPLICATION:
			case ASSEMBLY:
			case SYMMETRIC:
			case ASYMMETRIC:
			case SERVER:
			case RECEIVE:
			case CHANGE:
			case TRACE:
			case TRACKING:
			case RESOURCES:
			case SETTINGS:
			case STATE:
			case AVAILABILITY:
			case CREDENTIAL:
			case ENDPOINT:
			case EVENT:
			case NOTIFICATION:
			case LINKED:
			case AUDIT:
			case DDL:
			case XML:
			case IMPERSONATE:
			case SECURABLES:
			case AUTHENTICATE:
			case EXTERNAL:
			case ACCESS:
			case ADMINISTER:
			case BULK:
			case OPERATIONS:
			case UNSAFE:
			case SHUTDOWN:
			case SCOPED:
			case CONFIGURATION:
			case DATASPACE:
			case SERVICE:
			case CERTIFICATE:
			case CONTRACT:
			case ENCRYPTION:
			case MASTER:
			case DATA:
			case SOURCE:
			case FILE:
			case FORMAT:
			case LIBRARY:
			case FULLTEXT:
			case MASK:
			case UNMASK:
			case MESSAGE:
			case REMOTE:
			case BINDING:
			case ROUTE:
			case SECURITY:
			case POLICY:
			case AGGREGATE:
			case QUEUE:
			case RULE:
			case SYNONYM:
			case COLLECTION:
			case SCRIPT:
			case KILL:
			case BACKUP:
			case LOG:
			case SHOWPLAN:
			case SUBSCRIBE:
			case QUERY:
			case NOTIFICATIONS:
			case CHECKPOINT:
			case SEQUENCE:
			case ABORT_AFTER_WAIT:
			case ALLOW_PAGE_LOCKS:
			case ALLOW_ROW_LOCKS:
			case ALL_SPARSE_COLUMNS:
			case BUCKET_COUNT:
			case COLUMNSTORE_ARCHIVE:
			case COLUMN_ENCRYPTION_KEY:
			case COLUMN_SET:
			case COMPRESSION_DELAY:
			case DATABASE_DEAULT:
			case DATA_COMPRESSION:
			case DATA_CONSISTENCY_CHECK:
			case ENCRYPTION_TYPE:
			case SYSTEM_TIME:
			case SYSTEM_VERSIONING:
			case TEXTIMAGE_ON:
			case WAIT_AT_LOW_PRIORITY:
			case STATISTICS_INCREMENTAL:
			case STATISTICS_NORECOMPUTE:
			case ROUND_ROBIN:
			case SCHEMA_AND_DATA:
			case SCHEMA_ONLY:
			case SORT_IN_TEMPDB:
			case IGNORE_DUP_KEY:
			case IMPLICIT_TRANSACTIONS:
			case MAX_DURATION:
			case MEMORY_OPTIMIZED:
			case MIGRATION_STATE:
			case PAD_INDEX:
			case REMOTE_DATA_ARCHIVE:
			case FILESTREAM_ON:
			case FILETABLE_COLLATE_FILENAME:
			case FILETABLE_DIRECTORY:
			case FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME:
			case FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME:
			case FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME:
			case FILTER_PREDICATE:
			case HISTORY_RETENTION_PERIOD:
			case HISTORY_TABLE:
			case LOCK_ESCALATION:
			case DROP_EXISTING:
			case ROW_NUMBER:
			case FIRST:
			case DATETIME2:
			case OUTPUT:
			case INSERTED:
			case DELETED:
			case FILENAME:
			case SIZE:
			case MAXSIZE:
			case FILEGROWTH:
			case UNLIMITED:
			case KB:
			case MB:
			case GB:
			case TB:
			case CONTAINS:
			case MEMORY_OPTIMIZED_DATA:
			case FILEGROUP:
			case NON_TRANSACTED_ACCESS:
			case DB_CHAINING:
			case TRUSTWORTHY:
			case FORWARD_ONLY:
			case KEYSET:
			case FAST_FORWARD:
			case SCROLL_LOCKS:
			case OPTIMISTIC:
			case TYPE_WARNING:
			case SCHEMABINDING:
			case CALLER:
			case INPUT:
			case OWNER:
			case SNAPSHOT:
			case REPEATABLE:
			case SERIALIZABLE:
			case NATIVE_COMPILATION:
			case VIEW_METADATA:
			case INSTEAD:
			case APPEND:
			case INCREMENT:
			case CACHE:
			case MINVALUE:
			case MAXVALUE:
			case RESTART:
			case LOB_COMPACTION:
			case COMPRESS_ALL_ROW_GROUPS:
			case REORGANIZE:
			case RESUME:
			case PAUSE:
			case ABORT:
			case ACCELERATED_DATABASE_RECOVERY:
			case PERSISTENT_VERSION_STORE_FILEGROUP:
			case IMMEDIATE:
			case NO_WAIT:
			case TARGET_RECOVERY_TIME:
			case SECONDS:
			case HONOR_BROKER_PRIORITY:
			case ERROR_BROKER_CONVERSATIONS:
			case NEW_BROKER:
			case DISABLE_BROKER:
			case ENABLE_BROKER:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case READ_COMMITTED_SNAPSHOT:
			case ALLOW_SNAPSHOT_ISOLATION:
			case RECURSIVE_TRIGGERS:
			case QUOTED_IDENTIFIER:
			case NUMERIC_ROUNDABORT:
			case CONCAT_NULL_YIELDS_NULL:
			case COMPATIBILITY_LEVEL:
			case ARITHABORT:
			case ANSI_WARNINGS:
			case ANSI_PADDING:
			case ANSI_NULLS:
			case ANSI_NULL_DEFAULT:
			case PAGE_VERIFY:
			case CHECKSUM:
			case TORN_PAGE_DETECTION:
			case BULK_LOGGED:
			case RECOVERY:
			case TOTAL_EXECUTION_CPU_TIME_MS:
			case TOTAL_COMPILE_CPU_TIME_MS:
			case STALE_CAPTURE_POLICY_THRESHOLD:
			case EXECUTION_COUNT:
			case QUERY_CAPTURE_POLICY:
			case WAIT_STATS_CAPTURE_MODE:
			case MAX_PLANS_PER_QUERY:
			case QUERY_CAPTURE_MODE:
			case SIZE_BASED_CLEANUP_MODE:
			case INTERVAL_LENGTH_MINUTES:
			case MAX_STORAGE_SIZE_MB:
			case DATA_FLUSH_INTERVAL_SECONDS:
			case CLEANUP_POLICY:
			case CUSTOM:
			case STALE_QUERY_THRESHOLD_DAYS:
			case OPERATION_MODE:
			case QUERY_STORE:
			case CURSOR_DEFAULT:
			case GLOBAL:
			case CURSOR_CLOSE_ON_COMMIT:
			case HOURS:
			case CHANGE_RETENTION:
			case AUTO_CLEANUP:
			case CHANGE_TRACKING:
			case AUTOMATIC_TUNING:
			case FORCE_LAST_GOOD_PLAN:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_CREATE_STATISTICS:
			case INCREMENTAL:
			case AUTO_CLOSE:
			case DATA_RETENTION:
			case TEMPORAL_HISTORY_RETENTION:
			case EDITION:
			case MIXED_PAGE_ALLOCATION:
			case DISABLED:
			case ALLOWED:
			case HADR:
			case MULTI_USER:
			case RESTRICTED_USER:
			case SINGLE_USER:
			case OFFLINE:
			case EMERGENCY:
			case SUSPEND:
			case DATE_CORRELATION_OPTIMIZATION:
			case ELASTIC_POOL:
			case SERVICE_OBJECTIVE:
			case DATABASE_NAME:
			case ALLOW_CONNECTIONS:
			case GEO:
			case NAMED:
			case DATEFIRST:
			case BACKUP_STORAGE_REDUNDANCY:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case SECONDARY:
			case FAILOVER:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case INLINE:
			case NESTED_TRIGGERS:
			case TRANSFORM_NOISE_WORDS:
			case TWO_DIGIT_YEAR_CUTOFF:
			case PERSISTENT_LOG_BUFFER:
			case DIRECTORY_NAME:
			case DATEFORMAT:
			case DELAYED_DURABILITY:
			case AUTHORIZATION:
			case TRANSFER:
			case PROVIDER:
			case SID:
			case SEARCH:
			case MEMBER:
			case JSON:
			case OPENQUERY:
			case IDENTIFIER_:
			case DELIMITED_IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(2337);
				nodeAlias();
				setState(2338);
				edgeAliasPath();
				}
				break;
			case MINUS_:
			case LT_:
				enterOuterAlt(_localctx, 2);
				{
				setState(2340);
				edgeAliasPath();
				setState(2341);
				nodeAlias();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgeAliasPathContext extends ParserRuleContext {
		public TerminalNode LT_() { return getToken(SQLServerStatementParser.LT_, 0); }
		public List<TerminalNode> MINUS_() { return getTokens(SQLServerStatementParser.MINUS_); }
		public TerminalNode MINUS_(int i) {
			return getToken(SQLServerStatementParser.MINUS_, i);
		}
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public EdgeAliasContext edgeAlias() {
			return getRuleContext(EdgeAliasContext.class,0);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public TerminalNode GT_() { return getToken(SQLServerStatementParser.GT_, 0); }
		public EdgeAliasPathContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgeAliasPath; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterEdgeAliasPath(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitEdgeAliasPath(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitEdgeAliasPath(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EdgeAliasPathContext edgeAliasPath() throws RecognitionException {
		EdgeAliasPathContext _localctx = new EdgeAliasPathContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_edgeAliasPath);
		try {
			setState(2359);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LT_:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(2345);
				match(LT_);
				setState(2346);
				match(MINUS_);
				setState(2347);
				match(LP_);
				setState(2348);
				edgeAlias();
				setState(2349);
				match(RP_);
				setState(2350);
				match(MINUS_);
				}
				}
				break;
			case MINUS_:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(2352);
				match(MINUS_);
				setState(2353);
				match(LP_);
				setState(2354);
				edgeAlias();
				setState(2355);
				match(RP_);
				setState(2356);
				match(MINUS_);
				setState(2357);
				match(GT_);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OutEdgePathContext extends ParserRuleContext {
		public List<TerminalNode> MINUS_() { return getTokens(SQLServerStatementParser.MINUS_); }
		public TerminalNode MINUS_(int i) {
			return getToken(SQLServerStatementParser.MINUS_, i);
		}
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public EdgeAliasContext edgeAlias() {
			return getRuleContext(EdgeAliasContext.class,0);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public TerminalNode GT_() { return getToken(SQLServerStatementParser.GT_, 0); }
		public OutEdgePathContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outEdgePath; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterOutEdgePath(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitOutEdgePath(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitOutEdgePath(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OutEdgePathContext outEdgePath() throws RecognitionException {
		OutEdgePathContext _localctx = new OutEdgePathContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_outEdgePath);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2361);
			match(MINUS_);
			setState(2362);
			match(LP_);
			setState(2363);
			edgeAlias();
			setState(2364);
			match(RP_);
			setState(2365);
			match(MINUS_);
			setState(2366);
			match(GT_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InEdgePathContext extends ParserRuleContext {
		public TerminalNode LT_() { return getToken(SQLServerStatementParser.LT_, 0); }
		public List<TerminalNode> MINUS_() { return getTokens(SQLServerStatementParser.MINUS_); }
		public TerminalNode MINUS_(int i) {
			return getToken(SQLServerStatementParser.MINUS_, i);
		}
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public EdgeAliasContext edgeAlias() {
			return getRuleContext(EdgeAliasContext.class,0);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public InEdgePathContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inEdgePath; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterInEdgePath(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitInEdgePath(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitInEdgePath(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InEdgePathContext inEdgePath() throws RecognitionException {
		InEdgePathContext _localctx = new InEdgePathContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_inEdgePath);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2368);
			match(LT_);
			setState(2369);
			match(MINUS_);
			setState(2370);
			match(LP_);
			setState(2371);
			edgeAlias();
			setState(2372);
			match(RP_);
			setState(2373);
			match(MINUS_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlPatternQuantifierContext extends ParserRuleContext {
		public TerminalNode PLUS_() { return getToken(SQLServerStatementParser.PLUS_, 0); }
		public TerminalNode LBE_() { return getToken(SQLServerStatementParser.LBE_, 0); }
		public List<TerminalNode> NUMBER_() { return getTokens(SQLServerStatementParser.NUMBER_); }
		public TerminalNode NUMBER_(int i) {
			return getToken(SQLServerStatementParser.NUMBER_, i);
		}
		public TerminalNode COMMA_() { return getToken(SQLServerStatementParser.COMMA_, 0); }
		public TerminalNode RBE_() { return getToken(SQLServerStatementParser.RBE_, 0); }
		public AlPatternQuantifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alPatternQuantifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAlPatternQuantifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAlPatternQuantifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAlPatternQuantifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlPatternQuantifierContext alPatternQuantifier() throws RecognitionException {
		AlPatternQuantifierContext _localctx = new AlPatternQuantifierContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_alPatternQuantifier);
		try {
			setState(2381);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PLUS_:
				enterOuterAlt(_localctx, 1);
				{
				setState(2375);
				match(PLUS_);
				}
				break;
			case LBE_:
				enterOuterAlt(_localctx, 2);
				{
				setState(2376);
				match(LBE_);
				setState(2377);
				match(NUMBER_);
				setState(2378);
				match(COMMA_);
				setState(2379);
				match(NUMBER_);
				setState(2380);
				match(RBE_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NodeAliasContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public NodeAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nodeAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterNodeAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitNodeAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitNodeAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NodeAliasContext nodeAlias() throws RecognitionException {
		NodeAliasContext _localctx = new NodeAliasContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_nodeAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2383);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgeAliasContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public EdgeAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgeAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterEdgeAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitEdgeAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitEdgeAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EdgeAliasContext edgeAlias() throws RecognitionException {
		EdgeAliasContext _localctx = new EdgeAliasContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_edgeAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2385);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CallContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(SQLServerStatementParser.CALL, 0); }
		public CallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_call; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CallContext call() throws RecognitionException {
		CallContext _localctx = new CallContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_call);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2387);
			match(CALL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExplainContext extends ParserRuleContext {
		public TerminalNode EXPLAIN() { return getToken(SQLServerStatementParser.EXPLAIN, 0); }
		public ExplainableStatementContext explainableStatement() {
			return getRuleContext(ExplainableStatementContext.class,0);
		}
		public TerminalNode WITH_RECOMMENDATIONS() { return getToken(SQLServerStatementParser.WITH_RECOMMENDATIONS, 0); }
		public ExplainContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterExplain(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitExplain(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitExplain(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainContext explain() throws RecognitionException {
		ExplainContext _localctx = new ExplainContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_explain);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2389);
			match(EXPLAIN);
			setState(2391);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH_RECOMMENDATIONS) {
				{
				setState(2390);
				match(WITH_RECOMMENDATIONS);
				}
			}

			setState(2393);
			explainableStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExplainableStatementContext extends ParserRuleContext {
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public InsertContext insert() {
			return getRuleContext(InsertContext.class,0);
		}
		public UpdateContext update() {
			return getRuleContext(UpdateContext.class,0);
		}
		public DeleteContext delete() {
			return getRuleContext(DeleteContext.class,0);
		}
		public CreateTableAsSelectClauseContext createTableAsSelectClause() {
			return getRuleContext(CreateTableAsSelectClauseContext.class,0);
		}
		public ExplainableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterExplainableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitExplainableStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitExplainableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainableStatementContext explainableStatement() throws RecognitionException {
		ExplainableStatementContext _localctx = new ExplainableStatementContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_explainableStatement);
		try {
			setState(2400);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,160,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2395);
				select();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2396);
				insert();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2397);
				update();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2398);
				delete();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2399);
				createTableAsSelectClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateTableContext extends ParserRuleContext {
		public CreateTableClauseContext createTableClause() {
			return getRuleContext(CreateTableClauseContext.class,0);
		}
		public CreateTableAsSelectClauseContext createTableAsSelectClause() {
			return getRuleContext(CreateTableAsSelectClauseContext.class,0);
		}
		public CreateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableContext createTable() throws RecognitionException {
		CreateTableContext _localctx = new CreateTableContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_createTable);
		try {
			setState(2404);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,161,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2402);
				createTableClause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2403);
				createTableAsSelectClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateTableClauseContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SQLServerStatementParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(SQLServerStatementParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public FileTableClauseContext fileTableClause() {
			return getRuleContext(FileTableClauseContext.class,0);
		}
		public CreateDefinitionClauseContext createDefinitionClause() {
			return getRuleContext(CreateDefinitionClauseContext.class,0);
		}
		public CreateTableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateTableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateTableClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateTableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableClauseContext createTableClause() throws RecognitionException {
		CreateTableClauseContext _localctx = new CreateTableClauseContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_createTableClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2406);
			match(CREATE);
			setState(2407);
			match(TABLE);
			setState(2408);
			tableName();
			setState(2409);
			fileTableClause();
			setState(2410);
			createDefinitionClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateIndexContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SQLServerStatementParser.CREATE, 0); }
		public CreateIndexSpecificationContext createIndexSpecification() {
			return getRuleContext(CreateIndexSpecificationContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(SQLServerStatementParser.INDEX, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public ColumnNamesWithSortContext columnNamesWithSort() {
			return getRuleContext(ColumnNamesWithSortContext.class,0);
		}
		public CreateIndexClauseContext createIndexClause() {
			return getRuleContext(CreateIndexClauseContext.class,0);
		}
		public CreateIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexContext createIndex() throws RecognitionException {
		CreateIndexContext _localctx = new CreateIndexContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_createIndex);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2412);
			match(CREATE);
			setState(2413);
			createIndexSpecification();
			setState(2414);
			match(INDEX);
			setState(2415);
			indexName();
			setState(2416);
			match(ON);
			setState(2417);
			tableName();
			setState(2418);
			columnNamesWithSort();
			setState(2419);
			createIndexClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateDatabaseContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SQLServerStatementParser.CREATE, 0); }
		public TerminalNode DATABASE() { return getToken(SQLServerStatementParser.DATABASE, 0); }
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public CreateDatabaseClauseContext createDatabaseClause() {
			return getRuleContext(CreateDatabaseClauseContext.class,0);
		}
		public CreateDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseContext createDatabase() throws RecognitionException {
		CreateDatabaseContext _localctx = new CreateDatabaseContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_createDatabase);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2421);
			match(CREATE);
			setState(2422);
			match(DATABASE);
			setState(2423);
			databaseName();
			setState(2424);
			createDatabaseClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateFunctionContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SQLServerStatementParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(SQLServerStatementParser.FUNCTION, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public FuncParametersContext funcParameters() {
			return getRuleContext(FuncParametersContext.class,0);
		}
		public FuncReturnsContext funcReturns() {
			return getRuleContext(FuncReturnsContext.class,0);
		}
		public TerminalNode OR() { return getToken(SQLServerStatementParser.OR, 0); }
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public CreateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionContext createFunction() throws RecognitionException {
		CreateFunctionContext _localctx = new CreateFunctionContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_createFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2426);
			match(CREATE);
			setState(2429);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(2427);
				match(OR);
				setState(2428);
				match(ALTER);
				}
			}

			setState(2431);
			match(FUNCTION);
			setState(2432);
			functionName();
			setState(2433);
			funcParameters();
			setState(2434);
			funcReturns();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateProcedureContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SQLServerStatementParser.CREATE, 0); }
		public ProcedureNameContext procedureName() {
			return getRuleContext(ProcedureNameContext.class,0);
		}
		public ProcParametersContext procParameters() {
			return getRuleContext(ProcParametersContext.class,0);
		}
		public CreateOrAlterProcClauseContext createOrAlterProcClause() {
			return getRuleContext(CreateOrAlterProcClauseContext.class,0);
		}
		public TerminalNode PROC() { return getToken(SQLServerStatementParser.PROC, 0); }
		public TerminalNode PROCEDURE() { return getToken(SQLServerStatementParser.PROCEDURE, 0); }
		public TerminalNode OR() { return getToken(SQLServerStatementParser.OR, 0); }
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public CreateProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateProcedureContext createProcedure() throws RecognitionException {
		CreateProcedureContext _localctx = new CreateProcedureContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_createProcedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2436);
			match(CREATE);
			setState(2439);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(2437);
				match(OR);
				setState(2438);
				match(ALTER);
				}
			}

			setState(2441);
			_la = _input.LA(1);
			if ( !(_la==PROCEDURE || _la==PROC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2442);
			procedureName();
			setState(2443);
			procParameters();
			setState(2444);
			createOrAlterProcClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateViewContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SQLServerStatementParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(SQLServerStatementParser.VIEW, 0); }
		public ViewNameContext viewName() {
			return getRuleContext(ViewNameContext.class,0);
		}
		public CreateOrAlterViewClauseContext createOrAlterViewClause() {
			return getRuleContext(CreateOrAlterViewClauseContext.class,0);
		}
		public TerminalNode OR() { return getToken(SQLServerStatementParser.OR, 0); }
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public CreateViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateViewContext createView() throws RecognitionException {
		CreateViewContext _localctx = new CreateViewContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_createView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2446);
			match(CREATE);
			setState(2449);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(2447);
				match(OR);
				setState(2448);
				match(ALTER);
				}
			}

			setState(2451);
			match(VIEW);
			setState(2452);
			viewName();
			setState(2453);
			createOrAlterViewClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateTriggerContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SQLServerStatementParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(SQLServerStatementParser.TRIGGER, 0); }
		public TriggerNameContext triggerName() {
			return getRuleContext(TriggerNameContext.class,0);
		}
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TriggerTargetContext triggerTarget() {
			return getRuleContext(TriggerTargetContext.class,0);
		}
		public CreateTriggerClauseContext createTriggerClause() {
			return getRuleContext(CreateTriggerClauseContext.class,0);
		}
		public TerminalNode OR() { return getToken(SQLServerStatementParser.OR, 0); }
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public CreateTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTriggerContext createTrigger() throws RecognitionException {
		CreateTriggerContext _localctx = new CreateTriggerContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_createTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2455);
			match(CREATE);
			setState(2458);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(2456);
				match(OR);
				setState(2457);
				match(ALTER);
				}
			}

			setState(2460);
			match(TRIGGER);
			setState(2461);
			triggerName();
			setState(2462);
			match(ON);
			setState(2463);
			triggerTarget();
			setState(2464);
			createTriggerClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateSequenceContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SQLServerStatementParser.CREATE, 0); }
		public TerminalNode SEQUENCE() { return getToken(SQLServerStatementParser.SEQUENCE, 0); }
		public SequenceNameContext sequenceName() {
			return getRuleContext(SequenceNameContext.class,0);
		}
		public List<CreateOrAlterSequenceClauseContext> createOrAlterSequenceClause() {
			return getRuleContexts(CreateOrAlterSequenceClauseContext.class);
		}
		public CreateOrAlterSequenceClauseContext createOrAlterSequenceClause(int i) {
			return getRuleContext(CreateOrAlterSequenceClauseContext.class,i);
		}
		public CreateSequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateSequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateSequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateSequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateSequenceContext createSequence() throws RecognitionException {
		CreateSequenceContext _localctx = new CreateSequenceContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_createSequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2466);
			match(CREATE);
			setState(2467);
			match(SEQUENCE);
			setState(2468);
			sequenceName();
			setState(2472);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AS || _la==NO || _la==START || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & 63L) != 0)) {
				{
				{
				setState(2469);
				createOrAlterSequenceClause();
				}
				}
				setState(2474);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateServiceContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SQLServerStatementParser.CREATE, 0); }
		public TerminalNode SERVICE() { return getToken(SQLServerStatementParser.SERVICE, 0); }
		public ServiceNameContext serviceName() {
			return getRuleContext(ServiceNameContext.class,0);
		}
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode QUEUE() { return getToken(SQLServerStatementParser.QUEUE, 0); }
		public QueueNameContext queueName() {
			return getRuleContext(QueueNameContext.class,0);
		}
		public TerminalNode AUTHORIZATION() { return getToken(SQLServerStatementParser.AUTHORIZATION, 0); }
		public TerminalNode STRING_() { return getToken(SQLServerStatementParser.STRING_, 0); }
		public CreateServiceClauseContext createServiceClause() {
			return getRuleContext(CreateServiceClauseContext.class,0);
		}
		public CreateServiceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createService; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateService(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateService(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateService(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateServiceContext createService() throws RecognitionException {
		CreateServiceContext _localctx = new CreateServiceContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_createService);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2475);
			match(CREATE);
			setState(2476);
			match(SERVICE);
			setState(2477);
			serviceName();
			setState(2480);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(2478);
				match(AUTHORIZATION);
				setState(2479);
				match(STRING_);
				}
			}

			setState(2482);
			match(ON);
			setState(2483);
			match(QUEUE);
			setState(2484);
			queueName();
			setState(2486);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(2485);
				createServiceClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateSchemaContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SQLServerStatementParser.CREATE, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLServerStatementParser.SCHEMA, 0); }
		public SchemaNameClauseContext schemaNameClause() {
			return getRuleContext(SchemaNameClauseContext.class,0);
		}
		public List<SchemaElementContext> schemaElement() {
			return getRuleContexts(SchemaElementContext.class);
		}
		public SchemaElementContext schemaElement(int i) {
			return getRuleContext(SchemaElementContext.class,i);
		}
		public CreateSchemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSchema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateSchema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateSchema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateSchema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateSchemaContext createSchema() throws RecognitionException {
		CreateSchemaContext _localctx = new CreateSchemaContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_createSchema);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2488);
			match(CREATE);
			setState(2489);
			match(SCHEMA);
			setState(2490);
			schemaNameClause();
			setState(2494);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 109212290963734528L) != 0) || _la==DENY) {
				{
				{
				setState(2491);
				schemaElement();
				}
				}
				setState(2496);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterTableContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SQLServerStatementParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<AlterDefinitionClauseContext> alterDefinitionClause() {
			return getRuleContexts(AlterDefinitionClauseContext.class);
		}
		public AlterDefinitionClauseContext alterDefinitionClause(int i) {
			return getRuleContext(AlterDefinitionClauseContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public AlterTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAlterTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAlterTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAlterTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableContext alterTable() throws RecognitionException {
		AlterTableContext _localctx = new AlterTableContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_alterTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2497);
			match(ALTER);
			setState(2498);
			match(TABLE);
			setState(2499);
			tableName();
			setState(2500);
			alterDefinitionClause();
			setState(2505);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2501);
				match(COMMA_);
				setState(2502);
				alterDefinitionClause();
				}
				}
				setState(2507);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterIndexContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode INDEX() { return getToken(SQLServerStatementParser.INDEX, 0); }
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public AlterIndexClauseContext alterIndexClause() {
			return getRuleContext(AlterIndexClauseContext.class,0);
		}
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SQLServerStatementParser.ALL, 0); }
		public AlterIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAlterIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAlterIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAlterIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIndexContext alterIndex() throws RecognitionException {
		AlterIndexContext _localctx = new AlterIndexContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_alterIndex);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2508);
			match(ALTER);
			setState(2509);
			match(INDEX);
			setState(2512);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TRUNCATE:
			case SCHEMA:
			case TABLE:
			case COLUMNS:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case RIGHT:
			case OFF:
			case GROUP:
			case LIMIT:
			case OFFSET:
			case SAVEPOINT:
			case BOOLEAN:
			case ARRAY:
			case DATE:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MICROSECOND:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case AVG:
			case ENABLE:
			case DISABLE:
			case INSTANCE:
			case DO:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case NEXT:
			case NAME:
			case INTEGER:
			case TYPE:
			case TEXT:
			case VIEWS:
			case READ_ONLY:
			case DATABASE:
			case RETURNS:
			case DATEPART:
			case PASSWORD:
			case TARGET:
			case BINARY:
			case HIDDEN_:
			case MOD:
			case PARTITION:
			case PARTITIONS:
			case TOP:
			case ROW:
			case ROWS:
			case XOR:
			case ALWAYS:
			case USER:
			case ROLE:
			case START:
			case ACTION:
			case ALGORITHM:
			case AUTO:
			case BLOCKERS:
			case CLUSTERED:
			case NONCLUSTERED:
			case COLUMNSTORE:
			case CONTENT:
			case YEARS:
			case MONTHS:
			case WEEKS:
			case DAYS:
			case MINUTES:
			case DENY:
			case DETERMINISTIC:
			case DISTRIBUTION:
			case DOCUMENT:
			case DURABILITY:
			case ENCRYPTED:
			case FILESTREAM:
			case FILETABLE:
			case FILLFACTOR:
			case FOLLOWING:
			case HASH:
			case HEAP:
			case INBOUND:
			case OUTBOUND:
			case UNBOUNDED:
			case INFINITE:
			case LOGIN:
			case MASKED:
			case MAXDOP:
			case MOVE:
			case NOCHECK:
			case OBJECT:
			case ONLINE:
			case OVER:
			case PAGE:
			case PAUSED:
			case PERIOD:
			case PERSISTED:
			case PRECEDING:
			case RANDOMIZED:
			case RANGE:
			case REBUILD:
			case REPLICATE:
			case REPLICATION:
			case RESUMABLE:
			case ROWGUIDCOL:
			case SAVE:
			case SELF:
			case SPARSE:
			case SWITCH:
			case TRAN:
			case TRANCOUNT:
			case CONTROL:
			case CONCAT:
			case TAKE:
			case OWNERSHIP:
			case DEFINITION:
			case APPLICATION:
			case ASSEMBLY:
			case SYMMETRIC:
			case ASYMMETRIC:
			case SERVER:
			case RECEIVE:
			case CHANGE:
			case TRACE:
			case TRACKING:
			case RESOURCES:
			case SETTINGS:
			case STATE:
			case AVAILABILITY:
			case CREDENTIAL:
			case ENDPOINT:
			case EVENT:
			case NOTIFICATION:
			case LINKED:
			case AUDIT:
			case DDL:
			case XML:
			case IMPERSONATE:
			case SECURABLES:
			case AUTHENTICATE:
			case EXTERNAL:
			case ACCESS:
			case ADMINISTER:
			case BULK:
			case OPERATIONS:
			case UNSAFE:
			case SHUTDOWN:
			case SCOPED:
			case CONFIGURATION:
			case DATASPACE:
			case SERVICE:
			case CERTIFICATE:
			case CONTRACT:
			case ENCRYPTION:
			case MASTER:
			case DATA:
			case SOURCE:
			case FILE:
			case FORMAT:
			case LIBRARY:
			case FULLTEXT:
			case MASK:
			case UNMASK:
			case MESSAGE:
			case REMOTE:
			case BINDING:
			case ROUTE:
			case SECURITY:
			case POLICY:
			case AGGREGATE:
			case QUEUE:
			case RULE:
			case SYNONYM:
			case COLLECTION:
			case SCRIPT:
			case KILL:
			case BACKUP:
			case LOG:
			case SHOWPLAN:
			case SUBSCRIBE:
			case QUERY:
			case NOTIFICATIONS:
			case CHECKPOINT:
			case SEQUENCE:
			case ABORT_AFTER_WAIT:
			case ALLOW_PAGE_LOCKS:
			case ALLOW_ROW_LOCKS:
			case ALL_SPARSE_COLUMNS:
			case BUCKET_COUNT:
			case COLUMNSTORE_ARCHIVE:
			case COLUMN_ENCRYPTION_KEY:
			case COLUMN_SET:
			case COMPRESSION_DELAY:
			case DATABASE_DEAULT:
			case DATA_COMPRESSION:
			case DATA_CONSISTENCY_CHECK:
			case ENCRYPTION_TYPE:
			case SYSTEM_TIME:
			case SYSTEM_VERSIONING:
			case TEXTIMAGE_ON:
			case WAIT_AT_LOW_PRIORITY:
			case STATISTICS_INCREMENTAL:
			case STATISTICS_NORECOMPUTE:
			case ROUND_ROBIN:
			case SCHEMA_AND_DATA:
			case SCHEMA_ONLY:
			case SORT_IN_TEMPDB:
			case IGNORE_DUP_KEY:
			case IMPLICIT_TRANSACTIONS:
			case MAX_DURATION:
			case MEMORY_OPTIMIZED:
			case MIGRATION_STATE:
			case PAD_INDEX:
			case REMOTE_DATA_ARCHIVE:
			case FILESTREAM_ON:
			case FILETABLE_COLLATE_FILENAME:
			case FILETABLE_DIRECTORY:
			case FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME:
			case FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME:
			case FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME:
			case FILTER_PREDICATE:
			case HISTORY_RETENTION_PERIOD:
			case HISTORY_TABLE:
			case LOCK_ESCALATION:
			case DROP_EXISTING:
			case ROW_NUMBER:
			case FIRST:
			case DATETIME2:
			case OUTPUT:
			case INSERTED:
			case DELETED:
			case FILENAME:
			case SIZE:
			case MAXSIZE:
			case FILEGROWTH:
			case UNLIMITED:
			case KB:
			case MB:
			case GB:
			case TB:
			case CONTAINS:
			case MEMORY_OPTIMIZED_DATA:
			case FILEGROUP:
			case NON_TRANSACTED_ACCESS:
			case DB_CHAINING:
			case TRUSTWORTHY:
			case FORWARD_ONLY:
			case KEYSET:
			case FAST_FORWARD:
			case SCROLL_LOCKS:
			case OPTIMISTIC:
			case TYPE_WARNING:
			case SCHEMABINDING:
			case CALLER:
			case INPUT:
			case OWNER:
			case SNAPSHOT:
			case REPEATABLE:
			case SERIALIZABLE:
			case NATIVE_COMPILATION:
			case VIEW_METADATA:
			case INSTEAD:
			case APPEND:
			case INCREMENT:
			case CACHE:
			case MINVALUE:
			case MAXVALUE:
			case RESTART:
			case LOB_COMPACTION:
			case COMPRESS_ALL_ROW_GROUPS:
			case REORGANIZE:
			case RESUME:
			case PAUSE:
			case ABORT:
			case ACCELERATED_DATABASE_RECOVERY:
			case PERSISTENT_VERSION_STORE_FILEGROUP:
			case IMMEDIATE:
			case NO_WAIT:
			case TARGET_RECOVERY_TIME:
			case SECONDS:
			case HONOR_BROKER_PRIORITY:
			case ERROR_BROKER_CONVERSATIONS:
			case NEW_BROKER:
			case DISABLE_BROKER:
			case ENABLE_BROKER:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case READ_COMMITTED_SNAPSHOT:
			case ALLOW_SNAPSHOT_ISOLATION:
			case RECURSIVE_TRIGGERS:
			case QUOTED_IDENTIFIER:
			case NUMERIC_ROUNDABORT:
			case CONCAT_NULL_YIELDS_NULL:
			case COMPATIBILITY_LEVEL:
			case ARITHABORT:
			case ANSI_WARNINGS:
			case ANSI_PADDING:
			case ANSI_NULLS:
			case ANSI_NULL_DEFAULT:
			case PAGE_VERIFY:
			case CHECKSUM:
			case TORN_PAGE_DETECTION:
			case BULK_LOGGED:
			case RECOVERY:
			case TOTAL_EXECUTION_CPU_TIME_MS:
			case TOTAL_COMPILE_CPU_TIME_MS:
			case STALE_CAPTURE_POLICY_THRESHOLD:
			case EXECUTION_COUNT:
			case QUERY_CAPTURE_POLICY:
			case WAIT_STATS_CAPTURE_MODE:
			case MAX_PLANS_PER_QUERY:
			case QUERY_CAPTURE_MODE:
			case SIZE_BASED_CLEANUP_MODE:
			case INTERVAL_LENGTH_MINUTES:
			case MAX_STORAGE_SIZE_MB:
			case DATA_FLUSH_INTERVAL_SECONDS:
			case CLEANUP_POLICY:
			case CUSTOM:
			case STALE_QUERY_THRESHOLD_DAYS:
			case OPERATION_MODE:
			case QUERY_STORE:
			case CURSOR_DEFAULT:
			case GLOBAL:
			case CURSOR_CLOSE_ON_COMMIT:
			case HOURS:
			case CHANGE_RETENTION:
			case AUTO_CLEANUP:
			case CHANGE_TRACKING:
			case AUTOMATIC_TUNING:
			case FORCE_LAST_GOOD_PLAN:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_CREATE_STATISTICS:
			case INCREMENTAL:
			case AUTO_CLOSE:
			case DATA_RETENTION:
			case TEMPORAL_HISTORY_RETENTION:
			case EDITION:
			case MIXED_PAGE_ALLOCATION:
			case DISABLED:
			case ALLOWED:
			case HADR:
			case MULTI_USER:
			case RESTRICTED_USER:
			case SINGLE_USER:
			case OFFLINE:
			case EMERGENCY:
			case SUSPEND:
			case DATE_CORRELATION_OPTIMIZATION:
			case ELASTIC_POOL:
			case SERVICE_OBJECTIVE:
			case DATABASE_NAME:
			case ALLOW_CONNECTIONS:
			case GEO:
			case NAMED:
			case DATEFIRST:
			case BACKUP_STORAGE_REDUNDANCY:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case SECONDARY:
			case FAILOVER:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case INLINE:
			case NESTED_TRIGGERS:
			case TRANSFORM_NOISE_WORDS:
			case TWO_DIGIT_YEAR_CUTOFF:
			case PERSISTENT_LOG_BUFFER:
			case DIRECTORY_NAME:
			case DATEFORMAT:
			case DELAYED_DURABILITY:
			case AUTHORIZATION:
			case TRANSFER:
			case PROVIDER:
			case SID:
			case SEARCH:
			case MEMBER:
			case JSON:
			case OPENQUERY:
			case IDENTIFIER_:
			case DELIMITED_IDENTIFIER_:
				{
				setState(2510);
				indexName();
				}
				break;
			case ALL:
				{
				setState(2511);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2514);
			match(ON);
			setState(2515);
			tableName();
			setState(2516);
			alterIndexClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterDatabaseContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(SQLServerStatementParser.DATABASE, 0); }
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public TerminalNode CURRENT() { return getToken(SQLServerStatementParser.CURRENT, 0); }
		public List<AlterDatabaseClauseContext> alterDatabaseClause() {
			return getRuleContexts(AlterDatabaseClauseContext.class);
		}
		public AlterDatabaseClauseContext alterDatabaseClause(int i) {
			return getRuleContext(AlterDatabaseClauseContext.class,i);
		}
		public AlterDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAlterDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAlterDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAlterDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseContext alterDatabase() throws RecognitionException {
		AlterDatabaseContext _localctx = new AlterDatabaseContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_alterDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2518);
			match(ALTER);
			setState(2519);
			match(DATABASE);
			setState(2522);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TRUNCATE:
			case SCHEMA:
			case TABLE:
			case COLUMNS:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case RIGHT:
			case OFF:
			case GROUP:
			case LIMIT:
			case OFFSET:
			case SAVEPOINT:
			case BOOLEAN:
			case ARRAY:
			case DATE:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MICROSECOND:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case AVG:
			case ENABLE:
			case DISABLE:
			case INSTANCE:
			case DO:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case NEXT:
			case NAME:
			case INTEGER:
			case TYPE:
			case TEXT:
			case VIEWS:
			case READ_ONLY:
			case DATABASE:
			case RETURNS:
			case DATEPART:
			case PASSWORD:
			case TARGET:
			case BINARY:
			case HIDDEN_:
			case MOD:
			case PARTITION:
			case PARTITIONS:
			case TOP:
			case ROW:
			case ROWS:
			case XOR:
			case ALWAYS:
			case USER:
			case ROLE:
			case START:
			case ACTION:
			case ALGORITHM:
			case AUTO:
			case BLOCKERS:
			case CLUSTERED:
			case NONCLUSTERED:
			case COLUMNSTORE:
			case CONTENT:
			case YEARS:
			case MONTHS:
			case WEEKS:
			case DAYS:
			case MINUTES:
			case DENY:
			case DETERMINISTIC:
			case DISTRIBUTION:
			case DOCUMENT:
			case DURABILITY:
			case ENCRYPTED:
			case FILESTREAM:
			case FILETABLE:
			case FILLFACTOR:
			case FOLLOWING:
			case HASH:
			case HEAP:
			case INBOUND:
			case OUTBOUND:
			case UNBOUNDED:
			case INFINITE:
			case LOGIN:
			case MASKED:
			case MAXDOP:
			case MOVE:
			case NOCHECK:
			case OBJECT:
			case ONLINE:
			case OVER:
			case PAGE:
			case PAUSED:
			case PERIOD:
			case PERSISTED:
			case PRECEDING:
			case RANDOMIZED:
			case RANGE:
			case REBUILD:
			case REPLICATE:
			case REPLICATION:
			case RESUMABLE:
			case ROWGUIDCOL:
			case SAVE:
			case SELF:
			case SPARSE:
			case SWITCH:
			case TRAN:
			case TRANCOUNT:
			case CONTROL:
			case CONCAT:
			case TAKE:
			case OWNERSHIP:
			case DEFINITION:
			case APPLICATION:
			case ASSEMBLY:
			case SYMMETRIC:
			case ASYMMETRIC:
			case SERVER:
			case RECEIVE:
			case CHANGE:
			case TRACE:
			case TRACKING:
			case RESOURCES:
			case SETTINGS:
			case STATE:
			case AVAILABILITY:
			case CREDENTIAL:
			case ENDPOINT:
			case EVENT:
			case NOTIFICATION:
			case LINKED:
			case AUDIT:
			case DDL:
			case XML:
			case IMPERSONATE:
			case SECURABLES:
			case AUTHENTICATE:
			case EXTERNAL:
			case ACCESS:
			case ADMINISTER:
			case BULK:
			case OPERATIONS:
			case UNSAFE:
			case SHUTDOWN:
			case SCOPED:
			case CONFIGURATION:
			case DATASPACE:
			case SERVICE:
			case CERTIFICATE:
			case CONTRACT:
			case ENCRYPTION:
			case MASTER:
			case DATA:
			case SOURCE:
			case FILE:
			case FORMAT:
			case LIBRARY:
			case FULLTEXT:
			case MASK:
			case UNMASK:
			case MESSAGE:
			case REMOTE:
			case BINDING:
			case ROUTE:
			case SECURITY:
			case POLICY:
			case AGGREGATE:
			case QUEUE:
			case RULE:
			case SYNONYM:
			case COLLECTION:
			case SCRIPT:
			case KILL:
			case BACKUP:
			case LOG:
			case SHOWPLAN:
			case SUBSCRIBE:
			case QUERY:
			case NOTIFICATIONS:
			case CHECKPOINT:
			case SEQUENCE:
			case ABORT_AFTER_WAIT:
			case ALLOW_PAGE_LOCKS:
			case ALLOW_ROW_LOCKS:
			case ALL_SPARSE_COLUMNS:
			case BUCKET_COUNT:
			case COLUMNSTORE_ARCHIVE:
			case COLUMN_ENCRYPTION_KEY:
			case COLUMN_SET:
			case COMPRESSION_DELAY:
			case DATABASE_DEAULT:
			case DATA_COMPRESSION:
			case DATA_CONSISTENCY_CHECK:
			case ENCRYPTION_TYPE:
			case SYSTEM_TIME:
			case SYSTEM_VERSIONING:
			case TEXTIMAGE_ON:
			case WAIT_AT_LOW_PRIORITY:
			case STATISTICS_INCREMENTAL:
			case STATISTICS_NORECOMPUTE:
			case ROUND_ROBIN:
			case SCHEMA_AND_DATA:
			case SCHEMA_ONLY:
			case SORT_IN_TEMPDB:
			case IGNORE_DUP_KEY:
			case IMPLICIT_TRANSACTIONS:
			case MAX_DURATION:
			case MEMORY_OPTIMIZED:
			case MIGRATION_STATE:
			case PAD_INDEX:
			case REMOTE_DATA_ARCHIVE:
			case FILESTREAM_ON:
			case FILETABLE_COLLATE_FILENAME:
			case FILETABLE_DIRECTORY:
			case FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME:
			case FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME:
			case FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME:
			case FILTER_PREDICATE:
			case HISTORY_RETENTION_PERIOD:
			case HISTORY_TABLE:
			case LOCK_ESCALATION:
			case DROP_EXISTING:
			case ROW_NUMBER:
			case FIRST:
			case DATETIME2:
			case OUTPUT:
			case INSERTED:
			case DELETED:
			case FILENAME:
			case SIZE:
			case MAXSIZE:
			case FILEGROWTH:
			case UNLIMITED:
			case KB:
			case MB:
			case GB:
			case TB:
			case CONTAINS:
			case MEMORY_OPTIMIZED_DATA:
			case FILEGROUP:
			case NON_TRANSACTED_ACCESS:
			case DB_CHAINING:
			case TRUSTWORTHY:
			case FORWARD_ONLY:
			case KEYSET:
			case FAST_FORWARD:
			case SCROLL_LOCKS:
			case OPTIMISTIC:
			case TYPE_WARNING:
			case SCHEMABINDING:
			case CALLER:
			case INPUT:
			case OWNER:
			case SNAPSHOT:
			case REPEATABLE:
			case SERIALIZABLE:
			case NATIVE_COMPILATION:
			case VIEW_METADATA:
			case INSTEAD:
			case APPEND:
			case INCREMENT:
			case CACHE:
			case MINVALUE:
			case MAXVALUE:
			case RESTART:
			case LOB_COMPACTION:
			case COMPRESS_ALL_ROW_GROUPS:
			case REORGANIZE:
			case RESUME:
			case PAUSE:
			case ABORT:
			case ACCELERATED_DATABASE_RECOVERY:
			case PERSISTENT_VERSION_STORE_FILEGROUP:
			case IMMEDIATE:
			case NO_WAIT:
			case TARGET_RECOVERY_TIME:
			case SECONDS:
			case HONOR_BROKER_PRIORITY:
			case ERROR_BROKER_CONVERSATIONS:
			case NEW_BROKER:
			case DISABLE_BROKER:
			case ENABLE_BROKER:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case READ_COMMITTED_SNAPSHOT:
			case ALLOW_SNAPSHOT_ISOLATION:
			case RECURSIVE_TRIGGERS:
			case QUOTED_IDENTIFIER:
			case NUMERIC_ROUNDABORT:
			case CONCAT_NULL_YIELDS_NULL:
			case COMPATIBILITY_LEVEL:
			case ARITHABORT:
			case ANSI_WARNINGS:
			case ANSI_PADDING:
			case ANSI_NULLS:
			case ANSI_NULL_DEFAULT:
			case PAGE_VERIFY:
			case CHECKSUM:
			case TORN_PAGE_DETECTION:
			case BULK_LOGGED:
			case RECOVERY:
			case TOTAL_EXECUTION_CPU_TIME_MS:
			case TOTAL_COMPILE_CPU_TIME_MS:
			case STALE_CAPTURE_POLICY_THRESHOLD:
			case EXECUTION_COUNT:
			case QUERY_CAPTURE_POLICY:
			case WAIT_STATS_CAPTURE_MODE:
			case MAX_PLANS_PER_QUERY:
			case QUERY_CAPTURE_MODE:
			case SIZE_BASED_CLEANUP_MODE:
			case INTERVAL_LENGTH_MINUTES:
			case MAX_STORAGE_SIZE_MB:
			case DATA_FLUSH_INTERVAL_SECONDS:
			case CLEANUP_POLICY:
			case CUSTOM:
			case STALE_QUERY_THRESHOLD_DAYS:
			case OPERATION_MODE:
			case QUERY_STORE:
			case CURSOR_DEFAULT:
			case GLOBAL:
			case CURSOR_CLOSE_ON_COMMIT:
			case HOURS:
			case CHANGE_RETENTION:
			case AUTO_CLEANUP:
			case CHANGE_TRACKING:
			case AUTOMATIC_TUNING:
			case FORCE_LAST_GOOD_PLAN:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_CREATE_STATISTICS:
			case INCREMENTAL:
			case AUTO_CLOSE:
			case DATA_RETENTION:
			case TEMPORAL_HISTORY_RETENTION:
			case EDITION:
			case MIXED_PAGE_ALLOCATION:
			case DISABLED:
			case ALLOWED:
			case HADR:
			case MULTI_USER:
			case RESTRICTED_USER:
			case SINGLE_USER:
			case OFFLINE:
			case EMERGENCY:
			case SUSPEND:
			case DATE_CORRELATION_OPTIMIZATION:
			case ELASTIC_POOL:
			case SERVICE_OBJECTIVE:
			case DATABASE_NAME:
			case ALLOW_CONNECTIONS:
			case GEO:
			case NAMED:
			case DATEFIRST:
			case BACKUP_STORAGE_REDUNDANCY:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case SECONDARY:
			case FAILOVER:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case INLINE:
			case NESTED_TRIGGERS:
			case TRANSFORM_NOISE_WORDS:
			case TWO_DIGIT_YEAR_CUTOFF:
			case PERSISTENT_LOG_BUFFER:
			case DIRECTORY_NAME:
			case DATEFORMAT:
			case DELAYED_DURABILITY:
			case AUTHORIZATION:
			case TRANSFER:
			case PROVIDER:
			case SID:
			case SEARCH:
			case MEMBER:
			case JSON:
			case OPENQUERY:
			case IDENTIFIER_:
			case DELIMITED_IDENTIFIER_:
				{
				setState(2520);
				databaseName();
				}
				break;
			case CURRENT:
				{
				setState(2521);
				match(CURRENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2527);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 432345566375051264L) != 0) || ((((_la - 154)) & ~0x3f) == 0 && ((1L << (_la - 154)) & 144678138029342721L) != 0) || _la==COLLATE || ((((_la - 570)) & ~0x3f) == 0 && ((1L << (_la - 570)) & 63L) != 0) || _la==FORCE_FAILOVER_ALLOW_DATA_LOSS || _la==FAILOVER) {
				{
				{
				setState(2524);
				alterDatabaseClause();
				}
				}
				setState(2529);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterProcedureContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public ProcedureNameContext procedureName() {
			return getRuleContext(ProcedureNameContext.class,0);
		}
		public ProcParametersContext procParameters() {
			return getRuleContext(ProcParametersContext.class,0);
		}
		public CreateOrAlterProcClauseContext createOrAlterProcClause() {
			return getRuleContext(CreateOrAlterProcClauseContext.class,0);
		}
		public TerminalNode PROC() { return getToken(SQLServerStatementParser.PROC, 0); }
		public TerminalNode PROCEDURE() { return getToken(SQLServerStatementParser.PROCEDURE, 0); }
		public AlterProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAlterProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAlterProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAlterProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterProcedureContext alterProcedure() throws RecognitionException {
		AlterProcedureContext _localctx = new AlterProcedureContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_alterProcedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2530);
			match(ALTER);
			setState(2531);
			_la = _input.LA(1);
			if ( !(_la==PROCEDURE || _la==PROC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2532);
			procedureName();
			setState(2533);
			procParameters();
			setState(2534);
			createOrAlterProcClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterFunctionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(SQLServerStatementParser.FUNCTION, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public FuncParametersContext funcParameters() {
			return getRuleContext(FuncParametersContext.class,0);
		}
		public FuncReturnsContext funcReturns() {
			return getRuleContext(FuncReturnsContext.class,0);
		}
		public AlterFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAlterFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAlterFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAlterFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterFunctionContext alterFunction() throws RecognitionException {
		AlterFunctionContext _localctx = new AlterFunctionContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_alterFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2536);
			match(ALTER);
			setState(2537);
			match(FUNCTION);
			setState(2538);
			functionName();
			setState(2539);
			funcParameters();
			setState(2540);
			funcReturns();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterViewContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(SQLServerStatementParser.VIEW, 0); }
		public ViewNameContext viewName() {
			return getRuleContext(ViewNameContext.class,0);
		}
		public CreateOrAlterViewClauseContext createOrAlterViewClause() {
			return getRuleContext(CreateOrAlterViewClauseContext.class,0);
		}
		public AlterViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAlterView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAlterView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAlterView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterViewContext alterView() throws RecognitionException {
		AlterViewContext _localctx = new AlterViewContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_alterView);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2542);
			match(ALTER);
			setState(2543);
			match(VIEW);
			setState(2544);
			viewName();
			setState(2545);
			createOrAlterViewClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterTriggerContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode TRIGGER() { return getToken(SQLServerStatementParser.TRIGGER, 0); }
		public TriggerNameContext triggerName() {
			return getRuleContext(TriggerNameContext.class,0);
		}
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TriggerTargetContext triggerTarget() {
			return getRuleContext(TriggerTargetContext.class,0);
		}
		public CreateTriggerClauseContext createTriggerClause() {
			return getRuleContext(CreateTriggerClauseContext.class,0);
		}
		public AlterTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAlterTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAlterTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAlterTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTriggerContext alterTrigger() throws RecognitionException {
		AlterTriggerContext _localctx = new AlterTriggerContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_alterTrigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2547);
			match(ALTER);
			setState(2548);
			match(TRIGGER);
			setState(2549);
			triggerName();
			setState(2550);
			match(ON);
			setState(2551);
			triggerTarget();
			setState(2552);
			createTriggerClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterSequenceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(SQLServerStatementParser.SEQUENCE, 0); }
		public SequenceNameContext sequenceName() {
			return getRuleContext(SequenceNameContext.class,0);
		}
		public List<CreateOrAlterSequenceClauseContext> createOrAlterSequenceClause() {
			return getRuleContexts(CreateOrAlterSequenceClauseContext.class);
		}
		public CreateOrAlterSequenceClauseContext createOrAlterSequenceClause(int i) {
			return getRuleContext(CreateOrAlterSequenceClauseContext.class,i);
		}
		public AlterSequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAlterSequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAlterSequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAlterSequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSequenceContext alterSequence() throws RecognitionException {
		AlterSequenceContext _localctx = new AlterSequenceContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_alterSequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2554);
			match(ALTER);
			setState(2555);
			match(SEQUENCE);
			setState(2556);
			sequenceName();
			setState(2560);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AS || _la==NO || _la==START || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & 63L) != 0)) {
				{
				{
				setState(2557);
				createOrAlterSequenceClause();
				}
				}
				setState(2562);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterServiceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode SERVICE() { return getToken(SQLServerStatementParser.SERVICE, 0); }
		public ServiceNameContext serviceName() {
			return getRuleContext(ServiceNameContext.class,0);
		}
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode QUEUE() { return getToken(SQLServerStatementParser.QUEUE, 0); }
		public QueueNameContext queueName() {
			return getRuleContext(QueueNameContext.class,0);
		}
		public AlterServiceClauseContext alterServiceClause() {
			return getRuleContext(AlterServiceClauseContext.class,0);
		}
		public AlterServiceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterService; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAlterService(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAlterService(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAlterService(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterServiceContext alterService() throws RecognitionException {
		AlterServiceContext _localctx = new AlterServiceContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_alterService);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2563);
			match(ALTER);
			setState(2564);
			match(SERVICE);
			setState(2565);
			serviceName();
			setState(2569);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2566);
				match(ON);
				setState(2567);
				match(QUEUE);
				setState(2568);
				queueName();
				}
			}

			setState(2572);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(2571);
				alterServiceClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterSchemaContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLServerStatementParser.SCHEMA, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode TRANSFER() { return getToken(SQLServerStatementParser.TRANSFER, 0); }
		public SecurableNameContext securableName() {
			return getRuleContext(SecurableNameContext.class,0);
		}
		public Class_Context class_() {
			return getRuleContext(Class_Context.class,0);
		}
		public AlterSchemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSchema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAlterSchema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAlterSchema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAlterSchema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSchemaContext alterSchema() throws RecognitionException {
		AlterSchemaContext _localctx = new AlterSchemaContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_alterSchema);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2574);
			match(ALTER);
			setState(2575);
			match(SCHEMA);
			setState(2576);
			schemaName();
			setState(2577);
			match(TRANSFER);
			setState(2579);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,177,_ctx) ) {
			case 1:
				{
				setState(2578);
				class_();
				}
				break;
			}
			setState(2581);
			securableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SecurableNameContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DOT_() { return getToken(SQLServerStatementParser.DOT_, 0); }
		public SecurableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_securableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSecurableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSecurableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSecurableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SecurableNameContext securableName() throws RecognitionException {
		SecurableNameContext _localctx = new SecurableNameContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_securableName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2583);
			identifier();
			setState(2586);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOT_) {
				{
				setState(2584);
				match(DOT_);
				setState(2585);
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropTableContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SQLServerStatementParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(SQLServerStatementParser.TABLE, 0); }
		public TableNamesContext tableNames() {
			return getRuleContext(TableNamesContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDropTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDropTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDropTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTableContext dropTable() throws RecognitionException {
		DropTableContext _localctx = new DropTableContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_dropTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2588);
			match(DROP);
			setState(2589);
			match(TABLE);
			setState(2591);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2590);
				ifExists();
				}
			}

			setState(2593);
			tableNames();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropIndexContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SQLServerStatementParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(SQLServerStatementParser.INDEX, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDropIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDropIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDropIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropIndexContext dropIndex() throws RecognitionException {
		DropIndexContext _localctx = new DropIndexContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_dropIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2595);
			match(DROP);
			setState(2596);
			match(INDEX);
			setState(2598);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2597);
				ifExists();
				}
			}

			setState(2600);
			indexName();
			setState(2601);
			match(ON);
			setState(2602);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropDatabaseContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SQLServerStatementParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(SQLServerStatementParser.DATABASE, 0); }
		public List<DatabaseNameContext> databaseName() {
			return getRuleContexts(DatabaseNameContext.class);
		}
		public DatabaseNameContext databaseName(int i) {
			return getRuleContext(DatabaseNameContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public DropDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDropDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDropDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDropDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropDatabaseContext dropDatabase() throws RecognitionException {
		DropDatabaseContext _localctx = new DropDatabaseContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_dropDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2604);
			match(DROP);
			setState(2605);
			match(DATABASE);
			setState(2607);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2606);
				ifExists();
				}
			}

			setState(2609);
			databaseName();
			setState(2614);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2610);
				match(COMMA_);
				setState(2611);
				databaseName();
				}
				}
				setState(2616);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropFunctionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SQLServerStatementParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(SQLServerStatementParser.FUNCTION, 0); }
		public List<FunctionNameContext> functionName() {
			return getRuleContexts(FunctionNameContext.class);
		}
		public FunctionNameContext functionName(int i) {
			return getRuleContext(FunctionNameContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public DropFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDropFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDropFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDropFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropFunctionContext dropFunction() throws RecognitionException {
		DropFunctionContext _localctx = new DropFunctionContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_dropFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2617);
			match(DROP);
			setState(2618);
			match(FUNCTION);
			setState(2620);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2619);
				ifExists();
				}
			}

			setState(2622);
			functionName();
			setState(2627);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2623);
				match(COMMA_);
				setState(2624);
				functionName();
				}
				}
				setState(2629);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropProcedureContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SQLServerStatementParser.DROP, 0); }
		public List<ProcedureNameContext> procedureName() {
			return getRuleContexts(ProcedureNameContext.class);
		}
		public ProcedureNameContext procedureName(int i) {
			return getRuleContext(ProcedureNameContext.class,i);
		}
		public TerminalNode PROC() { return getToken(SQLServerStatementParser.PROC, 0); }
		public TerminalNode PROCEDURE() { return getToken(SQLServerStatementParser.PROCEDURE, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public DropProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDropProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDropProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDropProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropProcedureContext dropProcedure() throws RecognitionException {
		DropProcedureContext _localctx = new DropProcedureContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_dropProcedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2630);
			match(DROP);
			setState(2631);
			_la = _input.LA(1);
			if ( !(_la==PROCEDURE || _la==PROC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2633);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2632);
				ifExists();
				}
			}

			setState(2635);
			procedureName();
			setState(2640);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2636);
				match(COMMA_);
				setState(2637);
				procedureName();
				}
				}
				setState(2642);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropViewContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SQLServerStatementParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(SQLServerStatementParser.VIEW, 0); }
		public List<ViewNameContext> viewName() {
			return getRuleContexts(ViewNameContext.class);
		}
		public ViewNameContext viewName(int i) {
			return getRuleContext(ViewNameContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public DropViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDropView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDropView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDropView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropViewContext dropView() throws RecognitionException {
		DropViewContext _localctx = new DropViewContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_dropView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2643);
			match(DROP);
			setState(2644);
			match(VIEW);
			setState(2646);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2645);
				ifExists();
				}
			}

			setState(2648);
			viewName();
			setState(2653);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2649);
				match(COMMA_);
				setState(2650);
				viewName();
				}
				}
				setState(2655);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropTriggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SQLServerStatementParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(SQLServerStatementParser.TRIGGER, 0); }
		public List<TriggerNameContext> triggerName() {
			return getRuleContexts(TriggerNameContext.class);
		}
		public TriggerNameContext triggerName(int i) {
			return getRuleContext(TriggerNameContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode DATABASE() { return getToken(SQLServerStatementParser.DATABASE, 0); }
		public TerminalNode ALL() { return getToken(SQLServerStatementParser.ALL, 0); }
		public TerminalNode SERVER() { return getToken(SQLServerStatementParser.SERVER, 0); }
		public DropTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDropTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDropTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDropTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTriggerContext dropTrigger() throws RecognitionException {
		DropTriggerContext _localctx = new DropTriggerContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_dropTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2656);
			match(DROP);
			setState(2657);
			match(TRIGGER);
			setState(2659);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2658);
				ifExists();
				}
			}

			setState(2661);
			triggerName();
			setState(2666);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2662);
				match(COMMA_);
				setState(2663);
				triggerName();
				}
				}
				setState(2668);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2675);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2669);
				match(ON);
				setState(2673);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DATABASE:
					{
					setState(2670);
					match(DATABASE);
					}
					break;
				case ALL:
					{
					setState(2671);
					match(ALL);
					setState(2672);
					match(SERVER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropSequenceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SQLServerStatementParser.DROP, 0); }
		public TerminalNode SEQUENCE() { return getToken(SQLServerStatementParser.SEQUENCE, 0); }
		public List<SequenceNameContext> sequenceName() {
			return getRuleContexts(SequenceNameContext.class);
		}
		public SequenceNameContext sequenceName(int i) {
			return getRuleContext(SequenceNameContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public DropSequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropSequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDropSequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDropSequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDropSequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropSequenceContext dropSequence() throws RecognitionException {
		DropSequenceContext _localctx = new DropSequenceContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_dropSequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2677);
			match(DROP);
			setState(2678);
			match(SEQUENCE);
			setState(2680);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2679);
				ifExists();
				}
			}

			setState(2682);
			sequenceName();
			setState(2687);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2683);
				match(COMMA_);
				setState(2684);
				sequenceName();
				}
				}
				setState(2689);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropServiceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SQLServerStatementParser.DROP, 0); }
		public TerminalNode SERVICE() { return getToken(SQLServerStatementParser.SERVICE, 0); }
		public ServiceNameContext serviceName() {
			return getRuleContext(ServiceNameContext.class,0);
		}
		public DropServiceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropService; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDropService(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDropService(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDropService(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropServiceContext dropService() throws RecognitionException {
		DropServiceContext _localctx = new DropServiceContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_dropService);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2690);
			match(DROP);
			setState(2691);
			match(SERVICE);
			setState(2692);
			serviceName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropSchemaContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SQLServerStatementParser.DROP, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLServerStatementParser.SCHEMA, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropSchemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropSchema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDropSchema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDropSchema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDropSchema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropSchemaContext dropSchema() throws RecognitionException {
		DropSchemaContext _localctx = new DropSchemaContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_dropSchema);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2694);
			match(DROP);
			setState(2695);
			match(SCHEMA);
			setState(2697);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2696);
				ifExists();
				}
			}

			setState(2699);
			schemaName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TruncateTableContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(SQLServerStatementParser.TRUNCATE, 0); }
		public TerminalNode TABLE() { return getToken(SQLServerStatementParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TruncateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncateTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterTruncateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitTruncateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitTruncateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TruncateTableContext truncateTable() throws RecognitionException {
		TruncateTableContext _localctx = new TruncateTableContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_truncateTable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2701);
			match(TRUNCATE);
			setState(2702);
			match(TABLE);
			setState(2703);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UpdateStatisticsContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(SQLServerStatementParser.UPDATE, 0); }
		public TerminalNode STATISTICS() { return getToken(SQLServerStatementParser.STATISTICS, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<IndexNameContext> indexName() {
			return getRuleContexts(IndexNameContext.class);
		}
		public IndexNameContext indexName(int i) {
			return getRuleContext(IndexNameContext.class,i);
		}
		public StatisticsWithClauseContext statisticsWithClause() {
			return getRuleContext(StatisticsWithClauseContext.class,0);
		}
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public UpdateStatisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateStatistics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterUpdateStatistics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitUpdateStatistics(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitUpdateStatistics(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateStatisticsContext updateStatistics() throws RecognitionException {
		UpdateStatisticsContext _localctx = new UpdateStatisticsContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_updateStatistics);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2705);
			match(UPDATE);
			setState(2706);
			match(STATISTICS);
			setState(2707);
			tableName();
			setState(2722);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 31)) & ~0x3f) == 0 && ((1L << (_la - 31)) & 2321607533409599489L) != 0) || ((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & -5980780679782203391L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & 2469507415165341L) != 0) || ((((_la - 242)) & ~0x3f) == 0 && ((1L << (_la - 242)) & -145241397522104511L) != 0) || ((((_la - 306)) & ~0x3f) == 0 && ((1L << (_la - 306)) & -2113929225L) != 0) || ((((_la - 370)) & ~0x3f) == 0 && ((1L << (_la - 370)) & -1L) != 0) || ((((_la - 434)) & ~0x3f) == 0 && ((1L << (_la - 434)) & 962107015167L) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & 72020040051130367L) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & -1L) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & 2405748621443071L) != 0) || ((((_la - 712)) & ~0x3f) == 0 && ((1L << (_la - 712)) & 6324225L) != 0)) {
				{
				setState(2709);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(2708);
					match(LP_);
					}
				}

				setState(2711);
				indexName();
				setState(2716);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(2712);
					match(COMMA_);
					setState(2713);
					indexName();
					}
					}
					setState(2718);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2720);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RP_) {
					{
					setState(2719);
					match(RP_);
					}
				}

				}
			}

			setState(2725);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2724);
				statisticsWithClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StatisticsWithClauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public SampleOptionContext sampleOption() {
			return getRuleContext(SampleOptionContext.class,0);
		}
		public StatisticsOptionsContext statisticsOptions() {
			return getRuleContext(StatisticsOptionsContext.class,0);
		}
		public StatisticsWithClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statisticsWithClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterStatisticsWithClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitStatisticsWithClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitStatisticsWithClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatisticsWithClauseContext statisticsWithClause() throws RecognitionException {
		StatisticsWithClauseContext _localctx = new StatisticsWithClauseContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_statisticsWithClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2727);
			match(WITH);
			setState(2729);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 717)) & ~0x3f) == 0 && ((1L << (_la - 717)) & 7L) != 0)) {
				{
				setState(2728);
				sampleOption();
				}
			}

			setState(2732);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 6917529165080035328L) != 0) || _la==ALL || _la==MAXDOP || _la==INCREMENTAL || _la==NORECOMPUTE || _la==AUTO_DROP) {
				{
				setState(2731);
				statisticsOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SampleOptionContext extends ParserRuleContext {
		public TerminalNode FULLSCAN() { return getToken(SQLServerStatementParser.FULLSCAN, 0); }
		public TerminalNode PERSIST_SAMPLE_PERCENT() { return getToken(SQLServerStatementParser.PERSIST_SAMPLE_PERCENT, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode SAMPLE() { return getToken(SQLServerStatementParser.SAMPLE, 0); }
		public List<TerminalNode> NUMBER_() { return getTokens(SQLServerStatementParser.NUMBER_); }
		public TerminalNode NUMBER_(int i) {
			return getToken(SQLServerStatementParser.NUMBER_, i);
		}
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode OFF() { return getToken(SQLServerStatementParser.OFF, 0); }
		public TerminalNode PERCENT() { return getToken(SQLServerStatementParser.PERCENT, 0); }
		public TerminalNode ROWS() { return getToken(SQLServerStatementParser.ROWS, 0); }
		public TerminalNode RESAMPLE() { return getToken(SQLServerStatementParser.RESAMPLE, 0); }
		public TerminalNode PARTITIONS() { return getToken(SQLServerStatementParser.PARTITIONS, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public SampleOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sampleOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSampleOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSampleOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSampleOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SampleOptionContext sampleOption() throws RecognitionException {
		SampleOptionContext _localctx = new SampleOptionContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_sampleOption);
		int _la;
		try {
			setState(2760);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FULLSCAN:
			case SAMPLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2738);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FULLSCAN:
					{
					setState(2734);
					match(FULLSCAN);
					}
					break;
				case SAMPLE:
					{
					{
					setState(2735);
					match(SAMPLE);
					setState(2736);
					match(NUMBER_);
					setState(2737);
					_la = _input.LA(1);
					if ( !(_la==PERCENT || _la==ROWS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2743);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERSIST_SAMPLE_PERCENT) {
					{
					setState(2740);
					match(PERSIST_SAMPLE_PERCENT);
					setState(2741);
					match(EQ_);
					setState(2742);
					_la = _input.LA(1);
					if ( !(_la==ON || _la==OFF) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case RESAMPLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2745);
				match(RESAMPLE);
				setState(2758);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(2746);
					match(ON);
					setState(2747);
					match(PARTITIONS);
					setState(2748);
					match(LP_);
					setState(2749);
					match(NUMBER_);
					setState(2754);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA_) {
						{
						{
						setState(2750);
						match(COMMA_);
						setState(2751);
						match(NUMBER_);
						}
						}
						setState(2756);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2757);
					match(RP_);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StatisticsOptionsContext extends ParserRuleContext {
		public List<StatisticsOptionContext> statisticsOption() {
			return getRuleContexts(StatisticsOptionContext.class);
		}
		public StatisticsOptionContext statisticsOption(int i) {
			return getRuleContext(StatisticsOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public StatisticsOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statisticsOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterStatisticsOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitStatisticsOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitStatisticsOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatisticsOptionsContext statisticsOptions() throws RecognitionException {
		StatisticsOptionsContext _localctx = new StatisticsOptionsContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_statisticsOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2766); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2763);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_) {
					{
					setState(2762);
					match(COMMA_);
					}
				}

				setState(2765);
				statisticsOption();
				}
				}
				setState(2768); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 6917529165080035328L) != 0) || _la==ALL || _la==MAXDOP || _la==INCREMENTAL || _la==NORECOMPUTE || _la==AUTO_DROP );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StatisticsOptionContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(SQLServerStatementParser.ALL, 0); }
		public TerminalNode COLUMNS() { return getToken(SQLServerStatementParser.COLUMNS, 0); }
		public TerminalNode INDEX() { return getToken(SQLServerStatementParser.INDEX, 0); }
		public TerminalNode NORECOMPUTE() { return getToken(SQLServerStatementParser.NORECOMPUTE, 0); }
		public TerminalNode INCREMENTAL() { return getToken(SQLServerStatementParser.INCREMENTAL, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode OFF() { return getToken(SQLServerStatementParser.OFF, 0); }
		public TerminalNode MAXDOP() { return getToken(SQLServerStatementParser.MAXDOP, 0); }
		public TerminalNode NUMBER_() { return getToken(SQLServerStatementParser.NUMBER_, 0); }
		public TerminalNode AUTO_DROP() { return getToken(SQLServerStatementParser.AUTO_DROP, 0); }
		public StatisticsOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statisticsOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterStatisticsOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitStatisticsOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitStatisticsOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatisticsOptionContext statisticsOption() throws RecognitionException {
		StatisticsOptionContext _localctx = new StatisticsOptionContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_statisticsOption);
		int _la;
		try {
			setState(2783);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2770);
				match(ALL);
				}
				break;
			case COLUMNS:
				enterOuterAlt(_localctx, 2);
				{
				setState(2771);
				match(COLUMNS);
				}
				break;
			case INDEX:
				enterOuterAlt(_localctx, 3);
				{
				setState(2772);
				match(INDEX);
				}
				break;
			case NORECOMPUTE:
				enterOuterAlt(_localctx, 4);
				{
				setState(2773);
				match(NORECOMPUTE);
				}
				break;
			case INCREMENTAL:
				enterOuterAlt(_localctx, 5);
				{
				setState(2774);
				match(INCREMENTAL);
				setState(2775);
				match(EQ_);
				setState(2776);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case MAXDOP:
				enterOuterAlt(_localctx, 6);
				{
				setState(2777);
				match(MAXDOP);
				setState(2778);
				match(EQ_);
				setState(2779);
				match(NUMBER_);
				}
				break;
			case AUTO_DROP:
				enterOuterAlt(_localctx, 7);
				{
				setState(2780);
				match(AUTO_DROP);
				setState(2781);
				match(EQ_);
				setState(2782);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FileTableClauseContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SQLServerStatementParser.AS, 0); }
		public TerminalNode FILETABLE() { return getToken(SQLServerStatementParser.FILETABLE, 0); }
		public FileTableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fileTableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterFileTableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitFileTableClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitFileTableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FileTableClauseContext fileTableClause() throws RecognitionException {
		FileTableClauseContext _localctx = new FileTableClauseContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_fileTableClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2787);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(2785);
				match(AS);
				setState(2786);
				match(FILETABLE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateDefinitionClauseContext extends ParserRuleContext {
		public CreateTableDefinitionsContext createTableDefinitions() {
			return getRuleContext(CreateTableDefinitionsContext.class,0);
		}
		public PartitionSchemeContext partitionScheme() {
			return getRuleContext(PartitionSchemeContext.class,0);
		}
		public FileGroupContext fileGroup() {
			return getRuleContext(FileGroupContext.class,0);
		}
		public CreateDefinitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateDefinitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateDefinitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateDefinitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDefinitionClauseContext createDefinitionClause() throws RecognitionException {
		CreateDefinitionClauseContext _localctx = new CreateDefinitionClauseContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_createDefinitionClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2789);
			createTableDefinitions();
			setState(2790);
			partitionScheme();
			setState(2791);
			fileGroup();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateTableDefinitionsContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<CreateTableDefinitionContext> createTableDefinition() {
			return getRuleContexts(CreateTableDefinitionContext.class);
		}
		public CreateTableDefinitionContext createTableDefinition(int i) {
			return getRuleContext(CreateTableDefinitionContext.class,i);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public PeriodClauseContext periodClause() {
			return getRuleContext(PeriodClauseContext.class,0);
		}
		public CreateTableDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableDefinitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateTableDefinitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateTableDefinitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateTableDefinitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableDefinitionsContext createTableDefinitions() throws RecognitionException {
		CreateTableDefinitionsContext _localctx = new CreateTableDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_createTableDefinitions);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2793);
			match(LP_);
			setState(2794);
			createTableDefinition();
			setState(2799);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,212,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2795);
					match(COMMA_);
					setState(2796);
					createTableDefinition();
					}
					} 
				}
				setState(2801);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,212,_ctx);
			}
			setState(2804);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_) {
				{
				setState(2802);
				match(COMMA_);
				setState(2803);
				periodClause();
				}
			}

			setState(2806);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateTableDefinitionContext extends ParserRuleContext {
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public ComputedColumnDefinitionContext computedColumnDefinition() {
			return getRuleContext(ComputedColumnDefinitionContext.class,0);
		}
		public ColumnSetDefinitionContext columnSetDefinition() {
			return getRuleContext(ColumnSetDefinitionContext.class,0);
		}
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TableIndexContext tableIndex() {
			return getRuleContext(TableIndexContext.class,0);
		}
		public CreateTableDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateTableDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateTableDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateTableDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableDefinitionContext createTableDefinition() throws RecognitionException {
		CreateTableDefinitionContext _localctx = new CreateTableDefinitionContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_createTableDefinition);
		try {
			setState(2813);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,214,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2808);
				columnDefinition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2809);
				computedColumnDefinition();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2810);
				columnSetDefinition();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2811);
				tableConstraint();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2812);
				tableIndex();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnDefinitionContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public ColumnConstraintsContext columnConstraints() {
			return getRuleContext(ColumnConstraintsContext.class,0);
		}
		public List<ColumnDefinitionOptionContext> columnDefinitionOption() {
			return getRuleContexts(ColumnDefinitionOptionContext.class);
		}
		public ColumnDefinitionOptionContext columnDefinitionOption(int i) {
			return getRuleContext(ColumnDefinitionOptionContext.class,i);
		}
		public ColumnIndexContext columnIndex() {
			return getRuleContext(ColumnIndexContext.class,0);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefinitionContext columnDefinition() throws RecognitionException {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_columnDefinition);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2815);
			columnName();
			setState(2816);
			dataType();
			setState(2820);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,215,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2817);
					columnDefinitionOption();
					}
					} 
				}
				setState(2822);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,215,_ctx);
			}
			setState(2823);
			columnConstraints();
			setState(2825);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEX) {
				{
				setState(2824);
				columnIndex();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnDefinitionOptionContext extends ParserRuleContext {
		public TerminalNode FILESTREAM() { return getToken(SQLServerStatementParser.FILESTREAM, 0); }
		public TerminalNode COLLATE() { return getToken(SQLServerStatementParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode SPARSE() { return getToken(SQLServerStatementParser.SPARSE, 0); }
		public TerminalNode MASKED() { return getToken(SQLServerStatementParser.MASKED, 0); }
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public TerminalNode FUNCTION() { return getToken(SQLServerStatementParser.FUNCTION, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode STRING_() { return getToken(SQLServerStatementParser.STRING_, 0); }
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public TerminalNode DEFAULT() { return getToken(SQLServerStatementParser.DEFAULT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(SQLServerStatementParser.CONSTRAINT, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public TerminalNode IDENTITY() { return getToken(SQLServerStatementParser.IDENTITY, 0); }
		public List<TerminalNode> NUMBER_() { return getTokens(SQLServerStatementParser.NUMBER_); }
		public TerminalNode NUMBER_(int i) {
			return getToken(SQLServerStatementParser.NUMBER_, i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public TerminalNode NOT() { return getToken(SQLServerStatementParser.NOT, 0); }
		public TerminalNode FOR() { return getToken(SQLServerStatementParser.FOR, 0); }
		public TerminalNode REPLICATION() { return getToken(SQLServerStatementParser.REPLICATION, 0); }
		public TerminalNode GENERATED() { return getToken(SQLServerStatementParser.GENERATED, 0); }
		public TerminalNode ALWAYS() { return getToken(SQLServerStatementParser.ALWAYS, 0); }
		public TerminalNode AS() { return getToken(SQLServerStatementParser.AS, 0); }
		public TerminalNode ROW() { return getToken(SQLServerStatementParser.ROW, 0); }
		public TerminalNode START() { return getToken(SQLServerStatementParser.START, 0); }
		public TerminalNode END() { return getToken(SQLServerStatementParser.END, 0); }
		public TerminalNode HIDDEN_() { return getToken(SQLServerStatementParser.HIDDEN_, 0); }
		public TerminalNode NULL() { return getToken(SQLServerStatementParser.NULL, 0); }
		public TerminalNode ROWGUIDCOL() { return getToken(SQLServerStatementParser.ROWGUIDCOL, 0); }
		public TerminalNode ENCRYPTED() { return getToken(SQLServerStatementParser.ENCRYPTED, 0); }
		public EncryptedOptionsContext encryptedOptions() {
			return getRuleContext(EncryptedOptionsContext.class,0);
		}
		public List<ColumnConstraintContext> columnConstraint() {
			return getRuleContexts(ColumnConstraintContext.class);
		}
		public ColumnConstraintContext columnConstraint(int i) {
			return getRuleContext(ColumnConstraintContext.class,i);
		}
		public ColumnIndexContext columnIndex() {
			return getRuleContext(ColumnIndexContext.class,0);
		}
		public ColumnDefinitionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinitionOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterColumnDefinitionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitColumnDefinitionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitColumnDefinitionOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefinitionOptionContext columnDefinitionOption() throws RecognitionException {
		ColumnDefinitionOptionContext _localctx = new ColumnDefinitionOptionContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_columnDefinitionOption);
		int _la;
		try {
			int _alt;
			setState(2880);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,222,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2827);
				match(FILESTREAM);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2828);
				match(COLLATE);
				setState(2829);
				collationName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2830);
				match(SPARSE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2831);
				match(MASKED);
				setState(2832);
				match(WITH);
				setState(2833);
				match(LP_);
				setState(2834);
				match(FUNCTION);
				setState(2835);
				match(EQ_);
				setState(2836);
				match(STRING_);
				setState(2837);
				match(RP_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2840);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2838);
					match(CONSTRAINT);
					setState(2839);
					ignoredIdentifier();
					}
				}

				setState(2842);
				match(DEFAULT);
				setState(2843);
				expr(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2844);
				match(IDENTITY);
				setState(2850);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(2845);
					match(LP_);
					setState(2846);
					match(NUMBER_);
					setState(2847);
					match(COMMA_);
					setState(2848);
					match(NUMBER_);
					setState(2849);
					match(RP_);
					}
				}

				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2852);
				match(NOT);
				setState(2853);
				match(FOR);
				setState(2854);
				match(REPLICATION);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2855);
				match(GENERATED);
				setState(2856);
				match(ALWAYS);
				setState(2857);
				match(AS);
				setState(2858);
				match(ROW);
				setState(2859);
				_la = _input.LA(1);
				if ( !(_la==START || _la==END) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2861);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HIDDEN_) {
					{
					setState(2860);
					match(HIDDEN_);
					}
				}

				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2864);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2863);
					match(NOT);
					}
				}

				setState(2866);
				match(NULL);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2867);
				match(ROWGUIDCOL);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2868);
				match(ENCRYPTED);
				setState(2869);
				match(WITH);
				setState(2870);
				encryptedOptions();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2871);
				columnConstraint();
				setState(2876);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,221,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2872);
						match(COMMA_);
						setState(2873);
						columnConstraint();
						}
						} 
					}
					setState(2878);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,221,_ctx);
				}
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2879);
				columnIndex();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EncryptedOptionsContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public TerminalNode COLUMN_ENCRYPTION_KEY() { return getToken(SQLServerStatementParser.COLUMN_ENCRYPTION_KEY, 0); }
		public List<TerminalNode> EQ_() { return getTokens(SQLServerStatementParser.EQ_); }
		public TerminalNode EQ_(int i) {
			return getToken(SQLServerStatementParser.EQ_, i);
		}
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public TerminalNode ENCRYPTION_TYPE() { return getToken(SQLServerStatementParser.ENCRYPTION_TYPE, 0); }
		public TerminalNode ALGORITHM() { return getToken(SQLServerStatementParser.ALGORITHM, 0); }
		public TerminalNode STRING_() { return getToken(SQLServerStatementParser.STRING_, 0); }
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(SQLServerStatementParser.DETERMINISTIC, 0); }
		public TerminalNode RANDOMIZED() { return getToken(SQLServerStatementParser.RANDOMIZED, 0); }
		public EncryptedOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_encryptedOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterEncryptedOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitEncryptedOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitEncryptedOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EncryptedOptionsContext encryptedOptions() throws RecognitionException {
		EncryptedOptionsContext _localctx = new EncryptedOptionsContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_encryptedOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2882);
			match(LP_);
			setState(2883);
			match(COLUMN_ENCRYPTION_KEY);
			setState(2884);
			match(EQ_);
			setState(2885);
			ignoredIdentifier();
			setState(2886);
			match(COMMA_);
			setState(2887);
			match(ENCRYPTION_TYPE);
			setState(2888);
			match(EQ_);
			setState(2889);
			_la = _input.LA(1);
			if ( !(_la==DETERMINISTIC || _la==RANDOMIZED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2890);
			match(COMMA_);
			setState(2891);
			match(ALGORITHM);
			setState(2892);
			match(EQ_);
			setState(2893);
			match(STRING_);
			setState(2894);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnConstraintContext extends ParserRuleContext {
		public PrimaryKeyConstraintContext primaryKeyConstraint() {
			return getRuleContext(PrimaryKeyConstraintContext.class,0);
		}
		public ColumnForeignKeyConstraintContext columnForeignKeyConstraint() {
			return getRuleContext(ColumnForeignKeyConstraintContext.class,0);
		}
		public CheckConstraintContext checkConstraint() {
			return getRuleContext(CheckConstraintContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(SQLServerStatementParser.CONSTRAINT, 0); }
		public ConstraintNameContext constraintName() {
			return getRuleContext(ConstraintNameContext.class,0);
		}
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnConstraintContext columnConstraint() throws RecognitionException {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_columnConstraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2898);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(2896);
				match(CONSTRAINT);
				setState(2897);
				constraintName();
				}
			}

			setState(2903);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
			case UNIQUE:
			case KEY:
				{
				setState(2900);
				primaryKeyConstraint();
				}
				break;
			case FOREIGN:
			case REFERENCES:
				{
				setState(2901);
				columnForeignKeyConstraint();
				}
				break;
			case CHECK:
				{
				setState(2902);
				checkConstraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ComputedColumnConstraintContext extends ParserRuleContext {
		public PrimaryKeyConstraintContext primaryKeyConstraint() {
			return getRuleContext(PrimaryKeyConstraintContext.class,0);
		}
		public ComputedColumnForeignKeyConstraintContext computedColumnForeignKeyConstraint() {
			return getRuleContext(ComputedColumnForeignKeyConstraintContext.class,0);
		}
		public CheckConstraintContext checkConstraint() {
			return getRuleContext(CheckConstraintContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(SQLServerStatementParser.CONSTRAINT, 0); }
		public ConstraintNameContext constraintName() {
			return getRuleContext(ConstraintNameContext.class,0);
		}
		public ComputedColumnConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_computedColumnConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterComputedColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitComputedColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitComputedColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComputedColumnConstraintContext computedColumnConstraint() throws RecognitionException {
		ComputedColumnConstraintContext _localctx = new ComputedColumnConstraintContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_computedColumnConstraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2907);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(2905);
				match(CONSTRAINT);
				setState(2906);
				constraintName();
				}
			}

			setState(2912);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
			case UNIQUE:
			case KEY:
				{
				setState(2909);
				primaryKeyConstraint();
				}
				break;
			case DOT_:
			case TRUNCATE:
			case SCHEMA:
			case TABLE:
			case COLUMNS:
			case FOREIGN:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case RIGHT:
			case OFF:
			case GROUP:
			case LIMIT:
			case OFFSET:
			case SAVEPOINT:
			case BOOLEAN:
			case ARRAY:
			case DATE:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MICROSECOND:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case AVG:
			case ENABLE:
			case DISABLE:
			case INSTANCE:
			case DO:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case NEXT:
			case NAME:
			case INTEGER:
			case TYPE:
			case TEXT:
			case VIEWS:
			case READ_ONLY:
			case DATABASE:
			case RETURNS:
			case DATEPART:
			case PASSWORD:
			case TARGET:
			case BINARY:
			case HIDDEN_:
			case MOD:
			case PARTITION:
			case PARTITIONS:
			case TOP:
			case ROW:
			case ROWS:
			case XOR:
			case ALWAYS:
			case USER:
			case ROLE:
			case START:
			case ACTION:
			case ALGORITHM:
			case AUTO:
			case BLOCKERS:
			case CLUSTERED:
			case NONCLUSTERED:
			case COLUMNSTORE:
			case CONTENT:
			case YEARS:
			case MONTHS:
			case WEEKS:
			case DAYS:
			case MINUTES:
			case DENY:
			case DETERMINISTIC:
			case DISTRIBUTION:
			case DOCUMENT:
			case DURABILITY:
			case ENCRYPTED:
			case FILESTREAM:
			case FILETABLE:
			case FILLFACTOR:
			case FOLLOWING:
			case HASH:
			case HEAP:
			case INBOUND:
			case OUTBOUND:
			case UNBOUNDED:
			case INFINITE:
			case LOGIN:
			case MASKED:
			case MAXDOP:
			case MOVE:
			case NOCHECK:
			case OBJECT:
			case ONLINE:
			case OVER:
			case PAGE:
			case PAUSED:
			case PERIOD:
			case PERSISTED:
			case PRECEDING:
			case RANDOMIZED:
			case RANGE:
			case REBUILD:
			case REPLICATE:
			case REPLICATION:
			case RESUMABLE:
			case ROWGUIDCOL:
			case SAVE:
			case SELF:
			case SPARSE:
			case SWITCH:
			case TRAN:
			case TRANCOUNT:
			case CONTROL:
			case CONCAT:
			case TAKE:
			case OWNERSHIP:
			case DEFINITION:
			case APPLICATION:
			case ASSEMBLY:
			case SYMMETRIC:
			case ASYMMETRIC:
			case SERVER:
			case RECEIVE:
			case CHANGE:
			case TRACE:
			case TRACKING:
			case RESOURCES:
			case SETTINGS:
			case STATE:
			case AVAILABILITY:
			case CREDENTIAL:
			case ENDPOINT:
			case EVENT:
			case NOTIFICATION:
			case LINKED:
			case AUDIT:
			case DDL:
			case XML:
			case IMPERSONATE:
			case SECURABLES:
			case AUTHENTICATE:
			case EXTERNAL:
			case ACCESS:
			case ADMINISTER:
			case BULK:
			case OPERATIONS:
			case UNSAFE:
			case SHUTDOWN:
			case SCOPED:
			case CONFIGURATION:
			case DATASPACE:
			case SERVICE:
			case CERTIFICATE:
			case CONTRACT:
			case ENCRYPTION:
			case MASTER:
			case DATA:
			case SOURCE:
			case FILE:
			case FORMAT:
			case LIBRARY:
			case FULLTEXT:
			case MASK:
			case UNMASK:
			case MESSAGE:
			case REMOTE:
			case BINDING:
			case ROUTE:
			case SECURITY:
			case POLICY:
			case AGGREGATE:
			case QUEUE:
			case RULE:
			case SYNONYM:
			case COLLECTION:
			case SCRIPT:
			case KILL:
			case BACKUP:
			case LOG:
			case SHOWPLAN:
			case SUBSCRIBE:
			case QUERY:
			case NOTIFICATIONS:
			case CHECKPOINT:
			case SEQUENCE:
			case ABORT_AFTER_WAIT:
			case ALLOW_PAGE_LOCKS:
			case ALLOW_ROW_LOCKS:
			case ALL_SPARSE_COLUMNS:
			case BUCKET_COUNT:
			case COLUMNSTORE_ARCHIVE:
			case COLUMN_ENCRYPTION_KEY:
			case COLUMN_SET:
			case COMPRESSION_DELAY:
			case DATABASE_DEAULT:
			case DATA_COMPRESSION:
			case DATA_CONSISTENCY_CHECK:
			case ENCRYPTION_TYPE:
			case SYSTEM_TIME:
			case SYSTEM_VERSIONING:
			case TEXTIMAGE_ON:
			case WAIT_AT_LOW_PRIORITY:
			case STATISTICS_INCREMENTAL:
			case STATISTICS_NORECOMPUTE:
			case ROUND_ROBIN:
			case SCHEMA_AND_DATA:
			case SCHEMA_ONLY:
			case SORT_IN_TEMPDB:
			case IGNORE_DUP_KEY:
			case IMPLICIT_TRANSACTIONS:
			case MAX_DURATION:
			case MEMORY_OPTIMIZED:
			case MIGRATION_STATE:
			case PAD_INDEX:
			case REMOTE_DATA_ARCHIVE:
			case FILESTREAM_ON:
			case FILETABLE_COLLATE_FILENAME:
			case FILETABLE_DIRECTORY:
			case FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME:
			case FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME:
			case FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME:
			case FILTER_PREDICATE:
			case HISTORY_RETENTION_PERIOD:
			case HISTORY_TABLE:
			case LOCK_ESCALATION:
			case DROP_EXISTING:
			case ROW_NUMBER:
			case FIRST:
			case DATETIME2:
			case OUTPUT:
			case INSERTED:
			case DELETED:
			case FILENAME:
			case SIZE:
			case MAXSIZE:
			case FILEGROWTH:
			case UNLIMITED:
			case KB:
			case MB:
			case GB:
			case TB:
			case CONTAINS:
			case MEMORY_OPTIMIZED_DATA:
			case FILEGROUP:
			case NON_TRANSACTED_ACCESS:
			case DB_CHAINING:
			case TRUSTWORTHY:
			case FORWARD_ONLY:
			case KEYSET:
			case FAST_FORWARD:
			case SCROLL_LOCKS:
			case OPTIMISTIC:
			case TYPE_WARNING:
			case SCHEMABINDING:
			case CALLER:
			case INPUT:
			case OWNER:
			case SNAPSHOT:
			case REPEATABLE:
			case SERIALIZABLE:
			case NATIVE_COMPILATION:
			case VIEW_METADATA:
			case INSTEAD:
			case APPEND:
			case INCREMENT:
			case CACHE:
			case MINVALUE:
			case MAXVALUE:
			case RESTART:
			case LOB_COMPACTION:
			case COMPRESS_ALL_ROW_GROUPS:
			case REORGANIZE:
			case RESUME:
			case PAUSE:
			case ABORT:
			case ACCELERATED_DATABASE_RECOVERY:
			case PERSISTENT_VERSION_STORE_FILEGROUP:
			case IMMEDIATE:
			case NO_WAIT:
			case TARGET_RECOVERY_TIME:
			case SECONDS:
			case HONOR_BROKER_PRIORITY:
			case ERROR_BROKER_CONVERSATIONS:
			case NEW_BROKER:
			case DISABLE_BROKER:
			case ENABLE_BROKER:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case READ_COMMITTED_SNAPSHOT:
			case ALLOW_SNAPSHOT_ISOLATION:
			case RECURSIVE_TRIGGERS:
			case QUOTED_IDENTIFIER:
			case NUMERIC_ROUNDABORT:
			case CONCAT_NULL_YIELDS_NULL:
			case COMPATIBILITY_LEVEL:
			case ARITHABORT:
			case ANSI_WARNINGS:
			case ANSI_PADDING:
			case ANSI_NULLS:
			case ANSI_NULL_DEFAULT:
			case PAGE_VERIFY:
			case CHECKSUM:
			case TORN_PAGE_DETECTION:
			case BULK_LOGGED:
			case RECOVERY:
			case TOTAL_EXECUTION_CPU_TIME_MS:
			case TOTAL_COMPILE_CPU_TIME_MS:
			case STALE_CAPTURE_POLICY_THRESHOLD:
			case EXECUTION_COUNT:
			case QUERY_CAPTURE_POLICY:
			case WAIT_STATS_CAPTURE_MODE:
			case MAX_PLANS_PER_QUERY:
			case QUERY_CAPTURE_MODE:
			case SIZE_BASED_CLEANUP_MODE:
			case INTERVAL_LENGTH_MINUTES:
			case MAX_STORAGE_SIZE_MB:
			case DATA_FLUSH_INTERVAL_SECONDS:
			case CLEANUP_POLICY:
			case CUSTOM:
			case STALE_QUERY_THRESHOLD_DAYS:
			case OPERATION_MODE:
			case QUERY_STORE:
			case CURSOR_DEFAULT:
			case GLOBAL:
			case CURSOR_CLOSE_ON_COMMIT:
			case HOURS:
			case CHANGE_RETENTION:
			case AUTO_CLEANUP:
			case CHANGE_TRACKING:
			case AUTOMATIC_TUNING:
			case FORCE_LAST_GOOD_PLAN:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_CREATE_STATISTICS:
			case INCREMENTAL:
			case AUTO_CLOSE:
			case DATA_RETENTION:
			case TEMPORAL_HISTORY_RETENTION:
			case EDITION:
			case MIXED_PAGE_ALLOCATION:
			case DISABLED:
			case ALLOWED:
			case HADR:
			case MULTI_USER:
			case RESTRICTED_USER:
			case SINGLE_USER:
			case OFFLINE:
			case EMERGENCY:
			case SUSPEND:
			case DATE_CORRELATION_OPTIMIZATION:
			case ELASTIC_POOL:
			case SERVICE_OBJECTIVE:
			case DATABASE_NAME:
			case ALLOW_CONNECTIONS:
			case GEO:
			case NAMED:
			case DATEFIRST:
			case BACKUP_STORAGE_REDUNDANCY:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case SECONDARY:
			case FAILOVER:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case INLINE:
			case NESTED_TRIGGERS:
			case TRANSFORM_NOISE_WORDS:
			case TWO_DIGIT_YEAR_CUTOFF:
			case PERSISTENT_LOG_BUFFER:
			case DIRECTORY_NAME:
			case DATEFORMAT:
			case DELAYED_DURABILITY:
			case AUTHORIZATION:
			case TRANSFER:
			case PROVIDER:
			case SID:
			case SEARCH:
			case MEMBER:
			case JSON:
			case OPENQUERY:
			case IDENTIFIER_:
			case DELIMITED_IDENTIFIER_:
				{
				setState(2910);
				computedColumnForeignKeyConstraint();
				}
				break;
			case CHECK:
				{
				setState(2911);
				checkConstraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ComputedColumnForeignKeyConstraintContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(SQLServerStatementParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(SQLServerStatementParser.KEY, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public List<ComputedColumnForeignKeyOnActionContext> computedColumnForeignKeyOnAction() {
			return getRuleContexts(ComputedColumnForeignKeyOnActionContext.class);
		}
		public ComputedColumnForeignKeyOnActionContext computedColumnForeignKeyOnAction(int i) {
			return getRuleContext(ComputedColumnForeignKeyOnActionContext.class,i);
		}
		public ComputedColumnForeignKeyConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_computedColumnForeignKeyConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterComputedColumnForeignKeyConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitComputedColumnForeignKeyConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitComputedColumnForeignKeyConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComputedColumnForeignKeyConstraintContext computedColumnForeignKeyConstraint() throws RecognitionException {
		ComputedColumnForeignKeyConstraintContext _localctx = new ComputedColumnForeignKeyConstraintContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_computedColumnForeignKeyConstraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2916);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOREIGN) {
				{
				setState(2914);
				match(FOREIGN);
				setState(2915);
				match(KEY);
				}
			}

			setState(2918);
			tableName();
			setState(2923);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,228,_ctx) ) {
			case 1:
				{
				setState(2919);
				match(LP_);
				setState(2920);
				columnName();
				setState(2921);
				match(RP_);
				}
				break;
			}
			setState(2928);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ON || _la==NOT) {
				{
				{
				setState(2925);
				computedColumnForeignKeyOnAction();
				}
				}
				setState(2930);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ComputedColumnForeignKeyOnActionContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(SQLServerStatementParser.DELETE, 0); }
		public TerminalNode NO() { return getToken(SQLServerStatementParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(SQLServerStatementParser.ACTION, 0); }
		public TerminalNode CASCADE() { return getToken(SQLServerStatementParser.CASCADE, 0); }
		public TerminalNode UPDATE() { return getToken(SQLServerStatementParser.UPDATE, 0); }
		public TerminalNode NOT() { return getToken(SQLServerStatementParser.NOT, 0); }
		public TerminalNode FOR() { return getToken(SQLServerStatementParser.FOR, 0); }
		public TerminalNode REPLICATION() { return getToken(SQLServerStatementParser.REPLICATION, 0); }
		public ComputedColumnForeignKeyOnActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_computedColumnForeignKeyOnAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterComputedColumnForeignKeyOnAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitComputedColumnForeignKeyOnAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitComputedColumnForeignKeyOnAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComputedColumnForeignKeyOnActionContext computedColumnForeignKeyOnAction() throws RecognitionException {
		ComputedColumnForeignKeyOnActionContext _localctx = new ComputedColumnForeignKeyOnActionContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_computedColumnForeignKeyOnAction);
		try {
			setState(2945);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,231,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2931);
				match(ON);
				setState(2932);
				match(DELETE);
				setState(2936);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					setState(2933);
					match(NO);
					setState(2934);
					match(ACTION);
					}
					break;
				case CASCADE:
					{
					setState(2935);
					match(CASCADE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2938);
				match(ON);
				setState(2939);
				match(UPDATE);
				setState(2940);
				match(NO);
				setState(2941);
				match(ACTION);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2942);
				match(NOT);
				setState(2943);
				match(FOR);
				setState(2944);
				match(REPLICATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrimaryKeyConstraintContext extends ParserRuleContext {
		public PrimaryKeyContext primaryKey() {
			return getRuleContext(PrimaryKeyContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(SQLServerStatementParser.UNIQUE, 0); }
		public DiskTablePrimaryKeyConstraintOptionContext diskTablePrimaryKeyConstraintOption() {
			return getRuleContext(DiskTablePrimaryKeyConstraintOptionContext.class,0);
		}
		public MemoryTablePrimaryKeyConstraintOptionContext memoryTablePrimaryKeyConstraintOption() {
			return getRuleContext(MemoryTablePrimaryKeyConstraintOptionContext.class,0);
		}
		public PrimaryKeyConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primaryKeyConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterPrimaryKeyConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitPrimaryKeyConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitPrimaryKeyConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrimaryKeyConstraintContext primaryKeyConstraint() throws RecognitionException {
		PrimaryKeyConstraintContext _localctx = new PrimaryKeyConstraintContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_primaryKeyConstraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2949);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
			case KEY:
				{
				setState(2947);
				primaryKey();
				}
				break;
			case UNIQUE:
				{
				setState(2948);
				match(UNIQUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2953);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,233,_ctx) ) {
			case 1:
				{
				setState(2951);
				diskTablePrimaryKeyConstraintOption();
				}
				break;
			case 2:
				{
				setState(2952);
				memoryTablePrimaryKeyConstraintOption();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DiskTablePrimaryKeyConstraintOptionContext extends ParserRuleContext {
		public ClusterOptionContext clusterOption() {
			return getRuleContext(ClusterOptionContext.class,0);
		}
		public PrimaryKeyWithClauseContext primaryKeyWithClause() {
			return getRuleContext(PrimaryKeyWithClauseContext.class,0);
		}
		public PrimaryKeyOnClauseContext primaryKeyOnClause() {
			return getRuleContext(PrimaryKeyOnClauseContext.class,0);
		}
		public DiskTablePrimaryKeyConstraintOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diskTablePrimaryKeyConstraintOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDiskTablePrimaryKeyConstraintOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDiskTablePrimaryKeyConstraintOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDiskTablePrimaryKeyConstraintOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DiskTablePrimaryKeyConstraintOptionContext diskTablePrimaryKeyConstraintOption() throws RecognitionException {
		DiskTablePrimaryKeyConstraintOptionContext _localctx = new DiskTablePrimaryKeyConstraintOptionContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_diskTablePrimaryKeyConstraintOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2956);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CLUSTERED || _la==NONCLUSTERED) {
				{
				setState(2955);
				clusterOption();
				}
			}

			setState(2959);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,235,_ctx) ) {
			case 1:
				{
				setState(2958);
				primaryKeyWithClause();
				}
				break;
			}
			setState(2962);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2961);
				primaryKeyOnClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ClusterOptionContext extends ParserRuleContext {
		public TerminalNode CLUSTERED() { return getToken(SQLServerStatementParser.CLUSTERED, 0); }
		public TerminalNode NONCLUSTERED() { return getToken(SQLServerStatementParser.NONCLUSTERED, 0); }
		public ClusterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clusterOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterClusterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitClusterOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitClusterOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClusterOptionContext clusterOption() throws RecognitionException {
		ClusterOptionContext _localctx = new ClusterOptionContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_clusterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2964);
			_la = _input.LA(1);
			if ( !(_la==CLUSTERED || _la==NONCLUSTERED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrimaryKeyWithClauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public TerminalNode FILLFACTOR() { return getToken(SQLServerStatementParser.FILLFACTOR, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode NUMBER_() { return getToken(SQLServerStatementParser.NUMBER_, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public PrimaryKeyWithClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primaryKeyWithClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterPrimaryKeyWithClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitPrimaryKeyWithClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitPrimaryKeyWithClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrimaryKeyWithClauseContext primaryKeyWithClause() throws RecognitionException {
		PrimaryKeyWithClauseContext _localctx = new PrimaryKeyWithClauseContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_primaryKeyWithClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2966);
			match(WITH);
			setState(2981);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILLFACTOR:
				{
				setState(2967);
				match(FILLFACTOR);
				setState(2968);
				match(EQ_);
				setState(2969);
				match(NUMBER_);
				}
				break;
			case LP_:
				{
				setState(2970);
				match(LP_);
				setState(2971);
				indexOption();
				setState(2976);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(2972);
					match(COMMA_);
					setState(2973);
					indexOption();
					}
					}
					setState(2978);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2979);
				match(RP_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrimaryKeyOnClauseContext extends ParserRuleContext {
		public OnSchemaColumnContext onSchemaColumn() {
			return getRuleContext(OnSchemaColumnContext.class,0);
		}
		public OnFileGroupContext onFileGroup() {
			return getRuleContext(OnFileGroupContext.class,0);
		}
		public OnStringContext onString() {
			return getRuleContext(OnStringContext.class,0);
		}
		public PrimaryKeyOnClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primaryKeyOnClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterPrimaryKeyOnClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitPrimaryKeyOnClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitPrimaryKeyOnClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrimaryKeyOnClauseContext primaryKeyOnClause() throws RecognitionException {
		PrimaryKeyOnClauseContext _localctx = new PrimaryKeyOnClauseContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_primaryKeyOnClause);
		try {
			setState(2986);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,239,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2983);
				onSchemaColumn();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2984);
				onFileGroup();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2985);
				onString();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OnSchemaColumnContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public OnSchemaColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onSchemaColumn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterOnSchemaColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitOnSchemaColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitOnSchemaColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnSchemaColumnContext onSchemaColumn() throws RecognitionException {
		OnSchemaColumnContext _localctx = new OnSchemaColumnContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_onSchemaColumn);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2988);
			match(ON);
			setState(2989);
			schemaName();
			setState(2990);
			match(LP_);
			setState(2991);
			columnName();
			setState(2992);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OnFileGroupContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public OnFileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onFileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterOnFileGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitOnFileGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitOnFileGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnFileGroupContext onFileGroup() throws RecognitionException {
		OnFileGroupContext _localctx = new OnFileGroupContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_onFileGroup);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2994);
			match(ON);
			setState(2995);
			ignoredIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OnStringContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode STRING_() { return getToken(SQLServerStatementParser.STRING_, 0); }
		public OnStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onString; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterOnString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitOnString(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitOnString(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnStringContext onString() throws RecognitionException {
		OnStringContext _localctx = new OnStringContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_onString);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2997);
			match(ON);
			setState(2998);
			match(STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MemoryTablePrimaryKeyConstraintOptionContext extends ParserRuleContext {
		public TerminalNode NONCLUSTERED() { return getToken(SQLServerStatementParser.NONCLUSTERED, 0); }
		public TerminalNode HASH() { return getToken(SQLServerStatementParser.HASH, 0); }
		public WithBucketContext withBucket() {
			return getRuleContext(WithBucketContext.class,0);
		}
		public MemoryTablePrimaryKeyConstraintOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_memoryTablePrimaryKeyConstraintOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterMemoryTablePrimaryKeyConstraintOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitMemoryTablePrimaryKeyConstraintOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitMemoryTablePrimaryKeyConstraintOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MemoryTablePrimaryKeyConstraintOptionContext memoryTablePrimaryKeyConstraintOption() throws RecognitionException {
		MemoryTablePrimaryKeyConstraintOptionContext _localctx = new MemoryTablePrimaryKeyConstraintOptionContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_memoryTablePrimaryKeyConstraintOption);
		try {
			setState(3006);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,241,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3000);
				match(NONCLUSTERED);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3001);
				match(NONCLUSTERED);
				setState(3002);
				match(HASH);
				setState(3004);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,240,_ctx) ) {
				case 1:
					{
					setState(3003);
					withBucket();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WithBucketContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public TerminalNode BUCKET_COUNT() { return getToken(SQLServerStatementParser.BUCKET_COUNT, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode NUMBER_() { return getToken(SQLServerStatementParser.NUMBER_, 0); }
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public WithBucketContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withBucket; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterWithBucket(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitWithBucket(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitWithBucket(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithBucketContext withBucket() throws RecognitionException {
		WithBucketContext _localctx = new WithBucketContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_withBucket);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3008);
			match(WITH);
			setState(3009);
			match(LP_);
			setState(3010);
			match(BUCKET_COUNT);
			setState(3011);
			match(EQ_);
			setState(3012);
			match(NUMBER_);
			setState(3013);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnForeignKeyConstraintContext extends ParserRuleContext {
		public TerminalNode REFERENCES() { return getToken(SQLServerStatementParser.REFERENCES, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(SQLServerStatementParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(SQLServerStatementParser.KEY, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public List<ForeignKeyOnActionContext> foreignKeyOnAction() {
			return getRuleContexts(ForeignKeyOnActionContext.class);
		}
		public ForeignKeyOnActionContext foreignKeyOnAction(int i) {
			return getRuleContext(ForeignKeyOnActionContext.class,i);
		}
		public ColumnForeignKeyConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnForeignKeyConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterColumnForeignKeyConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitColumnForeignKeyConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitColumnForeignKeyConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnForeignKeyConstraintContext columnForeignKeyConstraint() throws RecognitionException {
		ColumnForeignKeyConstraintContext _localctx = new ColumnForeignKeyConstraintContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_columnForeignKeyConstraint);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3017);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOREIGN) {
				{
				setState(3015);
				match(FOREIGN);
				setState(3016);
				match(KEY);
				}
			}

			setState(3019);
			match(REFERENCES);
			setState(3020);
			tableName();
			setState(3025);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,243,_ctx) ) {
			case 1:
				{
				setState(3021);
				match(LP_);
				setState(3022);
				columnName();
				setState(3023);
				match(RP_);
				}
				break;
			}
			setState(3030);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,244,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3027);
					foreignKeyOnAction();
					}
					} 
				}
				setState(3032);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,244,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ForeignKeyOnActionContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public ForeignKeyOnContext foreignKeyOn() {
			return getRuleContext(ForeignKeyOnContext.class,0);
		}
		public TerminalNode DELETE() { return getToken(SQLServerStatementParser.DELETE, 0); }
		public TerminalNode UPDATE() { return getToken(SQLServerStatementParser.UPDATE, 0); }
		public TerminalNode NOT() { return getToken(SQLServerStatementParser.NOT, 0); }
		public TerminalNode FOR() { return getToken(SQLServerStatementParser.FOR, 0); }
		public TerminalNode REPLICATION() { return getToken(SQLServerStatementParser.REPLICATION, 0); }
		public ForeignKeyOnActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreignKeyOnAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterForeignKeyOnAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitForeignKeyOnAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitForeignKeyOnAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForeignKeyOnActionContext foreignKeyOnAction() throws RecognitionException {
		ForeignKeyOnActionContext _localctx = new ForeignKeyOnActionContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_foreignKeyOnAction);
		int _la;
		try {
			setState(3039);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				enterOuterAlt(_localctx, 1);
				{
				setState(3033);
				match(ON);
				setState(3034);
				_la = _input.LA(1);
				if ( !(_la==UPDATE || _la==DELETE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3035);
				foreignKeyOn();
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3036);
				match(NOT);
				setState(3037);
				match(FOR);
				setState(3038);
				match(REPLICATION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ForeignKeyOnContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(SQLServerStatementParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(SQLServerStatementParser.ACTION, 0); }
		public TerminalNode CASCADE() { return getToken(SQLServerStatementParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(SQLServerStatementParser.SET, 0); }
		public TerminalNode NULL() { return getToken(SQLServerStatementParser.NULL, 0); }
		public TerminalNode DEFAULT() { return getToken(SQLServerStatementParser.DEFAULT, 0); }
		public ForeignKeyOnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreignKeyOn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterForeignKeyOn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitForeignKeyOn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitForeignKeyOn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForeignKeyOnContext foreignKeyOn() throws RecognitionException {
		ForeignKeyOnContext _localctx = new ForeignKeyOnContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_foreignKeyOn);
		int _la;
		try {
			setState(3046);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(3041);
				match(NO);
				setState(3042);
				match(ACTION);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3043);
				match(CASCADE);
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 3);
				{
				setState(3044);
				match(SET);
				setState(3045);
				_la = _input.LA(1);
				if ( !(_la==NULL || _la==DEFAULT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CheckConstraintContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(SQLServerStatementParser.CHECK, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public TerminalNode NOT() { return getToken(SQLServerStatementParser.NOT, 0); }
		public TerminalNode FOR() { return getToken(SQLServerStatementParser.FOR, 0); }
		public TerminalNode REPLICATION() { return getToken(SQLServerStatementParser.REPLICATION, 0); }
		public CheckConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCheckConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCheckConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCheckConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckConstraintContext checkConstraint() throws RecognitionException {
		CheckConstraintContext _localctx = new CheckConstraintContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_checkConstraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3048);
			match(CHECK);
			setState(3052);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3049);
				match(NOT);
				setState(3050);
				match(FOR);
				setState(3051);
				match(REPLICATION);
				}
			}

			setState(3054);
			match(LP_);
			setState(3055);
			expr(0);
			setState(3056);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnIndexContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(SQLServerStatementParser.INDEX, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public ClusterOptionContext clusterOption() {
			return getRuleContext(ClusterOptionContext.class,0);
		}
		public WithIndexOptionContext withIndexOption() {
			return getRuleContext(WithIndexOptionContext.class,0);
		}
		public IndexOnClauseContext indexOnClause() {
			return getRuleContext(IndexOnClauseContext.class,0);
		}
		public FileStreamOnContext fileStreamOn() {
			return getRuleContext(FileStreamOnContext.class,0);
		}
		public ColumnIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterColumnIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitColumnIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitColumnIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnIndexContext columnIndex() throws RecognitionException {
		ColumnIndexContext _localctx = new ColumnIndexContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_columnIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3058);
			match(INDEX);
			setState(3059);
			indexName();
			setState(3061);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CLUSTERED || _la==NONCLUSTERED) {
				{
				setState(3060);
				clusterOption();
				}
			}

			setState(3064);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,249,_ctx) ) {
			case 1:
				{
				setState(3063);
				withIndexOption();
				}
				break;
			}
			setState(3067);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(3066);
				indexOnClause();
				}
			}

			setState(3070);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILESTREAM_ON) {
				{
				setState(3069);
				fileStreamOn();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WithIndexOptionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public WithIndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withIndexOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterWithIndexOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitWithIndexOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitWithIndexOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithIndexOptionContext withIndexOption() throws RecognitionException {
		WithIndexOptionContext _localctx = new WithIndexOptionContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_withIndexOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3072);
			match(WITH);
			setState(3073);
			match(LP_);
			setState(3074);
			indexOption();
			setState(3079);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3075);
				match(COMMA_);
				setState(3076);
				indexOption();
				}
				}
				setState(3081);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3082);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexOnClauseContext extends ParserRuleContext {
		public OnSchemaColumnContext onSchemaColumn() {
			return getRuleContext(OnSchemaColumnContext.class,0);
		}
		public OnFileGroupContext onFileGroup() {
			return getRuleContext(OnFileGroupContext.class,0);
		}
		public OnDefaultContext onDefault() {
			return getRuleContext(OnDefaultContext.class,0);
		}
		public IndexOnClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOnClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterIndexOnClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitIndexOnClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitIndexOnClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexOnClauseContext indexOnClause() throws RecognitionException {
		IndexOnClauseContext _localctx = new IndexOnClauseContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_indexOnClause);
		try {
			setState(3087);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,253,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3084);
				onSchemaColumn();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3085);
				onFileGroup();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3086);
				onDefault();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OnDefaultContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode DEFAULT() { return getToken(SQLServerStatementParser.DEFAULT, 0); }
		public OnDefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onDefault; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterOnDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitOnDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitOnDefault(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnDefaultContext onDefault() throws RecognitionException {
		OnDefaultContext _localctx = new OnDefaultContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_onDefault);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3089);
			match(ON);
			setState(3090);
			match(DEFAULT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FileStreamOnContext extends ParserRuleContext {
		public TerminalNode FILESTREAM_ON() { return getToken(SQLServerStatementParser.FILESTREAM_ON, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode STRING_() { return getToken(SQLServerStatementParser.STRING_, 0); }
		public FileStreamOnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fileStreamOn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterFileStreamOn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitFileStreamOn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitFileStreamOn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FileStreamOnContext fileStreamOn() throws RecognitionException {
		FileStreamOnContext _localctx = new FileStreamOnContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_fileStreamOn);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3092);
			match(FILESTREAM_ON);
			setState(3096);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
			case 1:
				{
				setState(3093);
				ignoredIdentifier();
				}
				break;
			case 2:
				{
				setState(3094);
				schemaName();
				}
				break;
			case 3:
				{
				setState(3095);
				match(STRING_);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnConstraintsContext extends ParserRuleContext {
		public List<ColumnConstraintContext> columnConstraint() {
			return getRuleContexts(ColumnConstraintContext.class);
		}
		public ColumnConstraintContext columnConstraint(int i) {
			return getRuleContext(ColumnConstraintContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public ColumnConstraintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraints; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterColumnConstraints(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitColumnConstraints(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitColumnConstraints(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnConstraintsContext columnConstraints() throws RecognitionException {
		ColumnConstraintsContext _localctx = new ColumnConstraintsContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_columnConstraints);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3106);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,256,_ctx) ) {
			case 1:
				{
				setState(3098);
				columnConstraint();
				setState(3103);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,255,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3099);
						match(COMMA_);
						setState(3100);
						columnConstraint();
						}
						} 
					}
					setState(3105);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,255,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ComputedColumnDefinitionContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(SQLServerStatementParser.AS, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode PERSISTED() { return getToken(SQLServerStatementParser.PERSISTED, 0); }
		public ComputedColumnConstraintContext computedColumnConstraint() {
			return getRuleContext(ComputedColumnConstraintContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SQLServerStatementParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(SQLServerStatementParser.NULL, 0); }
		public ComputedColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_computedColumnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterComputedColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitComputedColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitComputedColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComputedColumnDefinitionContext computedColumnDefinition() throws RecognitionException {
		ComputedColumnDefinitionContext _localctx = new ComputedColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_computedColumnDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3108);
			columnName();
			setState(3109);
			match(AS);
			setState(3110);
			expr(0);
			setState(3116);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,258,_ctx) ) {
			case 1:
				{
				setState(3111);
				match(PERSISTED);
				setState(3114);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3112);
					match(NOT);
					setState(3113);
					match(NULL);
					}
				}

				}
				break;
			}
			setState(3119);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,259,_ctx) ) {
			case 1:
				{
				setState(3118);
				computedColumnConstraint();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnSetDefinitionContext extends ParserRuleContext {
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public TerminalNode IDENTIFIER_() { return getToken(SQLServerStatementParser.IDENTIFIER_, 0); }
		public TerminalNode COLUMN_SET() { return getToken(SQLServerStatementParser.COLUMN_SET, 0); }
		public TerminalNode FOR() { return getToken(SQLServerStatementParser.FOR, 0); }
		public TerminalNode ALL_SPARSE_COLUMNS() { return getToken(SQLServerStatementParser.ALL_SPARSE_COLUMNS, 0); }
		public ColumnSetDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnSetDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterColumnSetDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitColumnSetDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitColumnSetDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnSetDefinitionContext columnSetDefinition() throws RecognitionException {
		ColumnSetDefinitionContext _localctx = new ColumnSetDefinitionContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_columnSetDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3121);
			ignoredIdentifier();
			setState(3122);
			match(IDENTIFIER_);
			setState(3123);
			match(COLUMN_SET);
			setState(3124);
			match(FOR);
			setState(3125);
			match(ALL_SPARSE_COLUMNS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableConstraintContext extends ParserRuleContext {
		public TablePrimaryConstraintContext tablePrimaryConstraint() {
			return getRuleContext(TablePrimaryConstraintContext.class,0);
		}
		public TableForeignKeyConstraintContext tableForeignKeyConstraint() {
			return getRuleContext(TableForeignKeyConstraintContext.class,0);
		}
		public CheckConstraintContext checkConstraint() {
			return getRuleContext(CheckConstraintContext.class,0);
		}
		public EdgeConstraintContext edgeConstraint() {
			return getRuleContext(EdgeConstraintContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(SQLServerStatementParser.CONSTRAINT, 0); }
		public ConstraintNameContext constraintName() {
			return getRuleContext(ConstraintNameContext.class,0);
		}
		public TableConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintContext tableConstraint() throws RecognitionException {
		TableConstraintContext _localctx = new TableConstraintContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_tableConstraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3129);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(3127);
				match(CONSTRAINT);
				setState(3128);
				constraintName();
				}
			}

			setState(3135);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
			case UNIQUE:
			case KEY:
				{
				setState(3131);
				tablePrimaryConstraint();
				}
				break;
			case LP_:
			case FOREIGN:
				{
				setState(3132);
				tableForeignKeyConstraint();
				}
				break;
			case CHECK:
				{
				setState(3133);
				checkConstraint();
				}
				break;
			case CONNECTION:
				{
				setState(3134);
				edgeConstraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgeConstraintContext extends ParserRuleContext {
		public ConnectionClauseContext connectionClause() {
			return getRuleContext(ConnectionClauseContext.class,0);
		}
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(SQLServerStatementParser.DELETE, 0); }
		public TerminalNode NO() { return getToken(SQLServerStatementParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(SQLServerStatementParser.ACTION, 0); }
		public TerminalNode CASCADE() { return getToken(SQLServerStatementParser.CASCADE, 0); }
		public EdgeConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgeConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterEdgeConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitEdgeConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitEdgeConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EdgeConstraintContext edgeConstraint() throws RecognitionException {
		EdgeConstraintContext _localctx = new EdgeConstraintContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_edgeConstraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3137);
			connectionClause();
			setState(3145);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(3138);
				match(ON);
				setState(3139);
				match(DELETE);
				setState(3143);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					setState(3140);
					match(NO);
					setState(3141);
					match(ACTION);
					}
					break;
				case CASCADE:
					{
					setState(3142);
					match(CASCADE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConnectionClauseContext extends ParserRuleContext {
		public TerminalNode CONNECTION() { return getToken(SQLServerStatementParser.CONNECTION, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public List<NodeAliasContext> nodeAlias() {
			return getRuleContexts(NodeAliasContext.class);
		}
		public NodeAliasContext nodeAlias(int i) {
			return getRuleContext(NodeAliasContext.class,i);
		}
		public List<TerminalNode> TO() { return getTokens(SQLServerStatementParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(SQLServerStatementParser.TO, i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public ConnectionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connectionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterConnectionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitConnectionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitConnectionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConnectionClauseContext connectionClause() throws RecognitionException {
		ConnectionClauseContext _localctx = new ConnectionClauseContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_connectionClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3147);
			match(CONNECTION);
			setState(3148);
			match(LP_);
			{
			setState(3149);
			nodeAlias();
			setState(3150);
			match(TO);
			setState(3151);
			nodeAlias();
			}
			setState(3160);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,264,_ctx);
			while ( _alt!=1 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					setState(3153);
					match(COMMA_);
					setState(3154);
					nodeAlias();
					setState(3155);
					match(TO);
					setState(3156);
					nodeAlias();
					}
					} 
				}
				setState(3162);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,264,_ctx);
			}
			setState(3163);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TablePrimaryConstraintContext extends ParserRuleContext {
		public PrimaryKeyUniqueContext primaryKeyUnique() {
			return getRuleContext(PrimaryKeyUniqueContext.class,0);
		}
		public DiskTablePrimaryConstraintOptionContext diskTablePrimaryConstraintOption() {
			return getRuleContext(DiskTablePrimaryConstraintOptionContext.class,0);
		}
		public MemoryTablePrimaryConstraintOptionContext memoryTablePrimaryConstraintOption() {
			return getRuleContext(MemoryTablePrimaryConstraintOptionContext.class,0);
		}
		public TablePrimaryConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablePrimaryConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterTablePrimaryConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitTablePrimaryConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitTablePrimaryConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablePrimaryConstraintContext tablePrimaryConstraint() throws RecognitionException {
		TablePrimaryConstraintContext _localctx = new TablePrimaryConstraintContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_tablePrimaryConstraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3165);
			primaryKeyUnique();
			setState(3168);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,265,_ctx) ) {
			case 1:
				{
				setState(3166);
				diskTablePrimaryConstraintOption();
				}
				break;
			case 2:
				{
				setState(3167);
				memoryTablePrimaryConstraintOption();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrimaryKeyUniqueContext extends ParserRuleContext {
		public PrimaryKeyContext primaryKey() {
			return getRuleContext(PrimaryKeyContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(SQLServerStatementParser.UNIQUE, 0); }
		public PrimaryKeyUniqueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primaryKeyUnique; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterPrimaryKeyUnique(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitPrimaryKeyUnique(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitPrimaryKeyUnique(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrimaryKeyUniqueContext primaryKeyUnique() throws RecognitionException {
		PrimaryKeyUniqueContext _localctx = new PrimaryKeyUniqueContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_primaryKeyUnique);
		try {
			setState(3172);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
			case KEY:
				enterOuterAlt(_localctx, 1);
				{
				setState(3170);
				primaryKey();
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3171);
				match(UNIQUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DiskTablePrimaryConstraintOptionContext extends ParserRuleContext {
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public ClusterOptionContext clusterOption() {
			return getRuleContext(ClusterOptionContext.class,0);
		}
		public PrimaryKeyWithClauseContext primaryKeyWithClause() {
			return getRuleContext(PrimaryKeyWithClauseContext.class,0);
		}
		public PrimaryKeyOnClauseContext primaryKeyOnClause() {
			return getRuleContext(PrimaryKeyOnClauseContext.class,0);
		}
		public DiskTablePrimaryConstraintOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diskTablePrimaryConstraintOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDiskTablePrimaryConstraintOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDiskTablePrimaryConstraintOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDiskTablePrimaryConstraintOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DiskTablePrimaryConstraintOptionContext diskTablePrimaryConstraintOption() throws RecognitionException {
		DiskTablePrimaryConstraintOptionContext _localctx = new DiskTablePrimaryConstraintOptionContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_diskTablePrimaryConstraintOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3175);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CLUSTERED || _la==NONCLUSTERED) {
				{
				setState(3174);
				clusterOption();
				}
			}

			setState(3177);
			columnNames();
			setState(3179);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,268,_ctx) ) {
			case 1:
				{
				setState(3178);
				primaryKeyWithClause();
				}
				break;
			}
			setState(3182);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(3181);
				primaryKeyOnClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MemoryTablePrimaryConstraintOptionContext extends ParserRuleContext {
		public TerminalNode NONCLUSTERED() { return getToken(SQLServerStatementParser.NONCLUSTERED, 0); }
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public HashWithBucketContext hashWithBucket() {
			return getRuleContext(HashWithBucketContext.class,0);
		}
		public MemoryTablePrimaryConstraintOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_memoryTablePrimaryConstraintOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterMemoryTablePrimaryConstraintOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitMemoryTablePrimaryConstraintOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitMemoryTablePrimaryConstraintOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MemoryTablePrimaryConstraintOptionContext memoryTablePrimaryConstraintOption() throws RecognitionException {
		MemoryTablePrimaryConstraintOptionContext _localctx = new MemoryTablePrimaryConstraintOptionContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_memoryTablePrimaryConstraintOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3184);
			match(NONCLUSTERED);
			setState(3187);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LP_:
				{
				setState(3185);
				columnNames();
				}
				break;
			case HASH:
				{
				setState(3186);
				hashWithBucket();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HashWithBucketContext extends ParserRuleContext {
		public TerminalNode HASH() { return getToken(SQLServerStatementParser.HASH, 0); }
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public WithBucketContext withBucket() {
			return getRuleContext(WithBucketContext.class,0);
		}
		public HashWithBucketContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hashWithBucket; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterHashWithBucket(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitHashWithBucket(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitHashWithBucket(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HashWithBucketContext hashWithBucket() throws RecognitionException {
		HashWithBucketContext _localctx = new HashWithBucketContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_hashWithBucket);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3189);
			match(HASH);
			setState(3190);
			columnNames();
			setState(3191);
			withBucket();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableForeignKeyConstraintContext extends ParserRuleContext {
		public List<ColumnNamesContext> columnNames() {
			return getRuleContexts(ColumnNamesContext.class);
		}
		public ColumnNamesContext columnNames(int i) {
			return getRuleContext(ColumnNamesContext.class,i);
		}
		public TerminalNode REFERENCES() { return getToken(SQLServerStatementParser.REFERENCES, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(SQLServerStatementParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(SQLServerStatementParser.KEY, 0); }
		public List<ForeignKeyOnActionContext> foreignKeyOnAction() {
			return getRuleContexts(ForeignKeyOnActionContext.class);
		}
		public ForeignKeyOnActionContext foreignKeyOnAction(int i) {
			return getRuleContext(ForeignKeyOnActionContext.class,i);
		}
		public TableForeignKeyConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableForeignKeyConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterTableForeignKeyConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitTableForeignKeyConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitTableForeignKeyConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableForeignKeyConstraintContext tableForeignKeyConstraint() throws RecognitionException {
		TableForeignKeyConstraintContext _localctx = new TableForeignKeyConstraintContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_tableForeignKeyConstraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3195);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOREIGN) {
				{
				setState(3193);
				match(FOREIGN);
				setState(3194);
				match(KEY);
				}
			}

			setState(3197);
			columnNames();
			setState(3198);
			match(REFERENCES);
			setState(3199);
			tableName();
			setState(3200);
			columnNames();
			setState(3204);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ON || _la==NOT) {
				{
				{
				setState(3201);
				foreignKeyOnAction();
				}
				}
				setState(3206);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableIndexContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(SQLServerStatementParser.INDEX, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public IndexNameOptionContext indexNameOption() {
			return getRuleContext(IndexNameOptionContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public IndexOptionsContext indexOptions() {
			return getRuleContext(IndexOptionsContext.class,0);
		}
		public IndexOnClauseContext indexOnClause() {
			return getRuleContext(IndexOnClauseContext.class,0);
		}
		public FileStreamOnContext fileStreamOn() {
			return getRuleContext(FileStreamOnContext.class,0);
		}
		public TableIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterTableIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitTableIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitTableIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableIndexContext tableIndex() throws RecognitionException {
		TableIndexContext _localctx = new TableIndexContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_tableIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3207);
			match(INDEX);
			setState(3208);
			indexName();
			setState(3209);
			indexNameOption();
			setState(3212);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3210);
				match(WITH);
				setState(3211);
				indexOptions();
				}
			}

			setState(3215);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(3214);
				indexOnClause();
				}
			}

			setState(3218);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILESTREAM_ON) {
				{
				setState(3217);
				fileStreamOn();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexNameOptionContext extends ParserRuleContext {
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public ClusterOptionContext clusterOption() {
			return getRuleContext(ClusterOptionContext.class,0);
		}
		public TerminalNode CLUSTERED() { return getToken(SQLServerStatementParser.CLUSTERED, 0); }
		public TerminalNode COLUMNSTORE() { return getToken(SQLServerStatementParser.COLUMNSTORE, 0); }
		public TerminalNode NONCLUSTERED() { return getToken(SQLServerStatementParser.NONCLUSTERED, 0); }
		public IndexNameOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexNameOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterIndexNameOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitIndexNameOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitIndexNameOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexNameOptionContext indexNameOption() throws RecognitionException {
		IndexNameOptionContext _localctx = new IndexNameOptionContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_indexNameOption);
		int _la;
		try {
			setState(3231);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,278,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3221);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					setState(3220);
					clusterOption();
					}
				}

				setState(3223);
				columnNames();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3224);
				match(CLUSTERED);
				setState(3225);
				match(COLUMNSTORE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3227);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NONCLUSTERED) {
					{
					setState(3226);
					match(NONCLUSTERED);
					}
				}

				setState(3229);
				match(COLUMNSTORE);
				setState(3230);
				columnNames();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexOptionsContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public IndexOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterIndexOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitIndexOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitIndexOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexOptionsContext indexOptions() throws RecognitionException {
		IndexOptionsContext _localctx = new IndexOptionsContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_indexOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3233);
			match(LP_);
			setState(3234);
			indexOption();
			setState(3239);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3235);
				match(COMMA_);
				setState(3236);
				indexOption();
				}
				}
				setState(3241);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3242);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PeriodClauseContext extends ParserRuleContext {
		public TerminalNode PERIOD() { return getToken(SQLServerStatementParser.PERIOD, 0); }
		public TerminalNode FOR() { return getToken(SQLServerStatementParser.FOR, 0); }
		public TerminalNode SYSTEM_TIME() { return getToken(SQLServerStatementParser.SYSTEM_TIME, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode COMMA_() { return getToken(SQLServerStatementParser.COMMA_, 0); }
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public PeriodClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_periodClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterPeriodClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitPeriodClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitPeriodClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PeriodClauseContext periodClause() throws RecognitionException {
		PeriodClauseContext _localctx = new PeriodClauseContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_periodClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3244);
			match(PERIOD);
			setState(3245);
			match(FOR);
			setState(3246);
			match(SYSTEM_TIME);
			setState(3247);
			match(LP_);
			setState(3248);
			columnName();
			setState(3249);
			match(COMMA_);
			setState(3250);
			columnName();
			setState(3251);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionSchemeContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public TerminalNode STRING_() { return getToken(SQLServerStatementParser.STRING_, 0); }
		public PartitionSchemeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionScheme; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterPartitionScheme(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitPartitionScheme(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitPartitionScheme(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionSchemeContext partitionScheme() throws RecognitionException {
		PartitionSchemeContext _localctx = new PartitionSchemeContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_partitionScheme);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3263);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(3253);
				match(ON);
				setState(3261);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,280,_ctx) ) {
				case 1:
					{
					setState(3254);
					schemaName();
					setState(3255);
					match(LP_);
					setState(3256);
					columnName();
					setState(3257);
					match(RP_);
					}
					break;
				case 2:
					{
					setState(3259);
					ignoredIdentifier();
					}
					break;
				case 3:
					{
					setState(3260);
					match(STRING_);
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FileGroupContext extends ParserRuleContext {
		public TerminalNode TEXTIMAGE_ON() { return getToken(SQLServerStatementParser.TEXTIMAGE_ON, 0); }
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public TableOptionsContext tableOptions() {
			return getRuleContext(TableOptionsContext.class,0);
		}
		public List<IgnoredIdentifierContext> ignoredIdentifier() {
			return getRuleContexts(IgnoredIdentifierContext.class);
		}
		public IgnoredIdentifierContext ignoredIdentifier(int i) {
			return getRuleContext(IgnoredIdentifierContext.class,i);
		}
		public List<TerminalNode> STRING_() { return getTokens(SQLServerStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(SQLServerStatementParser.STRING_, i);
		}
		public TerminalNode FILESTREAM_ON() { return getToken(SQLServerStatementParser.FILESTREAM_ON, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public FileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterFileGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitFileGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitFileGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FileGroupContext fileGroup() throws RecognitionException {
		FileGroupContext _localctx = new FileGroupContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_fileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3270);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEXTIMAGE_ON) {
				{
				setState(3265);
				match(TEXTIMAGE_ON);
				setState(3268);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case IDENTIFIER_:
					{
					setState(3266);
					ignoredIdentifier();
					}
					break;
				case STRING_:
					{
					setState(3267);
					match(STRING_);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(3279);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILESTREAM_ON || _la==IDENTIFIER_) {
				{
				setState(3277);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FILESTREAM_ON:
					{
					setState(3272);
					match(FILESTREAM_ON);
					{
					setState(3273);
					schemaName();
					}
					}
					break;
				case IDENTIFIER_:
					{
					setState(3274);
					ignoredIdentifier();
					setState(3275);
					match(STRING_);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(3283);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,286,_ctx) ) {
			case 1:
				{
				setState(3281);
				match(WITH);
				setState(3282);
				tableOptions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionsContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public TableOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterTableOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitTableOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitTableOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableOptionsContext tableOptions() throws RecognitionException {
		TableOptionsContext _localctx = new TableOptionsContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_tableOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3285);
			match(LP_);
			setState(3286);
			tableOption();
			setState(3291);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3287);
				match(COMMA_);
				setState(3288);
				tableOption();
				}
				}
				setState(3293);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3294);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionContext extends ParserRuleContext {
		public TerminalNode DATA_COMPRESSION() { return getToken(SQLServerStatementParser.DATA_COMPRESSION, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode NONE() { return getToken(SQLServerStatementParser.NONE, 0); }
		public TerminalNode ROW() { return getToken(SQLServerStatementParser.ROW, 0); }
		public TerminalNode PAGE() { return getToken(SQLServerStatementParser.PAGE, 0); }
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode PARTITIONS() { return getToken(SQLServerStatementParser.PARTITIONS, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public PartitionExpressionsContext partitionExpressions() {
			return getRuleContext(PartitionExpressionsContext.class,0);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public TerminalNode FILETABLE_DIRECTORY() { return getToken(SQLServerStatementParser.FILETABLE_DIRECTORY, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public TerminalNode FILETABLE_COLLATE_FILENAME() { return getToken(SQLServerStatementParser.FILETABLE_COLLATE_FILENAME, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode DATABASE_DEAULT() { return getToken(SQLServerStatementParser.DATABASE_DEAULT, 0); }
		public TerminalNode FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME() { return getToken(SQLServerStatementParser.FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME, 0); }
		public TerminalNode FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME() { return getToken(SQLServerStatementParser.FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME, 0); }
		public TerminalNode FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME() { return getToken(SQLServerStatementParser.FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME, 0); }
		public TerminalNode SYSTEM_VERSIONING() { return getToken(SQLServerStatementParser.SYSTEM_VERSIONING, 0); }
		public OnHistoryTableClauseContext onHistoryTableClause() {
			return getRuleContext(OnHistoryTableClauseContext.class,0);
		}
		public TerminalNode REMOTE_DATA_ARCHIVE() { return getToken(SQLServerStatementParser.REMOTE_DATA_ARCHIVE, 0); }
		public TerminalNode OFF() { return getToken(SQLServerStatementParser.OFF, 0); }
		public MigrationState_Context migrationState_() {
			return getRuleContext(MigrationState_Context.class,0);
		}
		public TableStretchOptionsContext tableStretchOptions() {
			return getRuleContext(TableStretchOptionsContext.class,0);
		}
		public TableOperationOptionContext tableOperationOption() {
			return getRuleContext(TableOperationOptionContext.class,0);
		}
		public DistributionOptionContext distributionOption() {
			return getRuleContext(DistributionOptionContext.class,0);
		}
		public DataWareHouseTableOptionContext dataWareHouseTableOption() {
			return getRuleContext(DataWareHouseTableOptionContext.class,0);
		}
		public DataDelectionOptionContext dataDelectionOption() {
			return getRuleContext(DataDelectionOptionContext.class,0);
		}
		public DataWareHousePartitionOptionContext dataWareHousePartitionOption() {
			return getRuleContext(DataWareHousePartitionOptionContext.class,0);
		}
		public TableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterTableOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitTableOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitTableOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableOptionContext tableOption() throws RecognitionException {
		TableOptionContext _localctx = new TableOptionContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_tableOption);
		int _la;
		try {
			setState(3346);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,293,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3296);
				match(DATA_COMPRESSION);
				setState(3297);
				match(EQ_);
				setState(3298);
				_la = _input.LA(1);
				if ( !(((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & 306244774661193729L) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3305);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(3299);
					match(ON);
					setState(3300);
					match(PARTITIONS);
					setState(3301);
					match(LP_);
					setState(3302);
					partitionExpressions();
					setState(3303);
					match(RP_);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3307);
				match(FILETABLE_DIRECTORY);
				setState(3308);
				match(EQ_);
				setState(3309);
				ignoredIdentifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3310);
				match(FILETABLE_COLLATE_FILENAME);
				setState(3311);
				match(EQ_);
				setState(3314);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case IDENTIFIER_:
				case STRING_:
					{
					setState(3312);
					collationName();
					}
					break;
				case DATABASE_DEAULT:
					{
					setState(3313);
					match(DATABASE_DEAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3316);
				match(FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME);
				setState(3317);
				match(EQ_);
				setState(3318);
				ignoredIdentifier();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3319);
				match(FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME);
				setState(3320);
				match(EQ_);
				setState(3321);
				ignoredIdentifier();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3322);
				match(FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME);
				setState(3323);
				match(EQ_);
				setState(3324);
				ignoredIdentifier();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3325);
				match(SYSTEM_VERSIONING);
				setState(3326);
				match(EQ_);
				setState(3327);
				match(ON);
				setState(3329);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(3328);
					onHistoryTableClause();
					}
				}

				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3331);
				match(REMOTE_DATA_ARCHIVE);
				setState(3332);
				match(EQ_);
				setState(3339);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ON:
					{
					setState(3333);
					match(ON);
					setState(3335);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LP_) {
						{
						setState(3334);
						tableStretchOptions();
						}
					}

					}
					break;
				case OFF:
					{
					setState(3337);
					match(OFF);
					setState(3338);
					migrationState_();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3341);
				tableOperationOption();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3342);
				distributionOption();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3343);
				dataWareHouseTableOption();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3344);
				dataDelectionOption();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3345);
				dataWareHousePartitionOption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DataDelectionOptionContext extends ParserRuleContext {
		public TerminalNode DATA_DELETION() { return getToken(SQLServerStatementParser.DATA_DELETION, 0); }
		public List<TerminalNode> EQ_() { return getTokens(SQLServerStatementParser.EQ_); }
		public TerminalNode EQ_(int i) {
			return getToken(SQLServerStatementParser.EQ_, i);
		}
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public TerminalNode FILTER_COLUMN() { return getToken(SQLServerStatementParser.FILTER_COLUMN, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(SQLServerStatementParser.COMMA_, 0); }
		public TerminalNode RETENTION_PERIOD() { return getToken(SQLServerStatementParser.RETENTION_PERIOD, 0); }
		public HistoryRetentionPeriodContext historyRetentionPeriod() {
			return getRuleContext(HistoryRetentionPeriodContext.class,0);
		}
		public DataDelectionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataDelectionOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDataDelectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDataDelectionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDataDelectionOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataDelectionOptionContext dataDelectionOption() throws RecognitionException {
		DataDelectionOptionContext _localctx = new DataDelectionOptionContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_dataDelectionOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3348);
			match(DATA_DELETION);
			setState(3349);
			match(EQ_);
			setState(3350);
			match(ON);
			{
			setState(3351);
			match(LP_);
			setState(3352);
			match(FILTER_COLUMN);
			setState(3353);
			match(EQ_);
			setState(3354);
			columnName();
			setState(3355);
			match(COMMA_);
			setState(3356);
			match(RETENTION_PERIOD);
			setState(3357);
			match(EQ_);
			setState(3358);
			historyRetentionPeriod();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableStretchOptionsContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<TableStretchOptionContext> tableStretchOption() {
			return getRuleContexts(TableStretchOptionContext.class);
		}
		public TableStretchOptionContext tableStretchOption(int i) {
			return getRuleContext(TableStretchOptionContext.class,i);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public TableStretchOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableStretchOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterTableStretchOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitTableStretchOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitTableStretchOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableStretchOptionsContext tableStretchOptions() throws RecognitionException {
		TableStretchOptionsContext _localctx = new TableStretchOptionsContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_tableStretchOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3360);
			match(LP_);
			setState(3361);
			tableStretchOption();
			setState(3366);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3362);
				match(COMMA_);
				setState(3363);
				tableStretchOption();
				}
				}
				setState(3368);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3369);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableStretchOptionContext extends ParserRuleContext {
		public TerminalNode MIGRATION_STATE() { return getToken(SQLServerStatementParser.MIGRATION_STATE, 0); }
		public List<TerminalNode> EQ_() { return getTokens(SQLServerStatementParser.EQ_); }
		public TerminalNode EQ_(int i) {
			return getToken(SQLServerStatementParser.EQ_, i);
		}
		public TerminalNode OUTBOUND() { return getToken(SQLServerStatementParser.OUTBOUND, 0); }
		public TerminalNode INBOUND() { return getToken(SQLServerStatementParser.INBOUND, 0); }
		public TerminalNode PAUSED() { return getToken(SQLServerStatementParser.PAUSED, 0); }
		public TerminalNode FILTER_PREDICATE() { return getToken(SQLServerStatementParser.FILTER_PREDICATE, 0); }
		public TerminalNode COMMA_() { return getToken(SQLServerStatementParser.COMMA_, 0); }
		public TerminalNode NULL() { return getToken(SQLServerStatementParser.NULL, 0); }
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public TableStretchOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableStretchOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterTableStretchOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitTableStretchOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitTableStretchOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableStretchOptionContext tableStretchOption() throws RecognitionException {
		TableStretchOptionContext _localctx = new TableStretchOptionContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_tableStretchOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3378);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILTER_PREDICATE) {
				{
				setState(3371);
				match(FILTER_PREDICATE);
				setState(3372);
				match(EQ_);
				setState(3375);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NULL:
					{
					setState(3373);
					match(NULL);
					}
					break;
				case TRUNCATE:
				case SCHEMA:
				case TABLE:
				case COLUMNS:
				case PRECISION:
				case FUNCTION:
				case TRIGGER:
				case CAST:
				case TRIM:
				case SUBSTRING:
				case RIGHT:
				case OFF:
				case IF:
				case GROUP:
				case LIMIT:
				case OFFSET:
				case SAVEPOINT:
				case BOOLEAN:
				case CHAR:
				case ARRAY:
				case INTERVAL:
				case DATE:
				case TIMESTAMP:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case YEAR:
				case QUARTER:
				case MONTH:
				case WEEK:
				case DAY:
				case HOUR:
				case MINUTE:
				case SECOND:
				case MICROSECOND:
				case MAX:
				case MIN:
				case SUM:
				case COUNT:
				case AVG:
				case ENABLE:
				case DISABLE:
				case INSTANCE:
				case DO:
				case DEFINER:
				case SQL:
				case CASCADED:
				case LOCAL:
				case NEXT:
				case NAME:
				case INTEGER:
				case TYPE:
				case TEXT:
				case VIEWS:
				case READ_ONLY:
				case DATABASE:
				case RETURNS:
				case DATEPART:
				case PASSWORD:
				case JSON_OBJECT:
				case JSON_ARRAY:
				case FIRST_VALUE:
				case LAST_VALUE:
				case APPROX_PERCENTILE_CONT:
				case APPROX_PERCENTILE_DISC:
				case OPENDATASOURCE:
				case TARGET:
				case BINARY:
				case HIDDEN_:
				case MOD:
				case PARTITION:
				case PARTITIONS:
				case TOP:
				case ROW:
				case ROWS:
				case XOR:
				case ALWAYS:
				case USER:
				case ROLE:
				case START:
				case ACTION:
				case ALGORITHM:
				case AUTO:
				case BLOCKERS:
				case CLUSTERED:
				case NONCLUSTERED:
				case COLUMNSTORE:
				case CONTENT:
				case CONVERT:
				case YEARS:
				case MONTHS:
				case WEEKS:
				case DAYS:
				case MINUTES:
				case DENY:
				case DETERMINISTIC:
				case DISTRIBUTION:
				case DOCUMENT:
				case DURABILITY:
				case ENCRYPTED:
				case FILESTREAM:
				case FILETABLE:
				case FILLFACTOR:
				case FOLLOWING:
				case HASH:
				case HEAP:
				case INBOUND:
				case OUTBOUND:
				case UNBOUNDED:
				case INFINITE:
				case LOGIN:
				case MASKED:
				case MAXDOP:
				case MOVE:
				case NOCHECK:
				case OBJECT:
				case ONLINE:
				case OVER:
				case PAGE:
				case PAUSED:
				case PERIOD:
				case PERSISTED:
				case PRECEDING:
				case RANDOMIZED:
				case RANGE:
				case REBUILD:
				case REPLICATE:
				case REPLICATION:
				case RESUMABLE:
				case ROWGUIDCOL:
				case SAVE:
				case SELF:
				case SPARSE:
				case SWITCH:
				case TRAN:
				case TRANCOUNT:
				case CONTROL:
				case CONCAT:
				case TAKE:
				case OWNERSHIP:
				case DEFINITION:
				case APPLICATION:
				case ASSEMBLY:
				case SYMMETRIC:
				case ASYMMETRIC:
				case SERVER:
				case RECEIVE:
				case CHANGE:
				case TRACE:
				case TRACKING:
				case RESOURCES:
				case SETTINGS:
				case STATE:
				case AVAILABILITY:
				case CREDENTIAL:
				case ENDPOINT:
				case EVENT:
				case NOTIFICATION:
				case LINKED:
				case AUDIT:
				case DDL:
				case XML:
				case IMPERSONATE:
				case SECURABLES:
				case AUTHENTICATE:
				case EXTERNAL:
				case ACCESS:
				case ADMINISTER:
				case BULK:
				case OPERATIONS:
				case UNSAFE:
				case SHUTDOWN:
				case SCOPED:
				case CONFIGURATION:
				case DATASPACE:
				case SERVICE:
				case CERTIFICATE:
				case CONTRACT:
				case ENCRYPTION:
				case MASTER:
				case DATA:
				case SOURCE:
				case FILE:
				case FORMAT:
				case LIBRARY:
				case FULLTEXT:
				case MASK:
				case UNMASK:
				case MESSAGE:
				case REMOTE:
				case BINDING:
				case ROUTE:
				case SECURITY:
				case POLICY:
				case AGGREGATE:
				case QUEUE:
				case RULE:
				case SYNONYM:
				case COLLECTION:
				case SCRIPT:
				case KILL:
				case BACKUP:
				case LOG:
				case SHOWPLAN:
				case SUBSCRIBE:
				case QUERY:
				case NOTIFICATIONS:
				case CHECKPOINT:
				case SEQUENCE:
				case ABORT_AFTER_WAIT:
				case ALLOW_PAGE_LOCKS:
				case ALLOW_ROW_LOCKS:
				case ALL_SPARSE_COLUMNS:
				case BUCKET_COUNT:
				case COLUMNSTORE_ARCHIVE:
				case COLUMN_ENCRYPTION_KEY:
				case COLUMN_SET:
				case COMPRESSION_DELAY:
				case DATABASE_DEAULT:
				case DATA_COMPRESSION:
				case DATA_CONSISTENCY_CHECK:
				case ENCRYPTION_TYPE:
				case SYSTEM_TIME:
				case SYSTEM_VERSIONING:
				case TEXTIMAGE_ON:
				case WAIT_AT_LOW_PRIORITY:
				case STATISTICS_INCREMENTAL:
				case STATISTICS_NORECOMPUTE:
				case ROUND_ROBIN:
				case SCHEMA_AND_DATA:
				case SCHEMA_ONLY:
				case SORT_IN_TEMPDB:
				case IGNORE_DUP_KEY:
				case IMPLICIT_TRANSACTIONS:
				case MAX_DURATION:
				case MEMORY_OPTIMIZED:
				case MIGRATION_STATE:
				case PAD_INDEX:
				case REMOTE_DATA_ARCHIVE:
				case FILESTREAM_ON:
				case FILETABLE_COLLATE_FILENAME:
				case FILETABLE_DIRECTORY:
				case FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME:
				case FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME:
				case FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME:
				case FILTER_PREDICATE:
				case HISTORY_RETENTION_PERIOD:
				case HISTORY_TABLE:
				case LOCK_ESCALATION:
				case DROP_EXISTING:
				case ROW_NUMBER:
				case FIRST:
				case DATETIME2:
				case OUTPUT:
				case INSERTED:
				case DELETED:
				case FILENAME:
				case SIZE:
				case MAXSIZE:
				case FILEGROWTH:
				case UNLIMITED:
				case KB:
				case MB:
				case GB:
				case TB:
				case CONTAINS:
				case MEMORY_OPTIMIZED_DATA:
				case FILEGROUP:
				case NON_TRANSACTED_ACCESS:
				case DB_CHAINING:
				case TRUSTWORTHY:
				case FORWARD_ONLY:
				case KEYSET:
				case FAST_FORWARD:
				case SCROLL_LOCKS:
				case OPTIMISTIC:
				case TYPE_WARNING:
				case SCHEMABINDING:
				case CALLER:
				case INPUT:
				case OWNER:
				case SNAPSHOT:
				case REPEATABLE:
				case SERIALIZABLE:
				case NATIVE_COMPILATION:
				case VIEW_METADATA:
				case INSTEAD:
				case APPEND:
				case INCREMENT:
				case CACHE:
				case MINVALUE:
				case MAXVALUE:
				case RESTART:
				case LOB_COMPACTION:
				case COMPRESS_ALL_ROW_GROUPS:
				case REORGANIZE:
				case RESUME:
				case PAUSE:
				case ABORT:
				case ACCELERATED_DATABASE_RECOVERY:
				case PERSISTENT_VERSION_STORE_FILEGROUP:
				case IMMEDIATE:
				case NO_WAIT:
				case TARGET_RECOVERY_TIME:
				case SECONDS:
				case HONOR_BROKER_PRIORITY:
				case ERROR_BROKER_CONVERSATIONS:
				case NEW_BROKER:
				case DISABLE_BROKER:
				case ENABLE_BROKER:
				case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
				case READ_COMMITTED_SNAPSHOT:
				case ALLOW_SNAPSHOT_ISOLATION:
				case RECURSIVE_TRIGGERS:
				case QUOTED_IDENTIFIER:
				case NUMERIC_ROUNDABORT:
				case CONCAT_NULL_YIELDS_NULL:
				case COMPATIBILITY_LEVEL:
				case ARITHABORT:
				case ANSI_WARNINGS:
				case ANSI_PADDING:
				case ANSI_NULLS:
				case ANSI_NULL_DEFAULT:
				case PAGE_VERIFY:
				case CHECKSUM:
				case TORN_PAGE_DETECTION:
				case BULK_LOGGED:
				case RECOVERY:
				case TOTAL_EXECUTION_CPU_TIME_MS:
				case TOTAL_COMPILE_CPU_TIME_MS:
				case STALE_CAPTURE_POLICY_THRESHOLD:
				case EXECUTION_COUNT:
				case QUERY_CAPTURE_POLICY:
				case WAIT_STATS_CAPTURE_MODE:
				case MAX_PLANS_PER_QUERY:
				case QUERY_CAPTURE_MODE:
				case SIZE_BASED_CLEANUP_MODE:
				case INTERVAL_LENGTH_MINUTES:
				case MAX_STORAGE_SIZE_MB:
				case DATA_FLUSH_INTERVAL_SECONDS:
				case CLEANUP_POLICY:
				case CUSTOM:
				case STALE_QUERY_THRESHOLD_DAYS:
				case OPERATION_MODE:
				case QUERY_STORE:
				case CURSOR_DEFAULT:
				case GLOBAL:
				case CURSOR_CLOSE_ON_COMMIT:
				case HOURS:
				case CHANGE_RETENTION:
				case AUTO_CLEANUP:
				case CHANGE_TRACKING:
				case AUTOMATIC_TUNING:
				case FORCE_LAST_GOOD_PLAN:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_CREATE_STATISTICS:
				case INCREMENTAL:
				case AUTO_CLOSE:
				case DATA_RETENTION:
				case TEMPORAL_HISTORY_RETENTION:
				case EDITION:
				case MIXED_PAGE_ALLOCATION:
				case DISABLED:
				case ALLOWED:
				case HADR:
				case MULTI_USER:
				case RESTRICTED_USER:
				case SINGLE_USER:
				case OFFLINE:
				case EMERGENCY:
				case SUSPEND:
				case DATE_CORRELATION_OPTIMIZATION:
				case ELASTIC_POOL:
				case SERVICE_OBJECTIVE:
				case DATABASE_NAME:
				case ALLOW_CONNECTIONS:
				case GEO:
				case NAMED:
				case DATEFIRST:
				case BACKUP_STORAGE_REDUNDANCY:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case SECONDARY:
				case FAILOVER:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case INLINE:
				case NESTED_TRIGGERS:
				case TRANSFORM_NOISE_WORDS:
				case TWO_DIGIT_YEAR_CUTOFF:
				case PERSISTENT_LOG_BUFFER:
				case DIRECTORY_NAME:
				case DATEFORMAT:
				case DELAYED_DURABILITY:
				case AUTHORIZATION:
				case TRANSFER:
				case PROVIDER:
				case SID:
				case SEARCH:
				case MEMBER:
				case JSON:
				case OPENJSON:
				case OPENROWSET:
				case TRY_CAST:
				case TRY_CONVERT:
				case OPENQUERY:
				case STRING_AGG:
				case IDENTIFIER_:
				case DELIMITED_IDENTIFIER_:
					{
					setState(3374);
					functionCall();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3377);
				match(COMMA_);
				}
			}

			setState(3380);
			match(MIGRATION_STATE);
			setState(3381);
			match(EQ_);
			setState(3382);
			_la = _input.LA(1);
			if ( !(((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & 16387L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MigrationState_Context extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public TerminalNode MIGRATION_STATE() { return getToken(SQLServerStatementParser.MIGRATION_STATE, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode PAUSED() { return getToken(SQLServerStatementParser.PAUSED, 0); }
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public MigrationState_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_migrationState_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterMigrationState_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitMigrationState_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitMigrationState_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MigrationState_Context migrationState_() throws RecognitionException {
		MigrationState_Context _localctx = new MigrationState_Context(_ctx, getState());
		enterRule(_localctx, 484, RULE_migrationState_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3384);
			match(LP_);
			setState(3385);
			match(MIGRATION_STATE);
			setState(3386);
			match(EQ_);
			setState(3387);
			match(PAUSED);
			setState(3388);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableOperationOptionContext extends ParserRuleContext {
		public TerminalNode MEMORY_OPTIMIZED() { return getToken(SQLServerStatementParser.MEMORY_OPTIMIZED, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode DURABILITY() { return getToken(SQLServerStatementParser.DURABILITY, 0); }
		public TerminalNode SCHEMA_ONLY() { return getToken(SQLServerStatementParser.SCHEMA_ONLY, 0); }
		public TerminalNode SCHEMA_AND_DATA() { return getToken(SQLServerStatementParser.SCHEMA_AND_DATA, 0); }
		public TerminalNode SYSTEM_VERSIONING() { return getToken(SQLServerStatementParser.SYSTEM_VERSIONING, 0); }
		public OnHistoryTableClauseContext onHistoryTableClause() {
			return getRuleContext(OnHistoryTableClauseContext.class,0);
		}
		public TableOperationOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableOperationOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterTableOperationOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitTableOperationOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitTableOperationOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableOperationOptionContext tableOperationOption() throws RecognitionException {
		TableOperationOptionContext _localctx = new TableOperationOptionContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_tableOperationOption);
		int _la;
		try {
			setState(3402);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MEMORY_OPTIMIZED:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(3390);
				match(MEMORY_OPTIMIZED);
				setState(3391);
				match(EQ_);
				setState(3392);
				match(ON);
				}
				}
				break;
			case DURABILITY:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(3393);
				match(DURABILITY);
				setState(3394);
				match(EQ_);
				setState(3395);
				_la = _input.LA(1);
				if ( !(_la==SCHEMA_AND_DATA || _la==SCHEMA_ONLY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case SYSTEM_VERSIONING:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(3396);
				match(SYSTEM_VERSIONING);
				setState(3397);
				match(EQ_);
				setState(3398);
				match(ON);
				setState(3400);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(3399);
					onHistoryTableClause();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DistributionOptionContext extends ParserRuleContext {
		public TerminalNode DISTRIBUTION() { return getToken(SQLServerStatementParser.DISTRIBUTION, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode HASH() { return getToken(SQLServerStatementParser.HASH, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public TerminalNode ROUND_ROBIN() { return getToken(SQLServerStatementParser.ROUND_ROBIN, 0); }
		public TerminalNode REPLICATE() { return getToken(SQLServerStatementParser.REPLICATE, 0); }
		public DistributionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distributionOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDistributionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDistributionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDistributionOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DistributionOptionContext distributionOption() throws RecognitionException {
		DistributionOptionContext _localctx = new DistributionOptionContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_distributionOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3404);
			match(DISTRIBUTION);
			setState(3405);
			match(EQ_);
			setState(3413);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HASH:
				{
				setState(3406);
				match(HASH);
				setState(3407);
				match(LP_);
				setState(3408);
				columnName();
				setState(3409);
				match(RP_);
				}
				break;
			case ROUND_ROBIN:
				{
				setState(3411);
				match(ROUND_ROBIN);
				}
				break;
			case REPLICATE:
				{
				setState(3412);
				match(REPLICATE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DataWareHouseTableOptionContext extends ParserRuleContext {
		public TerminalNode CLUSTERED() { return getToken(SQLServerStatementParser.CLUSTERED, 0); }
		public TerminalNode COLUMNSTORE() { return getToken(SQLServerStatementParser.COLUMNSTORE, 0); }
		public TerminalNode INDEX() { return getToken(SQLServerStatementParser.INDEX, 0); }
		public TerminalNode ORDER() { return getToken(SQLServerStatementParser.ORDER, 0); }
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public TerminalNode HEAP() { return getToken(SQLServerStatementParser.HEAP, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public List<TerminalNode> ASC() { return getTokens(SQLServerStatementParser.ASC); }
		public TerminalNode ASC(int i) {
			return getToken(SQLServerStatementParser.ASC, i);
		}
		public List<TerminalNode> DESC() { return getTokens(SQLServerStatementParser.DESC); }
		public TerminalNode DESC(int i) {
			return getToken(SQLServerStatementParser.DESC, i);
		}
		public DataWareHouseTableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataWareHouseTableOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDataWareHouseTableOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDataWareHouseTableOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDataWareHouseTableOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataWareHouseTableOptionContext dataWareHouseTableOption() throws RecognitionException {
		DataWareHouseTableOptionContext _localctx = new DataWareHouseTableOptionContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_dataWareHouseTableOption);
		int _la;
		try {
			setState(3443);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,303,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3415);
				match(CLUSTERED);
				setState(3416);
				match(COLUMNSTORE);
				setState(3417);
				match(INDEX);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3418);
				match(CLUSTERED);
				setState(3419);
				match(COLUMNSTORE);
				setState(3420);
				match(INDEX);
				setState(3421);
				match(ORDER);
				setState(3422);
				columnNames();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3423);
				match(HEAP);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3424);
				match(CLUSTERED);
				setState(3425);
				match(INDEX);
				setState(3426);
				match(LP_);
				{
				setState(3427);
				columnName();
				setState(3429);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(3428);
					_la = _input.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				setState(3438);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(3431);
					match(COMMA_);
					{
					setState(3432);
					columnName();
					setState(3434);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ASC || _la==DESC) {
						{
						setState(3433);
						_la = _input.LA(1);
						if ( !(_la==ASC || _la==DESC) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
					}
					}
					setState(3440);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3441);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DataWareHousePartitionOptionContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(SQLServerStatementParser.PARTITION, 0); }
		public List<TerminalNode> LP_() { return getTokens(SQLServerStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(SQLServerStatementParser.LP_, i);
		}
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode RANGE() { return getToken(SQLServerStatementParser.RANGE, 0); }
		public TerminalNode FOR() { return getToken(SQLServerStatementParser.FOR, 0); }
		public TerminalNode VALUES() { return getToken(SQLServerStatementParser.VALUES, 0); }
		public List<SimpleExprContext> simpleExpr() {
			return getRuleContexts(SimpleExprContext.class);
		}
		public SimpleExprContext simpleExpr(int i) {
			return getRuleContext(SimpleExprContext.class,i);
		}
		public List<TerminalNode> RP_() { return getTokens(SQLServerStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(SQLServerStatementParser.RP_, i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public TerminalNode LEFT() { return getToken(SQLServerStatementParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(SQLServerStatementParser.RIGHT, 0); }
		public DataWareHousePartitionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataWareHousePartitionOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDataWareHousePartitionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDataWareHousePartitionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDataWareHousePartitionOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataWareHousePartitionOptionContext dataWareHousePartitionOption() throws RecognitionException {
		DataWareHousePartitionOptionContext _localctx = new DataWareHousePartitionOptionContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_dataWareHousePartitionOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3445);
			match(PARTITION);
			setState(3446);
			match(LP_);
			setState(3447);
			columnName();
			setState(3448);
			match(RANGE);
			setState(3450);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT || _la==RIGHT) {
				{
				setState(3449);
				_la = _input.LA(1);
				if ( !(_la==LEFT || _la==RIGHT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3452);
			match(FOR);
			setState(3453);
			match(VALUES);
			setState(3454);
			match(LP_);
			setState(3455);
			simpleExpr(0);
			setState(3460);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3456);
				match(COMMA_);
				setState(3457);
				simpleExpr(0);
				}
				}
				setState(3462);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3463);
			match(RP_);
			setState(3464);
			match(RP_);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateIndexSpecificationContext extends ParserRuleContext {
		public TerminalNode UNIQUE() { return getToken(SQLServerStatementParser.UNIQUE, 0); }
		public ClusterOptionContext clusterOption() {
			return getRuleContext(ClusterOptionContext.class,0);
		}
		public CreateIndexSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndexSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateIndexSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateIndexSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateIndexSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexSpecificationContext createIndexSpecification() throws RecognitionException {
		CreateIndexSpecificationContext _localctx = new CreateIndexSpecificationContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_createIndexSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3467);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNIQUE) {
				{
				setState(3466);
				match(UNIQUE);
				}
			}

			setState(3470);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CLUSTERED || _la==NONCLUSTERED) {
				{
				setState(3469);
				clusterOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterDefinitionClauseContext extends ParserRuleContext {
		public AddColumnSpecificationContext addColumnSpecification() {
			return getRuleContext(AddColumnSpecificationContext.class,0);
		}
		public ModifyColumnSpecificationContext modifyColumnSpecification() {
			return getRuleContext(ModifyColumnSpecificationContext.class,0);
		}
		public AlterDropContext alterDrop() {
			return getRuleContext(AlterDropContext.class,0);
		}
		public AlterCheckConstraintContext alterCheckConstraint() {
			return getRuleContext(AlterCheckConstraintContext.class,0);
		}
		public AlterTableTriggerContext alterTableTrigger() {
			return getRuleContext(AlterTableTriggerContext.class,0);
		}
		public AlterSwitchContext alterSwitch() {
			return getRuleContext(AlterSwitchContext.class,0);
		}
		public AlterSetContext alterSet() {
			return getRuleContext(AlterSetContext.class,0);
		}
		public AlterTableOptionContext alterTableOption() {
			return getRuleContext(AlterTableOptionContext.class,0);
		}
		public TerminalNode REBUILD() { return getToken(SQLServerStatementParser.REBUILD, 0); }
		public AlterDefinitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDefinitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAlterDefinitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAlterDefinitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAlterDefinitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDefinitionClauseContext alterDefinitionClause() throws RecognitionException {
		AlterDefinitionClauseContext _localctx = new AlterDefinitionClauseContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_alterDefinitionClause);
		try {
			setState(3481);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3472);
				addColumnSpecification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3473);
				modifyColumnSpecification();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3474);
				alterDrop();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3475);
				alterCheckConstraint();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3476);
				alterTableTrigger();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3477);
				alterSwitch();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3478);
				alterSet();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3479);
				alterTableOption();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3480);
				match(REBUILD);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AddColumnSpecificationContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(SQLServerStatementParser.ADD, 0); }
		public AlterColumnAddOptionsContext alterColumnAddOptions() {
			return getRuleContext(AlterColumnAddOptionsContext.class,0);
		}
		public GeneratedColumnNamesClauseContext generatedColumnNamesClause() {
			return getRuleContext(GeneratedColumnNamesClauseContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(SQLServerStatementParser.CHECK, 0); }
		public TerminalNode NOCHECK() { return getToken(SQLServerStatementParser.NOCHECK, 0); }
		public AddColumnSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_addColumnSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAddColumnSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAddColumnSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAddColumnSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AddColumnSpecificationContext addColumnSpecification() throws RecognitionException {
		AddColumnSpecificationContext _localctx = new AddColumnSpecificationContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_addColumnSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3485);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3483);
				match(WITH);
				setState(3484);
				_la = _input.LA(1);
				if ( !(_la==CHECK || _la==NOCHECK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3487);
			match(ADD);
			setState(3490);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
			case 1:
				{
				setState(3488);
				alterColumnAddOptions();
				}
				break;
			case 2:
				{
				setState(3489);
				generatedColumnNamesClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ModifyColumnSpecificationContext extends ParserRuleContext {
		public AlterColumnOperationContext alterColumnOperation() {
			return getRuleContext(AlterColumnOperationContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(SQLServerStatementParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode NULL() { return getToken(SQLServerStatementParser.NULL, 0); }
		public TerminalNode NOT() { return getToken(SQLServerStatementParser.NOT, 0); }
		public TerminalNode SPARSE() { return getToken(SQLServerStatementParser.SPARSE, 0); }
		public ModifyColumnSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modifyColumnSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterModifyColumnSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitModifyColumnSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitModifyColumnSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ModifyColumnSpecificationContext modifyColumnSpecification() throws RecognitionException {
		ModifyColumnSpecificationContext _localctx = new ModifyColumnSpecificationContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_modifyColumnSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3492);
			alterColumnOperation();
			setState(3493);
			dataType();
			setState(3496);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(3494);
				match(COLLATE);
				setState(3495);
				collationName();
				}
			}

			setState(3501);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NULL:
				{
				setState(3498);
				match(NULL);
				}
				break;
			case NOT:
				{
				setState(3499);
				match(NOT);
				setState(3500);
				match(NULL);
				}
				break;
			case EOF:
			case COMMA_:
			case SEMI_:
			case SELECT:
			case INSERT:
			case UPDATE:
			case DELETE:
			case CREATE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SET:
			case WITH:
			case DECLARE:
			case RETURN:
			case END:
			case SPARSE:
				break;
			default:
				break;
			}
			setState(3504);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SPARSE) {
				{
				setState(3503);
				match(SPARSE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterColumnOperationContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode COLUMN() { return getToken(SQLServerStatementParser.COLUMN, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public AlterColumnOperationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterColumnOperation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAlterColumnOperation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAlterColumnOperation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAlterColumnOperation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterColumnOperationContext alterColumnOperation() throws RecognitionException {
		AlterColumnOperationContext _localctx = new AlterColumnOperationContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_alterColumnOperation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3506);
			match(ALTER);
			setState(3507);
			match(COLUMN);
			setState(3508);
			columnName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterColumnAddOptionsContext extends ParserRuleContext {
		public List<AlterColumnAddOptionContext> alterColumnAddOption() {
			return getRuleContexts(AlterColumnAddOptionContext.class);
		}
		public AlterColumnAddOptionContext alterColumnAddOption(int i) {
			return getRuleContext(AlterColumnAddOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public AlterColumnAddOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterColumnAddOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAlterColumnAddOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAlterColumnAddOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAlterColumnAddOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterColumnAddOptionsContext alterColumnAddOptions() throws RecognitionException {
		AlterColumnAddOptionsContext _localctx = new AlterColumnAddOptionsContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_alterColumnAddOptions);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3510);
			alterColumnAddOption();
			setState(3515);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,314,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3511);
					match(COMMA_);
					setState(3512);
					alterColumnAddOption();
					}
					} 
				}
				setState(3517);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,314,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterColumnAddOptionContext extends ParserRuleContext {
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public ComputedColumnDefinitionContext computedColumnDefinition() {
			return getRuleContext(ComputedColumnDefinitionContext.class,0);
		}
		public ColumnSetDefinitionContext columnSetDefinition() {
			return getRuleContext(ColumnSetDefinitionContext.class,0);
		}
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public AlterTableTableIndexContext alterTableTableIndex() {
			return getRuleContext(AlterTableTableIndexContext.class,0);
		}
		public ConstraintForColumnContext constraintForColumn() {
			return getRuleContext(ConstraintForColumnContext.class,0);
		}
		public AlterColumnAddOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterColumnAddOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAlterColumnAddOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAlterColumnAddOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAlterColumnAddOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterColumnAddOptionContext alterColumnAddOption() throws RecognitionException {
		AlterColumnAddOptionContext _localctx = new AlterColumnAddOptionContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_alterColumnAddOption);
		try {
			setState(3524);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,315,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3518);
				columnDefinition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3519);
				computedColumnDefinition();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3520);
				columnSetDefinition();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3521);
				tableConstraint();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3522);
				alterTableTableIndex();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3523);
				constraintForColumn();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstraintForColumnContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(SQLServerStatementParser.DEFAULT, 0); }
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public TerminalNode FOR() { return getToken(SQLServerStatementParser.FOR, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(SQLServerStatementParser.CONSTRAINT, 0); }
		public ConstraintNameContext constraintName() {
			return getRuleContext(ConstraintNameContext.class,0);
		}
		public ConstraintForColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintForColumn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterConstraintForColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitConstraintForColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitConstraintForColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintForColumnContext constraintForColumn() throws RecognitionException {
		ConstraintForColumnContext _localctx = new ConstraintForColumnContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_constraintForColumn);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3528);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(3526);
				match(CONSTRAINT);
				setState(3527);
				constraintName();
				}
			}

			setState(3530);
			match(DEFAULT);
			setState(3531);
			simpleExpr(0);
			setState(3532);
			match(FOR);
			setState(3533);
			columnName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GeneratedColumnNamesClauseContext extends ParserRuleContext {
		public GeneratedColumnNameClauseContext generatedColumnNameClause() {
			return getRuleContext(GeneratedColumnNameClauseContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(SQLServerStatementParser.COMMA_, 0); }
		public PeriodClauseContext periodClause() {
			return getRuleContext(PeriodClauseContext.class,0);
		}
		public GeneratedColumnNamesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generatedColumnNamesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterGeneratedColumnNamesClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitGeneratedColumnNamesClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitGeneratedColumnNamesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GeneratedColumnNamesClauseContext generatedColumnNamesClause() throws RecognitionException {
		GeneratedColumnNamesClauseContext _localctx = new GeneratedColumnNamesClauseContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_generatedColumnNamesClause);
		try {
			setState(3543);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,317,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3535);
				generatedColumnNameClause();
				setState(3536);
				match(COMMA_);
				setState(3537);
				periodClause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3539);
				periodClause();
				setState(3540);
				match(COMMA_);
				setState(3541);
				generatedColumnNameClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GeneratedColumnNameClauseContext extends ParserRuleContext {
		public List<GeneratedColumnNameContext> generatedColumnName() {
			return getRuleContexts(GeneratedColumnNameContext.class);
		}
		public GeneratedColumnNameContext generatedColumnName(int i) {
			return getRuleContext(GeneratedColumnNameContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(SQLServerStatementParser.DEFAULT, 0); }
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(SQLServerStatementParser.COMMA_, 0); }
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public TerminalNode VALUES() { return getToken(SQLServerStatementParser.VALUES, 0); }
		public GeneratedColumnNameClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generatedColumnNameClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterGeneratedColumnNameClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitGeneratedColumnNameClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitGeneratedColumnNameClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GeneratedColumnNameClauseContext generatedColumnNameClause() throws RecognitionException {
		GeneratedColumnNameClauseContext _localctx = new GeneratedColumnNameClauseContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_generatedColumnNameClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3545);
			generatedColumnName();
			setState(3546);
			match(DEFAULT);
			setState(3547);
			simpleExpr(0);
			setState(3550);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3548);
				match(WITH);
				setState(3549);
				match(VALUES);
				}
			}

			setState(3552);
			match(COMMA_);
			setState(3553);
			generatedColumnName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GeneratedColumnNameContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public DataTypeNameContext dataTypeName() {
			return getRuleContext(DataTypeNameContext.class,0);
		}
		public TerminalNode GENERATED() { return getToken(SQLServerStatementParser.GENERATED, 0); }
		public TerminalNode ALWAYS() { return getToken(SQLServerStatementParser.ALWAYS, 0); }
		public TerminalNode AS() { return getToken(SQLServerStatementParser.AS, 0); }
		public TerminalNode ROW() { return getToken(SQLServerStatementParser.ROW, 0); }
		public TerminalNode HIDDEN_() { return getToken(SQLServerStatementParser.HIDDEN_, 0); }
		public TerminalNode NOT() { return getToken(SQLServerStatementParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(SQLServerStatementParser.NULL, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SQLServerStatementParser.CONSTRAINT, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public TerminalNode START() { return getToken(SQLServerStatementParser.START, 0); }
		public TerminalNode END() { return getToken(SQLServerStatementParser.END, 0); }
		public GeneratedColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generatedColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterGeneratedColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitGeneratedColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitGeneratedColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GeneratedColumnNameContext generatedColumnName() throws RecognitionException {
		GeneratedColumnNameContext _localctx = new GeneratedColumnNameContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_generatedColumnName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3555);
			columnName();
			setState(3556);
			dataTypeName();
			setState(3557);
			match(GENERATED);
			setState(3558);
			match(ALWAYS);
			setState(3559);
			match(AS);
			setState(3560);
			match(ROW);
			setState(3562);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,319,_ctx) ) {
			case 1:
				{
				setState(3561);
				_la = _input.LA(1);
				if ( !(_la==START || _la==END) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(3565);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HIDDEN_) {
				{
				setState(3564);
				match(HIDDEN_);
				}
			}

			setState(3569);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3567);
				match(NOT);
				setState(3568);
				match(NULL);
				}
			}

			setState(3573);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(3571);
				match(CONSTRAINT);
				setState(3572);
				ignoredIdentifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterDropContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SQLServerStatementParser.DROP, 0); }
		public AlterTableDropConstraintContext alterTableDropConstraint() {
			return getRuleContext(AlterTableDropConstraintContext.class,0);
		}
		public DropColumnSpecificationContext dropColumnSpecification() {
			return getRuleContext(DropColumnSpecificationContext.class,0);
		}
		public DropIndexSpecificationContext dropIndexSpecification() {
			return getRuleContext(DropIndexSpecificationContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(SQLServerStatementParser.PERIOD, 0); }
		public TerminalNode FOR() { return getToken(SQLServerStatementParser.FOR, 0); }
		public TerminalNode SYSTEM_TIME() { return getToken(SQLServerStatementParser.SYSTEM_TIME, 0); }
		public AlterDropContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDrop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAlterDrop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAlterDrop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAlterDrop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDropContext alterDrop() throws RecognitionException {
		AlterDropContext _localctx = new AlterDropContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_alterDrop);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3575);
			match(DROP);
			setState(3582);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
			case 1:
				{
				setState(3576);
				alterTableDropConstraint();
				}
				break;
			case 2:
				{
				setState(3577);
				dropColumnSpecification();
				}
				break;
			case 3:
				{
				setState(3578);
				dropIndexSpecification();
				}
				break;
			case 4:
				{
				setState(3579);
				match(PERIOD);
				setState(3580);
				match(FOR);
				setState(3581);
				match(SYSTEM_TIME);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterTableDropConstraintContext extends ParserRuleContext {
		public List<DropConstraintNameContext> dropConstraintName() {
			return getRuleContexts(DropConstraintNameContext.class);
		}
		public DropConstraintNameContext dropConstraintName(int i) {
			return getRuleContext(DropConstraintNameContext.class,i);
		}
		public TerminalNode CONSTRAINT() { return getToken(SQLServerStatementParser.CONSTRAINT, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public AlterTableDropConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableDropConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAlterTableDropConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAlterTableDropConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAlterTableDropConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableDropConstraintContext alterTableDropConstraint() throws RecognitionException {
		AlterTableDropConstraintContext _localctx = new AlterTableDropConstraintContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_alterTableDropConstraint);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3585);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(3584);
				match(CONSTRAINT);
				}
			}

			setState(3588);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3587);
				ifExists();
				}
			}

			setState(3590);
			dropConstraintName();
			setState(3595);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,326,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3591);
					match(COMMA_);
					setState(3592);
					dropConstraintName();
					}
					} 
				}
				setState(3597);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,326,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropConstraintNameContext extends ParserRuleContext {
		public ConstraintNameContext constraintName() {
			return getRuleContext(ConstraintNameContext.class,0);
		}
		public DropConstraintWithClauseContext dropConstraintWithClause() {
			return getRuleContext(DropConstraintWithClauseContext.class,0);
		}
		public DropConstraintNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropConstraintName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDropConstraintName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDropConstraintName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDropConstraintName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropConstraintNameContext dropConstraintName() throws RecognitionException {
		DropConstraintNameContext _localctx = new DropConstraintNameContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_dropConstraintName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3598);
			constraintName();
			setState(3600);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,327,_ctx) ) {
			case 1:
				{
				setState(3599);
				dropConstraintWithClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropConstraintWithClauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<DropConstraintOptionContext> dropConstraintOption() {
			return getRuleContexts(DropConstraintOptionContext.class);
		}
		public DropConstraintOptionContext dropConstraintOption(int i) {
			return getRuleContext(DropConstraintOptionContext.class,i);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public DropConstraintWithClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropConstraintWithClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDropConstraintWithClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDropConstraintWithClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDropConstraintWithClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropConstraintWithClauseContext dropConstraintWithClause() throws RecognitionException {
		DropConstraintWithClauseContext _localctx = new DropConstraintWithClauseContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_dropConstraintWithClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3602);
			match(WITH);
			setState(3603);
			match(LP_);
			setState(3604);
			dropConstraintOption();
			setState(3609);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3605);
				match(COMMA_);
				setState(3606);
				dropConstraintOption();
				}
				}
				setState(3611);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3612);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropConstraintOptionContext extends ParserRuleContext {
		public TerminalNode MAXDOP() { return getToken(SQLServerStatementParser.MAXDOP, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode NUMBER_() { return getToken(SQLServerStatementParser.NUMBER_, 0); }
		public TerminalNode ONLINE() { return getToken(SQLServerStatementParser.ONLINE, 0); }
		public OnOffOptionContext onOffOption() {
			return getRuleContext(OnOffOptionContext.class,0);
		}
		public TerminalNode MOVE() { return getToken(SQLServerStatementParser.MOVE, 0); }
		public TerminalNode TO() { return getToken(SQLServerStatementParser.TO, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public TerminalNode STRING_() { return getToken(SQLServerStatementParser.STRING_, 0); }
		public DropConstraintOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropConstraintOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDropConstraintOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDropConstraintOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDropConstraintOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropConstraintOptionContext dropConstraintOption() throws RecognitionException {
		DropConstraintOptionContext _localctx = new DropConstraintOptionContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_dropConstraintOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3631);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAXDOP:
				{
				setState(3614);
				match(MAXDOP);
				setState(3615);
				match(EQ_);
				setState(3616);
				match(NUMBER_);
				}
				break;
			case ONLINE:
				{
				setState(3617);
				match(ONLINE);
				setState(3618);
				match(EQ_);
				setState(3619);
				onOffOption();
				}
				break;
			case MOVE:
				{
				setState(3620);
				match(MOVE);
				setState(3621);
				match(TO);
				setState(3629);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,329,_ctx) ) {
				case 1:
					{
					setState(3622);
					schemaName();
					setState(3623);
					match(LP_);
					setState(3624);
					columnName();
					setState(3625);
					match(RP_);
					}
					break;
				case 2:
					{
					setState(3627);
					ignoredIdentifier();
					}
					break;
				case 3:
					{
					setState(3628);
					match(STRING_);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OnOffOptionContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode OFF() { return getToken(SQLServerStatementParser.OFF, 0); }
		public OnOffOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onOffOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterOnOffOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitOnOffOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitOnOffOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnOffOptionContext onOffOption() throws RecognitionException {
		OnOffOptionContext _localctx = new OnOffOptionContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_onOffOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3633);
			_la = _input.LA(1);
			if ( !(_la==ON || _la==OFF) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropColumnSpecificationContext extends ParserRuleContext {
		public TerminalNode COLUMN() { return getToken(SQLServerStatementParser.COLUMN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public DropColumnSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropColumnSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDropColumnSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDropColumnSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDropColumnSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropColumnSpecificationContext dropColumnSpecification() throws RecognitionException {
		DropColumnSpecificationContext _localctx = new DropColumnSpecificationContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_dropColumnSpecification);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3635);
			match(COLUMN);
			setState(3637);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3636);
				ifExists();
				}
			}

			setState(3639);
			columnName();
			setState(3644);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,332,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3640);
					match(COMMA_);
					setState(3641);
					columnName();
					}
					} 
				}
				setState(3646);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,332,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropIndexSpecificationContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(SQLServerStatementParser.INDEX, 0); }
		public List<IndexNameContext> indexName() {
			return getRuleContexts(IndexNameContext.class);
		}
		public IndexNameContext indexName(int i) {
			return getRuleContext(IndexNameContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public DropIndexSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropIndexSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDropIndexSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDropIndexSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDropIndexSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropIndexSpecificationContext dropIndexSpecification() throws RecognitionException {
		DropIndexSpecificationContext _localctx = new DropIndexSpecificationContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_dropIndexSpecification);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3647);
			match(INDEX);
			setState(3649);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3648);
				ifExists();
				}
			}

			setState(3651);
			indexName();
			setState(3656);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,334,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3652);
					match(COMMA_);
					setState(3653);
					indexName();
					}
					} 
				}
				setState(3658);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,334,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterCheckConstraintContext extends ParserRuleContext {
		public TerminalNode CONSTRAINT() { return getToken(SQLServerStatementParser.CONSTRAINT, 0); }
		public TerminalNode CHECK() { return getToken(SQLServerStatementParser.CHECK, 0); }
		public TerminalNode NOCHECK() { return getToken(SQLServerStatementParser.NOCHECK, 0); }
		public TerminalNode ALL() { return getToken(SQLServerStatementParser.ALL, 0); }
		public ConstraintNameContext constraintName() {
			return getRuleContext(ConstraintNameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public AlterCheckConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterCheckConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAlterCheckConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAlterCheckConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAlterCheckConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterCheckConstraintContext alterCheckConstraint() throws RecognitionException {
		AlterCheckConstraintContext _localctx = new AlterCheckConstraintContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_alterCheckConstraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3660);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3659);
				match(WITH);
				}
			}

			setState(3662);
			_la = _input.LA(1);
			if ( !(_la==CHECK || _la==NOCHECK) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3663);
			match(CONSTRAINT);
			setState(3666);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(3664);
				match(ALL);
				}
				break;
			case TRUNCATE:
			case SCHEMA:
			case TABLE:
			case COLUMNS:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case RIGHT:
			case OFF:
			case GROUP:
			case LIMIT:
			case OFFSET:
			case SAVEPOINT:
			case BOOLEAN:
			case ARRAY:
			case DATE:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MICROSECOND:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case AVG:
			case ENABLE:
			case DISABLE:
			case INSTANCE:
			case DO:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case NEXT:
			case NAME:
			case INTEGER:
			case TYPE:
			case TEXT:
			case VIEWS:
			case READ_ONLY:
			case DATABASE:
			case RETURNS:
			case DATEPART:
			case PASSWORD:
			case TARGET:
			case BINARY:
			case HIDDEN_:
			case MOD:
			case PARTITION:
			case PARTITIONS:
			case TOP:
			case ROW:
			case ROWS:
			case XOR:
			case ALWAYS:
			case USER:
			case ROLE:
			case START:
			case ACTION:
			case ALGORITHM:
			case AUTO:
			case BLOCKERS:
			case CLUSTERED:
			case NONCLUSTERED:
			case COLUMNSTORE:
			case CONTENT:
			case YEARS:
			case MONTHS:
			case WEEKS:
			case DAYS:
			case MINUTES:
			case DENY:
			case DETERMINISTIC:
			case DISTRIBUTION:
			case DOCUMENT:
			case DURABILITY:
			case ENCRYPTED:
			case FILESTREAM:
			case FILETABLE:
			case FILLFACTOR:
			case FOLLOWING:
			case HASH:
			case HEAP:
			case INBOUND:
			case OUTBOUND:
			case UNBOUNDED:
			case INFINITE:
			case LOGIN:
			case MASKED:
			case MAXDOP:
			case MOVE:
			case NOCHECK:
			case OBJECT:
			case ONLINE:
			case OVER:
			case PAGE:
			case PAUSED:
			case PERIOD:
			case PERSISTED:
			case PRECEDING:
			case RANDOMIZED:
			case RANGE:
			case REBUILD:
			case REPLICATE:
			case REPLICATION:
			case RESUMABLE:
			case ROWGUIDCOL:
			case SAVE:
			case SELF:
			case SPARSE:
			case SWITCH:
			case TRAN:
			case TRANCOUNT:
			case CONTROL:
			case CONCAT:
			case TAKE:
			case OWNERSHIP:
			case DEFINITION:
			case APPLICATION:
			case ASSEMBLY:
			case SYMMETRIC:
			case ASYMMETRIC:
			case SERVER:
			case RECEIVE:
			case CHANGE:
			case TRACE:
			case TRACKING:
			case RESOURCES:
			case SETTINGS:
			case STATE:
			case AVAILABILITY:
			case CREDENTIAL:
			case ENDPOINT:
			case EVENT:
			case NOTIFICATION:
			case LINKED:
			case AUDIT:
			case DDL:
			case XML:
			case IMPERSONATE:
			case SECURABLES:
			case AUTHENTICATE:
			case EXTERNAL:
			case ACCESS:
			case ADMINISTER:
			case BULK:
			case OPERATIONS:
			case UNSAFE:
			case SHUTDOWN:
			case SCOPED:
			case CONFIGURATION:
			case DATASPACE:
			case SERVICE:
			case CERTIFICATE:
			case CONTRACT:
			case ENCRYPTION:
			case MASTER:
			case DATA:
			case SOURCE:
			case FILE:
			case FORMAT:
			case LIBRARY:
			case FULLTEXT:
			case MASK:
			case UNMASK:
			case MESSAGE:
			case REMOTE:
			case BINDING:
			case ROUTE:
			case SECURITY:
			case POLICY:
			case AGGREGATE:
			case QUEUE:
			case RULE:
			case SYNONYM:
			case COLLECTION:
			case SCRIPT:
			case KILL:
			case BACKUP:
			case LOG:
			case SHOWPLAN:
			case SUBSCRIBE:
			case QUERY:
			case NOTIFICATIONS:
			case CHECKPOINT:
			case SEQUENCE:
			case ABORT_AFTER_WAIT:
			case ALLOW_PAGE_LOCKS:
			case ALLOW_ROW_LOCKS:
			case ALL_SPARSE_COLUMNS:
			case BUCKET_COUNT:
			case COLUMNSTORE_ARCHIVE:
			case COLUMN_ENCRYPTION_KEY:
			case COLUMN_SET:
			case COMPRESSION_DELAY:
			case DATABASE_DEAULT:
			case DATA_COMPRESSION:
			case DATA_CONSISTENCY_CHECK:
			case ENCRYPTION_TYPE:
			case SYSTEM_TIME:
			case SYSTEM_VERSIONING:
			case TEXTIMAGE_ON:
			case WAIT_AT_LOW_PRIORITY:
			case STATISTICS_INCREMENTAL:
			case STATISTICS_NORECOMPUTE:
			case ROUND_ROBIN:
			case SCHEMA_AND_DATA:
			case SCHEMA_ONLY:
			case SORT_IN_TEMPDB:
			case IGNORE_DUP_KEY:
			case IMPLICIT_TRANSACTIONS:
			case MAX_DURATION:
			case MEMORY_OPTIMIZED:
			case MIGRATION_STATE:
			case PAD_INDEX:
			case REMOTE_DATA_ARCHIVE:
			case FILESTREAM_ON:
			case FILETABLE_COLLATE_FILENAME:
			case FILETABLE_DIRECTORY:
			case FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME:
			case FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME:
			case FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME:
			case FILTER_PREDICATE:
			case HISTORY_RETENTION_PERIOD:
			case HISTORY_TABLE:
			case LOCK_ESCALATION:
			case DROP_EXISTING:
			case ROW_NUMBER:
			case FIRST:
			case DATETIME2:
			case OUTPUT:
			case INSERTED:
			case DELETED:
			case FILENAME:
			case SIZE:
			case MAXSIZE:
			case FILEGROWTH:
			case UNLIMITED:
			case KB:
			case MB:
			case GB:
			case TB:
			case CONTAINS:
			case MEMORY_OPTIMIZED_DATA:
			case FILEGROUP:
			case NON_TRANSACTED_ACCESS:
			case DB_CHAINING:
			case TRUSTWORTHY:
			case FORWARD_ONLY:
			case KEYSET:
			case FAST_FORWARD:
			case SCROLL_LOCKS:
			case OPTIMISTIC:
			case TYPE_WARNING:
			case SCHEMABINDING:
			case CALLER:
			case INPUT:
			case OWNER:
			case SNAPSHOT:
			case REPEATABLE:
			case SERIALIZABLE:
			case NATIVE_COMPILATION:
			case VIEW_METADATA:
			case INSTEAD:
			case APPEND:
			case INCREMENT:
			case CACHE:
			case MINVALUE:
			case MAXVALUE:
			case RESTART:
			case LOB_COMPACTION:
			case COMPRESS_ALL_ROW_GROUPS:
			case REORGANIZE:
			case RESUME:
			case PAUSE:
			case ABORT:
			case ACCELERATED_DATABASE_RECOVERY:
			case PERSISTENT_VERSION_STORE_FILEGROUP:
			case IMMEDIATE:
			case NO_WAIT:
			case TARGET_RECOVERY_TIME:
			case SECONDS:
			case HONOR_BROKER_PRIORITY:
			case ERROR_BROKER_CONVERSATIONS:
			case NEW_BROKER:
			case DISABLE_BROKER:
			case ENABLE_BROKER:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case READ_COMMITTED_SNAPSHOT:
			case ALLOW_SNAPSHOT_ISOLATION:
			case RECURSIVE_TRIGGERS:
			case QUOTED_IDENTIFIER:
			case NUMERIC_ROUNDABORT:
			case CONCAT_NULL_YIELDS_NULL:
			case COMPATIBILITY_LEVEL:
			case ARITHABORT:
			case ANSI_WARNINGS:
			case ANSI_PADDING:
			case ANSI_NULLS:
			case ANSI_NULL_DEFAULT:
			case PAGE_VERIFY:
			case CHECKSUM:
			case TORN_PAGE_DETECTION:
			case BULK_LOGGED:
			case RECOVERY:
			case TOTAL_EXECUTION_CPU_TIME_MS:
			case TOTAL_COMPILE_CPU_TIME_MS:
			case STALE_CAPTURE_POLICY_THRESHOLD:
			case EXECUTION_COUNT:
			case QUERY_CAPTURE_POLICY:
			case WAIT_STATS_CAPTURE_MODE:
			case MAX_PLANS_PER_QUERY:
			case QUERY_CAPTURE_MODE:
			case SIZE_BASED_CLEANUP_MODE:
			case INTERVAL_LENGTH_MINUTES:
			case MAX_STORAGE_SIZE_MB:
			case DATA_FLUSH_INTERVAL_SECONDS:
			case CLEANUP_POLICY:
			case CUSTOM:
			case STALE_QUERY_THRESHOLD_DAYS:
			case OPERATION_MODE:
			case QUERY_STORE:
			case CURSOR_DEFAULT:
			case GLOBAL:
			case CURSOR_CLOSE_ON_COMMIT:
			case HOURS:
			case CHANGE_RETENTION:
			case AUTO_CLEANUP:
			case CHANGE_TRACKING:
			case AUTOMATIC_TUNING:
			case FORCE_LAST_GOOD_PLAN:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_CREATE_STATISTICS:
			case INCREMENTAL:
			case AUTO_CLOSE:
			case DATA_RETENTION:
			case TEMPORAL_HISTORY_RETENTION:
			case EDITION:
			case MIXED_PAGE_ALLOCATION:
			case DISABLED:
			case ALLOWED:
			case HADR:
			case MULTI_USER:
			case RESTRICTED_USER:
			case SINGLE_USER:
			case OFFLINE:
			case EMERGENCY:
			case SUSPEND:
			case DATE_CORRELATION_OPTIMIZATION:
			case ELASTIC_POOL:
			case SERVICE_OBJECTIVE:
			case DATABASE_NAME:
			case ALLOW_CONNECTIONS:
			case GEO:
			case NAMED:
			case DATEFIRST:
			case BACKUP_STORAGE_REDUNDANCY:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case SECONDARY:
			case FAILOVER:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case INLINE:
			case NESTED_TRIGGERS:
			case TRANSFORM_NOISE_WORDS:
			case TWO_DIGIT_YEAR_CUTOFF:
			case PERSISTENT_LOG_BUFFER:
			case DIRECTORY_NAME:
			case DATEFORMAT:
			case DELAYED_DURABILITY:
			case AUTHORIZATION:
			case TRANSFER:
			case PROVIDER:
			case SID:
			case SEARCH:
			case MEMBER:
			case JSON:
			case OPENQUERY:
			case IDENTIFIER_:
			case DELIMITED_IDENTIFIER_:
				{
				setState(3665);
				constraintName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterTableTriggerContext extends ParserRuleContext {
		public TerminalNode TRIGGER() { return getToken(SQLServerStatementParser.TRIGGER, 0); }
		public TerminalNode ENABLE() { return getToken(SQLServerStatementParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(SQLServerStatementParser.DISABLE, 0); }
		public TerminalNode ALL() { return getToken(SQLServerStatementParser.ALL, 0); }
		public IgnoredIdentifiersContext ignoredIdentifiers() {
			return getRuleContext(IgnoredIdentifiersContext.class,0);
		}
		public AlterTableTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAlterTableTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAlterTableTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAlterTableTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableTriggerContext alterTableTrigger() throws RecognitionException {
		AlterTableTriggerContext _localctx = new AlterTableTriggerContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_alterTableTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3668);
			_la = _input.LA(1);
			if ( !(_la==ENABLE || _la==DISABLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3669);
			match(TRIGGER);
			setState(3672);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(3670);
				match(ALL);
				}
				break;
			case IDENTIFIER_:
				{
				setState(3671);
				ignoredIdentifiers();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterSwitchContext extends ParserRuleContext {
		public TerminalNode SWITCH() { return getToken(SQLServerStatementParser.SWITCH, 0); }
		public TerminalNode TO() { return getToken(SQLServerStatementParser.TO, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<TerminalNode> PARTITION() { return getTokens(SQLServerStatementParser.PARTITION); }
		public TerminalNode PARTITION(int i) {
			return getToken(SQLServerStatementParser.PARTITION, i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public LowPriorityLockWaitContext lowPriorityLockWait() {
			return getRuleContext(LowPriorityLockWaitContext.class,0);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public AlterSwitchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSwitch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAlterSwitch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAlterSwitch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAlterSwitch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSwitchContext alterSwitch() throws RecognitionException {
		AlterSwitchContext _localctx = new AlterSwitchContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_alterSwitch);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3674);
			match(SWITCH);
			setState(3677);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3675);
				match(PARTITION);
				setState(3676);
				expr(0);
				}
			}

			setState(3679);
			match(TO);
			setState(3680);
			tableName();
			setState(3683);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3681);
				match(PARTITION);
				setState(3682);
				expr(0);
				}
			}

			setState(3690);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,340,_ctx) ) {
			case 1:
				{
				setState(3685);
				match(WITH);
				setState(3686);
				match(LP_);
				setState(3687);
				lowPriorityLockWait();
				setState(3688);
				match(RP_);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterSetContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SQLServerStatementParser.SET, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public SetFileStreamClauseContext setFileStreamClause() {
			return getRuleContext(SetFileStreamClauseContext.class,0);
		}
		public SetSystemVersionClauseContext setSystemVersionClause() {
			return getRuleContext(SetSystemVersionClauseContext.class,0);
		}
		public AlterSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAlterSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAlterSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAlterSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSetContext alterSet() throws RecognitionException {
		AlterSetContext _localctx = new AlterSetContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_alterSet);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3692);
			match(SET);
			setState(3693);
			match(LP_);
			setState(3696);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILESTREAM_ON:
				{
				setState(3694);
				setFileStreamClause();
				}
				break;
			case SYSTEM_VERSIONING:
				{
				setState(3695);
				setSystemVersionClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3698);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetFileStreamClauseContext extends ParserRuleContext {
		public TerminalNode FILESTREAM_ON() { return getToken(SQLServerStatementParser.FILESTREAM_ON, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public TerminalNode STRING_() { return getToken(SQLServerStatementParser.STRING_, 0); }
		public SetFileStreamClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setFileStreamClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSetFileStreamClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSetFileStreamClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSetFileStreamClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetFileStreamClauseContext setFileStreamClause() throws RecognitionException {
		SetFileStreamClauseContext _localctx = new SetFileStreamClauseContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_setFileStreamClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3700);
			match(FILESTREAM_ON);
			setState(3701);
			match(EQ_);
			setState(3705);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
			case 1:
				{
				setState(3702);
				schemaName();
				}
				break;
			case 2:
				{
				setState(3703);
				ignoredIdentifier();
				}
				break;
			case 3:
				{
				setState(3704);
				match(STRING_);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetSystemVersionClauseContext extends ParserRuleContext {
		public TerminalNode SYSTEM_VERSIONING() { return getToken(SQLServerStatementParser.SYSTEM_VERSIONING, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode OFF() { return getToken(SQLServerStatementParser.OFF, 0); }
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public AlterSetOnClauseContext alterSetOnClause() {
			return getRuleContext(AlterSetOnClauseContext.class,0);
		}
		public SetSystemVersionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setSystemVersionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSetSystemVersionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSetSystemVersionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSetSystemVersionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetSystemVersionClauseContext setSystemVersionClause() throws RecognitionException {
		SetSystemVersionClauseContext _localctx = new SetSystemVersionClauseContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_setSystemVersionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3707);
			match(SYSTEM_VERSIONING);
			setState(3708);
			match(EQ_);
			setState(3714);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OFF:
				{
				setState(3709);
				match(OFF);
				}
				break;
			case ON:
				{
				setState(3710);
				match(ON);
				setState(3712);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(3711);
					alterSetOnClause();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterSetOnClauseContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public TerminalNode HISTORY_TABLE() { return getToken(SQLServerStatementParser.HISTORY_TABLE, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public DataConsistencyCheckClauseContext dataConsistencyCheckClause() {
			return getRuleContext(DataConsistencyCheckClauseContext.class,0);
		}
		public HistoryRetentionPeriodClauseContext historyRetentionPeriodClause() {
			return getRuleContext(HistoryRetentionPeriodClauseContext.class,0);
		}
		public AlterSetOnClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSetOnClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAlterSetOnClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAlterSetOnClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAlterSetOnClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSetOnClauseContext alterSetOnClause() throws RecognitionException {
		AlterSetOnClauseContext _localctx = new AlterSetOnClauseContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_alterSetOnClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3716);
			match(LP_);
			setState(3720);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HISTORY_TABLE) {
				{
				setState(3717);
				match(HISTORY_TABLE);
				setState(3718);
				match(EQ_);
				setState(3719);
				tableName();
				}
			}

			setState(3723);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
			case 1:
				{
				setState(3722);
				dataConsistencyCheckClause();
				}
				break;
			}
			setState(3726);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_ || _la==HISTORY_RETENTION_PERIOD) {
				{
				setState(3725);
				historyRetentionPeriodClause();
				}
			}

			setState(3728);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DataConsistencyCheckClauseContext extends ParserRuleContext {
		public TerminalNode DATA_CONSISTENCY_CHECK() { return getToken(SQLServerStatementParser.DATA_CONSISTENCY_CHECK, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public OnOffOptionContext onOffOption() {
			return getRuleContext(OnOffOptionContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(SQLServerStatementParser.COMMA_, 0); }
		public DataConsistencyCheckClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataConsistencyCheckClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDataConsistencyCheckClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDataConsistencyCheckClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDataConsistencyCheckClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataConsistencyCheckClauseContext dataConsistencyCheckClause() throws RecognitionException {
		DataConsistencyCheckClauseContext _localctx = new DataConsistencyCheckClauseContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_dataConsistencyCheckClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3731);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_) {
				{
				setState(3730);
				match(COMMA_);
				}
			}

			setState(3733);
			match(DATA_CONSISTENCY_CHECK);
			setState(3734);
			match(EQ_);
			setState(3735);
			onOffOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HistoryRetentionPeriodClauseContext extends ParserRuleContext {
		public TerminalNode HISTORY_RETENTION_PERIOD() { return getToken(SQLServerStatementParser.HISTORY_RETENTION_PERIOD, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public HistoryRetentionPeriodContext historyRetentionPeriod() {
			return getRuleContext(HistoryRetentionPeriodContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(SQLServerStatementParser.COMMA_, 0); }
		public HistoryRetentionPeriodClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_historyRetentionPeriodClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterHistoryRetentionPeriodClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitHistoryRetentionPeriodClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitHistoryRetentionPeriodClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HistoryRetentionPeriodClauseContext historyRetentionPeriodClause() throws RecognitionException {
		HistoryRetentionPeriodClauseContext _localctx = new HistoryRetentionPeriodClauseContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_historyRetentionPeriodClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3738);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_) {
				{
				setState(3737);
				match(COMMA_);
				}
			}

			setState(3740);
			match(HISTORY_RETENTION_PERIOD);
			setState(3741);
			match(EQ_);
			setState(3742);
			historyRetentionPeriod();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HistoryRetentionPeriodContext extends ParserRuleContext {
		public TerminalNode INFINITE() { return getToken(SQLServerStatementParser.INFINITE, 0); }
		public TerminalNode NUMBER_() { return getToken(SQLServerStatementParser.NUMBER_, 0); }
		public TerminalNode DAY() { return getToken(SQLServerStatementParser.DAY, 0); }
		public TerminalNode DAYS() { return getToken(SQLServerStatementParser.DAYS, 0); }
		public TerminalNode WEEK() { return getToken(SQLServerStatementParser.WEEK, 0); }
		public TerminalNode WEEKS() { return getToken(SQLServerStatementParser.WEEKS, 0); }
		public TerminalNode MONTH() { return getToken(SQLServerStatementParser.MONTH, 0); }
		public TerminalNode MONTHS() { return getToken(SQLServerStatementParser.MONTHS, 0); }
		public TerminalNode YEAR() { return getToken(SQLServerStatementParser.YEAR, 0); }
		public TerminalNode YEARS() { return getToken(SQLServerStatementParser.YEARS, 0); }
		public HistoryRetentionPeriodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_historyRetentionPeriod; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterHistoryRetentionPeriod(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitHistoryRetentionPeriod(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitHistoryRetentionPeriod(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HistoryRetentionPeriodContext historyRetentionPeriod() throws RecognitionException {
		HistoryRetentionPeriodContext _localctx = new HistoryRetentionPeriodContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_historyRetentionPeriod);
		int _la;
		try {
			setState(3747);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INFINITE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3744);
				match(INFINITE);
				}
				break;
			case NUMBER_:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(3745);
				match(NUMBER_);
				setState(3746);
				_la = _input.LA(1);
				if ( !(((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 29L) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & 15L) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterTableTableIndexContext extends ParserRuleContext {
		public IndexWithNameContext indexWithName() {
			return getRuleContext(IndexWithNameContext.class,0);
		}
		public IndexNonClusterClauseContext indexNonClusterClause() {
			return getRuleContext(IndexNonClusterClauseContext.class,0);
		}
		public IndexClusterClauseContext indexClusterClause() {
			return getRuleContext(IndexClusterClauseContext.class,0);
		}
		public AlterTableTableIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableTableIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAlterTableTableIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAlterTableTableIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAlterTableTableIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableTableIndexContext alterTableTableIndex() throws RecognitionException {
		AlterTableTableIndexContext _localctx = new AlterTableTableIndexContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_alterTableTableIndex);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3749);
			indexWithName();
			setState(3752);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NONCLUSTERED:
				{
				setState(3750);
				indexNonClusterClause();
				}
				break;
			case CLUSTERED:
				{
				setState(3751);
				indexClusterClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexWithNameContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(SQLServerStatementParser.INDEX, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public IndexWithNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexWithName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterIndexWithName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitIndexWithName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitIndexWithName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexWithNameContext indexWithName() throws RecognitionException {
		IndexWithNameContext _localctx = new IndexWithNameContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_indexWithName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3754);
			match(INDEX);
			setState(3755);
			indexName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexNonClusterClauseContext extends ParserRuleContext {
		public TerminalNode NONCLUSTERED() { return getToken(SQLServerStatementParser.NONCLUSTERED, 0); }
		public HashWithBucketContext hashWithBucket() {
			return getRuleContext(HashWithBucketContext.class,0);
		}
		public ColumnNamesWithSortContext columnNamesWithSort() {
			return getRuleContext(ColumnNamesWithSortContext.class,0);
		}
		public AlterTableIndexOnClauseContext alterTableIndexOnClause() {
			return getRuleContext(AlterTableIndexOnClauseContext.class,0);
		}
		public IndexNonClusterClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexNonClusterClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterIndexNonClusterClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitIndexNonClusterClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitIndexNonClusterClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexNonClusterClauseContext indexNonClusterClause() throws RecognitionException {
		IndexNonClusterClauseContext _localctx = new IndexNonClusterClauseContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_indexNonClusterClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3757);
			match(NONCLUSTERED);
			setState(3763);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HASH:
				{
				setState(3758);
				hashWithBucket();
				}
				break;
			case LP_:
				{
				setState(3759);
				columnNamesWithSort();
				setState(3761);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON || _la==DEFAULT) {
					{
					setState(3760);
					alterTableIndexOnClause();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterTableIndexOnClauseContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(SQLServerStatementParser.DEFAULT, 0); }
		public AlterTableIndexOnClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableIndexOnClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAlterTableIndexOnClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAlterTableIndexOnClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAlterTableIndexOnClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableIndexOnClauseContext alterTableIndexOnClause() throws RecognitionException {
		AlterTableIndexOnClauseContext _localctx = new AlterTableIndexOnClauseContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_alterTableIndexOnClause);
		try {
			setState(3768);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				enterOuterAlt(_localctx, 1);
				{
				setState(3765);
				match(ON);
				setState(3766);
				ignoredIdentifier();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3767);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexClusterClauseContext extends ParserRuleContext {
		public TerminalNode CLUSTERED() { return getToken(SQLServerStatementParser.CLUSTERED, 0); }
		public TerminalNode COLUMNSTORE() { return getToken(SQLServerStatementParser.COLUMNSTORE, 0); }
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public TerminalNode COMPRESSION_DELAY() { return getToken(SQLServerStatementParser.COMPRESSION_DELAY, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode NUMBER_() { return getToken(SQLServerStatementParser.NUMBER_, 0); }
		public IndexOnClauseContext indexOnClause() {
			return getRuleContext(IndexOnClauseContext.class,0);
		}
		public TerminalNode MINUTES() { return getToken(SQLServerStatementParser.MINUTES, 0); }
		public IndexClusterClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexClusterClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterIndexClusterClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitIndexClusterClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitIndexClusterClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexClusterClauseContext indexClusterClause() throws RecognitionException {
		IndexClusterClauseContext _localctx = new IndexClusterClauseContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_indexClusterClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3770);
			match(CLUSTERED);
			setState(3771);
			match(COLUMNSTORE);
			setState(3779);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,356,_ctx) ) {
			case 1:
				{
				setState(3772);
				match(WITH);
				setState(3773);
				match(COMPRESSION_DELAY);
				setState(3774);
				match(EQ_);
				setState(3775);
				match(NUMBER_);
				setState(3777);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUTES) {
					{
					setState(3776);
					match(MINUTES);
					}
				}

				}
				break;
			}
			setState(3782);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(3781);
				indexOnClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterTableOptionContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SQLServerStatementParser.SET, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public TerminalNode LOCK_ESCALATION() { return getToken(SQLServerStatementParser.LOCK_ESCALATION, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public TerminalNode AUTO() { return getToken(SQLServerStatementParser.AUTO, 0); }
		public TerminalNode TABLE() { return getToken(SQLServerStatementParser.TABLE, 0); }
		public TerminalNode DISABLE() { return getToken(SQLServerStatementParser.DISABLE, 0); }
		public TerminalNode MEMORY_OPTIMIZED() { return getToken(SQLServerStatementParser.MEMORY_OPTIMIZED, 0); }
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode DURABILITY() { return getToken(SQLServerStatementParser.DURABILITY, 0); }
		public TerminalNode SCHEMA_ONLY() { return getToken(SQLServerStatementParser.SCHEMA_ONLY, 0); }
		public TerminalNode SCHEMA_AND_DATA() { return getToken(SQLServerStatementParser.SCHEMA_AND_DATA, 0); }
		public TerminalNode SYSTEM_VERSIONING() { return getToken(SQLServerStatementParser.SYSTEM_VERSIONING, 0); }
		public OnHistoryTableClauseContext onHistoryTableClause() {
			return getRuleContext(OnHistoryTableClauseContext.class,0);
		}
		public AlterTableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAlterTableOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAlterTableOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAlterTableOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableOptionContext alterTableOption() throws RecognitionException {
		AlterTableOptionContext _localctx = new AlterTableOptionContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_alterTableOption);
		int _la;
		try {
			setState(3802);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(3784);
				match(SET);
				setState(3785);
				match(LP_);
				setState(3786);
				match(LOCK_ESCALATION);
				setState(3787);
				match(EQ_);
				setState(3788);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==DISABLE || _la==AUTO) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3789);
				match(RP_);
				}
				break;
			case MEMORY_OPTIMIZED:
				enterOuterAlt(_localctx, 2);
				{
				setState(3790);
				match(MEMORY_OPTIMIZED);
				setState(3791);
				match(EQ_);
				setState(3792);
				match(ON);
				}
				break;
			case DURABILITY:
				enterOuterAlt(_localctx, 3);
				{
				setState(3793);
				match(DURABILITY);
				setState(3794);
				match(EQ_);
				setState(3795);
				_la = _input.LA(1);
				if ( !(_la==SCHEMA_AND_DATA || _la==SCHEMA_ONLY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SYSTEM_VERSIONING:
				enterOuterAlt(_localctx, 4);
				{
				setState(3796);
				match(SYSTEM_VERSIONING);
				setState(3797);
				match(EQ_);
				setState(3798);
				match(ON);
				setState(3800);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(3799);
					onHistoryTableClause();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OnHistoryTableClauseContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public TerminalNode HISTORY_TABLE() { return getToken(SQLServerStatementParser.HISTORY_TABLE, 0); }
		public List<TerminalNode> EQ_() { return getTokens(SQLServerStatementParser.EQ_); }
		public TerminalNode EQ_(int i) {
			return getToken(SQLServerStatementParser.EQ_, i);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public TerminalNode COMMA_() { return getToken(SQLServerStatementParser.COMMA_, 0); }
		public TerminalNode DATA_CONSISTENCY_CHECK() { return getToken(SQLServerStatementParser.DATA_CONSISTENCY_CHECK, 0); }
		public OnOffOptionContext onOffOption() {
			return getRuleContext(OnOffOptionContext.class,0);
		}
		public OnHistoryTableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onHistoryTableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterOnHistoryTableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitOnHistoryTableClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitOnHistoryTableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnHistoryTableClauseContext onHistoryTableClause() throws RecognitionException {
		OnHistoryTableClauseContext _localctx = new OnHistoryTableClauseContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_onHistoryTableClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3804);
			match(LP_);
			setState(3805);
			match(HISTORY_TABLE);
			setState(3806);
			match(EQ_);
			setState(3807);
			tableName();
			setState(3812);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_) {
				{
				setState(3808);
				match(COMMA_);
				setState(3809);
				match(DATA_CONSISTENCY_CHECK);
				setState(3810);
				match(EQ_);
				setState(3811);
				onOffOption();
				}
			}

			setState(3814);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateDatabaseClauseContext extends ParserRuleContext {
		public TerminalNode CONTAINMENT() { return getToken(SQLServerStatementParser.CONTAINMENT, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public FileDefinitionClauseContext fileDefinitionClause() {
			return getRuleContext(FileDefinitionClauseContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(SQLServerStatementParser.COLLATE, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public List<DatabaseOptionContext> databaseOption() {
			return getRuleContexts(DatabaseOptionContext.class);
		}
		public DatabaseOptionContext databaseOption(int i) {
			return getRuleContext(DatabaseOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(SQLServerStatementParser.NONE, 0); }
		public TerminalNode PARTIAL() { return getToken(SQLServerStatementParser.PARTIAL, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public CreateDatabaseClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabaseClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateDatabaseClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateDatabaseClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateDatabaseClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseClauseContext createDatabaseClause() throws RecognitionException {
		CreateDatabaseClauseContext _localctx = new CreateDatabaseClauseContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_createDatabaseClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3819);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTAINMENT) {
				{
				setState(3816);
				match(CONTAINMENT);
				setState(3817);
				match(EQ_);
				setState(3818);
				_la = _input.LA(1);
				if ( !(_la==NONE || _la==PARTIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3822);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(3821);
				fileDefinitionClause();
				}
			}

			setState(3826);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(3824);
				match(COLLATE);
				setState(3825);
				ignoredIdentifier();
				}
			}

			setState(3837);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3828);
				match(WITH);
				setState(3829);
				databaseOption();
				setState(3834);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(3830);
					match(COMMA_);
					setState(3831);
					databaseOption();
					}
					}
					setState(3836);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FileDefinitionClauseContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public List<FileSpecContext> fileSpec() {
			return getRuleContexts(FileSpecContext.class);
		}
		public FileSpecContext fileSpec(int i) {
			return getRuleContext(FileSpecContext.class,i);
		}
		public DatabaseLogOnsContext databaseLogOns() {
			return getRuleContext(DatabaseLogOnsContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(SQLServerStatementParser.PRIMARY, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public List<DatabaseFileGroupContext> databaseFileGroup() {
			return getRuleContexts(DatabaseFileGroupContext.class);
		}
		public DatabaseFileGroupContext databaseFileGroup(int i) {
			return getRuleContext(DatabaseFileGroupContext.class,i);
		}
		public FileDefinitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fileDefinitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterFileDefinitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitFileDefinitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitFileDefinitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FileDefinitionClauseContext fileDefinitionClause() throws RecognitionException {
		FileDefinitionClauseContext _localctx = new FileDefinitionClauseContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_fileDefinitionClause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3839);
			match(ON);
			setState(3841);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PRIMARY) {
				{
				setState(3840);
				match(PRIMARY);
				}
			}

			setState(3843);
			fileSpec();
			setState(3848);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,367,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3844);
					match(COMMA_);
					setState(3845);
					fileSpec();
					}
					} 
				}
				setState(3850);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,367,_ctx);
			}
			setState(3855);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3851);
				match(COMMA_);
				setState(3852);
				databaseFileGroup();
				}
				}
				setState(3857);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3858);
			databaseLogOns();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DatabaseOptionContext extends ParserRuleContext {
		public TerminalNode FILESTREAM() { return getToken(SQLServerStatementParser.FILESTREAM, 0); }
		public List<FileStreamOptionContext> fileStreamOption() {
			return getRuleContexts(FileStreamOptionContext.class);
		}
		public FileStreamOptionContext fileStreamOption(int i) {
			return getRuleContext(FileStreamOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public TerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return getToken(SQLServerStatementParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public List<TerminalNode> EQ_() { return getTokens(SQLServerStatementParser.EQ_); }
		public TerminalNode EQ_(int i) {
			return getToken(SQLServerStatementParser.EQ_, i);
		}
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(SQLServerStatementParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode NESTED_TRIGGERS() { return getToken(SQLServerStatementParser.NESTED_TRIGGERS, 0); }
		public TerminalNode OFF() { return getToken(SQLServerStatementParser.OFF, 0); }
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode TRANSFORM_NOISE_WORDS() { return getToken(SQLServerStatementParser.TRANSFORM_NOISE_WORDS, 0); }
		public TerminalNode TWO_DIGIT_YEAR_CUTOFF() { return getToken(SQLServerStatementParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public TerminalNode DB_CHAINING() { return getToken(SQLServerStatementParser.DB_CHAINING, 0); }
		public TerminalNode TRUSTWORTHY() { return getToken(SQLServerStatementParser.TRUSTWORTHY, 0); }
		public TerminalNode PERSISTENT_LOG_BUFFER() { return getToken(SQLServerStatementParser.PERSISTENT_LOG_BUFFER, 0); }
		public TerminalNode DIRECTORY_NAME() { return getToken(SQLServerStatementParser.DIRECTORY_NAME, 0); }
		public DatabaseOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_databaseOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDatabaseOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDatabaseOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDatabaseOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatabaseOptionContext databaseOption() throws RecognitionException {
		DatabaseOptionContext _localctx = new DatabaseOptionContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_databaseOption);
		int _la;
		try {
			int _alt;
			setState(3894);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILESTREAM:
				enterOuterAlt(_localctx, 1);
				{
				setState(3860);
				match(FILESTREAM);
				setState(3861);
				fileStreamOption();
				setState(3866);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,369,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3862);
						match(COMMA_);
						setState(3863);
						fileStreamOption();
						}
						} 
					}
					setState(3868);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,369,_ctx);
				}
				}
				break;
			case DEFAULT_FULLTEXT_LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3869);
				match(DEFAULT_FULLTEXT_LANGUAGE);
				setState(3870);
				match(EQ_);
				setState(3871);
				ignoredIdentifier();
				}
				break;
			case DEFAULT_LANGUAGE:
				enterOuterAlt(_localctx, 3);
				{
				setState(3872);
				match(DEFAULT_LANGUAGE);
				setState(3873);
				match(EQ_);
				setState(3874);
				ignoredIdentifier();
				}
				break;
			case NESTED_TRIGGERS:
				enterOuterAlt(_localctx, 4);
				{
				setState(3875);
				match(NESTED_TRIGGERS);
				setState(3876);
				match(EQ_);
				setState(3877);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TRANSFORM_NOISE_WORDS:
				enterOuterAlt(_localctx, 5);
				{
				setState(3878);
				match(TRANSFORM_NOISE_WORDS);
				setState(3879);
				match(EQ_);
				setState(3880);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TWO_DIGIT_YEAR_CUTOFF:
				enterOuterAlt(_localctx, 6);
				{
				setState(3881);
				match(TWO_DIGIT_YEAR_CUTOFF);
				setState(3882);
				match(EQ_);
				setState(3883);
				ignoredIdentifier();
				}
				break;
			case DB_CHAINING:
				enterOuterAlt(_localctx, 7);
				{
				setState(3884);
				match(DB_CHAINING);
				setState(3885);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TRUSTWORTHY:
				enterOuterAlt(_localctx, 8);
				{
				setState(3886);
				match(TRUSTWORTHY);
				setState(3887);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case PERSISTENT_LOG_BUFFER:
				enterOuterAlt(_localctx, 9);
				{
				setState(3888);
				match(PERSISTENT_LOG_BUFFER);
				setState(3889);
				match(EQ_);
				setState(3890);
				match(ON);
				{
				setState(3891);
				match(DIRECTORY_NAME);
				setState(3892);
				match(EQ_);
				setState(3893);
				ignoredIdentifier();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FileStreamOptionContext extends ParserRuleContext {
		public TerminalNode NON_TRANSACTED_ACCESS() { return getToken(SQLServerStatementParser.NON_TRANSACTED_ACCESS, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode OFF() { return getToken(SQLServerStatementParser.OFF, 0); }
		public TerminalNode READ_ONLY() { return getToken(SQLServerStatementParser.READ_ONLY, 0); }
		public TerminalNode FULL() { return getToken(SQLServerStatementParser.FULL, 0); }
		public TerminalNode DIRECTORY_NAME() { return getToken(SQLServerStatementParser.DIRECTORY_NAME, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public FileStreamOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fileStreamOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterFileStreamOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitFileStreamOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitFileStreamOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FileStreamOptionContext fileStreamOption() throws RecognitionException {
		FileStreamOptionContext _localctx = new FileStreamOptionContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_fileStreamOption);
		int _la;
		try {
			setState(3902);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NON_TRANSACTED_ACCESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3896);
				match(NON_TRANSACTED_ACCESS);
				setState(3897);
				match(EQ_);
				setState(3898);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==OFF || _la==READ_ONLY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case DIRECTORY_NAME:
				enterOuterAlt(_localctx, 2);
				{
				setState(3899);
				match(DIRECTORY_NAME);
				setState(3900);
				match(EQ_);
				setState(3901);
				ignoredIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FileSpecContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public TerminalNode NAME() { return getToken(SQLServerStatementParser.NAME, 0); }
		public List<TerminalNode> EQ_() { return getTokens(SQLServerStatementParser.EQ_); }
		public TerminalNode EQ_(int i) {
			return getToken(SQLServerStatementParser.EQ_, i);
		}
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(SQLServerStatementParser.COMMA_, 0); }
		public TerminalNode FILENAME() { return getToken(SQLServerStatementParser.FILENAME, 0); }
		public TerminalNode STRING_() { return getToken(SQLServerStatementParser.STRING_, 0); }
		public DatabaseFileSpecOptionContext databaseFileSpecOption() {
			return getRuleContext(DatabaseFileSpecOptionContext.class,0);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public FileSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fileSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterFileSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitFileSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitFileSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FileSpecContext fileSpec() throws RecognitionException {
		FileSpecContext _localctx = new FileSpecContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_fileSpec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3904);
			match(LP_);
			setState(3905);
			match(NAME);
			setState(3906);
			match(EQ_);
			setState(3907);
			ignoredIdentifier();
			setState(3908);
			match(COMMA_);
			setState(3909);
			match(FILENAME);
			setState(3910);
			match(EQ_);
			setState(3911);
			match(STRING_);
			setState(3912);
			databaseFileSpecOption();
			setState(3913);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DatabaseFileSpecOptionContext extends ParserRuleContext {
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public TerminalNode SIZE() { return getToken(SQLServerStatementParser.SIZE, 0); }
		public List<TerminalNode> EQ_() { return getTokens(SQLServerStatementParser.EQ_); }
		public TerminalNode EQ_(int i) {
			return getToken(SQLServerStatementParser.EQ_, i);
		}
		public List<NumberLiteralsContext> numberLiterals() {
			return getRuleContexts(NumberLiteralsContext.class);
		}
		public NumberLiteralsContext numberLiterals(int i) {
			return getRuleContext(NumberLiteralsContext.class,i);
		}
		public TerminalNode MAXSIZE() { return getToken(SQLServerStatementParser.MAXSIZE, 0); }
		public TerminalNode FILEGROWTH() { return getToken(SQLServerStatementParser.FILEGROWTH, 0); }
		public TerminalNode UNLIMITED() { return getToken(SQLServerStatementParser.UNLIMITED, 0); }
		public List<TerminalNode> KB() { return getTokens(SQLServerStatementParser.KB); }
		public TerminalNode KB(int i) {
			return getToken(SQLServerStatementParser.KB, i);
		}
		public List<TerminalNode> MB() { return getTokens(SQLServerStatementParser.MB); }
		public TerminalNode MB(int i) {
			return getToken(SQLServerStatementParser.MB, i);
		}
		public List<TerminalNode> GB() { return getTokens(SQLServerStatementParser.GB); }
		public TerminalNode GB(int i) {
			return getToken(SQLServerStatementParser.GB, i);
		}
		public List<TerminalNode> TB() { return getTokens(SQLServerStatementParser.TB); }
		public TerminalNode TB(int i) {
			return getToken(SQLServerStatementParser.TB, i);
		}
		public TerminalNode MOD_() { return getToken(SQLServerStatementParser.MOD_, 0); }
		public DatabaseFileSpecOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_databaseFileSpecOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDatabaseFileSpecOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDatabaseFileSpecOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDatabaseFileSpecOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatabaseFileSpecOptionContext databaseFileSpecOption() throws RecognitionException {
		DatabaseFileSpecOptionContext _localctx = new DatabaseFileSpecOptionContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_databaseFileSpecOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3922);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,373,_ctx) ) {
			case 1:
				{
				setState(3915);
				match(COMMA_);
				setState(3916);
				match(SIZE);
				setState(3917);
				match(EQ_);
				setState(3918);
				numberLiterals();
				setState(3920);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & 15L) != 0)) {
					{
					setState(3919);
					_la = _input.LA(1);
					if ( !(((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & 15L) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			}
			setState(3934);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,376,_ctx) ) {
			case 1:
				{
				setState(3924);
				match(COMMA_);
				setState(3925);
				match(MAXSIZE);
				setState(3926);
				match(EQ_);
				setState(3932);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PLUS_:
				case MINUS_:
				case NUMBER_:
					{
					setState(3927);
					numberLiterals();
					setState(3929);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & 15L) != 0)) {
						{
						setState(3928);
						_la = _input.LA(1);
						if ( !(((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & 15L) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
					break;
				case UNLIMITED:
					{
					setState(3931);
					match(UNLIMITED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(3943);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_) {
				{
				setState(3936);
				match(COMMA_);
				setState(3937);
				match(FILEGROWTH);
				setState(3938);
				match(EQ_);
				setState(3939);
				numberLiterals();
				setState(3941);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MOD_ || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & 15L) != 0)) {
					{
					setState(3940);
					_la = _input.LA(1);
					if ( !(_la==MOD_ || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & 15L) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DatabaseFileGroupContext extends ParserRuleContext {
		public TerminalNode FILEGROUP() { return getToken(SQLServerStatementParser.FILEGROUP, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public List<FileSpecContext> fileSpec() {
			return getRuleContexts(FileSpecContext.class);
		}
		public FileSpecContext fileSpec(int i) {
			return getRuleContext(FileSpecContext.class,i);
		}
		public DatabaseFileGroupContainsContext databaseFileGroupContains() {
			return getRuleContext(DatabaseFileGroupContainsContext.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public DatabaseFileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_databaseFileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDatabaseFileGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDatabaseFileGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDatabaseFileGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatabaseFileGroupContext databaseFileGroup() throws RecognitionException {
		DatabaseFileGroupContext _localctx = new DatabaseFileGroupContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_databaseFileGroup);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3945);
			match(FILEGROUP);
			setState(3946);
			ignoredIdentifier();
			setState(3948);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,379,_ctx) ) {
			case 1:
				{
				setState(3947);
				databaseFileGroupContains();
				}
				break;
			}
			setState(3950);
			fileSpec();
			setState(3955);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,380,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3951);
					match(COMMA_);
					setState(3952);
					fileSpec();
					}
					} 
				}
				setState(3957);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,380,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DatabaseFileGroupContainsContext extends ParserRuleContext {
		public TerminalNode CONTAINS() { return getToken(SQLServerStatementParser.CONTAINS, 0); }
		public TerminalNode FILESTREAM() { return getToken(SQLServerStatementParser.FILESTREAM, 0); }
		public TerminalNode DEFAULT() { return getToken(SQLServerStatementParser.DEFAULT, 0); }
		public TerminalNode MEMORY_OPTIMIZED_DATA() { return getToken(SQLServerStatementParser.MEMORY_OPTIMIZED_DATA, 0); }
		public DatabaseFileGroupContainsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_databaseFileGroupContains; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDatabaseFileGroupContains(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDatabaseFileGroupContains(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDatabaseFileGroupContains(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatabaseFileGroupContainsContext databaseFileGroupContains() throws RecognitionException {
		DatabaseFileGroupContainsContext _localctx = new DatabaseFileGroupContainsContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_databaseFileGroupContains);
		int _la;
		try {
			setState(3967);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,383,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3960);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONTAINS) {
					{
					setState(3958);
					match(CONTAINS);
					setState(3959);
					match(FILESTREAM);
					}
				}

				setState(3963);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(3962);
					match(DEFAULT);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3965);
				match(CONTAINS);
				setState(3966);
				match(MEMORY_OPTIMIZED_DATA);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DatabaseLogOnsContext extends ParserRuleContext {
		public TerminalNode LOG() { return getToken(SQLServerStatementParser.LOG, 0); }
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public List<FileSpecContext> fileSpec() {
			return getRuleContexts(FileSpecContext.class);
		}
		public FileSpecContext fileSpec(int i) {
			return getRuleContext(FileSpecContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public DatabaseLogOnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_databaseLogOns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDatabaseLogOns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDatabaseLogOns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDatabaseLogOns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatabaseLogOnsContext databaseLogOns() throws RecognitionException {
		DatabaseLogOnsContext _localctx = new DatabaseLogOnsContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_databaseLogOns);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3979);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3969);
				match(LOG);
				setState(3970);
				match(ON);
				setState(3971);
				fileSpec();
				setState(3976);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(3972);
					match(COMMA_);
					setState(3973);
					fileSpec();
					}
					}
					setState(3978);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DeclareVariableContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(SQLServerStatementParser.DECLARE, 0); }
		public List<VariableContext> variable() {
			return getRuleContexts(VariableContext.class);
		}
		public VariableContext variable(int i) {
			return getRuleContext(VariableContext.class,i);
		}
		public TableVariableContext tableVariable() {
			return getRuleContext(TableVariableContext.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public DeclareVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDeclareVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDeclareVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDeclareVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareVariableContext declareVariable() throws RecognitionException {
		DeclareVariableContext _localctx = new DeclareVariableContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_declareVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3981);
			match(DECLARE);
			setState(3991);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,387,_ctx) ) {
			case 1:
				{
				setState(3982);
				variable();
				setState(3987);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(3983);
					match(COMMA_);
					setState(3984);
					variable();
					}
					}
					setState(3989);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(3990);
				tableVariable();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VariableContext extends ParserRuleContext {
		public VariableNameContext variableName() {
			return getRuleContext(VariableNameContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode AS() { return getToken(SQLServerStatementParser.AS, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(SQLServerStatementParser.CURSOR, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableContext variable() throws RecognitionException {
		VariableContext _localctx = new VariableContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_variable);
		int _la;
		try {
			setState(4005);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,390,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3993);
				variableName();
				setState(3995);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3994);
					match(AS);
					}
				}

				setState(3997);
				dataType();
				setState(4000);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,389,_ctx) ) {
				case 1:
					{
					setState(3998);
					match(EQ_);
					setState(3999);
					simpleExpr(0);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4002);
				variableName();
				setState(4003);
				match(CURSOR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableVariableContext extends ParserRuleContext {
		public VariableNameContext variableName() {
			return getRuleContext(VariableNameContext.class,0);
		}
		public VariTableTypeDefinitionContext variTableTypeDefinition() {
			return getRuleContext(VariTableTypeDefinitionContext.class,0);
		}
		public TerminalNode AS() { return getToken(SQLServerStatementParser.AS, 0); }
		public TableVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterTableVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitTableVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitTableVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableVariableContext tableVariable() throws RecognitionException {
		TableVariableContext _localctx = new TableVariableContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_tableVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4007);
			variableName();
			setState(4009);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(4008);
				match(AS);
				}
			}

			setState(4011);
			variTableTypeDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VariTableTypeDefinitionContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(SQLServerStatementParser.TABLE, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<TableVariableClauseContext> tableVariableClause() {
			return getRuleContexts(TableVariableClauseContext.class);
		}
		public TableVariableClauseContext tableVariableClause(int i) {
			return getRuleContext(TableVariableClauseContext.class,i);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public VariTableTypeDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variTableTypeDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterVariTableTypeDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitVariTableTypeDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitVariTableTypeDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariTableTypeDefinitionContext variTableTypeDefinition() throws RecognitionException {
		VariTableTypeDefinitionContext _localctx = new VariTableTypeDefinitionContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_variTableTypeDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4013);
			match(TABLE);
			setState(4014);
			match(LP_);
			setState(4015);
			tableVariableClause();
			setState(4020);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4016);
				match(COMMA_);
				setState(4017);
				tableVariableClause();
				}
				}
				setState(4022);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4023);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableVariableClauseContext extends ParserRuleContext {
		public VariableTableColumnDefinitionContext variableTableColumnDefinition() {
			return getRuleContext(VariableTableColumnDefinitionContext.class,0);
		}
		public VariableTableConstraintContext variableTableConstraint() {
			return getRuleContext(VariableTableConstraintContext.class,0);
		}
		public TableVariableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableVariableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterTableVariableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitTableVariableClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitTableVariableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableVariableClauseContext tableVariableClause() throws RecognitionException {
		TableVariableClauseContext _localctx = new TableVariableClauseContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_tableVariableClause);
		try {
			setState(4027);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOLLAR_:
			case TRUNCATE:
			case SCHEMA:
			case TABLE:
			case COLUMNS:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case RIGHT:
			case OFF:
			case GROUP:
			case LIMIT:
			case OFFSET:
			case SAVEPOINT:
			case BOOLEAN:
			case ARRAY:
			case DATE:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MICROSECOND:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case AVG:
			case ENABLE:
			case DISABLE:
			case INSTANCE:
			case DO:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case NEXT:
			case NAME:
			case INTEGER:
			case TYPE:
			case TEXT:
			case VIEWS:
			case READ_ONLY:
			case DATABASE:
			case RETURNS:
			case DATEPART:
			case PASSWORD:
			case TARGET:
			case BINARY:
			case HIDDEN_:
			case MOD:
			case PARTITION:
			case PARTITIONS:
			case TOP:
			case ROW:
			case ROWS:
			case XOR:
			case ALWAYS:
			case USER:
			case ROLE:
			case START:
			case ACTION:
			case ALGORITHM:
			case AUTO:
			case BLOCKERS:
			case CLUSTERED:
			case NONCLUSTERED:
			case COLUMNSTORE:
			case CONTENT:
			case YEARS:
			case MONTHS:
			case WEEKS:
			case DAYS:
			case MINUTES:
			case DENY:
			case DETERMINISTIC:
			case DISTRIBUTION:
			case DOCUMENT:
			case DURABILITY:
			case ENCRYPTED:
			case FILESTREAM:
			case FILETABLE:
			case FILLFACTOR:
			case FOLLOWING:
			case HASH:
			case HEAP:
			case INBOUND:
			case OUTBOUND:
			case UNBOUNDED:
			case INFINITE:
			case LOGIN:
			case MASKED:
			case MAXDOP:
			case MOVE:
			case NOCHECK:
			case OBJECT:
			case ONLINE:
			case OVER:
			case PAGE:
			case PAUSED:
			case PERIOD:
			case PERSISTED:
			case PRECEDING:
			case RANDOMIZED:
			case RANGE:
			case REBUILD:
			case REPLICATE:
			case REPLICATION:
			case RESUMABLE:
			case ROWGUIDCOL:
			case SAVE:
			case SELF:
			case SPARSE:
			case SWITCH:
			case TRAN:
			case TRANCOUNT:
			case CONTROL:
			case CONCAT:
			case TAKE:
			case OWNERSHIP:
			case DEFINITION:
			case APPLICATION:
			case ASSEMBLY:
			case SYMMETRIC:
			case ASYMMETRIC:
			case SERVER:
			case RECEIVE:
			case CHANGE:
			case TRACE:
			case TRACKING:
			case RESOURCES:
			case SETTINGS:
			case STATE:
			case AVAILABILITY:
			case CREDENTIAL:
			case ENDPOINT:
			case EVENT:
			case NOTIFICATION:
			case LINKED:
			case AUDIT:
			case DDL:
			case XML:
			case IMPERSONATE:
			case SECURABLES:
			case AUTHENTICATE:
			case EXTERNAL:
			case ACCESS:
			case ADMINISTER:
			case BULK:
			case OPERATIONS:
			case UNSAFE:
			case SHUTDOWN:
			case SCOPED:
			case CONFIGURATION:
			case DATASPACE:
			case SERVICE:
			case CERTIFICATE:
			case CONTRACT:
			case ENCRYPTION:
			case MASTER:
			case DATA:
			case SOURCE:
			case FILE:
			case FORMAT:
			case LIBRARY:
			case FULLTEXT:
			case MASK:
			case UNMASK:
			case MESSAGE:
			case REMOTE:
			case BINDING:
			case ROUTE:
			case SECURITY:
			case POLICY:
			case AGGREGATE:
			case QUEUE:
			case RULE:
			case SYNONYM:
			case COLLECTION:
			case SCRIPT:
			case KILL:
			case BACKUP:
			case LOG:
			case SHOWPLAN:
			case SUBSCRIBE:
			case QUERY:
			case NOTIFICATIONS:
			case CHECKPOINT:
			case SEQUENCE:
			case ABORT_AFTER_WAIT:
			case ALLOW_PAGE_LOCKS:
			case ALLOW_ROW_LOCKS:
			case ALL_SPARSE_COLUMNS:
			case BUCKET_COUNT:
			case COLUMNSTORE_ARCHIVE:
			case COLUMN_ENCRYPTION_KEY:
			case COLUMN_SET:
			case COMPRESSION_DELAY:
			case DATABASE_DEAULT:
			case DATA_COMPRESSION:
			case DATA_CONSISTENCY_CHECK:
			case ENCRYPTION_TYPE:
			case SYSTEM_TIME:
			case SYSTEM_VERSIONING:
			case TEXTIMAGE_ON:
			case WAIT_AT_LOW_PRIORITY:
			case STATISTICS_INCREMENTAL:
			case STATISTICS_NORECOMPUTE:
			case ROUND_ROBIN:
			case SCHEMA_AND_DATA:
			case SCHEMA_ONLY:
			case SORT_IN_TEMPDB:
			case IGNORE_DUP_KEY:
			case IMPLICIT_TRANSACTIONS:
			case MAX_DURATION:
			case MEMORY_OPTIMIZED:
			case MIGRATION_STATE:
			case PAD_INDEX:
			case REMOTE_DATA_ARCHIVE:
			case FILESTREAM_ON:
			case FILETABLE_COLLATE_FILENAME:
			case FILETABLE_DIRECTORY:
			case FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME:
			case FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME:
			case FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME:
			case FILTER_PREDICATE:
			case HISTORY_RETENTION_PERIOD:
			case HISTORY_TABLE:
			case LOCK_ESCALATION:
			case DROP_EXISTING:
			case ROW_NUMBER:
			case FIRST:
			case DATETIME2:
			case OUTPUT:
			case INSERTED:
			case DELETED:
			case FILENAME:
			case SIZE:
			case MAXSIZE:
			case FILEGROWTH:
			case UNLIMITED:
			case KB:
			case MB:
			case GB:
			case TB:
			case CONTAINS:
			case MEMORY_OPTIMIZED_DATA:
			case FILEGROUP:
			case NON_TRANSACTED_ACCESS:
			case DB_CHAINING:
			case TRUSTWORTHY:
			case FORWARD_ONLY:
			case KEYSET:
			case FAST_FORWARD:
			case SCROLL_LOCKS:
			case OPTIMISTIC:
			case TYPE_WARNING:
			case SCHEMABINDING:
			case CALLER:
			case INPUT:
			case OWNER:
			case SNAPSHOT:
			case REPEATABLE:
			case SERIALIZABLE:
			case NATIVE_COMPILATION:
			case VIEW_METADATA:
			case INSTEAD:
			case APPEND:
			case INCREMENT:
			case CACHE:
			case MINVALUE:
			case MAXVALUE:
			case RESTART:
			case LOB_COMPACTION:
			case COMPRESS_ALL_ROW_GROUPS:
			case REORGANIZE:
			case RESUME:
			case PAUSE:
			case ABORT:
			case ACCELERATED_DATABASE_RECOVERY:
			case PERSISTENT_VERSION_STORE_FILEGROUP:
			case IMMEDIATE:
			case NO_WAIT:
			case TARGET_RECOVERY_TIME:
			case SECONDS:
			case HONOR_BROKER_PRIORITY:
			case ERROR_BROKER_CONVERSATIONS:
			case NEW_BROKER:
			case DISABLE_BROKER:
			case ENABLE_BROKER:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case READ_COMMITTED_SNAPSHOT:
			case ALLOW_SNAPSHOT_ISOLATION:
			case RECURSIVE_TRIGGERS:
			case QUOTED_IDENTIFIER:
			case NUMERIC_ROUNDABORT:
			case CONCAT_NULL_YIELDS_NULL:
			case COMPATIBILITY_LEVEL:
			case ARITHABORT:
			case ANSI_WARNINGS:
			case ANSI_PADDING:
			case ANSI_NULLS:
			case ANSI_NULL_DEFAULT:
			case PAGE_VERIFY:
			case CHECKSUM:
			case TORN_PAGE_DETECTION:
			case BULK_LOGGED:
			case RECOVERY:
			case TOTAL_EXECUTION_CPU_TIME_MS:
			case TOTAL_COMPILE_CPU_TIME_MS:
			case STALE_CAPTURE_POLICY_THRESHOLD:
			case EXECUTION_COUNT:
			case QUERY_CAPTURE_POLICY:
			case WAIT_STATS_CAPTURE_MODE:
			case MAX_PLANS_PER_QUERY:
			case QUERY_CAPTURE_MODE:
			case SIZE_BASED_CLEANUP_MODE:
			case INTERVAL_LENGTH_MINUTES:
			case MAX_STORAGE_SIZE_MB:
			case DATA_FLUSH_INTERVAL_SECONDS:
			case CLEANUP_POLICY:
			case CUSTOM:
			case STALE_QUERY_THRESHOLD_DAYS:
			case OPERATION_MODE:
			case QUERY_STORE:
			case CURSOR_DEFAULT:
			case GLOBAL:
			case CURSOR_CLOSE_ON_COMMIT:
			case HOURS:
			case CHANGE_RETENTION:
			case AUTO_CLEANUP:
			case CHANGE_TRACKING:
			case AUTOMATIC_TUNING:
			case FORCE_LAST_GOOD_PLAN:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_CREATE_STATISTICS:
			case INCREMENTAL:
			case AUTO_CLOSE:
			case DATA_RETENTION:
			case TEMPORAL_HISTORY_RETENTION:
			case EDITION:
			case MIXED_PAGE_ALLOCATION:
			case DISABLED:
			case ALLOWED:
			case HADR:
			case MULTI_USER:
			case RESTRICTED_USER:
			case SINGLE_USER:
			case OFFLINE:
			case EMERGENCY:
			case SUSPEND:
			case DATE_CORRELATION_OPTIMIZATION:
			case ELASTIC_POOL:
			case SERVICE_OBJECTIVE:
			case DATABASE_NAME:
			case ALLOW_CONNECTIONS:
			case GEO:
			case NAMED:
			case DATEFIRST:
			case BACKUP_STORAGE_REDUNDANCY:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case SECONDARY:
			case FAILOVER:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case INLINE:
			case NESTED_TRIGGERS:
			case TRANSFORM_NOISE_WORDS:
			case TWO_DIGIT_YEAR_CUTOFF:
			case PERSISTENT_LOG_BUFFER:
			case DIRECTORY_NAME:
			case DATEFORMAT:
			case DELAYED_DURABILITY:
			case AUTHORIZATION:
			case TRANSFER:
			case PROVIDER:
			case SID:
			case SEARCH:
			case MEMBER:
			case JSON:
			case OPENQUERY:
			case IDENTIFIER_:
			case DELIMITED_IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(4025);
				variableTableColumnDefinition();
				}
				break;
			case PRIMARY:
			case UNIQUE:
			case CHECK:
				enterOuterAlt(_localctx, 2);
				{
				setState(4026);
				variableTableConstraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VariableTableColumnDefinitionContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public VariableTableColumnConstraintContext variableTableColumnConstraint() {
			return getRuleContext(VariableTableColumnConstraintContext.class,0);
		}
		public DataTypeNameContext dataTypeName() {
			return getRuleContext(DataTypeNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(SQLServerStatementParser.AS, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode IDENTITY() { return getToken(SQLServerStatementParser.IDENTITY, 0); }
		public TerminalNode COLLATE() { return getToken(SQLServerStatementParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode ROWGUIDCOL() { return getToken(SQLServerStatementParser.ROWGUIDCOL, 0); }
		public TerminalNode DEFAULT() { return getToken(SQLServerStatementParser.DEFAULT, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<TerminalNode> NUMBER_() { return getTokens(SQLServerStatementParser.NUMBER_); }
		public TerminalNode NUMBER_(int i) {
			return getToken(SQLServerStatementParser.NUMBER_, i);
		}
		public TerminalNode COMMA_() { return getToken(SQLServerStatementParser.COMMA_, 0); }
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public VariableTableColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableTableColumnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterVariableTableColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitVariableTableColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitVariableTableColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableTableColumnDefinitionContext variableTableColumnDefinition() throws RecognitionException {
		VariableTableColumnDefinitionContext _localctx = new VariableTableColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_variableTableColumnDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4029);
			columnName();
			setState(4033);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHAR:
			case DATE:
			case TIME:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case BIT:
			case SMALLINT:
			case INT:
			case TINYINT:
			case NUMERIC:
			case FLOAT:
			case BIGINT:
			case TEXT:
			case VARCHAR:
			case BINARY:
			case XML:
			case MONEY:
			case SMALLMONEY:
			case DATETIMEOFFSET:
			case DATETIME:
			case DATETIME2:
			case SMALLDATETIME:
			case NCHAR:
			case NVARCHAR:
			case NTEXT:
			case VARBINARY:
			case IMAGE:
			case SQL_VARIANT:
			case UNIQUEIDENTIFIER:
			case HIERARCHYID:
			case GEOMETRY:
			case GEOGRAPHY:
			case IDENTIFIER_:
				{
				setState(4030);
				dataTypeName();
				}
				break;
			case AS:
				{
				setState(4031);
				match(AS);
				setState(4032);
				expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4037);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(4035);
				match(COLLATE);
				setState(4036);
				collationName();
				}
			}

			setState(4051);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RP_:
			case COMMA_:
			case PRIMARY:
			case UNIQUE:
			case WITH:
			case NOT:
			case NULL:
			case DEFAULT:
			case CHECK:
			case ROWGUIDCOL:
				{
				setState(4041);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(4039);
					match(DEFAULT);
					setState(4040);
					expr(0);
					}
				}

				}
				break;
			case IDENTITY:
				{
				setState(4043);
				match(IDENTITY);
				setState(4049);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(4044);
					match(LP_);
					setState(4045);
					match(NUMBER_);
					setState(4046);
					match(COMMA_);
					setState(4047);
					match(NUMBER_);
					setState(4048);
					match(RP_);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4054);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROWGUIDCOL) {
				{
				setState(4053);
				match(ROWGUIDCOL);
				}
			}

			setState(4056);
			variableTableColumnConstraint();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VariableTableColumnConstraintContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(SQLServerStatementParser.NULL, 0); }
		public TerminalNode NOT() { return getToken(SQLServerStatementParser.NOT, 0); }
		public TerminalNode PRIMARY() { return getToken(SQLServerStatementParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(SQLServerStatementParser.KEY, 0); }
		public TerminalNode UNIQUE() { return getToken(SQLServerStatementParser.UNIQUE, 0); }
		public TerminalNode CHECK() { return getToken(SQLServerStatementParser.CHECK, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public IndexOptionContext indexOption() {
			return getRuleContext(IndexOptionContext.class,0);
		}
		public VariableTableColumnConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableTableColumnConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterVariableTableColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitVariableTableColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitVariableTableColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableTableColumnConstraintContext variableTableColumnConstraint() throws RecognitionException {
		VariableTableColumnConstraintContext _localctx = new VariableTableColumnConstraintContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_variableTableColumnConstraint);
		try {
			setState(4075);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,402,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4061);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NULL:
					{
					setState(4058);
					match(NULL);
					}
					break;
				case NOT:
					{
					setState(4059);
					match(NOT);
					setState(4060);
					match(NULL);
					}
					break;
				case RP_:
				case COMMA_:
					break;
				default:
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4066);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PRIMARY:
					{
					setState(4063);
					match(PRIMARY);
					setState(4064);
					match(KEY);
					}
					break;
				case UNIQUE:
					{
					setState(4065);
					match(UNIQUE);
					}
					break;
				case RP_:
				case COMMA_:
					break;
				default:
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4068);
				match(CHECK);
				setState(4069);
				match(LP_);
				setState(4070);
				expr(0);
				setState(4071);
				match(RP_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4073);
				match(WITH);
				setState(4074);
				indexOption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VariableTableConstraintContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public TerminalNode PRIMARY() { return getToken(SQLServerStatementParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(SQLServerStatementParser.KEY, 0); }
		public TerminalNode UNIQUE() { return getToken(SQLServerStatementParser.UNIQUE, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public TerminalNode CHECK() { return getToken(SQLServerStatementParser.CHECK, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public VariableTableConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableTableConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterVariableTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitVariableTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitVariableTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableTableConstraintContext variableTableConstraint() throws RecognitionException {
		VariableTableConstraintContext _localctx = new VariableTableConstraintContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_variableTableConstraint);
		int _la;
		try {
			setState(4095);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
			case UNIQUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4080);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PRIMARY:
					{
					setState(4077);
					match(PRIMARY);
					setState(4078);
					match(KEY);
					}
					break;
				case UNIQUE:
					{
					setState(4079);
					match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4082);
				match(LP_);
				setState(4083);
				columnName();
				setState(4088);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(4084);
					match(COMMA_);
					setState(4085);
					columnName();
					}
					}
					setState(4090);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4091);
				match(RP_);
				}
				break;
			case CHECK:
				enterOuterAlt(_localctx, 2);
				{
				setState(4093);
				match(CHECK);
				setState(4094);
				expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetVariableContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SQLServerStatementParser.SET, 0); }
		public VariableNameContext variableName() {
			return getRuleContext(VariableNameContext.class,0);
		}
		public SetVariableClauseContext setVariableClause() {
			return getRuleContext(SetVariableClauseContext.class,0);
		}
		public SetVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSetVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSetVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSetVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetVariableContext setVariable() throws RecognitionException {
		SetVariableContext _localctx = new SetVariableContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_setVariable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4097);
			match(SET);
			setState(4098);
			variableName();
			setState(4099);
			setVariableClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetVariableClauseContext extends ParserRuleContext {
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> DOT_() { return getTokens(SQLServerStatementParser.DOT_); }
		public TerminalNode DOT_(int i) {
			return getToken(SQLServerStatementParser.DOT_, i);
		}
		public TerminalNode NCHAR_TEXT() { return getToken(SQLServerStatementParser.NCHAR_TEXT, 0); }
		public CompoundOperationContext compoundOperation() {
			return getRuleContext(CompoundOperationContext.class,0);
		}
		public CursorVariableContext cursorVariable() {
			return getRuleContext(CursorVariableContext.class,0);
		}
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public SetVariableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setVariableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSetVariableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSetVariableClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSetVariableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetVariableClauseContext setVariableClause() throws RecognitionException {
		SetVariableClauseContext _localctx = new SetVariableClauseContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_setVariableClause);
		int _la;
		try {
			setState(4124);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,408,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4103);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT_) {
					{
					setState(4101);
					match(DOT_);
					setState(4102);
					identifier();
					}
				}

				setState(4105);
				match(EQ_);
				setState(4112);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,407,_ctx) ) {
				case 1:
					{
					setState(4106);
					expr(0);
					}
					break;
				case 2:
					{
					setState(4107);
					identifier();
					setState(4108);
					match(DOT_);
					setState(4109);
					identifier();
					}
					break;
				case 3:
					{
					setState(4111);
					match(NCHAR_TEXT);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4114);
				compoundOperation();
				setState(4115);
				expr(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4117);
				match(EQ_);
				setState(4118);
				cursorVariable();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4119);
				match(EQ_);
				setState(4120);
				match(LP_);
				setState(4121);
				select();
				setState(4122);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CursorVariableContext extends ParserRuleContext {
		public VariableNameContext variableName() {
			return getRuleContext(VariableNameContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(SQLServerStatementParser.CURSOR, 0); }
		public CursorClauseContext cursorClause() {
			return getRuleContext(CursorClauseContext.class,0);
		}
		public List<TerminalNode> FOR() { return getTokens(SQLServerStatementParser.FOR); }
		public TerminalNode FOR(int i) {
			return getToken(SQLServerStatementParser.FOR, i);
		}
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public TerminalNode READ_ONLY() { return getToken(SQLServerStatementParser.READ_ONLY, 0); }
		public TerminalNode UPDATE() { return getToken(SQLServerStatementParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(SQLServerStatementParser.OF, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public CursorVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCursorVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCursorVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCursorVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorVariableContext cursorVariable() throws RecognitionException {
		CursorVariableContext _localctx = new CursorVariableContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_cursorVariable);
		int _la;
		try {
			setState(4145);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TRUNCATE:
			case SCHEMA:
			case TABLE:
			case COLUMNS:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case RIGHT:
			case OFF:
			case GROUP:
			case LIMIT:
			case OFFSET:
			case SAVEPOINT:
			case BOOLEAN:
			case ARRAY:
			case DATE:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MICROSECOND:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case AVG:
			case ENABLE:
			case DISABLE:
			case INSTANCE:
			case DO:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case NEXT:
			case NAME:
			case INTEGER:
			case TYPE:
			case TEXT:
			case VIEWS:
			case READ_ONLY:
			case DATABASE:
			case RETURNS:
			case DATEPART:
			case PASSWORD:
			case TARGET:
			case BINARY:
			case HIDDEN_:
			case MOD:
			case PARTITION:
			case PARTITIONS:
			case TOP:
			case ROW:
			case ROWS:
			case XOR:
			case ALWAYS:
			case USER:
			case ROLE:
			case START:
			case ACTION:
			case ALGORITHM:
			case AUTO:
			case BLOCKERS:
			case CLUSTERED:
			case NONCLUSTERED:
			case COLUMNSTORE:
			case CONTENT:
			case YEARS:
			case MONTHS:
			case WEEKS:
			case DAYS:
			case MINUTES:
			case DENY:
			case DETERMINISTIC:
			case DISTRIBUTION:
			case DOCUMENT:
			case DURABILITY:
			case ENCRYPTED:
			case FILESTREAM:
			case FILETABLE:
			case FILLFACTOR:
			case FOLLOWING:
			case HASH:
			case HEAP:
			case INBOUND:
			case OUTBOUND:
			case UNBOUNDED:
			case INFINITE:
			case LOGIN:
			case MASKED:
			case MAXDOP:
			case MOVE:
			case NOCHECK:
			case OBJECT:
			case ONLINE:
			case OVER:
			case PAGE:
			case PAUSED:
			case PERIOD:
			case PERSISTED:
			case PRECEDING:
			case RANDOMIZED:
			case RANGE:
			case REBUILD:
			case REPLICATE:
			case REPLICATION:
			case RESUMABLE:
			case ROWGUIDCOL:
			case SAVE:
			case SELF:
			case SPARSE:
			case SWITCH:
			case TRAN:
			case TRANCOUNT:
			case CONTROL:
			case CONCAT:
			case TAKE:
			case OWNERSHIP:
			case DEFINITION:
			case APPLICATION:
			case ASSEMBLY:
			case SYMMETRIC:
			case ASYMMETRIC:
			case SERVER:
			case RECEIVE:
			case CHANGE:
			case TRACE:
			case TRACKING:
			case RESOURCES:
			case SETTINGS:
			case STATE:
			case AVAILABILITY:
			case CREDENTIAL:
			case ENDPOINT:
			case EVENT:
			case NOTIFICATION:
			case LINKED:
			case AUDIT:
			case DDL:
			case XML:
			case IMPERSONATE:
			case SECURABLES:
			case AUTHENTICATE:
			case EXTERNAL:
			case ACCESS:
			case ADMINISTER:
			case BULK:
			case OPERATIONS:
			case UNSAFE:
			case SHUTDOWN:
			case SCOPED:
			case CONFIGURATION:
			case DATASPACE:
			case SERVICE:
			case CERTIFICATE:
			case CONTRACT:
			case ENCRYPTION:
			case MASTER:
			case DATA:
			case SOURCE:
			case FILE:
			case FORMAT:
			case LIBRARY:
			case FULLTEXT:
			case MASK:
			case UNMASK:
			case MESSAGE:
			case REMOTE:
			case BINDING:
			case ROUTE:
			case SECURITY:
			case POLICY:
			case AGGREGATE:
			case QUEUE:
			case RULE:
			case SYNONYM:
			case COLLECTION:
			case SCRIPT:
			case KILL:
			case BACKUP:
			case LOG:
			case SHOWPLAN:
			case SUBSCRIBE:
			case QUERY:
			case NOTIFICATIONS:
			case CHECKPOINT:
			case SEQUENCE:
			case ABORT_AFTER_WAIT:
			case ALLOW_PAGE_LOCKS:
			case ALLOW_ROW_LOCKS:
			case ALL_SPARSE_COLUMNS:
			case BUCKET_COUNT:
			case COLUMNSTORE_ARCHIVE:
			case COLUMN_ENCRYPTION_KEY:
			case COLUMN_SET:
			case COMPRESSION_DELAY:
			case DATABASE_DEAULT:
			case DATA_COMPRESSION:
			case DATA_CONSISTENCY_CHECK:
			case ENCRYPTION_TYPE:
			case SYSTEM_TIME:
			case SYSTEM_VERSIONING:
			case TEXTIMAGE_ON:
			case WAIT_AT_LOW_PRIORITY:
			case STATISTICS_INCREMENTAL:
			case STATISTICS_NORECOMPUTE:
			case ROUND_ROBIN:
			case SCHEMA_AND_DATA:
			case SCHEMA_ONLY:
			case SORT_IN_TEMPDB:
			case IGNORE_DUP_KEY:
			case IMPLICIT_TRANSACTIONS:
			case MAX_DURATION:
			case MEMORY_OPTIMIZED:
			case MIGRATION_STATE:
			case PAD_INDEX:
			case REMOTE_DATA_ARCHIVE:
			case FILESTREAM_ON:
			case FILETABLE_COLLATE_FILENAME:
			case FILETABLE_DIRECTORY:
			case FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME:
			case FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME:
			case FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME:
			case FILTER_PREDICATE:
			case HISTORY_RETENTION_PERIOD:
			case HISTORY_TABLE:
			case LOCK_ESCALATION:
			case DROP_EXISTING:
			case ROW_NUMBER:
			case FIRST:
			case DATETIME2:
			case OUTPUT:
			case INSERTED:
			case DELETED:
			case FILENAME:
			case SIZE:
			case MAXSIZE:
			case FILEGROWTH:
			case UNLIMITED:
			case KB:
			case MB:
			case GB:
			case TB:
			case CONTAINS:
			case MEMORY_OPTIMIZED_DATA:
			case FILEGROUP:
			case NON_TRANSACTED_ACCESS:
			case DB_CHAINING:
			case TRUSTWORTHY:
			case FORWARD_ONLY:
			case KEYSET:
			case FAST_FORWARD:
			case SCROLL_LOCKS:
			case OPTIMISTIC:
			case TYPE_WARNING:
			case SCHEMABINDING:
			case CALLER:
			case INPUT:
			case OWNER:
			case SNAPSHOT:
			case REPEATABLE:
			case SERIALIZABLE:
			case NATIVE_COMPILATION:
			case VIEW_METADATA:
			case INSTEAD:
			case APPEND:
			case INCREMENT:
			case CACHE:
			case MINVALUE:
			case MAXVALUE:
			case RESTART:
			case LOB_COMPACTION:
			case COMPRESS_ALL_ROW_GROUPS:
			case REORGANIZE:
			case RESUME:
			case PAUSE:
			case ABORT:
			case ACCELERATED_DATABASE_RECOVERY:
			case PERSISTENT_VERSION_STORE_FILEGROUP:
			case IMMEDIATE:
			case NO_WAIT:
			case TARGET_RECOVERY_TIME:
			case SECONDS:
			case HONOR_BROKER_PRIORITY:
			case ERROR_BROKER_CONVERSATIONS:
			case NEW_BROKER:
			case DISABLE_BROKER:
			case ENABLE_BROKER:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case READ_COMMITTED_SNAPSHOT:
			case ALLOW_SNAPSHOT_ISOLATION:
			case RECURSIVE_TRIGGERS:
			case QUOTED_IDENTIFIER:
			case NUMERIC_ROUNDABORT:
			case CONCAT_NULL_YIELDS_NULL:
			case COMPATIBILITY_LEVEL:
			case ARITHABORT:
			case ANSI_WARNINGS:
			case ANSI_PADDING:
			case ANSI_NULLS:
			case ANSI_NULL_DEFAULT:
			case PAGE_VERIFY:
			case CHECKSUM:
			case TORN_PAGE_DETECTION:
			case BULK_LOGGED:
			case RECOVERY:
			case TOTAL_EXECUTION_CPU_TIME_MS:
			case TOTAL_COMPILE_CPU_TIME_MS:
			case STALE_CAPTURE_POLICY_THRESHOLD:
			case EXECUTION_COUNT:
			case QUERY_CAPTURE_POLICY:
			case WAIT_STATS_CAPTURE_MODE:
			case MAX_PLANS_PER_QUERY:
			case QUERY_CAPTURE_MODE:
			case SIZE_BASED_CLEANUP_MODE:
			case INTERVAL_LENGTH_MINUTES:
			case MAX_STORAGE_SIZE_MB:
			case DATA_FLUSH_INTERVAL_SECONDS:
			case CLEANUP_POLICY:
			case CUSTOM:
			case STALE_QUERY_THRESHOLD_DAYS:
			case OPERATION_MODE:
			case QUERY_STORE:
			case CURSOR_DEFAULT:
			case GLOBAL:
			case CURSOR_CLOSE_ON_COMMIT:
			case HOURS:
			case CHANGE_RETENTION:
			case AUTO_CLEANUP:
			case CHANGE_TRACKING:
			case AUTOMATIC_TUNING:
			case FORCE_LAST_GOOD_PLAN:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_CREATE_STATISTICS:
			case INCREMENTAL:
			case AUTO_CLOSE:
			case DATA_RETENTION:
			case TEMPORAL_HISTORY_RETENTION:
			case EDITION:
			case MIXED_PAGE_ALLOCATION:
			case DISABLED:
			case ALLOWED:
			case HADR:
			case MULTI_USER:
			case RESTRICTED_USER:
			case SINGLE_USER:
			case OFFLINE:
			case EMERGENCY:
			case SUSPEND:
			case DATE_CORRELATION_OPTIMIZATION:
			case ELASTIC_POOL:
			case SERVICE_OBJECTIVE:
			case DATABASE_NAME:
			case ALLOW_CONNECTIONS:
			case GEO:
			case NAMED:
			case DATEFIRST:
			case BACKUP_STORAGE_REDUNDANCY:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case SECONDARY:
			case FAILOVER:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case INLINE:
			case NESTED_TRIGGERS:
			case TRANSFORM_NOISE_WORDS:
			case TWO_DIGIT_YEAR_CUTOFF:
			case PERSISTENT_LOG_BUFFER:
			case DIRECTORY_NAME:
			case DATEFORMAT:
			case DELAYED_DURABILITY:
			case AUTHORIZATION:
			case TRANSFER:
			case PROVIDER:
			case SID:
			case SEARCH:
			case MEMBER:
			case JSON:
			case OPENQUERY:
			case IDENTIFIER_:
			case DELIMITED_IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(4126);
				variableName();
				}
				break;
			case CURSOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(4127);
				match(CURSOR);
				setState(4128);
				cursorClause();
				setState(4129);
				match(FOR);
				setState(4130);
				select();
				{
				setState(4131);
				match(FOR);
				setState(4143);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case READ_ONLY:
					{
					setState(4132);
					match(READ_ONLY);
					}
					break;
				case UPDATE:
					{
					setState(4133);
					match(UPDATE);
					{
					setState(4134);
					match(OF);
					setState(4135);
					name();
					setState(4140);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA_) {
						{
						{
						setState(4136);
						match(COMMA_);
						setState(4137);
						name();
						}
						}
						setState(4142);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CursorClauseContext extends ParserRuleContext {
		public TerminalNode TYPE_WARNING() { return getToken(SQLServerStatementParser.TYPE_WARNING, 0); }
		public TerminalNode FORWARD_ONLY() { return getToken(SQLServerStatementParser.FORWARD_ONLY, 0); }
		public TerminalNode SCROLL() { return getToken(SQLServerStatementParser.SCROLL, 0); }
		public TerminalNode STATIC() { return getToken(SQLServerStatementParser.STATIC, 0); }
		public TerminalNode KEYSET() { return getToken(SQLServerStatementParser.KEYSET, 0); }
		public TerminalNode DYNAMIC() { return getToken(SQLServerStatementParser.DYNAMIC, 0); }
		public TerminalNode FAST_FORWARD() { return getToken(SQLServerStatementParser.FAST_FORWARD, 0); }
		public TerminalNode READ_ONLY() { return getToken(SQLServerStatementParser.READ_ONLY, 0); }
		public TerminalNode SCROLL_LOCKS() { return getToken(SQLServerStatementParser.SCROLL_LOCKS, 0); }
		public TerminalNode OPTIMISTIC() { return getToken(SQLServerStatementParser.OPTIMISTIC, 0); }
		public CursorClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCursorClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCursorClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCursorClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorClauseContext cursorClause() throws RecognitionException {
		CursorClauseContext _localctx = new CursorClauseContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_cursorClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4148);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORWARD_ONLY || _la==SCROLL) {
				{
				setState(4147);
				_la = _input.LA(1);
				if ( !(_la==FORWARD_ONLY || _la==SCROLL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4151);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & 15L) != 0)) {
				{
				setState(4150);
				_la = _input.LA(1);
				if ( !(((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & 15L) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4154);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==READ_ONLY || _la==SCROLL_LOCKS || _la==OPTIMISTIC) {
				{
				setState(4153);
				_la = _input.LA(1);
				if ( !(_la==READ_ONLY || _la==SCROLL_LOCKS || _la==OPTIMISTIC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4157);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TYPE_WARNING) {
				{
				setState(4156);
				match(TYPE_WARNING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CompoundOperationContext extends ParserRuleContext {
		public TerminalNode PLUS_() { return getToken(SQLServerStatementParser.PLUS_, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode MINUS_() { return getToken(SQLServerStatementParser.MINUS_, 0); }
		public TerminalNode ASTERISK_() { return getToken(SQLServerStatementParser.ASTERISK_, 0); }
		public TerminalNode SLASH_() { return getToken(SQLServerStatementParser.SLASH_, 0); }
		public TerminalNode MOD_() { return getToken(SQLServerStatementParser.MOD_, 0); }
		public TerminalNode AMPERSAND_() { return getToken(SQLServerStatementParser.AMPERSAND_, 0); }
		public TerminalNode CARET_() { return getToken(SQLServerStatementParser.CARET_, 0); }
		public TerminalNode VERTICAL_BAR_() { return getToken(SQLServerStatementParser.VERTICAL_BAR_, 0); }
		public CompoundOperationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compoundOperation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCompoundOperation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCompoundOperation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCompoundOperation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompoundOperationContext compoundOperation() throws RecognitionException {
		CompoundOperationContext _localctx = new CompoundOperationContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_compoundOperation);
		try {
			setState(4175);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PLUS_:
				enterOuterAlt(_localctx, 1);
				{
				setState(4159);
				match(PLUS_);
				setState(4160);
				match(EQ_);
				}
				break;
			case MINUS_:
				enterOuterAlt(_localctx, 2);
				{
				setState(4161);
				match(MINUS_);
				setState(4162);
				match(EQ_);
				}
				break;
			case ASTERISK_:
				enterOuterAlt(_localctx, 3);
				{
				setState(4163);
				match(ASTERISK_);
				setState(4164);
				match(EQ_);
				}
				break;
			case SLASH_:
				enterOuterAlt(_localctx, 4);
				{
				setState(4165);
				match(SLASH_);
				setState(4166);
				match(EQ_);
				}
				break;
			case MOD_:
				enterOuterAlt(_localctx, 5);
				{
				setState(4167);
				match(MOD_);
				setState(4168);
				match(EQ_);
				}
				break;
			case AMPERSAND_:
				enterOuterAlt(_localctx, 6);
				{
				setState(4169);
				match(AMPERSAND_);
				setState(4170);
				match(EQ_);
				}
				break;
			case CARET_:
				enterOuterAlt(_localctx, 7);
				{
				setState(4171);
				match(CARET_);
				setState(4172);
				match(EQ_);
				}
				break;
			case VERTICAL_BAR_:
				enterOuterAlt(_localctx, 8);
				{
				setState(4173);
				match(VERTICAL_BAR_);
				setState(4174);
				match(EQ_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FuncParametersContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public List<VariableNameContext> variableName() {
			return getRuleContexts(VariableNameContext.class);
		}
		public VariableNameContext variableName(int i) {
			return getRuleContext(VariableNameContext.class,i);
		}
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public List<TerminalNode> AS() { return getTokens(SQLServerStatementParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(SQLServerStatementParser.AS, i);
		}
		public List<OwnerContext> owner() {
			return getRuleContexts(OwnerContext.class);
		}
		public OwnerContext owner(int i) {
			return getRuleContext(OwnerContext.class,i);
		}
		public List<TerminalNode> DOT_() { return getTokens(SQLServerStatementParser.DOT_); }
		public TerminalNode DOT_(int i) {
			return getToken(SQLServerStatementParser.DOT_, i);
		}
		public List<TerminalNode> EQ_() { return getTokens(SQLServerStatementParser.EQ_); }
		public TerminalNode EQ_(int i) {
			return getToken(SQLServerStatementParser.EQ_, i);
		}
		public List<IgnoredIdentifierContext> ignoredIdentifier() {
			return getRuleContexts(IgnoredIdentifierContext.class);
		}
		public IgnoredIdentifierContext ignoredIdentifier(int i) {
			return getRuleContext(IgnoredIdentifierContext.class,i);
		}
		public List<TerminalNode> READONLY() { return getTokens(SQLServerStatementParser.READONLY); }
		public TerminalNode READONLY(int i) {
			return getToken(SQLServerStatementParser.READONLY, i);
		}
		public FuncParametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcParameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterFuncParameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitFuncParameters(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitFuncParameters(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncParametersContext funcParameters() throws RecognitionException {
		FuncParametersContext _localctx = new FuncParametersContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_funcParameters);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4177);
			match(LP_);
			setState(4197);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 53)) & ~0x3f) == 0 && ((1L << (_la - 53)) & 35737886458179L) != 0) || ((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & 331536634476137569L) != 0) || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & 288230376740488193L) != 0) || ((((_la - 248)) & ~0x3f) == 0 && ((1L << (_la - 248)) & -2308112406049976835L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -33030145L) != 0) || ((((_la - 376)) & ~0x3f) == 0 && ((1L << (_la - 376)) & -1L) != 0) || ((((_la - 440)) & ~0x3f) == 0 && ((1L << (_la - 440)) & 15032922111L) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & 72020040051130367L) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & -1L) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & 2405748621443071L) != 0) || ((((_la - 712)) & ~0x3f) == 0 && ((1L << (_la - 712)) & 6324225L) != 0)) {
				{
				{
				setState(4178);
				variableName();
				setState(4180);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4179);
					match(AS);
					}
				}

				setState(4185);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
				case 1:
					{
					setState(4182);
					owner();
					setState(4183);
					match(DOT_);
					}
					break;
				}
				setState(4187);
				dataType();
				setState(4190);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(4188);
					match(EQ_);
					setState(4189);
					ignoredIdentifier();
					}
				}

				setState(4193);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==READONLY) {
					{
					setState(4192);
					match(READONLY);
					}
				}

				}
				}
				setState(4199);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4200);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FuncReturnsContext extends ParserRuleContext {
		public FuncScalarReturnContext funcScalarReturn() {
			return getRuleContext(FuncScalarReturnContext.class,0);
		}
		public FuncInlineReturnContext funcInlineReturn() {
			return getRuleContext(FuncInlineReturnContext.class,0);
		}
		public FuncMutiReturnContext funcMutiReturn() {
			return getRuleContext(FuncMutiReturnContext.class,0);
		}
		public FuncReturnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcReturns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterFuncReturns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitFuncReturns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitFuncReturns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncReturnsContext funcReturns() throws RecognitionException {
		FuncReturnsContext _localctx = new FuncReturnsContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_funcReturns);
		try {
			setState(4205);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,422,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4202);
				funcScalarReturn();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4203);
				funcInlineReturn();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4204);
				funcMutiReturn();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FuncMutiReturnContext extends ParserRuleContext {
		public TerminalNode RETURNS() { return getToken(SQLServerStatementParser.RETURNS, 0); }
		public VariableNameContext variableName() {
			return getRuleContext(VariableNameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SQLServerStatementParser.TABLE, 0); }
		public CreateTableDefinitionsContext createTableDefinitions() {
			return getRuleContext(CreateTableDefinitionsContext.class,0);
		}
		public TerminalNode BEGIN() { return getToken(SQLServerStatementParser.BEGIN, 0); }
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(SQLServerStatementParser.RETURN, 0); }
		public TerminalNode END() { return getToken(SQLServerStatementParser.END, 0); }
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public List<FunctionOptionContext> functionOption() {
			return getRuleContexts(FunctionOptionContext.class);
		}
		public FunctionOptionContext functionOption(int i) {
			return getRuleContext(FunctionOptionContext.class,i);
		}
		public TerminalNode AS() { return getToken(SQLServerStatementParser.AS, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public FuncMutiReturnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcMutiReturn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterFuncMutiReturn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitFuncMutiReturn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitFuncMutiReturn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncMutiReturnContext funcMutiReturn() throws RecognitionException {
		FuncMutiReturnContext _localctx = new FuncMutiReturnContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_funcMutiReturn);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4207);
			match(RETURNS);
			setState(4208);
			variableName();
			setState(4209);
			match(TABLE);
			setState(4210);
			createTableDefinitions();
			setState(4220);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4211);
				match(WITH);
				setState(4212);
				functionOption();
				setState(4217);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(4213);
					match(COMMA_);
					setState(4214);
					functionOption();
					}
					}
					setState(4219);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(4223);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(4222);
				match(AS);
				}
			}

			setState(4225);
			match(BEGIN);
			setState(4226);
			compoundStatement();
			setState(4227);
			match(RETURN);
			setState(4228);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FuncInlineReturnContext extends ParserRuleContext {
		public TerminalNode RETURNS() { return getToken(SQLServerStatementParser.RETURNS, 0); }
		public TerminalNode TABLE() { return getToken(SQLServerStatementParser.TABLE, 0); }
		public TerminalNode RETURN() { return getToken(SQLServerStatementParser.RETURN, 0); }
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public List<FunctionOptionContext> functionOption() {
			return getRuleContexts(FunctionOptionContext.class);
		}
		public FunctionOptionContext functionOption(int i) {
			return getRuleContext(FunctionOptionContext.class,i);
		}
		public TerminalNode AS() { return getToken(SQLServerStatementParser.AS, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public FuncInlineReturnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcInlineReturn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterFuncInlineReturn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitFuncInlineReturn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitFuncInlineReturn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncInlineReturnContext funcInlineReturn() throws RecognitionException {
		FuncInlineReturnContext _localctx = new FuncInlineReturnContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_funcInlineReturn);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4230);
			match(RETURNS);
			setState(4231);
			match(TABLE);
			setState(4241);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4232);
				match(WITH);
				setState(4233);
				functionOption();
				setState(4238);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(4234);
					match(COMMA_);
					setState(4235);
					functionOption();
					}
					}
					setState(4240);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(4244);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(4243);
				match(AS);
				}
			}

			setState(4246);
			match(RETURN);
			setState(4248);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(4247);
				match(LP_);
				}
			}

			setState(4250);
			select();
			setState(4252);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RP_) {
				{
				setState(4251);
				match(RP_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FuncScalarReturnContext extends ParserRuleContext {
		public TerminalNode RETURNS() { return getToken(SQLServerStatementParser.RETURNS, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode BEGIN() { return getToken(SQLServerStatementParser.BEGIN, 0); }
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(SQLServerStatementParser.RETURN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode SEMI_() { return getToken(SQLServerStatementParser.SEMI_, 0); }
		public TerminalNode END() { return getToken(SQLServerStatementParser.END, 0); }
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public List<FunctionOptionContext> functionOption() {
			return getRuleContexts(FunctionOptionContext.class);
		}
		public FunctionOptionContext functionOption(int i) {
			return getRuleContext(FunctionOptionContext.class,i);
		}
		public TerminalNode AS() { return getToken(SQLServerStatementParser.AS, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public FuncScalarReturnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcScalarReturn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterFuncScalarReturn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitFuncScalarReturn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitFuncScalarReturn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncScalarReturnContext funcScalarReturn() throws RecognitionException {
		FuncScalarReturnContext _localctx = new FuncScalarReturnContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_funcScalarReturn);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4254);
			match(RETURNS);
			setState(4255);
			dataType();
			setState(4265);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4256);
				match(WITH);
				setState(4257);
				functionOption();
				setState(4262);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(4258);
					match(COMMA_);
					setState(4259);
					functionOption();
					}
					}
					setState(4264);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(4268);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(4267);
				match(AS);
				}
			}

			setState(4270);
			match(BEGIN);
			setState(4271);
			compoundStatement();
			setState(4272);
			match(RETURN);
			setState(4273);
			expr(0);
			setState(4274);
			match(SEMI_);
			setState(4275);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableTypeDefinitionContext extends ParserRuleContext {
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public ColumnConstraintContext columnConstraint() {
			return getRuleContext(ColumnConstraintContext.class,0);
		}
		public ComputedColumnDefinitionContext computedColumnDefinition() {
			return getRuleContext(ComputedColumnDefinitionContext.class,0);
		}
		public List<TableConstraintContext> tableConstraint() {
			return getRuleContexts(TableConstraintContext.class);
		}
		public TableConstraintContext tableConstraint(int i) {
			return getRuleContext(TableConstraintContext.class,i);
		}
		public TableTypeDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableTypeDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterTableTypeDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitTableTypeDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitTableTypeDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableTypeDefinitionContext tableTypeDefinition() throws RecognitionException {
		TableTypeDefinitionContext _localctx = new TableTypeDefinitionContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_tableTypeDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4281);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,434,_ctx) ) {
			case 1:
				{
				setState(4277);
				columnDefinition();
				setState(4278);
				columnConstraint();
				}
				break;
			case 2:
				{
				setState(4280);
				computedColumnDefinition();
				}
				break;
			}
			setState(4286);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 31)) & ~0x3f) == 0 && ((1L << (_la - 31)) & 133143986177L) != 0) || _la==CONNECTION || _la==CHECK) {
				{
				{
				setState(4283);
				tableConstraint();
				}
				}
				setState(4288);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CompoundStatementContext extends ParserRuleContext {
		public List<ValidStatementContext> validStatement() {
			return getRuleContexts(ValidStatementContext.class);
		}
		public ValidStatementContext validStatement(int i) {
			return getRuleContext(ValidStatementContext.class,i);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compoundStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCompoundStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCompoundStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCompoundStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompoundStatementContext compoundStatement() throws RecognitionException {
		CompoundStatementContext _localctx = new CompoundStatementContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_compoundStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4292);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 46)) & ~0x3f) == 0 && ((1L << (_la - 46)) & 2147487999L) != 0) || _la==DECLARE) {
				{
				{
				setState(4289);
				validStatement();
				}
				}
				setState(4294);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionOptionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(SQLServerStatementParser.ENCRYPTION, 0); }
		public TerminalNode SCHEMABINDING() { return getToken(SQLServerStatementParser.SCHEMABINDING, 0); }
		public TerminalNode RETURNS() { return getToken(SQLServerStatementParser.RETURNS, 0); }
		public List<TerminalNode> NULL() { return getTokens(SQLServerStatementParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(SQLServerStatementParser.NULL, i);
		}
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode INPUT() { return getToken(SQLServerStatementParser.INPUT, 0); }
		public TerminalNode CALLED() { return getToken(SQLServerStatementParser.CALLED, 0); }
		public ExecuteAsClauseContext executeAsClause() {
			return getRuleContext(ExecuteAsClauseContext.class,0);
		}
		public TerminalNode INLINE() { return getToken(SQLServerStatementParser.INLINE, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode OFF() { return getToken(SQLServerStatementParser.OFF, 0); }
		public FunctionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterFunctionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitFunctionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitFunctionOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionOptionContext functionOption() throws RecognitionException {
		FunctionOptionContext _localctx = new FunctionOptionContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_functionOption);
		int _la;
		try {
			setState(4320);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,442,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4296);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENCRYPTION) {
					{
					setState(4295);
					match(ENCRYPTION);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4299);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SCHEMABINDING) {
					{
					setState(4298);
					match(SCHEMABINDING);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4310);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case RETURNS:
					{
					setState(4301);
					match(RETURNS);
					setState(4302);
					match(NULL);
					setState(4303);
					match(ON);
					setState(4304);
					match(NULL);
					setState(4305);
					match(INPUT);
					}
					break;
				case CALLED:
					{
					setState(4306);
					match(CALLED);
					setState(4307);
					match(ON);
					setState(4308);
					match(NULL);
					setState(4309);
					match(INPUT);
					}
					break;
				case COMMA_:
				case AS:
				case BEGIN:
				case RETURN:
					break;
				default:
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4313);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXECUTE || _la==EXEC) {
					{
					setState(4312);
					executeAsClause();
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4318);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INLINE) {
					{
					setState(4315);
					match(INLINE);
					setState(4316);
					match(EQ_);
					setState(4317);
					_la = _input.LA(1);
					if ( !(_la==ON || _la==OFF) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ValidStatementContext extends ParserRuleContext {
		public CreateTableContext createTable() {
			return getRuleContext(CreateTableContext.class,0);
		}
		public AlterTableContext alterTable() {
			return getRuleContext(AlterTableContext.class,0);
		}
		public DropTableContext dropTable() {
			return getRuleContext(DropTableContext.class,0);
		}
		public TruncateTableContext truncateTable() {
			return getRuleContext(TruncateTableContext.class,0);
		}
		public InsertContext insert() {
			return getRuleContext(InsertContext.class,0);
		}
		public UpdateContext update() {
			return getRuleContext(UpdateContext.class,0);
		}
		public DeleteContext delete() {
			return getRuleContext(DeleteContext.class,0);
		}
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public SetVariableContext setVariable() {
			return getRuleContext(SetVariableContext.class,0);
		}
		public DeclareVariableContext declareVariable() {
			return getRuleContext(DeclareVariableContext.class,0);
		}
		public TerminalNode SEMI_() { return getToken(SQLServerStatementParser.SEMI_, 0); }
		public ValidStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_validStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterValidStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitValidStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitValidStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValidStatementContext validStatement() throws RecognitionException {
		ValidStatementContext _localctx = new ValidStatementContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_validStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4332);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,443,_ctx) ) {
			case 1:
				{
				setState(4322);
				createTable();
				}
				break;
			case 2:
				{
				setState(4323);
				alterTable();
				}
				break;
			case 3:
				{
				setState(4324);
				dropTable();
				}
				break;
			case 4:
				{
				setState(4325);
				truncateTable();
				}
				break;
			case 5:
				{
				setState(4326);
				insert();
				}
				break;
			case 6:
				{
				setState(4327);
				update();
				}
				break;
			case 7:
				{
				setState(4328);
				delete();
				}
				break;
			case 8:
				{
				setState(4329);
				select();
				}
				break;
			case 9:
				{
				setState(4330);
				setVariable();
				}
				break;
			case 10:
				{
				setState(4331);
				declareVariable();
				}
				break;
			}
			setState(4335);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,444,_ctx) ) {
			case 1:
				{
				setState(4334);
				match(SEMI_);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProcParametersContext extends ParserRuleContext {
		public List<ProcParameterContext> procParameter() {
			return getRuleContexts(ProcParameterContext.class);
		}
		public ProcParameterContext procParameter(int i) {
			return getRuleContext(ProcParameterContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public ProcParametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procParameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterProcParameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitProcParameters(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitProcParameters(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcParametersContext procParameters() throws RecognitionException {
		ProcParametersContext _localctx = new ProcParametersContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_procParameters);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4345);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 53)) & ~0x3f) == 0 && ((1L << (_la - 53)) & 35737886458179L) != 0) || ((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & 331536634476137569L) != 0) || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & 288230376740488193L) != 0) || ((((_la - 248)) & ~0x3f) == 0 && ((1L << (_la - 248)) & -2308112406049976835L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -33030145L) != 0) || ((((_la - 376)) & ~0x3f) == 0 && ((1L << (_la - 376)) & -1L) != 0) || ((((_la - 440)) & ~0x3f) == 0 && ((1L << (_la - 440)) & 15032922111L) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & 72020040051130367L) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & -1L) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & 2405748621443071L) != 0) || ((((_la - 712)) & ~0x3f) == 0 && ((1L << (_la - 712)) & 6324225L) != 0)) {
				{
				setState(4337);
				procParameter();
				setState(4342);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(4338);
					match(COMMA_);
					setState(4339);
					procParameter();
					}
					}
					setState(4344);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProcParameterContext extends ParserRuleContext {
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public TerminalNode VARYING() { return getToken(SQLServerStatementParser.VARYING, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public LiteralsContext literals() {
			return getRuleContext(LiteralsContext.class,0);
		}
		public TerminalNode OUT() { return getToken(SQLServerStatementParser.OUT, 0); }
		public TerminalNode OUTPUT() { return getToken(SQLServerStatementParser.OUTPUT, 0); }
		public TerminalNode READONLY() { return getToken(SQLServerStatementParser.READONLY, 0); }
		public ProcParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterProcParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitProcParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitProcParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcParameterContext procParameter() throws RecognitionException {
		ProcParameterContext _localctx = new ProcParameterContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_procParameter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4347);
			variable();
			setState(4349);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VARYING) {
				{
				setState(4348);
				match(VARYING);
				}
			}

			setState(4353);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQ_) {
				{
				setState(4351);
				match(EQ_);
				setState(4352);
				literals();
				}
			}

			setState(4356);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==READONLY || _la==OUTPUT || _la==OUT) {
				{
				setState(4355);
				_la = _input.LA(1);
				if ( !(_la==READONLY || _la==OUTPUT || _la==OUT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateOrAlterProcClauseContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SQLServerStatementParser.AS, 0); }
		public ProcAsClauseContext procAsClause() {
			return getRuleContext(ProcAsClauseContext.class,0);
		}
		public WithCreateProcOptionContext withCreateProcOption() {
			return getRuleContext(WithCreateProcOptionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(SQLServerStatementParser.FOR, 0); }
		public TerminalNode REPLICATION() { return getToken(SQLServerStatementParser.REPLICATION, 0); }
		public CreateOrAlterProcClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOrAlterProcClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateOrAlterProcClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateOrAlterProcClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateOrAlterProcClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOrAlterProcClauseContext createOrAlterProcClause() throws RecognitionException {
		CreateOrAlterProcClauseContext _localctx = new CreateOrAlterProcClauseContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_createOrAlterProcClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4359);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4358);
				withCreateProcOption();
				}
			}

			setState(4363);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4361);
				match(FOR);
				setState(4362);
				match(REPLICATION);
				}
			}

			setState(4365);
			match(AS);
			setState(4366);
			procAsClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WithCreateProcOptionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public List<ProcOptionContext> procOption() {
			return getRuleContexts(ProcOptionContext.class);
		}
		public ProcOptionContext procOption(int i) {
			return getRuleContext(ProcOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public WithCreateProcOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withCreateProcOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterWithCreateProcOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitWithCreateProcOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitWithCreateProcOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithCreateProcOptionContext withCreateProcOption() throws RecognitionException {
		WithCreateProcOptionContext _localctx = new WithCreateProcOptionContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_withCreateProcOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4368);
			match(WITH);
			setState(4377);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 332)) & ~0x3f) == 0 && ((1L << (_la - 332)) & 140737488355331L) != 0) || ((((_la - 502)) & ~0x3f) == 0 && ((1L << (_la - 502)) & 140741783322625L) != 0)) {
				{
				setState(4369);
				procOption();
				setState(4374);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(4370);
					match(COMMA_);
					setState(4371);
					procOption();
					}
					}
					setState(4376);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProcOptionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(SQLServerStatementParser.ENCRYPTION, 0); }
		public TerminalNode RECOMPILE() { return getToken(SQLServerStatementParser.RECOMPILE, 0); }
		public ExecuteAsClauseContext executeAsClause() {
			return getRuleContext(ExecuteAsClauseContext.class,0);
		}
		public TerminalNode NATIVE_COMPILATION() { return getToken(SQLServerStatementParser.NATIVE_COMPILATION, 0); }
		public TerminalNode SCHEMABINDING() { return getToken(SQLServerStatementParser.SCHEMABINDING, 0); }
		public ProcOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterProcOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitProcOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitProcOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcOptionContext procOption() throws RecognitionException {
		ProcOptionContext _localctx = new ProcOptionContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_procOption);
		try {
			setState(4384);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENCRYPTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(4379);
				match(ENCRYPTION);
				}
				break;
			case RECOMPILE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4380);
				match(RECOMPILE);
				}
				break;
			case EXECUTE:
			case EXEC:
				enterOuterAlt(_localctx, 3);
				{
				setState(4381);
				executeAsClause();
				}
				break;
			case NATIVE_COMPILATION:
				enterOuterAlt(_localctx, 4);
				{
				setState(4382);
				match(NATIVE_COMPILATION);
				}
				break;
			case SCHEMABINDING:
				enterOuterAlt(_localctx, 5);
				{
				setState(4383);
				match(SCHEMABINDING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProcAsClauseContext extends ParserRuleContext {
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public TerminalNode BEGIN() { return getToken(SQLServerStatementParser.BEGIN, 0); }
		public TerminalNode END() { return getToken(SQLServerStatementParser.END, 0); }
		public TerminalNode EXTERNAL() { return getToken(SQLServerStatementParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(SQLServerStatementParser.NAME, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public List<OwnerContext> owner() {
			return getRuleContexts(OwnerContext.class);
		}
		public OwnerContext owner(int i) {
			return getRuleContext(OwnerContext.class,i);
		}
		public List<TerminalNode> DOT_() { return getTokens(SQLServerStatementParser.DOT_); }
		public TerminalNode DOT_(int i) {
			return getToken(SQLServerStatementParser.DOT_, i);
		}
		public TerminalNode ATOMIC() { return getToken(SQLServerStatementParser.ATOMIC, 0); }
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public List<ProcSetOptionContext> procSetOption() {
			return getRuleContexts(ProcSetOptionContext.class);
		}
		public ProcSetOptionContext procSetOption(int i) {
			return getRuleContext(ProcSetOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public ProcAsClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procAsClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterProcAsClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitProcAsClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitProcAsClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcAsClauseContext procAsClause() throws RecognitionException {
		ProcAsClauseContext _localctx = new ProcAsClauseContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_procAsClause);
		int _la;
		try {
			setState(4421);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,461,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4387);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BEGIN) {
					{
					setState(4386);
					match(BEGIN);
					}
				}

				setState(4389);
				compoundStatement();
				setState(4391);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==END) {
					{
					setState(4390);
					match(END);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4393);
				match(EXTERNAL);
				setState(4394);
				match(NAME);
				setState(4398);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,457,_ctx) ) {
				case 1:
					{
					setState(4395);
					owner();
					setState(4396);
					match(DOT_);
					}
					break;
				}
				setState(4403);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,458,_ctx) ) {
				case 1:
					{
					setState(4400);
					owner();
					setState(4401);
					match(DOT_);
					}
					break;
				}
				setState(4405);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4406);
				match(BEGIN);
				setState(4407);
				match(ATOMIC);
				setState(4408);
				match(WITH);
				setState(4409);
				procSetOption();
				setState(4414);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(4410);
					match(COMMA_);
					setState(4411);
					procSetOption();
					}
					}
					setState(4416);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4417);
				compoundStatement();
				setState(4419);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==END) {
					{
					setState(4418);
					match(END);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProcSetOptionContext extends ParserRuleContext {
		public TerminalNode LANGUAGE() { return getToken(SQLServerStatementParser.LANGUAGE, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public StringLiteralsContext stringLiterals() {
			return getRuleContext(StringLiteralsContext.class,0);
		}
		public TerminalNode TRANSACTION() { return getToken(SQLServerStatementParser.TRANSACTION, 0); }
		public TerminalNode ISOLATION() { return getToken(SQLServerStatementParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(SQLServerStatementParser.LEVEL, 0); }
		public TerminalNode SNAPSHOT() { return getToken(SQLServerStatementParser.SNAPSHOT, 0); }
		public TerminalNode REPEATABLE() { return getToken(SQLServerStatementParser.REPEATABLE, 0); }
		public TerminalNode READ() { return getToken(SQLServerStatementParser.READ, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(SQLServerStatementParser.SERIALIZABLE, 0); }
		public TerminalNode DATEFIRST() { return getToken(SQLServerStatementParser.DATEFIRST, 0); }
		public NumberLiteralsContext numberLiterals() {
			return getRuleContext(NumberLiteralsContext.class,0);
		}
		public TerminalNode DATEFORMAT() { return getToken(SQLServerStatementParser.DATEFORMAT, 0); }
		public TerminalNode DELAYED_DURABILITY() { return getToken(SQLServerStatementParser.DELAYED_DURABILITY, 0); }
		public TerminalNode OFF() { return getToken(SQLServerStatementParser.OFF, 0); }
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public ProcSetOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procSetOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterProcSetOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitProcSetOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitProcSetOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcSetOptionContext procSetOption() throws RecognitionException {
		ProcSetOptionContext _localctx = new ProcSetOptionContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_procSetOption);
		int _la;
		try {
			setState(4445);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LANGUAGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4423);
				match(LANGUAGE);
				setState(4424);
				match(EQ_);
				setState(4425);
				stringLiterals();
				}
				break;
			case TRANSACTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(4426);
				match(TRANSACTION);
				setState(4427);
				match(ISOLATION);
				setState(4428);
				match(LEVEL);
				setState(4429);
				match(EQ_);
				setState(4434);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SNAPSHOT:
					{
					setState(4430);
					match(SNAPSHOT);
					}
					break;
				case REPEATABLE:
					{
					setState(4431);
					match(REPEATABLE);
					setState(4432);
					match(READ);
					}
					break;
				case SERIALIZABLE:
					{
					setState(4433);
					match(SERIALIZABLE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DATEFIRST:
				enterOuterAlt(_localctx, 3);
				{
				setState(4436);
				match(DATEFIRST);
				setState(4437);
				match(EQ_);
				setState(4438);
				numberLiterals();
				}
				break;
			case DATEFORMAT:
				enterOuterAlt(_localctx, 4);
				{
				setState(4439);
				match(DATEFORMAT);
				setState(4440);
				match(EQ_);
				setState(4441);
				stringLiterals();
				}
				break;
			case DELAYED_DURABILITY:
				enterOuterAlt(_localctx, 5);
				{
				setState(4442);
				match(DELAYED_DURABILITY);
				setState(4443);
				match(EQ_);
				setState(4444);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateOrAlterViewClauseContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SQLServerStatementParser.AS, 0); }
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public List<TerminalNode> WITH() { return getTokens(SQLServerStatementParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(SQLServerStatementParser.WITH, i);
		}
		public List<ViewAttributeContext> viewAttribute() {
			return getRuleContexts(ViewAttributeContext.class);
		}
		public ViewAttributeContext viewAttribute(int i) {
			return getRuleContext(ViewAttributeContext.class,i);
		}
		public WithCommonTableExprContext withCommonTableExpr() {
			return getRuleContext(WithCommonTableExprContext.class,0);
		}
		public TerminalNode CHECK() { return getToken(SQLServerStatementParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(SQLServerStatementParser.OPTION, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public CreateOrAlterViewClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOrAlterViewClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateOrAlterViewClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateOrAlterViewClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateOrAlterViewClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOrAlterViewClauseContext createOrAlterViewClause() throws RecognitionException {
		CreateOrAlterViewClauseContext _localctx = new CreateOrAlterViewClauseContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_createOrAlterViewClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4456);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4447);
				match(WITH);
				setState(4448);
				viewAttribute();
				setState(4453);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(4449);
					match(COMMA_);
					setState(4450);
					viewAttribute();
					}
					}
					setState(4455);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(4458);
			match(AS);
			setState(4460);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,466,_ctx) ) {
			case 1:
				{
				setState(4459);
				withCommonTableExpr();
				}
				break;
			}
			setState(4462);
			select();
			setState(4466);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4463);
				match(WITH);
				setState(4464);
				match(CHECK);
				setState(4465);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ViewAttributeContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(SQLServerStatementParser.ENCRYPTION, 0); }
		public TerminalNode SCHEMABINDING() { return getToken(SQLServerStatementParser.SCHEMABINDING, 0); }
		public TerminalNode VIEW_METADATA() { return getToken(SQLServerStatementParser.VIEW_METADATA, 0); }
		public ViewAttributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewAttribute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterViewAttribute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitViewAttribute(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitViewAttribute(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewAttributeContext viewAttribute() throws RecognitionException {
		ViewAttributeContext _localctx = new ViewAttributeContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_viewAttribute);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4468);
			_la = _input.LA(1);
			if ( !(_la==ENCRYPTION || _la==SCHEMABINDING || _la==VIEW_METADATA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WithCommonTableExprContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public List<CommonTableExprContext> commonTableExpr() {
			return getRuleContexts(CommonTableExprContext.class);
		}
		public CommonTableExprContext commonTableExpr(int i) {
			return getRuleContext(CommonTableExprContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public WithCommonTableExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withCommonTableExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterWithCommonTableExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitWithCommonTableExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitWithCommonTableExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithCommonTableExprContext withCommonTableExpr() throws RecognitionException {
		WithCommonTableExprContext _localctx = new WithCommonTableExprContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_withCommonTableExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4470);
			match(WITH);
			setState(4471);
			commonTableExpr();
			setState(4476);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4472);
				match(COMMA_);
				setState(4473);
				commonTableExpr();
				}
				}
				setState(4478);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CommonTableExprContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode AS() { return getToken(SQLServerStatementParser.AS, 0); }
		public List<TerminalNode> LP_() { return getTokens(SQLServerStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(SQLServerStatementParser.LP_, i);
		}
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public List<TerminalNode> RP_() { return getTokens(SQLServerStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(SQLServerStatementParser.RP_, i);
		}
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public CommonTableExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commonTableExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCommonTableExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCommonTableExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCommonTableExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommonTableExprContext commonTableExpr() throws RecognitionException {
		CommonTableExprContext _localctx = new CommonTableExprContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_commonTableExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4479);
			name();
			setState(4491);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(4480);
				match(LP_);
				setState(4481);
				columnName();
				setState(4486);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(4482);
					match(COMMA_);
					setState(4483);
					columnName();
					}
					}
					setState(4488);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4489);
				match(RP_);
				}
			}

			setState(4493);
			match(AS);
			setState(4494);
			match(LP_);
			setState(4495);
			select();
			setState(4496);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateTriggerClauseContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SQLServerStatementParser.AS, 0); }
		public List<TerminalNode> FOR() { return getTokens(SQLServerStatementParser.FOR); }
		public TerminalNode FOR(int i) {
			return getToken(SQLServerStatementParser.FOR, i);
		}
		public TerminalNode AFTER() { return getToken(SQLServerStatementParser.AFTER, 0); }
		public TerminalNode INSTEAD() { return getToken(SQLServerStatementParser.INSTEAD, 0); }
		public TerminalNode OF() { return getToken(SQLServerStatementParser.OF, 0); }
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(SQLServerStatementParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(SQLServerStatementParser.NAME, 0); }
		public MethodSpecifierContext methodSpecifier() {
			return getRuleContext(MethodSpecifierContext.class,0);
		}
		public List<TerminalNode> WITH() { return getTokens(SQLServerStatementParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(SQLServerStatementParser.WITH, i);
		}
		public List<DmlTriggerOptionContext> dmlTriggerOption() {
			return getRuleContexts(DmlTriggerOptionContext.class);
		}
		public DmlTriggerOptionContext dmlTriggerOption(int i) {
			return getRuleContext(DmlTriggerOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public TerminalNode INSERT() { return getToken(SQLServerStatementParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(SQLServerStatementParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(SQLServerStatementParser.DELETE, 0); }
		public TerminalNode APPEND() { return getToken(SQLServerStatementParser.APPEND, 0); }
		public TerminalNode NOT() { return getToken(SQLServerStatementParser.NOT, 0); }
		public TerminalNode REPLICATION() { return getToken(SQLServerStatementParser.REPLICATION, 0); }
		public CreateTriggerClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTriggerClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateTriggerClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateTriggerClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateTriggerClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTriggerClauseContext createTriggerClause() throws RecognitionException {
		CreateTriggerClauseContext _localctx = new CreateTriggerClauseContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_createTriggerClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4503);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4498);
				match(WITH);
				setState(4499);
				dmlTriggerOption();
				setState(4500);
				match(COMMA_);
				setState(4501);
				dmlTriggerOption();
				}
			}

			setState(4509);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				{
				setState(4505);
				match(FOR);
				}
				break;
			case AFTER:
				{
				setState(4506);
				match(AFTER);
				}
				break;
			case INSTEAD:
				{
				setState(4507);
				match(INSTEAD);
				setState(4508);
				match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4512);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INSERT) {
				{
				setState(4511);
				match(INSERT);
				}
			}

			setState(4515);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,474,_ctx) ) {
			case 1:
				{
				setState(4514);
				match(COMMA_);
				}
				break;
			}
			setState(4518);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UPDATE) {
				{
				setState(4517);
				match(UPDATE);
				}
			}

			setState(4521);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,476,_ctx) ) {
			case 1:
				{
				setState(4520);
				match(COMMA_);
				}
				break;
			}
			setState(4524);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DELETE) {
				{
				setState(4523);
				match(DELETE);
				}
			}

			setState(4527);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_) {
				{
				setState(4526);
				match(COMMA_);
				}
			}

			setState(4531);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4529);
				match(WITH);
				setState(4530);
				match(APPEND);
				}
			}

			setState(4536);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(4533);
				match(NOT);
				setState(4534);
				match(FOR);
				setState(4535);
				match(REPLICATION);
				}
			}

			setState(4538);
			match(AS);
			setState(4543);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case SEMI_:
			case SELECT:
			case INSERT:
			case UPDATE:
			case DELETE:
			case CREATE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SET:
			case WITH:
			case DECLARE:
				{
				setState(4539);
				compoundStatement();
				}
				break;
			case EXTERNAL:
				{
				setState(4540);
				match(EXTERNAL);
				setState(4541);
				match(NAME);
				setState(4542);
				methodSpecifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DmlTriggerOptionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(SQLServerStatementParser.ENCRYPTION, 0); }
		public ExecuteAsClauseContext executeAsClause() {
			return getRuleContext(ExecuteAsClauseContext.class,0);
		}
		public TerminalNode NATIVE_COMPILATION() { return getToken(SQLServerStatementParser.NATIVE_COMPILATION, 0); }
		public TerminalNode SCHEMABINDING() { return getToken(SQLServerStatementParser.SCHEMABINDING, 0); }
		public DmlTriggerOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dmlTriggerOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDmlTriggerOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDmlTriggerOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDmlTriggerOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DmlTriggerOptionContext dmlTriggerOption() throws RecognitionException {
		DmlTriggerOptionContext _localctx = new DmlTriggerOptionContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_dmlTriggerOption);
		try {
			setState(4550);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENCRYPTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(4545);
				match(ENCRYPTION);
				}
				break;
			case EXECUTE:
			case EXEC:
				enterOuterAlt(_localctx, 2);
				{
				setState(4546);
				executeAsClause();
				}
				break;
			case NATIVE_COMPILATION:
				enterOuterAlt(_localctx, 3);
				{
				setState(4547);
				match(NATIVE_COMPILATION);
				}
				break;
			case SCHEMABINDING:
				enterOuterAlt(_localctx, 4);
				{
				setState(4548);
				match(SCHEMABINDING);
				}
				break;
			case COMMA_:
			case FOR:
			case AFTER:
			case INSTEAD:
				enterOuterAlt(_localctx, 5);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MethodSpecifierContext extends ParserRuleContext {
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public List<TerminalNode> DOT_() { return getTokens(SQLServerStatementParser.DOT_); }
		public TerminalNode DOT_(int i) {
			return getToken(SQLServerStatementParser.DOT_, i);
		}
		public MethodSpecifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_methodSpecifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterMethodSpecifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitMethodSpecifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitMethodSpecifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MethodSpecifierContext methodSpecifier() throws RecognitionException {
		MethodSpecifierContext _localctx = new MethodSpecifierContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_methodSpecifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4552);
			name();
			setState(4553);
			match(DOT_);
			setState(4554);
			name();
			setState(4555);
			match(DOT_);
			setState(4556);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerTargetContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public ViewNameContext viewName() {
			return getRuleContext(ViewNameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SQLServerStatementParser.ALL, 0); }
		public TerminalNode SERVER() { return getToken(SQLServerStatementParser.SERVER, 0); }
		public TerminalNode DATABASE() { return getToken(SQLServerStatementParser.DATABASE, 0); }
		public TriggerTargetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerTarget; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterTriggerTarget(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitTriggerTarget(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitTriggerTarget(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerTargetContext triggerTarget() throws RecognitionException {
		TriggerTargetContext _localctx = new TriggerTargetContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_triggerTarget);
		try {
			setState(4563);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,483,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4558);
				tableName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4559);
				viewName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4560);
				match(ALL);
				setState(4561);
				match(SERVER);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4562);
				match(DATABASE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateOrAlterSequenceClauseContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SQLServerStatementParser.AS, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode START() { return getToken(SQLServerStatementParser.START, 0); }
		public TerminalNode RESTART() { return getToken(SQLServerStatementParser.RESTART, 0); }
		public TerminalNode INCREMENT() { return getToken(SQLServerStatementParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(SQLServerStatementParser.BY, 0); }
		public TerminalNode MINVALUE() { return getToken(SQLServerStatementParser.MINVALUE, 0); }
		public TerminalNode NO() { return getToken(SQLServerStatementParser.NO, 0); }
		public TerminalNode MAXVALUE() { return getToken(SQLServerStatementParser.MAXVALUE, 0); }
		public TerminalNode CACHE() { return getToken(SQLServerStatementParser.CACHE, 0); }
		public TerminalNode CYCLE() { return getToken(SQLServerStatementParser.CYCLE, 0); }
		public CreateOrAlterSequenceClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOrAlterSequenceClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateOrAlterSequenceClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateOrAlterSequenceClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateOrAlterSequenceClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOrAlterSequenceClauseContext createOrAlterSequenceClause() throws RecognitionException {
		CreateOrAlterSequenceClauseContext _localctx = new CreateOrAlterSequenceClauseContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_createOrAlterSequenceClause);
		int _la;
		try {
			setState(4593);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,487,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4565);
				match(AS);
				setState(4566);
				dataType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4567);
				_la = _input.LA(1);
				if ( !(_la==START || _la==RESTART) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4568);
				match(WITH);
				setState(4569);
				expr(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4570);
				match(INCREMENT);
				setState(4571);
				match(BY);
				setState(4572);
				expr(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4573);
				match(MINVALUE);
				setState(4575);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
				case 1:
					{
					setState(4574);
					expr(0);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4577);
				match(NO);
				setState(4578);
				match(MINVALUE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4579);
				match(MAXVALUE);
				setState(4581);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,485,_ctx) ) {
				case 1:
					{
					setState(4580);
					expr(0);
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4583);
				match(NO);
				setState(4584);
				match(MAXVALUE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4585);
				match(CACHE);
				setState(4586);
				expr(0);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4587);
				match(NO);
				setState(4588);
				match(CACHE);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4590);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(4589);
					match(NO);
					}
				}

				setState(4592);
				match(CYCLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateIndexClauseContext extends ParserRuleContext {
		public TerminalNode INCLUDE() { return getToken(SQLServerStatementParser.INCLUDE, 0); }
		public ColumnNamesWithSortContext columnNamesWithSort() {
			return getRuleContext(ColumnNamesWithSortContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(SQLServerStatementParser.WHERE, 0); }
		public FilterPredicateContext filterPredicate() {
			return getRuleContext(FilterPredicateContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public List<TerminalNode> LP_() { return getTokens(SQLServerStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(SQLServerStatementParser.LP_, i);
		}
		public List<RelationalIndexOptionContext> relationalIndexOption() {
			return getRuleContexts(RelationalIndexOptionContext.class);
		}
		public RelationalIndexOptionContext relationalIndexOption(int i) {
			return getRuleContext(RelationalIndexOptionContext.class,i);
		}
		public List<TerminalNode> RP_() { return getTokens(SQLServerStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(SQLServerStatementParser.RP_, i);
		}
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode FILESTREAM_ON() { return getToken(SQLServerStatementParser.FILESTREAM_ON, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public StringLiteralsContext stringLiterals() {
			return getRuleContext(StringLiteralsContext.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public CreateIndexClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndexClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateIndexClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateIndexClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateIndexClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexClauseContext createIndexClause() throws RecognitionException {
		CreateIndexClauseContext _localctx = new CreateIndexClauseContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_createIndexClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4597);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUDE) {
				{
				setState(4595);
				match(INCLUDE);
				setState(4596);
				columnNamesWithSort();
				}
			}

			setState(4601);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(4599);
				match(WHERE);
				setState(4600);
				filterPredicate();
				}
			}

			setState(4615);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4603);
				match(WITH);
				setState(4604);
				match(LP_);
				setState(4605);
				relationalIndexOption();
				setState(4610);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(4606);
					match(COMMA_);
					setState(4607);
					relationalIndexOption();
					}
					}
					setState(4612);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4613);
				match(RP_);
				}
			}

			setState(4626);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(4617);
				match(ON);
				setState(4624);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,492,_ctx) ) {
				case 1:
					{
					setState(4618);
					schemaName();
					setState(4619);
					match(LP_);
					setState(4620);
					columnName();
					setState(4621);
					match(RP_);
					}
					break;
				case 2:
					{
					setState(4623);
					name();
					}
					break;
				}
				}
			}

			setState(4633);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILESTREAM_ON) {
				{
				setState(4628);
				match(FILESTREAM_ON);
				setState(4631);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TRUNCATE:
				case SCHEMA:
				case TABLE:
				case COLUMNS:
				case PRECISION:
				case FUNCTION:
				case TRIGGER:
				case CAST:
				case TRIM:
				case SUBSTRING:
				case RIGHT:
				case OFF:
				case GROUP:
				case LIMIT:
				case OFFSET:
				case SAVEPOINT:
				case BOOLEAN:
				case ARRAY:
				case DATE:
				case TIMESTAMP:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case YEAR:
				case QUARTER:
				case MONTH:
				case WEEK:
				case DAY:
				case HOUR:
				case MINUTE:
				case SECOND:
				case MICROSECOND:
				case MAX:
				case MIN:
				case SUM:
				case COUNT:
				case AVG:
				case ENABLE:
				case DISABLE:
				case INSTANCE:
				case DO:
				case DEFINER:
				case SQL:
				case CASCADED:
				case LOCAL:
				case NEXT:
				case NAME:
				case INTEGER:
				case TYPE:
				case TEXT:
				case VIEWS:
				case READ_ONLY:
				case DATABASE:
				case RETURNS:
				case DATEPART:
				case PASSWORD:
				case TARGET:
				case BINARY:
				case HIDDEN_:
				case MOD:
				case PARTITION:
				case PARTITIONS:
				case TOP:
				case ROW:
				case ROWS:
				case XOR:
				case ALWAYS:
				case USER:
				case ROLE:
				case START:
				case ACTION:
				case ALGORITHM:
				case AUTO:
				case BLOCKERS:
				case CLUSTERED:
				case NONCLUSTERED:
				case COLUMNSTORE:
				case CONTENT:
				case YEARS:
				case MONTHS:
				case WEEKS:
				case DAYS:
				case MINUTES:
				case DENY:
				case DETERMINISTIC:
				case DISTRIBUTION:
				case DOCUMENT:
				case DURABILITY:
				case ENCRYPTED:
				case FILESTREAM:
				case FILETABLE:
				case FILLFACTOR:
				case FOLLOWING:
				case HASH:
				case HEAP:
				case INBOUND:
				case OUTBOUND:
				case UNBOUNDED:
				case INFINITE:
				case LOGIN:
				case MASKED:
				case MAXDOP:
				case MOVE:
				case NOCHECK:
				case OBJECT:
				case ONLINE:
				case OVER:
				case PAGE:
				case PAUSED:
				case PERIOD:
				case PERSISTED:
				case PRECEDING:
				case RANDOMIZED:
				case RANGE:
				case REBUILD:
				case REPLICATE:
				case REPLICATION:
				case RESUMABLE:
				case ROWGUIDCOL:
				case SAVE:
				case SELF:
				case SPARSE:
				case SWITCH:
				case TRAN:
				case TRANCOUNT:
				case CONTROL:
				case CONCAT:
				case TAKE:
				case OWNERSHIP:
				case DEFINITION:
				case APPLICATION:
				case ASSEMBLY:
				case SYMMETRIC:
				case ASYMMETRIC:
				case SERVER:
				case RECEIVE:
				case CHANGE:
				case TRACE:
				case TRACKING:
				case RESOURCES:
				case SETTINGS:
				case STATE:
				case AVAILABILITY:
				case CREDENTIAL:
				case ENDPOINT:
				case EVENT:
				case NOTIFICATION:
				case LINKED:
				case AUDIT:
				case DDL:
				case XML:
				case IMPERSONATE:
				case SECURABLES:
				case AUTHENTICATE:
				case EXTERNAL:
				case ACCESS:
				case ADMINISTER:
				case BULK:
				case OPERATIONS:
				case UNSAFE:
				case SHUTDOWN:
				case SCOPED:
				case CONFIGURATION:
				case DATASPACE:
				case SERVICE:
				case CERTIFICATE:
				case CONTRACT:
				case ENCRYPTION:
				case MASTER:
				case DATA:
				case SOURCE:
				case FILE:
				case FORMAT:
				case LIBRARY:
				case FULLTEXT:
				case MASK:
				case UNMASK:
				case MESSAGE:
				case REMOTE:
				case BINDING:
				case ROUTE:
				case SECURITY:
				case POLICY:
				case AGGREGATE:
				case QUEUE:
				case RULE:
				case SYNONYM:
				case COLLECTION:
				case SCRIPT:
				case KILL:
				case BACKUP:
				case LOG:
				case SHOWPLAN:
				case SUBSCRIBE:
				case QUERY:
				case NOTIFICATIONS:
				case CHECKPOINT:
				case SEQUENCE:
				case ABORT_AFTER_WAIT:
				case ALLOW_PAGE_LOCKS:
				case ALLOW_ROW_LOCKS:
				case ALL_SPARSE_COLUMNS:
				case BUCKET_COUNT:
				case COLUMNSTORE_ARCHIVE:
				case COLUMN_ENCRYPTION_KEY:
				case COLUMN_SET:
				case COMPRESSION_DELAY:
				case DATABASE_DEAULT:
				case DATA_COMPRESSION:
				case DATA_CONSISTENCY_CHECK:
				case ENCRYPTION_TYPE:
				case SYSTEM_TIME:
				case SYSTEM_VERSIONING:
				case TEXTIMAGE_ON:
				case WAIT_AT_LOW_PRIORITY:
				case STATISTICS_INCREMENTAL:
				case STATISTICS_NORECOMPUTE:
				case ROUND_ROBIN:
				case SCHEMA_AND_DATA:
				case SCHEMA_ONLY:
				case SORT_IN_TEMPDB:
				case IGNORE_DUP_KEY:
				case IMPLICIT_TRANSACTIONS:
				case MAX_DURATION:
				case MEMORY_OPTIMIZED:
				case MIGRATION_STATE:
				case PAD_INDEX:
				case REMOTE_DATA_ARCHIVE:
				case FILESTREAM_ON:
				case FILETABLE_COLLATE_FILENAME:
				case FILETABLE_DIRECTORY:
				case FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME:
				case FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME:
				case FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME:
				case FILTER_PREDICATE:
				case HISTORY_RETENTION_PERIOD:
				case HISTORY_TABLE:
				case LOCK_ESCALATION:
				case DROP_EXISTING:
				case ROW_NUMBER:
				case FIRST:
				case DATETIME2:
				case OUTPUT:
				case INSERTED:
				case DELETED:
				case FILENAME:
				case SIZE:
				case MAXSIZE:
				case FILEGROWTH:
				case UNLIMITED:
				case KB:
				case MB:
				case GB:
				case TB:
				case CONTAINS:
				case MEMORY_OPTIMIZED_DATA:
				case FILEGROUP:
				case NON_TRANSACTED_ACCESS:
				case DB_CHAINING:
				case TRUSTWORTHY:
				case FORWARD_ONLY:
				case KEYSET:
				case FAST_FORWARD:
				case SCROLL_LOCKS:
				case OPTIMISTIC:
				case TYPE_WARNING:
				case SCHEMABINDING:
				case CALLER:
				case INPUT:
				case OWNER:
				case SNAPSHOT:
				case REPEATABLE:
				case SERIALIZABLE:
				case NATIVE_COMPILATION:
				case VIEW_METADATA:
				case INSTEAD:
				case APPEND:
				case INCREMENT:
				case CACHE:
				case MINVALUE:
				case MAXVALUE:
				case RESTART:
				case LOB_COMPACTION:
				case COMPRESS_ALL_ROW_GROUPS:
				case REORGANIZE:
				case RESUME:
				case PAUSE:
				case ABORT:
				case ACCELERATED_DATABASE_RECOVERY:
				case PERSISTENT_VERSION_STORE_FILEGROUP:
				case IMMEDIATE:
				case NO_WAIT:
				case TARGET_RECOVERY_TIME:
				case SECONDS:
				case HONOR_BROKER_PRIORITY:
				case ERROR_BROKER_CONVERSATIONS:
				case NEW_BROKER:
				case DISABLE_BROKER:
				case ENABLE_BROKER:
				case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
				case READ_COMMITTED_SNAPSHOT:
				case ALLOW_SNAPSHOT_ISOLATION:
				case RECURSIVE_TRIGGERS:
				case QUOTED_IDENTIFIER:
				case NUMERIC_ROUNDABORT:
				case CONCAT_NULL_YIELDS_NULL:
				case COMPATIBILITY_LEVEL:
				case ARITHABORT:
				case ANSI_WARNINGS:
				case ANSI_PADDING:
				case ANSI_NULLS:
				case ANSI_NULL_DEFAULT:
				case PAGE_VERIFY:
				case CHECKSUM:
				case TORN_PAGE_DETECTION:
				case BULK_LOGGED:
				case RECOVERY:
				case TOTAL_EXECUTION_CPU_TIME_MS:
				case TOTAL_COMPILE_CPU_TIME_MS:
				case STALE_CAPTURE_POLICY_THRESHOLD:
				case EXECUTION_COUNT:
				case QUERY_CAPTURE_POLICY:
				case WAIT_STATS_CAPTURE_MODE:
				case MAX_PLANS_PER_QUERY:
				case QUERY_CAPTURE_MODE:
				case SIZE_BASED_CLEANUP_MODE:
				case INTERVAL_LENGTH_MINUTES:
				case MAX_STORAGE_SIZE_MB:
				case DATA_FLUSH_INTERVAL_SECONDS:
				case CLEANUP_POLICY:
				case CUSTOM:
				case STALE_QUERY_THRESHOLD_DAYS:
				case OPERATION_MODE:
				case QUERY_STORE:
				case CURSOR_DEFAULT:
				case GLOBAL:
				case CURSOR_CLOSE_ON_COMMIT:
				case HOURS:
				case CHANGE_RETENTION:
				case AUTO_CLEANUP:
				case CHANGE_TRACKING:
				case AUTOMATIC_TUNING:
				case FORCE_LAST_GOOD_PLAN:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_CREATE_STATISTICS:
				case INCREMENTAL:
				case AUTO_CLOSE:
				case DATA_RETENTION:
				case TEMPORAL_HISTORY_RETENTION:
				case EDITION:
				case MIXED_PAGE_ALLOCATION:
				case DISABLED:
				case ALLOWED:
				case HADR:
				case MULTI_USER:
				case RESTRICTED_USER:
				case SINGLE_USER:
				case OFFLINE:
				case EMERGENCY:
				case SUSPEND:
				case DATE_CORRELATION_OPTIMIZATION:
				case ELASTIC_POOL:
				case SERVICE_OBJECTIVE:
				case DATABASE_NAME:
				case ALLOW_CONNECTIONS:
				case GEO:
				case NAMED:
				case DATEFIRST:
				case BACKUP_STORAGE_REDUNDANCY:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case SECONDARY:
				case FAILOVER:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case INLINE:
				case NESTED_TRIGGERS:
				case TRANSFORM_NOISE_WORDS:
				case TWO_DIGIT_YEAR_CUTOFF:
				case PERSISTENT_LOG_BUFFER:
				case DIRECTORY_NAME:
				case DATEFORMAT:
				case DELAYED_DURABILITY:
				case AUTHORIZATION:
				case TRANSFER:
				case PROVIDER:
				case SID:
				case SEARCH:
				case MEMBER:
				case JSON:
				case OPENQUERY:
				case IDENTIFIER_:
				case DELIMITED_IDENTIFIER_:
					{
					setState(4629);
					name();
					}
					break;
				case STRING_:
				case NCHAR_TEXT:
					{
					setState(4630);
					stringLiterals();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FilterPredicateContext extends ParserRuleContext {
		public List<ConjunctContext> conjunct() {
			return getRuleContexts(ConjunctContext.class);
		}
		public ConjunctContext conjunct(int i) {
			return getRuleContext(ConjunctContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(SQLServerStatementParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(SQLServerStatementParser.AND, i);
		}
		public FilterPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterFilterPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitFilterPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitFilterPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FilterPredicateContext filterPredicate() throws RecognitionException {
		FilterPredicateContext _localctx = new FilterPredicateContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_filterPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4635);
			conjunct();
			setState(4640);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AND) {
				{
				{
				setState(4636);
				match(AND);
				setState(4637);
				conjunct();
				}
				}
				setState(4642);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConjunctContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode IN() { return getToken(SQLServerStatementParser.IN, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public ConjunctContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conjunct; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterConjunct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitConjunct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitConjunct(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConjunctContext conjunct() throws RecognitionException {
		ConjunctContext _localctx = new ConjunctContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_conjunct);
		int _la;
		try {
			setState(4660);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,498,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4643);
				columnName();
				setState(4644);
				match(IN);
				setState(4645);
				match(LP_);
				setState(4646);
				expr(0);
				setState(4651);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(4647);
					match(COMMA_);
					setState(4648);
					expr(0);
					}
					}
					setState(4653);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4654);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4656);
				columnName();
				setState(4657);
				comparisonOperator();
				setState(4658);
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterIndexClauseContext extends ParserRuleContext {
		public TerminalNode REBUILD() { return getToken(SQLServerStatementParser.REBUILD, 0); }
		public TerminalNode PARTITION() { return getToken(SQLServerStatementParser.PARTITION, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<RelationalIndexOptionContext> relationalIndexOption() {
			return getRuleContexts(RelationalIndexOptionContext.class);
		}
		public RelationalIndexOptionContext relationalIndexOption(int i) {
			return getRuleContext(RelationalIndexOptionContext.class,i);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public TerminalNode ALL() { return getToken(SQLServerStatementParser.ALL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public TerminalNode DISABLE() { return getToken(SQLServerStatementParser.DISABLE, 0); }
		public TerminalNode REORGANIZE() { return getToken(SQLServerStatementParser.REORGANIZE, 0); }
		public ReorganizeOptionContext reorganizeOption() {
			return getRuleContext(ReorganizeOptionContext.class,0);
		}
		public TerminalNode SET() { return getToken(SQLServerStatementParser.SET, 0); }
		public List<SetIndexOptionContext> setIndexOption() {
			return getRuleContexts(SetIndexOptionContext.class);
		}
		public SetIndexOptionContext setIndexOption(int i) {
			return getRuleContext(SetIndexOptionContext.class,i);
		}
		public TerminalNode RESUME() { return getToken(SQLServerStatementParser.RESUME, 0); }
		public List<ResumableIndexOptionsContext> resumableIndexOptions() {
			return getRuleContexts(ResumableIndexOptionsContext.class);
		}
		public ResumableIndexOptionsContext resumableIndexOptions(int i) {
			return getRuleContext(ResumableIndexOptionsContext.class,i);
		}
		public TerminalNode PAUSE() { return getToken(SQLServerStatementParser.PAUSE, 0); }
		public TerminalNode ABORT() { return getToken(SQLServerStatementParser.ABORT, 0); }
		public AlterIndexClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIndexClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAlterIndexClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAlterIndexClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAlterIndexClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIndexClauseContext alterIndexClause() throws RecognitionException {
		AlterIndexClauseContext _localctx = new AlterIndexClauseContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_alterIndexClause);
		int _la;
		try {
			setState(4724);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REBUILD:
				enterOuterAlt(_localctx, 1);
				{
				setState(4662);
				match(REBUILD);
				setState(4669);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(4663);
					match(PARTITION);
					setState(4664);
					match(EQ_);
					setState(4667);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALL:
						{
						setState(4665);
						match(ALL);
						}
						break;
					case NOT_:
					case TILDE_:
					case PLUS_:
					case MINUS_:
					case LP_:
					case LBE_:
					case LBT_:
					case QUESTION_:
					case DOLLAR_:
					case TRUNCATE:
					case SCHEMA:
					case TABLE:
					case COLUMNS:
					case PRECISION:
					case FUNCTION:
					case TRIGGER:
					case CASE:
					case CAST:
					case TRIM:
					case SUBSTRING:
					case RIGHT:
					case OFF:
					case IF:
					case NOT:
					case NULL:
					case TRUE:
					case FALSE:
					case EXISTS:
					case GROUP:
					case LIMIT:
					case OFFSET:
					case SAVEPOINT:
					case BOOLEAN:
					case CHAR:
					case ARRAY:
					case INTERVAL:
					case DATE:
					case TIME:
					case TIMESTAMP:
					case LOCALTIME:
					case LOCALTIMESTAMP:
					case YEAR:
					case QUARTER:
					case MONTH:
					case WEEK:
					case DAY:
					case HOUR:
					case MINUTE:
					case SECOND:
					case MICROSECOND:
					case MAX:
					case MIN:
					case SUM:
					case COUNT:
					case AVG:
					case CURRENT:
					case ENABLE:
					case DISABLE:
					case INSTANCE:
					case DO:
					case DEFINER:
					case SQL:
					case CASCADED:
					case LOCAL:
					case NEXT:
					case NAME:
					case INTEGER:
					case TYPE:
					case TEXT:
					case VIEWS:
					case READ_ONLY:
					case DATABASE:
					case RETURNS:
					case DATEPART:
					case PASSWORD:
					case JSON_OBJECT:
					case JSON_ARRAY:
					case FIRST_VALUE:
					case LAST_VALUE:
					case APPROX_PERCENTILE_CONT:
					case APPROX_PERCENTILE_DISC:
					case OPENDATASOURCE:
					case TARGET:
					case BINARY:
					case HIDDEN_:
					case MOD:
					case PARTITION:
					case PARTITIONS:
					case TOP:
					case ROW:
					case ROWS:
					case XOR:
					case ALWAYS:
					case USER:
					case ROLE:
					case START:
					case ACTION:
					case ALGORITHM:
					case AUTO:
					case BLOCKERS:
					case CLUSTERED:
					case NONCLUSTERED:
					case COLUMNSTORE:
					case CONTENT:
					case CONVERT:
					case YEARS:
					case MONTHS:
					case WEEKS:
					case DAYS:
					case MINUTES:
					case DENY:
					case DETERMINISTIC:
					case DISTRIBUTION:
					case DOCUMENT:
					case DURABILITY:
					case ENCRYPTED:
					case FILESTREAM:
					case FILETABLE:
					case FILLFACTOR:
					case FOLLOWING:
					case HASH:
					case HEAP:
					case INBOUND:
					case OUTBOUND:
					case UNBOUNDED:
					case INFINITE:
					case LOGIN:
					case MASKED:
					case MAXDOP:
					case MOVE:
					case NOCHECK:
					case OBJECT:
					case ONLINE:
					case OVER:
					case PAGE:
					case PAUSED:
					case PERIOD:
					case PERSISTED:
					case PRECEDING:
					case RANDOMIZED:
					case RANGE:
					case REBUILD:
					case REPLICATE:
					case REPLICATION:
					case RESUMABLE:
					case ROWGUIDCOL:
					case SAVE:
					case SELF:
					case SPARSE:
					case SWITCH:
					case TRAN:
					case TRANCOUNT:
					case CONTROL:
					case CONCAT:
					case TAKE:
					case OWNERSHIP:
					case DEFINITION:
					case APPLICATION:
					case ASSEMBLY:
					case SYMMETRIC:
					case ASYMMETRIC:
					case SERVER:
					case RECEIVE:
					case CHANGE:
					case TRACE:
					case TRACKING:
					case RESOURCES:
					case SETTINGS:
					case STATE:
					case AVAILABILITY:
					case CREDENTIAL:
					case ENDPOINT:
					case EVENT:
					case NOTIFICATION:
					case LINKED:
					case AUDIT:
					case DDL:
					case XML:
					case IMPERSONATE:
					case SECURABLES:
					case AUTHENTICATE:
					case EXTERNAL:
					case ACCESS:
					case ADMINISTER:
					case BULK:
					case OPERATIONS:
					case UNSAFE:
					case SHUTDOWN:
					case SCOPED:
					case CONFIGURATION:
					case DATASPACE:
					case SERVICE:
					case CERTIFICATE:
					case CONTRACT:
					case ENCRYPTION:
					case MASTER:
					case DATA:
					case SOURCE:
					case FILE:
					case FORMAT:
					case LIBRARY:
					case FULLTEXT:
					case MASK:
					case UNMASK:
					case MESSAGE:
					case REMOTE:
					case BINDING:
					case ROUTE:
					case SECURITY:
					case POLICY:
					case AGGREGATE:
					case QUEUE:
					case RULE:
					case SYNONYM:
					case COLLECTION:
					case SCRIPT:
					case KILL:
					case BACKUP:
					case LOG:
					case SHOWPLAN:
					case SUBSCRIBE:
					case QUERY:
					case NOTIFICATIONS:
					case CHECKPOINT:
					case SEQUENCE:
					case ABORT_AFTER_WAIT:
					case ALLOW_PAGE_LOCKS:
					case ALLOW_ROW_LOCKS:
					case ALL_SPARSE_COLUMNS:
					case BUCKET_COUNT:
					case COLUMNSTORE_ARCHIVE:
					case COLUMN_ENCRYPTION_KEY:
					case COLUMN_SET:
					case COMPRESSION_DELAY:
					case DATABASE_DEAULT:
					case DATA_COMPRESSION:
					case DATA_CONSISTENCY_CHECK:
					case ENCRYPTION_TYPE:
					case SYSTEM_TIME:
					case SYSTEM_VERSIONING:
					case TEXTIMAGE_ON:
					case WAIT_AT_LOW_PRIORITY:
					case STATISTICS_INCREMENTAL:
					case STATISTICS_NORECOMPUTE:
					case ROUND_ROBIN:
					case SCHEMA_AND_DATA:
					case SCHEMA_ONLY:
					case SORT_IN_TEMPDB:
					case IGNORE_DUP_KEY:
					case IMPLICIT_TRANSACTIONS:
					case MAX_DURATION:
					case MEMORY_OPTIMIZED:
					case MIGRATION_STATE:
					case PAD_INDEX:
					case REMOTE_DATA_ARCHIVE:
					case FILESTREAM_ON:
					case FILETABLE_COLLATE_FILENAME:
					case FILETABLE_DIRECTORY:
					case FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME:
					case FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME:
					case FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME:
					case FILTER_PREDICATE:
					case HISTORY_RETENTION_PERIOD:
					case HISTORY_TABLE:
					case LOCK_ESCALATION:
					case DROP_EXISTING:
					case ROW_NUMBER:
					case FIRST:
					case DATETIME2:
					case OUTPUT:
					case INSERTED:
					case DELETED:
					case FILENAME:
					case SIZE:
					case MAXSIZE:
					case FILEGROWTH:
					case UNLIMITED:
					case KB:
					case MB:
					case GB:
					case TB:
					case CONTAINS:
					case MEMORY_OPTIMIZED_DATA:
					case FILEGROUP:
					case NON_TRANSACTED_ACCESS:
					case DB_CHAINING:
					case TRUSTWORTHY:
					case FORWARD_ONLY:
					case KEYSET:
					case FAST_FORWARD:
					case SCROLL_LOCKS:
					case OPTIMISTIC:
					case TYPE_WARNING:
					case SCHEMABINDING:
					case CALLER:
					case INPUT:
					case OWNER:
					case SNAPSHOT:
					case REPEATABLE:
					case SERIALIZABLE:
					case NATIVE_COMPILATION:
					case VIEW_METADATA:
					case INSTEAD:
					case APPEND:
					case INCREMENT:
					case CACHE:
					case MINVALUE:
					case MAXVALUE:
					case RESTART:
					case LOB_COMPACTION:
					case COMPRESS_ALL_ROW_GROUPS:
					case REORGANIZE:
					case RESUME:
					case PAUSE:
					case ABORT:
					case ACCELERATED_DATABASE_RECOVERY:
					case PERSISTENT_VERSION_STORE_FILEGROUP:
					case IMMEDIATE:
					case NO_WAIT:
					case TARGET_RECOVERY_TIME:
					case SECONDS:
					case HONOR_BROKER_PRIORITY:
					case ERROR_BROKER_CONVERSATIONS:
					case NEW_BROKER:
					case DISABLE_BROKER:
					case ENABLE_BROKER:
					case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
					case READ_COMMITTED_SNAPSHOT:
					case ALLOW_SNAPSHOT_ISOLATION:
					case RECURSIVE_TRIGGERS:
					case QUOTED_IDENTIFIER:
					case NUMERIC_ROUNDABORT:
					case CONCAT_NULL_YIELDS_NULL:
					case COMPATIBILITY_LEVEL:
					case ARITHABORT:
					case ANSI_WARNINGS:
					case ANSI_PADDING:
					case ANSI_NULLS:
					case ANSI_NULL_DEFAULT:
					case PAGE_VERIFY:
					case CHECKSUM:
					case TORN_PAGE_DETECTION:
					case BULK_LOGGED:
					case RECOVERY:
					case TOTAL_EXECUTION_CPU_TIME_MS:
					case TOTAL_COMPILE_CPU_TIME_MS:
					case STALE_CAPTURE_POLICY_THRESHOLD:
					case EXECUTION_COUNT:
					case QUERY_CAPTURE_POLICY:
					case WAIT_STATS_CAPTURE_MODE:
					case MAX_PLANS_PER_QUERY:
					case QUERY_CAPTURE_MODE:
					case SIZE_BASED_CLEANUP_MODE:
					case INTERVAL_LENGTH_MINUTES:
					case MAX_STORAGE_SIZE_MB:
					case DATA_FLUSH_INTERVAL_SECONDS:
					case CLEANUP_POLICY:
					case CUSTOM:
					case STALE_QUERY_THRESHOLD_DAYS:
					case OPERATION_MODE:
					case QUERY_STORE:
					case CURSOR_DEFAULT:
					case GLOBAL:
					case CURSOR_CLOSE_ON_COMMIT:
					case HOURS:
					case CHANGE_RETENTION:
					case AUTO_CLEANUP:
					case CHANGE_TRACKING:
					case AUTOMATIC_TUNING:
					case FORCE_LAST_GOOD_PLAN:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_CREATE_STATISTICS:
					case INCREMENTAL:
					case AUTO_CLOSE:
					case DATA_RETENTION:
					case TEMPORAL_HISTORY_RETENTION:
					case EDITION:
					case MIXED_PAGE_ALLOCATION:
					case DISABLED:
					case ALLOWED:
					case HADR:
					case MULTI_USER:
					case RESTRICTED_USER:
					case SINGLE_USER:
					case OFFLINE:
					case EMERGENCY:
					case SUSPEND:
					case DATE_CORRELATION_OPTIMIZATION:
					case ELASTIC_POOL:
					case SERVICE_OBJECTIVE:
					case DATABASE_NAME:
					case ALLOW_CONNECTIONS:
					case GEO:
					case NAMED:
					case DATEFIRST:
					case BACKUP_STORAGE_REDUNDANCY:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case SECONDARY:
					case FAILOVER:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case INLINE:
					case NESTED_TRIGGERS:
					case TRANSFORM_NOISE_WORDS:
					case TWO_DIGIT_YEAR_CUTOFF:
					case PERSISTENT_LOG_BUFFER:
					case DIRECTORY_NAME:
					case DATEFORMAT:
					case DELAYED_DURABILITY:
					case AUTHORIZATION:
					case TRANSFER:
					case PROVIDER:
					case SID:
					case SEARCH:
					case MEMBER:
					case JSON:
					case OPENJSON:
					case OPENROWSET:
					case TRY_CAST:
					case TRY_CONVERT:
					case OPENQUERY:
					case MATCH:
					case STRING_AGG:
					case IDENTIFIER_:
					case DELIMITED_IDENTIFIER_:
					case STRING_:
					case NUMBER_:
					case HEX_DIGIT_:
					case BIT_NUM_:
					case NCHAR_TEXT:
						{
						setState(4666);
						expr(0);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4683);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4671);
					match(WITH);
					setState(4672);
					match(LP_);
					setState(4673);
					relationalIndexOption();
					setState(4678);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA_) {
						{
						{
						setState(4674);
						match(COMMA_);
						setState(4675);
						relationalIndexOption();
						}
						}
						setState(4680);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(4681);
					match(RP_);
					}
				}

				}
				break;
			case DISABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4685);
				match(DISABLE);
				}
				break;
			case REORGANIZE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4686);
				match(REORGANIZE);
				setState(4690);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(4687);
					match(PARTITION);
					setState(4688);
					match(EQ_);
					setState(4689);
					expr(0);
					}
				}

				setState(4697);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4692);
					match(WITH);
					setState(4693);
					match(LP_);
					setState(4694);
					reorganizeOption();
					setState(4695);
					match(RP_);
					}
				}

				}
				break;
			case SET:
				enterOuterAlt(_localctx, 4);
				{
				setState(4699);
				match(SET);
				setState(4700);
				match(LP_);
				setState(4701);
				setIndexOption();
				{
				setState(4702);
				match(COMMA_);
				setState(4703);
				setIndexOption();
				}
				setState(4705);
				match(RP_);
				}
				break;
			case RESUME:
				enterOuterAlt(_localctx, 5);
				{
				setState(4707);
				match(RESUME);
				setState(4720);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4708);
					match(WITH);
					setState(4709);
					match(LP_);
					setState(4710);
					resumableIndexOptions();
					setState(4715);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA_) {
						{
						{
						setState(4711);
						match(COMMA_);
						setState(4712);
						resumableIndexOptions();
						}
						}
						setState(4717);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(4718);
					match(RP_);
					}
				}

				}
				break;
			case PAUSE:
				enterOuterAlt(_localctx, 6);
				{
				setState(4722);
				match(PAUSE);
				}
				break;
			case ABORT:
				enterOuterAlt(_localctx, 7);
				{
				setState(4723);
				match(ABORT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RelationalIndexOptionContext extends ParserRuleContext {
		public TerminalNode PAD_INDEX() { return getToken(SQLServerStatementParser.PAD_INDEX, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode OFF() { return getToken(SQLServerStatementParser.OFF, 0); }
		public TerminalNode FILLFACTOR() { return getToken(SQLServerStatementParser.FILLFACTOR, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode SORT_IN_TEMPDB() { return getToken(SQLServerStatementParser.SORT_IN_TEMPDB, 0); }
		public TerminalNode IGNORE_DUP_KEY() { return getToken(SQLServerStatementParser.IGNORE_DUP_KEY, 0); }
		public TerminalNode STATISTICS_NORECOMPUTE() { return getToken(SQLServerStatementParser.STATISTICS_NORECOMPUTE, 0); }
		public TerminalNode STATISTICS_INCREMENTAL() { return getToken(SQLServerStatementParser.STATISTICS_INCREMENTAL, 0); }
		public TerminalNode DROP_EXISTING() { return getToken(SQLServerStatementParser.DROP_EXISTING, 0); }
		public TerminalNode ONLINE() { return getToken(SQLServerStatementParser.ONLINE, 0); }
		public LowPriorityLockWaitContext lowPriorityLockWait() {
			return getRuleContext(LowPriorityLockWaitContext.class,0);
		}
		public TerminalNode RESUMABLE() { return getToken(SQLServerStatementParser.RESUMABLE, 0); }
		public TerminalNode MAX_DURATION() { return getToken(SQLServerStatementParser.MAX_DURATION, 0); }
		public TerminalNode MINUTES() { return getToken(SQLServerStatementParser.MINUTES, 0); }
		public TerminalNode ALLOW_ROW_LOCKS() { return getToken(SQLServerStatementParser.ALLOW_ROW_LOCKS, 0); }
		public TerminalNode ALLOW_PAGE_LOCKS() { return getToken(SQLServerStatementParser.ALLOW_PAGE_LOCKS, 0); }
		public TerminalNode OPTIMIZE_FOR_SEQUENTIAL_KEY() { return getToken(SQLServerStatementParser.OPTIMIZE_FOR_SEQUENTIAL_KEY, 0); }
		public TerminalNode MAXDOP() { return getToken(SQLServerStatementParser.MAXDOP, 0); }
		public TerminalNode DATA_COMPRESSION() { return getToken(SQLServerStatementParser.DATA_COMPRESSION, 0); }
		public TerminalNode NONE() { return getToken(SQLServerStatementParser.NONE, 0); }
		public TerminalNode ROW() { return getToken(SQLServerStatementParser.ROW, 0); }
		public TerminalNode PAGE() { return getToken(SQLServerStatementParser.PAGE, 0); }
		public TerminalNode COLUMNSTORE() { return getToken(SQLServerStatementParser.COLUMNSTORE, 0); }
		public TerminalNode COLUMNSTORE_ARCHIVE() { return getToken(SQLServerStatementParser.COLUMNSTORE_ARCHIVE, 0); }
		public TerminalNode PARTITIONS() { return getToken(SQLServerStatementParser.PARTITIONS, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<PartitionNumberRangeContext> partitionNumberRange() {
			return getRuleContexts(PartitionNumberRangeContext.class);
		}
		public PartitionNumberRangeContext partitionNumberRange(int i) {
			return getRuleContext(PartitionNumberRangeContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public RelationalIndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relationalIndexOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterRelationalIndexOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitRelationalIndexOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitRelationalIndexOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RelationalIndexOptionContext relationalIndexOption() throws RecognitionException {
		RelationalIndexOptionContext _localctx = new RelationalIndexOptionContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_relationalIndexOption);
		int _la;
		try {
			int _alt;
			setState(4793);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PAD_INDEX:
				enterOuterAlt(_localctx, 1);
				{
				setState(4726);
				match(PAD_INDEX);
				setState(4727);
				match(EQ_);
				setState(4728);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case FILLFACTOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(4729);
				match(FILLFACTOR);
				setState(4730);
				match(EQ_);
				setState(4731);
				expr(0);
				}
				break;
			case SORT_IN_TEMPDB:
				enterOuterAlt(_localctx, 3);
				{
				setState(4732);
				match(SORT_IN_TEMPDB);
				setState(4733);
				match(EQ_);
				setState(4734);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case IGNORE_DUP_KEY:
				enterOuterAlt(_localctx, 4);
				{
				setState(4735);
				match(IGNORE_DUP_KEY);
				setState(4736);
				match(EQ_);
				setState(4737);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case STATISTICS_NORECOMPUTE:
				enterOuterAlt(_localctx, 5);
				{
				setState(4738);
				match(STATISTICS_NORECOMPUTE);
				setState(4739);
				match(EQ_);
				setState(4740);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case STATISTICS_INCREMENTAL:
				enterOuterAlt(_localctx, 6);
				{
				setState(4741);
				match(STATISTICS_INCREMENTAL);
				setState(4742);
				match(EQ_);
				setState(4743);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case DROP_EXISTING:
				enterOuterAlt(_localctx, 7);
				{
				setState(4744);
				match(DROP_EXISTING);
				setState(4745);
				match(EQ_);
				setState(4746);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case ONLINE:
				enterOuterAlt(_localctx, 8);
				{
				setState(4747);
				match(ONLINE);
				setState(4748);
				match(EQ_);
				setState(4754);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ON:
					{
					setState(4749);
					match(ON);
					setState(4751);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WAIT_AT_LOW_PRIORITY) {
						{
						setState(4750);
						lowPriorityLockWait();
						}
					}

					}
					break;
				case OFF:
					{
					setState(4753);
					match(OFF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case RESUMABLE:
				enterOuterAlt(_localctx, 9);
				{
				setState(4756);
				match(RESUMABLE);
				setState(4757);
				match(EQ_);
				setState(4758);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case MAX_DURATION:
				enterOuterAlt(_localctx, 10);
				{
				setState(4759);
				match(MAX_DURATION);
				setState(4760);
				match(EQ_);
				setState(4761);
				expr(0);
				setState(4763);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUTES) {
					{
					setState(4762);
					match(MINUTES);
					}
				}

				}
				break;
			case ALLOW_ROW_LOCKS:
				enterOuterAlt(_localctx, 11);
				{
				setState(4765);
				match(ALLOW_ROW_LOCKS);
				setState(4766);
				match(EQ_);
				setState(4767);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case ALLOW_PAGE_LOCKS:
				enterOuterAlt(_localctx, 12);
				{
				setState(4768);
				match(ALLOW_PAGE_LOCKS);
				setState(4769);
				match(EQ_);
				setState(4770);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case OPTIMIZE_FOR_SEQUENTIAL_KEY:
				enterOuterAlt(_localctx, 13);
				{
				setState(4771);
				match(OPTIMIZE_FOR_SEQUENTIAL_KEY);
				setState(4772);
				match(EQ_);
				setState(4773);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case MAXDOP:
				enterOuterAlt(_localctx, 14);
				{
				setState(4774);
				match(MAXDOP);
				setState(4775);
				match(EQ_);
				setState(4776);
				expr(0);
				}
				break;
			case DATA_COMPRESSION:
				enterOuterAlt(_localctx, 15);
				{
				setState(4777);
				match(DATA_COMPRESSION);
				setState(4778);
				match(EQ_);
				setState(4779);
				_la = _input.LA(1);
				if ( !(((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & 306244774669582337L) != 0) || _la==COLUMNSTORE_ARCHIVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4791);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(4780);
					match(ON);
					setState(4781);
					match(PARTITIONS);
					setState(4782);
					match(LP_);
					setState(4783);
					partitionNumberRange();
					setState(4788);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,511,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(4784);
							match(COMMA_);
							setState(4785);
							partitionNumberRange();
							}
							} 
						}
						setState(4790);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,511,_ctx);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionNumberRangeContext extends ParserRuleContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode TO() { return getToken(SQLServerStatementParser.TO, 0); }
		public PartitionNumberRangeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionNumberRange; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterPartitionNumberRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitPartitionNumberRange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitPartitionNumberRange(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionNumberRangeContext partitionNumberRange() throws RecognitionException {
		PartitionNumberRangeContext _localctx = new PartitionNumberRangeContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_partitionNumberRange);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4795);
			expr(0);
			setState(4798);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TO) {
				{
				setState(4796);
				match(TO);
				setState(4797);
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReorganizeOptionContext extends ParserRuleContext {
		public TerminalNode LOB_COMPACTION() { return getToken(SQLServerStatementParser.LOB_COMPACTION, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode OFF() { return getToken(SQLServerStatementParser.OFF, 0); }
		public TerminalNode COMPRESS_ALL_ROW_GROUPS() { return getToken(SQLServerStatementParser.COMPRESS_ALL_ROW_GROUPS, 0); }
		public ReorganizeOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reorganizeOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterReorganizeOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitReorganizeOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitReorganizeOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReorganizeOptionContext reorganizeOption() throws RecognitionException {
		ReorganizeOptionContext _localctx = new ReorganizeOptionContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_reorganizeOption);
		int _la;
		try {
			setState(4806);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOB_COMPACTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(4800);
				match(LOB_COMPACTION);
				setState(4801);
				match(EQ_);
				setState(4802);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case COMPRESS_ALL_ROW_GROUPS:
				enterOuterAlt(_localctx, 2);
				{
				setState(4803);
				match(COMPRESS_ALL_ROW_GROUPS);
				setState(4804);
				match(EQ_);
				setState(4805);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetIndexOptionContext extends ParserRuleContext {
		public TerminalNode ALLOW_ROW_LOCKS() { return getToken(SQLServerStatementParser.ALLOW_ROW_LOCKS, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode OFF() { return getToken(SQLServerStatementParser.OFF, 0); }
		public TerminalNode ALLOW_PAGE_LOCKS() { return getToken(SQLServerStatementParser.ALLOW_PAGE_LOCKS, 0); }
		public TerminalNode OPTIMIZE_FOR_SEQUENTIAL_KEY() { return getToken(SQLServerStatementParser.OPTIMIZE_FOR_SEQUENTIAL_KEY, 0); }
		public TerminalNode IGNORE_DUP_KEY() { return getToken(SQLServerStatementParser.IGNORE_DUP_KEY, 0); }
		public TerminalNode STATISTICS_NORECOMPUTE() { return getToken(SQLServerStatementParser.STATISTICS_NORECOMPUTE, 0); }
		public TerminalNode COMPRESSION_DELAY() { return getToken(SQLServerStatementParser.COMPRESSION_DELAY, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode MINUTES() { return getToken(SQLServerStatementParser.MINUTES, 0); }
		public SetIndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setIndexOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSetIndexOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSetIndexOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSetIndexOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetIndexOptionContext setIndexOption() throws RecognitionException {
		SetIndexOptionContext _localctx = new SetIndexOptionContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_setIndexOption);
		int _la;
		try {
			setState(4829);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALLOW_ROW_LOCKS:
				enterOuterAlt(_localctx, 1);
				{
				setState(4808);
				match(ALLOW_ROW_LOCKS);
				setState(4809);
				match(EQ_);
				setState(4810);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case ALLOW_PAGE_LOCKS:
				enterOuterAlt(_localctx, 2);
				{
				setState(4811);
				match(ALLOW_PAGE_LOCKS);
				setState(4812);
				match(EQ_);
				setState(4813);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case OPTIMIZE_FOR_SEQUENTIAL_KEY:
				enterOuterAlt(_localctx, 3);
				{
				setState(4814);
				match(OPTIMIZE_FOR_SEQUENTIAL_KEY);
				setState(4815);
				match(EQ_);
				setState(4816);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case IGNORE_DUP_KEY:
				enterOuterAlt(_localctx, 4);
				{
				setState(4817);
				match(IGNORE_DUP_KEY);
				setState(4818);
				match(EQ_);
				setState(4819);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case STATISTICS_NORECOMPUTE:
				enterOuterAlt(_localctx, 5);
				{
				setState(4820);
				match(STATISTICS_NORECOMPUTE);
				setState(4821);
				match(EQ_);
				setState(4822);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case COMPRESSION_DELAY:
				enterOuterAlt(_localctx, 6);
				{
				setState(4823);
				match(COMPRESSION_DELAY);
				setState(4824);
				match(EQ_);
				{
				setState(4825);
				expr(0);
				setState(4827);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUTES) {
					{
					setState(4826);
					match(MINUTES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ResumableIndexOptionsContext extends ParserRuleContext {
		public TerminalNode MAXDOP() { return getToken(SQLServerStatementParser.MAXDOP, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode MAX_DURATION() { return getToken(SQLServerStatementParser.MAX_DURATION, 0); }
		public TerminalNode MINUTES() { return getToken(SQLServerStatementParser.MINUTES, 0); }
		public LowPriorityLockWaitContext lowPriorityLockWait() {
			return getRuleContext(LowPriorityLockWaitContext.class,0);
		}
		public ResumableIndexOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resumableIndexOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterResumableIndexOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitResumableIndexOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitResumableIndexOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResumableIndexOptionsContext resumableIndexOptions() throws RecognitionException {
		ResumableIndexOptionsContext _localctx = new ResumableIndexOptionsContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_resumableIndexOptions);
		int _la;
		try {
			setState(4841);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAXDOP:
				enterOuterAlt(_localctx, 1);
				{
				setState(4831);
				match(MAXDOP);
				setState(4832);
				match(EQ_);
				setState(4833);
				expr(0);
				}
				break;
			case MAX_DURATION:
				enterOuterAlt(_localctx, 2);
				{
				setState(4834);
				match(MAX_DURATION);
				setState(4835);
				match(EQ_);
				setState(4836);
				expr(0);
				setState(4838);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUTES) {
					{
					setState(4837);
					match(MINUTES);
					}
				}

				}
				break;
			case WAIT_AT_LOW_PRIORITY:
				enterOuterAlt(_localctx, 3);
				{
				setState(4840);
				lowPriorityLockWait();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterDatabaseClauseContext extends ParserRuleContext {
		public TerminalNode MODIFY() { return getToken(SQLServerStatementParser.MODIFY, 0); }
		public TerminalNode NAME() { return getToken(SQLServerStatementParser.NAME, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(SQLServerStatementParser.COLLATE, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public FileAndFilegroupOptionsContext fileAndFilegroupOptions() {
			return getRuleContext(FileAndFilegroupOptionsContext.class,0);
		}
		public TerminalNode SET() { return getToken(SQLServerStatementParser.SET, 0); }
		public List<AlterDatabaseOptionSpecContext> alterDatabaseOptionSpec() {
			return getRuleContexts(AlterDatabaseOptionSpecContext.class);
		}
		public AlterDatabaseOptionSpecContext alterDatabaseOptionSpec(int i) {
			return getRuleContext(AlterDatabaseOptionSpecContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public TerminationContext termination() {
			return getRuleContext(TerminationContext.class,0);
		}
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<EditionOptionsContext> editionOptions() {
			return getRuleContexts(EditionOptionsContext.class);
		}
		public EditionOptionsContext editionOptions(int i) {
			return getRuleContext(EditionOptionsContext.class,i);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public TerminalNode BACKUP_STORAGE_REDUNDANCY() { return getToken(SQLServerStatementParser.BACKUP_STORAGE_REDUNDANCY, 0); }
		public TerminalNode STRING_() { return getToken(SQLServerStatementParser.STRING_, 0); }
		public TerminalNode ADD() { return getToken(SQLServerStatementParser.ADD, 0); }
		public TerminalNode SECONDARY() { return getToken(SQLServerStatementParser.SECONDARY, 0); }
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode SERVER() { return getToken(SQLServerStatementParser.SERVER, 0); }
		public List<AddSecondaryOptionContext> addSecondaryOption() {
			return getRuleContexts(AddSecondaryOptionContext.class);
		}
		public AddSecondaryOptionContext addSecondaryOption(int i) {
			return getRuleContext(AddSecondaryOptionContext.class,i);
		}
		public TerminalNode FAILOVER() { return getToken(SQLServerStatementParser.FAILOVER, 0); }
		public TerminalNode FORCE_FAILOVER_ALLOW_DATA_LOSS() { return getToken(SQLServerStatementParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0); }
		public AlterDatabaseClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabaseClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAlterDatabaseClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAlterDatabaseClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAlterDatabaseClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseClauseContext alterDatabaseClause() throws RecognitionException {
		AlterDatabaseClauseContext _localctx = new AlterDatabaseClauseContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_alterDatabaseClause);
		int _la;
		try {
			setState(4897);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,525,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4843);
				match(MODIFY);
				setState(4844);
				match(NAME);
				setState(4845);
				match(EQ_);
				setState(4846);
				databaseName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4847);
				match(COLLATE);
				setState(4848);
				ignoredIdentifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4849);
				fileAndFilegroupOptions();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4850);
				match(SET);
				setState(4851);
				alterDatabaseOptionSpec();
				setState(4856);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(4852);
					match(COMMA_);
					setState(4853);
					alterDatabaseOptionSpec();
					}
					}
					setState(4858);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4861);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4859);
					match(WITH);
					setState(4860);
					termination();
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4863);
				match(MODIFY);
				setState(4864);
				match(LP_);
				setState(4865);
				editionOptions();
				setState(4870);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(4866);
					match(COMMA_);
					setState(4867);
					editionOptions();
					}
					}
					setState(4872);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4873);
				match(RP_);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4875);
				match(MODIFY);
				setState(4876);
				match(BACKUP_STORAGE_REDUNDANCY);
				setState(4877);
				match(EQ_);
				setState(4878);
				match(STRING_);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4879);
				match(ADD);
				setState(4880);
				match(SECONDARY);
				setState(4881);
				match(ON);
				setState(4882);
				match(SERVER);
				setState(4883);
				ignoredIdentifier();
				setState(4893);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4884);
					match(WITH);
					setState(4885);
					addSecondaryOption();
					setState(4890);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA_) {
						{
						{
						setState(4886);
						match(COMMA_);
						setState(4887);
						addSecondaryOption();
						}
						}
						setState(4892);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4895);
				match(FAILOVER);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4896);
				match(FORCE_FAILOVER_ALLOW_DATA_LOSS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AddSecondaryOptionContext extends ParserRuleContext {
		public Token SECONDARY_TYPE;
		public TerminalNode ALLOW_CONNECTIONS() { return getToken(SQLServerStatementParser.ALLOW_CONNECTIONS, 0); }
		public List<TerminalNode> EQ_() { return getTokens(SQLServerStatementParser.EQ_); }
		public TerminalNode EQ_(int i) {
			return getToken(SQLServerStatementParser.EQ_, i);
		}
		public TerminalNode ALL() { return getToken(SQLServerStatementParser.ALL, 0); }
		public TerminalNode NO() { return getToken(SQLServerStatementParser.NO, 0); }
		public TerminalNode SERVICE_OBJECTIVE() { return getToken(SQLServerStatementParser.SERVICE_OBJECTIVE, 0); }
		public ServiceObjectiveContext serviceObjective() {
			return getRuleContext(ServiceObjectiveContext.class,0);
		}
		public TerminalNode DATABASE_NAME() { return getToken(SQLServerStatementParser.DATABASE_NAME, 0); }
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public TerminalNode GEO() { return getToken(SQLServerStatementParser.GEO, 0); }
		public TerminalNode NAMED() { return getToken(SQLServerStatementParser.NAMED, 0); }
		public AddSecondaryOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_addSecondaryOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAddSecondaryOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAddSecondaryOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAddSecondaryOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AddSecondaryOptionContext addSecondaryOption() throws RecognitionException {
		AddSecondaryOptionContext _localctx = new AddSecondaryOptionContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_addSecondaryOption);
		int _la;
		try {
			setState(4911);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALLOW_CONNECTIONS:
				enterOuterAlt(_localctx, 1);
				{
				setState(4899);
				match(ALLOW_CONNECTIONS);
				setState(4900);
				match(EQ_);
				setState(4901);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==NO) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SERVICE_OBJECTIVE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4902);
				match(SERVICE_OBJECTIVE);
				setState(4903);
				match(EQ_);
				setState(4909);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ELASTIC_POOL:
				case STRING_:
					{
					setState(4904);
					serviceObjective();
					}
					break;
				case DATABASE_NAME:
					{
					setState(4905);
					match(DATABASE_NAME);
					setState(4906);
					match(EQ_);
					setState(4907);
					databaseName();
					}
					break;
				case GEO:
				case NAMED:
					{
					setState(4908);
					((AddSecondaryOptionContext)_localctx).SECONDARY_TYPE = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==GEO || _la==NAMED) ) {
						((AddSecondaryOptionContext)_localctx).SECONDARY_TYPE = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EditionOptionsContext extends ParserRuleContext {
		public TerminalNode MAXSIZE() { return getToken(SQLServerStatementParser.MAXSIZE, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode NUMBER_() { return getToken(SQLServerStatementParser.NUMBER_, 0); }
		public TerminalNode MB() { return getToken(SQLServerStatementParser.MB, 0); }
		public TerminalNode GB() { return getToken(SQLServerStatementParser.GB, 0); }
		public TerminalNode EDITION() { return getToken(SQLServerStatementParser.EDITION, 0); }
		public TerminalNode STRING_() { return getToken(SQLServerStatementParser.STRING_, 0); }
		public TerminalNode SERVICE_OBJECTIVE() { return getToken(SQLServerStatementParser.SERVICE_OBJECTIVE, 0); }
		public ServiceObjectiveContext serviceObjective() {
			return getRuleContext(ServiceObjectiveContext.class,0);
		}
		public EditionOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_editionOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterEditionOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitEditionOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitEditionOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EditionOptionsContext editionOptions() throws RecognitionException {
		EditionOptionsContext _localctx = new EditionOptionsContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_editionOptions);
		int _la;
		try {
			setState(4926);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAXSIZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4913);
				match(MAXSIZE);
				setState(4914);
				match(EQ_);
				setState(4915);
				match(NUMBER_);
				setState(4916);
				_la = _input.LA(1);
				if ( !(_la==MB || _la==GB) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case EDITION:
				enterOuterAlt(_localctx, 2);
				{
				setState(4917);
				match(EDITION);
				setState(4918);
				match(EQ_);
				setState(4919);
				match(STRING_);
				}
				break;
			case SERVICE_OBJECTIVE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4920);
				match(SERVICE_OBJECTIVE);
				setState(4921);
				match(EQ_);
				setState(4924);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,528,_ctx) ) {
				case 1:
					{
					setState(4922);
					match(STRING_);
					}
					break;
				case 2:
					{
					setState(4923);
					serviceObjective();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ServiceObjectiveContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(SQLServerStatementParser.STRING_, 0); }
		public TerminalNode ELASTIC_POOL() { return getToken(SQLServerStatementParser.ELASTIC_POOL, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public ServiceObjectiveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serviceObjective; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterServiceObjective(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitServiceObjective(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitServiceObjective(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServiceObjectiveContext serviceObjective() throws RecognitionException {
		ServiceObjectiveContext _localctx = new ServiceObjectiveContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_serviceObjective);
		try {
			setState(4936);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_:
				enterOuterAlt(_localctx, 1);
				{
				setState(4928);
				match(STRING_);
				}
				break;
			case ELASTIC_POOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4929);
				match(ELASTIC_POOL);
				setState(4930);
				match(LP_);
				setState(4931);
				ignoredIdentifier();
				setState(4932);
				match(EQ_);
				setState(4933);
				match(STRING_);
				setState(4934);
				match(RP_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterDatabaseOptionSpecContext extends ParserRuleContext {
		public AcceleratedDatabaseRecoveryContext acceleratedDatabaseRecovery() {
			return getRuleContext(AcceleratedDatabaseRecoveryContext.class,0);
		}
		public AutoOptionContext autoOption() {
			return getRuleContext(AutoOptionContext.class,0);
		}
		public AutomaticTuningOptionContext automaticTuningOption() {
			return getRuleContext(AutomaticTuningOptionContext.class,0);
		}
		public ChangeTrackingOptionContext changeTrackingOption() {
			return getRuleContext(ChangeTrackingOptionContext.class,0);
		}
		public TerminalNode CONTAINMENT() { return getToken(SQLServerStatementParser.CONTAINMENT, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode NONE() { return getToken(SQLServerStatementParser.NONE, 0); }
		public TerminalNode PARTIAL() { return getToken(SQLServerStatementParser.PARTIAL, 0); }
		public CursorOptionContext cursorOption() {
			return getRuleContext(CursorOptionContext.class,0);
		}
		public TerminalNode DATE_CORRELATION_OPTIMIZATION() { return getToken(SQLServerStatementParser.DATE_CORRELATION_OPTIMIZATION, 0); }
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode OFF() { return getToken(SQLServerStatementParser.OFF, 0); }
		public TerminalNode ENCRYPTION() { return getToken(SQLServerStatementParser.ENCRYPTION, 0); }
		public TerminalNode SUSPEND() { return getToken(SQLServerStatementParser.SUSPEND, 0); }
		public TerminalNode RESUME() { return getToken(SQLServerStatementParser.RESUME, 0); }
		public TerminalNode ONLINE() { return getToken(SQLServerStatementParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(SQLServerStatementParser.OFFLINE, 0); }
		public TerminalNode EMERGENCY() { return getToken(SQLServerStatementParser.EMERGENCY, 0); }
		public TerminalNode READ_ONLY() { return getToken(SQLServerStatementParser.READ_ONLY, 0); }
		public TerminalNode READ_WRITE() { return getToken(SQLServerStatementParser.READ_WRITE, 0); }
		public TerminalNode SINGLE_USER() { return getToken(SQLServerStatementParser.SINGLE_USER, 0); }
		public TerminalNode RESTRICTED_USER() { return getToken(SQLServerStatementParser.RESTRICTED_USER, 0); }
		public TerminalNode MULTI_USER() { return getToken(SQLServerStatementParser.MULTI_USER, 0); }
		public TerminalNode DELAYED_DURABILITY() { return getToken(SQLServerStatementParser.DELAYED_DURABILITY, 0); }
		public TerminalNode DISABLED() { return getToken(SQLServerStatementParser.DISABLED, 0); }
		public TerminalNode ALLOWED() { return getToken(SQLServerStatementParser.ALLOWED, 0); }
		public TerminalNode FORCED() { return getToken(SQLServerStatementParser.FORCED, 0); }
		public ExternalAccessOptionContext externalAccessOption() {
			return getRuleContext(ExternalAccessOptionContext.class,0);
		}
		public TerminalNode FILESTREAM() { return getToken(SQLServerStatementParser.FILESTREAM, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public FileStreamOptionContext fileStreamOption() {
			return getRuleContext(FileStreamOptionContext.class,0);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(SQLServerStatementParser.DATABASE, 0); }
		public TerminalNode SET() { return getToken(SQLServerStatementParser.SET, 0); }
		public TerminalNode HADR() { return getToken(SQLServerStatementParser.HADR, 0); }
		public TerminalNode MIXED_PAGE_ALLOCATION() { return getToken(SQLServerStatementParser.MIXED_PAGE_ALLOCATION, 0); }
		public TerminalNode PARAMETERIZATION() { return getToken(SQLServerStatementParser.PARAMETERIZATION, 0); }
		public TerminalNode SIMPLE() { return getToken(SQLServerStatementParser.SIMPLE, 0); }
		public QueryStoreOptionsContext queryStoreOptions() {
			return getRuleContext(QueryStoreOptionsContext.class,0);
		}
		public RecoveryOptionContext recoveryOption() {
			return getRuleContext(RecoveryOptionContext.class,0);
		}
		public ServiceBrokerOptionContext serviceBrokerOption() {
			return getRuleContext(ServiceBrokerOptionContext.class,0);
		}
		public SnapshotOptionContext snapshotOption() {
			return getRuleContext(SnapshotOptionContext.class,0);
		}
		public SqlOptionContext sqlOption() {
			return getRuleContext(SqlOptionContext.class,0);
		}
		public TargetRecoveryTimeOptionContext targetRecoveryTimeOption() {
			return getRuleContext(TargetRecoveryTimeOptionContext.class,0);
		}
		public TerminationContext termination() {
			return getRuleContext(TerminationContext.class,0);
		}
		public TerminalNode TEMPORAL_HISTORY_RETENTION() { return getToken(SQLServerStatementParser.TEMPORAL_HISTORY_RETENTION, 0); }
		public TerminalNode DATA_RETENTION() { return getToken(SQLServerStatementParser.DATA_RETENTION, 0); }
		public AlterDatabaseOptionSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabaseOptionSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAlterDatabaseOptionSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAlterDatabaseOptionSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAlterDatabaseOptionSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseOptionSpecContext alterDatabaseOptionSpec() throws RecognitionException {
		AlterDatabaseOptionSpecContext _localctx = new AlterDatabaseOptionSpecContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_alterDatabaseOptionSpec);
		int _la;
		try {
			setState(4981);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACCELERATED_DATABASE_RECOVERY:
				enterOuterAlt(_localctx, 1);
				{
				setState(4938);
				acceleratedDatabaseRecovery();
				}
				break;
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_CREATE_STATISTICS:
			case AUTO_CLOSE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4939);
				autoOption();
				}
				break;
			case AUTOMATIC_TUNING:
				enterOuterAlt(_localctx, 3);
				{
				setState(4940);
				automaticTuningOption();
				}
				break;
			case CHANGE_TRACKING:
				enterOuterAlt(_localctx, 4);
				{
				setState(4941);
				changeTrackingOption();
				}
				break;
			case CONTAINMENT:
				enterOuterAlt(_localctx, 5);
				{
				setState(4942);
				match(CONTAINMENT);
				setState(4943);
				match(EQ_);
				setState(4944);
				_la = _input.LA(1);
				if ( !(_la==NONE || _la==PARTIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case CURSOR_DEFAULT:
			case CURSOR_CLOSE_ON_COMMIT:
				enterOuterAlt(_localctx, 6);
				{
				setState(4945);
				cursorOption();
				}
				break;
			case DATE_CORRELATION_OPTIMIZATION:
				enterOuterAlt(_localctx, 7);
				{
				setState(4946);
				match(DATE_CORRELATION_OPTIMIZATION);
				setState(4947);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case ENCRYPTION:
				enterOuterAlt(_localctx, 8);
				{
				setState(4948);
				match(ENCRYPTION);
				setState(4949);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF || _la==RESUME || _la==SUSPEND) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case ONLINE:
			case OFFLINE:
			case EMERGENCY:
				enterOuterAlt(_localctx, 9);
				{
				setState(4950);
				_la = _input.LA(1);
				if ( !(_la==ONLINE || _la==OFFLINE || _la==EMERGENCY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case READ_ONLY:
			case READ_WRITE:
				enterOuterAlt(_localctx, 10);
				{
				setState(4951);
				_la = _input.LA(1);
				if ( !(_la==READ_ONLY || _la==READ_WRITE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case MULTI_USER:
			case RESTRICTED_USER:
			case SINGLE_USER:
				enterOuterAlt(_localctx, 11);
				{
				setState(4952);
				_la = _input.LA(1);
				if ( !(((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & 7L) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case DELAYED_DURABILITY:
				enterOuterAlt(_localctx, 12);
				{
				setState(4953);
				match(DELAYED_DURABILITY);
				setState(4954);
				match(EQ_);
				setState(4955);
				_la = _input.LA(1);
				if ( !(_la==FORCED || _la==DISABLED || _la==ALLOWED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case DB_CHAINING:
			case TRUSTWORTHY:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case NESTED_TRIGGERS:
			case TRANSFORM_NOISE_WORDS:
			case TWO_DIGIT_YEAR_CUTOFF:
				enterOuterAlt(_localctx, 13);
				{
				setState(4956);
				externalAccessOption();
				}
				break;
			case FILESTREAM:
				enterOuterAlt(_localctx, 14);
				{
				setState(4957);
				match(FILESTREAM);
				setState(4958);
				match(LP_);
				setState(4959);
				fileStreamOption();
				setState(4960);
				match(RP_);
				}
				break;
			case ALTER:
				enterOuterAlt(_localctx, 15);
				{
				setState(4962);
				match(ALTER);
				setState(4963);
				match(DATABASE);
				setState(4964);
				match(SET);
				setState(4965);
				match(HADR);
				}
				break;
			case MIXED_PAGE_ALLOCATION:
				enterOuterAlt(_localctx, 16);
				{
				setState(4966);
				match(MIXED_PAGE_ALLOCATION);
				setState(4967);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case PARAMETERIZATION:
				enterOuterAlt(_localctx, 17);
				{
				setState(4968);
				match(PARAMETERIZATION);
				setState(4969);
				_la = _input.LA(1);
				if ( !(_la==SIMPLE || _la==FORCED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case QUERY_STORE:
				enterOuterAlt(_localctx, 18);
				{
				setState(4970);
				queryStoreOptions();
				}
				break;
			case PAGE_VERIFY:
			case TORN_PAGE_DETECTION:
			case RECOVERY:
				enterOuterAlt(_localctx, 19);
				{
				setState(4971);
				recoveryOption();
				}
				break;
			case HONOR_BROKER_PRIORITY:
			case ERROR_BROKER_CONVERSATIONS:
			case NEW_BROKER:
			case DISABLE_BROKER:
			case ENABLE_BROKER:
				enterOuterAlt(_localctx, 20);
				{
				setState(4972);
				serviceBrokerOption();
				}
				break;
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case READ_COMMITTED_SNAPSHOT:
			case ALLOW_SNAPSHOT_ISOLATION:
				enterOuterAlt(_localctx, 21);
				{
				setState(4973);
				snapshotOption();
				}
				break;
			case RECURSIVE_TRIGGERS:
			case QUOTED_IDENTIFIER:
			case NUMERIC_ROUNDABORT:
			case CONCAT_NULL_YIELDS_NULL:
			case COMPATIBILITY_LEVEL:
			case ARITHABORT:
			case ANSI_WARNINGS:
			case ANSI_PADDING:
			case ANSI_NULLS:
			case ANSI_NULL_DEFAULT:
				enterOuterAlt(_localctx, 22);
				{
				setState(4974);
				sqlOption();
				}
				break;
			case TARGET_RECOVERY_TIME:
				enterOuterAlt(_localctx, 23);
				{
				setState(4975);
				targetRecoveryTimeOption();
				}
				break;
			case ROLLBACK:
			case NO_WAIT:
				enterOuterAlt(_localctx, 24);
				{
				setState(4976);
				termination();
				}
				break;
			case TEMPORAL_HISTORY_RETENTION:
				enterOuterAlt(_localctx, 25);
				{
				setState(4977);
				match(TEMPORAL_HISTORY_RETENTION);
				setState(4978);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case DATA_RETENTION:
				enterOuterAlt(_localctx, 26);
				{
				setState(4979);
				match(DATA_RETENTION);
				setState(4980);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FileAndFilegroupOptionsContext extends ParserRuleContext {
		public AddOrModifyFilesContext addOrModifyFiles() {
			return getRuleContext(AddOrModifyFilesContext.class,0);
		}
		public FileSpecContext fileSpec() {
			return getRuleContext(FileSpecContext.class,0);
		}
		public AddOrModifyFilegroupsContext addOrModifyFilegroups() {
			return getRuleContext(AddOrModifyFilegroupsContext.class,0);
		}
		public FilegroupUpdatabilityOptionContext filegroupUpdatabilityOption() {
			return getRuleContext(FilegroupUpdatabilityOptionContext.class,0);
		}
		public FileAndFilegroupOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fileAndFilegroupOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterFileAndFilegroupOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitFileAndFilegroupOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitFileAndFilegroupOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FileAndFilegroupOptionsContext fileAndFilegroupOptions() throws RecognitionException {
		FileAndFilegroupOptionsContext _localctx = new FileAndFilegroupOptionsContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_fileAndFilegroupOptions);
		try {
			setState(4987);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,532,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4983);
				addOrModifyFiles();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4984);
				fileSpec();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4985);
				addOrModifyFilegroups();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4986);
				filegroupUpdatabilityOption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AddOrModifyFilegroupsContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(SQLServerStatementParser.ADD, 0); }
		public TerminalNode FILEGROUP() { return getToken(SQLServerStatementParser.FILEGROUP, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public TerminalNode CONTAINS() { return getToken(SQLServerStatementParser.CONTAINS, 0); }
		public TerminalNode FILESTREAM() { return getToken(SQLServerStatementParser.FILESTREAM, 0); }
		public TerminalNode MEMORY_OPTIMIZED_DATA() { return getToken(SQLServerStatementParser.MEMORY_OPTIMIZED_DATA, 0); }
		public TerminalNode REMOVE() { return getToken(SQLServerStatementParser.REMOVE, 0); }
		public TerminalNode MODIFY() { return getToken(SQLServerStatementParser.MODIFY, 0); }
		public FilegroupUpdatabilityOptionContext filegroupUpdatabilityOption() {
			return getRuleContext(FilegroupUpdatabilityOptionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(SQLServerStatementParser.DEFAULT, 0); }
		public TerminalNode NAME() { return getToken(SQLServerStatementParser.NAME, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode AUTOGROW_SINGLE_FILE() { return getToken(SQLServerStatementParser.AUTOGROW_SINGLE_FILE, 0); }
		public TerminalNode AUTOGROW_ALL_FILES() { return getToken(SQLServerStatementParser.AUTOGROW_ALL_FILES, 0); }
		public AddOrModifyFilegroupsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_addOrModifyFilegroups; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAddOrModifyFilegroups(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAddOrModifyFilegroups(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAddOrModifyFilegroups(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AddOrModifyFilegroupsContext addOrModifyFilegroups() throws RecognitionException {
		AddOrModifyFilegroupsContext _localctx = new AddOrModifyFilegroupsContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_addOrModifyFilegroups);
		int _la;
		try {
			setState(5011);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				enterOuterAlt(_localctx, 1);
				{
				setState(4989);
				match(ADD);
				setState(4990);
				match(FILEGROUP);
				setState(4991);
				ignoredIdentifier();
				setState(4996);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,533,_ctx) ) {
				case 1:
					{
					setState(4992);
					match(CONTAINS);
					setState(4993);
					match(FILESTREAM);
					}
					break;
				case 2:
					{
					setState(4994);
					match(CONTAINS);
					setState(4995);
					match(MEMORY_OPTIMIZED_DATA);
					}
					break;
				}
				}
				break;
			case REMOVE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4998);
				match(REMOVE);
				setState(4999);
				match(FILEGROUP);
				setState(5000);
				ignoredIdentifier();
				}
				break;
			case MODIFY:
				enterOuterAlt(_localctx, 3);
				{
				setState(5001);
				match(MODIFY);
				setState(5002);
				match(FILEGROUP);
				setState(5003);
				ignoredIdentifier();
				setState(5004);
				filegroupUpdatabilityOption();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 4);
				{
				setState(5006);
				match(DEFAULT);
				}
				break;
			case NAME:
				enterOuterAlt(_localctx, 5);
				{
				setState(5007);
				match(NAME);
				setState(5008);
				match(EQ_);
				setState(5009);
				ignoredIdentifier();
				}
				break;
			case AUTOGROW_SINGLE_FILE:
			case AUTOGROW_ALL_FILES:
				enterOuterAlt(_localctx, 6);
				{
				setState(5010);
				_la = _input.LA(1);
				if ( !(_la==AUTOGROW_SINGLE_FILE || _la==AUTOGROW_ALL_FILES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FilegroupUpdatabilityOptionContext extends ParserRuleContext {
		public TerminalNode READONLY() { return getToken(SQLServerStatementParser.READONLY, 0); }
		public TerminalNode READWRITE() { return getToken(SQLServerStatementParser.READWRITE, 0); }
		public TerminalNode READ_ONLY() { return getToken(SQLServerStatementParser.READ_ONLY, 0); }
		public TerminalNode READ_WRITE() { return getToken(SQLServerStatementParser.READ_WRITE, 0); }
		public FilegroupUpdatabilityOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filegroupUpdatabilityOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterFilegroupUpdatabilityOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitFilegroupUpdatabilityOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitFilegroupUpdatabilityOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FilegroupUpdatabilityOptionContext filegroupUpdatabilityOption() throws RecognitionException {
		FilegroupUpdatabilityOptionContext _localctx = new FilegroupUpdatabilityOptionContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_filegroupUpdatabilityOption);
		int _la;
		try {
			setState(5015);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READONLY:
			case READWRITE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5013);
				_la = _input.LA(1);
				if ( !(_la==READONLY || _la==READWRITE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case READ_ONLY:
			case READ_WRITE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5014);
				_la = _input.LA(1);
				if ( !(_la==READ_ONLY || _la==READ_WRITE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AddOrModifyFilesContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(SQLServerStatementParser.ADD, 0); }
		public TerminalNode FILE() { return getToken(SQLServerStatementParser.FILE, 0); }
		public List<FileSpecContext> fileSpec() {
			return getRuleContexts(FileSpecContext.class);
		}
		public FileSpecContext fileSpec(int i) {
			return getRuleContext(FileSpecContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public TerminalNode TO() { return getToken(SQLServerStatementParser.TO, 0); }
		public TerminalNode FILEGROUP() { return getToken(SQLServerStatementParser.FILEGROUP, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public TerminalNode LOG() { return getToken(SQLServerStatementParser.LOG, 0); }
		public TerminalNode REMOVE() { return getToken(SQLServerStatementParser.REMOVE, 0); }
		public TerminalNode STRING_() { return getToken(SQLServerStatementParser.STRING_, 0); }
		public TerminalNode MODIFY() { return getToken(SQLServerStatementParser.MODIFY, 0); }
		public AddOrModifyFilesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_addOrModifyFiles; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAddOrModifyFiles(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAddOrModifyFiles(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAddOrModifyFiles(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AddOrModifyFilesContext addOrModifyFiles() throws RecognitionException {
		AddOrModifyFilesContext _localctx = new AddOrModifyFilesContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_addOrModifyFiles);
		int _la;
		try {
			setState(5049);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,539,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5017);
				match(ADD);
				setState(5018);
				match(FILE);
				setState(5019);
				fileSpec();
				setState(5024);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(5020);
					match(COMMA_);
					setState(5021);
					fileSpec();
					}
					}
					setState(5026);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5030);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(5027);
					match(TO);
					setState(5028);
					match(FILEGROUP);
					setState(5029);
					ignoredIdentifier();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5032);
				match(ADD);
				setState(5033);
				match(LOG);
				setState(5034);
				match(FILE);
				setState(5035);
				fileSpec();
				setState(5040);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(5036);
					match(COMMA_);
					setState(5037);
					fileSpec();
					}
					}
					setState(5042);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5043);
				match(REMOVE);
				setState(5044);
				match(FILE);
				setState(5045);
				match(STRING_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5046);
				match(MODIFY);
				setState(5047);
				match(FILE);
				setState(5048);
				fileSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AcceleratedDatabaseRecoveryContext extends ParserRuleContext {
		public TerminalNode ACCELERATED_DATABASE_RECOVERY() { return getToken(SQLServerStatementParser.ACCELERATED_DATABASE_RECOVERY, 0); }
		public List<TerminalNode> EQ_() { return getTokens(SQLServerStatementParser.EQ_); }
		public TerminalNode EQ_(int i) {
			return getToken(SQLServerStatementParser.EQ_, i);
		}
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode OFF() { return getToken(SQLServerStatementParser.OFF, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public TerminalNode PERSISTENT_VERSION_STORE_FILEGROUP() { return getToken(SQLServerStatementParser.PERSISTENT_VERSION_STORE_FILEGROUP, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public AcceleratedDatabaseRecoveryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_acceleratedDatabaseRecovery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAcceleratedDatabaseRecovery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAcceleratedDatabaseRecovery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAcceleratedDatabaseRecovery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AcceleratedDatabaseRecoveryContext acceleratedDatabaseRecovery() throws RecognitionException {
		AcceleratedDatabaseRecoveryContext _localctx = new AcceleratedDatabaseRecoveryContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_acceleratedDatabaseRecovery);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5051);
			match(ACCELERATED_DATABASE_RECOVERY);
			setState(5052);
			match(EQ_);
			setState(5053);
			_la = _input.LA(1);
			if ( !(_la==ON || _la==OFF) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5060);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,540,_ctx) ) {
			case 1:
				{
				setState(5054);
				match(LP_);
				setState(5055);
				match(PERSISTENT_VERSION_STORE_FILEGROUP);
				setState(5056);
				match(EQ_);
				setState(5057);
				ignoredIdentifier();
				setState(5058);
				match(RP_);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AutoOptionContext extends ParserRuleContext {
		public TerminalNode AUTO_CLOSE() { return getToken(SQLServerStatementParser.AUTO_CLOSE, 0); }
		public List<TerminalNode> ON() { return getTokens(SQLServerStatementParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(SQLServerStatementParser.ON, i);
		}
		public TerminalNode OFF() { return getToken(SQLServerStatementParser.OFF, 0); }
		public TerminalNode AUTO_CREATE_STATISTICS() { return getToken(SQLServerStatementParser.AUTO_CREATE_STATISTICS, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public TerminalNode INCREMENTAL() { return getToken(SQLServerStatementParser.INCREMENTAL, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public TerminalNode AUTO_SHRINK() { return getToken(SQLServerStatementParser.AUTO_SHRINK, 0); }
		public TerminalNode AUTO_UPDATE_STATISTICS() { return getToken(SQLServerStatementParser.AUTO_UPDATE_STATISTICS, 0); }
		public TerminalNode AUTO_UPDATE_STATISTICS_ASYNC() { return getToken(SQLServerStatementParser.AUTO_UPDATE_STATISTICS_ASYNC, 0); }
		public AutoOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_autoOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAutoOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAutoOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAutoOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AutoOptionContext autoOption() throws RecognitionException {
		AutoOptionContext _localctx = new AutoOptionContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_autoOption);
		int _la;
		try {
			setState(5082);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AUTO_CLOSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5062);
				match(AUTO_CLOSE);
				setState(5063);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case AUTO_CREATE_STATISTICS:
				enterOuterAlt(_localctx, 2);
				{
				setState(5064);
				match(AUTO_CREATE_STATISTICS);
				setState(5074);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OFF:
					{
					setState(5065);
					match(OFF);
					}
					break;
				case ON:
					{
					setState(5066);
					match(ON);
					setState(5072);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,541,_ctx) ) {
					case 1:
						{
						setState(5067);
						match(LP_);
						setState(5068);
						match(INCREMENTAL);
						setState(5069);
						match(EQ_);
						setState(5070);
						_la = _input.LA(1);
						if ( !(_la==ON || _la==OFF) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5071);
						match(RP_);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case AUTO_SHRINK:
				enterOuterAlt(_localctx, 3);
				{
				setState(5076);
				match(AUTO_SHRINK);
				setState(5077);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case AUTO_UPDATE_STATISTICS:
				enterOuterAlt(_localctx, 4);
				{
				setState(5078);
				match(AUTO_UPDATE_STATISTICS);
				setState(5079);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case AUTO_UPDATE_STATISTICS_ASYNC:
				enterOuterAlt(_localctx, 5);
				{
				setState(5080);
				match(AUTO_UPDATE_STATISTICS_ASYNC);
				setState(5081);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AutomaticTuningOptionContext extends ParserRuleContext {
		public TerminalNode AUTOMATIC_TUNING() { return getToken(SQLServerStatementParser.AUTOMATIC_TUNING, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public TerminalNode FORCE_LAST_GOOD_PLAN() { return getToken(SQLServerStatementParser.FORCE_LAST_GOOD_PLAN, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode OFF() { return getToken(SQLServerStatementParser.OFF, 0); }
		public AutomaticTuningOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_automaticTuningOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAutomaticTuningOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAutomaticTuningOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAutomaticTuningOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AutomaticTuningOptionContext automaticTuningOption() throws RecognitionException {
		AutomaticTuningOptionContext _localctx = new AutomaticTuningOptionContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_automaticTuningOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5084);
			match(AUTOMATIC_TUNING);
			setState(5085);
			match(LP_);
			setState(5086);
			match(FORCE_LAST_GOOD_PLAN);
			setState(5087);
			match(EQ_);
			setState(5088);
			_la = _input.LA(1);
			if ( !(_la==ON || _la==OFF) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5089);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChangeTrackingOptionContext extends ParserRuleContext {
		public TerminalNode CHANGE_TRACKING() { return getToken(SQLServerStatementParser.CHANGE_TRACKING, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode OFF() { return getToken(SQLServerStatementParser.OFF, 0); }
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<ChangeTrackingOptionListContext> changeTrackingOptionList() {
			return getRuleContexts(ChangeTrackingOptionListContext.class);
		}
		public ChangeTrackingOptionListContext changeTrackingOptionList(int i) {
			return getRuleContext(ChangeTrackingOptionListContext.class,i);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public ChangeTrackingOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeTrackingOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterChangeTrackingOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitChangeTrackingOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitChangeTrackingOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChangeTrackingOptionContext changeTrackingOption() throws RecognitionException {
		ChangeTrackingOptionContext _localctx = new ChangeTrackingOptionContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_changeTrackingOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5091);
			match(CHANGE_TRACKING);
			setState(5111);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,547,_ctx) ) {
			case 1:
				{
				setState(5092);
				match(EQ_);
				setState(5093);
				match(OFF);
				}
				break;
			case 2:
				{
				setState(5096);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(5094);
					match(EQ_);
					setState(5095);
					match(ON);
					}
				}

				setState(5109);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,546,_ctx) ) {
				case 1:
					{
					setState(5098);
					match(LP_);
					setState(5099);
					changeTrackingOptionList();
					setState(5104);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA_) {
						{
						{
						setState(5100);
						match(COMMA_);
						setState(5101);
						changeTrackingOptionList();
						}
						}
						setState(5106);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(5107);
					match(RP_);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChangeTrackingOptionListContext extends ParserRuleContext {
		public TerminalNode AUTO_CLEANUP() { return getToken(SQLServerStatementParser.AUTO_CLEANUP, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode OFF() { return getToken(SQLServerStatementParser.OFF, 0); }
		public TerminalNode CHANGE_RETENTION() { return getToken(SQLServerStatementParser.CHANGE_RETENTION, 0); }
		public TerminalNode NUMBER_() { return getToken(SQLServerStatementParser.NUMBER_, 0); }
		public TerminalNode DAYS() { return getToken(SQLServerStatementParser.DAYS, 0); }
		public TerminalNode HOURS() { return getToken(SQLServerStatementParser.HOURS, 0); }
		public TerminalNode MINUTES() { return getToken(SQLServerStatementParser.MINUTES, 0); }
		public ChangeTrackingOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeTrackingOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterChangeTrackingOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitChangeTrackingOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitChangeTrackingOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChangeTrackingOptionListContext changeTrackingOptionList() throws RecognitionException {
		ChangeTrackingOptionListContext _localctx = new ChangeTrackingOptionListContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_changeTrackingOptionList);
		int _la;
		try {
			setState(5120);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AUTO_CLEANUP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5113);
				match(AUTO_CLEANUP);
				setState(5114);
				match(EQ_);
				setState(5115);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case CHANGE_RETENTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(5116);
				match(CHANGE_RETENTION);
				setState(5117);
				match(EQ_);
				setState(5118);
				match(NUMBER_);
				setState(5119);
				_la = _input.LA(1);
				if ( !(_la==DAYS || _la==MINUTES || _la==HOURS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CursorOptionContext extends ParserRuleContext {
		public TerminalNode CURSOR_CLOSE_ON_COMMIT() { return getToken(SQLServerStatementParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode OFF() { return getToken(SQLServerStatementParser.OFF, 0); }
		public TerminalNode CURSOR_DEFAULT() { return getToken(SQLServerStatementParser.CURSOR_DEFAULT, 0); }
		public TerminalNode LOCAL() { return getToken(SQLServerStatementParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(SQLServerStatementParser.GLOBAL, 0); }
		public CursorOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCursorOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCursorOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCursorOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorOptionContext cursorOption() throws RecognitionException {
		CursorOptionContext _localctx = new CursorOptionContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_cursorOption);
		int _la;
		try {
			setState(5126);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURSOR_CLOSE_ON_COMMIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(5122);
				match(CURSOR_CLOSE_ON_COMMIT);
				setState(5123);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case CURSOR_DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5124);
				match(CURSOR_DEFAULT);
				setState(5125);
				_la = _input.LA(1);
				if ( !(_la==LOCAL || _la==GLOBAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExternalAccessOptionContext extends ParserRuleContext {
		public TerminalNode DB_CHAINING() { return getToken(SQLServerStatementParser.DB_CHAINING, 0); }
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode OFF() { return getToken(SQLServerStatementParser.OFF, 0); }
		public TerminalNode TRUSTWORTHY() { return getToken(SQLServerStatementParser.TRUSTWORTHY, 0); }
		public TerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return getToken(SQLServerStatementParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode STRING_() { return getToken(SQLServerStatementParser.STRING_, 0); }
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(SQLServerStatementParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode NESTED_TRIGGERS() { return getToken(SQLServerStatementParser.NESTED_TRIGGERS, 0); }
		public TerminalNode TRANSFORM_NOISE_WORDS() { return getToken(SQLServerStatementParser.TRANSFORM_NOISE_WORDS, 0); }
		public TerminalNode TWO_DIGIT_YEAR_CUTOFF() { return getToken(SQLServerStatementParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public TerminalNode NUMBER_() { return getToken(SQLServerStatementParser.NUMBER_, 0); }
		public ExternalAccessOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_externalAccessOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterExternalAccessOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitExternalAccessOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitExternalAccessOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExternalAccessOptionContext externalAccessOption() throws RecognitionException {
		ExternalAccessOptionContext _localctx = new ExternalAccessOptionContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_externalAccessOption);
		int _la;
		try {
			setState(5147);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DB_CHAINING:
				enterOuterAlt(_localctx, 1);
				{
				setState(5128);
				match(DB_CHAINING);
				setState(5129);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TRUSTWORTHY:
				enterOuterAlt(_localctx, 2);
				{
				setState(5130);
				match(TRUSTWORTHY);
				setState(5131);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case DEFAULT_FULLTEXT_LANGUAGE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5132);
				match(DEFAULT_FULLTEXT_LANGUAGE);
				setState(5133);
				match(EQ_);
				setState(5134);
				match(STRING_);
				}
				break;
			case DEFAULT_LANGUAGE:
				enterOuterAlt(_localctx, 4);
				{
				setState(5135);
				match(DEFAULT_LANGUAGE);
				setState(5136);
				match(EQ_);
				setState(5137);
				match(STRING_);
				}
				break;
			case NESTED_TRIGGERS:
				enterOuterAlt(_localctx, 5);
				{
				setState(5138);
				match(NESTED_TRIGGERS);
				setState(5139);
				match(EQ_);
				setState(5140);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TRANSFORM_NOISE_WORDS:
				enterOuterAlt(_localctx, 6);
				{
				setState(5141);
				match(TRANSFORM_NOISE_WORDS);
				setState(5142);
				match(EQ_);
				setState(5143);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TWO_DIGIT_YEAR_CUTOFF:
				enterOuterAlt(_localctx, 7);
				{
				setState(5144);
				match(TWO_DIGIT_YEAR_CUTOFF);
				setState(5145);
				match(EQ_);
				setState(5146);
				match(NUMBER_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QueryStoreOptionsContext extends ParserRuleContext {
		public TerminalNode QUERY_STORE() { return getToken(SQLServerStatementParser.QUERY_STORE, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode OFF() { return getToken(SQLServerStatementParser.OFF, 0); }
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<QueryStoreOptionListContext> queryStoreOptionList() {
			return getRuleContexts(QueryStoreOptionListContext.class);
		}
		public QueryStoreOptionListContext queryStoreOptionList(int i) {
			return getRuleContext(QueryStoreOptionListContext.class,i);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public QueryStoreOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryStoreOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterQueryStoreOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitQueryStoreOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitQueryStoreOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryStoreOptionsContext queryStoreOptions() throws RecognitionException {
		QueryStoreOptionsContext _localctx = new QueryStoreOptionsContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_queryStoreOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5149);
			match(QUERY_STORE);
			setState(5169);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,554,_ctx) ) {
			case 1:
				{
				setState(5150);
				match(EQ_);
				setState(5151);
				match(OFF);
				}
				break;
			case 2:
				{
				setState(5154);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(5152);
					match(EQ_);
					setState(5153);
					match(ON);
					}
				}

				setState(5167);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,553,_ctx) ) {
				case 1:
					{
					setState(5156);
					match(LP_);
					setState(5157);
					queryStoreOptionList();
					setState(5162);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA_) {
						{
						{
						setState(5158);
						match(COMMA_);
						setState(5159);
						queryStoreOptionList();
						}
						}
						setState(5164);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(5165);
					match(RP_);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QueryStoreOptionListContext extends ParserRuleContext {
		public TerminalNode OPERATION_MODE() { return getToken(SQLServerStatementParser.OPERATION_MODE, 0); }
		public List<TerminalNode> EQ_() { return getTokens(SQLServerStatementParser.EQ_); }
		public TerminalNode EQ_(int i) {
			return getToken(SQLServerStatementParser.EQ_, i);
		}
		public TerminalNode READ_WRITE() { return getToken(SQLServerStatementParser.READ_WRITE, 0); }
		public TerminalNode READ_ONLY() { return getToken(SQLServerStatementParser.READ_ONLY, 0); }
		public TerminalNode CLEANUP_POLICY() { return getToken(SQLServerStatementParser.CLEANUP_POLICY, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public TerminalNode STALE_QUERY_THRESHOLD_DAYS() { return getToken(SQLServerStatementParser.STALE_QUERY_THRESHOLD_DAYS, 0); }
		public TerminalNode NUMBER_() { return getToken(SQLServerStatementParser.NUMBER_, 0); }
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public TerminalNode DATA_FLUSH_INTERVAL_SECONDS() { return getToken(SQLServerStatementParser.DATA_FLUSH_INTERVAL_SECONDS, 0); }
		public TerminalNode MAX_STORAGE_SIZE_MB() { return getToken(SQLServerStatementParser.MAX_STORAGE_SIZE_MB, 0); }
		public TerminalNode INTERVAL_LENGTH_MINUTES() { return getToken(SQLServerStatementParser.INTERVAL_LENGTH_MINUTES, 0); }
		public TerminalNode SIZE_BASED_CLEANUP_MODE() { return getToken(SQLServerStatementParser.SIZE_BASED_CLEANUP_MODE, 0); }
		public TerminalNode AUTO() { return getToken(SQLServerStatementParser.AUTO, 0); }
		public TerminalNode OFF() { return getToken(SQLServerStatementParser.OFF, 0); }
		public TerminalNode QUERY_CAPTURE_MODE() { return getToken(SQLServerStatementParser.QUERY_CAPTURE_MODE, 0); }
		public TerminalNode ALL() { return getToken(SQLServerStatementParser.ALL, 0); }
		public TerminalNode CUSTOM() { return getToken(SQLServerStatementParser.CUSTOM, 0); }
		public TerminalNode NONE() { return getToken(SQLServerStatementParser.NONE, 0); }
		public TerminalNode MAX_PLANS_PER_QUERY() { return getToken(SQLServerStatementParser.MAX_PLANS_PER_QUERY, 0); }
		public TerminalNode WAIT_STATS_CAPTURE_MODE() { return getToken(SQLServerStatementParser.WAIT_STATS_CAPTURE_MODE, 0); }
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode QUERY_CAPTURE_POLICY() { return getToken(SQLServerStatementParser.QUERY_CAPTURE_POLICY, 0); }
		public List<QueryCapturePolicyOptionListContext> queryCapturePolicyOptionList() {
			return getRuleContexts(QueryCapturePolicyOptionListContext.class);
		}
		public QueryCapturePolicyOptionListContext queryCapturePolicyOptionList(int i) {
			return getRuleContext(QueryCapturePolicyOptionListContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public QueryStoreOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryStoreOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterQueryStoreOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitQueryStoreOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitQueryStoreOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryStoreOptionListContext queryStoreOptionList() throws RecognitionException {
		QueryStoreOptionListContext _localctx = new QueryStoreOptionListContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_queryStoreOptionList);
		int _la;
		try {
			setState(5215);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPERATION_MODE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5171);
				match(OPERATION_MODE);
				setState(5172);
				match(EQ_);
				setState(5173);
				_la = _input.LA(1);
				if ( !(_la==READ_ONLY || _la==READ_WRITE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case CLEANUP_POLICY:
				enterOuterAlt(_localctx, 2);
				{
				setState(5174);
				match(CLEANUP_POLICY);
				setState(5175);
				match(EQ_);
				setState(5176);
				match(LP_);
				setState(5177);
				match(STALE_QUERY_THRESHOLD_DAYS);
				setState(5178);
				match(EQ_);
				setState(5179);
				match(NUMBER_);
				setState(5180);
				match(RP_);
				}
				break;
			case DATA_FLUSH_INTERVAL_SECONDS:
				enterOuterAlt(_localctx, 3);
				{
				setState(5181);
				match(DATA_FLUSH_INTERVAL_SECONDS);
				setState(5182);
				match(EQ_);
				setState(5183);
				match(NUMBER_);
				}
				break;
			case MAX_STORAGE_SIZE_MB:
				enterOuterAlt(_localctx, 4);
				{
				setState(5184);
				match(MAX_STORAGE_SIZE_MB);
				setState(5185);
				match(EQ_);
				setState(5186);
				match(NUMBER_);
				}
				break;
			case INTERVAL_LENGTH_MINUTES:
				enterOuterAlt(_localctx, 5);
				{
				setState(5187);
				match(INTERVAL_LENGTH_MINUTES);
				setState(5188);
				match(EQ_);
				setState(5189);
				match(NUMBER_);
				}
				break;
			case SIZE_BASED_CLEANUP_MODE:
				enterOuterAlt(_localctx, 6);
				{
				setState(5190);
				match(SIZE_BASED_CLEANUP_MODE);
				setState(5191);
				match(EQ_);
				setState(5192);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==AUTO) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case QUERY_CAPTURE_MODE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5193);
				match(QUERY_CAPTURE_MODE);
				setState(5194);
				match(EQ_);
				setState(5195);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==AUTO || _la==NONE || _la==CUSTOM) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case MAX_PLANS_PER_QUERY:
				enterOuterAlt(_localctx, 8);
				{
				setState(5196);
				match(MAX_PLANS_PER_QUERY);
				setState(5197);
				match(EQ_);
				setState(5198);
				match(NUMBER_);
				}
				break;
			case WAIT_STATS_CAPTURE_MODE:
				enterOuterAlt(_localctx, 9);
				{
				setState(5199);
				match(WAIT_STATS_CAPTURE_MODE);
				setState(5200);
				match(EQ_);
				setState(5201);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case QUERY_CAPTURE_POLICY:
				enterOuterAlt(_localctx, 10);
				{
				setState(5202);
				match(QUERY_CAPTURE_POLICY);
				setState(5203);
				match(EQ_);
				setState(5204);
				match(LP_);
				setState(5205);
				queryCapturePolicyOptionList();
				setState(5210);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(5206);
					match(COMMA_);
					setState(5207);
					queryCapturePolicyOptionList();
					}
					}
					setState(5212);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5213);
				match(RP_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QueryCapturePolicyOptionListContext extends ParserRuleContext {
		public TerminalNode STALE_CAPTURE_POLICY_THRESHOLD() { return getToken(SQLServerStatementParser.STALE_CAPTURE_POLICY_THRESHOLD, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode NUMBER_() { return getToken(SQLServerStatementParser.NUMBER_, 0); }
		public TerminalNode DAYS() { return getToken(SQLServerStatementParser.DAYS, 0); }
		public TerminalNode HOURS() { return getToken(SQLServerStatementParser.HOURS, 0); }
		public TerminalNode EXECUTION_COUNT() { return getToken(SQLServerStatementParser.EXECUTION_COUNT, 0); }
		public TerminalNode TOTAL_COMPILE_CPU_TIME_MS() { return getToken(SQLServerStatementParser.TOTAL_COMPILE_CPU_TIME_MS, 0); }
		public TerminalNode TOTAL_EXECUTION_CPU_TIME_MS() { return getToken(SQLServerStatementParser.TOTAL_EXECUTION_CPU_TIME_MS, 0); }
		public QueryCapturePolicyOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryCapturePolicyOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterQueryCapturePolicyOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitQueryCapturePolicyOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitQueryCapturePolicyOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryCapturePolicyOptionListContext queryCapturePolicyOptionList() throws RecognitionException {
		QueryCapturePolicyOptionListContext _localctx = new QueryCapturePolicyOptionListContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_queryCapturePolicyOptionList);
		int _la;
		try {
			setState(5230);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STALE_CAPTURE_POLICY_THRESHOLD:
				enterOuterAlt(_localctx, 1);
				{
				setState(5217);
				match(STALE_CAPTURE_POLICY_THRESHOLD);
				setState(5218);
				match(EQ_);
				setState(5219);
				match(NUMBER_);
				setState(5220);
				_la = _input.LA(1);
				if ( !(_la==DAYS || _la==HOURS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case EXECUTION_COUNT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5221);
				match(EXECUTION_COUNT);
				setState(5222);
				match(EQ_);
				setState(5223);
				match(NUMBER_);
				}
				break;
			case TOTAL_COMPILE_CPU_TIME_MS:
				enterOuterAlt(_localctx, 3);
				{
				setState(5224);
				match(TOTAL_COMPILE_CPU_TIME_MS);
				setState(5225);
				match(EQ_);
				setState(5226);
				match(NUMBER_);
				}
				break;
			case TOTAL_EXECUTION_CPU_TIME_MS:
				enterOuterAlt(_localctx, 4);
				{
				setState(5227);
				match(TOTAL_EXECUTION_CPU_TIME_MS);
				setState(5228);
				match(EQ_);
				setState(5229);
				match(NUMBER_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RecoveryOptionContext extends ParserRuleContext {
		public TerminalNode RECOVERY() { return getToken(SQLServerStatementParser.RECOVERY, 0); }
		public TerminalNode FULL() { return getToken(SQLServerStatementParser.FULL, 0); }
		public TerminalNode BULK_LOGGED() { return getToken(SQLServerStatementParser.BULK_LOGGED, 0); }
		public TerminalNode SIMPLE() { return getToken(SQLServerStatementParser.SIMPLE, 0); }
		public TerminalNode TORN_PAGE_DETECTION() { return getToken(SQLServerStatementParser.TORN_PAGE_DETECTION, 0); }
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode OFF() { return getToken(SQLServerStatementParser.OFF, 0); }
		public TerminalNode PAGE_VERIFY() { return getToken(SQLServerStatementParser.PAGE_VERIFY, 0); }
		public TerminalNode CHECKSUM() { return getToken(SQLServerStatementParser.CHECKSUM, 0); }
		public TerminalNode NONE() { return getToken(SQLServerStatementParser.NONE, 0); }
		public RecoveryOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_recoveryOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterRecoveryOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitRecoveryOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitRecoveryOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RecoveryOptionContext recoveryOption() throws RecognitionException {
		RecoveryOptionContext _localctx = new RecoveryOptionContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_recoveryOption);
		int _la;
		try {
			setState(5238);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RECOVERY:
				enterOuterAlt(_localctx, 1);
				{
				setState(5232);
				match(RECOVERY);
				setState(5233);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==SIMPLE || _la==BULK_LOGGED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TORN_PAGE_DETECTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(5234);
				match(TORN_PAGE_DETECTION);
				setState(5235);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case PAGE_VERIFY:
				enterOuterAlt(_localctx, 3);
				{
				setState(5236);
				match(PAGE_VERIFY);
				setState(5237);
				_la = _input.LA(1);
				if ( !(_la==NONE || _la==CHECKSUM || _la==TORN_PAGE_DETECTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SqlOptionContext extends ParserRuleContext {
		public TerminalNode ANSI_NULL_DEFAULT() { return getToken(SQLServerStatementParser.ANSI_NULL_DEFAULT, 0); }
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode OFF() { return getToken(SQLServerStatementParser.OFF, 0); }
		public TerminalNode ANSI_NULLS() { return getToken(SQLServerStatementParser.ANSI_NULLS, 0); }
		public TerminalNode ANSI_PADDING() { return getToken(SQLServerStatementParser.ANSI_PADDING, 0); }
		public TerminalNode ANSI_WARNINGS() { return getToken(SQLServerStatementParser.ANSI_WARNINGS, 0); }
		public TerminalNode ARITHABORT() { return getToken(SQLServerStatementParser.ARITHABORT, 0); }
		public TerminalNode COMPATIBILITY_LEVEL() { return getToken(SQLServerStatementParser.COMPATIBILITY_LEVEL, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode NUMBER_() { return getToken(SQLServerStatementParser.NUMBER_, 0); }
		public TerminalNode CONCAT_NULL_YIELDS_NULL() { return getToken(SQLServerStatementParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public TerminalNode NUMERIC_ROUNDABORT() { return getToken(SQLServerStatementParser.NUMERIC_ROUNDABORT, 0); }
		public TerminalNode QUOTED_IDENTIFIER() { return getToken(SQLServerStatementParser.QUOTED_IDENTIFIER, 0); }
		public TerminalNode RECURSIVE_TRIGGERS() { return getToken(SQLServerStatementParser.RECURSIVE_TRIGGERS, 0); }
		public SqlOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSqlOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSqlOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSqlOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlOptionContext sqlOption() throws RecognitionException {
		SqlOptionContext _localctx = new SqlOptionContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_sqlOption);
		int _la;
		try {
			setState(5261);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ANSI_NULL_DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				setState(5240);
				match(ANSI_NULL_DEFAULT);
				setState(5241);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case ANSI_NULLS:
				enterOuterAlt(_localctx, 2);
				{
				setState(5242);
				match(ANSI_NULLS);
				setState(5243);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case ANSI_PADDING:
				enterOuterAlt(_localctx, 3);
				{
				setState(5244);
				match(ANSI_PADDING);
				setState(5245);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case ANSI_WARNINGS:
				enterOuterAlt(_localctx, 4);
				{
				setState(5246);
				match(ANSI_WARNINGS);
				setState(5247);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case ARITHABORT:
				enterOuterAlt(_localctx, 5);
				{
				setState(5248);
				match(ARITHABORT);
				setState(5249);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case COMPATIBILITY_LEVEL:
				enterOuterAlt(_localctx, 6);
				{
				setState(5250);
				match(COMPATIBILITY_LEVEL);
				setState(5251);
				match(EQ_);
				setState(5252);
				match(NUMBER_);
				}
				break;
			case CONCAT_NULL_YIELDS_NULL:
				enterOuterAlt(_localctx, 7);
				{
				setState(5253);
				match(CONCAT_NULL_YIELDS_NULL);
				setState(5254);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case NUMERIC_ROUNDABORT:
				enterOuterAlt(_localctx, 8);
				{
				setState(5255);
				match(NUMERIC_ROUNDABORT);
				setState(5256);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case QUOTED_IDENTIFIER:
				enterOuterAlt(_localctx, 9);
				{
				setState(5257);
				match(QUOTED_IDENTIFIER);
				setState(5258);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case RECURSIVE_TRIGGERS:
				enterOuterAlt(_localctx, 10);
				{
				setState(5259);
				match(RECURSIVE_TRIGGERS);
				setState(5260);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SnapshotOptionContext extends ParserRuleContext {
		public TerminalNode ALLOW_SNAPSHOT_ISOLATION() { return getToken(SQLServerStatementParser.ALLOW_SNAPSHOT_ISOLATION, 0); }
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode OFF() { return getToken(SQLServerStatementParser.OFF, 0); }
		public TerminalNode READ_COMMITTED_SNAPSHOT() { return getToken(SQLServerStatementParser.READ_COMMITTED_SNAPSHOT, 0); }
		public TerminalNode MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT() { return getToken(SQLServerStatementParser.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public SnapshotOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_snapshotOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSnapshotOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSnapshotOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSnapshotOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SnapshotOptionContext snapshotOption() throws RecognitionException {
		SnapshotOptionContext _localctx = new SnapshotOptionContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_snapshotOption);
		int _la;
		try {
			setState(5270);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALLOW_SNAPSHOT_ISOLATION:
				enterOuterAlt(_localctx, 1);
				{
				setState(5263);
				match(ALLOW_SNAPSHOT_ISOLATION);
				setState(5264);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case READ_COMMITTED_SNAPSHOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5265);
				match(READ_COMMITTED_SNAPSHOT);
				setState(5266);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5267);
				match(MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT);
				setState(5268);
				match(EQ_);
				setState(5269);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ServiceBrokerOptionContext extends ParserRuleContext {
		public TerminalNode ENABLE_BROKER() { return getToken(SQLServerStatementParser.ENABLE_BROKER, 0); }
		public TerminalNode DISABLE_BROKER() { return getToken(SQLServerStatementParser.DISABLE_BROKER, 0); }
		public TerminalNode NEW_BROKER() { return getToken(SQLServerStatementParser.NEW_BROKER, 0); }
		public TerminalNode ERROR_BROKER_CONVERSATIONS() { return getToken(SQLServerStatementParser.ERROR_BROKER_CONVERSATIONS, 0); }
		public TerminalNode HONOR_BROKER_PRIORITY() { return getToken(SQLServerStatementParser.HONOR_BROKER_PRIORITY, 0); }
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode OFF() { return getToken(SQLServerStatementParser.OFF, 0); }
		public ServiceBrokerOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serviceBrokerOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterServiceBrokerOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitServiceBrokerOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitServiceBrokerOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServiceBrokerOptionContext serviceBrokerOption() throws RecognitionException {
		ServiceBrokerOptionContext _localctx = new ServiceBrokerOptionContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_serviceBrokerOption);
		int _la;
		try {
			setState(5278);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENABLE_BROKER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5272);
				match(ENABLE_BROKER);
				}
				break;
			case DISABLE_BROKER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5273);
				match(DISABLE_BROKER);
				}
				break;
			case NEW_BROKER:
				enterOuterAlt(_localctx, 3);
				{
				setState(5274);
				match(NEW_BROKER);
				}
				break;
			case ERROR_BROKER_CONVERSATIONS:
				enterOuterAlt(_localctx, 4);
				{
				setState(5275);
				match(ERROR_BROKER_CONVERSATIONS);
				}
				break;
			case HONOR_BROKER_PRIORITY:
				enterOuterAlt(_localctx, 5);
				{
				setState(5276);
				match(HONOR_BROKER_PRIORITY);
				setState(5277);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TargetRecoveryTimeOptionContext extends ParserRuleContext {
		public TerminalNode TARGET_RECOVERY_TIME() { return getToken(SQLServerStatementParser.TARGET_RECOVERY_TIME, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode NUMBER_() { return getToken(SQLServerStatementParser.NUMBER_, 0); }
		public TerminalNode SECONDS() { return getToken(SQLServerStatementParser.SECONDS, 0); }
		public TerminalNode MINUTES() { return getToken(SQLServerStatementParser.MINUTES, 0); }
		public TargetRecoveryTimeOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_targetRecoveryTimeOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterTargetRecoveryTimeOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitTargetRecoveryTimeOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitTargetRecoveryTimeOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TargetRecoveryTimeOptionContext targetRecoveryTimeOption() throws RecognitionException {
		TargetRecoveryTimeOptionContext _localctx = new TargetRecoveryTimeOptionContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_targetRecoveryTimeOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5280);
			match(TARGET_RECOVERY_TIME);
			setState(5281);
			match(EQ_);
			setState(5282);
			match(NUMBER_);
			setState(5283);
			_la = _input.LA(1);
			if ( !(_la==MINUTES || _la==SECONDS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TerminationContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(SQLServerStatementParser.ROLLBACK, 0); }
		public TerminalNode AFTER() { return getToken(SQLServerStatementParser.AFTER, 0); }
		public TerminalNode NUMBER_() { return getToken(SQLServerStatementParser.NUMBER_, 0); }
		public TerminalNode SECONDS() { return getToken(SQLServerStatementParser.SECONDS, 0); }
		public TerminalNode IMMEDIATE() { return getToken(SQLServerStatementParser.IMMEDIATE, 0); }
		public TerminalNode NO_WAIT() { return getToken(SQLServerStatementParser.NO_WAIT, 0); }
		public TerminationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_termination; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterTermination(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitTermination(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitTermination(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TerminationContext termination() throws RecognitionException {
		TerminationContext _localctx = new TerminationContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_termination);
		int _la;
		try {
			setState(5294);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,563,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5285);
				match(ROLLBACK);
				setState(5286);
				match(AFTER);
				setState(5287);
				match(NUMBER_);
				setState(5289);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SECONDS) {
					{
					setState(5288);
					match(SECONDS);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5291);
				match(ROLLBACK);
				setState(5292);
				match(IMMEDIATE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5293);
				match(NO_WAIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateServiceClauseContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<ContractNameContext> contractName() {
			return getRuleContexts(ContractNameContext.class);
		}
		public ContractNameContext contractName(int i) {
			return getRuleContext(ContractNameContext.class,i);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public CreateServiceClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createServiceClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateServiceClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateServiceClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateServiceClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateServiceClauseContext createServiceClause() throws RecognitionException {
		CreateServiceClauseContext _localctx = new CreateServiceClauseContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_createServiceClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5296);
			match(LP_);
			setState(5297);
			contractName();
			setState(5302);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5298);
				match(COMMA_);
				setState(5299);
				contractName();
				}
				}
				setState(5304);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5305);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterServiceClauseContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<AlterServiceOptArgContext> alterServiceOptArg() {
			return getRuleContexts(AlterServiceOptArgContext.class);
		}
		public AlterServiceOptArgContext alterServiceOptArg(int i) {
			return getRuleContext(AlterServiceOptArgContext.class,i);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public AlterServiceClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterServiceClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAlterServiceClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAlterServiceClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAlterServiceClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterServiceClauseContext alterServiceClause() throws RecognitionException {
		AlterServiceClauseContext _localctx = new AlterServiceClauseContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_alterServiceClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5307);
			match(LP_);
			setState(5308);
			alterServiceOptArg();
			setState(5313);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5309);
				match(COMMA_);
				setState(5310);
				alterServiceOptArg();
				}
				}
				setState(5315);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5316);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterServiceOptArgContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(SQLServerStatementParser.ADD, 0); }
		public TerminalNode CONTRACT() { return getToken(SQLServerStatementParser.CONTRACT, 0); }
		public ContractNameContext contractName() {
			return getRuleContext(ContractNameContext.class,0);
		}
		public TerminalNode DROP() { return getToken(SQLServerStatementParser.DROP, 0); }
		public AlterServiceOptArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterServiceOptArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAlterServiceOptArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAlterServiceOptArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAlterServiceOptArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterServiceOptArgContext alterServiceOptArg() throws RecognitionException {
		AlterServiceOptArgContext _localctx = new AlterServiceOptArgContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_alterServiceOptArg);
		try {
			setState(5324);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				enterOuterAlt(_localctx, 1);
				{
				setState(5318);
				match(ADD);
				setState(5319);
				match(CONTRACT);
				setState(5320);
				contractName();
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 2);
				{
				setState(5321);
				match(DROP);
				setState(5322);
				match(CONTRACT);
				setState(5323);
				contractName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SchemaNameClauseContext extends ParserRuleContext {
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode AUTHORIZATION() { return getToken(SQLServerStatementParser.AUTHORIZATION, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public SchemaNameClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaNameClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSchemaNameClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSchemaNameClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSchemaNameClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaNameClauseContext schemaNameClause() throws RecognitionException {
		SchemaNameClauseContext _localctx = new SchemaNameClauseContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_schemaNameClause);
		try {
			setState(5333);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,567,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5326);
				schemaName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5327);
				match(AUTHORIZATION);
				setState(5328);
				ignoredIdentifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5329);
				schemaName();
				setState(5330);
				match(AUTHORIZATION);
				setState(5331);
				ignoredIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SchemaElementContext extends ParserRuleContext {
		public CreateTableContext createTable() {
			return getRuleContext(CreateTableContext.class,0);
		}
		public CreateViewContext createView() {
			return getRuleContext(CreateViewContext.class,0);
		}
		public GrantContext grant() {
			return getRuleContext(GrantContext.class,0);
		}
		public RevokeContext revoke() {
			return getRuleContext(RevokeContext.class,0);
		}
		public DenyContext deny() {
			return getRuleContext(DenyContext.class,0);
		}
		public SchemaElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSchemaElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSchemaElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSchemaElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaElementContext schemaElement() throws RecognitionException {
		SchemaElementContext _localctx = new SchemaElementContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_schemaElement);
		try {
			setState(5340);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,568,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5335);
				createTable();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5336);
				createView();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5337);
				grant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5338);
				revoke();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5339);
				deny();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateTableAsSelectClauseContext extends ParserRuleContext {
		public CreateTableAsSelectContext createTableAsSelect() {
			return getRuleContext(CreateTableAsSelectContext.class,0);
		}
		public CreateRemoteTableAsSelectContext createRemoteTableAsSelect() {
			return getRuleContext(CreateRemoteTableAsSelectContext.class,0);
		}
		public CreateTableAsSelectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableAsSelectClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateTableAsSelectClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateTableAsSelectClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateTableAsSelectClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableAsSelectClauseContext createTableAsSelectClause() throws RecognitionException {
		CreateTableAsSelectClauseContext _localctx = new CreateTableAsSelectClauseContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_createTableAsSelectClause);
		try {
			setState(5344);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,569,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5342);
				createTableAsSelect();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5343);
				createRemoteTableAsSelect();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateTableAsSelectContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SQLServerStatementParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(SQLServerStatementParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public WithDistributionOptionContext withDistributionOption() {
			return getRuleContext(WithDistributionOptionContext.class,0);
		}
		public TerminalNode AS() { return getToken(SQLServerStatementParser.AS, 0); }
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public OptionQueryHintClauseContext optionQueryHintClause() {
			return getRuleContext(OptionQueryHintClauseContext.class,0);
		}
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public CreateTableAsSelectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableAsSelect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateTableAsSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateTableAsSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateTableAsSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableAsSelectContext createTableAsSelect() throws RecognitionException {
		CreateTableAsSelectContext _localctx = new CreateTableAsSelectContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_createTableAsSelect);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5346);
			match(CREATE);
			setState(5347);
			match(TABLE);
			setState(5348);
			tableName();
			setState(5350);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(5349);
				columnNames();
				}
			}

			setState(5352);
			withDistributionOption();
			setState(5353);
			match(AS);
			setState(5354);
			select();
			setState(5355);
			optionQueryHintClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateRemoteTableAsSelectContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SQLServerStatementParser.CREATE, 0); }
		public TerminalNode REMOTE() { return getToken(SQLServerStatementParser.REMOTE, 0); }
		public TerminalNode TABLE() { return getToken(SQLServerStatementParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode AT() { return getToken(SQLServerStatementParser.AT, 0); }
		public List<TerminalNode> LP_() { return getTokens(SQLServerStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(SQLServerStatementParser.LP_, i);
		}
		public StringLiteralsContext stringLiterals() {
			return getRuleContext(StringLiteralsContext.class,0);
		}
		public List<TerminalNode> RP_() { return getTokens(SQLServerStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(SQLServerStatementParser.RP_, i);
		}
		public TerminalNode AS() { return getToken(SQLServerStatementParser.AS, 0); }
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public TerminalNode BATCH_SIZE() { return getToken(SQLServerStatementParser.BATCH_SIZE, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode INT_NUM_() { return getToken(SQLServerStatementParser.INT_NUM_, 0); }
		public CreateRemoteTableAsSelectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createRemoteTableAsSelect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateRemoteTableAsSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateRemoteTableAsSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateRemoteTableAsSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateRemoteTableAsSelectContext createRemoteTableAsSelect() throws RecognitionException {
		CreateRemoteTableAsSelectContext _localctx = new CreateRemoteTableAsSelectContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_createRemoteTableAsSelect);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5357);
			match(CREATE);
			setState(5358);
			match(REMOTE);
			setState(5359);
			match(TABLE);
			setState(5360);
			tableName();
			setState(5361);
			match(AT);
			setState(5362);
			match(LP_);
			setState(5363);
			stringLiterals();
			setState(5364);
			match(RP_);
			setState(5371);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5365);
				match(WITH);
				setState(5366);
				match(LP_);
				setState(5367);
				match(BATCH_SIZE);
				setState(5368);
				match(EQ_);
				setState(5369);
				match(INT_NUM_);
				setState(5370);
				match(RP_);
				}
			}

			setState(5373);
			match(AS);
			setState(5374);
			select();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WithDistributionOptionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public DistributionOptionContext distributionOption() {
			return getRuleContext(DistributionOptionContext.class,0);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public WithDistributionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withDistributionOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterWithDistributionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitWithDistributionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitWithDistributionOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithDistributionOptionContext withDistributionOption() throws RecognitionException {
		WithDistributionOptionContext _localctx = new WithDistributionOptionContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_withDistributionOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5376);
			match(WITH);
			setState(5377);
			match(LP_);
			setState(5378);
			distributionOption();
			setState(5388);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_) {
				{
				setState(5379);
				match(COMMA_);
				setState(5380);
				tableOption();
				setState(5385);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(5381);
					match(COMMA_);
					setState(5382);
					tableOption();
					}
					}
					setState(5387);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(5390);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptionQueryHintClauseContext extends ParserRuleContext {
		public TerminalNode OPTION() { return getToken(SQLServerStatementParser.OPTION, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<QueryHintContext> queryHint() {
			return getRuleContexts(QueryHintContext.class);
		}
		public QueryHintContext queryHint(int i) {
			return getRuleContext(QueryHintContext.class,i);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public OptionQueryHintClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionQueryHintClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterOptionQueryHintClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitOptionQueryHintClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitOptionQueryHintClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptionQueryHintClauseContext optionQueryHintClause() throws RecognitionException {
		OptionQueryHintClauseContext _localctx = new OptionQueryHintClauseContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_optionQueryHintClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5404);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(5392);
				match(OPTION);
				setState(5393);
				match(LP_);
				setState(5394);
				queryHint();
				setState(5399);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(5395);
					match(COMMA_);
					setState(5396);
					queryHint();
					}
					}
					setState(5401);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5402);
				match(RP_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(SQLServerStatementParser.INSERT, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public RowSetFunctionContext rowSetFunction() {
			return getRuleContext(RowSetFunctionContext.class,0);
		}
		public InsertDefaultValueContext insertDefaultValue() {
			return getRuleContext(InsertDefaultValueContext.class,0);
		}
		public InsertValuesClauseContext insertValuesClause() {
			return getRuleContext(InsertValuesClauseContext.class,0);
		}
		public InsertSelectClauseContext insertSelectClause() {
			return getRuleContext(InsertSelectClauseContext.class,0);
		}
		public InsertExecClauseContext insertExecClause() {
			return getRuleContext(InsertExecClauseContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public TopContext top() {
			return getRuleContext(TopContext.class,0);
		}
		public TerminalNode INTO() { return getToken(SQLServerStatementParser.INTO, 0); }
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public WithTableHintContext withTableHint() {
			return getRuleContext(WithTableHintContext.class,0);
		}
		public TerminalNode AS() { return getToken(SQLServerStatementParser.AS, 0); }
		public InsertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterInsert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitInsert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitInsert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertContext insert() throws RecognitionException {
		InsertContext _localctx = new InsertContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5407);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5406);
				withClause();
				}
			}

			setState(5409);
			match(INSERT);
			setState(5411);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,577,_ctx) ) {
			case 1:
				{
				setState(5410);
				top();
				}
				break;
			}
			setState(5414);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(5413);
				match(INTO);
				}
			}

			setState(5418);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,579,_ctx) ) {
			case 1:
				{
				setState(5416);
				tableName();
				}
				break;
			case 2:
				{
				setState(5417);
				rowSetFunction();
				}
				break;
			}
			setState(5424);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,581,_ctx) ) {
			case 1:
				{
				setState(5421);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(5420);
					match(AS);
					}
				}

				setState(5423);
				alias();
				}
				break;
			}
			setState(5427);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,582,_ctx) ) {
			case 1:
				{
				setState(5426);
				withTableHint();
				}
				break;
			}
			setState(5433);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,583,_ctx) ) {
			case 1:
				{
				setState(5429);
				insertDefaultValue();
				}
				break;
			case 2:
				{
				setState(5430);
				insertValuesClause();
				}
				break;
			case 3:
				{
				setState(5431);
				insertSelectClause();
				}
				break;
			case 4:
				{
				setState(5432);
				insertExecClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertDefaultValueContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(SQLServerStatementParser.DEFAULT, 0); }
		public TerminalNode VALUES() { return getToken(SQLServerStatementParser.VALUES, 0); }
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public OutputClauseContext outputClause() {
			return getRuleContext(OutputClauseContext.class,0);
		}
		public InsertDefaultValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertDefaultValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterInsertDefaultValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitInsertDefaultValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitInsertDefaultValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertDefaultValueContext insertDefaultValue() throws RecognitionException {
		InsertDefaultValueContext _localctx = new InsertDefaultValueContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_insertDefaultValue);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5436);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(5435);
				columnNames();
				}
			}

			setState(5439);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTPUT) {
				{
				setState(5438);
				outputClause();
				}
			}

			setState(5441);
			match(DEFAULT);
			setState(5442);
			match(VALUES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertValuesClauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(SQLServerStatementParser.VALUES, 0); }
		public List<AssignmentValuesContext> assignmentValues() {
			return getRuleContexts(AssignmentValuesContext.class);
		}
		public AssignmentValuesContext assignmentValues(int i) {
			return getRuleContext(AssignmentValuesContext.class,i);
		}
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public OutputClauseContext outputClause() {
			return getRuleContext(OutputClauseContext.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public InsertValuesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertValuesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterInsertValuesClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitInsertValuesClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitInsertValuesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertValuesClauseContext insertValuesClause() throws RecognitionException {
		InsertValuesClauseContext _localctx = new InsertValuesClauseContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_insertValuesClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5445);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(5444);
				columnNames();
				}
			}

			setState(5448);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTPUT) {
				{
				setState(5447);
				outputClause();
				}
			}

			setState(5450);
			match(VALUES);
			setState(5451);
			assignmentValues();
			setState(5456);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5452);
				match(COMMA_);
				setState(5453);
				assignmentValues();
				}
				}
				setState(5458);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertSelectClauseContext extends ParserRuleContext {
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public OutputClauseContext outputClause() {
			return getRuleContext(OutputClauseContext.class,0);
		}
		public InsertSelectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertSelectClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterInsertSelectClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitInsertSelectClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitInsertSelectClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertSelectClauseContext insertSelectClause() throws RecognitionException {
		InsertSelectClauseContext _localctx = new InsertSelectClauseContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_insertSelectClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5460);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(5459);
				columnNames();
				}
			}

			setState(5463);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTPUT) {
				{
				setState(5462);
				outputClause();
				}
			}

			setState(5465);
			select();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertExecClauseContext extends ParserRuleContext {
		public ExecContext exec() {
			return getRuleContext(ExecContext.class,0);
		}
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public InsertExecClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertExecClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterInsertExecClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitInsertExecClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitInsertExecClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertExecClauseContext insertExecClause() throws RecognitionException {
		InsertExecClauseContext _localctx = new InsertExecClauseContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_insertExecClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5468);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(5467);
				columnNames();
				}
			}

			setState(5470);
			exec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MergeContext extends ParserRuleContext {
		public TerminalNode MERGE() { return getToken(SQLServerStatementParser.MERGE, 0); }
		public MergeIntoClauseContext mergeIntoClause() {
			return getRuleContext(MergeIntoClauseContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public TopContext top() {
			return getRuleContext(TopContext.class,0);
		}
		public WithMergeHintContext withMergeHint() {
			return getRuleContext(WithMergeHintContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public MergeUsingClauseContext mergeUsingClause() {
			return getRuleContext(MergeUsingClauseContext.class,0);
		}
		public List<MergeWhenClauseContext> mergeWhenClause() {
			return getRuleContexts(MergeWhenClauseContext.class);
		}
		public MergeWhenClauseContext mergeWhenClause(int i) {
			return getRuleContext(MergeWhenClauseContext.class,i);
		}
		public OutputClauseContext outputClause() {
			return getRuleContext(OutputClauseContext.class,0);
		}
		public OptionHintContext optionHint() {
			return getRuleContext(OptionHintContext.class,0);
		}
		public TerminalNode AS() { return getToken(SQLServerStatementParser.AS, 0); }
		public MergeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterMerge(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitMerge(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitMerge(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MergeContext merge() throws RecognitionException {
		MergeContext _localctx = new MergeContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_merge);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5473);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5472);
				withClause();
				}
			}

			setState(5475);
			match(MERGE);
			setState(5477);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,593,_ctx) ) {
			case 1:
				{
				setState(5476);
				top();
				}
				break;
			}
			setState(5479);
			mergeIntoClause();
			setState(5481);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_ || _la==WITH) {
				{
				setState(5480);
				withMergeHint();
				}
			}

			setState(5487);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,596,_ctx) ) {
			case 1:
				{
				setState(5484);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(5483);
					match(AS);
					}
				}

				setState(5486);
				alias();
				}
				break;
			}
			setState(5490);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(5489);
				mergeUsingClause();
				}
			}

			setState(5495);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==WHEN) {
				{
				{
				setState(5492);
				mergeWhenClause();
				}
				}
				setState(5497);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5499);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTPUT) {
				{
				setState(5498);
				outputClause();
				}
			}

			setState(5502);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(5501);
				optionHint();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MergeIntoClauseContext extends ParserRuleContext {
		public TableReferencesContext tableReferences() {
			return getRuleContext(TableReferencesContext.class,0);
		}
		public TerminalNode INTO() { return getToken(SQLServerStatementParser.INTO, 0); }
		public MergeIntoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mergeIntoClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterMergeIntoClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitMergeIntoClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitMergeIntoClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MergeIntoClauseContext mergeIntoClause() throws RecognitionException {
		MergeIntoClauseContext _localctx = new MergeIntoClauseContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_mergeIntoClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5505);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(5504);
				match(INTO);
				}
			}

			setState(5507);
			tableReferences();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MergeUsingClauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(SQLServerStatementParser.USING, 0); }
		public TableReferencesContext tableReferences() {
			return getRuleContext(TableReferencesContext.class,0);
		}
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public TerminalNode AS() { return getToken(SQLServerStatementParser.AS, 0); }
		public MergeUsingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mergeUsingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterMergeUsingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitMergeUsingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitMergeUsingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MergeUsingClauseContext mergeUsingClause() throws RecognitionException {
		MergeUsingClauseContext _localctx = new MergeUsingClauseContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_mergeUsingClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5509);
			match(USING);
			setState(5510);
			tableReferences();
			setState(5515);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 53)) & ~0x3f) == 0 && ((1L << (_la - 53)) & 44533979480387L) != 0) || ((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & 331536634476137569L) != 0) || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & 288230376740488193L) != 0) || ((((_la - 248)) & ~0x3f) == 0 && ((1L << (_la - 248)) & -2308112406049976835L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -33030145L) != 0) || ((((_la - 376)) & ~0x3f) == 0 && ((1L << (_la - 376)) & -1L) != 0) || ((((_la - 440)) & ~0x3f) == 0 && ((1L << (_la - 440)) & 15032922111L) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & 72020040051130367L) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & -1L) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & 2405748621443071L) != 0) || ((((_la - 712)) & ~0x3f) == 0 && ((1L << (_la - 712)) & 1088454657L) != 0)) {
				{
				setState(5512);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(5511);
					match(AS);
					}
				}

				setState(5514);
				alias();
				}
			}

			setState(5517);
			match(ON);
			setState(5518);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WithMergeHintContext extends ParserRuleContext {
		public WithTableHintContext withTableHint() {
			return getRuleContext(WithTableHintContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(SQLServerStatementParser.INDEX, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<IndexNameContext> indexName() {
			return getRuleContexts(IndexNameContext.class);
		}
		public IndexNameContext indexName(int i) {
			return getRuleContext(IndexNameContext.class,i);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public WithMergeHintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withMergeHint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterWithMergeHint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitWithMergeHint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitWithMergeHint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithMergeHintContext withMergeHint() throws RecognitionException {
		WithMergeHintContext _localctx = new WithMergeHintContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_withMergeHint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5520);
			withTableHint();
			setState(5539);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,606,_ctx) ) {
			case 1:
				{
				setState(5522);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_) {
					{
					setState(5521);
					match(COMMA_);
					}
				}

				setState(5524);
				match(INDEX);
				setState(5525);
				match(LP_);
				setState(5526);
				indexName();
				setState(5531);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(5527);
					match(COMMA_);
					setState(5528);
					indexName();
					}
					}
					setState(5533);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5534);
				match(RP_);
				}
				break;
			case 2:
				{
				setState(5536);
				match(INDEX);
				setState(5537);
				match(EQ_);
				setState(5538);
				indexName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MergeWhenClauseContext extends ParserRuleContext {
		public MergeUpdateClauseContext mergeUpdateClause() {
			return getRuleContext(MergeUpdateClauseContext.class,0);
		}
		public MergeDeleteClauseContext mergeDeleteClause() {
			return getRuleContext(MergeDeleteClauseContext.class,0);
		}
		public MergeInsertClauseContext mergeInsertClause() {
			return getRuleContext(MergeInsertClauseContext.class,0);
		}
		public MergeWhenClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mergeWhenClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterMergeWhenClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitMergeWhenClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitMergeWhenClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MergeWhenClauseContext mergeWhenClause() throws RecognitionException {
		MergeWhenClauseContext _localctx = new MergeWhenClauseContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_mergeWhenClause);
		try {
			setState(5544);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,607,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5541);
				mergeUpdateClause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5542);
				mergeDeleteClause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5543);
				mergeInsertClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MergeUpdateClauseContext extends ParserRuleContext {
		public TerminalNode THEN() { return getToken(SQLServerStatementParser.THEN, 0); }
		public TerminalNode UPDATE() { return getToken(SQLServerStatementParser.UPDATE, 0); }
		public SetAssignmentsClauseContext setAssignmentsClause() {
			return getRuleContext(SetAssignmentsClauseContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(SQLServerStatementParser.WHEN, 0); }
		public TerminalNode MATCHED() { return getToken(SQLServerStatementParser.MATCHED, 0); }
		public TerminalNode NOT() { return getToken(SQLServerStatementParser.NOT, 0); }
		public TerminalNode BY() { return getToken(SQLServerStatementParser.BY, 0); }
		public TerminalNode SOURCE() { return getToken(SQLServerStatementParser.SOURCE, 0); }
		public TerminalNode AND() { return getToken(SQLServerStatementParser.AND, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public MergeUpdateClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mergeUpdateClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterMergeUpdateClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitMergeUpdateClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitMergeUpdateClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MergeUpdateClauseContext mergeUpdateClause() throws RecognitionException {
		MergeUpdateClauseContext _localctx = new MergeUpdateClauseContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_mergeUpdateClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5553);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,608,_ctx) ) {
			case 1:
				{
				setState(5546);
				match(WHEN);
				setState(5547);
				match(MATCHED);
				}
				break;
			case 2:
				{
				setState(5548);
				match(WHEN);
				setState(5549);
				match(NOT);
				setState(5550);
				match(MATCHED);
				setState(5551);
				match(BY);
				setState(5552);
				match(SOURCE);
				}
				break;
			}
			setState(5557);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(5555);
				match(AND);
				setState(5556);
				expr(0);
				}
			}

			setState(5559);
			match(THEN);
			setState(5560);
			match(UPDATE);
			setState(5561);
			setAssignmentsClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MergeDeleteClauseContext extends ParserRuleContext {
		public TerminalNode THEN() { return getToken(SQLServerStatementParser.THEN, 0); }
		public TerminalNode DELETE() { return getToken(SQLServerStatementParser.DELETE, 0); }
		public TerminalNode WHEN() { return getToken(SQLServerStatementParser.WHEN, 0); }
		public TerminalNode MATCHED() { return getToken(SQLServerStatementParser.MATCHED, 0); }
		public TerminalNode NOT() { return getToken(SQLServerStatementParser.NOT, 0); }
		public TerminalNode BY() { return getToken(SQLServerStatementParser.BY, 0); }
		public TerminalNode SOURCE() { return getToken(SQLServerStatementParser.SOURCE, 0); }
		public TerminalNode AND() { return getToken(SQLServerStatementParser.AND, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public MergeDeleteClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mergeDeleteClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterMergeDeleteClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitMergeDeleteClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitMergeDeleteClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MergeDeleteClauseContext mergeDeleteClause() throws RecognitionException {
		MergeDeleteClauseContext _localctx = new MergeDeleteClauseContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_mergeDeleteClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5570);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,610,_ctx) ) {
			case 1:
				{
				setState(5563);
				match(WHEN);
				setState(5564);
				match(MATCHED);
				}
				break;
			case 2:
				{
				setState(5565);
				match(WHEN);
				setState(5566);
				match(NOT);
				setState(5567);
				match(MATCHED);
				setState(5568);
				match(BY);
				setState(5569);
				match(SOURCE);
				}
				break;
			}
			setState(5574);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(5572);
				match(AND);
				setState(5573);
				expr(0);
				}
			}

			setState(5576);
			match(THEN);
			setState(5577);
			match(DELETE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MergeInsertClauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(SQLServerStatementParser.WHEN, 0); }
		public TerminalNode NOT() { return getToken(SQLServerStatementParser.NOT, 0); }
		public TerminalNode MATCHED() { return getToken(SQLServerStatementParser.MATCHED, 0); }
		public TerminalNode THEN() { return getToken(SQLServerStatementParser.THEN, 0); }
		public TerminalNode INSERT() { return getToken(SQLServerStatementParser.INSERT, 0); }
		public InsertDefaultValueContext insertDefaultValue() {
			return getRuleContext(InsertDefaultValueContext.class,0);
		}
		public InsertValuesClauseContext insertValuesClause() {
			return getRuleContext(InsertValuesClauseContext.class,0);
		}
		public TerminalNode BY() { return getToken(SQLServerStatementParser.BY, 0); }
		public TerminalNode TARGET() { return getToken(SQLServerStatementParser.TARGET, 0); }
		public TerminalNode AND() { return getToken(SQLServerStatementParser.AND, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public MergeInsertClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mergeInsertClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterMergeInsertClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitMergeInsertClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitMergeInsertClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MergeInsertClauseContext mergeInsertClause() throws RecognitionException {
		MergeInsertClauseContext _localctx = new MergeInsertClauseContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_mergeInsertClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5579);
			match(WHEN);
			setState(5580);
			match(NOT);
			setState(5581);
			match(MATCHED);
			setState(5584);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BY) {
				{
				setState(5582);
				match(BY);
				setState(5583);
				match(TARGET);
				}
			}

			setState(5588);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(5586);
				match(AND);
				setState(5587);
				expr(0);
				}
			}

			setState(5590);
			match(THEN);
			setState(5591);
			match(INSERT);
			setState(5594);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,614,_ctx) ) {
			case 1:
				{
				setState(5592);
				insertDefaultValue();
				}
				break;
			case 2:
				{
				setState(5593);
				insertValuesClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WithTableHintContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public List<TableHintLimitedContext> tableHintLimited() {
			return getRuleContexts(TableHintLimitedContext.class);
		}
		public TableHintLimitedContext tableHintLimited(int i) {
			return getRuleContext(TableHintLimitedContext.class,i);
		}
		public WithTableHintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withTableHint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterWithTableHint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitWithTableHint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitWithTableHint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithTableHintContext withTableHint() throws RecognitionException {
		WithTableHintContext _localctx = new WithTableHintContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_withTableHint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5597);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5596);
				match(WITH);
				}
			}

			setState(5599);
			match(LP_);
			{
			setState(5601); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5600);
				tableHintLimited();
				}
				}
				setState(5603); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & 131071L) != 0) || _la==SNAPSHOT || _la==SERIALIZABLE );
			}
			setState(5605);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExecContext extends ParserRuleContext {
		public ProcedureNameContext procedureName() {
			return getRuleContext(ProcedureNameContext.class,0);
		}
		public TerminalNode EXEC() { return getToken(SQLServerStatementParser.EXEC, 0); }
		public TerminalNode EXECUTE() { return getToken(SQLServerStatementParser.EXECUTE, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public ExecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterExec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitExec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitExec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecContext exec() throws RecognitionException {
		ExecContext _localctx = new ExecContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_exec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5607);
			_la = _input.LA(1);
			if ( !(_la==EXECUTE || _la==EXEC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5608);
			procedureName();
			setState(5617);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,618,_ctx) ) {
			case 1:
				{
				setState(5609);
				expr(0);
				setState(5614);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(5610);
					match(COMMA_);
					setState(5611);
					expr(0);
					}
					}
					setState(5616);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UpdateContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(SQLServerStatementParser.UPDATE, 0); }
		public TableReferencesContext tableReferences() {
			return getRuleContext(TableReferencesContext.class,0);
		}
		public SetAssignmentsClauseContext setAssignmentsClause() {
			return getRuleContext(SetAssignmentsClauseContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public TopContext top() {
			return getRuleContext(TopContext.class,0);
		}
		public WithTableHintContext withTableHint() {
			return getRuleContext(WithTableHintContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public OutputClauseContext outputClause() {
			return getRuleContext(OutputClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public OptionHintContext optionHint() {
			return getRuleContext(OptionHintContext.class,0);
		}
		public UpdateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterUpdate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitUpdate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitUpdate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateContext update() throws RecognitionException {
		UpdateContext _localctx = new UpdateContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_update);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5620);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5619);
				withClause();
				}
			}

			setState(5622);
			match(UPDATE);
			setState(5624);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,620,_ctx) ) {
			case 1:
				{
				setState(5623);
				top();
				}
				break;
			}
			setState(5626);
			tableReferences();
			setState(5628);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_ || _la==WITH) {
				{
				setState(5627);
				withTableHint();
				}
			}

			setState(5630);
			setAssignmentsClause();
			setState(5632);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(5631);
				fromClause();
				}
			}

			setState(5635);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTPUT) {
				{
				setState(5634);
				outputClause();
				}
			}

			setState(5638);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(5637);
				whereClause();
				}
			}

			setState(5641);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(5640);
				optionHint();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AssignmentContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public AssignmentValueContext assignmentValue() {
			return getRuleContext(AssignmentValueContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode DOT_() { return getToken(SQLServerStatementParser.DOT_, 0); }
		public TerminalNode PLUS_() { return getToken(SQLServerStatementParser.PLUS_, 0); }
		public TerminalNode MINUS_() { return getToken(SQLServerStatementParser.MINUS_, 0); }
		public TerminalNode ASTERISK_() { return getToken(SQLServerStatementParser.ASTERISK_, 0); }
		public TerminalNode SLASH_() { return getToken(SQLServerStatementParser.SLASH_, 0); }
		public TerminalNode MOD_() { return getToken(SQLServerStatementParser.MOD_, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAssignment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAssignment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAssignment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignmentContext assignment() throws RecognitionException {
		AssignmentContext _localctx = new AssignmentContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_assignment);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5643);
			columnName();
			setState(5649);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MOD_:
			case PLUS_:
			case MINUS_:
			case ASTERISK_:
			case SLASH_:
			case EQ_:
				{
				setState(5645);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 499712L) != 0)) {
					{
					setState(5644);
					_la = _input.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 499712L) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5647);
				match(EQ_);
				}
				break;
			case DOT_:
				{
				setState(5648);
				match(DOT_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5651);
			assignmentValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetAssignmentsClauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SQLServerStatementParser.SET, 0); }
		public List<AssignmentContext> assignment() {
			return getRuleContexts(AssignmentContext.class);
		}
		public AssignmentContext assignment(int i) {
			return getRuleContext(AssignmentContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public SetAssignmentsClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setAssignmentsClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSetAssignmentsClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSetAssignmentsClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSetAssignmentsClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetAssignmentsClauseContext setAssignmentsClause() throws RecognitionException {
		SetAssignmentsClauseContext _localctx = new SetAssignmentsClauseContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_setAssignmentsClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5653);
			match(SET);
			setState(5654);
			assignment();
			setState(5659);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5655);
				match(COMMA_);
				setState(5656);
				assignment();
				}
				}
				setState(5661);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AssignmentValuesContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<AssignmentValueContext> assignmentValue() {
			return getRuleContexts(AssignmentValueContext.class);
		}
		public AssignmentValueContext assignmentValue(int i) {
			return getRuleContext(AssignmentValueContext.class,i);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public AssignmentValuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignmentValues; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAssignmentValues(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAssignmentValues(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAssignmentValues(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignmentValuesContext assignmentValues() throws RecognitionException {
		AssignmentValuesContext _localctx = new AssignmentValuesContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_assignmentValues);
		int _la;
		try {
			setState(5676);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,630,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5662);
				match(LP_);
				setState(5663);
				assignmentValue();
				setState(5668);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(5664);
					match(COMMA_);
					setState(5665);
					assignmentValue();
					}
					}
					setState(5670);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5671);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5673);
				assignmentValue();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5674);
				match(LP_);
				setState(5675);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AssignmentValueContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(SQLServerStatementParser.DEFAULT, 0); }
		public AssignmentValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignmentValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAssignmentValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAssignmentValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAssignmentValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignmentValueContext assignmentValue() throws RecognitionException {
		AssignmentValueContext _localctx = new AssignmentValueContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_assignmentValue);
		try {
			setState(5680);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT_:
			case TILDE_:
			case PLUS_:
			case MINUS_:
			case LP_:
			case LBE_:
			case LBT_:
			case QUESTION_:
			case DOLLAR_:
			case TRUNCATE:
			case SCHEMA:
			case TABLE:
			case COLUMNS:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case CASE:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case RIGHT:
			case OFF:
			case IF:
			case NOT:
			case NULL:
			case TRUE:
			case FALSE:
			case EXISTS:
			case GROUP:
			case LIMIT:
			case OFFSET:
			case SAVEPOINT:
			case BOOLEAN:
			case CHAR:
			case ARRAY:
			case INTERVAL:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MICROSECOND:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case AVG:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case INSTANCE:
			case DO:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case NEXT:
			case NAME:
			case INTEGER:
			case TYPE:
			case TEXT:
			case VIEWS:
			case READ_ONLY:
			case DATABASE:
			case RETURNS:
			case DATEPART:
			case PASSWORD:
			case JSON_OBJECT:
			case JSON_ARRAY:
			case FIRST_VALUE:
			case LAST_VALUE:
			case APPROX_PERCENTILE_CONT:
			case APPROX_PERCENTILE_DISC:
			case OPENDATASOURCE:
			case TARGET:
			case BINARY:
			case HIDDEN_:
			case MOD:
			case PARTITION:
			case PARTITIONS:
			case TOP:
			case ROW:
			case ROWS:
			case XOR:
			case ALWAYS:
			case USER:
			case ROLE:
			case START:
			case ACTION:
			case ALGORITHM:
			case AUTO:
			case BLOCKERS:
			case CLUSTERED:
			case NONCLUSTERED:
			case COLUMNSTORE:
			case CONTENT:
			case CONVERT:
			case YEARS:
			case MONTHS:
			case WEEKS:
			case DAYS:
			case MINUTES:
			case DENY:
			case DETERMINISTIC:
			case DISTRIBUTION:
			case DOCUMENT:
			case DURABILITY:
			case ENCRYPTED:
			case FILESTREAM:
			case FILETABLE:
			case FILLFACTOR:
			case FOLLOWING:
			case HASH:
			case HEAP:
			case INBOUND:
			case OUTBOUND:
			case UNBOUNDED:
			case INFINITE:
			case LOGIN:
			case MASKED:
			case MAXDOP:
			case MOVE:
			case NOCHECK:
			case OBJECT:
			case ONLINE:
			case OVER:
			case PAGE:
			case PAUSED:
			case PERIOD:
			case PERSISTED:
			case PRECEDING:
			case RANDOMIZED:
			case RANGE:
			case REBUILD:
			case REPLICATE:
			case REPLICATION:
			case RESUMABLE:
			case ROWGUIDCOL:
			case SAVE:
			case SELF:
			case SPARSE:
			case SWITCH:
			case TRAN:
			case TRANCOUNT:
			case CONTROL:
			case CONCAT:
			case TAKE:
			case OWNERSHIP:
			case DEFINITION:
			case APPLICATION:
			case ASSEMBLY:
			case SYMMETRIC:
			case ASYMMETRIC:
			case SERVER:
			case RECEIVE:
			case CHANGE:
			case TRACE:
			case TRACKING:
			case RESOURCES:
			case SETTINGS:
			case STATE:
			case AVAILABILITY:
			case CREDENTIAL:
			case ENDPOINT:
			case EVENT:
			case NOTIFICATION:
			case LINKED:
			case AUDIT:
			case DDL:
			case XML:
			case IMPERSONATE:
			case SECURABLES:
			case AUTHENTICATE:
			case EXTERNAL:
			case ACCESS:
			case ADMINISTER:
			case BULK:
			case OPERATIONS:
			case UNSAFE:
			case SHUTDOWN:
			case SCOPED:
			case CONFIGURATION:
			case DATASPACE:
			case SERVICE:
			case CERTIFICATE:
			case CONTRACT:
			case ENCRYPTION:
			case MASTER:
			case DATA:
			case SOURCE:
			case FILE:
			case FORMAT:
			case LIBRARY:
			case FULLTEXT:
			case MASK:
			case UNMASK:
			case MESSAGE:
			case REMOTE:
			case BINDING:
			case ROUTE:
			case SECURITY:
			case POLICY:
			case AGGREGATE:
			case QUEUE:
			case RULE:
			case SYNONYM:
			case COLLECTION:
			case SCRIPT:
			case KILL:
			case BACKUP:
			case LOG:
			case SHOWPLAN:
			case SUBSCRIBE:
			case QUERY:
			case NOTIFICATIONS:
			case CHECKPOINT:
			case SEQUENCE:
			case ABORT_AFTER_WAIT:
			case ALLOW_PAGE_LOCKS:
			case ALLOW_ROW_LOCKS:
			case ALL_SPARSE_COLUMNS:
			case BUCKET_COUNT:
			case COLUMNSTORE_ARCHIVE:
			case COLUMN_ENCRYPTION_KEY:
			case COLUMN_SET:
			case COMPRESSION_DELAY:
			case DATABASE_DEAULT:
			case DATA_COMPRESSION:
			case DATA_CONSISTENCY_CHECK:
			case ENCRYPTION_TYPE:
			case SYSTEM_TIME:
			case SYSTEM_VERSIONING:
			case TEXTIMAGE_ON:
			case WAIT_AT_LOW_PRIORITY:
			case STATISTICS_INCREMENTAL:
			case STATISTICS_NORECOMPUTE:
			case ROUND_ROBIN:
			case SCHEMA_AND_DATA:
			case SCHEMA_ONLY:
			case SORT_IN_TEMPDB:
			case IGNORE_DUP_KEY:
			case IMPLICIT_TRANSACTIONS:
			case MAX_DURATION:
			case MEMORY_OPTIMIZED:
			case MIGRATION_STATE:
			case PAD_INDEX:
			case REMOTE_DATA_ARCHIVE:
			case FILESTREAM_ON:
			case FILETABLE_COLLATE_FILENAME:
			case FILETABLE_DIRECTORY:
			case FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME:
			case FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME:
			case FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME:
			case FILTER_PREDICATE:
			case HISTORY_RETENTION_PERIOD:
			case HISTORY_TABLE:
			case LOCK_ESCALATION:
			case DROP_EXISTING:
			case ROW_NUMBER:
			case FIRST:
			case DATETIME2:
			case OUTPUT:
			case INSERTED:
			case DELETED:
			case FILENAME:
			case SIZE:
			case MAXSIZE:
			case FILEGROWTH:
			case UNLIMITED:
			case KB:
			case MB:
			case GB:
			case TB:
			case CONTAINS:
			case MEMORY_OPTIMIZED_DATA:
			case FILEGROUP:
			case NON_TRANSACTED_ACCESS:
			case DB_CHAINING:
			case TRUSTWORTHY:
			case FORWARD_ONLY:
			case KEYSET:
			case FAST_FORWARD:
			case SCROLL_LOCKS:
			case OPTIMISTIC:
			case TYPE_WARNING:
			case SCHEMABINDING:
			case CALLER:
			case INPUT:
			case OWNER:
			case SNAPSHOT:
			case REPEATABLE:
			case SERIALIZABLE:
			case NATIVE_COMPILATION:
			case VIEW_METADATA:
			case INSTEAD:
			case APPEND:
			case INCREMENT:
			case CACHE:
			case MINVALUE:
			case MAXVALUE:
			case RESTART:
			case LOB_COMPACTION:
			case COMPRESS_ALL_ROW_GROUPS:
			case REORGANIZE:
			case RESUME:
			case PAUSE:
			case ABORT:
			case ACCELERATED_DATABASE_RECOVERY:
			case PERSISTENT_VERSION_STORE_FILEGROUP:
			case IMMEDIATE:
			case NO_WAIT:
			case TARGET_RECOVERY_TIME:
			case SECONDS:
			case HONOR_BROKER_PRIORITY:
			case ERROR_BROKER_CONVERSATIONS:
			case NEW_BROKER:
			case DISABLE_BROKER:
			case ENABLE_BROKER:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case READ_COMMITTED_SNAPSHOT:
			case ALLOW_SNAPSHOT_ISOLATION:
			case RECURSIVE_TRIGGERS:
			case QUOTED_IDENTIFIER:
			case NUMERIC_ROUNDABORT:
			case CONCAT_NULL_YIELDS_NULL:
			case COMPATIBILITY_LEVEL:
			case ARITHABORT:
			case ANSI_WARNINGS:
			case ANSI_PADDING:
			case ANSI_NULLS:
			case ANSI_NULL_DEFAULT:
			case PAGE_VERIFY:
			case CHECKSUM:
			case TORN_PAGE_DETECTION:
			case BULK_LOGGED:
			case RECOVERY:
			case TOTAL_EXECUTION_CPU_TIME_MS:
			case TOTAL_COMPILE_CPU_TIME_MS:
			case STALE_CAPTURE_POLICY_THRESHOLD:
			case EXECUTION_COUNT:
			case QUERY_CAPTURE_POLICY:
			case WAIT_STATS_CAPTURE_MODE:
			case MAX_PLANS_PER_QUERY:
			case QUERY_CAPTURE_MODE:
			case SIZE_BASED_CLEANUP_MODE:
			case INTERVAL_LENGTH_MINUTES:
			case MAX_STORAGE_SIZE_MB:
			case DATA_FLUSH_INTERVAL_SECONDS:
			case CLEANUP_POLICY:
			case CUSTOM:
			case STALE_QUERY_THRESHOLD_DAYS:
			case OPERATION_MODE:
			case QUERY_STORE:
			case CURSOR_DEFAULT:
			case GLOBAL:
			case CURSOR_CLOSE_ON_COMMIT:
			case HOURS:
			case CHANGE_RETENTION:
			case AUTO_CLEANUP:
			case CHANGE_TRACKING:
			case AUTOMATIC_TUNING:
			case FORCE_LAST_GOOD_PLAN:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_CREATE_STATISTICS:
			case INCREMENTAL:
			case AUTO_CLOSE:
			case DATA_RETENTION:
			case TEMPORAL_HISTORY_RETENTION:
			case EDITION:
			case MIXED_PAGE_ALLOCATION:
			case DISABLED:
			case ALLOWED:
			case HADR:
			case MULTI_USER:
			case RESTRICTED_USER:
			case SINGLE_USER:
			case OFFLINE:
			case EMERGENCY:
			case SUSPEND:
			case DATE_CORRELATION_OPTIMIZATION:
			case ELASTIC_POOL:
			case SERVICE_OBJECTIVE:
			case DATABASE_NAME:
			case ALLOW_CONNECTIONS:
			case GEO:
			case NAMED:
			case DATEFIRST:
			case BACKUP_STORAGE_REDUNDANCY:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case SECONDARY:
			case FAILOVER:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case INLINE:
			case NESTED_TRIGGERS:
			case TRANSFORM_NOISE_WORDS:
			case TWO_DIGIT_YEAR_CUTOFF:
			case PERSISTENT_LOG_BUFFER:
			case DIRECTORY_NAME:
			case DATEFORMAT:
			case DELAYED_DURABILITY:
			case AUTHORIZATION:
			case TRANSFER:
			case PROVIDER:
			case SID:
			case SEARCH:
			case MEMBER:
			case JSON:
			case OPENJSON:
			case OPENROWSET:
			case TRY_CAST:
			case TRY_CONVERT:
			case OPENQUERY:
			case MATCH:
			case STRING_AGG:
			case IDENTIFIER_:
			case DELIMITED_IDENTIFIER_:
			case STRING_:
			case NUMBER_:
			case HEX_DIGIT_:
			case BIT_NUM_:
			case NCHAR_TEXT:
				enterOuterAlt(_localctx, 1);
				{
				setState(5678);
				expr(0);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5679);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DeleteContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(SQLServerStatementParser.DELETE, 0); }
		public SingleTableClauseContext singleTableClause() {
			return getRuleContext(SingleTableClauseContext.class,0);
		}
		public MultipleTablesClauseContext multipleTablesClause() {
			return getRuleContext(MultipleTablesClauseContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public TopContext top() {
			return getRuleContext(TopContext.class,0);
		}
		public OutputClauseContext outputClause() {
			return getRuleContext(OutputClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public OptionHintContext optionHint() {
			return getRuleContext(OptionHintContext.class,0);
		}
		public DeleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDelete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDelete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDelete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteContext delete() throws RecognitionException {
		DeleteContext _localctx = new DeleteContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_delete);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5683);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5682);
				withClause();
				}
			}

			setState(5685);
			match(DELETE);
			setState(5687);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,633,_ctx) ) {
			case 1:
				{
				setState(5686);
				top();
				}
				break;
			}
			setState(5691);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,634,_ctx) ) {
			case 1:
				{
				setState(5689);
				singleTableClause();
				}
				break;
			case 2:
				{
				setState(5690);
				multipleTablesClause();
				}
				break;
			}
			setState(5694);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTPUT) {
				{
				setState(5693);
				outputClause();
				}
			}

			setState(5697);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(5696);
				whereClause();
				}
			}

			setState(5700);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(5699);
				optionHint();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptionHintContext extends ParserRuleContext {
		public TerminalNode OPTION() { return getToken(SQLServerStatementParser.OPTION, 0); }
		public QueryHintContext queryHint() {
			return getRuleContext(QueryHintContext.class,0);
		}
		public OptionHintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionHint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterOptionHint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitOptionHint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitOptionHint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptionHintContext optionHint() throws RecognitionException {
		OptionHintContext _localctx = new OptionHintContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_optionHint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5702);
			match(OPTION);
			setState(5703);
			queryHint();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SingleTableClauseContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SQLServerStatementParser.FROM, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public TerminalNode AS() { return getToken(SQLServerStatementParser.AS, 0); }
		public SingleTableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleTableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSingleTableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSingleTableClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSingleTableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleTableClauseContext singleTableClause() throws RecognitionException {
		SingleTableClauseContext _localctx = new SingleTableClauseContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_singleTableClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5706);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(5705);
				match(FROM);
				}
			}

			setState(5709);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(5708);
				match(LP_);
				}
			}

			setState(5711);
			tableName();
			setState(5713);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RP_) {
				{
				setState(5712);
				match(RP_);
				}
			}

			setState(5719);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,642,_ctx) ) {
			case 1:
				{
				setState(5716);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(5715);
					match(AS);
					}
				}

				setState(5718);
				alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MultipleTablesClauseContext extends ParserRuleContext {
		public MultipleTableNamesContext multipleTableNames() {
			return getRuleContext(MultipleTableNamesContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SQLServerStatementParser.FROM, 0); }
		public TableReferencesContext tableReferences() {
			return getRuleContext(TableReferencesContext.class,0);
		}
		public TerminalNode USING() { return getToken(SQLServerStatementParser.USING, 0); }
		public MultipleTablesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleTablesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterMultipleTablesClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitMultipleTablesClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitMultipleTablesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleTablesClauseContext multipleTablesClause() throws RecognitionException {
		MultipleTablesClauseContext _localctx = new MultipleTablesClauseContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_multipleTablesClause);
		try {
			setState(5730);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOT_:
			case TRUNCATE:
			case SCHEMA:
			case TABLE:
			case COLUMNS:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case RIGHT:
			case OFF:
			case GROUP:
			case LIMIT:
			case OFFSET:
			case SAVEPOINT:
			case BOOLEAN:
			case ARRAY:
			case DATE:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MICROSECOND:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case AVG:
			case ENABLE:
			case DISABLE:
			case INSTANCE:
			case DO:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case NEXT:
			case NAME:
			case INTEGER:
			case TYPE:
			case TEXT:
			case VIEWS:
			case READ_ONLY:
			case DATABASE:
			case RETURNS:
			case DATEPART:
			case PASSWORD:
			case TARGET:
			case BINARY:
			case HIDDEN_:
			case MOD:
			case PARTITION:
			case PARTITIONS:
			case TOP:
			case ROW:
			case ROWS:
			case XOR:
			case ALWAYS:
			case USER:
			case ROLE:
			case START:
			case ACTION:
			case ALGORITHM:
			case AUTO:
			case BLOCKERS:
			case CLUSTERED:
			case NONCLUSTERED:
			case COLUMNSTORE:
			case CONTENT:
			case YEARS:
			case MONTHS:
			case WEEKS:
			case DAYS:
			case MINUTES:
			case DENY:
			case DETERMINISTIC:
			case DISTRIBUTION:
			case DOCUMENT:
			case DURABILITY:
			case ENCRYPTED:
			case FILESTREAM:
			case FILETABLE:
			case FILLFACTOR:
			case FOLLOWING:
			case HASH:
			case HEAP:
			case INBOUND:
			case OUTBOUND:
			case UNBOUNDED:
			case INFINITE:
			case LOGIN:
			case MASKED:
			case MAXDOP:
			case MOVE:
			case NOCHECK:
			case OBJECT:
			case ONLINE:
			case OVER:
			case PAGE:
			case PAUSED:
			case PERIOD:
			case PERSISTED:
			case PRECEDING:
			case RANDOMIZED:
			case RANGE:
			case REBUILD:
			case REPLICATE:
			case REPLICATION:
			case RESUMABLE:
			case ROWGUIDCOL:
			case SAVE:
			case SELF:
			case SPARSE:
			case SWITCH:
			case TRAN:
			case TRANCOUNT:
			case CONTROL:
			case CONCAT:
			case TAKE:
			case OWNERSHIP:
			case DEFINITION:
			case APPLICATION:
			case ASSEMBLY:
			case SYMMETRIC:
			case ASYMMETRIC:
			case SERVER:
			case RECEIVE:
			case CHANGE:
			case TRACE:
			case TRACKING:
			case RESOURCES:
			case SETTINGS:
			case STATE:
			case AVAILABILITY:
			case CREDENTIAL:
			case ENDPOINT:
			case EVENT:
			case NOTIFICATION:
			case LINKED:
			case AUDIT:
			case DDL:
			case XML:
			case IMPERSONATE:
			case SECURABLES:
			case AUTHENTICATE:
			case EXTERNAL:
			case ACCESS:
			case ADMINISTER:
			case BULK:
			case OPERATIONS:
			case UNSAFE:
			case SHUTDOWN:
			case SCOPED:
			case CONFIGURATION:
			case DATASPACE:
			case SERVICE:
			case CERTIFICATE:
			case CONTRACT:
			case ENCRYPTION:
			case MASTER:
			case DATA:
			case SOURCE:
			case FILE:
			case FORMAT:
			case LIBRARY:
			case FULLTEXT:
			case MASK:
			case UNMASK:
			case MESSAGE:
			case REMOTE:
			case BINDING:
			case ROUTE:
			case SECURITY:
			case POLICY:
			case AGGREGATE:
			case QUEUE:
			case RULE:
			case SYNONYM:
			case COLLECTION:
			case SCRIPT:
			case KILL:
			case BACKUP:
			case LOG:
			case SHOWPLAN:
			case SUBSCRIBE:
			case QUERY:
			case NOTIFICATIONS:
			case CHECKPOINT:
			case SEQUENCE:
			case ABORT_AFTER_WAIT:
			case ALLOW_PAGE_LOCKS:
			case ALLOW_ROW_LOCKS:
			case ALL_SPARSE_COLUMNS:
			case BUCKET_COUNT:
			case COLUMNSTORE_ARCHIVE:
			case COLUMN_ENCRYPTION_KEY:
			case COLUMN_SET:
			case COMPRESSION_DELAY:
			case DATABASE_DEAULT:
			case DATA_COMPRESSION:
			case DATA_CONSISTENCY_CHECK:
			case ENCRYPTION_TYPE:
			case SYSTEM_TIME:
			case SYSTEM_VERSIONING:
			case TEXTIMAGE_ON:
			case WAIT_AT_LOW_PRIORITY:
			case STATISTICS_INCREMENTAL:
			case STATISTICS_NORECOMPUTE:
			case ROUND_ROBIN:
			case SCHEMA_AND_DATA:
			case SCHEMA_ONLY:
			case SORT_IN_TEMPDB:
			case IGNORE_DUP_KEY:
			case IMPLICIT_TRANSACTIONS:
			case MAX_DURATION:
			case MEMORY_OPTIMIZED:
			case MIGRATION_STATE:
			case PAD_INDEX:
			case REMOTE_DATA_ARCHIVE:
			case FILESTREAM_ON:
			case FILETABLE_COLLATE_FILENAME:
			case FILETABLE_DIRECTORY:
			case FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME:
			case FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME:
			case FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME:
			case FILTER_PREDICATE:
			case HISTORY_RETENTION_PERIOD:
			case HISTORY_TABLE:
			case LOCK_ESCALATION:
			case DROP_EXISTING:
			case ROW_NUMBER:
			case FIRST:
			case DATETIME2:
			case OUTPUT:
			case INSERTED:
			case DELETED:
			case FILENAME:
			case SIZE:
			case MAXSIZE:
			case FILEGROWTH:
			case UNLIMITED:
			case KB:
			case MB:
			case GB:
			case TB:
			case CONTAINS:
			case MEMORY_OPTIMIZED_DATA:
			case FILEGROUP:
			case NON_TRANSACTED_ACCESS:
			case DB_CHAINING:
			case TRUSTWORTHY:
			case FORWARD_ONLY:
			case KEYSET:
			case FAST_FORWARD:
			case SCROLL_LOCKS:
			case OPTIMISTIC:
			case TYPE_WARNING:
			case SCHEMABINDING:
			case CALLER:
			case INPUT:
			case OWNER:
			case SNAPSHOT:
			case REPEATABLE:
			case SERIALIZABLE:
			case NATIVE_COMPILATION:
			case VIEW_METADATA:
			case INSTEAD:
			case APPEND:
			case INCREMENT:
			case CACHE:
			case MINVALUE:
			case MAXVALUE:
			case RESTART:
			case LOB_COMPACTION:
			case COMPRESS_ALL_ROW_GROUPS:
			case REORGANIZE:
			case RESUME:
			case PAUSE:
			case ABORT:
			case ACCELERATED_DATABASE_RECOVERY:
			case PERSISTENT_VERSION_STORE_FILEGROUP:
			case IMMEDIATE:
			case NO_WAIT:
			case TARGET_RECOVERY_TIME:
			case SECONDS:
			case HONOR_BROKER_PRIORITY:
			case ERROR_BROKER_CONVERSATIONS:
			case NEW_BROKER:
			case DISABLE_BROKER:
			case ENABLE_BROKER:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case READ_COMMITTED_SNAPSHOT:
			case ALLOW_SNAPSHOT_ISOLATION:
			case RECURSIVE_TRIGGERS:
			case QUOTED_IDENTIFIER:
			case NUMERIC_ROUNDABORT:
			case CONCAT_NULL_YIELDS_NULL:
			case COMPATIBILITY_LEVEL:
			case ARITHABORT:
			case ANSI_WARNINGS:
			case ANSI_PADDING:
			case ANSI_NULLS:
			case ANSI_NULL_DEFAULT:
			case PAGE_VERIFY:
			case CHECKSUM:
			case TORN_PAGE_DETECTION:
			case BULK_LOGGED:
			case RECOVERY:
			case TOTAL_EXECUTION_CPU_TIME_MS:
			case TOTAL_COMPILE_CPU_TIME_MS:
			case STALE_CAPTURE_POLICY_THRESHOLD:
			case EXECUTION_COUNT:
			case QUERY_CAPTURE_POLICY:
			case WAIT_STATS_CAPTURE_MODE:
			case MAX_PLANS_PER_QUERY:
			case QUERY_CAPTURE_MODE:
			case SIZE_BASED_CLEANUP_MODE:
			case INTERVAL_LENGTH_MINUTES:
			case MAX_STORAGE_SIZE_MB:
			case DATA_FLUSH_INTERVAL_SECONDS:
			case CLEANUP_POLICY:
			case CUSTOM:
			case STALE_QUERY_THRESHOLD_DAYS:
			case OPERATION_MODE:
			case QUERY_STORE:
			case CURSOR_DEFAULT:
			case GLOBAL:
			case CURSOR_CLOSE_ON_COMMIT:
			case HOURS:
			case CHANGE_RETENTION:
			case AUTO_CLEANUP:
			case CHANGE_TRACKING:
			case AUTOMATIC_TUNING:
			case FORCE_LAST_GOOD_PLAN:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_CREATE_STATISTICS:
			case INCREMENTAL:
			case AUTO_CLOSE:
			case DATA_RETENTION:
			case TEMPORAL_HISTORY_RETENTION:
			case EDITION:
			case MIXED_PAGE_ALLOCATION:
			case DISABLED:
			case ALLOWED:
			case HADR:
			case MULTI_USER:
			case RESTRICTED_USER:
			case SINGLE_USER:
			case OFFLINE:
			case EMERGENCY:
			case SUSPEND:
			case DATE_CORRELATION_OPTIMIZATION:
			case ELASTIC_POOL:
			case SERVICE_OBJECTIVE:
			case DATABASE_NAME:
			case ALLOW_CONNECTIONS:
			case GEO:
			case NAMED:
			case DATEFIRST:
			case BACKUP_STORAGE_REDUNDANCY:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case SECONDARY:
			case FAILOVER:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case INLINE:
			case NESTED_TRIGGERS:
			case TRANSFORM_NOISE_WORDS:
			case TWO_DIGIT_YEAR_CUTOFF:
			case PERSISTENT_LOG_BUFFER:
			case DIRECTORY_NAME:
			case DATEFORMAT:
			case DELAYED_DURABILITY:
			case AUTHORIZATION:
			case TRANSFER:
			case PROVIDER:
			case SID:
			case SEARCH:
			case MEMBER:
			case JSON:
			case OPENQUERY:
			case IDENTIFIER_:
			case DELIMITED_IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(5721);
				multipleTableNames();
				setState(5722);
				match(FROM);
				setState(5723);
				tableReferences();
				}
				break;
			case FROM:
				enterOuterAlt(_localctx, 2);
				{
				setState(5725);
				match(FROM);
				setState(5726);
				multipleTableNames();
				setState(5727);
				match(USING);
				setState(5728);
				tableReferences();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MultipleTableNamesContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public List<TerminalNode> DOT_ASTERISK_() { return getTokens(SQLServerStatementParser.DOT_ASTERISK_); }
		public TerminalNode DOT_ASTERISK_(int i) {
			return getToken(SQLServerStatementParser.DOT_ASTERISK_, i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public MultipleTableNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleTableNames; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterMultipleTableNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitMultipleTableNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitMultipleTableNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleTableNamesContext multipleTableNames() throws RecognitionException {
		MultipleTableNamesContext _localctx = new MultipleTableNamesContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_multipleTableNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5732);
			tableName();
			setState(5734);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOT_ASTERISK_) {
				{
				setState(5733);
				match(DOT_ASTERISK_);
				}
			}

			setState(5743);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5736);
				match(COMMA_);
				setState(5737);
				tableName();
				setState(5739);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT_ASTERISK_) {
					{
					setState(5738);
					match(DOT_ASTERISK_);
					}
				}

				}
				}
				setState(5745);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectContext extends ParserRuleContext {
		public AggregationClauseContext aggregationClause() {
			return getRuleContext(AggregationClauseContext.class,0);
		}
		public SelectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectContext select() throws RecognitionException {
		SelectContext _localctx = new SelectContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_select);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5746);
			aggregationClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AggregationClauseContext extends ParserRuleContext {
		public List<SelectClauseContext> selectClause() {
			return getRuleContexts(SelectClauseContext.class);
		}
		public SelectClauseContext selectClause(int i) {
			return getRuleContext(SelectClauseContext.class,i);
		}
		public List<TerminalNode> UNION() { return getTokens(SQLServerStatementParser.UNION); }
		public TerminalNode UNION(int i) {
			return getToken(SQLServerStatementParser.UNION, i);
		}
		public List<TerminalNode> EXCEPT() { return getTokens(SQLServerStatementParser.EXCEPT); }
		public TerminalNode EXCEPT(int i) {
			return getToken(SQLServerStatementParser.EXCEPT, i);
		}
		public List<TerminalNode> INTERSECT() { return getTokens(SQLServerStatementParser.INTERSECT); }
		public TerminalNode INTERSECT(int i) {
			return getToken(SQLServerStatementParser.INTERSECT, i);
		}
		public List<TerminalNode> ALL() { return getTokens(SQLServerStatementParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(SQLServerStatementParser.ALL, i);
		}
		public AggregationClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregationClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAggregationClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAggregationClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAggregationClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregationClauseContext aggregationClause() throws RecognitionException {
		AggregationClauseContext _localctx = new AggregationClauseContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_aggregationClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5748);
			selectClause();
			setState(5760);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==UNION || _la==EXCEPT || _la==INTERSECT) {
				{
				{
				setState(5755);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UNION:
					{
					setState(5749);
					match(UNION);
					setState(5751);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL) {
						{
						setState(5750);
						match(ALL);
						}
					}

					}
					break;
				case EXCEPT:
					{
					setState(5753);
					match(EXCEPT);
					}
					break;
				case INTERSECT:
					{
					setState(5754);
					match(INTERSECT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5757);
				selectClause();
				}
				}
				setState(5762);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectClauseContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(SQLServerStatementParser.SELECT, 0); }
		public ProjectionsContext projections() {
			return getRuleContext(ProjectionsContext.class,0);
		}
		public SelectWithClauseContext selectWithClause() {
			return getRuleContext(SelectWithClauseContext.class,0);
		}
		public DuplicateSpecificationContext duplicateSpecification() {
			return getRuleContext(DuplicateSpecificationContext.class,0);
		}
		public IntoClauseContext intoClause() {
			return getRuleContext(IntoClauseContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public ForClauseContext forClause() {
			return getRuleContext(ForClauseContext.class,0);
		}
		public WithTempTableContext withTempTable() {
			return getRuleContext(WithTempTableContext.class,0);
		}
		public WithTableHintContext withTableHint() {
			return getRuleContext(WithTableHintContext.class,0);
		}
		public SelectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSelectClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSelectClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSelectClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectClauseContext selectClause() throws RecognitionException {
		SelectClauseContext _localctx = new SelectClauseContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_selectClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5764);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5763);
				selectWithClause();
				}
			}

			setState(5766);
			match(SELECT);
			setState(5768);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISTINCT || _la==ALL) {
				{
				setState(5767);
				duplicateSpecification();
				}
			}

			setState(5770);
			projections();
			setState(5772);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(5771);
				intoClause();
				}
			}

			setState(5781);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(5774);
				fromClause();
				setState(5776);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,653,_ctx) ) {
				case 1:
					{
					setState(5775);
					withTempTable();
					}
					break;
				}
				setState(5779);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,654,_ctx) ) {
				case 1:
					{
					setState(5778);
					withTableHint();
					}
					break;
				}
				}
			}

			setState(5784);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(5783);
				whereClause();
				}
			}

			setState(5787);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GROUP) {
				{
				setState(5786);
				groupByClause();
				}
			}

			setState(5790);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(5789);
				havingClause();
				}
			}

			setState(5793);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(5792);
				orderByClause();
				}
			}

			setState(5796);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,660,_ctx) ) {
			case 1:
				{
				setState(5795);
				forClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DuplicateSpecificationContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(SQLServerStatementParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(SQLServerStatementParser.DISTINCT, 0); }
		public DuplicateSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_duplicateSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDuplicateSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDuplicateSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDuplicateSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DuplicateSpecificationContext duplicateSpecification() throws RecognitionException {
		DuplicateSpecificationContext _localctx = new DuplicateSpecificationContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_duplicateSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5798);
			_la = _input.LA(1);
			if ( !(_la==DISTINCT || _la==ALL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProjectionsContext extends ParserRuleContext {
		public List<ProjectionContext> projection() {
			return getRuleContexts(ProjectionContext.class);
		}
		public ProjectionContext projection(int i) {
			return getRuleContext(ProjectionContext.class,i);
		}
		public TopContext top() {
			return getRuleContext(TopContext.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public ProjectionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_projections; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterProjections(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitProjections(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitProjections(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProjectionsContext projections() throws RecognitionException {
		ProjectionsContext _localctx = new ProjectionsContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_projections);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5805);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,662,_ctx) ) {
			case 1:
				{
				setState(5800);
				projection();
				}
				break;
			case 2:
				{
				setState(5801);
				top();
				setState(5803);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,661,_ctx) ) {
				case 1:
					{
					setState(5802);
					projection();
					}
					break;
				}
				}
				break;
			}
			setState(5811);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5807);
				match(COMMA_);
				setState(5808);
				projection();
				}
				}
				setState(5813);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProjectionContext extends ParserRuleContext {
		public QualifiedShorthandContext qualifiedShorthand() {
			return getRuleContext(QualifiedShorthandContext.class,0);
		}
		public UnqualifiedShorthandContext unqualifiedShorthand() {
			return getRuleContext(UnqualifiedShorthandContext.class,0);
		}
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode AS() { return getToken(SQLServerStatementParser.AS, 0); }
		public ProjectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_projection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterProjection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitProjection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitProjection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProjectionContext projection() throws RecognitionException {
		ProjectionContext _localctx = new ProjectionContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_projection);
		int _la;
		try {
			setState(5835);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,669,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5814);
				qualifiedShorthand();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5815);
				unqualifiedShorthand();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5819);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,664,_ctx) ) {
				case 1:
					{
					setState(5816);
					alias();
					setState(5817);
					match(EQ_);
					}
					break;
				}
				setState(5823);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,665,_ctx) ) {
				case 1:
					{
					setState(5821);
					columnName();
					}
					break;
				case 2:
					{
					setState(5822);
					expr(0);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5827);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,666,_ctx) ) {
				case 1:
					{
					setState(5825);
					columnName();
					}
					break;
				case 2:
					{
					setState(5826);
					expr(0);
					}
					break;
				}
				setState(5833);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,668,_ctx) ) {
				case 1:
					{
					setState(5830);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(5829);
						match(AS);
						}
					}

					setState(5832);
					alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TopContext extends ParserRuleContext {
		public TerminalNode TOP() { return getToken(SQLServerStatementParser.TOP, 0); }
		public TopNumContext topNum() {
			return getRuleContext(TopNumContext.class,0);
		}
		public List<TerminalNode> LP_() { return getTokens(SQLServerStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(SQLServerStatementParser.LP_, i);
		}
		public List<TerminalNode> RP_() { return getTokens(SQLServerStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(SQLServerStatementParser.RP_, i);
		}
		public TerminalNode PERCENT() { return getToken(SQLServerStatementParser.PERCENT, 0); }
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public TerminalNode TIES() { return getToken(SQLServerStatementParser.TIES, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(SQLServerStatementParser.ROW_NUMBER, 0); }
		public TerminalNode OVER() { return getToken(SQLServerStatementParser.OVER, 0); }
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public TerminalNode AS() { return getToken(SQLServerStatementParser.AS, 0); }
		public TopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_top; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterTop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitTop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitTop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TopContext top() throws RecognitionException {
		TopContext _localctx = new TopContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_top);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5837);
			match(TOP);
			setState(5839);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(5838);
				match(LP_);
				}
			}

			setState(5841);
			topNum();
			setState(5843);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,671,_ctx) ) {
			case 1:
				{
				setState(5842);
				match(RP_);
				}
				break;
			}
			setState(5846);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERCENT) {
				{
				setState(5845);
				match(PERCENT);
				}
			}

			setState(5850);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,673,_ctx) ) {
			case 1:
				{
				setState(5848);
				match(WITH);
				setState(5849);
				match(TIES);
				}
				break;
			}
			setState(5865);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,676,_ctx) ) {
			case 1:
				{
				setState(5852);
				match(ROW_NUMBER);
				setState(5853);
				match(LP_);
				setState(5854);
				match(RP_);
				setState(5855);
				match(OVER);
				setState(5856);
				match(LP_);
				setState(5857);
				orderByClause();
				setState(5858);
				match(RP_);
				setState(5863);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,675,_ctx) ) {
				case 1:
					{
					setState(5860);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(5859);
						match(AS);
						}
					}

					setState(5862);
					alias();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TopNumContext extends ParserRuleContext {
		public NumberLiteralsContext numberLiterals() {
			return getRuleContext(NumberLiteralsContext.class,0);
		}
		public ParameterMarkerContext parameterMarker() {
			return getRuleContext(ParameterMarkerContext.class,0);
		}
		public TopNumContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_topNum; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterTopNum(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitTopNum(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitTopNum(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TopNumContext topNum() throws RecognitionException {
		TopNumContext _localctx = new TopNumContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_topNum);
		try {
			setState(5869);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PLUS_:
			case MINUS_:
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(5867);
				numberLiterals();
				}
				break;
			case QUESTION_:
				enterOuterAlt(_localctx, 2);
				{
				setState(5868);
				parameterMarker();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnqualifiedShorthandContext extends ParserRuleContext {
		public TerminalNode ASTERISK_() { return getToken(SQLServerStatementParser.ASTERISK_, 0); }
		public UnqualifiedShorthandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unqualifiedShorthand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterUnqualifiedShorthand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitUnqualifiedShorthand(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitUnqualifiedShorthand(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnqualifiedShorthandContext unqualifiedShorthand() throws RecognitionException {
		UnqualifiedShorthandContext _localctx = new UnqualifiedShorthandContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_unqualifiedShorthand);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5871);
			match(ASTERISK_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QualifiedShorthandContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DOT_ASTERISK_() { return getToken(SQLServerStatementParser.DOT_ASTERISK_, 0); }
		public QualifiedShorthandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifiedShorthand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterQualifiedShorthand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitQualifiedShorthand(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitQualifiedShorthand(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualifiedShorthandContext qualifiedShorthand() throws RecognitionException {
		QualifiedShorthandContext _localctx = new QualifiedShorthandContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_qualifiedShorthand);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5873);
			identifier();
			setState(5874);
			match(DOT_ASTERISK_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IntoClauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(SQLServerStatementParser.INTO, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public IntoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intoClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterIntoClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitIntoClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitIntoClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntoClauseContext intoClause() throws RecognitionException {
		IntoClauseContext _localctx = new IntoClauseContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_intoClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5876);
			match(INTO);
			setState(5877);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FromClauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(SQLServerStatementParser.FROM, 0); }
		public TableReferencesContext tableReferences() {
			return getRuleContext(TableReferencesContext.class,0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterFromClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitFromClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitFromClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_fromClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5879);
			match(FROM);
			setState(5880);
			tableReferences();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableReferencesContext extends ParserRuleContext {
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public TableReferencesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableReferences; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterTableReferences(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitTableReferences(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitTableReferences(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableReferencesContext tableReferences() throws RecognitionException {
		TableReferencesContext _localctx = new TableReferencesContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_tableReferences);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5882);
			tableReference();
			setState(5887);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5883);
				match(COMMA_);
				setState(5884);
				tableReference();
				}
				}
				setState(5889);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableReferenceContext extends ParserRuleContext {
		public TableFactorContext tableFactor() {
			return getRuleContext(TableFactorContext.class,0);
		}
		public List<JoinedTableContext> joinedTable() {
			return getRuleContexts(JoinedTableContext.class);
		}
		public JoinedTableContext joinedTable(int i) {
			return getRuleContext(JoinedTableContext.class,i);
		}
		public TableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterTableReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitTableReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitTableReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableReferenceContext tableReference() throws RecognitionException {
		TableReferenceContext _localctx = new TableReferenceContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_tableReference);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5890);
			tableFactor();
			setState(5894);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,679,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5891);
					joinedTable();
					}
					} 
				}
				setState(5896);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,679,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableFactorContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(SQLServerStatementParser.FOR, 0); }
		public TerminalNode PATH() { return getToken(SQLServerStatementParser.PATH, 0); }
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public TerminalNode AS() { return getToken(SQLServerStatementParser.AS, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public TableReferencesContext tableReferences() {
			return getRuleContext(TableReferencesContext.class,0);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public TableFactorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFactor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterTableFactor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitTableFactor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitTableFactor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFactorContext tableFactor() throws RecognitionException {
		TableFactorContext _localctx = new TableFactorContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_tableFactor);
		int _la;
		try {
			setState(5927);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,687,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5897);
				tableName();
				setState(5900);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,680,_ctx) ) {
				case 1:
					{
					setState(5898);
					match(FOR);
					setState(5899);
					match(PATH);
					}
					break;
				}
				setState(5906);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,682,_ctx) ) {
				case 1:
					{
					setState(5903);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(5902);
						match(AS);
						}
					}

					setState(5905);
					alias();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5908);
				subquery();
				setState(5910);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(5909);
					match(AS);
					}
				}

				setState(5912);
				alias();
				setState(5914);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,684,_ctx) ) {
				case 1:
					{
					setState(5913);
					columnNames();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5916);
				expr(0);
				setState(5921);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,686,_ctx) ) {
				case 1:
					{
					setState(5918);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(5917);
						match(AS);
						}
					}

					setState(5920);
					alias();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5923);
				match(LP_);
				setState(5924);
				tableReferences();
				setState(5925);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JoinedTableContext extends ParserRuleContext {
		public TableFactorContext tableFactor() {
			return getRuleContext(TableFactorContext.class,0);
		}
		public TerminalNode JOIN() { return getToken(SQLServerStatementParser.JOIN, 0); }
		public TerminalNode NATURAL() { return getToken(SQLServerStatementParser.NATURAL, 0); }
		public JoinSpecificationContext joinSpecification() {
			return getRuleContext(JoinSpecificationContext.class,0);
		}
		public TerminalNode INNER() { return getToken(SQLServerStatementParser.INNER, 0); }
		public TerminalNode CROSS() { return getToken(SQLServerStatementParser.CROSS, 0); }
		public TerminalNode LEFT() { return getToken(SQLServerStatementParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(SQLServerStatementParser.RIGHT, 0); }
		public TerminalNode FULL() { return getToken(SQLServerStatementParser.FULL, 0); }
		public TerminalNode OUTER() { return getToken(SQLServerStatementParser.OUTER, 0); }
		public TerminalNode APPLY() { return getToken(SQLServerStatementParser.APPLY, 0); }
		public JoinedTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinedTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterJoinedTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitJoinedTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitJoinedTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinedTableContext joinedTable() throws RecognitionException {
		JoinedTableContext _localctx = new JoinedTableContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_joinedTable);
		int _la;
		try {
			setState(5959);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,695,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5930);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NATURAL) {
					{
					setState(5929);
					match(NATURAL);
					}
				}

				{
				setState(5933);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INNER || _la==CROSS) {
					{
					setState(5932);
					_la = _input.LA(1);
					if ( !(_la==INNER || _la==CROSS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5935);
				match(JOIN);
				}
				setState(5937);
				tableFactor();
				setState(5939);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,690,_ctx) ) {
				case 1:
					{
					setState(5938);
					joinSpecification();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5942);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NATURAL) {
					{
					setState(5941);
					match(NATURAL);
					}
				}

				setState(5944);
				_la = _input.LA(1);
				if ( !(((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & 25L) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5946);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(5945);
					match(OUTER);
					}
				}

				setState(5948);
				match(JOIN);
				setState(5949);
				tableFactor();
				setState(5951);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,693,_ctx) ) {
				case 1:
					{
					setState(5950);
					joinSpecification();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5953);
				_la = _input.LA(1);
				if ( !(_la==OUTER || _la==CROSS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5954);
				match(APPLY);
				setState(5955);
				tableFactor();
				setState(5957);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,694,_ctx) ) {
				case 1:
					{
					setState(5956);
					joinSpecification();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JoinSpecificationContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode USING() { return getToken(SQLServerStatementParser.USING, 0); }
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public JoinSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterJoinSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitJoinSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitJoinSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinSpecificationContext joinSpecification() throws RecognitionException {
		JoinSpecificationContext _localctx = new JoinSpecificationContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_joinSpecification);
		try {
			setState(5965);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				enterOuterAlt(_localctx, 1);
				{
				setState(5961);
				match(ON);
				setState(5962);
				expr(0);
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(5963);
				match(USING);
				setState(5964);
				columnNames();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(SQLServerStatementParser.WHERE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterWhereClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitWhereClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitWhereClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhereClauseContext whereClause() throws RecognitionException {
		WhereClauseContext _localctx = new WhereClauseContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_whereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5967);
			match(WHERE);
			setState(5968);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupByClauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(SQLServerStatementParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(SQLServerStatementParser.BY, 0); }
		public List<OrderByItemContext> orderByItem() {
			return getRuleContexts(OrderByItemContext.class);
		}
		public OrderByItemContext orderByItem(int i) {
			return getRuleContext(OrderByItemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterGroupByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitGroupByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitGroupByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByClauseContext groupByClause() throws RecognitionException {
		GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_groupByClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5970);
			match(GROUP);
			setState(5971);
			match(BY);
			setState(5972);
			orderByItem();
			setState(5977);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5973);
				match(COMMA_);
				setState(5974);
				orderByItem();
				}
				}
				setState(5979);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HavingClauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(SQLServerStatementParser.HAVING, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterHavingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitHavingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitHavingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5980);
			match(HAVING);
			setState(5981);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SubqueryContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public AggregationClauseContext aggregationClause() {
			return getRuleContext(AggregationClauseContext.class,0);
		}
		public MergeContext merge() {
			return getRuleContext(MergeContext.class,0);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSubquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSubquery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5983);
			match(LP_);
			setState(5986);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,698,_ctx) ) {
			case 1:
				{
				setState(5984);
				aggregationClause();
				}
				break;
			case 2:
				{
				setState(5985);
				merge();
				}
				break;
			}
			setState(5988);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WithTempTableContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public TerminalNode AS() { return getToken(SQLServerStatementParser.AS, 0); }
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public WithTempTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withTempTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterWithTempTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitWithTempTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitWithTempTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithTempTableContext withTempTable() throws RecognitionException {
		WithTempTableContext _localctx = new WithTempTableContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_withTempTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5990);
			match(WITH);
			setState(5991);
			match(LP_);
			{
			setState(5992);
			columnName();
			setState(5993);
			dataType();
			}
			setState(6001);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5995);
				match(COMMA_);
				setState(5996);
				columnName();
				setState(5997);
				dataType();
				}
				}
				setState(6003);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6004);
			match(RP_);
			setState(6005);
			match(AS);
			setState(6006);
			alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WithClauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public CteClauseSetContext cteClauseSet() {
			return getRuleContext(CteClauseSetContext.class,0);
		}
		public WithClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterWithClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitWithClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitWithClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithClauseContext withClause() throws RecognitionException {
		WithClauseContext _localctx = new WithClauseContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_withClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6008);
			match(WITH);
			setState(6009);
			cteClauseSet();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CteClauseSetContext extends ParserRuleContext {
		public List<CteClauseContext> cteClause() {
			return getRuleContexts(CteClauseContext.class);
		}
		public CteClauseContext cteClause(int i) {
			return getRuleContext(CteClauseContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public CteClauseSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cteClauseSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCteClauseSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCteClauseSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCteClauseSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CteClauseSetContext cteClauseSet() throws RecognitionException {
		CteClauseSetContext _localctx = new CteClauseSetContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_cteClauseSet);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6011);
			cteClause();
			setState(6016);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(6012);
				match(COMMA_);
				setState(6013);
				cteClause();
				}
				}
				setState(6018);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CteClauseContext extends ParserRuleContext {
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public TerminalNode AS() { return getToken(SQLServerStatementParser.AS, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public CteClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cteClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCteClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCteClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCteClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CteClauseContext cteClause() throws RecognitionException {
		CteClauseContext _localctx = new CteClauseContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_cteClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6019);
			alias();
			setState(6021);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(6020);
				columnNames();
				}
			}

			setState(6023);
			match(AS);
			setState(6024);
			subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OutputClauseContext extends ParserRuleContext {
		public TerminalNode OUTPUT() { return getToken(SQLServerStatementParser.OUTPUT, 0); }
		public OutputWithColumnsContext outputWithColumns() {
			return getRuleContext(OutputWithColumnsContext.class,0);
		}
		public OutputWithAateriskContext outputWithAaterisk() {
			return getRuleContext(OutputWithAateriskContext.class,0);
		}
		public TerminalNode INTO() { return getToken(SQLServerStatementParser.INTO, 0); }
		public OutputTableNameContext outputTableName() {
			return getRuleContext(OutputTableNameContext.class,0);
		}
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public OutputClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outputClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterOutputClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitOutputClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitOutputClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OutputClauseContext outputClause() throws RecognitionException {
		OutputClauseContext _localctx = new OutputClauseContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_outputClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6026);
			match(OUTPUT);
			setState(6029);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,702,_ctx) ) {
			case 1:
				{
				setState(6027);
				outputWithColumns();
				}
				break;
			case 2:
				{
				setState(6028);
				outputWithAaterisk();
				}
				break;
			}
			setState(6036);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(6031);
				match(INTO);
				setState(6032);
				outputTableName();
				setState(6034);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(6033);
					columnNames();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OutputWithColumnsContext extends ParserRuleContext {
		public List<OutputWithColumnContext> outputWithColumn() {
			return getRuleContexts(OutputWithColumnContext.class);
		}
		public OutputWithColumnContext outputWithColumn(int i) {
			return getRuleContext(OutputWithColumnContext.class,i);
		}
		public List<ScalarExpressionContext> scalarExpression() {
			return getRuleContexts(ScalarExpressionContext.class);
		}
		public ScalarExpressionContext scalarExpression(int i) {
			return getRuleContext(ScalarExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public OutputWithColumnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outputWithColumns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterOutputWithColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitOutputWithColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitOutputWithColumns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OutputWithColumnsContext outputWithColumns() throws RecognitionException {
		OutputWithColumnsContext _localctx = new OutputWithColumnsContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_outputWithColumns);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6040);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,705,_ctx) ) {
			case 1:
				{
				setState(6038);
				outputWithColumn();
				}
				break;
			case 2:
				{
				setState(6039);
				scalarExpression();
				}
				break;
			}
			setState(6049);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(6042);
				match(COMMA_);
				setState(6045);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,706,_ctx) ) {
				case 1:
					{
					setState(6043);
					outputWithColumn();
					}
					break;
				case 2:
					{
					setState(6044);
					scalarExpression();
					}
					break;
				}
				}
				}
				setState(6051);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ScalarExpressionContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public TerminalNode AS() { return getToken(SQLServerStatementParser.AS, 0); }
		public ScalarExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalarExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterScalarExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitScalarExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitScalarExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScalarExpressionContext scalarExpression() throws RecognitionException {
		ScalarExpressionContext _localctx = new ScalarExpressionContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_scalarExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6052);
			expr(0);
			setState(6057);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,709,_ctx) ) {
			case 1:
				{
				setState(6054);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(6053);
					match(AS);
					}
				}

				setState(6056);
				alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OutputWithColumnContext extends ParserRuleContext {
		public TerminalNode DOT_() { return getToken(SQLServerStatementParser.DOT_, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode INSERTED() { return getToken(SQLServerStatementParser.INSERTED, 0); }
		public TerminalNode DELETED() { return getToken(SQLServerStatementParser.DELETED, 0); }
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public TerminalNode AS() { return getToken(SQLServerStatementParser.AS, 0); }
		public OutputWithColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outputWithColumn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterOutputWithColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitOutputWithColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitOutputWithColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OutputWithColumnContext outputWithColumn() throws RecognitionException {
		OutputWithColumnContext _localctx = new OutputWithColumnContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_outputWithColumn);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6059);
			_la = _input.LA(1);
			if ( !(_la==INSERTED || _la==DELETED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6060);
			match(DOT_);
			setState(6061);
			name();
			setState(6066);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,711,_ctx) ) {
			case 1:
				{
				setState(6063);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(6062);
					match(AS);
					}
				}

				setState(6065);
				alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OutputWithAateriskContext extends ParserRuleContext {
		public TerminalNode DOT_ASTERISK_() { return getToken(SQLServerStatementParser.DOT_ASTERISK_, 0); }
		public TerminalNode INSERTED() { return getToken(SQLServerStatementParser.INSERTED, 0); }
		public TerminalNode DELETED() { return getToken(SQLServerStatementParser.DELETED, 0); }
		public OutputWithAateriskContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outputWithAaterisk; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterOutputWithAaterisk(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitOutputWithAaterisk(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitOutputWithAaterisk(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OutputWithAateriskContext outputWithAaterisk() throws RecognitionException {
		OutputWithAateriskContext _localctx = new OutputWithAateriskContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_outputWithAaterisk);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6068);
			_la = _input.LA(1);
			if ( !(_la==INSERTED || _la==DELETED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6069);
			match(DOT_ASTERISK_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OutputTableNameContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public OutputTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outputTableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterOutputTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitOutputTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitOutputTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OutputTableNameContext outputTableName() throws RecognitionException {
		OutputTableNameContext _localctx = new OutputTableNameContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_outputTableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6071);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QueryHintContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(SQLServerStatementParser.GROUP, 0); }
		public TerminalNode HASH() { return getToken(SQLServerStatementParser.HASH, 0); }
		public TerminalNode ORDER() { return getToken(SQLServerStatementParser.ORDER, 0); }
		public TerminalNode UNION() { return getToken(SQLServerStatementParser.UNION, 0); }
		public TerminalNode CONCAT() { return getToken(SQLServerStatementParser.CONCAT, 0); }
		public TerminalNode MERGE() { return getToken(SQLServerStatementParser.MERGE, 0); }
		public TerminalNode JOIN() { return getToken(SQLServerStatementParser.JOIN, 0); }
		public TerminalNode LOOP() { return getToken(SQLServerStatementParser.LOOP, 0); }
		public TerminalNode EXPAND() { return getToken(SQLServerStatementParser.EXPAND, 0); }
		public TerminalNode VIEWS() { return getToken(SQLServerStatementParser.VIEWS, 0); }
		public TerminalNode FAST() { return getToken(SQLServerStatementParser.FAST, 0); }
		public TerminalNode INT_NUM_() { return getToken(SQLServerStatementParser.INT_NUM_, 0); }
		public TerminalNode FORCE() { return getToken(SQLServerStatementParser.FORCE, 0); }
		public TerminalNode EXTERNALPUSHDOWN() { return getToken(SQLServerStatementParser.EXTERNALPUSHDOWN, 0); }
		public TerminalNode DISABLE() { return getToken(SQLServerStatementParser.DISABLE, 0); }
		public TerminalNode SCALEOUTEXECUTION() { return getToken(SQLServerStatementParser.SCALEOUTEXECUTION, 0); }
		public TerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return getToken(SQLServerStatementParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		public TerminalNode KEEP() { return getToken(SQLServerStatementParser.KEEP, 0); }
		public TerminalNode PLAN() { return getToken(SQLServerStatementParser.PLAN, 0); }
		public TerminalNode KEEPFIXED() { return getToken(SQLServerStatementParser.KEEPFIXED, 0); }
		public TerminalNode MAX_GRANT_PERCENT() { return getToken(SQLServerStatementParser.MAX_GRANT_PERCENT, 0); }
		public List<TerminalNode> EQ_() { return getTokens(SQLServerStatementParser.EQ_); }
		public TerminalNode EQ_(int i) {
			return getToken(SQLServerStatementParser.EQ_, i);
		}
		public TerminalNode DECIMAL_NUM_() { return getToken(SQLServerStatementParser.DECIMAL_NUM_, 0); }
		public TerminalNode MIN_GRANT_PERCENT() { return getToken(SQLServerStatementParser.MIN_GRANT_PERCENT, 0); }
		public TerminalNode MAXDOP() { return getToken(SQLServerStatementParser.MAXDOP, 0); }
		public TerminalNode MAXRECURSION() { return getToken(SQLServerStatementParser.MAXRECURSION, 0); }
		public TerminalNode NO_PERFORMANCE_SPOOL() { return getToken(SQLServerStatementParser.NO_PERFORMANCE_SPOOL, 0); }
		public List<TerminalNode> LP_() { return getTokens(SQLServerStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(SQLServerStatementParser.LP_, i);
		}
		public TerminalNode OPTIMIZE() { return getToken(SQLServerStatementParser.OPTIMIZE, 0); }
		public TerminalNode FOR() { return getToken(SQLServerStatementParser.FOR, 0); }
		public VariableNameContext variableName() {
			return getRuleContext(VariableNameContext.class,0);
		}
		public List<TerminalNode> RP_() { return getTokens(SQLServerStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(SQLServerStatementParser.RP_, i);
		}
		public List<TerminalNode> UNKNOWN() { return getTokens(SQLServerStatementParser.UNKNOWN); }
		public TerminalNode UNKNOWN(int i) {
			return getToken(SQLServerStatementParser.UNKNOWN, i);
		}
		public List<LiteralsContext> literals() {
			return getRuleContexts(LiteralsContext.class);
		}
		public LiteralsContext literals(int i) {
			return getRuleContext(LiteralsContext.class,i);
		}
		public TerminalNode PARAMETERIZATION() { return getToken(SQLServerStatementParser.PARAMETERIZATION, 0); }
		public TerminalNode SIMPLE() { return getToken(SQLServerStatementParser.SIMPLE, 0); }
		public TerminalNode FORCED() { return getToken(SQLServerStatementParser.FORCED, 0); }
		public TerminalNode QUERYTRACEON() { return getToken(SQLServerStatementParser.QUERYTRACEON, 0); }
		public TerminalNode RECOMPILE() { return getToken(SQLServerStatementParser.RECOMPILE, 0); }
		public TerminalNode ROBUST() { return getToken(SQLServerStatementParser.ROBUST, 0); }
		public TerminalNode USE() { return getToken(SQLServerStatementParser.USE, 0); }
		public TerminalNode HINT() { return getToken(SQLServerStatementParser.HINT, 0); }
		public List<UseHitNameContext> useHitName() {
			return getRuleContexts(UseHitNameContext.class);
		}
		public UseHitNameContext useHitName(int i) {
			return getRuleContext(UseHitNameContext.class,i);
		}
		public TerminalNode NCHAR_TEXT() { return getToken(SQLServerStatementParser.NCHAR_TEXT, 0); }
		public QueryHintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryHint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterQueryHint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitQueryHint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitQueryHint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryHintContext queryHint() throws RecognitionException {
		QueryHintContext _localctx = new QueryHintContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_queryHint);
		int _la;
		try {
			setState(6144);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,715,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6073);
				_la = _input.LA(1);
				if ( !(_la==ORDER || _la==HASH) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6074);
				match(GROUP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6075);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==HASH || _la==CONCAT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6076);
				match(UNION);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6077);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==LOOP || _la==HASH) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6078);
				match(JOIN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6079);
				match(EXPAND);
				setState(6080);
				match(VIEWS);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6081);
				match(FAST);
				setState(6082);
				match(INT_NUM_);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6083);
				match(FORCE);
				setState(6084);
				match(ORDER);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6085);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==FORCE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6086);
				match(EXTERNALPUSHDOWN);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6087);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==FORCE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6088);
				match(SCALEOUTEXECUTION);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6089);
				match(IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6090);
				match(KEEP);
				setState(6091);
				match(PLAN);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6092);
				match(KEEPFIXED);
				setState(6093);
				match(PLAN);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6094);
				match(MAX_GRANT_PERCENT);
				setState(6095);
				match(EQ_);
				setState(6096);
				match(DECIMAL_NUM_);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6097);
				match(MIN_GRANT_PERCENT);
				setState(6098);
				match(EQ_);
				setState(6099);
				match(DECIMAL_NUM_);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6100);
				match(MAXDOP);
				setState(6101);
				match(INT_NUM_);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6102);
				match(MAXRECURSION);
				setState(6103);
				match(INT_NUM_);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6104);
				match(NO_PERFORMANCE_SPOOL);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6105);
				match(LP_);
				setState(6106);
				match(OPTIMIZE);
				setState(6107);
				match(FOR);
				setState(6108);
				match(LP_);
				setState(6109);
				variableName();
				setState(6115);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==EQ_ || _la==UNKNOWN) {
					{
					setState(6113);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case UNKNOWN:
						{
						setState(6110);
						match(UNKNOWN);
						}
						break;
					case EQ_:
						{
						setState(6111);
						match(EQ_);
						setState(6112);
						literals();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(6117);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6118);
				match(RP_);
				setState(6119);
				match(RP_);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(6121);
				match(OPTIMIZE);
				setState(6122);
				match(FOR);
				setState(6123);
				match(UNKNOWN);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(6124);
				match(PARAMETERIZATION);
				setState(6125);
				_la = _input.LA(1);
				if ( !(_la==SIMPLE || _la==FORCED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(6126);
				match(QUERYTRACEON);
				setState(6127);
				match(INT_NUM_);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(6128);
				match(RECOMPILE);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(6129);
				match(ROBUST);
				setState(6130);
				match(PLAN);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(6131);
				match(USE);
				setState(6132);
				match(HINT);
				setState(6133);
				match(LP_);
				setState(6137);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==SQ_) {
					{
					{
					setState(6134);
					useHitName();
					}
					}
					setState(6139);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6140);
				match(RP_);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(6141);
				match(USE);
				setState(6142);
				match(PLAN);
				setState(6143);
				match(NCHAR_TEXT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UseHitNameContext extends ParserRuleContext {
		public List<TerminalNode> SQ_() { return getTokens(SQLServerStatementParser.SQ_); }
		public TerminalNode SQ_(int i) {
			return getToken(SQLServerStatementParser.SQ_, i);
		}
		public TerminalNode ASSUME_JOIN_PREDICATE_DEPENDS_ON_FILTERS() { return getToken(SQLServerStatementParser.ASSUME_JOIN_PREDICATE_DEPENDS_ON_FILTERS, 0); }
		public TerminalNode ASSUME_MIN_SELECTIVITY_FOR_FILTER_ESTIMATES() { return getToken(SQLServerStatementParser.ASSUME_MIN_SELECTIVITY_FOR_FILTER_ESTIMATES, 0); }
		public TerminalNode DISABLE_BATCH_MODE_ADAPTIVE_JOINS() { return getToken(SQLServerStatementParser.DISABLE_BATCH_MODE_ADAPTIVE_JOINS, 0); }
		public TerminalNode DISABLE_BATCH_MODE_MEMORY_GRANT_FEEDBACK() { return getToken(SQLServerStatementParser.DISABLE_BATCH_MODE_MEMORY_GRANT_FEEDBACK, 0); }
		public TerminalNode DISABLE_DEFERRED_COMPILATION_TV() { return getToken(SQLServerStatementParser.DISABLE_DEFERRED_COMPILATION_TV, 0); }
		public TerminalNode DISABLE_INTERLEAVED_EXECUTION_TVF() { return getToken(SQLServerStatementParser.DISABLE_INTERLEAVED_EXECUTION_TVF, 0); }
		public TerminalNode DISABLE_OPTIMIZED_NESTED_LOOP() { return getToken(SQLServerStatementParser.DISABLE_OPTIMIZED_NESTED_LOOP, 0); }
		public TerminalNode DISABLE_OPTIMIZER_ROWGOAL() { return getToken(SQLServerStatementParser.DISABLE_OPTIMIZER_ROWGOAL, 0); }
		public TerminalNode DISABLE_PARAMETER_SNIFFING() { return getToken(SQLServerStatementParser.DISABLE_PARAMETER_SNIFFING, 0); }
		public TerminalNode DISABLE_ROW_MODE_MEMORY_GRANT_FEEDBACK() { return getToken(SQLServerStatementParser.DISABLE_ROW_MODE_MEMORY_GRANT_FEEDBACK, 0); }
		public TerminalNode DISABLE_TSQL_SCALAR_UDF_INLINING() { return getToken(SQLServerStatementParser.DISABLE_TSQL_SCALAR_UDF_INLINING, 0); }
		public TerminalNode DISALLOW_BATCH_MODE() { return getToken(SQLServerStatementParser.DISALLOW_BATCH_MODE, 0); }
		public TerminalNode ENABLE_HIST_AMENDMENT_FOR_ASC_KEYS() { return getToken(SQLServerStatementParser.ENABLE_HIST_AMENDMENT_FOR_ASC_KEYS, 0); }
		public TerminalNode ENABLE_QUERY_OPTIMIZER_HOTFIXES() { return getToken(SQLServerStatementParser.ENABLE_QUERY_OPTIMIZER_HOTFIXES, 0); }
		public TerminalNode FORCE_DEFAULT_CARDINALITY_ESTIMATION() { return getToken(SQLServerStatementParser.FORCE_DEFAULT_CARDINALITY_ESTIMATION, 0); }
		public TerminalNode FORCE_LEGACY_CARDINALITY_ESTIMATION() { return getToken(SQLServerStatementParser.FORCE_LEGACY_CARDINALITY_ESTIMATION, 0); }
		public TerminalNode QUERY_OPTIMIZER_COMPATIBILITY_LEVEL_n() { return getToken(SQLServerStatementParser.QUERY_OPTIMIZER_COMPATIBILITY_LEVEL_n, 0); }
		public TerminalNode QUERY_PLAN_PROFILE() { return getToken(SQLServerStatementParser.QUERY_PLAN_PROFILE, 0); }
		public UseHitNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_useHitName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterUseHitName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitUseHitName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitUseHitName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UseHitNameContext useHitName() throws RecognitionException {
		UseHitNameContext _localctx = new UseHitNameContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_useHitName);
		try {
			setState(6200);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,716,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6146);
				match(SQ_);
				setState(6147);
				match(ASSUME_JOIN_PREDICATE_DEPENDS_ON_FILTERS);
				setState(6148);
				match(SQ_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6149);
				match(SQ_);
				setState(6150);
				match(ASSUME_MIN_SELECTIVITY_FOR_FILTER_ESTIMATES);
				setState(6151);
				match(SQ_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6152);
				match(SQ_);
				setState(6153);
				match(DISABLE_BATCH_MODE_ADAPTIVE_JOINS);
				setState(6154);
				match(SQ_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6155);
				match(SQ_);
				setState(6156);
				match(DISABLE_BATCH_MODE_MEMORY_GRANT_FEEDBACK);
				setState(6157);
				match(SQ_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6158);
				match(SQ_);
				setState(6159);
				match(DISABLE_DEFERRED_COMPILATION_TV);
				setState(6160);
				match(SQ_);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6161);
				match(SQ_);
				setState(6162);
				match(DISABLE_INTERLEAVED_EXECUTION_TVF);
				setState(6163);
				match(SQ_);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6164);
				match(SQ_);
				setState(6165);
				match(DISABLE_OPTIMIZED_NESTED_LOOP);
				setState(6166);
				match(SQ_);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6167);
				match(SQ_);
				setState(6168);
				match(DISABLE_OPTIMIZER_ROWGOAL);
				setState(6169);
				match(SQ_);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6170);
				match(SQ_);
				setState(6171);
				match(DISABLE_PARAMETER_SNIFFING);
				setState(6172);
				match(SQ_);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6173);
				match(SQ_);
				setState(6174);
				match(DISABLE_ROW_MODE_MEMORY_GRANT_FEEDBACK);
				setState(6175);
				match(SQ_);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6176);
				match(SQ_);
				setState(6177);
				match(DISABLE_TSQL_SCALAR_UDF_INLINING);
				setState(6178);
				match(SQ_);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6179);
				match(SQ_);
				setState(6180);
				match(DISALLOW_BATCH_MODE);
				setState(6181);
				match(SQ_);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6182);
				match(SQ_);
				setState(6183);
				match(ENABLE_HIST_AMENDMENT_FOR_ASC_KEYS);
				setState(6184);
				match(SQ_);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6185);
				match(SQ_);
				setState(6186);
				match(ENABLE_QUERY_OPTIMIZER_HOTFIXES);
				setState(6187);
				match(SQ_);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6188);
				match(SQ_);
				setState(6189);
				match(FORCE_DEFAULT_CARDINALITY_ESTIMATION);
				setState(6190);
				match(SQ_);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6191);
				match(SQ_);
				setState(6192);
				match(FORCE_LEGACY_CARDINALITY_ESTIMATION);
				setState(6193);
				match(SQ_);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6194);
				match(SQ_);
				setState(6195);
				match(QUERY_OPTIMIZER_COMPATIBILITY_LEVEL_n);
				setState(6196);
				match(SQ_);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(6197);
				match(SQ_);
				setState(6198);
				match(QUERY_PLAN_PROFILE);
				setState(6199);
				match(SQ_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ForClauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(SQLServerStatementParser.FOR, 0); }
		public TerminalNode BROWSE() { return getToken(SQLServerStatementParser.BROWSE, 0); }
		public ForXmlClauseContext forXmlClause() {
			return getRuleContext(ForXmlClauseContext.class,0);
		}
		public ForJsonClauseContext forJsonClause() {
			return getRuleContext(ForJsonClauseContext.class,0);
		}
		public ForClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterForClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitForClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitForClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForClauseContext forClause() throws RecognitionException {
		ForClauseContext _localctx = new ForClauseContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_forClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6202);
			match(FOR);
			setState(6206);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BROWSE:
				{
				setState(6203);
				match(BROWSE);
				}
				break;
			case XML:
				{
				setState(6204);
				forXmlClause();
				}
				break;
			case JSON:
				{
				setState(6205);
				forJsonClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ForXmlClauseContext extends ParserRuleContext {
		public TerminalNode XML() { return getToken(SQLServerStatementParser.XML, 0); }
		public TerminalNode EXPLICIT() { return getToken(SQLServerStatementParser.EXPLICIT, 0); }
		public TerminalNode PATH() { return getToken(SQLServerStatementParser.PATH, 0); }
		public TerminalNode RAW() { return getToken(SQLServerStatementParser.RAW, 0); }
		public TerminalNode AUTO() { return getToken(SQLServerStatementParser.AUTO, 0); }
		public CommonDirectivesForXmlContext commonDirectivesForXml() {
			return getRuleContext(CommonDirectivesForXmlContext.class,0);
		}
		public List<TerminalNode> LP_() { return getTokens(SQLServerStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(SQLServerStatementParser.LP_, i);
		}
		public List<StringLiteralsContext> stringLiterals() {
			return getRuleContexts(StringLiteralsContext.class);
		}
		public StringLiteralsContext stringLiterals(int i) {
			return getRuleContext(StringLiteralsContext.class,i);
		}
		public List<TerminalNode> RP_() { return getTokens(SQLServerStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(SQLServerStatementParser.RP_, i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public TerminalNode ELEMENTS() { return getToken(SQLServerStatementParser.ELEMENTS, 0); }
		public TerminalNode XMLDATA() { return getToken(SQLServerStatementParser.XMLDATA, 0); }
		public TerminalNode XMLSCHEMA() { return getToken(SQLServerStatementParser.XMLSCHEMA, 0); }
		public TerminalNode XSINIL() { return getToken(SQLServerStatementParser.XSINIL, 0); }
		public TerminalNode ABSENT() { return getToken(SQLServerStatementParser.ABSENT, 0); }
		public ForXmlClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forXmlClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterForXmlClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitForXmlClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitForXmlClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForXmlClauseContext forXmlClause() throws RecognitionException {
		ForXmlClauseContext _localctx = new ForXmlClauseContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_forXmlClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6208);
			match(XML);
			setState(6267);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AUTO:
			case RAW:
				{
				setState(6217);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case RAW:
					{
					setState(6209);
					match(RAW);
					setState(6214);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LP_) {
						{
						setState(6210);
						match(LP_);
						setState(6211);
						stringLiterals();
						setState(6212);
						match(RP_);
						}
					}

					}
					break;
				case AUTO:
					{
					setState(6216);
					match(AUTO);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6240);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,725,_ctx) ) {
				case 1:
					{
					setState(6219);
					commonDirectivesForXml();
					setState(6231);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,722,_ctx) ) {
					case 1:
						{
						setState(6220);
						match(COMMA_);
						setState(6229);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case XMLDATA:
							{
							setState(6221);
							match(XMLDATA);
							}
							break;
						case XMLSCHEMA:
							{
							setState(6222);
							match(XMLSCHEMA);
							setState(6227);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==LP_) {
								{
								setState(6223);
								match(LP_);
								setState(6224);
								stringLiterals();
								setState(6225);
								match(RP_);
								}
							}

							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					}
					setState(6238);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA_) {
						{
						setState(6233);
						match(COMMA_);
						setState(6234);
						match(ELEMENTS);
						setState(6236);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==XSINIL || _la==ABSENT) {
							{
							setState(6235);
							_la = _input.LA(1);
							if ( !(_la==XSINIL || _la==ABSENT) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
						}

						}
					}

					}
					break;
				}
				}
				break;
			case EXPLICIT:
				{
				setState(6242);
				match(EXPLICIT);
				setState(6248);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,727,_ctx) ) {
				case 1:
					{
					setState(6243);
					commonDirectivesForXml();
					setState(6246);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA_) {
						{
						setState(6244);
						match(COMMA_);
						setState(6245);
						match(XMLDATA);
						}
					}

					}
					break;
				}
				}
				break;
			case PATH:
				{
				setState(6250);
				match(PATH);
				setState(6255);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(6251);
					match(LP_);
					setState(6252);
					stringLiterals();
					setState(6253);
					match(RP_);
					}
				}

				setState(6265);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,731,_ctx) ) {
				case 1:
					{
					setState(6257);
					commonDirectivesForXml();
					setState(6263);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA_) {
						{
						setState(6258);
						match(COMMA_);
						setState(6259);
						match(ELEMENTS);
						setState(6261);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==XSINIL || _la==ABSENT) {
							{
							setState(6260);
							_la = _input.LA(1);
							if ( !(_la==XSINIL || _la==ABSENT) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
						}

						}
					}

					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CommonDirectivesForXmlContext extends ParserRuleContext {
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public TerminalNode BINARY() { return getToken(SQLServerStatementParser.BINARY, 0); }
		public TerminalNode BASE64() { return getToken(SQLServerStatementParser.BASE64, 0); }
		public TerminalNode TYPE() { return getToken(SQLServerStatementParser.TYPE, 0); }
		public TerminalNode ROOT() { return getToken(SQLServerStatementParser.ROOT, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public StringLiteralsContext stringLiterals() {
			return getRuleContext(StringLiteralsContext.class,0);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public CommonDirectivesForXmlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commonDirectivesForXml; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCommonDirectivesForXml(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCommonDirectivesForXml(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCommonDirectivesForXml(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommonDirectivesForXmlContext commonDirectivesForXml() throws RecognitionException {
		CommonDirectivesForXmlContext _localctx = new CommonDirectivesForXmlContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_commonDirectivesForXml);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6272);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,733,_ctx) ) {
			case 1:
				{
				setState(6269);
				match(COMMA_);
				setState(6270);
				match(BINARY);
				setState(6271);
				match(BASE64);
				}
				break;
			}
			setState(6276);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,734,_ctx) ) {
			case 1:
				{
				setState(6274);
				match(COMMA_);
				setState(6275);
				match(TYPE);
				}
				break;
			}
			setState(6286);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,736,_ctx) ) {
			case 1:
				{
				setState(6278);
				match(COMMA_);
				setState(6279);
				match(ROOT);
				setState(6284);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(6280);
					match(LP_);
					setState(6281);
					stringLiterals();
					setState(6282);
					match(RP_);
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ForJsonClauseContext extends ParserRuleContext {
		public TerminalNode JSON() { return getToken(SQLServerStatementParser.JSON, 0); }
		public TerminalNode AUTO() { return getToken(SQLServerStatementParser.AUTO, 0); }
		public TerminalNode PATH() { return getToken(SQLServerStatementParser.PATH, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public TerminalNode ROOT() { return getToken(SQLServerStatementParser.ROOT, 0); }
		public TerminalNode INCLUDE_NULL_VALUES() { return getToken(SQLServerStatementParser.INCLUDE_NULL_VALUES, 0); }
		public TerminalNode WITHOUT_ARRAY_WRAPPER() { return getToken(SQLServerStatementParser.WITHOUT_ARRAY_WRAPPER, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public StringLiteralsContext stringLiterals() {
			return getRuleContext(StringLiteralsContext.class,0);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public ForJsonClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forJsonClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterForJsonClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitForJsonClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitForJsonClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForJsonClauseContext forJsonClause() throws RecognitionException {
		ForJsonClauseContext _localctx = new ForJsonClauseContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_forJsonClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6288);
			match(JSON);
			{
			setState(6289);
			_la = _input.LA(1);
			if ( !(_la==AUTO || _la==PATH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6308);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,741,_ctx) ) {
			case 1:
				{
				setState(6298);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,738,_ctx) ) {
				case 1:
					{
					setState(6290);
					match(COMMA_);
					setState(6291);
					match(ROOT);
					setState(6296);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LP_) {
						{
						setState(6292);
						match(LP_);
						setState(6293);
						stringLiterals();
						setState(6294);
						match(RP_);
						}
					}

					}
					break;
				}
				setState(6302);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,739,_ctx) ) {
				case 1:
					{
					setState(6300);
					match(COMMA_);
					setState(6301);
					match(INCLUDE_NULL_VALUES);
					}
					break;
				}
				setState(6306);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_) {
					{
					setState(6304);
					match(COMMA_);
					setState(6305);
					match(WITHOUT_ARRAY_WRAPPER);
					}
				}

				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectWithClauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public XmlNamespacesClauseContext xmlNamespacesClause() {
			return getRuleContext(XmlNamespacesClauseContext.class,0);
		}
		public CteClauseSetContext cteClauseSet() {
			return getRuleContext(CteClauseSetContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(SQLServerStatementParser.COMMA_, 0); }
		public SelectWithClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectWithClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSelectWithClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSelectWithClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSelectWithClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectWithClauseContext selectWithClause() throws RecognitionException {
		SelectWithClauseContext _localctx = new SelectWithClauseContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_selectWithClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6310);
			match(WITH);
			setState(6315);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==XMLNAMESPACES) {
				{
				setState(6311);
				xmlNamespacesClause();
				setState(6313);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_) {
					{
					setState(6312);
					match(COMMA_);
					}
				}

				}
			}

			setState(6318);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 53)) & ~0x3f) == 0 && ((1L << (_la - 53)) & 35737886458179L) != 0) || ((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & 331536634476137569L) != 0) || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & 288230376740488193L) != 0) || ((((_la - 248)) & ~0x3f) == 0 && ((1L << (_la - 248)) & -2308112406049976835L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -33030145L) != 0) || ((((_la - 376)) & ~0x3f) == 0 && ((1L << (_la - 376)) & -1L) != 0) || ((((_la - 440)) & ~0x3f) == 0 && ((1L << (_la - 440)) & 15032922111L) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & 72020040051130367L) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & -1L) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & 2405748621443071L) != 0) || ((((_la - 712)) & ~0x3f) == 0 && ((1L << (_la - 712)) & 1088454657L) != 0)) {
				{
				setState(6317);
				cteClauseSet();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XmlNamespacesClauseContext extends ParserRuleContext {
		public TerminalNode XMLNAMESPACES() { return getToken(SQLServerStatementParser.XMLNAMESPACES, 0); }
		public TerminalNode LP_() { return getToken(SQLServerStatementParser.LP_, 0); }
		public List<XmlNamespaceDeclarationItemContext> xmlNamespaceDeclarationItem() {
			return getRuleContexts(XmlNamespaceDeclarationItemContext.class);
		}
		public XmlNamespaceDeclarationItemContext xmlNamespaceDeclarationItem(int i) {
			return getRuleContext(XmlNamespaceDeclarationItemContext.class,i);
		}
		public TerminalNode RP_() { return getToken(SQLServerStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public XmlNamespacesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlNamespacesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterXmlNamespacesClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitXmlNamespacesClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitXmlNamespacesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlNamespacesClauseContext xmlNamespacesClause() throws RecognitionException {
		XmlNamespacesClauseContext _localctx = new XmlNamespacesClauseContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_xmlNamespacesClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6320);
			match(XMLNAMESPACES);
			setState(6321);
			match(LP_);
			setState(6322);
			xmlNamespaceDeclarationItem();
			setState(6327);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(6323);
				match(COMMA_);
				setState(6324);
				xmlNamespaceDeclarationItem();
				}
				}
				setState(6329);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6330);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XmlNamespaceDeclarationItemContext extends ParserRuleContext {
		public XmlNamespaceUriContext xmlNamespaceUri() {
			return getRuleContext(XmlNamespaceUriContext.class,0);
		}
		public TerminalNode AS() { return getToken(SQLServerStatementParser.AS, 0); }
		public XmlNamespacePrefixContext xmlNamespacePrefix() {
			return getRuleContext(XmlNamespacePrefixContext.class,0);
		}
		public XmlDefaultNamespaceDeclarationItemContext xmlDefaultNamespaceDeclarationItem() {
			return getRuleContext(XmlDefaultNamespaceDeclarationItemContext.class,0);
		}
		public XmlNamespaceDeclarationItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlNamespaceDeclarationItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterXmlNamespaceDeclarationItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitXmlNamespaceDeclarationItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitXmlNamespaceDeclarationItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlNamespaceDeclarationItemContext xmlNamespaceDeclarationItem() throws RecognitionException {
		XmlNamespaceDeclarationItemContext _localctx = new XmlNamespaceDeclarationItemContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_xmlNamespaceDeclarationItem);
		try {
			setState(6337);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_:
			case NCHAR_TEXT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6332);
				xmlNamespaceUri();
				setState(6333);
				match(AS);
				setState(6334);
				xmlNamespacePrefix();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6336);
				xmlDefaultNamespaceDeclarationItem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XmlNamespaceUriContext extends ParserRuleContext {
		public StringLiteralsContext stringLiterals() {
			return getRuleContext(StringLiteralsContext.class,0);
		}
		public XmlNamespaceUriContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlNamespaceUri; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterXmlNamespaceUri(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitXmlNamespaceUri(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitXmlNamespaceUri(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlNamespaceUriContext xmlNamespaceUri() throws RecognitionException {
		XmlNamespaceUriContext _localctx = new XmlNamespaceUriContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_xmlNamespaceUri);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6339);
			stringLiterals();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XmlNamespacePrefixContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public XmlNamespacePrefixContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlNamespacePrefix; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterXmlNamespacePrefix(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitXmlNamespacePrefix(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitXmlNamespacePrefix(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlNamespacePrefixContext xmlNamespacePrefix() throws RecognitionException {
		XmlNamespacePrefixContext _localctx = new XmlNamespacePrefixContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_xmlNamespacePrefix);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6341);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XmlDefaultNamespaceDeclarationItemContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(SQLServerStatementParser.DEFAULT, 0); }
		public XmlNamespaceUriContext xmlNamespaceUri() {
			return getRuleContext(XmlNamespaceUriContext.class,0);
		}
		public XmlDefaultNamespaceDeclarationItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlDefaultNamespaceDeclarationItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterXmlDefaultNamespaceDeclarationItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitXmlDefaultNamespaceDeclarationItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitXmlDefaultNamespaceDeclarationItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlDefaultNamespaceDeclarationItemContext xmlDefaultNamespaceDeclarationItem() throws RecognitionException {
		XmlDefaultNamespaceDeclarationItemContext _localctx = new XmlDefaultNamespaceDeclarationItemContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_xmlDefaultNamespaceDeclarationItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6343);
			match(DEFAULT);
			setState(6344);
			xmlNamespaceUri();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GrantContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(SQLServerStatementParser.GRANT, 0); }
		public GrantClassPrivilegesClauseContext grantClassPrivilegesClause() {
			return getRuleContext(GrantClassPrivilegesClauseContext.class,0);
		}
		public GrantClassTypePrivilegesClauseContext grantClassTypePrivilegesClause() {
			return getRuleContext(GrantClassTypePrivilegesClauseContext.class,0);
		}
		public GrantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterGrant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitGrant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitGrant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantContext grant() throws RecognitionException {
		GrantContext _localctx = new GrantContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_grant);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6346);
			match(GRANT);
			setState(6349);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,747,_ctx) ) {
			case 1:
				{
				setState(6347);
				grantClassPrivilegesClause();
				}
				break;
			case 2:
				{
				setState(6348);
				grantClassTypePrivilegesClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GrantClassPrivilegesClauseContext extends ParserRuleContext {
		public ClassPrivilegesContext classPrivileges() {
			return getRuleContext(ClassPrivilegesContext.class,0);
		}
		public TerminalNode TO() { return getToken(SQLServerStatementParser.TO, 0); }
		public List<PrincipalContext> principal() {
			return getRuleContexts(PrincipalContext.class);
		}
		public PrincipalContext principal(int i) {
			return getRuleContext(PrincipalContext.class,i);
		}
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public OnClassClauseContext onClassClause() {
			return getRuleContext(OnClassClauseContext.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public TerminalNode GRANT() { return getToken(SQLServerStatementParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(SQLServerStatementParser.OPTION, 0); }
		public TerminalNode AS() { return getToken(SQLServerStatementParser.AS, 0); }
		public GrantClassPrivilegesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantClassPrivilegesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterGrantClassPrivilegesClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitGrantClassPrivilegesClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitGrantClassPrivilegesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantClassPrivilegesClauseContext grantClassPrivilegesClause() throws RecognitionException {
		GrantClassPrivilegesClauseContext _localctx = new GrantClassPrivilegesClauseContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_grantClassPrivilegesClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6351);
			classPrivileges();
			setState(6354);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(6352);
				match(ON);
				setState(6353);
				onClassClause();
				}
			}

			setState(6356);
			match(TO);
			setState(6357);
			principal();
			setState(6362);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(6358);
				match(COMMA_);
				setState(6359);
				principal();
				}
				}
				setState(6364);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6368);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6365);
				match(WITH);
				setState(6366);
				match(GRANT);
				setState(6367);
				match(OPTION);
				}
			}

			setState(6372);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(6370);
				match(AS);
				setState(6371);
				principal();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GrantClassTypePrivilegesClauseContext extends ParserRuleContext {
		public ClassTypePrivilegesContext classTypePrivileges() {
			return getRuleContext(ClassTypePrivilegesContext.class,0);
		}
		public TerminalNode TO() { return getToken(SQLServerStatementParser.TO, 0); }
		public List<PrincipalContext> principal() {
			return getRuleContexts(PrincipalContext.class);
		}
		public PrincipalContext principal(int i) {
			return getRuleContext(PrincipalContext.class,i);
		}
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public OnClassTypeClauseContext onClassTypeClause() {
			return getRuleContext(OnClassTypeClauseContext.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public TerminalNode GRANT() { return getToken(SQLServerStatementParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(SQLServerStatementParser.OPTION, 0); }
		public GrantClassTypePrivilegesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantClassTypePrivilegesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterGrantClassTypePrivilegesClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitGrantClassTypePrivilegesClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitGrantClassTypePrivilegesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantClassTypePrivilegesClauseContext grantClassTypePrivilegesClause() throws RecognitionException {
		GrantClassTypePrivilegesClauseContext _localctx = new GrantClassTypePrivilegesClauseContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_grantClassTypePrivilegesClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6374);
			classTypePrivileges();
			setState(6377);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(6375);
				match(ON);
				setState(6376);
				onClassTypeClause();
				}
			}

			setState(6379);
			match(TO);
			setState(6380);
			principal();
			setState(6385);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(6381);
				match(COMMA_);
				setState(6382);
				principal();
				}
				}
				setState(6387);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6391);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6388);
				match(WITH);
				setState(6389);
				match(GRANT);
				setState(6390);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ClassPrivilegesContext extends ParserRuleContext {
		public List<PrivilegeTypeContext> privilegeType() {
			return getRuleContexts(PrivilegeTypeContext.class);
		}
		public PrivilegeTypeContext privilegeType(int i) {
			return getRuleContext(PrivilegeTypeContext.class,i);
		}
		public List<ColumnNamesContext> columnNames() {
			return getRuleContexts(ColumnNamesContext.class);
		}
		public ColumnNamesContext columnNames(int i) {
			return getRuleContext(ColumnNamesContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public ClassPrivilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_classPrivileges; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterClassPrivileges(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitClassPrivileges(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitClassPrivileges(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClassPrivilegesContext classPrivileges() throws RecognitionException {
		ClassPrivilegesContext _localctx = new ClassPrivilegesContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_classPrivileges);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6393);
			privilegeType();
			setState(6395);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(6394);
				columnNames();
				}
			}

			setState(6404);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(6397);
				match(COMMA_);
				setState(6398);
				privilegeType();
				setState(6400);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(6399);
					columnNames();
					}
				}

				}
				}
				setState(6406);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OnClassClauseContext extends ParserRuleContext {
		public SecurableContext securable() {
			return getRuleContext(SecurableContext.class,0);
		}
		public ClassItemContext classItem() {
			return getRuleContext(ClassItemContext.class,0);
		}
		public List<TerminalNode> COLON_() { return getTokens(SQLServerStatementParser.COLON_); }
		public TerminalNode COLON_(int i) {
			return getToken(SQLServerStatementParser.COLON_, i);
		}
		public OnClassClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onClassClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterOnClassClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitOnClassClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitOnClassClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnClassClauseContext onClassClause() throws RecognitionException {
		OnClassClauseContext _localctx = new OnClassClauseContext(_ctx, getState());
		enterRule(_localctx, 892, RULE_onClassClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6411);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,758,_ctx) ) {
			case 1:
				{
				setState(6407);
				classItem();
				setState(6408);
				match(COLON_);
				setState(6409);
				match(COLON_);
				}
				break;
			}
			setState(6413);
			securable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ClassTypePrivilegesContext extends ParserRuleContext {
		public List<PrivilegeTypeContext> privilegeType() {
			return getRuleContexts(PrivilegeTypeContext.class);
		}
		public PrivilegeTypeContext privilegeType(int i) {
			return getRuleContext(PrivilegeTypeContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public ClassTypePrivilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_classTypePrivileges; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterClassTypePrivileges(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitClassTypePrivileges(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitClassTypePrivileges(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClassTypePrivilegesContext classTypePrivileges() throws RecognitionException {
		ClassTypePrivilegesContext _localctx = new ClassTypePrivilegesContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_classTypePrivileges);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6415);
			privilegeType();
			setState(6420);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(6416);
				match(COMMA_);
				setState(6417);
				privilegeType();
				}
				}
				setState(6422);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OnClassTypeClauseContext extends ParserRuleContext {
		public SecurableContext securable() {
			return getRuleContext(SecurableContext.class,0);
		}
		public ClassTypeContext classType() {
			return getRuleContext(ClassTypeContext.class,0);
		}
		public List<TerminalNode> COLON_() { return getTokens(SQLServerStatementParser.COLON_); }
		public TerminalNode COLON_(int i) {
			return getToken(SQLServerStatementParser.COLON_, i);
		}
		public OnClassTypeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onClassTypeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterOnClassTypeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitOnClassTypeClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitOnClassTypeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnClassTypeClauseContext onClassTypeClause() throws RecognitionException {
		OnClassTypeClauseContext _localctx = new OnClassTypeClauseContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_onClassTypeClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6427);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,760,_ctx) ) {
			case 1:
				{
				setState(6423);
				classType();
				setState(6424);
				match(COLON_);
				setState(6425);
				match(COLON_);
				}
				break;
			}
			setState(6429);
			securable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SecurableContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(SQLServerStatementParser.DOT_, 0); }
		public SecurableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_securable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSecurable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSecurable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSecurable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SecurableContext securable() throws RecognitionException {
		SecurableContext _localctx = new SecurableContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_securable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6434);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,761,_ctx) ) {
			case 1:
				{
				setState(6431);
				owner();
				setState(6432);
				match(DOT_);
				}
				break;
			}
			setState(6436);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrincipalContext extends ParserRuleContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public PrincipalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_principal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterPrincipal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitPrincipal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitPrincipal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrincipalContext principal() throws RecognitionException {
		PrincipalContext _localctx = new PrincipalContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_principal);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6438);
			userName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RevokeContext extends ParserRuleContext {
		public TerminalNode REVOKE() { return getToken(SQLServerStatementParser.REVOKE, 0); }
		public RevokeClassPrivilegesClauseContext revokeClassPrivilegesClause() {
			return getRuleContext(RevokeClassPrivilegesClauseContext.class,0);
		}
		public RevokeClassTypePrivilegesClauseContext revokeClassTypePrivilegesClause() {
			return getRuleContext(RevokeClassTypePrivilegesClauseContext.class,0);
		}
		public OptionForClauseContext optionForClause() {
			return getRuleContext(OptionForClauseContext.class,0);
		}
		public RevokeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterRevoke(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitRevoke(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitRevoke(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeContext revoke() throws RecognitionException {
		RevokeContext _localctx = new RevokeContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_revoke);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6440);
			match(REVOKE);
			setState(6446);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,763,_ctx) ) {
			case 1:
				{
				setState(6442);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GRANT) {
					{
					setState(6441);
					optionForClause();
					}
				}

				setState(6444);
				revokeClassPrivilegesClause();
				}
				break;
			case 2:
				{
				setState(6445);
				revokeClassTypePrivilegesClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RevokeClassPrivilegesClauseContext extends ParserRuleContext {
		public ClassPrivilegesContext classPrivileges() {
			return getRuleContext(ClassPrivilegesContext.class,0);
		}
		public List<PrincipalContext> principal() {
			return getRuleContexts(PrincipalContext.class);
		}
		public PrincipalContext principal(int i) {
			return getRuleContext(PrincipalContext.class,i);
		}
		public TerminalNode TO() { return getToken(SQLServerStatementParser.TO, 0); }
		public TerminalNode FROM() { return getToken(SQLServerStatementParser.FROM, 0); }
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public OnClassClauseContext onClassClause() {
			return getRuleContext(OnClassClauseContext.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public TerminalNode CASCADE() { return getToken(SQLServerStatementParser.CASCADE, 0); }
		public TerminalNode AS() { return getToken(SQLServerStatementParser.AS, 0); }
		public RevokeClassPrivilegesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeClassPrivilegesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterRevokeClassPrivilegesClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitRevokeClassPrivilegesClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitRevokeClassPrivilegesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeClassPrivilegesClauseContext revokeClassPrivilegesClause() throws RecognitionException {
		RevokeClassPrivilegesClauseContext _localctx = new RevokeClassPrivilegesClauseContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_revokeClassPrivilegesClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6448);
			classPrivileges();
			setState(6451);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(6449);
				match(ON);
				setState(6450);
				onClassClause();
				}
			}

			setState(6453);
			_la = _input.LA(1);
			if ( !(_la==FROM || _la==TO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6454);
			principal();
			setState(6459);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(6455);
				match(COMMA_);
				setState(6456);
				principal();
				}
				}
				setState(6461);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6463);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE) {
				{
				setState(6462);
				match(CASCADE);
				}
			}

			setState(6467);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(6465);
				match(AS);
				setState(6466);
				principal();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RevokeClassTypePrivilegesClauseContext extends ParserRuleContext {
		public ClassTypePrivilegesContext classTypePrivileges() {
			return getRuleContext(ClassTypePrivilegesContext.class,0);
		}
		public List<PrincipalContext> principal() {
			return getRuleContexts(PrincipalContext.class);
		}
		public PrincipalContext principal(int i) {
			return getRuleContext(PrincipalContext.class,i);
		}
		public TerminalNode TO() { return getToken(SQLServerStatementParser.TO, 0); }
		public TerminalNode FROM() { return getToken(SQLServerStatementParser.FROM, 0); }
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public OnClassTypeClauseContext onClassTypeClause() {
			return getRuleContext(OnClassTypeClauseContext.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public TerminalNode CASCADE() { return getToken(SQLServerStatementParser.CASCADE, 0); }
		public RevokeClassTypePrivilegesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeClassTypePrivilegesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterRevokeClassTypePrivilegesClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitRevokeClassTypePrivilegesClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitRevokeClassTypePrivilegesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeClassTypePrivilegesClauseContext revokeClassTypePrivilegesClause() throws RecognitionException {
		RevokeClassTypePrivilegesClauseContext _localctx = new RevokeClassTypePrivilegesClauseContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_revokeClassTypePrivilegesClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6469);
			classTypePrivileges();
			setState(6472);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(6470);
				match(ON);
				setState(6471);
				onClassTypeClause();
				}
			}

			setState(6474);
			_la = _input.LA(1);
			if ( !(_la==FROM || _la==TO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6475);
			principal();
			setState(6480);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(6476);
				match(COMMA_);
				setState(6477);
				principal();
				}
				}
				setState(6482);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6484);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE) {
				{
				setState(6483);
				match(CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DenyContext extends ParserRuleContext {
		public TerminalNode DENY() { return getToken(SQLServerStatementParser.DENY, 0); }
		public DenyClassPrivilegesClauseContext denyClassPrivilegesClause() {
			return getRuleContext(DenyClassPrivilegesClauseContext.class,0);
		}
		public DenyClassTypePrivilegesClauseContext denyClassTypePrivilegesClause() {
			return getRuleContext(DenyClassTypePrivilegesClauseContext.class,0);
		}
		public DenyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deny; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDeny(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDeny(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDeny(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DenyContext deny() throws RecognitionException {
		DenyContext _localctx = new DenyContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_deny);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6486);
			match(DENY);
			setState(6489);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,771,_ctx) ) {
			case 1:
				{
				setState(6487);
				denyClassPrivilegesClause();
				}
				break;
			case 2:
				{
				setState(6488);
				denyClassTypePrivilegesClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DenyClassPrivilegesClauseContext extends ParserRuleContext {
		public ClassPrivilegesContext classPrivileges() {
			return getRuleContext(ClassPrivilegesContext.class,0);
		}
		public TerminalNode TO() { return getToken(SQLServerStatementParser.TO, 0); }
		public List<PrincipalContext> principal() {
			return getRuleContexts(PrincipalContext.class);
		}
		public PrincipalContext principal(int i) {
			return getRuleContext(PrincipalContext.class,i);
		}
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public OnClassClauseContext onClassClause() {
			return getRuleContext(OnClassClauseContext.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public TerminalNode CASCADE() { return getToken(SQLServerStatementParser.CASCADE, 0); }
		public TerminalNode AS() { return getToken(SQLServerStatementParser.AS, 0); }
		public DenyClassPrivilegesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_denyClassPrivilegesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDenyClassPrivilegesClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDenyClassPrivilegesClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDenyClassPrivilegesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DenyClassPrivilegesClauseContext denyClassPrivilegesClause() throws RecognitionException {
		DenyClassPrivilegesClauseContext _localctx = new DenyClassPrivilegesClauseContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_denyClassPrivilegesClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6491);
			classPrivileges();
			setState(6494);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(6492);
				match(ON);
				setState(6493);
				onClassClause();
				}
			}

			setState(6496);
			match(TO);
			setState(6497);
			principal();
			setState(6502);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(6498);
				match(COMMA_);
				setState(6499);
				principal();
				}
				}
				setState(6504);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6506);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE) {
				{
				setState(6505);
				match(CASCADE);
				}
			}

			setState(6510);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(6508);
				match(AS);
				setState(6509);
				principal();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DenyClassTypePrivilegesClauseContext extends ParserRuleContext {
		public ClassTypePrivilegesContext classTypePrivileges() {
			return getRuleContext(ClassTypePrivilegesContext.class,0);
		}
		public TerminalNode TO() { return getToken(SQLServerStatementParser.TO, 0); }
		public List<PrincipalContext> principal() {
			return getRuleContexts(PrincipalContext.class);
		}
		public PrincipalContext principal(int i) {
			return getRuleContext(PrincipalContext.class,i);
		}
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public OnClassTypeClauseContext onClassTypeClause() {
			return getRuleContext(OnClassTypeClauseContext.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public TerminalNode CASCADE() { return getToken(SQLServerStatementParser.CASCADE, 0); }
		public DenyClassTypePrivilegesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_denyClassTypePrivilegesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDenyClassTypePrivilegesClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDenyClassTypePrivilegesClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDenyClassTypePrivilegesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DenyClassTypePrivilegesClauseContext denyClassTypePrivilegesClause() throws RecognitionException {
		DenyClassTypePrivilegesClauseContext _localctx = new DenyClassTypePrivilegesClauseContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_denyClassTypePrivilegesClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6512);
			classTypePrivileges();
			setState(6515);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(6513);
				match(ON);
				setState(6514);
				onClassTypeClause();
				}
			}

			setState(6517);
			match(TO);
			setState(6518);
			principal();
			setState(6523);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(6519);
				match(COMMA_);
				setState(6520);
				principal();
				}
				}
				setState(6525);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6527);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE) {
				{
				setState(6526);
				match(CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptionForClauseContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(SQLServerStatementParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(SQLServerStatementParser.OPTION, 0); }
		public TerminalNode FOR() { return getToken(SQLServerStatementParser.FOR, 0); }
		public OptionForClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionForClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterOptionForClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitOptionForClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitOptionForClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptionForClauseContext optionForClause() throws RecognitionException {
		OptionForClauseContext _localctx = new OptionForClauseContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_optionForClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6529);
			match(GRANT);
			setState(6530);
			match(OPTION);
			setState(6531);
			match(FOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrivilegeTypeContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(SQLServerStatementParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(SQLServerStatementParser.PRIVILEGES, 0); }
		public AssemblyPermissionContext assemblyPermission() {
			return getRuleContext(AssemblyPermissionContext.class,0);
		}
		public AsymmetricKeyPermissionContext asymmetricKeyPermission() {
			return getRuleContext(AsymmetricKeyPermissionContext.class,0);
		}
		public AvailabilityGroupPermissionContext availabilityGroupPermission() {
			return getRuleContext(AvailabilityGroupPermissionContext.class,0);
		}
		public CertificatePermissionContext certificatePermission() {
			return getRuleContext(CertificatePermissionContext.class,0);
		}
		public ObjectPermissionContext objectPermission() {
			return getRuleContext(ObjectPermissionContext.class,0);
		}
		public SystemObjectPermissionContext systemObjectPermission() {
			return getRuleContext(SystemObjectPermissionContext.class,0);
		}
		public DatabasePermissionContext databasePermission() {
			return getRuleContext(DatabasePermissionContext.class,0);
		}
		public DatabasePrincipalPermissionContext databasePrincipalPermission() {
			return getRuleContext(DatabasePrincipalPermissionContext.class,0);
		}
		public DatabaseScopedCredentialPermissionContext databaseScopedCredentialPermission() {
			return getRuleContext(DatabaseScopedCredentialPermissionContext.class,0);
		}
		public EndpointPermissionContext endpointPermission() {
			return getRuleContext(EndpointPermissionContext.class,0);
		}
		public FullTextPermissionContext fullTextPermission() {
			return getRuleContext(FullTextPermissionContext.class,0);
		}
		public SchemaPermissionContext schemaPermission() {
			return getRuleContext(SchemaPermissionContext.class,0);
		}
		public SearchPropertyListPermissionContext searchPropertyListPermission() {
			return getRuleContext(SearchPropertyListPermissionContext.class,0);
		}
		public ServerPermissionContext serverPermission() {
			return getRuleContext(ServerPermissionContext.class,0);
		}
		public ServerPrincipalPermissionContext serverPrincipalPermission() {
			return getRuleContext(ServerPrincipalPermissionContext.class,0);
		}
		public ServiceBrokerPermissionContext serviceBrokerPermission() {
			return getRuleContext(ServiceBrokerPermissionContext.class,0);
		}
		public SymmetricKeyPermissionContext symmetricKeyPermission() {
			return getRuleContext(SymmetricKeyPermissionContext.class,0);
		}
		public TypePermissionContext typePermission() {
			return getRuleContext(TypePermissionContext.class,0);
		}
		public XmlSchemaCollectionPermissionContext xmlSchemaCollectionPermission() {
			return getRuleContext(XmlSchemaCollectionPermissionContext.class,0);
		}
		public PrivilegeTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterPrivilegeType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitPrivilegeType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitPrivilegeType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeTypeContext privilegeType() throws RecognitionException {
		PrivilegeTypeContext _localctx = new PrivilegeTypeContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_privilegeType);
		int _la;
		try {
			setState(6556);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,780,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6533);
				match(ALL);
				setState(6535);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(6534);
					match(PRIVILEGES);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6537);
				assemblyPermission();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6538);
				asymmetricKeyPermission();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6539);
				availabilityGroupPermission();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6540);
				certificatePermission();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6541);
				objectPermission();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6542);
				systemObjectPermission();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6543);
				databasePermission();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6544);
				databasePrincipalPermission();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6545);
				databaseScopedCredentialPermission();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6546);
				endpointPermission();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6547);
				fullTextPermission();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6548);
				schemaPermission();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6549);
				searchPropertyListPermission();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6550);
				serverPermission();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6551);
				serverPrincipalPermission();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6552);
				serviceBrokerPermission();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(6553);
				symmetricKeyPermission();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(6554);
				typePermission();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(6555);
				xmlSchemaCollectionPermission();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ObjectPermissionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode CONTROL() { return getToken(SQLServerStatementParser.CONTROL, 0); }
		public TerminalNode DELETE() { return getToken(SQLServerStatementParser.DELETE, 0); }
		public TerminalNode EXECUTE() { return getToken(SQLServerStatementParser.EXECUTE, 0); }
		public TerminalNode INSERT() { return getToken(SQLServerStatementParser.INSERT, 0); }
		public TerminalNode RECEIVE() { return getToken(SQLServerStatementParser.RECEIVE, 0); }
		public TerminalNode REFERENCES() { return getToken(SQLServerStatementParser.REFERENCES, 0); }
		public TerminalNode SELECT() { return getToken(SQLServerStatementParser.SELECT, 0); }
		public TerminalNode TAKE() { return getToken(SQLServerStatementParser.TAKE, 0); }
		public TerminalNode OWNERSHIP() { return getToken(SQLServerStatementParser.OWNERSHIP, 0); }
		public TerminalNode UPDATE() { return getToken(SQLServerStatementParser.UPDATE, 0); }
		public TerminalNode VIEW() { return getToken(SQLServerStatementParser.VIEW, 0); }
		public TerminalNode CHANGE() { return getToken(SQLServerStatementParser.CHANGE, 0); }
		public TerminalNode TRACKING() { return getToken(SQLServerStatementParser.TRACKING, 0); }
		public TerminalNode DEFINITION() { return getToken(SQLServerStatementParser.DEFINITION, 0); }
		public ObjectPermissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_objectPermission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterObjectPermission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitObjectPermission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitObjectPermission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ObjectPermissionContext objectPermission() throws RecognitionException {
		ObjectPermissionContext _localctx = new ObjectPermissionContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_objectPermission);
		try {
			setState(6574);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,781,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6558);
				match(ALTER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6559);
				match(CONTROL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6560);
				match(DELETE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6561);
				match(EXECUTE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6562);
				match(INSERT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6563);
				match(RECEIVE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6564);
				match(REFERENCES);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6565);
				match(SELECT);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6566);
				match(TAKE);
				setState(6567);
				match(OWNERSHIP);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6568);
				match(UPDATE);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6569);
				match(VIEW);
				setState(6570);
				match(CHANGE);
				setState(6571);
				match(TRACKING);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6572);
				match(VIEW);
				setState(6573);
				match(DEFINITION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ServerPermissionContext extends ParserRuleContext {
		public TerminalNode ADMINISTER() { return getToken(SQLServerStatementParser.ADMINISTER, 0); }
		public TerminalNode BULK() { return getToken(SQLServerStatementParser.BULK, 0); }
		public TerminalNode OPERATIONS() { return getToken(SQLServerStatementParser.OPERATIONS, 0); }
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode RESOURCES() { return getToken(SQLServerStatementParser.RESOURCES, 0); }
		public TerminalNode SETTINGS() { return getToken(SQLServerStatementParser.SETTINGS, 0); }
		public TerminalNode TRACE() { return getToken(SQLServerStatementParser.TRACE, 0); }
		public TerminalNode SERVER() { return getToken(SQLServerStatementParser.SERVER, 0); }
		public TerminalNode STATE() { return getToken(SQLServerStatementParser.STATE, 0); }
		public TerminalNode ANY() { return getToken(SQLServerStatementParser.ANY, 0); }
		public TerminalNode AVAILABILITY() { return getToken(SQLServerStatementParser.AVAILABILITY, 0); }
		public TerminalNode GROUP() { return getToken(SQLServerStatementParser.GROUP, 0); }
		public TerminalNode CONNECTION() { return getToken(SQLServerStatementParser.CONNECTION, 0); }
		public TerminalNode CREDENTIAL() { return getToken(SQLServerStatementParser.CREDENTIAL, 0); }
		public TerminalNode DATABASE() { return getToken(SQLServerStatementParser.DATABASE, 0); }
		public TerminalNode ENDPOINT() { return getToken(SQLServerStatementParser.ENDPOINT, 0); }
		public TerminalNode EVENT() { return getToken(SQLServerStatementParser.EVENT, 0); }
		public TerminalNode NOTIFICATION() { return getToken(SQLServerStatementParser.NOTIFICATION, 0); }
		public TerminalNode SESSION() { return getToken(SQLServerStatementParser.SESSION, 0); }
		public TerminalNode LINKED() { return getToken(SQLServerStatementParser.LINKED, 0); }
		public TerminalNode LOGIN() { return getToken(SQLServerStatementParser.LOGIN, 0); }
		public TerminalNode AUDIT() { return getToken(SQLServerStatementParser.AUDIT, 0); }
		public TerminalNode ROLE() { return getToken(SQLServerStatementParser.ROLE, 0); }
		public TerminalNode AUTHENTICATE() { return getToken(SQLServerStatementParser.AUTHENTICATE, 0); }
		public TerminalNode CONNECT() { return getToken(SQLServerStatementParser.CONNECT, 0); }
		public TerminalNode SQL() { return getToken(SQLServerStatementParser.SQL, 0); }
		public TerminalNode CONTROL() { return getToken(SQLServerStatementParser.CONTROL, 0); }
		public TerminalNode CREATE() { return getToken(SQLServerStatementParser.CREATE, 0); }
		public TerminalNode DDL() { return getToken(SQLServerStatementParser.DDL, 0); }
		public TerminalNode EXTERNAL() { return getToken(SQLServerStatementParser.EXTERNAL, 0); }
		public TerminalNode ACCESS() { return getToken(SQLServerStatementParser.ACCESS, 0); }
		public TerminalNode ASSEMBLY() { return getToken(SQLServerStatementParser.ASSEMBLY, 0); }
		public TerminalNode IMPERSONATE() { return getToken(SQLServerStatementParser.IMPERSONATE, 0); }
		public TerminalNode SELECT() { return getToken(SQLServerStatementParser.SELECT, 0); }
		public TerminalNode ALL() { return getToken(SQLServerStatementParser.ALL, 0); }
		public TerminalNode USER() { return getToken(SQLServerStatementParser.USER, 0); }
		public TerminalNode SECURABLES() { return getToken(SQLServerStatementParser.SECURABLES, 0); }
		public TerminalNode SHUTDOWN() { return getToken(SQLServerStatementParser.SHUTDOWN, 0); }
		public TerminalNode UNSAFE() { return getToken(SQLServerStatementParser.UNSAFE, 0); }
		public TerminalNode VIEW() { return getToken(SQLServerStatementParser.VIEW, 0); }
		public TerminalNode DEFINITION() { return getToken(SQLServerStatementParser.DEFINITION, 0); }
		public ServerPermissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverPermission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterServerPermission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitServerPermission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitServerPermission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServerPermissionContext serverPermission() throws RecognitionException {
		ServerPermissionContext _localctx = new ServerPermissionContext(_ctx, getState());
		enterRule(_localctx, 920, RULE_serverPermission);
		int _la;
		try {
			setState(6653);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,785,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6576);
				match(ADMINISTER);
				setState(6577);
				match(BULK);
				setState(6578);
				match(OPERATIONS);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6579);
				match(ALTER);
				setState(6585);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case RESOURCES:
					{
					setState(6580);
					match(RESOURCES);
					}
					break;
				case SETTINGS:
					{
					setState(6581);
					match(SETTINGS);
					}
					break;
				case TRACE:
					{
					setState(6582);
					match(TRACE);
					}
					break;
				case SERVER:
					{
					setState(6583);
					match(SERVER);
					setState(6584);
					match(STATE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6587);
				match(ALTER);
				setState(6588);
				match(ANY);
				setState(6606);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,783,_ctx) ) {
				case 1:
					{
					setState(6589);
					match(AVAILABILITY);
					setState(6590);
					match(GROUP);
					}
					break;
				case 2:
					{
					setState(6591);
					match(CONNECTION);
					}
					break;
				case 3:
					{
					setState(6592);
					match(CREDENTIAL);
					}
					break;
				case 4:
					{
					setState(6593);
					match(DATABASE);
					}
					break;
				case 5:
					{
					setState(6594);
					match(ENDPOINT);
					}
					break;
				case 6:
					{
					setState(6595);
					match(EVENT);
					setState(6596);
					match(NOTIFICATION);
					}
					break;
				case 7:
					{
					setState(6597);
					match(EVENT);
					setState(6598);
					match(SESSION);
					}
					break;
				case 8:
					{
					setState(6599);
					match(LINKED);
					setState(6600);
					match(SERVER);
					}
					break;
				case 9:
					{
					setState(6601);
					match(LOGIN);
					}
					break;
				case 10:
					{
					setState(6602);
					match(SERVER);
					setState(6603);
					match(AUDIT);
					}
					break;
				case 11:
					{
					setState(6604);
					match(SERVER);
					setState(6605);
					match(ROLE);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6608);
				match(AUTHENTICATE);
				setState(6609);
				match(SERVER);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6610);
				match(CONNECT);
				setState(6611);
				match(ANY);
				setState(6612);
				match(DATABASE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6613);
				match(CONNECT);
				setState(6614);
				match(SQL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6615);
				match(CONTROL);
				setState(6616);
				match(SERVER);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6617);
				match(CREATE);
				setState(6618);
				match(ANY);
				setState(6619);
				match(DATABASE);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6620);
				match(CREATE);
				setState(6632);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AVAILABILITY:
					{
					setState(6621);
					match(AVAILABILITY);
					setState(6622);
					match(GROUP);
					}
					break;
				case DDL:
					{
					setState(6623);
					match(DDL);
					setState(6624);
					match(EVENT);
					setState(6625);
					match(NOTIFICATION);
					}
					break;
				case ENDPOINT:
					{
					setState(6626);
					match(ENDPOINT);
					}
					break;
				case SERVER:
					{
					setState(6627);
					match(SERVER);
					setState(6628);
					match(ROLE);
					}
					break;
				case TRACE:
					{
					setState(6629);
					match(TRACE);
					setState(6630);
					match(EVENT);
					setState(6631);
					match(NOTIFICATION);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6634);
				match(EXTERNAL);
				setState(6635);
				match(ACCESS);
				setState(6636);
				match(ASSEMBLY);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6637);
				match(IMPERSONATE);
				setState(6638);
				match(ANY);
				setState(6639);
				match(LOGIN);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6640);
				match(SELECT);
				setState(6641);
				match(ALL);
				setState(6642);
				match(USER);
				setState(6643);
				match(SECURABLES);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6644);
				match(SHUTDOWN);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6645);
				match(UNSAFE);
				setState(6646);
				match(ASSEMBLY);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6647);
				match(VIEW);
				setState(6648);
				match(ANY);
				setState(6649);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==DEFINITION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6650);
				match(VIEW);
				setState(6651);
				match(SERVER);
				setState(6652);
				match(STATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ServerPrincipalPermissionContext extends ParserRuleContext {
		public TerminalNode CONTROL() { return getToken(SQLServerStatementParser.CONTROL, 0); }
		public TerminalNode SERVER() { return getToken(SQLServerStatementParser.SERVER, 0); }
		public TerminalNode IMPERSONATE() { return getToken(SQLServerStatementParser.IMPERSONATE, 0); }
		public TerminalNode VIEW() { return getToken(SQLServerStatementParser.VIEW, 0); }
		public TerminalNode DEFINITION() { return getToken(SQLServerStatementParser.DEFINITION, 0); }
		public TerminalNode ANY() { return getToken(SQLServerStatementParser.ANY, 0); }
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode LOGIN() { return getToken(SQLServerStatementParser.LOGIN, 0); }
		public TerminalNode ROLE() { return getToken(SQLServerStatementParser.ROLE, 0); }
		public ServerPrincipalPermissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverPrincipalPermission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterServerPrincipalPermission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitServerPrincipalPermission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitServerPrincipalPermission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServerPrincipalPermissionContext serverPrincipalPermission() throws RecognitionException {
		ServerPrincipalPermissionContext _localctx = new ServerPrincipalPermissionContext(_ctx, getState());
		enterRule(_localctx, 922, RULE_serverPrincipalPermission);
		int _la;
		try {
			setState(6673);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,789,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6655);
				match(CONTROL);
				setState(6657);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SERVER) {
					{
					setState(6656);
					match(SERVER);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6659);
				match(IMPERSONATE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6660);
				match(VIEW);
				setState(6662);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(6661);
					match(ANY);
					}
				}

				setState(6664);
				match(DEFINITION);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6665);
				match(ALTER);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6666);
				match(ALTER);
				setState(6667);
				match(ANY);
				setState(6671);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LOGIN:
					{
					setState(6668);
					match(LOGIN);
					}
					break;
				case SERVER:
					{
					setState(6669);
					match(SERVER);
					setState(6670);
					match(ROLE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DatabasePermissionContext extends ParserRuleContext {
		public TerminalNode ADMINISTER() { return getToken(SQLServerStatementParser.ADMINISTER, 0); }
		public TerminalNode DATABASE() { return getToken(SQLServerStatementParser.DATABASE, 0); }
		public TerminalNode BULK() { return getToken(SQLServerStatementParser.BULK, 0); }
		public TerminalNode OPERATIONS() { return getToken(SQLServerStatementParser.OPERATIONS, 0); }
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode TRACE() { return getToken(SQLServerStatementParser.TRACE, 0); }
		public TerminalNode ANY() { return getToken(SQLServerStatementParser.ANY, 0); }
		public TerminalNode APPLICATION() { return getToken(SQLServerStatementParser.APPLICATION, 0); }
		public TerminalNode ROLE() { return getToken(SQLServerStatementParser.ROLE, 0); }
		public TerminalNode ASSEMBLY() { return getToken(SQLServerStatementParser.ASSEMBLY, 0); }
		public TerminalNode KEY() { return getToken(SQLServerStatementParser.KEY, 0); }
		public TerminalNode CERTIFICATE() { return getToken(SQLServerStatementParser.CERTIFICATE, 0); }
		public TerminalNode CONNECTION() { return getToken(SQLServerStatementParser.CONNECTION, 0); }
		public TerminalNode COLUMN() { return getToken(SQLServerStatementParser.COLUMN, 0); }
		public TerminalNode MASTER() { return getToken(SQLServerStatementParser.MASTER, 0); }
		public TerminalNode DEFINITION() { return getToken(SQLServerStatementParser.DEFINITION, 0); }
		public TerminalNode CONTRACT() { return getToken(SQLServerStatementParser.CONTRACT, 0); }
		public TerminalNode DATASPACE() { return getToken(SQLServerStatementParser.DATASPACE, 0); }
		public TerminalNode EVENT() { return getToken(SQLServerStatementParser.EVENT, 0); }
		public TerminalNode EXTERNAL() { return getToken(SQLServerStatementParser.EXTERNAL, 0); }
		public TerminalNode FULLTEXT() { return getToken(SQLServerStatementParser.FULLTEXT, 0); }
		public TerminalNode CATALOG() { return getToken(SQLServerStatementParser.CATALOG, 0); }
		public TerminalNode MASK() { return getToken(SQLServerStatementParser.MASK, 0); }
		public TerminalNode MESSAGE() { return getToken(SQLServerStatementParser.MESSAGE, 0); }
		public TerminalNode TYPE() { return getToken(SQLServerStatementParser.TYPE, 0); }
		public TerminalNode REMOTE() { return getToken(SQLServerStatementParser.REMOTE, 0); }
		public TerminalNode SERVICE() { return getToken(SQLServerStatementParser.SERVICE, 0); }
		public TerminalNode BINDING() { return getToken(SQLServerStatementParser.BINDING, 0); }
		public TerminalNode ROUTE() { return getToken(SQLServerStatementParser.ROUTE, 0); }
		public TerminalNode SERVER() { return getToken(SQLServerStatementParser.SERVER, 0); }
		public TerminalNode AUDIT() { return getToken(SQLServerStatementParser.AUDIT, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLServerStatementParser.SCHEMA, 0); }
		public TerminalNode SECURITY() { return getToken(SQLServerStatementParser.SECURITY, 0); }
		public TerminalNode POLICY() { return getToken(SQLServerStatementParser.POLICY, 0); }
		public TerminalNode USER() { return getToken(SQLServerStatementParser.USER, 0); }
		public TerminalNode NOTIFICATION() { return getToken(SQLServerStatementParser.NOTIFICATION, 0); }
		public TerminalNode SESSION() { return getToken(SQLServerStatementParser.SESSION, 0); }
		public TerminalNode SYMMETRIC() { return getToken(SQLServerStatementParser.SYMMETRIC, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(SQLServerStatementParser.ASYMMETRIC, 0); }
		public TerminalNode ENCRYPTION() { return getToken(SQLServerStatementParser.ENCRYPTION, 0); }
		public TerminalNode DATA() { return getToken(SQLServerStatementParser.DATA, 0); }
		public TerminalNode SOURCE() { return getToken(SQLServerStatementParser.SOURCE, 0); }
		public TerminalNode FILE() { return getToken(SQLServerStatementParser.FILE, 0); }
		public TerminalNode FORMAT() { return getToken(SQLServerStatementParser.FORMAT, 0); }
		public TerminalNode LIBRARY() { return getToken(SQLServerStatementParser.LIBRARY, 0); }
		public TerminalNode DDL() { return getToken(SQLServerStatementParser.DDL, 0); }
		public TerminalNode TRIGGER() { return getToken(SQLServerStatementParser.TRIGGER, 0); }
		public TerminalNode SCOPED() { return getToken(SQLServerStatementParser.SCOPED, 0); }
		public TerminalNode CONFIGURATION() { return getToken(SQLServerStatementParser.CONFIGURATION, 0); }
		public TerminalNode AUTHENTICATE() { return getToken(SQLServerStatementParser.AUTHENTICATE, 0); }
		public TerminalNode BACKUP() { return getToken(SQLServerStatementParser.BACKUP, 0); }
		public TerminalNode LOG() { return getToken(SQLServerStatementParser.LOG, 0); }
		public TerminalNode CHECKPOINT() { return getToken(SQLServerStatementParser.CHECKPOINT, 0); }
		public TerminalNode CONNECT() { return getToken(SQLServerStatementParser.CONNECT, 0); }
		public TerminalNode REPLICATION() { return getToken(SQLServerStatementParser.REPLICATION, 0); }
		public TerminalNode CONTROL() { return getToken(SQLServerStatementParser.CONTROL, 0); }
		public TerminalNode CREATE() { return getToken(SQLServerStatementParser.CREATE, 0); }
		public TerminalNode AGGREGATE() { return getToken(SQLServerStatementParser.AGGREGATE, 0); }
		public TerminalNode DEFAULT() { return getToken(SQLServerStatementParser.DEFAULT, 0); }
		public TerminalNode FUNCTION() { return getToken(SQLServerStatementParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(SQLServerStatementParser.PROCEDURE, 0); }
		public TerminalNode QUEUE() { return getToken(SQLServerStatementParser.QUEUE, 0); }
		public TerminalNode RULE() { return getToken(SQLServerStatementParser.RULE, 0); }
		public TerminalNode SYNONYM() { return getToken(SQLServerStatementParser.SYNONYM, 0); }
		public TerminalNode TABLE() { return getToken(SQLServerStatementParser.TABLE, 0); }
		public TerminalNode VIEW() { return getToken(SQLServerStatementParser.VIEW, 0); }
		public TerminalNode XML() { return getToken(SQLServerStatementParser.XML, 0); }
		public TerminalNode COLLECTION() { return getToken(SQLServerStatementParser.COLLECTION, 0); }
		public TerminalNode DELETE() { return getToken(SQLServerStatementParser.DELETE, 0); }
		public TerminalNode EXECUTE() { return getToken(SQLServerStatementParser.EXECUTE, 0); }
		public TerminalNode SCRIPT() { return getToken(SQLServerStatementParser.SCRIPT, 0); }
		public TerminalNode INSERT() { return getToken(SQLServerStatementParser.INSERT, 0); }
		public TerminalNode KILL() { return getToken(SQLServerStatementParser.KILL, 0); }
		public TerminalNode REFERENCES() { return getToken(SQLServerStatementParser.REFERENCES, 0); }
		public TerminalNode SELECT() { return getToken(SQLServerStatementParser.SELECT, 0); }
		public TerminalNode SHOWPLAN() { return getToken(SQLServerStatementParser.SHOWPLAN, 0); }
		public TerminalNode SUBSCRIBE() { return getToken(SQLServerStatementParser.SUBSCRIBE, 0); }
		public TerminalNode QUERY() { return getToken(SQLServerStatementParser.QUERY, 0); }
		public TerminalNode NOTIFICATIONS() { return getToken(SQLServerStatementParser.NOTIFICATIONS, 0); }
		public TerminalNode TAKE() { return getToken(SQLServerStatementParser.TAKE, 0); }
		public TerminalNode OWNERSHIP() { return getToken(SQLServerStatementParser.OWNERSHIP, 0); }
		public TerminalNode UNMASK() { return getToken(SQLServerStatementParser.UNMASK, 0); }
		public TerminalNode UPDATE() { return getToken(SQLServerStatementParser.UPDATE, 0); }
		public TerminalNode STATE() { return getToken(SQLServerStatementParser.STATE, 0); }
		public DatabasePermissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_databasePermission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDatabasePermission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDatabasePermission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDatabasePermission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatabasePermissionContext databasePermission() throws RecognitionException {
		DatabasePermissionContext _localctx = new DatabasePermissionContext(_ctx, getState());
		enterRule(_localctx, 924, RULE_databasePermission);
		int _la;
		try {
			setState(6842);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,802,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6675);
				match(ADMINISTER);
				setState(6676);
				match(DATABASE);
				setState(6677);
				match(BULK);
				setState(6678);
				match(OPERATIONS);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6679);
				match(ALTER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6680);
				match(ALTER);
				setState(6681);
				match(TRACE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6682);
				match(ALTER);
				setState(6683);
				match(ANY);
				setState(6741);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,793,_ctx) ) {
				case 1:
					{
					setState(6684);
					match(APPLICATION);
					setState(6685);
					match(ROLE);
					}
					break;
				case 2:
					{
					setState(6686);
					match(ASSEMBLY);
					}
					break;
				case 3:
					{
					setState(6691);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case SYMMETRIC:
						{
						setState(6687);
						match(SYMMETRIC);
						}
						break;
					case ASYMMETRIC:
						{
						setState(6688);
						match(ASYMMETRIC);
						}
						break;
					case COLUMN:
						{
						setState(6689);
						match(COLUMN);
						setState(6690);
						match(ENCRYPTION);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(6693);
					match(KEY);
					}
					break;
				case 4:
					{
					setState(6694);
					match(CERTIFICATE);
					}
					break;
				case 5:
					{
					setState(6695);
					match(CONNECTION);
					}
					break;
				case 6:
					{
					setState(6696);
					match(COLUMN);
					setState(6697);
					match(MASTER);
					setState(6698);
					match(KEY);
					setState(6699);
					match(DEFINITION);
					}
					break;
				case 7:
					{
					setState(6700);
					match(CONTRACT);
					}
					break;
				case 8:
					{
					setState(6701);
					match(DATABASE);
					setState(6711);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,791,_ctx) ) {
					case 1:
						{
						setState(6702);
						match(AUDIT);
						}
						break;
					case 2:
						{
						setState(6703);
						match(DDL);
						setState(6704);
						match(TRIGGER);
						}
						break;
					case 3:
						{
						setState(6705);
						match(EVENT);
						setState(6706);
						match(NOTIFICATION);
						}
						break;
					case 4:
						{
						setState(6707);
						match(EVENT);
						setState(6708);
						match(SESSION);
						}
						break;
					case 5:
						{
						setState(6709);
						match(SCOPED);
						setState(6710);
						match(CONFIGURATION);
						}
						break;
					}
					}
					break;
				case 9:
					{
					setState(6713);
					match(DATASPACE);
					}
					break;
				case 10:
					{
					setState(6714);
					match(EVENT);
					setState(6715);
					_la = _input.LA(1);
					if ( !(_la==SESSION || _la==NOTIFICATION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case 11:
					{
					setState(6716);
					match(EXTERNAL);
					setState(6722);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case DATA:
						{
						setState(6717);
						match(DATA);
						setState(6718);
						match(SOURCE);
						}
						break;
					case FILE:
						{
						setState(6719);
						match(FILE);
						setState(6720);
						match(FORMAT);
						}
						break;
					case LIBRARY:
						{
						setState(6721);
						match(LIBRARY);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 12:
					{
					setState(6724);
					match(FULLTEXT);
					setState(6725);
					match(CATALOG);
					}
					break;
				case 13:
					{
					setState(6726);
					match(MASK);
					}
					break;
				case 14:
					{
					setState(6727);
					match(MESSAGE);
					setState(6728);
					match(TYPE);
					}
					break;
				case 15:
					{
					setState(6729);
					match(REMOTE);
					setState(6730);
					match(SERVICE);
					setState(6731);
					match(BINDING);
					}
					break;
				case 16:
					{
					setState(6732);
					match(ROLE);
					}
					break;
				case 17:
					{
					setState(6733);
					match(ROUTE);
					}
					break;
				case 18:
					{
					setState(6734);
					match(SERVER);
					setState(6735);
					match(AUDIT);
					}
					break;
				case 19:
					{
					setState(6736);
					match(SCHEMA);
					}
					break;
				case 20:
					{
					setState(6737);
					match(SECURITY);
					setState(6738);
					match(POLICY);
					}
					break;
				case 21:
					{
					setState(6739);
					match(SERVICE);
					}
					break;
				case 22:
					{
					setState(6740);
					match(USER);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6743);
				match(AUTHENTICATE);
				setState(6745);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SERVER) {
					{
					setState(6744);
					match(SERVER);
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6747);
				match(BACKUP);
				setState(6748);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==LOG) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6749);
				match(CHECKPOINT);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6750);
				match(CONNECT);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6751);
				match(CONNECT);
				setState(6753);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REPLICATION) {
					{
					setState(6752);
					match(REPLICATION);
					}
				}

				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6755);
				match(CONTROL);
				setState(6757);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SERVER) {
					{
					setState(6756);
					match(SERVER);
					}
				}

				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6759);
				match(CREATE);
				setState(6796);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,798,_ctx) ) {
				case 1:
					{
					setState(6760);
					match(AGGREGATE);
					}
					break;
				case 2:
					{
					setState(6761);
					match(ASSEMBLY);
					}
					break;
				case 3:
					{
					setState(6762);
					_la = _input.LA(1);
					if ( !(_la==SYMMETRIC || _la==ASYMMETRIC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(6763);
					match(KEY);
					}
					break;
				case 4:
					{
					setState(6764);
					match(CERTIFICATE);
					}
					break;
				case 5:
					{
					setState(6765);
					match(CONTRACT);
					}
					break;
				case 6:
					{
					setState(6766);
					match(DATABASE);
					}
					break;
				case 7:
					{
					setState(6768);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DATABASE) {
						{
						setState(6767);
						match(DATABASE);
						}
					}

					setState(6770);
					match(DDL);
					setState(6771);
					match(EVENT);
					setState(6772);
					match(NOTIFICATION);
					}
					break;
				case 8:
					{
					setState(6773);
					match(DEFAULT);
					}
					break;
				case 9:
					{
					setState(6774);
					match(FULLTEXT);
					setState(6775);
					match(CATALOG);
					}
					break;
				case 10:
					{
					setState(6776);
					match(FUNCTION);
					}
					break;
				case 11:
					{
					setState(6777);
					match(MESSAGE);
					setState(6778);
					match(TYPE);
					}
					break;
				case 12:
					{
					setState(6779);
					match(PROCEDURE);
					}
					break;
				case 13:
					{
					setState(6780);
					match(QUEUE);
					}
					break;
				case 14:
					{
					setState(6781);
					match(REMOTE);
					setState(6782);
					match(SERVICE);
					setState(6783);
					match(BINDING);
					}
					break;
				case 15:
					{
					setState(6784);
					match(ROLE);
					}
					break;
				case 16:
					{
					setState(6785);
					match(ROUTE);
					}
					break;
				case 17:
					{
					setState(6786);
					match(RULE);
					}
					break;
				case 18:
					{
					setState(6787);
					match(SCHEMA);
					}
					break;
				case 19:
					{
					setState(6788);
					match(SERVICE);
					}
					break;
				case 20:
					{
					setState(6789);
					match(SYNONYM);
					}
					break;
				case 21:
					{
					setState(6790);
					match(TABLE);
					}
					break;
				case 22:
					{
					setState(6791);
					match(TYPE);
					}
					break;
				case 23:
					{
					setState(6792);
					match(VIEW);
					}
					break;
				case 24:
					{
					setState(6793);
					match(XML);
					setState(6794);
					match(SCHEMA);
					setState(6795);
					match(COLLECTION);
					}
					break;
				}
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6798);
				match(DELETE);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6799);
				match(EXECUTE);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6800);
				match(EXECUTE);
				setState(6802);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(6801);
					match(ANY);
					}
				}

				setState(6804);
				match(EXTERNAL);
				setState(6805);
				match(SCRIPT);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6806);
				match(INSERT);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6807);
				match(KILL);
				setState(6808);
				match(DATABASE);
				setState(6809);
				match(CONNECTION);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6810);
				match(REFERENCES);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(6811);
				match(SELECT);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(6812);
				match(SHOWPLAN);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(6813);
				match(SUBSCRIBE);
				setState(6814);
				match(QUERY);
				setState(6815);
				match(NOTIFICATIONS);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(6816);
				match(TAKE);
				setState(6817);
				match(OWNERSHIP);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(6818);
				match(UNMASK);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(6819);
				match(UPDATE);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(6820);
				match(VIEW);
				setState(6821);
				match(ANY);
				setState(6822);
				match(COLUMN);
				setState(6823);
				_la = _input.LA(1);
				if ( !(_la==ENCRYPTION || _la==MASTER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6824);
				match(KEY);
				setState(6825);
				match(DEFINITION);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(6826);
				match(CREATE);
				setState(6827);
				match(ANY);
				setState(6831);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DATABASE:
					{
					setState(6828);
					match(DATABASE);
					}
					break;
				case EXTERNAL:
					{
					setState(6829);
					match(EXTERNAL);
					setState(6830);
					match(LIBRARY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(6833);
				match(VIEW);
				setState(6834);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SERVER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6835);
				match(STATE);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(6836);
				match(VIEW);
				setState(6838);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(6837);
					match(ANY);
					}
				}

				setState(6840);
				match(DEFINITION);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DatabasePrincipalPermissionContext extends ParserRuleContext {
		public DatabaseUserPermissionContext databaseUserPermission() {
			return getRuleContext(DatabaseUserPermissionContext.class,0);
		}
		public DatabaseRolePermissionContext databaseRolePermission() {
			return getRuleContext(DatabaseRolePermissionContext.class,0);
		}
		public ApplicationRolePermissionContext applicationRolePermission() {
			return getRuleContext(ApplicationRolePermissionContext.class,0);
		}
		public DatabasePrincipalPermissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_databasePrincipalPermission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDatabasePrincipalPermission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDatabasePrincipalPermission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDatabasePrincipalPermission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatabasePrincipalPermissionContext databasePrincipalPermission() throws RecognitionException {
		DatabasePrincipalPermissionContext _localctx = new DatabasePrincipalPermissionContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_databasePrincipalPermission);
		try {
			setState(6847);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,803,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6844);
				databaseUserPermission();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6845);
				databaseRolePermission();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6846);
				applicationRolePermission();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DatabaseUserPermissionContext extends ParserRuleContext {
		public TerminalNode CONTROL() { return getToken(SQLServerStatementParser.CONTROL, 0); }
		public TerminalNode IMPERSONATE() { return getToken(SQLServerStatementParser.IMPERSONATE, 0); }
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(SQLServerStatementParser.VIEW, 0); }
		public TerminalNode DEFINITION() { return getToken(SQLServerStatementParser.DEFINITION, 0); }
		public TerminalNode ANY() { return getToken(SQLServerStatementParser.ANY, 0); }
		public TerminalNode USER() { return getToken(SQLServerStatementParser.USER, 0); }
		public DatabaseUserPermissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_databaseUserPermission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDatabaseUserPermission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDatabaseUserPermission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDatabaseUserPermission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatabaseUserPermissionContext databaseUserPermission() throws RecognitionException {
		DatabaseUserPermissionContext _localctx = new DatabaseUserPermissionContext(_ctx, getState());
		enterRule(_localctx, 928, RULE_databaseUserPermission);
		try {
			setState(6857);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,804,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6849);
				match(CONTROL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6850);
				match(IMPERSONATE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6851);
				match(ALTER);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6852);
				match(VIEW);
				setState(6853);
				match(DEFINITION);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6854);
				match(ALTER);
				setState(6855);
				match(ANY);
				setState(6856);
				match(USER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DatabaseRolePermissionContext extends ParserRuleContext {
		public TerminalNode CONTROL() { return getToken(SQLServerStatementParser.CONTROL, 0); }
		public TerminalNode TAKE() { return getToken(SQLServerStatementParser.TAKE, 0); }
		public TerminalNode OWNERSHIP() { return getToken(SQLServerStatementParser.OWNERSHIP, 0); }
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(SQLServerStatementParser.VIEW, 0); }
		public TerminalNode DEFINITION() { return getToken(SQLServerStatementParser.DEFINITION, 0); }
		public TerminalNode ANY() { return getToken(SQLServerStatementParser.ANY, 0); }
		public TerminalNode ROLE() { return getToken(SQLServerStatementParser.ROLE, 0); }
		public DatabaseRolePermissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_databaseRolePermission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDatabaseRolePermission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDatabaseRolePermission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDatabaseRolePermission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatabaseRolePermissionContext databaseRolePermission() throws RecognitionException {
		DatabaseRolePermissionContext _localctx = new DatabaseRolePermissionContext(_ctx, getState());
		enterRule(_localctx, 930, RULE_databaseRolePermission);
		try {
			setState(6868);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,805,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6859);
				match(CONTROL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6860);
				match(TAKE);
				setState(6861);
				match(OWNERSHIP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6862);
				match(ALTER);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6863);
				match(VIEW);
				setState(6864);
				match(DEFINITION);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6865);
				match(ALTER);
				setState(6866);
				match(ANY);
				setState(6867);
				match(ROLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ApplicationRolePermissionContext extends ParserRuleContext {
		public TerminalNode CONTROL() { return getToken(SQLServerStatementParser.CONTROL, 0); }
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(SQLServerStatementParser.VIEW, 0); }
		public TerminalNode DEFINITION() { return getToken(SQLServerStatementParser.DEFINITION, 0); }
		public TerminalNode ANY() { return getToken(SQLServerStatementParser.ANY, 0); }
		public TerminalNode APPLICATION() { return getToken(SQLServerStatementParser.APPLICATION, 0); }
		public TerminalNode ROLE() { return getToken(SQLServerStatementParser.ROLE, 0); }
		public ApplicationRolePermissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_applicationRolePermission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterApplicationRolePermission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitApplicationRolePermission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitApplicationRolePermission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ApplicationRolePermissionContext applicationRolePermission() throws RecognitionException {
		ApplicationRolePermissionContext _localctx = new ApplicationRolePermissionContext(_ctx, getState());
		enterRule(_localctx, 932, RULE_applicationRolePermission);
		try {
			setState(6878);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,806,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6870);
				match(CONTROL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6871);
				match(ALTER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6872);
				match(VIEW);
				setState(6873);
				match(DEFINITION);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6874);
				match(ALTER);
				setState(6875);
				match(ANY);
				setState(6876);
				match(APPLICATION);
				setState(6877);
				match(ROLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DatabaseScopedCredentialPermissionContext extends ParserRuleContext {
		public TerminalNode CONTROL() { return getToken(SQLServerStatementParser.CONTROL, 0); }
		public TerminalNode TAKE() { return getToken(SQLServerStatementParser.TAKE, 0); }
		public TerminalNode OWNERSHIP() { return getToken(SQLServerStatementParser.OWNERSHIP, 0); }
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode REFERENCES() { return getToken(SQLServerStatementParser.REFERENCES, 0); }
		public TerminalNode VIEW() { return getToken(SQLServerStatementParser.VIEW, 0); }
		public TerminalNode DEFINITION() { return getToken(SQLServerStatementParser.DEFINITION, 0); }
		public DatabaseScopedCredentialPermissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_databaseScopedCredentialPermission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDatabaseScopedCredentialPermission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDatabaseScopedCredentialPermission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDatabaseScopedCredentialPermission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatabaseScopedCredentialPermissionContext databaseScopedCredentialPermission() throws RecognitionException {
		DatabaseScopedCredentialPermissionContext _localctx = new DatabaseScopedCredentialPermissionContext(_ctx, getState());
		enterRule(_localctx, 934, RULE_databaseScopedCredentialPermission);
		try {
			setState(6887);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONTROL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6880);
				match(CONTROL);
				}
				break;
			case TAKE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6881);
				match(TAKE);
				setState(6882);
				match(OWNERSHIP);
				}
				break;
			case ALTER:
				enterOuterAlt(_localctx, 3);
				{
				setState(6883);
				match(ALTER);
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 4);
				{
				setState(6884);
				match(REFERENCES);
				}
				break;
			case VIEW:
				enterOuterAlt(_localctx, 5);
				{
				setState(6885);
				match(VIEW);
				setState(6886);
				match(DEFINITION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SchemaPermissionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode CONTROL() { return getToken(SQLServerStatementParser.CONTROL, 0); }
		public TerminalNode CREATE() { return getToken(SQLServerStatementParser.CREATE, 0); }
		public TerminalNode SEQUENCE() { return getToken(SQLServerStatementParser.SEQUENCE, 0); }
		public TerminalNode DELETE() { return getToken(SQLServerStatementParser.DELETE, 0); }
		public TerminalNode EXECUTE() { return getToken(SQLServerStatementParser.EXECUTE, 0); }
		public TerminalNode INSERT() { return getToken(SQLServerStatementParser.INSERT, 0); }
		public TerminalNode REFERENCES() { return getToken(SQLServerStatementParser.REFERENCES, 0); }
		public TerminalNode SELECT() { return getToken(SQLServerStatementParser.SELECT, 0); }
		public TerminalNode TAKE() { return getToken(SQLServerStatementParser.TAKE, 0); }
		public TerminalNode OWNERSHIP() { return getToken(SQLServerStatementParser.OWNERSHIP, 0); }
		public TerminalNode UPDATE() { return getToken(SQLServerStatementParser.UPDATE, 0); }
		public TerminalNode VIEW() { return getToken(SQLServerStatementParser.VIEW, 0); }
		public TerminalNode CHANGE() { return getToken(SQLServerStatementParser.CHANGE, 0); }
		public TerminalNode TRACKING() { return getToken(SQLServerStatementParser.TRACKING, 0); }
		public TerminalNode DEFINITION() { return getToken(SQLServerStatementParser.DEFINITION, 0); }
		public TerminalNode ANY() { return getToken(SQLServerStatementParser.ANY, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLServerStatementParser.SCHEMA, 0); }
		public SchemaPermissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaPermission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSchemaPermission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSchemaPermission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSchemaPermission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaPermissionContext schemaPermission() throws RecognitionException {
		SchemaPermissionContext _localctx = new SchemaPermissionContext(_ctx, getState());
		enterRule(_localctx, 936, RULE_schemaPermission);
		try {
			setState(6909);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,808,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6889);
				match(ALTER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6890);
				match(CONTROL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6891);
				match(CREATE);
				setState(6892);
				match(SEQUENCE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6893);
				match(DELETE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6894);
				match(EXECUTE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6895);
				match(INSERT);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6896);
				match(REFERENCES);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6897);
				match(SELECT);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6898);
				match(TAKE);
				setState(6899);
				match(OWNERSHIP);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6900);
				match(UPDATE);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6901);
				match(VIEW);
				setState(6902);
				match(CHANGE);
				setState(6903);
				match(TRACKING);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6904);
				match(VIEW);
				setState(6905);
				match(DEFINITION);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6906);
				match(ALTER);
				setState(6907);
				match(ANY);
				setState(6908);
				match(SCHEMA);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SearchPropertyListPermissionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode CONTROL() { return getToken(SQLServerStatementParser.CONTROL, 0); }
		public TerminalNode REFERENCES() { return getToken(SQLServerStatementParser.REFERENCES, 0); }
		public TerminalNode TAKE() { return getToken(SQLServerStatementParser.TAKE, 0); }
		public TerminalNode OWNERSHIP() { return getToken(SQLServerStatementParser.OWNERSHIP, 0); }
		public TerminalNode VIEW() { return getToken(SQLServerStatementParser.VIEW, 0); }
		public TerminalNode DEFINITION() { return getToken(SQLServerStatementParser.DEFINITION, 0); }
		public TerminalNode ANY() { return getToken(SQLServerStatementParser.ANY, 0); }
		public TerminalNode FULLTEXT() { return getToken(SQLServerStatementParser.FULLTEXT, 0); }
		public TerminalNode CATALOG() { return getToken(SQLServerStatementParser.CATALOG, 0); }
		public SearchPropertyListPermissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searchPropertyListPermission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSearchPropertyListPermission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSearchPropertyListPermission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSearchPropertyListPermission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SearchPropertyListPermissionContext searchPropertyListPermission() throws RecognitionException {
		SearchPropertyListPermissionContext _localctx = new SearchPropertyListPermissionContext(_ctx, getState());
		enterRule(_localctx, 938, RULE_searchPropertyListPermission);
		try {
			setState(6922);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,809,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6911);
				match(ALTER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6912);
				match(CONTROL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6913);
				match(REFERENCES);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6914);
				match(TAKE);
				setState(6915);
				match(OWNERSHIP);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6916);
				match(VIEW);
				setState(6917);
				match(DEFINITION);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6918);
				match(ALTER);
				setState(6919);
				match(ANY);
				setState(6920);
				match(FULLTEXT);
				setState(6921);
				match(CATALOG);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ServiceBrokerPermissionContext extends ParserRuleContext {
		public ServiceBrokerContractsPermissionContext serviceBrokerContractsPermission() {
			return getRuleContext(ServiceBrokerContractsPermissionContext.class,0);
		}
		public ServiceBrokerMessageTypesPermissionContext serviceBrokerMessageTypesPermission() {
			return getRuleContext(ServiceBrokerMessageTypesPermissionContext.class,0);
		}
		public ServiceBrokerRemoteServiceBindingsPermissionContext serviceBrokerRemoteServiceBindingsPermission() {
			return getRuleContext(ServiceBrokerRemoteServiceBindingsPermissionContext.class,0);
		}
		public ServiceBrokerRoutesPermissionContext serviceBrokerRoutesPermission() {
			return getRuleContext(ServiceBrokerRoutesPermissionContext.class,0);
		}
		public ServiceBrokerServicesPermissionContext serviceBrokerServicesPermission() {
			return getRuleContext(ServiceBrokerServicesPermissionContext.class,0);
		}
		public ServiceBrokerPermissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serviceBrokerPermission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterServiceBrokerPermission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitServiceBrokerPermission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitServiceBrokerPermission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServiceBrokerPermissionContext serviceBrokerPermission() throws RecognitionException {
		ServiceBrokerPermissionContext _localctx = new ServiceBrokerPermissionContext(_ctx, getState());
		enterRule(_localctx, 940, RULE_serviceBrokerPermission);
		try {
			setState(6929);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,810,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6924);
				serviceBrokerContractsPermission();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6925);
				serviceBrokerMessageTypesPermission();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6926);
				serviceBrokerRemoteServiceBindingsPermission();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6927);
				serviceBrokerRoutesPermission();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6928);
				serviceBrokerServicesPermission();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ServiceBrokerContractsPermissionContext extends ParserRuleContext {
		public TerminalNode CONTROL() { return getToken(SQLServerStatementParser.CONTROL, 0); }
		public TerminalNode TAKE() { return getToken(SQLServerStatementParser.TAKE, 0); }
		public TerminalNode OWNERSHIP() { return getToken(SQLServerStatementParser.OWNERSHIP, 0); }
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode REFERENCES() { return getToken(SQLServerStatementParser.REFERENCES, 0); }
		public TerminalNode VIEW() { return getToken(SQLServerStatementParser.VIEW, 0); }
		public TerminalNode DEFINITION() { return getToken(SQLServerStatementParser.DEFINITION, 0); }
		public TerminalNode ANY() { return getToken(SQLServerStatementParser.ANY, 0); }
		public TerminalNode CONTRACT() { return getToken(SQLServerStatementParser.CONTRACT, 0); }
		public ServiceBrokerContractsPermissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serviceBrokerContractsPermission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterServiceBrokerContractsPermission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitServiceBrokerContractsPermission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitServiceBrokerContractsPermission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServiceBrokerContractsPermissionContext serviceBrokerContractsPermission() throws RecognitionException {
		ServiceBrokerContractsPermissionContext _localctx = new ServiceBrokerContractsPermissionContext(_ctx, getState());
		enterRule(_localctx, 942, RULE_serviceBrokerContractsPermission);
		try {
			setState(6941);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,811,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6931);
				match(CONTROL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6932);
				match(TAKE);
				setState(6933);
				match(OWNERSHIP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6934);
				match(ALTER);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6935);
				match(REFERENCES);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6936);
				match(VIEW);
				setState(6937);
				match(DEFINITION);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6938);
				match(ALTER);
				setState(6939);
				match(ANY);
				setState(6940);
				match(CONTRACT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ServiceBrokerMessageTypesPermissionContext extends ParserRuleContext {
		public TerminalNode CONTROL() { return getToken(SQLServerStatementParser.CONTROL, 0); }
		public TerminalNode TAKE() { return getToken(SQLServerStatementParser.TAKE, 0); }
		public TerminalNode OWNERSHIP() { return getToken(SQLServerStatementParser.OWNERSHIP, 0); }
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode REFERENCES() { return getToken(SQLServerStatementParser.REFERENCES, 0); }
		public TerminalNode VIEW() { return getToken(SQLServerStatementParser.VIEW, 0); }
		public TerminalNode DEFINITION() { return getToken(SQLServerStatementParser.DEFINITION, 0); }
		public TerminalNode ANY() { return getToken(SQLServerStatementParser.ANY, 0); }
		public TerminalNode MESSAGE() { return getToken(SQLServerStatementParser.MESSAGE, 0); }
		public TerminalNode TYPE() { return getToken(SQLServerStatementParser.TYPE, 0); }
		public ServiceBrokerMessageTypesPermissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serviceBrokerMessageTypesPermission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterServiceBrokerMessageTypesPermission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitServiceBrokerMessageTypesPermission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitServiceBrokerMessageTypesPermission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServiceBrokerMessageTypesPermissionContext serviceBrokerMessageTypesPermission() throws RecognitionException {
		ServiceBrokerMessageTypesPermissionContext _localctx = new ServiceBrokerMessageTypesPermissionContext(_ctx, getState());
		enterRule(_localctx, 944, RULE_serviceBrokerMessageTypesPermission);
		try {
			setState(6954);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,812,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6943);
				match(CONTROL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6944);
				match(TAKE);
				setState(6945);
				match(OWNERSHIP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6946);
				match(ALTER);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6947);
				match(REFERENCES);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6948);
				match(VIEW);
				setState(6949);
				match(DEFINITION);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6950);
				match(ALTER);
				setState(6951);
				match(ANY);
				setState(6952);
				match(MESSAGE);
				setState(6953);
				match(TYPE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ServiceBrokerRemoteServiceBindingsPermissionContext extends ParserRuleContext {
		public TerminalNode CONTROL() { return getToken(SQLServerStatementParser.CONTROL, 0); }
		public TerminalNode TAKE() { return getToken(SQLServerStatementParser.TAKE, 0); }
		public TerminalNode OWNERSHIP() { return getToken(SQLServerStatementParser.OWNERSHIP, 0); }
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(SQLServerStatementParser.VIEW, 0); }
		public TerminalNode DEFINITION() { return getToken(SQLServerStatementParser.DEFINITION, 0); }
		public TerminalNode ANY() { return getToken(SQLServerStatementParser.ANY, 0); }
		public TerminalNode REMOTE() { return getToken(SQLServerStatementParser.REMOTE, 0); }
		public TerminalNode SERVICE() { return getToken(SQLServerStatementParser.SERVICE, 0); }
		public TerminalNode BINDING() { return getToken(SQLServerStatementParser.BINDING, 0); }
		public ServiceBrokerRemoteServiceBindingsPermissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serviceBrokerRemoteServiceBindingsPermission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterServiceBrokerRemoteServiceBindingsPermission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitServiceBrokerRemoteServiceBindingsPermission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitServiceBrokerRemoteServiceBindingsPermission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServiceBrokerRemoteServiceBindingsPermissionContext serviceBrokerRemoteServiceBindingsPermission() throws RecognitionException {
		ServiceBrokerRemoteServiceBindingsPermissionContext _localctx = new ServiceBrokerRemoteServiceBindingsPermissionContext(_ctx, getState());
		enterRule(_localctx, 946, RULE_serviceBrokerRemoteServiceBindingsPermission);
		try {
			setState(6967);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,813,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6956);
				match(CONTROL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6957);
				match(TAKE);
				setState(6958);
				match(OWNERSHIP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6959);
				match(ALTER);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6960);
				match(VIEW);
				setState(6961);
				match(DEFINITION);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6962);
				match(ALTER);
				setState(6963);
				match(ANY);
				setState(6964);
				match(REMOTE);
				setState(6965);
				match(SERVICE);
				setState(6966);
				match(BINDING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ServiceBrokerRoutesPermissionContext extends ParserRuleContext {
		public TerminalNode CONTROL() { return getToken(SQLServerStatementParser.CONTROL, 0); }
		public TerminalNode TAKE() { return getToken(SQLServerStatementParser.TAKE, 0); }
		public TerminalNode OWNERSHIP() { return getToken(SQLServerStatementParser.OWNERSHIP, 0); }
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(SQLServerStatementParser.VIEW, 0); }
		public TerminalNode DEFINITION() { return getToken(SQLServerStatementParser.DEFINITION, 0); }
		public TerminalNode ANY() { return getToken(SQLServerStatementParser.ANY, 0); }
		public TerminalNode ROUTE() { return getToken(SQLServerStatementParser.ROUTE, 0); }
		public ServiceBrokerRoutesPermissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serviceBrokerRoutesPermission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterServiceBrokerRoutesPermission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitServiceBrokerRoutesPermission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitServiceBrokerRoutesPermission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServiceBrokerRoutesPermissionContext serviceBrokerRoutesPermission() throws RecognitionException {
		ServiceBrokerRoutesPermissionContext _localctx = new ServiceBrokerRoutesPermissionContext(_ctx, getState());
		enterRule(_localctx, 948, RULE_serviceBrokerRoutesPermission);
		try {
			setState(6978);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,814,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6969);
				match(CONTROL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6970);
				match(TAKE);
				setState(6971);
				match(OWNERSHIP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6972);
				match(ALTER);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6973);
				match(VIEW);
				setState(6974);
				match(DEFINITION);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6975);
				match(ALTER);
				setState(6976);
				match(ANY);
				setState(6977);
				match(ROUTE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ServiceBrokerServicesPermissionContext extends ParserRuleContext {
		public TerminalNode CONTROL() { return getToken(SQLServerStatementParser.CONTROL, 0); }
		public TerminalNode TAKE() { return getToken(SQLServerStatementParser.TAKE, 0); }
		public TerminalNode OWNERSHIP() { return getToken(SQLServerStatementParser.OWNERSHIP, 0); }
		public TerminalNode SEND() { return getToken(SQLServerStatementParser.SEND, 0); }
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(SQLServerStatementParser.VIEW, 0); }
		public TerminalNode DEFINITION() { return getToken(SQLServerStatementParser.DEFINITION, 0); }
		public TerminalNode ANY() { return getToken(SQLServerStatementParser.ANY, 0); }
		public TerminalNode SERVICE() { return getToken(SQLServerStatementParser.SERVICE, 0); }
		public ServiceBrokerServicesPermissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serviceBrokerServicesPermission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterServiceBrokerServicesPermission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitServiceBrokerServicesPermission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitServiceBrokerServicesPermission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServiceBrokerServicesPermissionContext serviceBrokerServicesPermission() throws RecognitionException {
		ServiceBrokerServicesPermissionContext _localctx = new ServiceBrokerServicesPermissionContext(_ctx, getState());
		enterRule(_localctx, 950, RULE_serviceBrokerServicesPermission);
		try {
			setState(6990);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,815,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6980);
				match(CONTROL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6981);
				match(TAKE);
				setState(6982);
				match(OWNERSHIP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6983);
				match(SEND);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6984);
				match(ALTER);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6985);
				match(VIEW);
				setState(6986);
				match(DEFINITION);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6987);
				match(ALTER);
				setState(6988);
				match(ANY);
				setState(6989);
				match(SERVICE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EndpointPermissionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode CONNECT() { return getToken(SQLServerStatementParser.CONNECT, 0); }
		public TerminalNode CONTROL() { return getToken(SQLServerStatementParser.CONTROL, 0); }
		public TerminalNode SERVER() { return getToken(SQLServerStatementParser.SERVER, 0); }
		public TerminalNode TAKE() { return getToken(SQLServerStatementParser.TAKE, 0); }
		public TerminalNode OWNERSHIP() { return getToken(SQLServerStatementParser.OWNERSHIP, 0); }
		public TerminalNode VIEW() { return getToken(SQLServerStatementParser.VIEW, 0); }
		public TerminalNode DEFINITION() { return getToken(SQLServerStatementParser.DEFINITION, 0); }
		public TerminalNode ANY() { return getToken(SQLServerStatementParser.ANY, 0); }
		public TerminalNode ENDPOINT() { return getToken(SQLServerStatementParser.ENDPOINT, 0); }
		public EndpointPermissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_endpointPermission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterEndpointPermission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitEndpointPermission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitEndpointPermission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EndpointPermissionContext endpointPermission() throws RecognitionException {
		EndpointPermissionContext _localctx = new EndpointPermissionContext(_ctx, getState());
		enterRule(_localctx, 952, RULE_endpointPermission);
		int _la;
		try {
			setState(7008);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,818,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6992);
				match(ALTER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6993);
				match(CONNECT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6994);
				match(CONTROL);
				setState(6996);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SERVER) {
					{
					setState(6995);
					match(SERVER);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6998);
				match(TAKE);
				setState(6999);
				match(OWNERSHIP);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7000);
				match(VIEW);
				setState(7002);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(7001);
					match(ANY);
					}
				}

				setState(7004);
				match(DEFINITION);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7005);
				match(ALTER);
				setState(7006);
				match(ANY);
				setState(7007);
				match(ENDPOINT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CertificatePermissionContext extends ParserRuleContext {
		public TerminalNode CONTROL() { return getToken(SQLServerStatementParser.CONTROL, 0); }
		public TerminalNode TAKE() { return getToken(SQLServerStatementParser.TAKE, 0); }
		public TerminalNode OWNERSHIP() { return getToken(SQLServerStatementParser.OWNERSHIP, 0); }
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode REFERENCES() { return getToken(SQLServerStatementParser.REFERENCES, 0); }
		public TerminalNode VIEW() { return getToken(SQLServerStatementParser.VIEW, 0); }
		public TerminalNode DEFINITION() { return getToken(SQLServerStatementParser.DEFINITION, 0); }
		public TerminalNode ANY() { return getToken(SQLServerStatementParser.ANY, 0); }
		public TerminalNode CERTIFICATE() { return getToken(SQLServerStatementParser.CERTIFICATE, 0); }
		public CertificatePermissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_certificatePermission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCertificatePermission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCertificatePermission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCertificatePermission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CertificatePermissionContext certificatePermission() throws RecognitionException {
		CertificatePermissionContext _localctx = new CertificatePermissionContext(_ctx, getState());
		enterRule(_localctx, 954, RULE_certificatePermission);
		try {
			setState(7020);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,819,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7010);
				match(CONTROL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7011);
				match(TAKE);
				setState(7012);
				match(OWNERSHIP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7013);
				match(ALTER);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7014);
				match(REFERENCES);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7015);
				match(VIEW);
				setState(7016);
				match(DEFINITION);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7017);
				match(ALTER);
				setState(7018);
				match(ANY);
				setState(7019);
				match(CERTIFICATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SymmetricKeyPermissionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode CONTROL() { return getToken(SQLServerStatementParser.CONTROL, 0); }
		public TerminalNode REFERENCES() { return getToken(SQLServerStatementParser.REFERENCES, 0); }
		public TerminalNode TAKE() { return getToken(SQLServerStatementParser.TAKE, 0); }
		public TerminalNode OWNERSHIP() { return getToken(SQLServerStatementParser.OWNERSHIP, 0); }
		public TerminalNode VIEW() { return getToken(SQLServerStatementParser.VIEW, 0); }
		public TerminalNode DEFINITION() { return getToken(SQLServerStatementParser.DEFINITION, 0); }
		public TerminalNode ANY() { return getToken(SQLServerStatementParser.ANY, 0); }
		public TerminalNode SYMMETRIC() { return getToken(SQLServerStatementParser.SYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(SQLServerStatementParser.KEY, 0); }
		public SymmetricKeyPermissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_symmetricKeyPermission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSymmetricKeyPermission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSymmetricKeyPermission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSymmetricKeyPermission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SymmetricKeyPermissionContext symmetricKeyPermission() throws RecognitionException {
		SymmetricKeyPermissionContext _localctx = new SymmetricKeyPermissionContext(_ctx, getState());
		enterRule(_localctx, 956, RULE_symmetricKeyPermission);
		try {
			setState(7033);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,820,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7022);
				match(ALTER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7023);
				match(CONTROL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7024);
				match(REFERENCES);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7025);
				match(TAKE);
				setState(7026);
				match(OWNERSHIP);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7027);
				match(VIEW);
				setState(7028);
				match(DEFINITION);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7029);
				match(ALTER);
				setState(7030);
				match(ANY);
				setState(7031);
				match(SYMMETRIC);
				setState(7032);
				match(KEY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AsymmetricKeyPermissionContext extends ParserRuleContext {
		public TerminalNode CONTROL() { return getToken(SQLServerStatementParser.CONTROL, 0); }
		public TerminalNode TAKE() { return getToken(SQLServerStatementParser.TAKE, 0); }
		public TerminalNode OWNERSHIP() { return getToken(SQLServerStatementParser.OWNERSHIP, 0); }
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode REFERENCES() { return getToken(SQLServerStatementParser.REFERENCES, 0); }
		public TerminalNode VIEW() { return getToken(SQLServerStatementParser.VIEW, 0); }
		public TerminalNode DEFINITION() { return getToken(SQLServerStatementParser.DEFINITION, 0); }
		public TerminalNode ANY() { return getToken(SQLServerStatementParser.ANY, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(SQLServerStatementParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(SQLServerStatementParser.KEY, 0); }
		public AsymmetricKeyPermissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asymmetricKeyPermission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAsymmetricKeyPermission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAsymmetricKeyPermission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAsymmetricKeyPermission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsymmetricKeyPermissionContext asymmetricKeyPermission() throws RecognitionException {
		AsymmetricKeyPermissionContext _localctx = new AsymmetricKeyPermissionContext(_ctx, getState());
		enterRule(_localctx, 958, RULE_asymmetricKeyPermission);
		try {
			setState(7046);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,821,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7035);
				match(CONTROL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7036);
				match(TAKE);
				setState(7037);
				match(OWNERSHIP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7038);
				match(ALTER);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7039);
				match(REFERENCES);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7040);
				match(VIEW);
				setState(7041);
				match(DEFINITION);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7042);
				match(ALTER);
				setState(7043);
				match(ANY);
				setState(7044);
				match(ASYMMETRIC);
				setState(7045);
				match(KEY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AssemblyPermissionContext extends ParserRuleContext {
		public TerminalNode CONTROL() { return getToken(SQLServerStatementParser.CONTROL, 0); }
		public TerminalNode TAKE() { return getToken(SQLServerStatementParser.TAKE, 0); }
		public TerminalNode OWNERSHIP() { return getToken(SQLServerStatementParser.OWNERSHIP, 0); }
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode REFERENCES() { return getToken(SQLServerStatementParser.REFERENCES, 0); }
		public TerminalNode VIEW() { return getToken(SQLServerStatementParser.VIEW, 0); }
		public TerminalNode DEFINITION() { return getToken(SQLServerStatementParser.DEFINITION, 0); }
		public TerminalNode ANY() { return getToken(SQLServerStatementParser.ANY, 0); }
		public TerminalNode ASSEMBLY() { return getToken(SQLServerStatementParser.ASSEMBLY, 0); }
		public AssemblyPermissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assemblyPermission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAssemblyPermission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAssemblyPermission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAssemblyPermission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssemblyPermissionContext assemblyPermission() throws RecognitionException {
		AssemblyPermissionContext _localctx = new AssemblyPermissionContext(_ctx, getState());
		enterRule(_localctx, 960, RULE_assemblyPermission);
		try {
			setState(7058);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,822,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7048);
				match(CONTROL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7049);
				match(TAKE);
				setState(7050);
				match(OWNERSHIP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7051);
				match(ALTER);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7052);
				match(REFERENCES);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7053);
				match(VIEW);
				setState(7054);
				match(DEFINITION);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7055);
				match(ALTER);
				setState(7056);
				match(ANY);
				setState(7057);
				match(ASSEMBLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AvailabilityGroupPermissionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode CONNECT() { return getToken(SQLServerStatementParser.CONNECT, 0); }
		public TerminalNode CONTROL() { return getToken(SQLServerStatementParser.CONTROL, 0); }
		public TerminalNode SERVER() { return getToken(SQLServerStatementParser.SERVER, 0); }
		public TerminalNode TAKE() { return getToken(SQLServerStatementParser.TAKE, 0); }
		public TerminalNode OWNERSHIP() { return getToken(SQLServerStatementParser.OWNERSHIP, 0); }
		public TerminalNode VIEW() { return getToken(SQLServerStatementParser.VIEW, 0); }
		public TerminalNode DEFINITION() { return getToken(SQLServerStatementParser.DEFINITION, 0); }
		public TerminalNode ANY() { return getToken(SQLServerStatementParser.ANY, 0); }
		public TerminalNode AVAILABILITY() { return getToken(SQLServerStatementParser.AVAILABILITY, 0); }
		public TerminalNode GROUP() { return getToken(SQLServerStatementParser.GROUP, 0); }
		public AvailabilityGroupPermissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_availabilityGroupPermission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAvailabilityGroupPermission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAvailabilityGroupPermission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAvailabilityGroupPermission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AvailabilityGroupPermissionContext availabilityGroupPermission() throws RecognitionException {
		AvailabilityGroupPermissionContext _localctx = new AvailabilityGroupPermissionContext(_ctx, getState());
		enterRule(_localctx, 962, RULE_availabilityGroupPermission);
		int _la;
		try {
			setState(7077);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,825,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7060);
				match(ALTER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7061);
				match(CONNECT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7062);
				match(CONTROL);
				setState(7064);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SERVER) {
					{
					setState(7063);
					match(SERVER);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7066);
				match(TAKE);
				setState(7067);
				match(OWNERSHIP);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7068);
				match(VIEW);
				setState(7070);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(7069);
					match(ANY);
					}
				}

				setState(7072);
				match(DEFINITION);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7073);
				match(ALTER);
				setState(7074);
				match(ANY);
				setState(7075);
				match(AVAILABILITY);
				setState(7076);
				match(GROUP);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FullTextPermissionContext extends ParserRuleContext {
		public FullTextCatalogPermissionContext fullTextCatalogPermission() {
			return getRuleContext(FullTextCatalogPermissionContext.class,0);
		}
		public FullTextStoplistPermissionContext fullTextStoplistPermission() {
			return getRuleContext(FullTextStoplistPermissionContext.class,0);
		}
		public FullTextPermissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullTextPermission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterFullTextPermission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitFullTextPermission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitFullTextPermission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullTextPermissionContext fullTextPermission() throws RecognitionException {
		FullTextPermissionContext _localctx = new FullTextPermissionContext(_ctx, getState());
		enterRule(_localctx, 964, RULE_fullTextPermission);
		try {
			setState(7081);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,826,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7079);
				fullTextCatalogPermission();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7080);
				fullTextStoplistPermission();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FullTextCatalogPermissionContext extends ParserRuleContext {
		public TerminalNode CONTROL() { return getToken(SQLServerStatementParser.CONTROL, 0); }
		public TerminalNode TAKE() { return getToken(SQLServerStatementParser.TAKE, 0); }
		public TerminalNode OWNERSHIP() { return getToken(SQLServerStatementParser.OWNERSHIP, 0); }
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode REFERENCES() { return getToken(SQLServerStatementParser.REFERENCES, 0); }
		public TerminalNode VIEW() { return getToken(SQLServerStatementParser.VIEW, 0); }
		public TerminalNode DEFINITION() { return getToken(SQLServerStatementParser.DEFINITION, 0); }
		public TerminalNode ANY() { return getToken(SQLServerStatementParser.ANY, 0); }
		public TerminalNode FULLTEXT() { return getToken(SQLServerStatementParser.FULLTEXT, 0); }
		public TerminalNode CATALOG() { return getToken(SQLServerStatementParser.CATALOG, 0); }
		public FullTextCatalogPermissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullTextCatalogPermission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterFullTextCatalogPermission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitFullTextCatalogPermission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitFullTextCatalogPermission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullTextCatalogPermissionContext fullTextCatalogPermission() throws RecognitionException {
		FullTextCatalogPermissionContext _localctx = new FullTextCatalogPermissionContext(_ctx, getState());
		enterRule(_localctx, 966, RULE_fullTextCatalogPermission);
		try {
			setState(7094);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,827,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7083);
				match(CONTROL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7084);
				match(TAKE);
				setState(7085);
				match(OWNERSHIP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7086);
				match(ALTER);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7087);
				match(REFERENCES);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7088);
				match(VIEW);
				setState(7089);
				match(DEFINITION);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7090);
				match(ALTER);
				setState(7091);
				match(ANY);
				setState(7092);
				match(FULLTEXT);
				setState(7093);
				match(CATALOG);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FullTextStoplistPermissionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode CONTROL() { return getToken(SQLServerStatementParser.CONTROL, 0); }
		public TerminalNode REFERENCES() { return getToken(SQLServerStatementParser.REFERENCES, 0); }
		public TerminalNode TAKE() { return getToken(SQLServerStatementParser.TAKE, 0); }
		public TerminalNode OWNERSHIP() { return getToken(SQLServerStatementParser.OWNERSHIP, 0); }
		public TerminalNode VIEW() { return getToken(SQLServerStatementParser.VIEW, 0); }
		public TerminalNode DEFINITION() { return getToken(SQLServerStatementParser.DEFINITION, 0); }
		public TerminalNode ANY() { return getToken(SQLServerStatementParser.ANY, 0); }
		public TerminalNode FULLTEXT() { return getToken(SQLServerStatementParser.FULLTEXT, 0); }
		public TerminalNode CATALOG() { return getToken(SQLServerStatementParser.CATALOG, 0); }
		public FullTextStoplistPermissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullTextStoplistPermission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterFullTextStoplistPermission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitFullTextStoplistPermission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitFullTextStoplistPermission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullTextStoplistPermissionContext fullTextStoplistPermission() throws RecognitionException {
		FullTextStoplistPermissionContext _localctx = new FullTextStoplistPermissionContext(_ctx, getState());
		enterRule(_localctx, 968, RULE_fullTextStoplistPermission);
		try {
			setState(7107);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,828,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7096);
				match(ALTER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7097);
				match(CONTROL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7098);
				match(REFERENCES);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7099);
				match(TAKE);
				setState(7100);
				match(OWNERSHIP);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7101);
				match(VIEW);
				setState(7102);
				match(DEFINITION);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7103);
				match(ALTER);
				setState(7104);
				match(ANY);
				setState(7105);
				match(FULLTEXT);
				setState(7106);
				match(CATALOG);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TypePermissionContext extends ParserRuleContext {
		public TerminalNode CONTROL() { return getToken(SQLServerStatementParser.CONTROL, 0); }
		public TerminalNode EXECUTE() { return getToken(SQLServerStatementParser.EXECUTE, 0); }
		public TerminalNode REFERENCES() { return getToken(SQLServerStatementParser.REFERENCES, 0); }
		public TerminalNode TAKE() { return getToken(SQLServerStatementParser.TAKE, 0); }
		public TerminalNode OWNERSHIP() { return getToken(SQLServerStatementParser.OWNERSHIP, 0); }
		public TerminalNode VIEW() { return getToken(SQLServerStatementParser.VIEW, 0); }
		public TerminalNode DEFINITION() { return getToken(SQLServerStatementParser.DEFINITION, 0); }
		public TypePermissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typePermission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterTypePermission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitTypePermission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitTypePermission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypePermissionContext typePermission() throws RecognitionException {
		TypePermissionContext _localctx = new TypePermissionContext(_ctx, getState());
		enterRule(_localctx, 970, RULE_typePermission);
		try {
			setState(7116);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONTROL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7109);
				match(CONTROL);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7110);
				match(EXECUTE);
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 3);
				{
				setState(7111);
				match(REFERENCES);
				}
				break;
			case TAKE:
				enterOuterAlt(_localctx, 4);
				{
				setState(7112);
				match(TAKE);
				setState(7113);
				match(OWNERSHIP);
				}
				break;
			case VIEW:
				enterOuterAlt(_localctx, 5);
				{
				setState(7114);
				match(VIEW);
				setState(7115);
				match(DEFINITION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XmlSchemaCollectionPermissionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode CONTROL() { return getToken(SQLServerStatementParser.CONTROL, 0); }
		public TerminalNode EXECUTE() { return getToken(SQLServerStatementParser.EXECUTE, 0); }
		public TerminalNode REFERENCES() { return getToken(SQLServerStatementParser.REFERENCES, 0); }
		public TerminalNode TAKE() { return getToken(SQLServerStatementParser.TAKE, 0); }
		public TerminalNode OWNERSHIP() { return getToken(SQLServerStatementParser.OWNERSHIP, 0); }
		public TerminalNode VIEW() { return getToken(SQLServerStatementParser.VIEW, 0); }
		public TerminalNode DEFINITION() { return getToken(SQLServerStatementParser.DEFINITION, 0); }
		public XmlSchemaCollectionPermissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlSchemaCollectionPermission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterXmlSchemaCollectionPermission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitXmlSchemaCollectionPermission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitXmlSchemaCollectionPermission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlSchemaCollectionPermissionContext xmlSchemaCollectionPermission() throws RecognitionException {
		XmlSchemaCollectionPermissionContext _localctx = new XmlSchemaCollectionPermissionContext(_ctx, getState());
		enterRule(_localctx, 972, RULE_xmlSchemaCollectionPermission);
		try {
			setState(7126);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(7118);
				match(ALTER);
				}
				break;
			case CONTROL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7119);
				match(CONTROL);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 3);
				{
				setState(7120);
				match(EXECUTE);
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 4);
				{
				setState(7121);
				match(REFERENCES);
				}
				break;
			case TAKE:
				enterOuterAlt(_localctx, 5);
				{
				setState(7122);
				match(TAKE);
				setState(7123);
				match(OWNERSHIP);
				}
				break;
			case VIEW:
				enterOuterAlt(_localctx, 6);
				{
				setState(7124);
				match(VIEW);
				setState(7125);
				match(DEFINITION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SystemObjectPermissionContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(SQLServerStatementParser.SELECT, 0); }
		public TerminalNode EXECUTE() { return getToken(SQLServerStatementParser.EXECUTE, 0); }
		public SystemObjectPermissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_systemObjectPermission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSystemObjectPermission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSystemObjectPermission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSystemObjectPermission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SystemObjectPermissionContext systemObjectPermission() throws RecognitionException {
		SystemObjectPermissionContext _localctx = new SystemObjectPermissionContext(_ctx, getState());
		enterRule(_localctx, 974, RULE_systemObjectPermission);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7128);
			_la = _input.LA(1);
			if ( !(_la==SELECT || _la==EXECUTE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Class_Context extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(SQLServerStatementParser.IDENTIFIER_, 0); }
		public List<TerminalNode> COLON_() { return getTokens(SQLServerStatementParser.COLON_); }
		public TerminalNode COLON_(int i) {
			return getToken(SQLServerStatementParser.COLON_, i);
		}
		public Class_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterClass_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitClass_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitClass_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Class_Context class_() throws RecognitionException {
		Class_Context _localctx = new Class_Context(_ctx, getState());
		enterRule(_localctx, 976, RULE_class_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7130);
			match(IDENTIFIER_);
			setState(7131);
			match(COLON_);
			setState(7132);
			match(COLON_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ClassItemContext extends ParserRuleContext {
		public TerminalNode ASSEMBLY() { return getToken(SQLServerStatementParser.ASSEMBLY, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(SQLServerStatementParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(SQLServerStatementParser.KEY, 0); }
		public TerminalNode AVAILABILITY() { return getToken(SQLServerStatementParser.AVAILABILITY, 0); }
		public TerminalNode GROUP() { return getToken(SQLServerStatementParser.GROUP, 0); }
		public TerminalNode CERTIFICATE() { return getToken(SQLServerStatementParser.CERTIFICATE, 0); }
		public TerminalNode USER() { return getToken(SQLServerStatementParser.USER, 0); }
		public TerminalNode ROLE() { return getToken(SQLServerStatementParser.ROLE, 0); }
		public TerminalNode APPLICATION() { return getToken(SQLServerStatementParser.APPLICATION, 0); }
		public TerminalNode DATABASE() { return getToken(SQLServerStatementParser.DATABASE, 0); }
		public TerminalNode SCOPED() { return getToken(SQLServerStatementParser.SCOPED, 0); }
		public TerminalNode CREDENTIAL() { return getToken(SQLServerStatementParser.CREDENTIAL, 0); }
		public TerminalNode ENDPOINT() { return getToken(SQLServerStatementParser.ENDPOINT, 0); }
		public TerminalNode FULLTEXT() { return getToken(SQLServerStatementParser.FULLTEXT, 0); }
		public TerminalNode CATALOG() { return getToken(SQLServerStatementParser.CATALOG, 0); }
		public TerminalNode STOPLIST() { return getToken(SQLServerStatementParser.STOPLIST, 0); }
		public TerminalNode OBJECT() { return getToken(SQLServerStatementParser.OBJECT, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLServerStatementParser.SCHEMA, 0); }
		public TerminalNode SEARCH() { return getToken(SQLServerStatementParser.SEARCH, 0); }
		public TerminalNode PROPERTY() { return getToken(SQLServerStatementParser.PROPERTY, 0); }
		public TerminalNode LIST() { return getToken(SQLServerStatementParser.LIST, 0); }
		public TerminalNode LOGIN() { return getToken(SQLServerStatementParser.LOGIN, 0); }
		public TerminalNode SERVER() { return getToken(SQLServerStatementParser.SERVER, 0); }
		public TerminalNode CONTRACT() { return getToken(SQLServerStatementParser.CONTRACT, 0); }
		public TerminalNode MESSAGE() { return getToken(SQLServerStatementParser.MESSAGE, 0); }
		public TerminalNode TYPE() { return getToken(SQLServerStatementParser.TYPE, 0); }
		public TerminalNode REMOTE() { return getToken(SQLServerStatementParser.REMOTE, 0); }
		public TerminalNode SERVICE() { return getToken(SQLServerStatementParser.SERVICE, 0); }
		public TerminalNode BINDING() { return getToken(SQLServerStatementParser.BINDING, 0); }
		public TerminalNode ROUTE() { return getToken(SQLServerStatementParser.ROUTE, 0); }
		public TerminalNode SYMMETRIC() { return getToken(SQLServerStatementParser.SYMMETRIC, 0); }
		public TerminalNode SELECT() { return getToken(SQLServerStatementParser.SELECT, 0); }
		public TerminalNode EXECUTE() { return getToken(SQLServerStatementParser.EXECUTE, 0); }
		public TerminalNode XML() { return getToken(SQLServerStatementParser.XML, 0); }
		public TerminalNode COLLECTION() { return getToken(SQLServerStatementParser.COLLECTION, 0); }
		public ClassItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_classItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterClassItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitClassItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitClassItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClassItemContext classItem() throws RecognitionException {
		ClassItemContext _localctx = new ClassItemContext(_ctx, getState());
		enterRule(_localctx, 978, RULE_classItem);
		int _la;
		try {
			setState(7174);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASSEMBLY:
				enterOuterAlt(_localctx, 1);
				{
				setState(7134);
				match(ASSEMBLY);
				}
				break;
			case ASYMMETRIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(7135);
				match(ASYMMETRIC);
				setState(7136);
				match(KEY);
				}
				break;
			case AVAILABILITY:
				enterOuterAlt(_localctx, 3);
				{
				setState(7137);
				match(AVAILABILITY);
				setState(7138);
				match(GROUP);
				}
				break;
			case CERTIFICATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(7139);
				match(CERTIFICATE);
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 5);
				{
				setState(7140);
				match(USER);
				}
				break;
			case ROLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(7141);
				match(ROLE);
				}
				break;
			case APPLICATION:
				enterOuterAlt(_localctx, 7);
				{
				setState(7142);
				match(APPLICATION);
				setState(7143);
				match(ROLE);
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 8);
				{
				setState(7144);
				match(DATABASE);
				setState(7145);
				match(SCOPED);
				setState(7146);
				match(CREDENTIAL);
				}
				break;
			case ENDPOINT:
				enterOuterAlt(_localctx, 9);
				{
				setState(7147);
				match(ENDPOINT);
				}
				break;
			case FULLTEXT:
				enterOuterAlt(_localctx, 10);
				{
				setState(7148);
				match(FULLTEXT);
				setState(7149);
				_la = _input.LA(1);
				if ( !(_la==CATALOG || _la==STOPLIST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case OBJECT:
				enterOuterAlt(_localctx, 11);
				{
				setState(7150);
				match(OBJECT);
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 12);
				{
				setState(7151);
				match(SCHEMA);
				}
				break;
			case SEARCH:
				enterOuterAlt(_localctx, 13);
				{
				setState(7152);
				match(SEARCH);
				setState(7153);
				match(PROPERTY);
				setState(7154);
				match(LIST);
				}
				break;
			case LOGIN:
				enterOuterAlt(_localctx, 14);
				{
				setState(7155);
				match(LOGIN);
				}
				break;
			case SERVER:
				enterOuterAlt(_localctx, 15);
				{
				setState(7156);
				match(SERVER);
				setState(7157);
				match(ROLE);
				}
				break;
			case CONTRACT:
				enterOuterAlt(_localctx, 16);
				{
				setState(7158);
				match(CONTRACT);
				}
				break;
			case MESSAGE:
				enterOuterAlt(_localctx, 17);
				{
				setState(7159);
				match(MESSAGE);
				setState(7160);
				match(TYPE);
				}
				break;
			case REMOTE:
				enterOuterAlt(_localctx, 18);
				{
				setState(7161);
				match(REMOTE);
				setState(7162);
				match(SERVICE);
				setState(7163);
				match(BINDING);
				}
				break;
			case ROUTE:
				enterOuterAlt(_localctx, 19);
				{
				setState(7164);
				match(ROUTE);
				}
				break;
			case SERVICE:
				enterOuterAlt(_localctx, 20);
				{
				setState(7165);
				match(SERVICE);
				}
				break;
			case SYMMETRIC:
				enterOuterAlt(_localctx, 21);
				{
				setState(7166);
				match(SYMMETRIC);
				setState(7167);
				match(KEY);
				}
				break;
			case SELECT:
				enterOuterAlt(_localctx, 22);
				{
				setState(7168);
				match(SELECT);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 23);
				{
				setState(7169);
				match(EXECUTE);
				}
				break;
			case TYPE:
				enterOuterAlt(_localctx, 24);
				{
				setState(7170);
				match(TYPE);
				}
				break;
			case XML:
				enterOuterAlt(_localctx, 25);
				{
				setState(7171);
				match(XML);
				setState(7172);
				match(SCHEMA);
				setState(7173);
				match(COLLECTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ClassTypeContext extends ParserRuleContext {
		public TerminalNode LOGIN() { return getToken(SQLServerStatementParser.LOGIN, 0); }
		public TerminalNode DATABASE() { return getToken(SQLServerStatementParser.DATABASE, 0); }
		public TerminalNode OBJECT() { return getToken(SQLServerStatementParser.OBJECT, 0); }
		public TerminalNode ROLE() { return getToken(SQLServerStatementParser.ROLE, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLServerStatementParser.SCHEMA, 0); }
		public TerminalNode USER() { return getToken(SQLServerStatementParser.USER, 0); }
		public ClassTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_classType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterClassType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitClassType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitClassType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClassTypeContext classType() throws RecognitionException {
		ClassTypeContext _localctx = new ClassTypeContext(_ctx, getState());
		enterRule(_localctx, 980, RULE_classType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7176);
			_la = _input.LA(1);
			if ( !(_la==SCHEMA || _la==DATABASE || _la==USER || ((((_la - 268)) & ~0x3f) == 0 && ((1L << (_la - 268)) & 4466765987841L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RoleClauseContext extends ParserRuleContext {
		public IgnoredIdentifiersContext ignoredIdentifiers() {
			return getRuleContext(IgnoredIdentifiersContext.class,0);
		}
		public RoleClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterRoleClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitRoleClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitRoleClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleClauseContext roleClause() throws RecognitionException {
		RoleClauseContext _localctx = new RoleClauseContext(_ctx, getState());
		enterRule(_localctx, 982, RULE_roleClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7178);
			ignoredIdentifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetUserContext extends ParserRuleContext {
		public TerminalNode SETUSER() { return getToken(SQLServerStatementParser.SETUSER, 0); }
		public StringLiteralsContext stringLiterals() {
			return getRuleContext(StringLiteralsContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public TerminalNode NORESET() { return getToken(SQLServerStatementParser.NORESET, 0); }
		public SetUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSetUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSetUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSetUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetUserContext setUser() throws RecognitionException {
		SetUserContext _localctx = new SetUserContext(_ctx, getState());
		enterRule(_localctx, 984, RULE_setUser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7180);
			match(SETUSER);
			setState(7186);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRING_ || _la==NCHAR_TEXT) {
				{
				setState(7181);
				stringLiterals();
				setState(7184);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(7182);
					match(WITH);
					setState(7183);
					match(NORESET);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateUserContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SQLServerStatementParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(SQLServerStatementParser.USER, 0); }
		public CreateUserLoginClauseContext createUserLoginClause() {
			return getRuleContext(CreateUserLoginClauseContext.class,0);
		}
		public CreateUserWindowsPrincipalClauseContext createUserWindowsPrincipalClause() {
			return getRuleContext(CreateUserWindowsPrincipalClauseContext.class,0);
		}
		public CreateUserLoginWindowsPrincipalClauseContext createUserLoginWindowsPrincipalClause() {
			return getRuleContext(CreateUserLoginWindowsPrincipalClauseContext.class,0);
		}
		public CreateUserWithoutLoginClauseContext createUserWithoutLoginClause() {
			return getRuleContext(CreateUserWithoutLoginClauseContext.class,0);
		}
		public CreateUserFromExternalProviderClauseContext createUserFromExternalProviderClause() {
			return getRuleContext(CreateUserFromExternalProviderClauseContext.class,0);
		}
		public CreateUserWithDefaultSchemaContext createUserWithDefaultSchema() {
			return getRuleContext(CreateUserWithDefaultSchemaContext.class,0);
		}
		public CreateUserWithAzureActiveDirectoryPrincipalClauseContext createUserWithAzureActiveDirectoryPrincipalClause() {
			return getRuleContext(CreateUserWithAzureActiveDirectoryPrincipalClauseContext.class,0);
		}
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public CreateUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserContext createUser() throws RecognitionException {
		CreateUserContext _localctx = new CreateUserContext(_ctx, getState());
		enterRule(_localctx, 986, RULE_createUser);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7188);
			match(CREATE);
			setState(7189);
			match(USER);
			setState(7198);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,834,_ctx) ) {
			case 1:
				{
				setState(7190);
				createUserLoginClause();
				}
				break;
			case 2:
				{
				setState(7191);
				createUserWindowsPrincipalClause();
				}
				break;
			case 3:
				{
				setState(7192);
				createUserLoginWindowsPrincipalClause();
				}
				break;
			case 4:
				{
				setState(7193);
				createUserWithoutLoginClause();
				}
				break;
			case 5:
				{
				setState(7194);
				createUserFromExternalProviderClause();
				}
				break;
			case 6:
				{
				setState(7195);
				createUserWithDefaultSchema();
				}
				break;
			case 7:
				{
				setState(7196);
				createUserWithAzureActiveDirectoryPrincipalClause();
				}
				break;
			case 8:
				{
				setState(7197);
				userName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateUserLoginClauseContext extends ParserRuleContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode LOGIN() { return getToken(SQLServerStatementParser.LOGIN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public List<LimitedOptionsListContext> limitedOptionsList() {
			return getRuleContexts(LimitedOptionsListContext.class);
		}
		public LimitedOptionsListContext limitedOptionsList(int i) {
			return getRuleContext(LimitedOptionsListContext.class,i);
		}
		public TerminalNode FOR() { return getToken(SQLServerStatementParser.FOR, 0); }
		public TerminalNode FROM() { return getToken(SQLServerStatementParser.FROM, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public CreateUserLoginClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserLoginClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateUserLoginClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateUserLoginClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateUserLoginClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserLoginClauseContext createUserLoginClause() throws RecognitionException {
		CreateUserLoginClauseContext _localctx = new CreateUserLoginClauseContext(_ctx, getState());
		enterRule(_localctx, 988, RULE_createUserLoginClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7200);
			userName();
			setState(7204);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM || _la==FOR) {
				{
				setState(7201);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==FOR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7202);
				match(LOGIN);
				setState(7203);
				identifier();
				}
			}

			setState(7215);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(7206);
				match(WITH);
				setState(7207);
				limitedOptionsList();
				setState(7212);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(7208);
					match(COMMA_);
					setState(7209);
					limitedOptionsList();
					}
					}
					setState(7214);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateUserWindowsPrincipalClauseContext extends ParserRuleContext {
		public WindowsPrincipalContext windowsPrincipal() {
			return getRuleContext(WindowsPrincipalContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public List<OptionsListContext> optionsList() {
			return getRuleContexts(OptionsListContext.class);
		}
		public OptionsListContext optionsList(int i) {
			return getRuleContext(OptionsListContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode PASSWORD() { return getToken(SQLServerStatementParser.PASSWORD, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public StringLiteralsContext stringLiterals() {
			return getRuleContext(StringLiteralsContext.class,0);
		}
		public AzureActiveDirectoryPrincipalContext azureActiveDirectoryPrincipal() {
			return getRuleContext(AzureActiveDirectoryPrincipalContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SQLServerStatementParser.FROM, 0); }
		public TerminalNode EXTERNAL() { return getToken(SQLServerStatementParser.EXTERNAL, 0); }
		public TerminalNode PROVIDER() { return getToken(SQLServerStatementParser.PROVIDER, 0); }
		public CreateUserWindowsPrincipalClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserWindowsPrincipalClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateUserWindowsPrincipalClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateUserWindowsPrincipalClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateUserWindowsPrincipalClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserWindowsPrincipalClauseContext createUserWindowsPrincipalClause() throws RecognitionException {
		CreateUserWindowsPrincipalClauseContext _localctx = new CreateUserWindowsPrincipalClauseContext(_ctx, getState());
		enterRule(_localctx, 990, RULE_createUserWindowsPrincipalClause);
		int _la;
		try {
			setState(7250);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,842,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7217);
				windowsPrincipal();
				setState(7227);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(7218);
					match(WITH);
					setState(7219);
					optionsList();
					setState(7224);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA_) {
						{
						{
						setState(7220);
						match(COMMA_);
						setState(7221);
						optionsList();
						}
						}
						setState(7226);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7229);
				userName();
				setState(7230);
				match(WITH);
				setState(7231);
				match(PASSWORD);
				setState(7232);
				match(EQ_);
				setState(7233);
				stringLiterals();
				setState(7243);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_) {
					{
					setState(7234);
					match(COMMA_);
					setState(7235);
					optionsList();
					setState(7240);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA_) {
						{
						{
						setState(7236);
						match(COMMA_);
						setState(7237);
						optionsList();
						}
						}
						setState(7242);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7245);
				azureActiveDirectoryPrincipal();
				setState(7246);
				match(FROM);
				setState(7247);
				match(EXTERNAL);
				setState(7248);
				match(PROVIDER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateUserLoginWindowsPrincipalClauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public List<LimitedOptionsListContext> limitedOptionsList() {
			return getRuleContexts(LimitedOptionsListContext.class);
		}
		public LimitedOptionsListContext limitedOptionsList(int i) {
			return getRuleContext(LimitedOptionsListContext.class,i);
		}
		public List<WindowsPrincipalContext> windowsPrincipal() {
			return getRuleContexts(WindowsPrincipalContext.class);
		}
		public WindowsPrincipalContext windowsPrincipal(int i) {
			return getRuleContext(WindowsPrincipalContext.class,i);
		}
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode LOGIN() { return getToken(SQLServerStatementParser.LOGIN, 0); }
		public TerminalNode FOR() { return getToken(SQLServerStatementParser.FOR, 0); }
		public TerminalNode FROM() { return getToken(SQLServerStatementParser.FROM, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public CreateUserLoginWindowsPrincipalClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserLoginWindowsPrincipalClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateUserLoginWindowsPrincipalClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateUserLoginWindowsPrincipalClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateUserLoginWindowsPrincipalClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserLoginWindowsPrincipalClauseContext createUserLoginWindowsPrincipalClause() throws RecognitionException {
		CreateUserLoginWindowsPrincipalClauseContext _localctx = new CreateUserLoginWindowsPrincipalClauseContext(_ctx, getState());
		enterRule(_localctx, 992, RULE_createUserLoginWindowsPrincipalClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7263);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,844,_ctx) ) {
			case 1:
				{
				{
				setState(7252);
				windowsPrincipal();
				setState(7256);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==FOR) {
					{
					setState(7253);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==FOR) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(7254);
					match(LOGIN);
					setState(7255);
					windowsPrincipal();
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				setState(7258);
				userName();
				setState(7259);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==FOR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7260);
				match(LOGIN);
				setState(7261);
				windowsPrincipal();
				}
				}
				break;
			}
			setState(7274);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(7265);
				match(WITH);
				setState(7266);
				limitedOptionsList();
				setState(7271);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(7267);
					match(COMMA_);
					setState(7268);
					limitedOptionsList();
					}
					}
					setState(7273);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateUserWithoutLoginClauseContext extends ParserRuleContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode WITHOUT() { return getToken(SQLServerStatementParser.WITHOUT, 0); }
		public TerminalNode LOGIN() { return getToken(SQLServerStatementParser.LOGIN, 0); }
		public TerminalNode CERTIFICATE() { return getToken(SQLServerStatementParser.CERTIFICATE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ASYMMETRIC() { return getToken(SQLServerStatementParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(SQLServerStatementParser.KEY, 0); }
		public TerminalNode FOR() { return getToken(SQLServerStatementParser.FOR, 0); }
		public TerminalNode FROM() { return getToken(SQLServerStatementParser.FROM, 0); }
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public List<LimitedOptionsListContext> limitedOptionsList() {
			return getRuleContexts(LimitedOptionsListContext.class);
		}
		public LimitedOptionsListContext limitedOptionsList(int i) {
			return getRuleContext(LimitedOptionsListContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public CreateUserWithoutLoginClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserWithoutLoginClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateUserWithoutLoginClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateUserWithoutLoginClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateUserWithoutLoginClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserWithoutLoginClauseContext createUserWithoutLoginClause() throws RecognitionException {
		CreateUserWithoutLoginClauseContext _localctx = new CreateUserWithoutLoginClauseContext(_ctx, getState());
		enterRule(_localctx, 994, RULE_createUserWithoutLoginClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7276);
			userName();
			setState(7297);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,849,_ctx) ) {
			case 1:
				{
				setState(7277);
				match(WITHOUT);
				setState(7278);
				match(LOGIN);
				setState(7288);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(7279);
					match(WITH);
					setState(7280);
					limitedOptionsList();
					setState(7285);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA_) {
						{
						{
						setState(7281);
						match(COMMA_);
						setState(7282);
						limitedOptionsList();
						}
						}
						setState(7287);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			case 2:
				{
				setState(7290);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==FOR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7291);
				match(CERTIFICATE);
				setState(7292);
				identifier();
				}
				break;
			case 3:
				{
				setState(7293);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==FOR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7294);
				match(ASYMMETRIC);
				setState(7295);
				match(KEY);
				setState(7296);
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptionsListContext extends ParserRuleContext {
		public TerminalNode DEFAULT_SCHEMA() { return getToken(SQLServerStatementParser.DEFAULT_SCHEMA, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(SQLServerStatementParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode NONE() { return getToken(SQLServerStatementParser.NONE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode SID() { return getToken(SQLServerStatementParser.SID, 0); }
		public SidContext sid() {
			return getRuleContext(SidContext.class,0);
		}
		public TerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return getToken(SQLServerStatementParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, 0); }
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode OFF() { return getToken(SQLServerStatementParser.OFF, 0); }
		public OptionsListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionsList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterOptionsList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitOptionsList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitOptionsList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptionsListContext optionsList() throws RecognitionException {
		OptionsListContext _localctx = new OptionsListContext(_ctx, getState());
		enterRule(_localctx, 996, RULE_optionsList);
		int _la;
		try {
			setState(7316);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT_SCHEMA:
				enterOuterAlt(_localctx, 1);
				{
				setState(7299);
				match(DEFAULT_SCHEMA);
				setState(7300);
				match(EQ_);
				setState(7301);
				schemaName();
				}
				break;
			case DEFAULT_LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7302);
				match(DEFAULT_LANGUAGE);
				setState(7303);
				match(EQ_);
				setState(7306);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NONE:
					{
					setState(7304);
					match(NONE);
					}
					break;
				case TRUNCATE:
				case SCHEMA:
				case TABLE:
				case COLUMNS:
				case PRECISION:
				case FUNCTION:
				case TRIGGER:
				case CAST:
				case TRIM:
				case SUBSTRING:
				case RIGHT:
				case OFF:
				case GROUP:
				case LIMIT:
				case OFFSET:
				case SAVEPOINT:
				case BOOLEAN:
				case ARRAY:
				case DATE:
				case TIMESTAMP:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case YEAR:
				case QUARTER:
				case MONTH:
				case WEEK:
				case DAY:
				case HOUR:
				case MINUTE:
				case SECOND:
				case MICROSECOND:
				case MAX:
				case MIN:
				case SUM:
				case COUNT:
				case AVG:
				case ENABLE:
				case DISABLE:
				case INSTANCE:
				case DO:
				case DEFINER:
				case SQL:
				case CASCADED:
				case LOCAL:
				case NEXT:
				case NAME:
				case INTEGER:
				case TYPE:
				case TEXT:
				case VIEWS:
				case READ_ONLY:
				case DATABASE:
				case RETURNS:
				case DATEPART:
				case PASSWORD:
				case TARGET:
				case BINARY:
				case HIDDEN_:
				case MOD:
				case PARTITION:
				case PARTITIONS:
				case TOP:
				case ROW:
				case ROWS:
				case XOR:
				case ALWAYS:
				case USER:
				case ROLE:
				case START:
				case ACTION:
				case ALGORITHM:
				case AUTO:
				case BLOCKERS:
				case CLUSTERED:
				case NONCLUSTERED:
				case COLUMNSTORE:
				case CONTENT:
				case YEARS:
				case MONTHS:
				case WEEKS:
				case DAYS:
				case MINUTES:
				case DENY:
				case DETERMINISTIC:
				case DISTRIBUTION:
				case DOCUMENT:
				case DURABILITY:
				case ENCRYPTED:
				case FILESTREAM:
				case FILETABLE:
				case FILLFACTOR:
				case FOLLOWING:
				case HASH:
				case HEAP:
				case INBOUND:
				case OUTBOUND:
				case UNBOUNDED:
				case INFINITE:
				case LOGIN:
				case MASKED:
				case MAXDOP:
				case MOVE:
				case NOCHECK:
				case OBJECT:
				case ONLINE:
				case OVER:
				case PAGE:
				case PAUSED:
				case PERIOD:
				case PERSISTED:
				case PRECEDING:
				case RANDOMIZED:
				case RANGE:
				case REBUILD:
				case REPLICATE:
				case REPLICATION:
				case RESUMABLE:
				case ROWGUIDCOL:
				case SAVE:
				case SELF:
				case SPARSE:
				case SWITCH:
				case TRAN:
				case TRANCOUNT:
				case CONTROL:
				case CONCAT:
				case TAKE:
				case OWNERSHIP:
				case DEFINITION:
				case APPLICATION:
				case ASSEMBLY:
				case SYMMETRIC:
				case ASYMMETRIC:
				case SERVER:
				case RECEIVE:
				case CHANGE:
				case TRACE:
				case TRACKING:
				case RESOURCES:
				case SETTINGS:
				case STATE:
				case AVAILABILITY:
				case CREDENTIAL:
				case ENDPOINT:
				case EVENT:
				case NOTIFICATION:
				case LINKED:
				case AUDIT:
				case DDL:
				case XML:
				case IMPERSONATE:
				case SECURABLES:
				case AUTHENTICATE:
				case EXTERNAL:
				case ACCESS:
				case ADMINISTER:
				case BULK:
				case OPERATIONS:
				case UNSAFE:
				case SHUTDOWN:
				case SCOPED:
				case CONFIGURATION:
				case DATASPACE:
				case SERVICE:
				case CERTIFICATE:
				case CONTRACT:
				case ENCRYPTION:
				case MASTER:
				case DATA:
				case SOURCE:
				case FILE:
				case FORMAT:
				case LIBRARY:
				case FULLTEXT:
				case MASK:
				case UNMASK:
				case MESSAGE:
				case REMOTE:
				case BINDING:
				case ROUTE:
				case SECURITY:
				case POLICY:
				case AGGREGATE:
				case QUEUE:
				case RULE:
				case SYNONYM:
				case COLLECTION:
				case SCRIPT:
				case KILL:
				case BACKUP:
				case LOG:
				case SHOWPLAN:
				case SUBSCRIBE:
				case QUERY:
				case NOTIFICATIONS:
				case CHECKPOINT:
				case SEQUENCE:
				case ABORT_AFTER_WAIT:
				case ALLOW_PAGE_LOCKS:
				case ALLOW_ROW_LOCKS:
				case ALL_SPARSE_COLUMNS:
				case BUCKET_COUNT:
				case COLUMNSTORE_ARCHIVE:
				case COLUMN_ENCRYPTION_KEY:
				case COLUMN_SET:
				case COMPRESSION_DELAY:
				case DATABASE_DEAULT:
				case DATA_COMPRESSION:
				case DATA_CONSISTENCY_CHECK:
				case ENCRYPTION_TYPE:
				case SYSTEM_TIME:
				case SYSTEM_VERSIONING:
				case TEXTIMAGE_ON:
				case WAIT_AT_LOW_PRIORITY:
				case STATISTICS_INCREMENTAL:
				case STATISTICS_NORECOMPUTE:
				case ROUND_ROBIN:
				case SCHEMA_AND_DATA:
				case SCHEMA_ONLY:
				case SORT_IN_TEMPDB:
				case IGNORE_DUP_KEY:
				case IMPLICIT_TRANSACTIONS:
				case MAX_DURATION:
				case MEMORY_OPTIMIZED:
				case MIGRATION_STATE:
				case PAD_INDEX:
				case REMOTE_DATA_ARCHIVE:
				case FILESTREAM_ON:
				case FILETABLE_COLLATE_FILENAME:
				case FILETABLE_DIRECTORY:
				case FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME:
				case FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME:
				case FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME:
				case FILTER_PREDICATE:
				case HISTORY_RETENTION_PERIOD:
				case HISTORY_TABLE:
				case LOCK_ESCALATION:
				case DROP_EXISTING:
				case ROW_NUMBER:
				case FIRST:
				case DATETIME2:
				case OUTPUT:
				case INSERTED:
				case DELETED:
				case FILENAME:
				case SIZE:
				case MAXSIZE:
				case FILEGROWTH:
				case UNLIMITED:
				case KB:
				case MB:
				case GB:
				case TB:
				case CONTAINS:
				case MEMORY_OPTIMIZED_DATA:
				case FILEGROUP:
				case NON_TRANSACTED_ACCESS:
				case DB_CHAINING:
				case TRUSTWORTHY:
				case FORWARD_ONLY:
				case KEYSET:
				case FAST_FORWARD:
				case SCROLL_LOCKS:
				case OPTIMISTIC:
				case TYPE_WARNING:
				case SCHEMABINDING:
				case CALLER:
				case INPUT:
				case OWNER:
				case SNAPSHOT:
				case REPEATABLE:
				case SERIALIZABLE:
				case NATIVE_COMPILATION:
				case VIEW_METADATA:
				case INSTEAD:
				case APPEND:
				case INCREMENT:
				case CACHE:
				case MINVALUE:
				case MAXVALUE:
				case RESTART:
				case LOB_COMPACTION:
				case COMPRESS_ALL_ROW_GROUPS:
				case REORGANIZE:
				case RESUME:
				case PAUSE:
				case ABORT:
				case ACCELERATED_DATABASE_RECOVERY:
				case PERSISTENT_VERSION_STORE_FILEGROUP:
				case IMMEDIATE:
				case NO_WAIT:
				case TARGET_RECOVERY_TIME:
				case SECONDS:
				case HONOR_BROKER_PRIORITY:
				case ERROR_BROKER_CONVERSATIONS:
				case NEW_BROKER:
				case DISABLE_BROKER:
				case ENABLE_BROKER:
				case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
				case READ_COMMITTED_SNAPSHOT:
				case ALLOW_SNAPSHOT_ISOLATION:
				case RECURSIVE_TRIGGERS:
				case QUOTED_IDENTIFIER:
				case NUMERIC_ROUNDABORT:
				case CONCAT_NULL_YIELDS_NULL:
				case COMPATIBILITY_LEVEL:
				case ARITHABORT:
				case ANSI_WARNINGS:
				case ANSI_PADDING:
				case ANSI_NULLS:
				case ANSI_NULL_DEFAULT:
				case PAGE_VERIFY:
				case CHECKSUM:
				case TORN_PAGE_DETECTION:
				case BULK_LOGGED:
				case RECOVERY:
				case TOTAL_EXECUTION_CPU_TIME_MS:
				case TOTAL_COMPILE_CPU_TIME_MS:
				case STALE_CAPTURE_POLICY_THRESHOLD:
				case EXECUTION_COUNT:
				case QUERY_CAPTURE_POLICY:
				case WAIT_STATS_CAPTURE_MODE:
				case MAX_PLANS_PER_QUERY:
				case QUERY_CAPTURE_MODE:
				case SIZE_BASED_CLEANUP_MODE:
				case INTERVAL_LENGTH_MINUTES:
				case MAX_STORAGE_SIZE_MB:
				case DATA_FLUSH_INTERVAL_SECONDS:
				case CLEANUP_POLICY:
				case CUSTOM:
				case STALE_QUERY_THRESHOLD_DAYS:
				case OPERATION_MODE:
				case QUERY_STORE:
				case CURSOR_DEFAULT:
				case GLOBAL:
				case CURSOR_CLOSE_ON_COMMIT:
				case HOURS:
				case CHANGE_RETENTION:
				case AUTO_CLEANUP:
				case CHANGE_TRACKING:
				case AUTOMATIC_TUNING:
				case FORCE_LAST_GOOD_PLAN:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_CREATE_STATISTICS:
				case INCREMENTAL:
				case AUTO_CLOSE:
				case DATA_RETENTION:
				case TEMPORAL_HISTORY_RETENTION:
				case EDITION:
				case MIXED_PAGE_ALLOCATION:
				case DISABLED:
				case ALLOWED:
				case HADR:
				case MULTI_USER:
				case RESTRICTED_USER:
				case SINGLE_USER:
				case OFFLINE:
				case EMERGENCY:
				case SUSPEND:
				case DATE_CORRELATION_OPTIMIZATION:
				case ELASTIC_POOL:
				case SERVICE_OBJECTIVE:
				case DATABASE_NAME:
				case ALLOW_CONNECTIONS:
				case GEO:
				case NAMED:
				case DATEFIRST:
				case BACKUP_STORAGE_REDUNDANCY:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case SECONDARY:
				case FAILOVER:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case INLINE:
				case NESTED_TRIGGERS:
				case TRANSFORM_NOISE_WORDS:
				case TWO_DIGIT_YEAR_CUTOFF:
				case PERSISTENT_LOG_BUFFER:
				case DIRECTORY_NAME:
				case DATEFORMAT:
				case DELAYED_DURABILITY:
				case AUTHORIZATION:
				case TRANSFER:
				case PROVIDER:
				case SID:
				case SEARCH:
				case MEMBER:
				case JSON:
				case OPENQUERY:
				case IDENTIFIER_:
				case DELIMITED_IDENTIFIER_:
					{
					setState(7305);
					identifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SID:
				enterOuterAlt(_localctx, 3);
				{
				setState(7308);
				match(SID);
				setState(7309);
				match(EQ_);
				setState(7310);
				sid();
				}
				break;
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				enterOuterAlt(_localctx, 4);
				{
				setState(7311);
				match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
				setState(7312);
				match(EQ_);
				setState(7314);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON || _la==OFF) {
					{
					setState(7313);
					_la = _input.LA(1);
					if ( !(_la==ON || _la==OFF) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LimitedOptionsListContext extends ParserRuleContext {
		public TerminalNode DEFAULT_SCHEMA() { return getToken(SQLServerStatementParser.DEFAULT_SCHEMA, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(SQLServerStatementParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode NONE() { return getToken(SQLServerStatementParser.NONE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return getToken(SQLServerStatementParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, 0); }
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode OFF() { return getToken(SQLServerStatementParser.OFF, 0); }
		public LimitedOptionsListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitedOptionsList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterLimitedOptionsList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitLimitedOptionsList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitLimitedOptionsList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitedOptionsListContext limitedOptionsList() throws RecognitionException {
		LimitedOptionsListContext _localctx = new LimitedOptionsListContext(_ctx, getState());
		enterRule(_localctx, 998, RULE_limitedOptionsList);
		int _la;
		try {
			setState(7332);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT_SCHEMA:
				enterOuterAlt(_localctx, 1);
				{
				setState(7318);
				match(DEFAULT_SCHEMA);
				setState(7319);
				match(EQ_);
				setState(7320);
				schemaName();
				}
				break;
			case DEFAULT_LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7321);
				match(DEFAULT_LANGUAGE);
				setState(7322);
				match(EQ_);
				setState(7325);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NONE:
					{
					setState(7323);
					match(NONE);
					}
					break;
				case TRUNCATE:
				case SCHEMA:
				case TABLE:
				case COLUMNS:
				case PRECISION:
				case FUNCTION:
				case TRIGGER:
				case CAST:
				case TRIM:
				case SUBSTRING:
				case RIGHT:
				case OFF:
				case GROUP:
				case LIMIT:
				case OFFSET:
				case SAVEPOINT:
				case BOOLEAN:
				case ARRAY:
				case DATE:
				case TIMESTAMP:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case YEAR:
				case QUARTER:
				case MONTH:
				case WEEK:
				case DAY:
				case HOUR:
				case MINUTE:
				case SECOND:
				case MICROSECOND:
				case MAX:
				case MIN:
				case SUM:
				case COUNT:
				case AVG:
				case ENABLE:
				case DISABLE:
				case INSTANCE:
				case DO:
				case DEFINER:
				case SQL:
				case CASCADED:
				case LOCAL:
				case NEXT:
				case NAME:
				case INTEGER:
				case TYPE:
				case TEXT:
				case VIEWS:
				case READ_ONLY:
				case DATABASE:
				case RETURNS:
				case DATEPART:
				case PASSWORD:
				case TARGET:
				case BINARY:
				case HIDDEN_:
				case MOD:
				case PARTITION:
				case PARTITIONS:
				case TOP:
				case ROW:
				case ROWS:
				case XOR:
				case ALWAYS:
				case USER:
				case ROLE:
				case START:
				case ACTION:
				case ALGORITHM:
				case AUTO:
				case BLOCKERS:
				case CLUSTERED:
				case NONCLUSTERED:
				case COLUMNSTORE:
				case CONTENT:
				case YEARS:
				case MONTHS:
				case WEEKS:
				case DAYS:
				case MINUTES:
				case DENY:
				case DETERMINISTIC:
				case DISTRIBUTION:
				case DOCUMENT:
				case DURABILITY:
				case ENCRYPTED:
				case FILESTREAM:
				case FILETABLE:
				case FILLFACTOR:
				case FOLLOWING:
				case HASH:
				case HEAP:
				case INBOUND:
				case OUTBOUND:
				case UNBOUNDED:
				case INFINITE:
				case LOGIN:
				case MASKED:
				case MAXDOP:
				case MOVE:
				case NOCHECK:
				case OBJECT:
				case ONLINE:
				case OVER:
				case PAGE:
				case PAUSED:
				case PERIOD:
				case PERSISTED:
				case PRECEDING:
				case RANDOMIZED:
				case RANGE:
				case REBUILD:
				case REPLICATE:
				case REPLICATION:
				case RESUMABLE:
				case ROWGUIDCOL:
				case SAVE:
				case SELF:
				case SPARSE:
				case SWITCH:
				case TRAN:
				case TRANCOUNT:
				case CONTROL:
				case CONCAT:
				case TAKE:
				case OWNERSHIP:
				case DEFINITION:
				case APPLICATION:
				case ASSEMBLY:
				case SYMMETRIC:
				case ASYMMETRIC:
				case SERVER:
				case RECEIVE:
				case CHANGE:
				case TRACE:
				case TRACKING:
				case RESOURCES:
				case SETTINGS:
				case STATE:
				case AVAILABILITY:
				case CREDENTIAL:
				case ENDPOINT:
				case EVENT:
				case NOTIFICATION:
				case LINKED:
				case AUDIT:
				case DDL:
				case XML:
				case IMPERSONATE:
				case SECURABLES:
				case AUTHENTICATE:
				case EXTERNAL:
				case ACCESS:
				case ADMINISTER:
				case BULK:
				case OPERATIONS:
				case UNSAFE:
				case SHUTDOWN:
				case SCOPED:
				case CONFIGURATION:
				case DATASPACE:
				case SERVICE:
				case CERTIFICATE:
				case CONTRACT:
				case ENCRYPTION:
				case MASTER:
				case DATA:
				case SOURCE:
				case FILE:
				case FORMAT:
				case LIBRARY:
				case FULLTEXT:
				case MASK:
				case UNMASK:
				case MESSAGE:
				case REMOTE:
				case BINDING:
				case ROUTE:
				case SECURITY:
				case POLICY:
				case AGGREGATE:
				case QUEUE:
				case RULE:
				case SYNONYM:
				case COLLECTION:
				case SCRIPT:
				case KILL:
				case BACKUP:
				case LOG:
				case SHOWPLAN:
				case SUBSCRIBE:
				case QUERY:
				case NOTIFICATIONS:
				case CHECKPOINT:
				case SEQUENCE:
				case ABORT_AFTER_WAIT:
				case ALLOW_PAGE_LOCKS:
				case ALLOW_ROW_LOCKS:
				case ALL_SPARSE_COLUMNS:
				case BUCKET_COUNT:
				case COLUMNSTORE_ARCHIVE:
				case COLUMN_ENCRYPTION_KEY:
				case COLUMN_SET:
				case COMPRESSION_DELAY:
				case DATABASE_DEAULT:
				case DATA_COMPRESSION:
				case DATA_CONSISTENCY_CHECK:
				case ENCRYPTION_TYPE:
				case SYSTEM_TIME:
				case SYSTEM_VERSIONING:
				case TEXTIMAGE_ON:
				case WAIT_AT_LOW_PRIORITY:
				case STATISTICS_INCREMENTAL:
				case STATISTICS_NORECOMPUTE:
				case ROUND_ROBIN:
				case SCHEMA_AND_DATA:
				case SCHEMA_ONLY:
				case SORT_IN_TEMPDB:
				case IGNORE_DUP_KEY:
				case IMPLICIT_TRANSACTIONS:
				case MAX_DURATION:
				case MEMORY_OPTIMIZED:
				case MIGRATION_STATE:
				case PAD_INDEX:
				case REMOTE_DATA_ARCHIVE:
				case FILESTREAM_ON:
				case FILETABLE_COLLATE_FILENAME:
				case FILETABLE_DIRECTORY:
				case FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME:
				case FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME:
				case FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME:
				case FILTER_PREDICATE:
				case HISTORY_RETENTION_PERIOD:
				case HISTORY_TABLE:
				case LOCK_ESCALATION:
				case DROP_EXISTING:
				case ROW_NUMBER:
				case FIRST:
				case DATETIME2:
				case OUTPUT:
				case INSERTED:
				case DELETED:
				case FILENAME:
				case SIZE:
				case MAXSIZE:
				case FILEGROWTH:
				case UNLIMITED:
				case KB:
				case MB:
				case GB:
				case TB:
				case CONTAINS:
				case MEMORY_OPTIMIZED_DATA:
				case FILEGROUP:
				case NON_TRANSACTED_ACCESS:
				case DB_CHAINING:
				case TRUSTWORTHY:
				case FORWARD_ONLY:
				case KEYSET:
				case FAST_FORWARD:
				case SCROLL_LOCKS:
				case OPTIMISTIC:
				case TYPE_WARNING:
				case SCHEMABINDING:
				case CALLER:
				case INPUT:
				case OWNER:
				case SNAPSHOT:
				case REPEATABLE:
				case SERIALIZABLE:
				case NATIVE_COMPILATION:
				case VIEW_METADATA:
				case INSTEAD:
				case APPEND:
				case INCREMENT:
				case CACHE:
				case MINVALUE:
				case MAXVALUE:
				case RESTART:
				case LOB_COMPACTION:
				case COMPRESS_ALL_ROW_GROUPS:
				case REORGANIZE:
				case RESUME:
				case PAUSE:
				case ABORT:
				case ACCELERATED_DATABASE_RECOVERY:
				case PERSISTENT_VERSION_STORE_FILEGROUP:
				case IMMEDIATE:
				case NO_WAIT:
				case TARGET_RECOVERY_TIME:
				case SECONDS:
				case HONOR_BROKER_PRIORITY:
				case ERROR_BROKER_CONVERSATIONS:
				case NEW_BROKER:
				case DISABLE_BROKER:
				case ENABLE_BROKER:
				case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
				case READ_COMMITTED_SNAPSHOT:
				case ALLOW_SNAPSHOT_ISOLATION:
				case RECURSIVE_TRIGGERS:
				case QUOTED_IDENTIFIER:
				case NUMERIC_ROUNDABORT:
				case CONCAT_NULL_YIELDS_NULL:
				case COMPATIBILITY_LEVEL:
				case ARITHABORT:
				case ANSI_WARNINGS:
				case ANSI_PADDING:
				case ANSI_NULLS:
				case ANSI_NULL_DEFAULT:
				case PAGE_VERIFY:
				case CHECKSUM:
				case TORN_PAGE_DETECTION:
				case BULK_LOGGED:
				case RECOVERY:
				case TOTAL_EXECUTION_CPU_TIME_MS:
				case TOTAL_COMPILE_CPU_TIME_MS:
				case STALE_CAPTURE_POLICY_THRESHOLD:
				case EXECUTION_COUNT:
				case QUERY_CAPTURE_POLICY:
				case WAIT_STATS_CAPTURE_MODE:
				case MAX_PLANS_PER_QUERY:
				case QUERY_CAPTURE_MODE:
				case SIZE_BASED_CLEANUP_MODE:
				case INTERVAL_LENGTH_MINUTES:
				case MAX_STORAGE_SIZE_MB:
				case DATA_FLUSH_INTERVAL_SECONDS:
				case CLEANUP_POLICY:
				case CUSTOM:
				case STALE_QUERY_THRESHOLD_DAYS:
				case OPERATION_MODE:
				case QUERY_STORE:
				case CURSOR_DEFAULT:
				case GLOBAL:
				case CURSOR_CLOSE_ON_COMMIT:
				case HOURS:
				case CHANGE_RETENTION:
				case AUTO_CLEANUP:
				case CHANGE_TRACKING:
				case AUTOMATIC_TUNING:
				case FORCE_LAST_GOOD_PLAN:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_CREATE_STATISTICS:
				case INCREMENTAL:
				case AUTO_CLOSE:
				case DATA_RETENTION:
				case TEMPORAL_HISTORY_RETENTION:
				case EDITION:
				case MIXED_PAGE_ALLOCATION:
				case DISABLED:
				case ALLOWED:
				case HADR:
				case MULTI_USER:
				case RESTRICTED_USER:
				case SINGLE_USER:
				case OFFLINE:
				case EMERGENCY:
				case SUSPEND:
				case DATE_CORRELATION_OPTIMIZATION:
				case ELASTIC_POOL:
				case SERVICE_OBJECTIVE:
				case DATABASE_NAME:
				case ALLOW_CONNECTIONS:
				case GEO:
				case NAMED:
				case DATEFIRST:
				case BACKUP_STORAGE_REDUNDANCY:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case SECONDARY:
				case FAILOVER:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case INLINE:
				case NESTED_TRIGGERS:
				case TRANSFORM_NOISE_WORDS:
				case TWO_DIGIT_YEAR_CUTOFF:
				case PERSISTENT_LOG_BUFFER:
				case DIRECTORY_NAME:
				case DATEFORMAT:
				case DELAYED_DURABILITY:
				case AUTHORIZATION:
				case TRANSFER:
				case PROVIDER:
				case SID:
				case SEARCH:
				case MEMBER:
				case JSON:
				case OPENQUERY:
				case IDENTIFIER_:
				case DELIMITED_IDENTIFIER_:
					{
					setState(7324);
					identifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				enterOuterAlt(_localctx, 3);
				{
				setState(7327);
				match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
				setState(7328);
				match(EQ_);
				setState(7330);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON || _la==OFF) {
					{
					setState(7329);
					_la = _input.LA(1);
					if ( !(_la==ON || _la==OFF) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateUserFromExternalProviderClauseContext extends ParserRuleContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode LOGIN() { return getToken(SQLServerStatementParser.LOGIN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FOR() { return getToken(SQLServerStatementParser.FOR, 0); }
		public TerminalNode FROM() { return getToken(SQLServerStatementParser.FROM, 0); }
		public TerminalNode EXTERNAL() { return getToken(SQLServerStatementParser.EXTERNAL, 0); }
		public TerminalNode PROVIDER() { return getToken(SQLServerStatementParser.PROVIDER, 0); }
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public List<LimitedOptionsListContext> limitedOptionsList() {
			return getRuleContexts(LimitedOptionsListContext.class);
		}
		public LimitedOptionsListContext limitedOptionsList(int i) {
			return getRuleContext(LimitedOptionsListContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public CreateUserFromExternalProviderClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserFromExternalProviderClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateUserFromExternalProviderClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateUserFromExternalProviderClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateUserFromExternalProviderClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserFromExternalProviderClauseContext createUserFromExternalProviderClause() throws RecognitionException {
		CreateUserFromExternalProviderClauseContext _localctx = new CreateUserFromExternalProviderClauseContext(_ctx, getState());
		enterRule(_localctx, 1000, RULE_createUserFromExternalProviderClause);
		int _la;
		try {
			setState(7354);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TRUNCATE:
			case SCHEMA:
			case TABLE:
			case COLUMNS:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case RIGHT:
			case OFF:
			case GROUP:
			case LIMIT:
			case OFFSET:
			case SAVEPOINT:
			case BOOLEAN:
			case ARRAY:
			case DATE:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MICROSECOND:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case AVG:
			case ENABLE:
			case DISABLE:
			case INSTANCE:
			case DO:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case NEXT:
			case NAME:
			case INTEGER:
			case TYPE:
			case TEXT:
			case VIEWS:
			case READ_ONLY:
			case DATABASE:
			case RETURNS:
			case DATEPART:
			case PASSWORD:
			case TARGET:
			case BINARY:
			case HIDDEN_:
			case MOD:
			case PARTITION:
			case PARTITIONS:
			case TOP:
			case ROW:
			case ROWS:
			case XOR:
			case ALWAYS:
			case USER:
			case ROLE:
			case START:
			case ACTION:
			case ALGORITHM:
			case AUTO:
			case BLOCKERS:
			case CLUSTERED:
			case NONCLUSTERED:
			case COLUMNSTORE:
			case CONTENT:
			case YEARS:
			case MONTHS:
			case WEEKS:
			case DAYS:
			case MINUTES:
			case DENY:
			case DETERMINISTIC:
			case DISTRIBUTION:
			case DOCUMENT:
			case DURABILITY:
			case ENCRYPTED:
			case FILESTREAM:
			case FILETABLE:
			case FILLFACTOR:
			case FOLLOWING:
			case HASH:
			case HEAP:
			case INBOUND:
			case OUTBOUND:
			case UNBOUNDED:
			case INFINITE:
			case LOGIN:
			case MASKED:
			case MAXDOP:
			case MOVE:
			case NOCHECK:
			case OBJECT:
			case ONLINE:
			case OVER:
			case PAGE:
			case PAUSED:
			case PERIOD:
			case PERSISTED:
			case PRECEDING:
			case RANDOMIZED:
			case RANGE:
			case REBUILD:
			case REPLICATE:
			case REPLICATION:
			case RESUMABLE:
			case ROWGUIDCOL:
			case SAVE:
			case SELF:
			case SPARSE:
			case SWITCH:
			case TRAN:
			case TRANCOUNT:
			case CONTROL:
			case CONCAT:
			case TAKE:
			case OWNERSHIP:
			case DEFINITION:
			case APPLICATION:
			case ASSEMBLY:
			case SYMMETRIC:
			case ASYMMETRIC:
			case SERVER:
			case RECEIVE:
			case CHANGE:
			case TRACE:
			case TRACKING:
			case RESOURCES:
			case SETTINGS:
			case STATE:
			case AVAILABILITY:
			case CREDENTIAL:
			case ENDPOINT:
			case EVENT:
			case NOTIFICATION:
			case LINKED:
			case AUDIT:
			case DDL:
			case XML:
			case IMPERSONATE:
			case SECURABLES:
			case AUTHENTICATE:
			case EXTERNAL:
			case ACCESS:
			case ADMINISTER:
			case BULK:
			case OPERATIONS:
			case UNSAFE:
			case SHUTDOWN:
			case SCOPED:
			case CONFIGURATION:
			case DATASPACE:
			case SERVICE:
			case CERTIFICATE:
			case CONTRACT:
			case ENCRYPTION:
			case MASTER:
			case DATA:
			case SOURCE:
			case FILE:
			case FORMAT:
			case LIBRARY:
			case FULLTEXT:
			case MASK:
			case UNMASK:
			case MESSAGE:
			case REMOTE:
			case BINDING:
			case ROUTE:
			case SECURITY:
			case POLICY:
			case AGGREGATE:
			case QUEUE:
			case RULE:
			case SYNONYM:
			case COLLECTION:
			case SCRIPT:
			case KILL:
			case BACKUP:
			case LOG:
			case SHOWPLAN:
			case SUBSCRIBE:
			case QUERY:
			case NOTIFICATIONS:
			case CHECKPOINT:
			case SEQUENCE:
			case ABORT_AFTER_WAIT:
			case ALLOW_PAGE_LOCKS:
			case ALLOW_ROW_LOCKS:
			case ALL_SPARSE_COLUMNS:
			case BUCKET_COUNT:
			case COLUMNSTORE_ARCHIVE:
			case COLUMN_ENCRYPTION_KEY:
			case COLUMN_SET:
			case COMPRESSION_DELAY:
			case DATABASE_DEAULT:
			case DATA_COMPRESSION:
			case DATA_CONSISTENCY_CHECK:
			case ENCRYPTION_TYPE:
			case SYSTEM_TIME:
			case SYSTEM_VERSIONING:
			case TEXTIMAGE_ON:
			case WAIT_AT_LOW_PRIORITY:
			case STATISTICS_INCREMENTAL:
			case STATISTICS_NORECOMPUTE:
			case ROUND_ROBIN:
			case SCHEMA_AND_DATA:
			case SCHEMA_ONLY:
			case SORT_IN_TEMPDB:
			case IGNORE_DUP_KEY:
			case IMPLICIT_TRANSACTIONS:
			case MAX_DURATION:
			case MEMORY_OPTIMIZED:
			case MIGRATION_STATE:
			case PAD_INDEX:
			case REMOTE_DATA_ARCHIVE:
			case FILESTREAM_ON:
			case FILETABLE_COLLATE_FILENAME:
			case FILETABLE_DIRECTORY:
			case FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME:
			case FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME:
			case FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME:
			case FILTER_PREDICATE:
			case HISTORY_RETENTION_PERIOD:
			case HISTORY_TABLE:
			case LOCK_ESCALATION:
			case DROP_EXISTING:
			case ROW_NUMBER:
			case FIRST:
			case DATETIME2:
			case OUTPUT:
			case INSERTED:
			case DELETED:
			case FILENAME:
			case SIZE:
			case MAXSIZE:
			case FILEGROWTH:
			case UNLIMITED:
			case KB:
			case MB:
			case GB:
			case TB:
			case CONTAINS:
			case MEMORY_OPTIMIZED_DATA:
			case FILEGROUP:
			case NON_TRANSACTED_ACCESS:
			case DB_CHAINING:
			case TRUSTWORTHY:
			case FORWARD_ONLY:
			case KEYSET:
			case FAST_FORWARD:
			case SCROLL_LOCKS:
			case OPTIMISTIC:
			case TYPE_WARNING:
			case SCHEMABINDING:
			case CALLER:
			case INPUT:
			case OWNER:
			case SNAPSHOT:
			case REPEATABLE:
			case SERIALIZABLE:
			case NATIVE_COMPILATION:
			case VIEW_METADATA:
			case INSTEAD:
			case APPEND:
			case INCREMENT:
			case CACHE:
			case MINVALUE:
			case MAXVALUE:
			case RESTART:
			case LOB_COMPACTION:
			case COMPRESS_ALL_ROW_GROUPS:
			case REORGANIZE:
			case RESUME:
			case PAUSE:
			case ABORT:
			case ACCELERATED_DATABASE_RECOVERY:
			case PERSISTENT_VERSION_STORE_FILEGROUP:
			case IMMEDIATE:
			case NO_WAIT:
			case TARGET_RECOVERY_TIME:
			case SECONDS:
			case HONOR_BROKER_PRIORITY:
			case ERROR_BROKER_CONVERSATIONS:
			case NEW_BROKER:
			case DISABLE_BROKER:
			case ENABLE_BROKER:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case READ_COMMITTED_SNAPSHOT:
			case ALLOW_SNAPSHOT_ISOLATION:
			case RECURSIVE_TRIGGERS:
			case QUOTED_IDENTIFIER:
			case NUMERIC_ROUNDABORT:
			case CONCAT_NULL_YIELDS_NULL:
			case COMPATIBILITY_LEVEL:
			case ARITHABORT:
			case ANSI_WARNINGS:
			case ANSI_PADDING:
			case ANSI_NULLS:
			case ANSI_NULL_DEFAULT:
			case PAGE_VERIFY:
			case CHECKSUM:
			case TORN_PAGE_DETECTION:
			case BULK_LOGGED:
			case RECOVERY:
			case TOTAL_EXECUTION_CPU_TIME_MS:
			case TOTAL_COMPILE_CPU_TIME_MS:
			case STALE_CAPTURE_POLICY_THRESHOLD:
			case EXECUTION_COUNT:
			case QUERY_CAPTURE_POLICY:
			case WAIT_STATS_CAPTURE_MODE:
			case MAX_PLANS_PER_QUERY:
			case QUERY_CAPTURE_MODE:
			case SIZE_BASED_CLEANUP_MODE:
			case INTERVAL_LENGTH_MINUTES:
			case MAX_STORAGE_SIZE_MB:
			case DATA_FLUSH_INTERVAL_SECONDS:
			case CLEANUP_POLICY:
			case CUSTOM:
			case STALE_QUERY_THRESHOLD_DAYS:
			case OPERATION_MODE:
			case QUERY_STORE:
			case CURSOR_DEFAULT:
			case GLOBAL:
			case CURSOR_CLOSE_ON_COMMIT:
			case HOURS:
			case CHANGE_RETENTION:
			case AUTO_CLEANUP:
			case CHANGE_TRACKING:
			case AUTOMATIC_TUNING:
			case FORCE_LAST_GOOD_PLAN:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_CREATE_STATISTICS:
			case INCREMENTAL:
			case AUTO_CLOSE:
			case DATA_RETENTION:
			case TEMPORAL_HISTORY_RETENTION:
			case EDITION:
			case MIXED_PAGE_ALLOCATION:
			case DISABLED:
			case ALLOWED:
			case HADR:
			case MULTI_USER:
			case RESTRICTED_USER:
			case SINGLE_USER:
			case OFFLINE:
			case EMERGENCY:
			case SUSPEND:
			case DATE_CORRELATION_OPTIMIZATION:
			case ELASTIC_POOL:
			case SERVICE_OBJECTIVE:
			case DATABASE_NAME:
			case ALLOW_CONNECTIONS:
			case GEO:
			case NAMED:
			case DATEFIRST:
			case BACKUP_STORAGE_REDUNDANCY:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case SECONDARY:
			case FAILOVER:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case INLINE:
			case NESTED_TRIGGERS:
			case TRANSFORM_NOISE_WORDS:
			case TWO_DIGIT_YEAR_CUTOFF:
			case PERSISTENT_LOG_BUFFER:
			case DIRECTORY_NAME:
			case DATEFORMAT:
			case DELAYED_DURABILITY:
			case AUTHORIZATION:
			case TRANSFER:
			case PROVIDER:
			case SID:
			case SEARCH:
			case MEMBER:
			case JSON:
			case OPENQUERY:
			case IDENTIFIER_:
			case DELIMITED_IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(7334);
				userName();
				setState(7338);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==FOR) {
					{
					setState(7335);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==FOR) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(7336);
					match(LOGIN);
					setState(7337);
					identifier();
					}
				}

				}
				break;
			case FROM:
				enterOuterAlt(_localctx, 2);
				{
				setState(7340);
				match(FROM);
				setState(7341);
				match(EXTERNAL);
				setState(7342);
				match(PROVIDER);
				setState(7352);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(7343);
					match(WITH);
					setState(7344);
					limitedOptionsList();
					setState(7349);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA_) {
						{
						{
						setState(7345);
						match(COMMA_);
						setState(7346);
						limitedOptionsList();
						}
						}
						setState(7351);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateUserWithDefaultSchemaContext extends ParserRuleContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode LOGIN() { return getToken(SQLServerStatementParser.LOGIN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode WITHOUT() { return getToken(SQLServerStatementParser.WITHOUT, 0); }
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public TerminalNode DEFAULT_SCHEMA() { return getToken(SQLServerStatementParser.DEFAULT_SCHEMA, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(SQLServerStatementParser.FOR, 0); }
		public TerminalNode FROM() { return getToken(SQLServerStatementParser.FROM, 0); }
		public CreateUserWithDefaultSchemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserWithDefaultSchema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateUserWithDefaultSchema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateUserWithDefaultSchema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateUserWithDefaultSchema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserWithDefaultSchemaContext createUserWithDefaultSchema() throws RecognitionException {
		CreateUserWithDefaultSchemaContext _localctx = new CreateUserWithDefaultSchemaContext(_ctx, getState());
		enterRule(_localctx, 1002, RULE_createUserWithDefaultSchema);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7356);
			userName();
			setState(7362);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FROM:
			case FOR:
				{
				setState(7357);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==FOR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7358);
				match(LOGIN);
				setState(7359);
				identifier();
				}
				break;
			case WITHOUT:
				{
				setState(7360);
				match(WITHOUT);
				setState(7361);
				match(LOGIN);
				}
				break;
			case EOF:
			case SEMI_:
			case WITH:
				break;
			default:
				break;
			}
			setState(7368);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(7364);
				match(WITH);
				setState(7365);
				match(DEFAULT_SCHEMA);
				setState(7366);
				match(EQ_);
				setState(7367);
				schemaName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateUserWithAzureActiveDirectoryPrincipalClauseContext extends ParserRuleContext {
		public AzureActiveDirectoryPrincipalContext azureActiveDirectoryPrincipal() {
			return getRuleContext(AzureActiveDirectoryPrincipalContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SQLServerStatementParser.FROM, 0); }
		public TerminalNode EXTERNAL() { return getToken(SQLServerStatementParser.EXTERNAL, 0); }
		public TerminalNode PROVIDER() { return getToken(SQLServerStatementParser.PROVIDER, 0); }
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public TerminalNode DEFAULT_SCHEMA() { return getToken(SQLServerStatementParser.DEFAULT_SCHEMA, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public CreateUserWithAzureActiveDirectoryPrincipalClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserWithAzureActiveDirectoryPrincipalClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateUserWithAzureActiveDirectoryPrincipalClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateUserWithAzureActiveDirectoryPrincipalClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateUserWithAzureActiveDirectoryPrincipalClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserWithAzureActiveDirectoryPrincipalClauseContext createUserWithAzureActiveDirectoryPrincipalClause() throws RecognitionException {
		CreateUserWithAzureActiveDirectoryPrincipalClauseContext _localctx = new CreateUserWithAzureActiveDirectoryPrincipalClauseContext(_ctx, getState());
		enterRule(_localctx, 1004, RULE_createUserWithAzureActiveDirectoryPrincipalClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7370);
			azureActiveDirectoryPrincipal();
			setState(7371);
			match(FROM);
			setState(7372);
			match(EXTERNAL);
			setState(7373);
			match(PROVIDER);
			setState(7378);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(7374);
				match(WITH);
				setState(7375);
				match(DEFAULT_SCHEMA);
				setState(7376);
				match(EQ_);
				setState(7377);
				schemaName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowsPrincipalContext extends ParserRuleContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public WindowsPrincipalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowsPrincipal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterWindowsPrincipal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitWindowsPrincipal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitWindowsPrincipal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowsPrincipalContext windowsPrincipal() throws RecognitionException {
		WindowsPrincipalContext _localctx = new WindowsPrincipalContext(_ctx, getState());
		enterRule(_localctx, 1006, RULE_windowsPrincipal);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7380);
			userName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AzureActiveDirectoryPrincipalContext extends ParserRuleContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public AzureActiveDirectoryPrincipalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_azureActiveDirectoryPrincipal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAzureActiveDirectoryPrincipal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAzureActiveDirectoryPrincipal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAzureActiveDirectoryPrincipal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AzureActiveDirectoryPrincipalContext azureActiveDirectoryPrincipal() throws RecognitionException {
		AzureActiveDirectoryPrincipalContext _localctx = new AzureActiveDirectoryPrincipalContext(_ctx, getState());
		enterRule(_localctx, 1008, RULE_azureActiveDirectoryPrincipal);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7382);
			userName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UserNameContext extends ParserRuleContext {
		public IgnoredNameIdentifierContext ignoredNameIdentifier() {
			return getRuleContext(IgnoredNameIdentifierContext.class,0);
		}
		public UserNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterUserName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitUserName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitUserName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserNameContext userName() throws RecognitionException {
		UserNameContext _localctx = new UserNameContext(_ctx, getState());
		enterRule(_localctx, 1010, RULE_userName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7384);
			ignoredNameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IgnoredNameIdentifierContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DOT_() { return getToken(SQLServerStatementParser.DOT_, 0); }
		public IgnoredNameIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ignoredNameIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterIgnoredNameIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitIgnoredNameIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitIgnoredNameIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IgnoredNameIdentifierContext ignoredNameIdentifier() throws RecognitionException {
		IgnoredNameIdentifierContext _localctx = new IgnoredNameIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1012, RULE_ignoredNameIdentifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7386);
			identifier();
			setState(7389);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOT_) {
				{
				setState(7387);
				match(DOT_);
				setState(7388);
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropUserContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SQLServerStatementParser.DROP, 0); }
		public TerminalNode USER() { return getToken(SQLServerStatementParser.USER, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDropUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDropUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDropUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropUserContext dropUser() throws RecognitionException {
		DropUserContext _localctx = new DropUserContext(_ctx, getState());
		enterRule(_localctx, 1014, RULE_dropUser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7391);
			match(DROP);
			setState(7392);
			match(USER);
			setState(7394);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7393);
				ifExists();
				}
			}

			setState(7396);
			userName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterUserContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(SQLServerStatementParser.USER, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public List<SetItemContext> setItem() {
			return getRuleContexts(SetItemContext.class);
		}
		public SetItemContext setItem(int i) {
			return getRuleContext(SetItemContext.class,i);
		}
		public TerminalNode FROM() { return getToken(SQLServerStatementParser.FROM, 0); }
		public TerminalNode EXTERNAL() { return getToken(SQLServerStatementParser.EXTERNAL, 0); }
		public TerminalNode PROVIDER() { return getToken(SQLServerStatementParser.PROVIDER, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public AlterUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAlterUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAlterUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAlterUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserContext alterUser() throws RecognitionException {
		AlterUserContext _localctx = new AlterUserContext(_ctx, getState());
		enterRule(_localctx, 1016, RULE_alterUser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7398);
			match(ALTER);
			setState(7399);
			match(USER);
			setState(7400);
			userName();
			setState(7413);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				{
				setState(7401);
				match(WITH);
				setState(7402);
				setItem();
				setState(7407);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(7403);
					match(COMMA_);
					setState(7404);
					setItem();
					}
					}
					setState(7409);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case FROM:
				{
				setState(7410);
				match(FROM);
				setState(7411);
				match(EXTERNAL);
				setState(7412);
				match(PROVIDER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetItemContext extends ParserRuleContext {
		public TerminalNode NAME() { return getToken(SQLServerStatementParser.NAME, 0); }
		public List<TerminalNode> EQ_() { return getTokens(SQLServerStatementParser.EQ_); }
		public TerminalNode EQ_(int i) {
			return getToken(SQLServerStatementParser.EQ_, i);
		}
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode DEFAULT_SCHEMA() { return getToken(SQLServerStatementParser.DEFAULT_SCHEMA, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode NULL() { return getToken(SQLServerStatementParser.NULL, 0); }
		public TerminalNode LOGIN() { return getToken(SQLServerStatementParser.LOGIN, 0); }
		public TerminalNode PASSWORD() { return getToken(SQLServerStatementParser.PASSWORD, 0); }
		public List<StringLiteralsContext> stringLiterals() {
			return getRuleContexts(StringLiteralsContext.class);
		}
		public StringLiteralsContext stringLiterals(int i) {
			return getRuleContext(StringLiteralsContext.class,i);
		}
		public TerminalNode OLD_PASSWORD() { return getToken(SQLServerStatementParser.OLD_PASSWORD, 0); }
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(SQLServerStatementParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode NONE() { return getToken(SQLServerStatementParser.NONE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return getToken(SQLServerStatementParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, 0); }
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode OFF() { return getToken(SQLServerStatementParser.OFF, 0); }
		public SetItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSetItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSetItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSetItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetItemContext setItem() throws RecognitionException {
		SetItemContext _localctx = new SetItemContext(_ctx, getState());
		enterRule(_localctx, 1018, RULE_setItem);
		int _la;
		try {
			setState(7446);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(7415);
				match(NAME);
				setState(7416);
				match(EQ_);
				setState(7417);
				userName();
				}
				break;
			case DEFAULT_SCHEMA:
				enterOuterAlt(_localctx, 2);
				{
				setState(7418);
				match(DEFAULT_SCHEMA);
				setState(7419);
				match(EQ_);
				setState(7422);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TRUNCATE:
				case SCHEMA:
				case TABLE:
				case COLUMNS:
				case PRECISION:
				case FUNCTION:
				case TRIGGER:
				case CAST:
				case TRIM:
				case SUBSTRING:
				case RIGHT:
				case OFF:
				case GROUP:
				case LIMIT:
				case OFFSET:
				case SAVEPOINT:
				case BOOLEAN:
				case ARRAY:
				case DATE:
				case TIMESTAMP:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case YEAR:
				case QUARTER:
				case MONTH:
				case WEEK:
				case DAY:
				case HOUR:
				case MINUTE:
				case SECOND:
				case MICROSECOND:
				case MAX:
				case MIN:
				case SUM:
				case COUNT:
				case AVG:
				case ENABLE:
				case DISABLE:
				case INSTANCE:
				case DO:
				case DEFINER:
				case SQL:
				case CASCADED:
				case LOCAL:
				case NEXT:
				case NAME:
				case INTEGER:
				case TYPE:
				case TEXT:
				case VIEWS:
				case READ_ONLY:
				case DATABASE:
				case RETURNS:
				case DATEPART:
				case PASSWORD:
				case TARGET:
				case BINARY:
				case HIDDEN_:
				case MOD:
				case PARTITION:
				case PARTITIONS:
				case TOP:
				case ROW:
				case ROWS:
				case XOR:
				case ALWAYS:
				case USER:
				case ROLE:
				case START:
				case ACTION:
				case ALGORITHM:
				case AUTO:
				case BLOCKERS:
				case CLUSTERED:
				case NONCLUSTERED:
				case COLUMNSTORE:
				case CONTENT:
				case YEARS:
				case MONTHS:
				case WEEKS:
				case DAYS:
				case MINUTES:
				case DENY:
				case DETERMINISTIC:
				case DISTRIBUTION:
				case DOCUMENT:
				case DURABILITY:
				case ENCRYPTED:
				case FILESTREAM:
				case FILETABLE:
				case FILLFACTOR:
				case FOLLOWING:
				case HASH:
				case HEAP:
				case INBOUND:
				case OUTBOUND:
				case UNBOUNDED:
				case INFINITE:
				case LOGIN:
				case MASKED:
				case MAXDOP:
				case MOVE:
				case NOCHECK:
				case OBJECT:
				case ONLINE:
				case OVER:
				case PAGE:
				case PAUSED:
				case PERIOD:
				case PERSISTED:
				case PRECEDING:
				case RANDOMIZED:
				case RANGE:
				case REBUILD:
				case REPLICATE:
				case REPLICATION:
				case RESUMABLE:
				case ROWGUIDCOL:
				case SAVE:
				case SELF:
				case SPARSE:
				case SWITCH:
				case TRAN:
				case TRANCOUNT:
				case CONTROL:
				case CONCAT:
				case TAKE:
				case OWNERSHIP:
				case DEFINITION:
				case APPLICATION:
				case ASSEMBLY:
				case SYMMETRIC:
				case ASYMMETRIC:
				case SERVER:
				case RECEIVE:
				case CHANGE:
				case TRACE:
				case TRACKING:
				case RESOURCES:
				case SETTINGS:
				case STATE:
				case AVAILABILITY:
				case CREDENTIAL:
				case ENDPOINT:
				case EVENT:
				case NOTIFICATION:
				case LINKED:
				case AUDIT:
				case DDL:
				case XML:
				case IMPERSONATE:
				case SECURABLES:
				case AUTHENTICATE:
				case EXTERNAL:
				case ACCESS:
				case ADMINISTER:
				case BULK:
				case OPERATIONS:
				case UNSAFE:
				case SHUTDOWN:
				case SCOPED:
				case CONFIGURATION:
				case DATASPACE:
				case SERVICE:
				case CERTIFICATE:
				case CONTRACT:
				case ENCRYPTION:
				case MASTER:
				case DATA:
				case SOURCE:
				case FILE:
				case FORMAT:
				case LIBRARY:
				case FULLTEXT:
				case MASK:
				case UNMASK:
				case MESSAGE:
				case REMOTE:
				case BINDING:
				case ROUTE:
				case SECURITY:
				case POLICY:
				case AGGREGATE:
				case QUEUE:
				case RULE:
				case SYNONYM:
				case COLLECTION:
				case SCRIPT:
				case KILL:
				case BACKUP:
				case LOG:
				case SHOWPLAN:
				case SUBSCRIBE:
				case QUERY:
				case NOTIFICATIONS:
				case CHECKPOINT:
				case SEQUENCE:
				case ABORT_AFTER_WAIT:
				case ALLOW_PAGE_LOCKS:
				case ALLOW_ROW_LOCKS:
				case ALL_SPARSE_COLUMNS:
				case BUCKET_COUNT:
				case COLUMNSTORE_ARCHIVE:
				case COLUMN_ENCRYPTION_KEY:
				case COLUMN_SET:
				case COMPRESSION_DELAY:
				case DATABASE_DEAULT:
				case DATA_COMPRESSION:
				case DATA_CONSISTENCY_CHECK:
				case ENCRYPTION_TYPE:
				case SYSTEM_TIME:
				case SYSTEM_VERSIONING:
				case TEXTIMAGE_ON:
				case WAIT_AT_LOW_PRIORITY:
				case STATISTICS_INCREMENTAL:
				case STATISTICS_NORECOMPUTE:
				case ROUND_ROBIN:
				case SCHEMA_AND_DATA:
				case SCHEMA_ONLY:
				case SORT_IN_TEMPDB:
				case IGNORE_DUP_KEY:
				case IMPLICIT_TRANSACTIONS:
				case MAX_DURATION:
				case MEMORY_OPTIMIZED:
				case MIGRATION_STATE:
				case PAD_INDEX:
				case REMOTE_DATA_ARCHIVE:
				case FILESTREAM_ON:
				case FILETABLE_COLLATE_FILENAME:
				case FILETABLE_DIRECTORY:
				case FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME:
				case FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME:
				case FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME:
				case FILTER_PREDICATE:
				case HISTORY_RETENTION_PERIOD:
				case HISTORY_TABLE:
				case LOCK_ESCALATION:
				case DROP_EXISTING:
				case ROW_NUMBER:
				case FIRST:
				case DATETIME2:
				case OUTPUT:
				case INSERTED:
				case DELETED:
				case FILENAME:
				case SIZE:
				case MAXSIZE:
				case FILEGROWTH:
				case UNLIMITED:
				case KB:
				case MB:
				case GB:
				case TB:
				case CONTAINS:
				case MEMORY_OPTIMIZED_DATA:
				case FILEGROUP:
				case NON_TRANSACTED_ACCESS:
				case DB_CHAINING:
				case TRUSTWORTHY:
				case FORWARD_ONLY:
				case KEYSET:
				case FAST_FORWARD:
				case SCROLL_LOCKS:
				case OPTIMISTIC:
				case TYPE_WARNING:
				case SCHEMABINDING:
				case CALLER:
				case INPUT:
				case OWNER:
				case SNAPSHOT:
				case REPEATABLE:
				case SERIALIZABLE:
				case NATIVE_COMPILATION:
				case VIEW_METADATA:
				case INSTEAD:
				case APPEND:
				case INCREMENT:
				case CACHE:
				case MINVALUE:
				case MAXVALUE:
				case RESTART:
				case LOB_COMPACTION:
				case COMPRESS_ALL_ROW_GROUPS:
				case REORGANIZE:
				case RESUME:
				case PAUSE:
				case ABORT:
				case ACCELERATED_DATABASE_RECOVERY:
				case PERSISTENT_VERSION_STORE_FILEGROUP:
				case IMMEDIATE:
				case NO_WAIT:
				case TARGET_RECOVERY_TIME:
				case SECONDS:
				case HONOR_BROKER_PRIORITY:
				case ERROR_BROKER_CONVERSATIONS:
				case NEW_BROKER:
				case DISABLE_BROKER:
				case ENABLE_BROKER:
				case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
				case READ_COMMITTED_SNAPSHOT:
				case ALLOW_SNAPSHOT_ISOLATION:
				case RECURSIVE_TRIGGERS:
				case QUOTED_IDENTIFIER:
				case NUMERIC_ROUNDABORT:
				case CONCAT_NULL_YIELDS_NULL:
				case COMPATIBILITY_LEVEL:
				case ARITHABORT:
				case ANSI_WARNINGS:
				case ANSI_PADDING:
				case ANSI_NULLS:
				case ANSI_NULL_DEFAULT:
				case PAGE_VERIFY:
				case CHECKSUM:
				case TORN_PAGE_DETECTION:
				case BULK_LOGGED:
				case RECOVERY:
				case TOTAL_EXECUTION_CPU_TIME_MS:
				case TOTAL_COMPILE_CPU_TIME_MS:
				case STALE_CAPTURE_POLICY_THRESHOLD:
				case EXECUTION_COUNT:
				case QUERY_CAPTURE_POLICY:
				case WAIT_STATS_CAPTURE_MODE:
				case MAX_PLANS_PER_QUERY:
				case QUERY_CAPTURE_MODE:
				case SIZE_BASED_CLEANUP_MODE:
				case INTERVAL_LENGTH_MINUTES:
				case MAX_STORAGE_SIZE_MB:
				case DATA_FLUSH_INTERVAL_SECONDS:
				case CLEANUP_POLICY:
				case CUSTOM:
				case STALE_QUERY_THRESHOLD_DAYS:
				case OPERATION_MODE:
				case QUERY_STORE:
				case CURSOR_DEFAULT:
				case GLOBAL:
				case CURSOR_CLOSE_ON_COMMIT:
				case HOURS:
				case CHANGE_RETENTION:
				case AUTO_CLEANUP:
				case CHANGE_TRACKING:
				case AUTOMATIC_TUNING:
				case FORCE_LAST_GOOD_PLAN:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_CREATE_STATISTICS:
				case INCREMENTAL:
				case AUTO_CLOSE:
				case DATA_RETENTION:
				case TEMPORAL_HISTORY_RETENTION:
				case EDITION:
				case MIXED_PAGE_ALLOCATION:
				case DISABLED:
				case ALLOWED:
				case HADR:
				case MULTI_USER:
				case RESTRICTED_USER:
				case SINGLE_USER:
				case OFFLINE:
				case EMERGENCY:
				case SUSPEND:
				case DATE_CORRELATION_OPTIMIZATION:
				case ELASTIC_POOL:
				case SERVICE_OBJECTIVE:
				case DATABASE_NAME:
				case ALLOW_CONNECTIONS:
				case GEO:
				case NAMED:
				case DATEFIRST:
				case BACKUP_STORAGE_REDUNDANCY:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case SECONDARY:
				case FAILOVER:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case INLINE:
				case NESTED_TRIGGERS:
				case TRANSFORM_NOISE_WORDS:
				case TWO_DIGIT_YEAR_CUTOFF:
				case PERSISTENT_LOG_BUFFER:
				case DIRECTORY_NAME:
				case DATEFORMAT:
				case DELAYED_DURABILITY:
				case AUTHORIZATION:
				case TRANSFER:
				case PROVIDER:
				case SID:
				case SEARCH:
				case MEMBER:
				case JSON:
				case OPENQUERY:
				case IDENTIFIER_:
				case DELIMITED_IDENTIFIER_:
					{
					setState(7420);
					schemaName();
					}
					break;
				case NULL:
					{
					setState(7421);
					match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case LOGIN:
				enterOuterAlt(_localctx, 3);
				{
				setState(7424);
				match(LOGIN);
				setState(7425);
				match(EQ_);
				setState(7426);
				userName();
				}
				break;
			case PASSWORD:
				enterOuterAlt(_localctx, 4);
				{
				setState(7427);
				match(PASSWORD);
				setState(7428);
				match(EQ_);
				setState(7429);
				stringLiterals();
				setState(7433);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OLD_PASSWORD) {
					{
					setState(7430);
					match(OLD_PASSWORD);
					setState(7431);
					match(EQ_);
					setState(7432);
					stringLiterals();
					}
				}

				}
				break;
			case DEFAULT_LANGUAGE:
				enterOuterAlt(_localctx, 5);
				{
				setState(7435);
				match(DEFAULT_LANGUAGE);
				setState(7436);
				match(EQ_);
				setState(7439);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NONE:
					{
					setState(7437);
					match(NONE);
					}
					break;
				case TRUNCATE:
				case SCHEMA:
				case TABLE:
				case COLUMNS:
				case PRECISION:
				case FUNCTION:
				case TRIGGER:
				case CAST:
				case TRIM:
				case SUBSTRING:
				case RIGHT:
				case OFF:
				case GROUP:
				case LIMIT:
				case OFFSET:
				case SAVEPOINT:
				case BOOLEAN:
				case ARRAY:
				case DATE:
				case TIMESTAMP:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case YEAR:
				case QUARTER:
				case MONTH:
				case WEEK:
				case DAY:
				case HOUR:
				case MINUTE:
				case SECOND:
				case MICROSECOND:
				case MAX:
				case MIN:
				case SUM:
				case COUNT:
				case AVG:
				case ENABLE:
				case DISABLE:
				case INSTANCE:
				case DO:
				case DEFINER:
				case SQL:
				case CASCADED:
				case LOCAL:
				case NEXT:
				case NAME:
				case INTEGER:
				case TYPE:
				case TEXT:
				case VIEWS:
				case READ_ONLY:
				case DATABASE:
				case RETURNS:
				case DATEPART:
				case PASSWORD:
				case TARGET:
				case BINARY:
				case HIDDEN_:
				case MOD:
				case PARTITION:
				case PARTITIONS:
				case TOP:
				case ROW:
				case ROWS:
				case XOR:
				case ALWAYS:
				case USER:
				case ROLE:
				case START:
				case ACTION:
				case ALGORITHM:
				case AUTO:
				case BLOCKERS:
				case CLUSTERED:
				case NONCLUSTERED:
				case COLUMNSTORE:
				case CONTENT:
				case YEARS:
				case MONTHS:
				case WEEKS:
				case DAYS:
				case MINUTES:
				case DENY:
				case DETERMINISTIC:
				case DISTRIBUTION:
				case DOCUMENT:
				case DURABILITY:
				case ENCRYPTED:
				case FILESTREAM:
				case FILETABLE:
				case FILLFACTOR:
				case FOLLOWING:
				case HASH:
				case HEAP:
				case INBOUND:
				case OUTBOUND:
				case UNBOUNDED:
				case INFINITE:
				case LOGIN:
				case MASKED:
				case MAXDOP:
				case MOVE:
				case NOCHECK:
				case OBJECT:
				case ONLINE:
				case OVER:
				case PAGE:
				case PAUSED:
				case PERIOD:
				case PERSISTED:
				case PRECEDING:
				case RANDOMIZED:
				case RANGE:
				case REBUILD:
				case REPLICATE:
				case REPLICATION:
				case RESUMABLE:
				case ROWGUIDCOL:
				case SAVE:
				case SELF:
				case SPARSE:
				case SWITCH:
				case TRAN:
				case TRANCOUNT:
				case CONTROL:
				case CONCAT:
				case TAKE:
				case OWNERSHIP:
				case DEFINITION:
				case APPLICATION:
				case ASSEMBLY:
				case SYMMETRIC:
				case ASYMMETRIC:
				case SERVER:
				case RECEIVE:
				case CHANGE:
				case TRACE:
				case TRACKING:
				case RESOURCES:
				case SETTINGS:
				case STATE:
				case AVAILABILITY:
				case CREDENTIAL:
				case ENDPOINT:
				case EVENT:
				case NOTIFICATION:
				case LINKED:
				case AUDIT:
				case DDL:
				case XML:
				case IMPERSONATE:
				case SECURABLES:
				case AUTHENTICATE:
				case EXTERNAL:
				case ACCESS:
				case ADMINISTER:
				case BULK:
				case OPERATIONS:
				case UNSAFE:
				case SHUTDOWN:
				case SCOPED:
				case CONFIGURATION:
				case DATASPACE:
				case SERVICE:
				case CERTIFICATE:
				case CONTRACT:
				case ENCRYPTION:
				case MASTER:
				case DATA:
				case SOURCE:
				case FILE:
				case FORMAT:
				case LIBRARY:
				case FULLTEXT:
				case MASK:
				case UNMASK:
				case MESSAGE:
				case REMOTE:
				case BINDING:
				case ROUTE:
				case SECURITY:
				case POLICY:
				case AGGREGATE:
				case QUEUE:
				case RULE:
				case SYNONYM:
				case COLLECTION:
				case SCRIPT:
				case KILL:
				case BACKUP:
				case LOG:
				case SHOWPLAN:
				case SUBSCRIBE:
				case QUERY:
				case NOTIFICATIONS:
				case CHECKPOINT:
				case SEQUENCE:
				case ABORT_AFTER_WAIT:
				case ALLOW_PAGE_LOCKS:
				case ALLOW_ROW_LOCKS:
				case ALL_SPARSE_COLUMNS:
				case BUCKET_COUNT:
				case COLUMNSTORE_ARCHIVE:
				case COLUMN_ENCRYPTION_KEY:
				case COLUMN_SET:
				case COMPRESSION_DELAY:
				case DATABASE_DEAULT:
				case DATA_COMPRESSION:
				case DATA_CONSISTENCY_CHECK:
				case ENCRYPTION_TYPE:
				case SYSTEM_TIME:
				case SYSTEM_VERSIONING:
				case TEXTIMAGE_ON:
				case WAIT_AT_LOW_PRIORITY:
				case STATISTICS_INCREMENTAL:
				case STATISTICS_NORECOMPUTE:
				case ROUND_ROBIN:
				case SCHEMA_AND_DATA:
				case SCHEMA_ONLY:
				case SORT_IN_TEMPDB:
				case IGNORE_DUP_KEY:
				case IMPLICIT_TRANSACTIONS:
				case MAX_DURATION:
				case MEMORY_OPTIMIZED:
				case MIGRATION_STATE:
				case PAD_INDEX:
				case REMOTE_DATA_ARCHIVE:
				case FILESTREAM_ON:
				case FILETABLE_COLLATE_FILENAME:
				case FILETABLE_DIRECTORY:
				case FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME:
				case FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME:
				case FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME:
				case FILTER_PREDICATE:
				case HISTORY_RETENTION_PERIOD:
				case HISTORY_TABLE:
				case LOCK_ESCALATION:
				case DROP_EXISTING:
				case ROW_NUMBER:
				case FIRST:
				case DATETIME2:
				case OUTPUT:
				case INSERTED:
				case DELETED:
				case FILENAME:
				case SIZE:
				case MAXSIZE:
				case FILEGROWTH:
				case UNLIMITED:
				case KB:
				case MB:
				case GB:
				case TB:
				case CONTAINS:
				case MEMORY_OPTIMIZED_DATA:
				case FILEGROUP:
				case NON_TRANSACTED_ACCESS:
				case DB_CHAINING:
				case TRUSTWORTHY:
				case FORWARD_ONLY:
				case KEYSET:
				case FAST_FORWARD:
				case SCROLL_LOCKS:
				case OPTIMISTIC:
				case TYPE_WARNING:
				case SCHEMABINDING:
				case CALLER:
				case INPUT:
				case OWNER:
				case SNAPSHOT:
				case REPEATABLE:
				case SERIALIZABLE:
				case NATIVE_COMPILATION:
				case VIEW_METADATA:
				case INSTEAD:
				case APPEND:
				case INCREMENT:
				case CACHE:
				case MINVALUE:
				case MAXVALUE:
				case RESTART:
				case LOB_COMPACTION:
				case COMPRESS_ALL_ROW_GROUPS:
				case REORGANIZE:
				case RESUME:
				case PAUSE:
				case ABORT:
				case ACCELERATED_DATABASE_RECOVERY:
				case PERSISTENT_VERSION_STORE_FILEGROUP:
				case IMMEDIATE:
				case NO_WAIT:
				case TARGET_RECOVERY_TIME:
				case SECONDS:
				case HONOR_BROKER_PRIORITY:
				case ERROR_BROKER_CONVERSATIONS:
				case NEW_BROKER:
				case DISABLE_BROKER:
				case ENABLE_BROKER:
				case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
				case READ_COMMITTED_SNAPSHOT:
				case ALLOW_SNAPSHOT_ISOLATION:
				case RECURSIVE_TRIGGERS:
				case QUOTED_IDENTIFIER:
				case NUMERIC_ROUNDABORT:
				case CONCAT_NULL_YIELDS_NULL:
				case COMPATIBILITY_LEVEL:
				case ARITHABORT:
				case ANSI_WARNINGS:
				case ANSI_PADDING:
				case ANSI_NULLS:
				case ANSI_NULL_DEFAULT:
				case PAGE_VERIFY:
				case CHECKSUM:
				case TORN_PAGE_DETECTION:
				case BULK_LOGGED:
				case RECOVERY:
				case TOTAL_EXECUTION_CPU_TIME_MS:
				case TOTAL_COMPILE_CPU_TIME_MS:
				case STALE_CAPTURE_POLICY_THRESHOLD:
				case EXECUTION_COUNT:
				case QUERY_CAPTURE_POLICY:
				case WAIT_STATS_CAPTURE_MODE:
				case MAX_PLANS_PER_QUERY:
				case QUERY_CAPTURE_MODE:
				case SIZE_BASED_CLEANUP_MODE:
				case INTERVAL_LENGTH_MINUTES:
				case MAX_STORAGE_SIZE_MB:
				case DATA_FLUSH_INTERVAL_SECONDS:
				case CLEANUP_POLICY:
				case CUSTOM:
				case STALE_QUERY_THRESHOLD_DAYS:
				case OPERATION_MODE:
				case QUERY_STORE:
				case CURSOR_DEFAULT:
				case GLOBAL:
				case CURSOR_CLOSE_ON_COMMIT:
				case HOURS:
				case CHANGE_RETENTION:
				case AUTO_CLEANUP:
				case CHANGE_TRACKING:
				case AUTOMATIC_TUNING:
				case FORCE_LAST_GOOD_PLAN:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_CREATE_STATISTICS:
				case INCREMENTAL:
				case AUTO_CLOSE:
				case DATA_RETENTION:
				case TEMPORAL_HISTORY_RETENTION:
				case EDITION:
				case MIXED_PAGE_ALLOCATION:
				case DISABLED:
				case ALLOWED:
				case HADR:
				case MULTI_USER:
				case RESTRICTED_USER:
				case SINGLE_USER:
				case OFFLINE:
				case EMERGENCY:
				case SUSPEND:
				case DATE_CORRELATION_OPTIMIZATION:
				case ELASTIC_POOL:
				case SERVICE_OBJECTIVE:
				case DATABASE_NAME:
				case ALLOW_CONNECTIONS:
				case GEO:
				case NAMED:
				case DATEFIRST:
				case BACKUP_STORAGE_REDUNDANCY:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case SECONDARY:
				case FAILOVER:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case INLINE:
				case NESTED_TRIGGERS:
				case TRANSFORM_NOISE_WORDS:
				case TWO_DIGIT_YEAR_CUTOFF:
				case PERSISTENT_LOG_BUFFER:
				case DIRECTORY_NAME:
				case DATEFORMAT:
				case DELAYED_DURABILITY:
				case AUTHORIZATION:
				case TRANSFER:
				case PROVIDER:
				case SID:
				case SEARCH:
				case MEMBER:
				case JSON:
				case OPENQUERY:
				case IDENTIFIER_:
				case DELIMITED_IDENTIFIER_:
					{
					setState(7438);
					identifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				enterOuterAlt(_localctx, 6);
				{
				setState(7441);
				match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
				setState(7442);
				match(EQ_);
				setState(7444);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON || _la==OFF) {
					{
					setState(7443);
					_la = _input.LA(1);
					if ( !(_la==ON || _la==OFF) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateRoleContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SQLServerStatementParser.CREATE, 0); }
		public TerminalNode ROLE() { return getToken(SQLServerStatementParser.ROLE, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(SQLServerStatementParser.AUTHORIZATION, 0); }
		public CreateRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createRole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateRole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateRole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateRoleContext createRole() throws RecognitionException {
		CreateRoleContext _localctx = new CreateRoleContext(_ctx, getState());
		enterRule(_localctx, 1020, RULE_createRole);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7448);
			match(CREATE);
			setState(7449);
			match(ROLE);
			setState(7450);
			name();
			setState(7453);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(7451);
				match(AUTHORIZATION);
				setState(7452);
				name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropRoleContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SQLServerStatementParser.DROP, 0); }
		public TerminalNode ROLE() { return getToken(SQLServerStatementParser.ROLE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropRole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDropRole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDropRole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDropRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropRoleContext dropRole() throws RecognitionException {
		DropRoleContext _localctx = new DropRoleContext(_ctx, getState());
		enterRule(_localctx, 1022, RULE_dropRole);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7455);
			match(DROP);
			setState(7456);
			match(ROLE);
			setState(7458);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7457);
				ifExists();
				}
			}

			setState(7460);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterRoleContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode ROLE() { return getToken(SQLServerStatementParser.ROLE, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode ADD() { return getToken(SQLServerStatementParser.ADD, 0); }
		public TerminalNode MEMBER() { return getToken(SQLServerStatementParser.MEMBER, 0); }
		public PrincipalContext principal() {
			return getRuleContext(PrincipalContext.class,0);
		}
		public TerminalNode DROP() { return getToken(SQLServerStatementParser.DROP, 0); }
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public TerminalNode NAME() { return getToken(SQLServerStatementParser.NAME, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public AlterRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterRole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAlterRole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAlterRole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAlterRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterRoleContext alterRole() throws RecognitionException {
		AlterRoleContext _localctx = new AlterRoleContext(_ctx, getState());
		enterRule(_localctx, 1024, RULE_alterRole);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7462);
			match(ALTER);
			setState(7463);
			match(ROLE);
			setState(7464);
			name();
			setState(7475);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				{
				setState(7465);
				match(ADD);
				setState(7466);
				match(MEMBER);
				setState(7467);
				principal();
				}
				break;
			case DROP:
				{
				setState(7468);
				match(DROP);
				setState(7469);
				match(MEMBER);
				setState(7470);
				principal();
				}
				break;
			case WITH:
				{
				setState(7471);
				match(WITH);
				setState(7472);
				match(NAME);
				setState(7473);
				match(EQ_);
				setState(7474);
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateLoginContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SQLServerStatementParser.CREATE, 0); }
		public TerminalNode LOGIN() { return getToken(SQLServerStatementParser.LOGIN, 0); }
		public IgnoredNameIdentifierContext ignoredNameIdentifier() {
			return getRuleContext(IgnoredNameIdentifierContext.class,0);
		}
		public CreateLoginForSQLServerClauseContext createLoginForSQLServerClause() {
			return getRuleContext(CreateLoginForSQLServerClauseContext.class,0);
		}
		public CreateLoginForAzureSQLDatabaseClauseContext createLoginForAzureSQLDatabaseClause() {
			return getRuleContext(CreateLoginForAzureSQLDatabaseClauseContext.class,0);
		}
		public CreateLoginForAzureManagedInstanceClauseContext createLoginForAzureManagedInstanceClause() {
			return getRuleContext(CreateLoginForAzureManagedInstanceClauseContext.class,0);
		}
		public CreateLoginForAzureSynapseAnalyticsClauseContext createLoginForAzureSynapseAnalyticsClause() {
			return getRuleContext(CreateLoginForAzureSynapseAnalyticsClauseContext.class,0);
		}
		public CreateLoginForAnalyticsPlatformSystemClauseContext createLoginForAnalyticsPlatformSystemClause() {
			return getRuleContext(CreateLoginForAnalyticsPlatformSystemClauseContext.class,0);
		}
		public CreateLoginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLogin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateLogin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateLogin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateLogin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateLoginContext createLogin() throws RecognitionException {
		CreateLoginContext _localctx = new CreateLoginContext(_ctx, getState());
		enterRule(_localctx, 1026, RULE_createLogin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7477);
			match(CREATE);
			setState(7478);
			match(LOGIN);
			setState(7479);
			ignoredNameIdentifier();
			setState(7485);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,875,_ctx) ) {
			case 1:
				{
				setState(7480);
				createLoginForSQLServerClause();
				}
				break;
			case 2:
				{
				setState(7481);
				createLoginForAzureSQLDatabaseClause();
				}
				break;
			case 3:
				{
				setState(7482);
				createLoginForAzureManagedInstanceClause();
				}
				break;
			case 4:
				{
				setState(7483);
				createLoginForAzureSynapseAnalyticsClause();
				}
				break;
			case 5:
				{
				setState(7484);
				createLoginForAnalyticsPlatformSystemClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateLoginForSQLServerClauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public CreateLoginForSQLServerOptionListContext createLoginForSQLServerOptionList() {
			return getRuleContext(CreateLoginForSQLServerOptionListContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SQLServerStatementParser.FROM, 0); }
		public SourcesContext sources() {
			return getRuleContext(SourcesContext.class,0);
		}
		public CreateLoginForSQLServerClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLoginForSQLServerClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateLoginForSQLServerClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateLoginForSQLServerClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateLoginForSQLServerClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateLoginForSQLServerClauseContext createLoginForSQLServerClause() throws RecognitionException {
		CreateLoginForSQLServerClauseContext _localctx = new CreateLoginForSQLServerClauseContext(_ctx, getState());
		enterRule(_localctx, 1028, RULE_createLoginForSQLServerClause);
		try {
			setState(7491);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(7487);
				match(WITH);
				setState(7488);
				createLoginForSQLServerOptionList();
				}
				break;
			case FROM:
				enterOuterAlt(_localctx, 2);
				{
				setState(7489);
				match(FROM);
				setState(7490);
				sources();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateLoginForSQLServerOptionListContext extends ParserRuleContext {
		public TerminalNode PASSWORD() { return getToken(SQLServerStatementParser.PASSWORD, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public StringLiteralsContext stringLiterals() {
			return getRuleContext(StringLiteralsContext.class,0);
		}
		public HashedPasswordContext hashedPassword() {
			return getRuleContext(HashedPasswordContext.class,0);
		}
		public TerminalNode HASHED() { return getToken(SQLServerStatementParser.HASHED, 0); }
		public TerminalNode MUST_CHANGE() { return getToken(SQLServerStatementParser.MUST_CHANGE, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public List<CreateLoginForSQLServerOptionListClauseContext> createLoginForSQLServerOptionListClause() {
			return getRuleContexts(CreateLoginForSQLServerOptionListClauseContext.class);
		}
		public CreateLoginForSQLServerOptionListClauseContext createLoginForSQLServerOptionListClause(int i) {
			return getRuleContext(CreateLoginForSQLServerOptionListClauseContext.class,i);
		}
		public CreateLoginForSQLServerOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLoginForSQLServerOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateLoginForSQLServerOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateLoginForSQLServerOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateLoginForSQLServerOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateLoginForSQLServerOptionListContext createLoginForSQLServerOptionList() throws RecognitionException {
		CreateLoginForSQLServerOptionListContext _localctx = new CreateLoginForSQLServerOptionListContext(_ctx, getState());
		enterRule(_localctx, 1030, RULE_createLoginForSQLServerOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7493);
			match(PASSWORD);
			setState(7494);
			match(EQ_);
			setState(7499);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_:
			case NCHAR_TEXT:
				{
				setState(7495);
				stringLiterals();
				}
				break;
			case HEX_DIGIT_:
				{
				setState(7496);
				hashedPassword();
				setState(7497);
				match(HASHED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(7502);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MUST_CHANGE) {
				{
				setState(7501);
				match(MUST_CHANGE);
				}
			}

			setState(7513);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_) {
				{
				setState(7504);
				match(COMMA_);
				setState(7505);
				createLoginForSQLServerOptionListClause();
				setState(7510);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(7506);
					match(COMMA_);
					setState(7507);
					createLoginForSQLServerOptionListClause();
					}
					}
					setState(7512);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateLoginForSQLServerOptionListClauseContext extends ParserRuleContext {
		public TerminalNode SID() { return getToken(SQLServerStatementParser.SID, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public SidContext sid() {
			return getRuleContext(SidContext.class,0);
		}
		public TerminalNode DEFAULT_DATABASE() { return getToken(SQLServerStatementParser.DEFAULT_DATABASE, 0); }
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(SQLServerStatementParser.DEFAULT_LANGUAGE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CHECK_EXPIRATION() { return getToken(SQLServerStatementParser.CHECK_EXPIRATION, 0); }
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode OFF() { return getToken(SQLServerStatementParser.OFF, 0); }
		public TerminalNode CHECK_POLICY() { return getToken(SQLServerStatementParser.CHECK_POLICY, 0); }
		public TerminalNode CREDENTIAL() { return getToken(SQLServerStatementParser.CREDENTIAL, 0); }
		public CreateLoginForSQLServerOptionListClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLoginForSQLServerOptionListClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateLoginForSQLServerOptionListClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateLoginForSQLServerOptionListClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateLoginForSQLServerOptionListClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateLoginForSQLServerOptionListClauseContext createLoginForSQLServerOptionListClause() throws RecognitionException {
		CreateLoginForSQLServerOptionListClauseContext _localctx = new CreateLoginForSQLServerOptionListClauseContext(_ctx, getState());
		enterRule(_localctx, 1032, RULE_createLoginForSQLServerOptionListClause);
		int _la;
		try {
			setState(7533);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SID:
				enterOuterAlt(_localctx, 1);
				{
				setState(7515);
				match(SID);
				setState(7516);
				match(EQ_);
				setState(7517);
				sid();
				}
				break;
			case DEFAULT_DATABASE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7518);
				match(DEFAULT_DATABASE);
				setState(7519);
				match(EQ_);
				setState(7520);
				databaseName();
				}
				break;
			case DEFAULT_LANGUAGE:
				enterOuterAlt(_localctx, 3);
				{
				setState(7521);
				match(DEFAULT_LANGUAGE);
				setState(7522);
				match(EQ_);
				setState(7523);
				identifier();
				}
				break;
			case CHECK_EXPIRATION:
				enterOuterAlt(_localctx, 4);
				{
				setState(7524);
				match(CHECK_EXPIRATION);
				setState(7525);
				match(EQ_);
				setState(7526);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case CHECK_POLICY:
				enterOuterAlt(_localctx, 5);
				{
				setState(7527);
				match(CHECK_POLICY);
				setState(7528);
				match(EQ_);
				setState(7529);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case CREDENTIAL:
				enterOuterAlt(_localctx, 6);
				{
				setState(7530);
				match(CREDENTIAL);
				setState(7531);
				match(EQ_);
				setState(7532);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HashedPasswordContext extends ParserRuleContext {
		public TerminalNode HEX_DIGIT_() { return getToken(SQLServerStatementParser.HEX_DIGIT_, 0); }
		public HashedPasswordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hashedPassword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterHashedPassword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitHashedPassword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitHashedPassword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HashedPasswordContext hashedPassword() throws RecognitionException {
		HashedPasswordContext _localctx = new HashedPasswordContext(_ctx, getState());
		enterRule(_localctx, 1034, RULE_hashedPassword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7535);
			match(HEX_DIGIT_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SidContext extends ParserRuleContext {
		public TerminalNode NCHAR_TEXT() { return getToken(SQLServerStatementParser.NCHAR_TEXT, 0); }
		public TerminalNode HEX_DIGIT_() { return getToken(SQLServerStatementParser.HEX_DIGIT_, 0); }
		public SidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SidContext sid() throws RecognitionException {
		SidContext _localctx = new SidContext(_ctx, getState());
		enterRule(_localctx, 1036, RULE_sid);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7537);
			_la = _input.LA(1);
			if ( !(_la==HEX_DIGIT_ || _la==NCHAR_TEXT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SourcesContext extends ParserRuleContext {
		public TerminalNode WINDOWS() { return getToken(SQLServerStatementParser.WINDOWS, 0); }
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public List<WindowsOptionsContext> windowsOptions() {
			return getRuleContexts(WindowsOptionsContext.class);
		}
		public WindowsOptionsContext windowsOptions(int i) {
			return getRuleContext(WindowsOptionsContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public TerminalNode CERTIFICATE() { return getToken(SQLServerStatementParser.CERTIFICATE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ASYMMETRIC() { return getToken(SQLServerStatementParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(SQLServerStatementParser.KEY, 0); }
		public SourcesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sources; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSources(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSources(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSources(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SourcesContext sources() throws RecognitionException {
		SourcesContext _localctx = new SourcesContext(_ctx, getState());
		enterRule(_localctx, 1038, RULE_sources);
		int _la;
		try {
			setState(7556);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WINDOWS:
				enterOuterAlt(_localctx, 1);
				{
				setState(7539);
				match(WINDOWS);
				setState(7549);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(7540);
					match(WITH);
					setState(7541);
					windowsOptions();
					setState(7546);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA_) {
						{
						{
						setState(7542);
						match(COMMA_);
						setState(7543);
						windowsOptions();
						}
						}
						setState(7548);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			case CERTIFICATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7551);
				match(CERTIFICATE);
				setState(7552);
				identifier();
				}
				break;
			case ASYMMETRIC:
				enterOuterAlt(_localctx, 3);
				{
				setState(7553);
				match(ASYMMETRIC);
				setState(7554);
				match(KEY);
				setState(7555);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowsOptionsContext extends ParserRuleContext {
		public TerminalNode DEFAULT_DATABASE() { return getToken(SQLServerStatementParser.DEFAULT_DATABASE, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(SQLServerStatementParser.DEFAULT_LANGUAGE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public WindowsOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowsOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterWindowsOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitWindowsOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitWindowsOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowsOptionsContext windowsOptions() throws RecognitionException {
		WindowsOptionsContext _localctx = new WindowsOptionsContext(_ctx, getState());
		enterRule(_localctx, 1040, RULE_windowsOptions);
		try {
			setState(7564);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT_DATABASE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7558);
				match(DEFAULT_DATABASE);
				setState(7559);
				match(EQ_);
				setState(7560);
				databaseName();
				}
				break;
			case DEFAULT_LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7561);
				match(DEFAULT_LANGUAGE);
				setState(7562);
				match(EQ_);
				setState(7563);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateLoginForAzureSQLDatabaseClauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(SQLServerStatementParser.FROM, 0); }
		public TerminalNode EXTERNAL() { return getToken(SQLServerStatementParser.EXTERNAL, 0); }
		public TerminalNode PROVIDER() { return getToken(SQLServerStatementParser.PROVIDER, 0); }
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public List<CreateLoginForAzureSQLDatabaseOptionListContext> createLoginForAzureSQLDatabaseOptionList() {
			return getRuleContexts(CreateLoginForAzureSQLDatabaseOptionListContext.class);
		}
		public CreateLoginForAzureSQLDatabaseOptionListContext createLoginForAzureSQLDatabaseOptionList(int i) {
			return getRuleContext(CreateLoginForAzureSQLDatabaseOptionListContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public CreateLoginForAzureSQLDatabaseClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLoginForAzureSQLDatabaseClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateLoginForAzureSQLDatabaseClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateLoginForAzureSQLDatabaseClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateLoginForAzureSQLDatabaseClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateLoginForAzureSQLDatabaseClauseContext createLoginForAzureSQLDatabaseClause() throws RecognitionException {
		CreateLoginForAzureSQLDatabaseClauseContext _localctx = new CreateLoginForAzureSQLDatabaseClauseContext(_ctx, getState());
		enterRule(_localctx, 1042, RULE_createLoginForAzureSQLDatabaseClause);
		int _la;
		try {
			setState(7578);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FROM:
				enterOuterAlt(_localctx, 1);
				{
				setState(7566);
				match(FROM);
				setState(7567);
				match(EXTERNAL);
				setState(7568);
				match(PROVIDER);
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 2);
				{
				setState(7569);
				match(WITH);
				setState(7570);
				createLoginForAzureSQLDatabaseOptionList();
				setState(7575);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(7571);
					match(COMMA_);
					setState(7572);
					createLoginForAzureSQLDatabaseOptionList();
					}
					}
					setState(7577);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateLoginForAzureSQLDatabaseOptionListContext extends ParserRuleContext {
		public TerminalNode PASSWORD() { return getToken(SQLServerStatementParser.PASSWORD, 0); }
		public List<TerminalNode> EQ_() { return getTokens(SQLServerStatementParser.EQ_); }
		public TerminalNode EQ_(int i) {
			return getToken(SQLServerStatementParser.EQ_, i);
		}
		public StringLiteralsContext stringLiterals() {
			return getRuleContext(StringLiteralsContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(SQLServerStatementParser.COMMA_, 0); }
		public TerminalNode SID() { return getToken(SQLServerStatementParser.SID, 0); }
		public SidContext sid() {
			return getRuleContext(SidContext.class,0);
		}
		public CreateLoginForAzureSQLDatabaseOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLoginForAzureSQLDatabaseOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateLoginForAzureSQLDatabaseOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateLoginForAzureSQLDatabaseOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateLoginForAzureSQLDatabaseOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateLoginForAzureSQLDatabaseOptionListContext createLoginForAzureSQLDatabaseOptionList() throws RecognitionException {
		CreateLoginForAzureSQLDatabaseOptionListContext _localctx = new CreateLoginForAzureSQLDatabaseOptionListContext(_ctx, getState());
		enterRule(_localctx, 1044, RULE_createLoginForAzureSQLDatabaseOptionList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7580);
			match(PASSWORD);
			setState(7581);
			match(EQ_);
			setState(7582);
			stringLiterals();
			setState(7587);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,888,_ctx) ) {
			case 1:
				{
				setState(7583);
				match(COMMA_);
				setState(7584);
				match(SID);
				setState(7585);
				match(EQ_);
				setState(7586);
				sid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateLoginForAzureManagedInstanceClauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public List<AzureManagedInstanceOptionListContext> azureManagedInstanceOptionList() {
			return getRuleContexts(AzureManagedInstanceOptionListContext.class);
		}
		public AzureManagedInstanceOptionListContext azureManagedInstanceOptionList(int i) {
			return getRuleContext(AzureManagedInstanceOptionListContext.class,i);
		}
		public TerminalNode FROM() { return getToken(SQLServerStatementParser.FROM, 0); }
		public TerminalNode EXTERNAL() { return getToken(SQLServerStatementParser.EXTERNAL, 0); }
		public TerminalNode PROVIDER() { return getToken(SQLServerStatementParser.PROVIDER, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public CreateLoginForAzureManagedInstanceClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLoginForAzureManagedInstanceClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateLoginForAzureManagedInstanceClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateLoginForAzureManagedInstanceClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateLoginForAzureManagedInstanceClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateLoginForAzureManagedInstanceClauseContext createLoginForAzureManagedInstanceClause() throws RecognitionException {
		CreateLoginForAzureManagedInstanceClauseContext _localctx = new CreateLoginForAzureManagedInstanceClauseContext(_ctx, getState());
		enterRule(_localctx, 1046, RULE_createLoginForAzureManagedInstanceClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7592);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(7589);
				match(FROM);
				setState(7590);
				match(EXTERNAL);
				setState(7591);
				match(PROVIDER);
				}
			}

			setState(7594);
			match(WITH);
			setState(7595);
			azureManagedInstanceOptionList();
			setState(7600);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(7596);
				match(COMMA_);
				setState(7597);
				azureManagedInstanceOptionList();
				}
				}
				setState(7602);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AzureManagedInstanceOptionListContext extends ParserRuleContext {
		public TerminalNode PASSWORD() { return getToken(SQLServerStatementParser.PASSWORD, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public StringLiteralsContext stringLiterals() {
			return getRuleContext(StringLiteralsContext.class,0);
		}
		public TerminalNode SID() { return getToken(SQLServerStatementParser.SID, 0); }
		public SidContext sid() {
			return getRuleContext(SidContext.class,0);
		}
		public TerminalNode DEFAULT_DATABASE() { return getToken(SQLServerStatementParser.DEFAULT_DATABASE, 0); }
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(SQLServerStatementParser.DEFAULT_LANGUAGE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AzureManagedInstanceOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_azureManagedInstanceOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAzureManagedInstanceOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAzureManagedInstanceOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAzureManagedInstanceOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AzureManagedInstanceOptionListContext azureManagedInstanceOptionList() throws RecognitionException {
		AzureManagedInstanceOptionListContext _localctx = new AzureManagedInstanceOptionListContext(_ctx, getState());
		enterRule(_localctx, 1048, RULE_azureManagedInstanceOptionList);
		try {
			setState(7615);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PASSWORD:
				enterOuterAlt(_localctx, 1);
				{
				setState(7603);
				match(PASSWORD);
				setState(7604);
				match(EQ_);
				setState(7605);
				stringLiterals();
				}
				break;
			case SID:
				enterOuterAlt(_localctx, 2);
				{
				setState(7606);
				match(SID);
				setState(7607);
				match(EQ_);
				setState(7608);
				sid();
				}
				break;
			case DEFAULT_DATABASE:
				enterOuterAlt(_localctx, 3);
				{
				setState(7609);
				match(DEFAULT_DATABASE);
				setState(7610);
				match(EQ_);
				setState(7611);
				databaseName();
				}
				break;
			case DEFAULT_LANGUAGE:
				enterOuterAlt(_localctx, 4);
				{
				setState(7612);
				match(DEFAULT_LANGUAGE);
				setState(7613);
				match(EQ_);
				setState(7614);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateLoginForAzureSynapseAnalyticsClauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public CreateLoginForAzureSynapseAnalyticsOptionListContext createLoginForAzureSynapseAnalyticsOptionList() {
			return getRuleContext(CreateLoginForAzureSynapseAnalyticsOptionListContext.class,0);
		}
		public CreateLoginForAzureSynapseAnalyticsClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLoginForAzureSynapseAnalyticsClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateLoginForAzureSynapseAnalyticsClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateLoginForAzureSynapseAnalyticsClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateLoginForAzureSynapseAnalyticsClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateLoginForAzureSynapseAnalyticsClauseContext createLoginForAzureSynapseAnalyticsClause() throws RecognitionException {
		CreateLoginForAzureSynapseAnalyticsClauseContext _localctx = new CreateLoginForAzureSynapseAnalyticsClauseContext(_ctx, getState());
		enterRule(_localctx, 1050, RULE_createLoginForAzureSynapseAnalyticsClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7617);
			match(WITH);
			setState(7618);
			createLoginForAzureSynapseAnalyticsOptionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateLoginForAzureSynapseAnalyticsOptionListContext extends ParserRuleContext {
		public TerminalNode PASSWORD() { return getToken(SQLServerStatementParser.PASSWORD, 0); }
		public List<TerminalNode> EQ_() { return getTokens(SQLServerStatementParser.EQ_); }
		public TerminalNode EQ_(int i) {
			return getToken(SQLServerStatementParser.EQ_, i);
		}
		public StringLiteralsContext stringLiterals() {
			return getRuleContext(StringLiteralsContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(SQLServerStatementParser.COMMA_, 0); }
		public TerminalNode SID() { return getToken(SQLServerStatementParser.SID, 0); }
		public SidContext sid() {
			return getRuleContext(SidContext.class,0);
		}
		public CreateLoginForAzureSynapseAnalyticsOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLoginForAzureSynapseAnalyticsOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateLoginForAzureSynapseAnalyticsOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateLoginForAzureSynapseAnalyticsOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateLoginForAzureSynapseAnalyticsOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateLoginForAzureSynapseAnalyticsOptionListContext createLoginForAzureSynapseAnalyticsOptionList() throws RecognitionException {
		CreateLoginForAzureSynapseAnalyticsOptionListContext _localctx = new CreateLoginForAzureSynapseAnalyticsOptionListContext(_ctx, getState());
		enterRule(_localctx, 1052, RULE_createLoginForAzureSynapseAnalyticsOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7620);
			match(PASSWORD);
			setState(7621);
			match(EQ_);
			setState(7622);
			stringLiterals();
			setState(7627);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_) {
				{
				setState(7623);
				match(COMMA_);
				setState(7624);
				match(SID);
				setState(7625);
				match(EQ_);
				setState(7626);
				sid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateLoginForAnalyticsPlatformSystemClauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public CreateLoginForAnalyticsPlatformSystemOptionListContext createLoginForAnalyticsPlatformSystemOptionList() {
			return getRuleContext(CreateLoginForAnalyticsPlatformSystemOptionListContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SQLServerStatementParser.FROM, 0); }
		public TerminalNode WINDOWS() { return getToken(SQLServerStatementParser.WINDOWS, 0); }
		public CreateLoginForAnalyticsPlatformSystemClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLoginForAnalyticsPlatformSystemClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateLoginForAnalyticsPlatformSystemClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateLoginForAnalyticsPlatformSystemClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateLoginForAnalyticsPlatformSystemClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateLoginForAnalyticsPlatformSystemClauseContext createLoginForAnalyticsPlatformSystemClause() throws RecognitionException {
		CreateLoginForAnalyticsPlatformSystemClauseContext _localctx = new CreateLoginForAnalyticsPlatformSystemClauseContext(_ctx, getState());
		enterRule(_localctx, 1054, RULE_createLoginForAnalyticsPlatformSystemClause);
		try {
			setState(7633);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(7629);
				match(WITH);
				setState(7630);
				createLoginForAnalyticsPlatformSystemOptionList();
				}
				break;
			case FROM:
				enterOuterAlt(_localctx, 2);
				{
				setState(7631);
				match(FROM);
				setState(7632);
				match(WINDOWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateLoginForAnalyticsPlatformSystemOptionListContext extends ParserRuleContext {
		public TerminalNode PASSWORD() { return getToken(SQLServerStatementParser.PASSWORD, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public StringLiteralsContext stringLiterals() {
			return getRuleContext(StringLiteralsContext.class,0);
		}
		public TerminalNode MUST_CHANGE() { return getToken(SQLServerStatementParser.MUST_CHANGE, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public List<CreateLoginForAnalyticsPlatformSystemOptionListClauseContext> createLoginForAnalyticsPlatformSystemOptionListClause() {
			return getRuleContexts(CreateLoginForAnalyticsPlatformSystemOptionListClauseContext.class);
		}
		public CreateLoginForAnalyticsPlatformSystemOptionListClauseContext createLoginForAnalyticsPlatformSystemOptionListClause(int i) {
			return getRuleContext(CreateLoginForAnalyticsPlatformSystemOptionListClauseContext.class,i);
		}
		public CreateLoginForAnalyticsPlatformSystemOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLoginForAnalyticsPlatformSystemOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateLoginForAnalyticsPlatformSystemOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateLoginForAnalyticsPlatformSystemOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateLoginForAnalyticsPlatformSystemOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateLoginForAnalyticsPlatformSystemOptionListContext createLoginForAnalyticsPlatformSystemOptionList() throws RecognitionException {
		CreateLoginForAnalyticsPlatformSystemOptionListContext _localctx = new CreateLoginForAnalyticsPlatformSystemOptionListContext(_ctx, getState());
		enterRule(_localctx, 1056, RULE_createLoginForAnalyticsPlatformSystemOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7635);
			match(PASSWORD);
			setState(7636);
			match(EQ_);
			setState(7637);
			stringLiterals();
			setState(7639);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MUST_CHANGE) {
				{
				setState(7638);
				match(MUST_CHANGE);
				}
			}

			setState(7650);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_) {
				{
				setState(7641);
				match(COMMA_);
				setState(7642);
				createLoginForAnalyticsPlatformSystemOptionListClause();
				setState(7647);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(7643);
					match(COMMA_);
					setState(7644);
					createLoginForAnalyticsPlatformSystemOptionListClause();
					}
					}
					setState(7649);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateLoginForAnalyticsPlatformSystemOptionListClauseContext extends ParserRuleContext {
		public TerminalNode CHECK_EXPIRATION() { return getToken(SQLServerStatementParser.CHECK_EXPIRATION, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode OFF() { return getToken(SQLServerStatementParser.OFF, 0); }
		public TerminalNode CHECK_POLICY() { return getToken(SQLServerStatementParser.CHECK_POLICY, 0); }
		public CreateLoginForAnalyticsPlatformSystemOptionListClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLoginForAnalyticsPlatformSystemOptionListClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCreateLoginForAnalyticsPlatformSystemOptionListClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCreateLoginForAnalyticsPlatformSystemOptionListClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCreateLoginForAnalyticsPlatformSystemOptionListClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateLoginForAnalyticsPlatformSystemOptionListClauseContext createLoginForAnalyticsPlatformSystemOptionListClause() throws RecognitionException {
		CreateLoginForAnalyticsPlatformSystemOptionListClauseContext _localctx = new CreateLoginForAnalyticsPlatformSystemOptionListClauseContext(_ctx, getState());
		enterRule(_localctx, 1058, RULE_createLoginForAnalyticsPlatformSystemOptionListClause);
		int _la;
		try {
			setState(7658);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHECK_EXPIRATION:
				enterOuterAlt(_localctx, 1);
				{
				setState(7652);
				match(CHECK_EXPIRATION);
				setState(7653);
				match(EQ_);
				setState(7654);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case CHECK_POLICY:
				enterOuterAlt(_localctx, 2);
				{
				setState(7655);
				match(CHECK_POLICY);
				setState(7656);
				match(EQ_);
				setState(7657);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropLoginContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SQLServerStatementParser.DROP, 0); }
		public TerminalNode LOGIN() { return getToken(SQLServerStatementParser.LOGIN, 0); }
		public IgnoredNameIdentifierContext ignoredNameIdentifier() {
			return getRuleContext(IgnoredNameIdentifierContext.class,0);
		}
		public DropLoginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropLogin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterDropLogin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitDropLogin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitDropLogin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropLoginContext dropLogin() throws RecognitionException {
		DropLoginContext _localctx = new DropLoginContext(_ctx, getState());
		enterRule(_localctx, 1060, RULE_dropLogin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7660);
			match(DROP);
			setState(7661);
			match(LOGIN);
			setState(7662);
			ignoredNameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterLoginContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SQLServerStatementParser.ALTER, 0); }
		public TerminalNode LOGIN() { return getToken(SQLServerStatementParser.LOGIN, 0); }
		public IgnoredNameIdentifierContext ignoredNameIdentifier() {
			return getRuleContext(IgnoredNameIdentifierContext.class,0);
		}
		public StatusOptionClauseContext statusOptionClause() {
			return getRuleContext(StatusOptionClauseContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public List<SetOptionClauseContext> setOptionClause() {
			return getRuleContexts(SetOptionClauseContext.class);
		}
		public SetOptionClauseContext setOptionClause(int i) {
			return getRuleContext(SetOptionClauseContext.class,i);
		}
		public CryptographicCredentialsOptionClauseContext cryptographicCredentialsOptionClause() {
			return getRuleContext(CryptographicCredentialsOptionClauseContext.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(SQLServerStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(SQLServerStatementParser.COMMA_, i);
		}
		public AlterLoginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLogin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterAlterLogin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitAlterLogin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitAlterLogin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterLoginContext alterLogin() throws RecognitionException {
		AlterLoginContext _localctx = new AlterLoginContext(_ctx, getState());
		enterRule(_localctx, 1062, RULE_alterLogin);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7664);
			match(ALTER);
			setState(7665);
			match(LOGIN);
			setState(7666);
			ignoredNameIdentifier();
			setState(7678);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENABLE:
			case DISABLE:
				{
				setState(7667);
				statusOptionClause();
				}
				break;
			case WITH:
				{
				setState(7668);
				match(WITH);
				setState(7669);
				setOptionClause();
				setState(7674);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(7670);
					match(COMMA_);
					setState(7671);
					setOptionClause();
					}
					}
					setState(7676);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case DROP:
			case ADD:
				{
				setState(7677);
				cryptographicCredentialsOptionClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StatusOptionClauseContext extends ParserRuleContext {
		public TerminalNode ENABLE() { return getToken(SQLServerStatementParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(SQLServerStatementParser.DISABLE, 0); }
		public StatusOptionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statusOptionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterStatusOptionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitStatusOptionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitStatusOptionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatusOptionClauseContext statusOptionClause() throws RecognitionException {
		StatusOptionClauseContext _localctx = new StatusOptionClauseContext(_ctx, getState());
		enterRule(_localctx, 1064, RULE_statusOptionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7680);
			_la = _input.LA(1);
			if ( !(_la==ENABLE || _la==DISABLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetOptionClauseContext extends ParserRuleContext {
		public TerminalNode PASSWORD() { return getToken(SQLServerStatementParser.PASSWORD, 0); }
		public List<TerminalNode> EQ_() { return getTokens(SQLServerStatementParser.EQ_); }
		public TerminalNode EQ_(int i) {
			return getToken(SQLServerStatementParser.EQ_, i);
		}
		public List<StringLiteralsContext> stringLiterals() {
			return getRuleContexts(StringLiteralsContext.class);
		}
		public StringLiteralsContext stringLiterals(int i) {
			return getRuleContext(StringLiteralsContext.class,i);
		}
		public HashedPasswordContext hashedPassword() {
			return getRuleContext(HashedPasswordContext.class,0);
		}
		public TerminalNode HASHED() { return getToken(SQLServerStatementParser.HASHED, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(SQLServerStatementParser.OLD_PASSWORD, 0); }
		public List<PasswordOptionClauseContext> passwordOptionClause() {
			return getRuleContexts(PasswordOptionClauseContext.class);
		}
		public PasswordOptionClauseContext passwordOptionClause(int i) {
			return getRuleContext(PasswordOptionClauseContext.class,i);
		}
		public TerminalNode DEFAULT_DATABASE() { return getToken(SQLServerStatementParser.DEFAULT_DATABASE, 0); }
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(SQLServerStatementParser.DEFAULT_LANGUAGE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NAME() { return getToken(SQLServerStatementParser.NAME, 0); }
		public IgnoredNameIdentifierContext ignoredNameIdentifier() {
			return getRuleContext(IgnoredNameIdentifierContext.class,0);
		}
		public TerminalNode CHECK_POLICY() { return getToken(SQLServerStatementParser.CHECK_POLICY, 0); }
		public TerminalNode ON() { return getToken(SQLServerStatementParser.ON, 0); }
		public TerminalNode OFF() { return getToken(SQLServerStatementParser.OFF, 0); }
		public TerminalNode CHECK_EXPIRATION() { return getToken(SQLServerStatementParser.CHECK_EXPIRATION, 0); }
		public TerminalNode CREDENTIAL() { return getToken(SQLServerStatementParser.CREDENTIAL, 0); }
		public TerminalNode NO() { return getToken(SQLServerStatementParser.NO, 0); }
		public SetOptionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setOptionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterSetOptionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitSetOptionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitSetOptionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetOptionClauseContext setOptionClause() throws RecognitionException {
		SetOptionClauseContext _localctx = new SetOptionClauseContext(_ctx, getState());
		enterRule(_localctx, 1066, RULE_setOptionClause);
		int _la;
		try {
			setState(7719);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PASSWORD:
				enterOuterAlt(_localctx, 1);
				{
				setState(7682);
				match(PASSWORD);
				setState(7683);
				match(EQ_);
				setState(7688);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_:
				case NCHAR_TEXT:
					{
					setState(7684);
					stringLiterals();
					}
					break;
				case HEX_DIGIT_:
					{
					setState(7685);
					hashedPassword();
					setState(7686);
					match(HASHED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7697);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OLD_PASSWORD:
					{
					setState(7690);
					match(OLD_PASSWORD);
					setState(7691);
					match(EQ_);
					setState(7692);
					stringLiterals();
					}
					break;
				case MUST_CHANGE:
				case UNLOCK:
					{
					setState(7693);
					passwordOptionClause();
					setState(7695);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==MUST_CHANGE || _la==UNLOCK) {
						{
						setState(7694);
						passwordOptionClause();
						}
					}

					}
					break;
				case EOF:
				case COMMA_:
				case SEMI_:
					break;
				default:
					break;
				}
				}
				break;
			case DEFAULT_DATABASE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7699);
				match(DEFAULT_DATABASE);
				setState(7700);
				match(EQ_);
				setState(7701);
				databaseName();
				}
				break;
			case DEFAULT_LANGUAGE:
				enterOuterAlt(_localctx, 3);
				{
				setState(7702);
				match(DEFAULT_LANGUAGE);
				setState(7703);
				match(EQ_);
				setState(7704);
				identifier();
				}
				break;
			case NAME:
				enterOuterAlt(_localctx, 4);
				{
				setState(7705);
				match(NAME);
				setState(7706);
				match(EQ_);
				setState(7707);
				ignoredNameIdentifier();
				}
				break;
			case CHECK_POLICY:
				enterOuterAlt(_localctx, 5);
				{
				setState(7708);
				match(CHECK_POLICY);
				setState(7709);
				match(EQ_);
				setState(7710);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case CHECK_EXPIRATION:
				enterOuterAlt(_localctx, 6);
				{
				setState(7711);
				match(CHECK_EXPIRATION);
				setState(7712);
				match(EQ_);
				setState(7713);
				_la = _input.LA(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case CREDENTIAL:
				enterOuterAlt(_localctx, 7);
				{
				setState(7714);
				match(CREDENTIAL);
				setState(7715);
				match(EQ_);
				setState(7716);
				identifier();
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 8);
				{
				setState(7717);
				match(NO);
				setState(7718);
				match(CREDENTIAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PasswordOptionClauseContext extends ParserRuleContext {
		public TerminalNode MUST_CHANGE() { return getToken(SQLServerStatementParser.MUST_CHANGE, 0); }
		public TerminalNode UNLOCK() { return getToken(SQLServerStatementParser.UNLOCK, 0); }
		public PasswordOptionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_passwordOptionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterPasswordOptionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitPasswordOptionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitPasswordOptionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PasswordOptionClauseContext passwordOptionClause() throws RecognitionException {
		PasswordOptionClauseContext _localctx = new PasswordOptionClauseContext(_ctx, getState());
		enterRule(_localctx, 1068, RULE_passwordOptionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7721);
			_la = _input.LA(1);
			if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CryptographicCredentialsOptionClauseContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(SQLServerStatementParser.ADD, 0); }
		public TerminalNode CREDENTIAL() { return getToken(SQLServerStatementParser.CREDENTIAL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DROP() { return getToken(SQLServerStatementParser.DROP, 0); }
		public CryptographicCredentialsOptionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cryptographicCredentialsOptionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterCryptographicCredentialsOptionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitCryptographicCredentialsOptionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitCryptographicCredentialsOptionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CryptographicCredentialsOptionClauseContext cryptographicCredentialsOptionClause() throws RecognitionException {
		CryptographicCredentialsOptionClauseContext _localctx = new CryptographicCredentialsOptionClauseContext(_ctx, getState());
		enterRule(_localctx, 1070, RULE_cryptographicCredentialsOptionClause);
		try {
			setState(7729);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				enterOuterAlt(_localctx, 1);
				{
				setState(7723);
				match(ADD);
				setState(7724);
				match(CREDENTIAL);
				setState(7725);
				identifier();
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 2);
				{
				setState(7726);
				match(DROP);
				setState(7727);
				match(CREDENTIAL);
				setState(7728);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RevertContext extends ParserRuleContext {
		public TerminalNode REVERT() { return getToken(SQLServerStatementParser.REVERT, 0); }
		public TerminalNode WITH() { return getToken(SQLServerStatementParser.WITH, 0); }
		public TerminalNode COOKIE() { return getToken(SQLServerStatementParser.COOKIE, 0); }
		public TerminalNode EQ_() { return getToken(SQLServerStatementParser.EQ_, 0); }
		public VariableNameContext variableName() {
			return getRuleContext(VariableNameContext.class,0);
		}
		public RevertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).enterRevert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLServerStatementListener ) ((SQLServerStatementListener)listener).exitRevert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLServerStatementVisitor ) return ((SQLServerStatementVisitor<? extends T>)visitor).visitRevert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevertContext revert() throws RecognitionException {
		RevertContext _localctx = new RevertContext(_ctx, getState());
		enterRule(_localctx, 1072, RULE_revert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7731);
			match(REVERT);
			setState(7736);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(7732);
				match(WITH);
				setState(7733);
				match(COOKIE);
				setState(7734);
				match(EQ_);
				setState(7735);
				variableName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 49:
			return expr_sempred((ExprContext)_localctx, predIndex);
		case 54:
			return booleanPrimary_sempred((BooleanPrimaryContext)_localctx, predIndex);
		case 57:
			return bitExpr_sempred((BitExprContext)_localctx, predIndex);
		case 58:
			return simpleExpr_sempred((SimpleExprContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 5);
		case 1:
			return precpred(_ctx, 4);
		case 2:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean booleanPrimary_sempred(BooleanPrimaryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3:
			return precpred(_ctx, 5);
		case 4:
			return precpred(_ctx, 4);
		case 5:
			return precpred(_ctx, 3);
		case 6:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean bitExpr_sempred(BitExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7:
			return precpred(_ctx, 11);
		case 8:
			return precpred(_ctx, 10);
		case 9:
			return precpred(_ctx, 9);
		case 10:
			return precpred(_ctx, 8);
		case 11:
			return precpred(_ctx, 7);
		case 12:
			return precpred(_ctx, 6);
		case 13:
			return precpred(_ctx, 5);
		case 14:
			return precpred(_ctx, 4);
		case 15:
			return precpred(_ctx, 3);
		case 16:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean simpleExpr_sempred(SimpleExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17:
			return precpred(_ctx, 10);
		}
		return true;
	}

	private static final String _serializedATNSegment0 =
		"\u0004\u0001\u02e9\u1e3b\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001"+
		"\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004"+
		"\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007"+
		"\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b"+
		"\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007"+
		"\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007"+
		"\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007"+
		"\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007"+
		"\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007"+
		"\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007"+
		"\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007"+
		"\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002\'\u0007"+
		"\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007"+
		",\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u0007"+
		"1\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u0007"+
		"6\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0002;\u0007"+
		";\u0002<\u0007<\u0002=\u0007=\u0002>\u0007>\u0002?\u0007?\u0002@\u0007"+
		"@\u0002A\u0007A\u0002B\u0007B\u0002C\u0007C\u0002D\u0007D\u0002E\u0007"+
		"E\u0002F\u0007F\u0002G\u0007G\u0002H\u0007H\u0002I\u0007I\u0002J\u0007"+
		"J\u0002K\u0007K\u0002L\u0007L\u0002M\u0007M\u0002N\u0007N\u0002O\u0007"+
		"O\u0002P\u0007P\u0002Q\u0007Q\u0002R\u0007R\u0002S\u0007S\u0002T\u0007"+
		"T\u0002U\u0007U\u0002V\u0007V\u0002W\u0007W\u0002X\u0007X\u0002Y\u0007"+
		"Y\u0002Z\u0007Z\u0002[\u0007[\u0002\\\u0007\\\u0002]\u0007]\u0002^\u0007"+
		"^\u0002_\u0007_\u0002`\u0007`\u0002a\u0007a\u0002b\u0007b\u0002c\u0007"+
		"c\u0002d\u0007d\u0002e\u0007e\u0002f\u0007f\u0002g\u0007g\u0002h\u0007"+
		"h\u0002i\u0007i\u0002j\u0007j\u0002k\u0007k\u0002l\u0007l\u0002m\u0007"+
		"m\u0002n\u0007n\u0002o\u0007o\u0002p\u0007p\u0002q\u0007q\u0002r\u0007"+
		"r\u0002s\u0007s\u0002t\u0007t\u0002u\u0007u\u0002v\u0007v\u0002w\u0007"+
		"w\u0002x\u0007x\u0002y\u0007y\u0002z\u0007z\u0002{\u0007{\u0002|\u0007"+
		"|\u0002}\u0007}\u0002~\u0007~\u0002\u007f\u0007\u007f\u0002\u0080\u0007"+
		"\u0080\u0002\u0081\u0007\u0081\u0002\u0082\u0007\u0082\u0002\u0083\u0007"+
		"\u0083\u0002\u0084\u0007\u0084\u0002\u0085\u0007\u0085\u0002\u0086\u0007"+
		"\u0086\u0002\u0087\u0007\u0087\u0002\u0088\u0007\u0088\u0002\u0089\u0007"+
		"\u0089\u0002\u008a\u0007\u008a\u0002\u008b\u0007\u008b\u0002\u008c\u0007"+
		"\u008c\u0002\u008d\u0007\u008d\u0002\u008e\u0007\u008e\u0002\u008f\u0007"+
		"\u008f\u0002\u0090\u0007\u0090\u0002\u0091\u0007\u0091\u0002\u0092\u0007"+
		"\u0092\u0002\u0093\u0007\u0093\u0002\u0094\u0007\u0094\u0002\u0095\u0007"+
		"\u0095\u0002\u0096\u0007\u0096\u0002\u0097\u0007\u0097\u0002\u0098\u0007"+
		"\u0098\u0002\u0099\u0007\u0099\u0002\u009a\u0007\u009a\u0002\u009b\u0007"+
		"\u009b\u0002\u009c\u0007\u009c\u0002\u009d\u0007\u009d\u0002\u009e\u0007"+
		"\u009e\u0002\u009f\u0007\u009f\u0002\u00a0\u0007\u00a0\u0002\u00a1\u0007"+
		"\u00a1\u0002\u00a2\u0007\u00a2\u0002\u00a3\u0007\u00a3\u0002\u00a4\u0007"+
		"\u00a4\u0002\u00a5\u0007\u00a5\u0002\u00a6\u0007\u00a6\u0002\u00a7\u0007"+
		"\u00a7\u0002\u00a8\u0007\u00a8\u0002\u00a9\u0007\u00a9\u0002\u00aa\u0007"+
		"\u00aa\u0002\u00ab\u0007\u00ab\u0002\u00ac\u0007\u00ac\u0002\u00ad\u0007"+
		"\u00ad\u0002\u00ae\u0007\u00ae\u0002\u00af\u0007\u00af\u0002\u00b0\u0007"+
		"\u00b0\u0002\u00b1\u0007\u00b1\u0002\u00b2\u0007\u00b2\u0002\u00b3\u0007"+
		"\u00b3\u0002\u00b4\u0007\u00b4\u0002\u00b5\u0007\u00b5\u0002\u00b6\u0007"+
		"\u00b6\u0002\u00b7\u0007\u00b7\u0002\u00b8\u0007\u00b8\u0002\u00b9\u0007"+
		"\u00b9\u0002\u00ba\u0007\u00ba\u0002\u00bb\u0007\u00bb\u0002\u00bc\u0007"+
		"\u00bc\u0002\u00bd\u0007\u00bd\u0002\u00be\u0007\u00be\u0002\u00bf\u0007"+
		"\u00bf\u0002\u00c0\u0007\u00c0\u0002\u00c1\u0007\u00c1\u0002\u00c2\u0007"+
		"\u00c2\u0002\u00c3\u0007\u00c3\u0002\u00c4\u0007\u00c4\u0002\u00c5\u0007"+
		"\u00c5\u0002\u00c6\u0007\u00c6\u0002\u00c7\u0007\u00c7\u0002\u00c8\u0007"+
		"\u00c8\u0002\u00c9\u0007\u00c9\u0002\u00ca\u0007\u00ca\u0002\u00cb\u0007"+
		"\u00cb\u0002\u00cc\u0007\u00cc\u0002\u00cd\u0007\u00cd\u0002\u00ce\u0007"+
		"\u00ce\u0002\u00cf\u0007\u00cf\u0002\u00d0\u0007\u00d0\u0002\u00d1\u0007"+
		"\u00d1\u0002\u00d2\u0007\u00d2\u0002\u00d3\u0007\u00d3\u0002\u00d4\u0007"+
		"\u00d4\u0002\u00d5\u0007\u00d5\u0002\u00d6\u0007\u00d6\u0002\u00d7\u0007"+
		"\u00d7\u0002\u00d8\u0007\u00d8\u0002\u00d9\u0007\u00d9\u0002\u00da\u0007"+
		"\u00da\u0002\u00db\u0007\u00db\u0002\u00dc\u0007\u00dc\u0002\u00dd\u0007"+
		"\u00dd\u0002\u00de\u0007\u00de\u0002\u00df\u0007\u00df\u0002\u00e0\u0007"+
		"\u00e0\u0002\u00e1\u0007\u00e1\u0002\u00e2\u0007\u00e2\u0002\u00e3\u0007"+
		"\u00e3\u0002\u00e4\u0007\u00e4\u0002\u00e5\u0007\u00e5\u0002\u00e6\u0007"+
		"\u00e6\u0002\u00e7\u0007\u00e7\u0002\u00e8\u0007\u00e8\u0002\u00e9\u0007"+
		"\u00e9\u0002\u00ea\u0007\u00ea\u0002\u00eb\u0007\u00eb\u0002\u00ec\u0007"+
		"\u00ec\u0002\u00ed\u0007\u00ed\u0002\u00ee\u0007\u00ee\u0002\u00ef\u0007"+
		"\u00ef\u0002\u00f0\u0007\u00f0\u0002\u00f1\u0007\u00f1\u0002\u00f2\u0007"+
		"\u00f2\u0002\u00f3\u0007\u00f3\u0002\u00f4\u0007\u00f4\u0002\u00f5\u0007"+
		"\u00f5\u0002\u00f6\u0007\u00f6\u0002\u00f7\u0007\u00f7\u0002\u00f8\u0007"+
		"\u00f8\u0002\u00f9\u0007\u00f9\u0002\u00fa\u0007\u00fa\u0002\u00fb\u0007"+
		"\u00fb\u0002\u00fc\u0007\u00fc\u0002\u00fd\u0007\u00fd\u0002\u00fe\u0007"+
		"\u00fe\u0002\u00ff\u0007\u00ff\u0002\u0100\u0007\u0100\u0002\u0101\u0007"+
		"\u0101\u0002\u0102\u0007\u0102\u0002\u0103\u0007\u0103\u0002\u0104\u0007"+
		"\u0104\u0002\u0105\u0007\u0105\u0002\u0106\u0007\u0106\u0002\u0107\u0007"+
		"\u0107\u0002\u0108\u0007\u0108\u0002\u0109\u0007\u0109\u0002\u010a\u0007"+
		"\u010a\u0002\u010b\u0007\u010b\u0002\u010c\u0007\u010c\u0002\u010d\u0007"+
		"\u010d\u0002\u010e\u0007\u010e\u0002\u010f\u0007\u010f\u0002\u0110\u0007"+
		"\u0110\u0002\u0111\u0007\u0111\u0002\u0112\u0007\u0112\u0002\u0113\u0007"+
		"\u0113\u0002\u0114\u0007\u0114\u0002\u0115\u0007\u0115\u0002\u0116\u0007"+
		"\u0116\u0002\u0117\u0007\u0117\u0002\u0118\u0007\u0118\u0002\u0119\u0007"+
		"\u0119\u0002\u011a\u0007\u011a\u0002\u011b\u0007\u011b\u0002\u011c\u0007"+
		"\u011c\u0002\u011d\u0007\u011d\u0002\u011e\u0007\u011e\u0002\u011f\u0007"+
		"\u011f\u0002\u0120\u0007\u0120\u0002\u0121\u0007\u0121\u0002\u0122\u0007"+
		"\u0122\u0002\u0123\u0007\u0123\u0002\u0124\u0007\u0124\u0002\u0125\u0007"+
		"\u0125\u0002\u0126\u0007\u0126\u0002\u0127\u0007\u0127\u0002\u0128\u0007"+
		"\u0128\u0002\u0129\u0007\u0129\u0002\u012a\u0007\u012a\u0002\u012b\u0007"+
		"\u012b\u0002\u012c\u0007\u012c\u0002\u012d\u0007\u012d\u0002\u012e\u0007"+
		"\u012e\u0002\u012f\u0007\u012f\u0002\u0130\u0007\u0130\u0002\u0131\u0007"+
		"\u0131\u0002\u0132\u0007\u0132\u0002\u0133\u0007\u0133\u0002\u0134\u0007"+
		"\u0134\u0002\u0135\u0007\u0135\u0002\u0136\u0007\u0136\u0002\u0137\u0007"+
		"\u0137\u0002\u0138\u0007\u0138\u0002\u0139\u0007\u0139\u0002\u013a\u0007"+
		"\u013a\u0002\u013b\u0007\u013b\u0002\u013c\u0007\u013c\u0002\u013d\u0007"+
		"\u013d\u0002\u013e\u0007\u013e\u0002\u013f\u0007\u013f\u0002\u0140\u0007"+
		"\u0140\u0002\u0141\u0007\u0141\u0002\u0142\u0007\u0142\u0002\u0143\u0007"+
		"\u0143\u0002\u0144\u0007\u0144\u0002\u0145\u0007\u0145\u0002\u0146\u0007"+
		"\u0146\u0002\u0147\u0007\u0147\u0002\u0148\u0007\u0148\u0002\u0149\u0007"+
		"\u0149\u0002\u014a\u0007\u014a\u0002\u014b\u0007\u014b\u0002\u014c\u0007"+
		"\u014c\u0002\u014d\u0007\u014d\u0002\u014e\u0007\u014e\u0002\u014f\u0007"+
		"\u014f\u0002\u0150\u0007\u0150\u0002\u0151\u0007\u0151\u0002\u0152\u0007"+
		"\u0152\u0002\u0153\u0007\u0153\u0002\u0154\u0007\u0154\u0002\u0155\u0007"+
		"\u0155\u0002\u0156\u0007\u0156\u0002\u0157\u0007\u0157\u0002\u0158\u0007"+
		"\u0158\u0002\u0159\u0007\u0159\u0002\u015a\u0007\u015a\u0002\u015b\u0007"+
		"\u015b\u0002\u015c\u0007\u015c\u0002\u015d\u0007\u015d\u0002\u015e\u0007"+
		"\u015e\u0002\u015f\u0007\u015f\u0002\u0160\u0007\u0160\u0002\u0161\u0007"+
		"\u0161\u0002\u0162\u0007\u0162\u0002\u0163\u0007\u0163\u0002\u0164\u0007"+
		"\u0164\u0002\u0165\u0007\u0165\u0002\u0166\u0007\u0166\u0002\u0167\u0007"+
		"\u0167\u0002\u0168\u0007\u0168\u0002\u0169\u0007\u0169\u0002\u016a\u0007"+
		"\u016a\u0002\u016b\u0007\u016b\u0002\u016c\u0007\u016c\u0002\u016d\u0007"+
		"\u016d\u0002\u016e\u0007\u016e\u0002\u016f\u0007\u016f\u0002\u0170\u0007"+
		"\u0170\u0002\u0171\u0007\u0171\u0002\u0172\u0007\u0172\u0002\u0173\u0007"+
		"\u0173\u0002\u0174\u0007\u0174\u0002\u0175\u0007\u0175\u0002\u0176\u0007"+
		"\u0176\u0002\u0177\u0007\u0177\u0002\u0178\u0007\u0178\u0002\u0179\u0007"+
		"\u0179\u0002\u017a\u0007\u017a\u0002\u017b\u0007\u017b\u0002\u017c\u0007"+
		"\u017c\u0002\u017d\u0007\u017d\u0002\u017e\u0007\u017e\u0002\u017f\u0007"+
		"\u017f\u0002\u0180\u0007\u0180\u0002\u0181\u0007\u0181\u0002\u0182\u0007"+
		"\u0182\u0002\u0183\u0007\u0183\u0002\u0184\u0007\u0184\u0002\u0185\u0007"+
		"\u0185\u0002\u0186\u0007\u0186\u0002\u0187\u0007\u0187\u0002\u0188\u0007"+
		"\u0188\u0002\u0189\u0007\u0189\u0002\u018a\u0007\u018a\u0002\u018b\u0007"+
		"\u018b\u0002\u018c\u0007\u018c\u0002\u018d\u0007\u018d\u0002\u018e\u0007"+
		"\u018e\u0002\u018f\u0007\u018f\u0002\u0190\u0007\u0190\u0002\u0191\u0007"+
		"\u0191\u0002\u0192\u0007\u0192\u0002\u0193\u0007\u0193\u0002\u0194\u0007"+
		"\u0194\u0002\u0195\u0007\u0195\u0002\u0196\u0007\u0196\u0002\u0197\u0007"+
		"\u0197\u0002\u0198\u0007\u0198\u0002\u0199\u0007\u0199\u0002\u019a\u0007"+
		"\u019a\u0002\u019b\u0007\u019b\u0002\u019c\u0007\u019c\u0002\u019d\u0007"+
		"\u019d\u0002\u019e\u0007\u019e\u0002\u019f\u0007\u019f\u0002\u01a0\u0007"+
		"\u01a0\u0002\u01a1\u0007\u01a1\u0002\u01a2\u0007\u01a2\u0002\u01a3\u0007"+
		"\u01a3\u0002\u01a4\u0007\u01a4\u0002\u01a5\u0007\u01a5\u0002\u01a6\u0007"+
		"\u01a6\u0002\u01a7\u0007\u01a7\u0002\u01a8\u0007\u01a8\u0002\u01a9\u0007"+
		"\u01a9\u0002\u01aa\u0007\u01aa\u0002\u01ab\u0007\u01ab\u0002\u01ac\u0007"+
		"\u01ac\u0002\u01ad\u0007\u01ad\u0002\u01ae\u0007\u01ae\u0002\u01af\u0007"+
		"\u01af\u0002\u01b0\u0007\u01b0\u0002\u01b1\u0007\u01b1\u0002\u01b2\u0007"+
		"\u01b2\u0002\u01b3\u0007\u01b3\u0002\u01b4\u0007\u01b4\u0002\u01b5\u0007"+
		"\u01b5\u0002\u01b6\u0007\u01b6\u0002\u01b7\u0007\u01b7\u0002\u01b8\u0007"+
		"\u01b8\u0002\u01b9\u0007\u01b9\u0002\u01ba\u0007\u01ba\u0002\u01bb\u0007"+
		"\u01bb\u0002\u01bc\u0007\u01bc\u0002\u01bd\u0007\u01bd\u0002\u01be\u0007"+
		"\u01be\u0002\u01bf\u0007\u01bf\u0002\u01c0\u0007\u01c0\u0002\u01c1\u0007"+
		"\u01c1\u0002\u01c2\u0007\u01c2\u0002\u01c3\u0007\u01c3\u0002\u01c4\u0007"+
		"\u01c4\u0002\u01c5\u0007\u01c5\u0002\u01c6\u0007\u01c6\u0002\u01c7\u0007"+
		"\u01c7\u0002\u01c8\u0007\u01c8\u0002\u01c9\u0007\u01c9\u0002\u01ca\u0007"+
		"\u01ca\u0002\u01cb\u0007\u01cb\u0002\u01cc\u0007\u01cc\u0002\u01cd\u0007"+
		"\u01cd\u0002\u01ce\u0007\u01ce\u0002\u01cf\u0007\u01cf\u0002\u01d0\u0007"+
		"\u01d0\u0002\u01d1\u0007\u01d1\u0002\u01d2\u0007\u01d2\u0002\u01d3\u0007"+
		"\u01d3\u0002\u01d4\u0007\u01d4\u0002\u01d5\u0007\u01d5\u0002\u01d6\u0007"+
		"\u01d6\u0002\u01d7\u0007\u01d7\u0002\u01d8\u0007\u01d8\u0002\u01d9\u0007"+
		"\u01d9\u0002\u01da\u0007\u01da\u0002\u01db\u0007\u01db\u0002\u01dc\u0007"+
		"\u01dc\u0002\u01dd\u0007\u01dd\u0002\u01de\u0007\u01de\u0002\u01df\u0007"+
		"\u01df\u0002\u01e0\u0007\u01e0\u0002\u01e1\u0007\u01e1\u0002\u01e2\u0007"+
		"\u01e2\u0002\u01e3\u0007\u01e3\u0002\u01e4\u0007\u01e4\u0002\u01e5\u0007"+
		"\u01e5\u0002\u01e6\u0007\u01e6\u0002\u01e7\u0007\u01e7\u0002\u01e8\u0007"+
		"\u01e8\u0002\u01e9\u0007\u01e9\u0002\u01ea\u0007\u01ea\u0002\u01eb\u0007"+
		"\u01eb\u0002\u01ec\u0007\u01ec\u0002\u01ed\u0007\u01ed\u0002\u01ee\u0007"+
		"\u01ee\u0002\u01ef\u0007\u01ef\u0002\u01f0\u0007\u01f0\u0002\u01f1\u0007"+
		"\u01f1\u0002\u01f2\u0007\u01f2\u0002\u01f3\u0007\u01f3\u0002\u01f4\u0007"+
		"\u01f4\u0002\u01f5\u0007\u01f5\u0002\u01f6\u0007\u01f6\u0002\u01f7\u0007"+
		"\u01f7\u0002\u01f8\u0007\u01f8\u0002\u01f9\u0007\u01f9\u0002\u01fa\u0007"+
		"\u01fa\u0002\u01fb\u0007\u01fb\u0002\u01fc\u0007\u01fc\u0002\u01fd\u0007"+
		"\u01fd\u0002\u01fe\u0007\u01fe\u0002\u01ff\u0007\u01ff\u0002\u0200\u0007"+
		"\u0200\u0002\u0201\u0007\u0201\u0002\u0202\u0007\u0202\u0002\u0203\u0007"+
		"\u0203\u0002\u0204\u0007\u0204\u0002\u0205\u0007\u0205\u0002\u0206\u0007"+
		"\u0206\u0002\u0207\u0007\u0207\u0002\u0208\u0007\u0208\u0002\u0209\u0007"+
		"\u0209\u0002\u020a\u0007\u020a\u0002\u020b\u0007\u020b\u0002\u020c\u0007"+
		"\u020c\u0002\u020d\u0007\u020d\u0002\u020e\u0007\u020e\u0002\u020f\u0007"+
		"\u020f\u0002\u0210\u0007\u0210\u0002\u0211\u0007\u0211\u0002\u0212\u0007"+
		"\u0212\u0002\u0213\u0007\u0213\u0002\u0214\u0007\u0214\u0002\u0215\u0007"+
		"\u0215\u0002\u0216\u0007\u0216\u0002\u0217\u0007\u0217\u0002\u0218\u0007"+
		"\u0218\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0003\u0000\u046f\b\u0000\u0001\u0000\u0003\u0000\u0472\b\u0000"+
		"\u0001\u0000\u0001\u0000\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002"+
		"\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0003\u0002\u0484\b\u0002"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0004\u0001\u0004"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0003\u0005\u0490\b\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0003\u0005\u0496\b\u0005"+
		"\u0003\u0005\u0498\b\u0005\u0003\u0005\u049a\b\u0005\u0001\u0006\u0001"+
		"\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0003\u0006\u04a1\b\u0006\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u04a7\b\u0007\u0003"+
		"\u0007\u04a9\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0003\u0007\u04b1\b\u0007\u0001\b\u0001\b\u0003\b\u04b5"+
		"\b\b\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0003\t\u04bd\b\t"+
		"\u0001\n\u0001\n\u0003\n\u04c1\b\n\u0001\u000b\u0001\u000b\u0001\u000b"+
		"\u0001\u000b\u0003\u000b\u04c7\b\u000b\u0001\f\u0001\f\u0001\r\u0001\r"+
		"\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0003\r\u04d2\b\r\u0001\u000e"+
		"\u0001\u000e\u0001\u000f\u0003\u000f\u04d7\b\u000f\u0001\u000f\u0001\u000f"+
		"\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010"+
		"\u0001\u0010\u0003\u0010\u04e2\b\u0010\u0001\u0011\u0001\u0011\u0001\u0012"+
		"\u0001\u0012\u0001\u0013\u0001\u0013\u0001\u0014\u0001\u0014\u0001\u0015"+
		"\u0001\u0015\u0003\u0015\u04ee\b\u0015\u0001\u0016\u0001\u0016\u0003\u0016"+
		"\u04f2\b\u0016\u0001\u0017\u0001\u0017\u0001\u0018\u0001\u0018\u0001\u0019"+
		"\u0001\u0019\u0001\u001a\u0001\u001a\u0001\u001b\u0001\u001b\u0001\u001b"+
		"\u0003\u001b\u04ff\b\u001b\u0001\u001b\u0001\u001b\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0003\u001c\u0506\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0003\u001c\u050b\b\u001c\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d"+
		"\u0510\b\u001d\u0001\u001d\u0001\u001d\u0001\u001e\u0001\u001e\u0001\u001e"+
		"\u0003\u001e\u0517\b\u001e\u0001\u001e\u0001\u001e\u0001\u001f\u0001\u001f"+
		"\u0001\u001f\u0003\u001f\u051e\b\u001f\u0001\u001f\u0001\u001f\u0001 "+
		"\u0001 \u0001 \u0003 \u0525\b \u0001 \u0003 \u0528\b \u0001 \u0003 \u052b"+
		"\b \u0001 \u0001 \u0001!\u0001!\u0001!\u0003!\u0532\b!\u0001!\u0001!\u0001"+
		"\"\u0001\"\u0001#\u0001#\u0001$\u0001$\u0001$\u0003$\u053d\b$\u0001$\u0001"+
		"$\u0001$\u0003$\u0542\b$\u0001$\u0001$\u0003$\u0546\b$\u0001%\u0001%\u0001"+
		"%\u0001%\u0001%\u0001&\u0001&\u0001\'\u0001\'\u0001(\u0001(\u0001(\u0001"+
		"(\u0005(\u0555\b(\n(\f(\u0558\t(\u0001(\u0001(\u0001)\u0001)\u0001)\u0001"+
		")\u0005)\u0560\b)\n)\f)\u0563\t)\u0001)\u0001)\u0001*\u0003*\u0568\b*"+
		"\u0001*\u0001*\u0001*\u0005*\u056d\b*\n*\f*\u0570\t*\u0001*\u0003*\u0573"+
		"\b*\u0001+\u0001+\u0001,\u0001,\u0001-\u0001-\u0001.\u0001.\u0001.\u0003"+
		".\u057e\b.\u0001/\u0001/\u0001/\u0001/\u0003/\u0584\b/\u0003/\u0586\b"+
		"/\u0001/\u0001/\u00010\u00030\u058b\b0\u00010\u00010\u00011\u00011\u0001"+
		"1\u00011\u00011\u00011\u00011\u00011\u00011\u00031\u0598\b1\u00011\u0001"+
		"1\u00011\u00011\u00011\u00011\u00011\u00011\u00011\u00011\u00011\u0001"+
		"1\u00051\u05a6\b1\n1\f1\u05a9\t1\u00012\u00012\u00013\u00013\u00014\u0001"+
		"4\u00034\u05b1\b4\u00014\u00014\u00014\u00015\u00015\u00016\u00016\u0001"+
		"6\u00016\u00016\u00016\u00036\u05be\b6\u00016\u00016\u00016\u00016\u0001"+
		"6\u00016\u00016\u00016\u00016\u00016\u00016\u00016\u00016\u00056\u05cd"+
		"\b6\n6\f6\u05d0\t6\u00017\u00017\u00018\u00018\u00038\u05d6\b8\u00018"+
		"\u00018\u00018\u00018\u00018\u00038\u05dd\b8\u00018\u00018\u00018\u0001"+
		"8\u00018\u00058\u05e4\b8\n8\f8\u05e7\t8\u00018\u00018\u00018\u00018\u0003"+
		"8\u05ed\b8\u00018\u00018\u00018\u00018\u00018\u00018\u00018\u00038\u05f6"+
		"\b8\u00018\u00018\u00018\u00018\u00038\u05fc\b8\u00018\u00038\u05ff\b"+
		"8\u00019\u00019\u00019\u00019\u00019\u00019\u00019\u00019\u00019\u0001"+
		"9\u00019\u00019\u00019\u00019\u00019\u00019\u00019\u00019\u00019\u0001"+
		"9\u00019\u00019\u00019\u00019\u00019\u00019\u00019\u00019\u00019\u0001"+
		"9\u00019\u00019\u00019\u00059\u0622\b9\n9\f9\u0625\t9\u0001:\u0001:\u0001"+
		":\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0003:\u0632"+
		"\b:\u0001:\u0001:\u0003:\u0636\b:\u0001:\u0001:\u0001:\u0001:\u0005:\u063c"+
		"\b:\n:\f:\u063f\t:\u0001:\u0001:\u0001:\u0003:\u0644\b:\u0001:\u0001:"+
		"\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0005:\u064f\b:\n:\f"+
		":\u0652\t:\u0001:\u0001:\u0005:\u0656\b:\n:\f:\u0659\t:\u0001:\u0001:"+
		"\u0001:\u0003:\u065e\b:\u0001:\u0001:\u0001:\u0003:\u0663\b:\u0001:\u0001"+
		":\u0001:\u0005:\u0668\b:\n:\f:\u066b\t:\u0001;\u0001;\u0001;\u0003;\u0670"+
		"\b;\u0001<\u0001<\u0001<\u0003<\u0675\b<\u0001<\u0001<\u0001<\u0005<\u067a"+
		"\b<\n<\f<\u067d\t<\u0001<\u0003<\u0680\b<\u0001<\u0001<\u0001=\u0001="+
		"\u0001>\u0001>\u0001?\u0001?\u0001?\u0001?\u0001?\u0001?\u0001?\u0001"+
		"?\u0001?\u0001?\u0001?\u0003?\u0693\b?\u0001@\u0001@\u0001@\u0001@\u0003"+
		"@\u0699\b@\u0001@\u0003@\u069c\b@\u0001@\u0001@\u0001@\u0001@\u0001@\u0001"+
		"@\u0001@\u0001@\u0003@\u06a6\b@\u0001@\u0001@\u0001@\u0003@\u06ab\b@\u0001"+
		"A\u0001A\u0001B\u0001B\u0001B\u0001B\u0001B\u0003B\u06b4\bB\u0001B\u0001"+
		"B\u0001B\u0001B\u0001B\u0001B\u0001B\u0001B\u0001C\u0001C\u0001C\u0003"+
		"C\u06c1\bC\u0001D\u0001D\u0001D\u0001D\u0001D\u0001E\u0001E\u0001E\u0001"+
		"E\u0001E\u0001E\u0001E\u0001E\u0001E\u0003E\u06d1\bE\u0001F\u0001F\u0001"+
		"F\u0001F\u0001F\u0001F\u0001F\u0001F\u0001F\u0001F\u0001F\u0003F\u06de"+
		"\bF\u0001F\u0001F\u0001G\u0001G\u0003G\u06e4\bG\u0001H\u0001H\u0001H\u0001"+
		"H\u0001H\u0001H\u0001H\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001"+
		"I\u0003I\u06f4\bI\u0001I\u0001I\u0001J\u0001J\u0003J\u06fa\bJ\u0001K\u0001"+
		"K\u0001K\u0001K\u0001K\u0005K\u0701\bK\nK\fK\u0704\tK\u0001K\u0003K\u0707"+
		"\bK\u0003K\u0709\bK\u0001K\u0001K\u0001L\u0001L\u0001L\u0001L\u0001L\u0005"+
		"L\u0712\bL\nL\fL\u0715\tL\u0001L\u0003L\u0718\bL\u0001L\u0001L\u0001M"+
		"\u0001M\u0001M\u0001M\u0001N\u0001N\u0001N\u0001N\u0001N\u0001N\u0003"+
		"N\u0726\bN\u0001O\u0001O\u0001O\u0001O\u0001O\u0005O\u072d\bO\nO\fO\u0730"+
		"\tO\u0001O\u0001O\u0003O\u0734\bO\u0001O\u0001O\u0001P\u0001P\u0001P\u0001"+
		"P\u0001P\u0003P\u073d\bP\u0001P\u0001P\u0003P\u0741\bP\u0001Q\u0001Q\u0001"+
		"Q\u0001Q\u0001Q\u0005Q\u0748\bQ\nQ\fQ\u074b\tQ\u0001Q\u0001Q\u0001R\u0001"+
		"R\u0001R\u0003R\u0752\bR\u0001R\u0001R\u0003R\u0756\bR\u0001S\u0001S\u0001"+
		"S\u0001S\u0001S\u0001S\u0001S\u0001S\u0001S\u0001S\u0001S\u0003S\u0763"+
		"\bS\u0001S\u0001S\u0001S\u0003S\u0768\bS\u0001S\u0001S\u0001S\u0001S\u0001"+
		"S\u0001S\u0001S\u0001S\u0005S\u0772\bS\nS\fS\u0775\tS\u0001S\u0001S\u0003"+
		"S\u0779\bS\u0001T\u0001T\u0001T\u0001T\u0001T\u0001T\u0001T\u0001U\u0001"+
		"U\u0003U\u0784\bU\u0001V\u0001V\u0001V\u0001V\u0001V\u0005V\u078b\bV\n"+
		"V\fV\u078e\tV\u0001V\u0003V\u0791\bV\u0001V\u0001V\u0001W\u0001W\u0001"+
		"W\u0003W\u0798\bW\u0001W\u0001W\u0001W\u0001W\u0001W\u0003W\u079f\bW\u0001"+
		"X\u0001X\u0003X\u07a3\bX\u0001X\u0004X\u07a6\bX\u000bX\fX\u07a7\u0001"+
		"X\u0003X\u07ab\bX\u0001X\u0001X\u0001Y\u0001Y\u0001Y\u0001Y\u0001Y\u0001"+
		"Z\u0001Z\u0001Z\u0001[\u0001[\u0001[\u0001[\u0003[\u07bb\b[\u0001\\\u0001"+
		"\\\u0001\\\u0001\\\u0001\\\u0005\\\u07c2\b\\\n\\\f\\\u07c5\t\\\u0001\\"+
		"\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0003"+
		"\\\u07d0\b\\\u0003\\\u07d2\b\\\u0001]\u0001]\u0001]\u0003]\u07d7\b]\u0001"+
		"]\u0001]\u0003]\u07db\b]\u0001]\u0003]\u07de\b]\u0001^\u0001^\u0001^\u0003"+
		"^\u07e3\b^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001^\u0003^\u07ec"+
		"\b^\u0001^\u0001^\u0001^\u0003^\u07f1\b^\u0001_\u0001_\u0001`\u0001`\u0001"+
		"`\u0001`\u0003`\u07f9\b`\u0001`\u0001`\u0001a\u0001a\u0001a\u0001a\u0001"+
		"a\u0001a\u0001a\u0001a\u0003a\u0805\ba\u0001a\u0001a\u0001b\u0001b\u0001"+
		"b\u0001b\u0001b\u0003b\u080e\bb\u0001b\u0001b\u0001b\u0001b\u0003b\u0814"+
		"\bb\u0001c\u0001c\u0001c\u0001c\u0001c\u0003c\u081b\bc\u0001c\u0001c\u0001"+
		"d\u0001d\u0001d\u0001e\u0001e\u0001e\u0003e\u0825\be\u0001e\u0003e\u0828"+
		"\be\u0001e\u0003e\u082b\be\u0001e\u0001e\u0001f\u0001f\u0001f\u0001f\u0001"+
		"f\u0005f\u0834\bf\nf\ff\u0837\tf\u0001g\u0001g\u0001g\u0001h\u0001h\u0003"+
		"h\u083e\bh\u0001i\u0001i\u0001i\u0001i\u0001i\u0001j\u0001j\u0003j\u0847"+
		"\bj\u0001k\u0001k\u0001k\u0001k\u0001k\u0001k\u0003k\u084f\bk\u0001l\u0001"+
		"l\u0001l\u0001l\u0001l\u0001l\u0003l\u0857\bl\u0001m\u0001m\u0003m\u085b"+
		"\bm\u0001n\u0001n\u0001n\u0001n\u0001n\u0001n\u0001n\u0001n\u0001n\u0001"+
		"n\u0001n\u0003n\u0868\bn\u0003n\u086a\bn\u0001o\u0001o\u0001o\u0001o\u0001"+
		"p\u0001p\u0001p\u0003p\u0873\bp\u0001q\u0001q\u0001q\u0001r\u0001r\u0001"+
		"s\u0001s\u0001s\u0001t\u0001t\u0001t\u0001t\u0001t\u0001t\u0001u\u0001"+
		"u\u0001u\u0005u\u0886\bu\nu\fu\u0889\tu\u0001v\u0001v\u0003v\u088d\bv"+
		"\u0001w\u0001w\u0001w\u0001w\u0001x\u0001x\u0001x\u0001x\u0001x\u0001"+
		"x\u0003x\u0899\bx\u0001x\u0001x\u0001x\u0001x\u0001x\u0001x\u0001y\u0001"+
		"y\u0001y\u0001y\u0001y\u0003y\u08a6\by\u0001z\u0001z\u0001{\u0001{\u0001"+
		"{\u0005{\u08ad\b{\n{\f{\u08b0\t{\u0001|\u0001|\u0001}\u0001}\u0001~\u0001"+
		"~\u0001~\u0001~\u0001~\u0001~\u0003~\u08bc\b~\u0001\u007f\u0001\u007f"+
		"\u0001\u0080\u0001\u0080\u0001\u0081\u0001\u0081\u0001\u0082\u0001\u0082"+
		"\u0001\u0083\u0001\u0083\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0085"+
		"\u0001\u0085\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0003\u0086"+
		"\u08d1\b\u0086\u0001\u0086\u0001\u0086\u0001\u0087\u0005\u0087\u08d6\b"+
		"\u0087\n\u0087\f\u0087\u08d9\t\u0087\u0001\u0087\u0001\u0087\u0005\u0087"+
		"\u08dd\b\u0087\n\u0087\f\u0087\u08e0\t\u0087\u0001\u0088\u0001\u0088\u0001"+
		"\u0088\u0001\u0088\u0003\u0088\u08e6\b\u0088\u0001\u0089\u0001\u0089\u0001"+
		"\u0089\u0001\u0089\u0001\u0089\u0001\u008a\u0001\u008a\u0001\u008a\u0001"+
		"\u008a\u0001\u008a\u0001\u008a\u0005\u008a\u08f3\b\u008a\n\u008a\f\u008a"+
		"\u08f6\t\u008a\u0001\u008b\u0001\u008b\u0003\u008b\u08fa\b\u008b\u0001"+
		"\u008b\u0005\u008b\u08fd\b\u008b\n\u008b\f\u008b\u0900\t\u008b\u0001\u008c"+
		"\u0001\u008c\u0003\u008c\u0904\b\u008c\u0001\u008c\u0003\u008c\u0907\b"+
		"\u008c\u0001\u008c\u0004\u008c\u090a\b\u008c\u000b\u008c\f\u008c\u090b"+
		"\u0001\u008c\u0003\u008c\u090f\b\u008c\u0001\u008c\u0003\u008c\u0912\b"+
		"\u008c\u0001\u008c\u0001\u008c\u0004\u008c\u0916\b\u008c\u000b\u008c\f"+
		"\u008c\u0917\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0003\u008c"+
		"\u091e\b\u008c\u0003\u008c\u0920\b\u008c\u0001\u008d\u0001\u008d\u0001"+
		"\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0003\u008d\u0928\b\u008d\u0001"+
		"\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001"+
		"\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001"+
		"\u008e\u0001\u008e\u0003\u008e\u0938\b\u008e\u0001\u008f\u0001\u008f\u0001"+
		"\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u0090\u0001"+
		"\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001"+
		"\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0003"+
		"\u0091\u094e\b\u0091\u0001\u0092\u0001\u0092\u0001\u0093\u0001\u0093\u0001"+
		"\u0094\u0001\u0094\u0001\u0095\u0001\u0095\u0003\u0095\u0958\b\u0095\u0001"+
		"\u0095\u0001\u0095\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0001"+
		"\u0096\u0003\u0096\u0961\b\u0096\u0001\u0097\u0001\u0097\u0003\u0097\u0965"+
		"\b\u0097\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0001"+
		"\u0098\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001"+
		"\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u009a\u0001\u009a\u0001"+
		"\u009a\u0001\u009a\u0001\u009a\u0001\u009b\u0001\u009b\u0001\u009b\u0003"+
		"\u009b\u097e\b\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001"+
		"\u009b\u0001\u009c\u0001\u009c\u0001\u009c\u0003\u009c\u0988\b\u009c\u0001"+
		"\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001\u009d\u0001"+
		"\u009d\u0001\u009d\u0003\u009d\u0992\b\u009d\u0001\u009d\u0001\u009d\u0001"+
		"\u009d\u0001\u009d\u0001\u009e\u0001\u009e\u0001\u009e\u0003\u009e\u099b"+
		"\b\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001"+
		"\u009e\u0001\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0005\u009f\u09a7"+
		"\b\u009f\n\u009f\f\u009f\u09aa\t\u009f\u0001\u00a0\u0001\u00a0\u0001\u00a0"+
		"\u0001\u00a0\u0001\u00a0\u0003\u00a0\u09b1\b\u00a0\u0001\u00a0\u0001\u00a0"+
		"\u0001\u00a0\u0001\u00a0\u0003\u00a0\u09b7\b\u00a0\u0001\u00a1\u0001\u00a1"+
		"\u0001\u00a1\u0001\u00a1\u0005\u00a1\u09bd\b\u00a1\n\u00a1\f\u00a1\u09c0"+
		"\t\u00a1\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001"+
		"\u00a2\u0005\u00a2\u09c8\b\u00a2\n\u00a2\f\u00a2\u09cb\t\u00a2\u0001\u00a3"+
		"\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0003\u00a3\u09d1\b\u00a3\u0001\u00a3"+
		"\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a4\u0001\u00a4\u0001\u00a4"+
		"\u0001\u00a4\u0003\u00a4\u09db\b\u00a4\u0001\u00a4\u0005\u00a4\u09de\b"+
		"\u00a4\n\u00a4\f\u00a4\u09e1\t\u00a4\u0001\u00a5\u0001\u00a5\u0001\u00a5"+
		"\u0001\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a6\u0001\u00a6\u0001\u00a6"+
		"\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a7\u0001\u00a7\u0001\u00a7"+
		"\u0001\u00a7\u0001\u00a7\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a8"+
		"\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a9\u0001\u00a9\u0001\u00a9"+
		"\u0001\u00a9\u0005\u00a9\u09ff\b\u00a9\n\u00a9\f\u00a9\u0a02\t\u00a9\u0001"+
		"\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0003"+
		"\u00aa\u0a0a\b\u00aa\u0001\u00aa\u0003\u00aa\u0a0d\b\u00aa\u0001\u00ab"+
		"\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0003\u00ab\u0a14\b\u00ab"+
		"\u0001\u00ab\u0001\u00ab\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0003\u00ac"+
		"\u0a1b\b\u00ac\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0003\u00ad\u0a20\b"+
		"\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0003"+
		"\u00ae\u0a27\b\u00ae\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0001"+
		"\u00af\u0001\u00af\u0001\u00af\u0003\u00af\u0a30\b\u00af\u0001\u00af\u0001"+
		"\u00af\u0001\u00af\u0005\u00af\u0a35\b\u00af\n\u00af\f\u00af\u0a38\t\u00af"+
		"\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0003\u00b0\u0a3d\b\u00b0\u0001\u00b0"+
		"\u0001\u00b0\u0001\u00b0\u0005\u00b0\u0a42\b\u00b0\n\u00b0\f\u00b0\u0a45"+
		"\t\u00b0\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0003\u00b1\u0a4a\b\u00b1"+
		"\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0005\u00b1\u0a4f\b\u00b1\n\u00b1"+
		"\f\u00b1\u0a52\t\u00b1\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0003\u00b2"+
		"\u0a57\b\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0005\u00b2\u0a5c\b"+
		"\u00b2\n\u00b2\f\u00b2\u0a5f\t\u00b2\u0001\u00b3\u0001\u00b3\u0001\u00b3"+
		"\u0003\u00b3\u0a64\b\u00b3\u0001\u00b3\u0001\u00b3\u0001\u00b3\u0005\u00b3"+
		"\u0a69\b\u00b3\n\u00b3\f\u00b3\u0a6c\t\u00b3\u0001\u00b3\u0001\u00b3\u0001"+
		"\u00b3\u0001\u00b3\u0003\u00b3\u0a72\b\u00b3\u0003\u00b3\u0a74\b\u00b3"+
		"\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0003\u00b4\u0a79\b\u00b4\u0001\u00b4"+
		"\u0001\u00b4\u0001\u00b4\u0005\u00b4\u0a7e\b\u00b4\n\u00b4\f\u00b4\u0a81"+
		"\t\u00b4\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b6\u0001"+
		"\u00b6\u0001\u00b6\u0003\u00b6\u0a8a\b\u00b6\u0001\u00b6\u0001\u00b6\u0001"+
		"\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b8\u0001\u00b8\u0001"+
		"\u00b8\u0001\u00b8\u0003\u00b8\u0a96\b\u00b8\u0001\u00b8\u0001\u00b8\u0001"+
		"\u00b8\u0005\u00b8\u0a9b\b\u00b8\n\u00b8\f\u00b8\u0a9e\t\u00b8\u0001\u00b8"+
		"\u0003\u00b8\u0aa1\b\u00b8\u0003\u00b8\u0aa3\b\u00b8\u0001\u00b8\u0003"+
		"\u00b8\u0aa6\b\u00b8\u0001\u00b9\u0001\u00b9\u0003\u00b9\u0aaa\b\u00b9"+
		"\u0001\u00b9\u0003\u00b9\u0aad\b\u00b9\u0001\u00ba\u0001\u00ba\u0001\u00ba"+
		"\u0001\u00ba\u0003\u00ba\u0ab3\b\u00ba\u0001\u00ba\u0001\u00ba\u0001\u00ba"+
		"\u0003\u00ba\u0ab8\b\u00ba\u0001\u00ba\u0001\u00ba\u0001\u00ba\u0001\u00ba"+
		"\u0001\u00ba\u0001\u00ba\u0001\u00ba\u0005\u00ba\u0ac1\b\u00ba\n\u00ba"+
		"\f\u00ba\u0ac4\t\u00ba\u0001\u00ba\u0003\u00ba\u0ac7\b\u00ba\u0003\u00ba"+
		"\u0ac9\b\u00ba\u0001\u00bb\u0003\u00bb\u0acc\b\u00bb\u0001\u00bb\u0004"+
		"\u00bb\u0acf\b\u00bb\u000b\u00bb\f\u00bb\u0ad0\u0001\u00bc\u0001\u00bc"+
		"\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc"+
		"\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0003\u00bc"+
		"\u0ae0\b\u00bc\u0001\u00bd\u0001\u00bd\u0003\u00bd\u0ae4\b\u00bd\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00bf\u0001\u00bf\u0001"+
		"\u00bf\u0001\u00bf\u0005\u00bf\u0aee\b\u00bf\n\u00bf\f\u00bf\u0af1\t\u00bf"+
		"\u0001\u00bf\u0001\u00bf\u0003\u00bf\u0af5\b\u00bf\u0001\u00bf\u0001\u00bf"+
		"\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0003\u00c0"+
		"\u0afe\b\u00c0\u0001\u00c1\u0001\u00c1\u0001\u00c1\u0005\u00c1\u0b03\b"+
		"\u00c1\n\u00c1\f\u00c1\u0b06\t\u00c1\u0001\u00c1\u0001\u00c1\u0003\u00c1"+
		"\u0b0a\b\u00c1\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2"+
		"\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2"+
		"\u0001\u00c2\u0001\u00c2\u0003\u00c2\u0b19\b\u00c2\u0001\u00c2\u0001\u00c2"+
		"\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2"+
		"\u0003\u00c2\u0b23\b\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2"+
		"\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0003\u00c2"+
		"\u0b2e\b\u00c2\u0001\u00c2\u0003\u00c2\u0b31\b\u00c2\u0001\u00c2\u0001"+
		"\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001"+
		"\u00c2\u0005\u00c2\u0b3b\b\u00c2\n\u00c2\f\u00c2\u0b3e\t\u00c2\u0001\u00c2"+
		"\u0003\u00c2\u0b41\b\u00c2\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0001\u00c3"+
		"\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0001\u00c3"+
		"\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0001\u00c4\u0001\u00c4"+
		"\u0003\u00c4\u0b53\b\u00c4\u0001\u00c4\u0001\u00c4\u0001\u00c4\u0003\u00c4"+
		"\u0b58\b\u00c4\u0001\u00c5\u0001\u00c5\u0003\u00c5\u0b5c\b\u00c5\u0001"+
		"\u00c5\u0001\u00c5\u0001\u00c5\u0003\u00c5\u0b61\b\u00c5\u0001\u00c6\u0001"+
		"\u00c6\u0003\u00c6\u0b65\b\u00c6\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0001"+
		"\u00c6\u0001\u00c6\u0003\u00c6\u0b6c\b\u00c6\u0001\u00c6\u0005\u00c6\u0b6f"+
		"\b\u00c6\n\u00c6\f\u00c6\u0b72\t\u00c6\u0001\u00c7\u0001\u00c7\u0001\u00c7"+
		"\u0001\u00c7\u0001\u00c7\u0003\u00c7\u0b79\b\u00c7\u0001\u00c7\u0001\u00c7"+
		"\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0003\u00c7"+
		"\u0b82\b\u00c7\u0001\u00c8\u0001\u00c8\u0003\u00c8\u0b86\b\u00c8\u0001"+
		"\u00c8\u0001\u00c8\u0003\u00c8\u0b8a\b\u00c8\u0001\u00c9\u0003\u00c9\u0b8d"+
		"\b\u00c9\u0001\u00c9\u0003\u00c9\u0b90\b\u00c9\u0001\u00c9\u0003\u00c9"+
		"\u0b93\b\u00c9\u0001\u00ca\u0001\u00ca\u0001\u00cb\u0001\u00cb\u0001\u00cb"+
		"\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0005\u00cb"+
		"\u0b9f\b\u00cb\n\u00cb\f\u00cb\u0ba2\t\u00cb\u0001\u00cb\u0001\u00cb\u0003"+
		"\u00cb\u0ba6\b\u00cb\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0003\u00cc\u0bab"+
		"\b\u00cc\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0001"+
		"\u00cd\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0001\u00cf\u0001\u00cf\u0001"+
		"\u00cf\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0003\u00d0\u0bbd"+
		"\b\u00d0\u0003\u00d0\u0bbf\b\u00d0\u0001\u00d1\u0001\u00d1\u0001\u00d1"+
		"\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d2\u0001\u00d2"+
		"\u0003\u00d2\u0bca\b\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2"+
		"\u0001\u00d2\u0001\u00d2\u0003\u00d2\u0bd2\b\u00d2\u0001\u00d2\u0005\u00d2"+
		"\u0bd5\b\u00d2\n\u00d2\f\u00d2\u0bd8\t\u00d2\u0001\u00d3\u0001\u00d3\u0001"+
		"\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0003\u00d3\u0be0\b\u00d3\u0001"+
		"\u00d4\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0003\u00d4\u0be7"+
		"\b\u00d4\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0003\u00d5\u0bed"+
		"\b\u00d5\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0001\u00d6\u0001"+
		"\u00d6\u0001\u00d6\u0003\u00d6\u0bf6\b\u00d6\u0001\u00d6\u0003\u00d6\u0bf9"+
		"\b\u00d6\u0001\u00d6\u0003\u00d6\u0bfc\b\u00d6\u0001\u00d6\u0003\u00d6"+
		"\u0bff\b\u00d6\u0001\u00d7\u0001\u00d7\u0001\u00d7\u0001\u00d7\u0001\u00d7"+
		"\u0005\u00d7\u0c06\b\u00d7\n\u00d7\f\u00d7\u0c09\t\u00d7\u0001\u00d7\u0001"+
		"\u00d7\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0003\u00d8\u0c10\b\u00d8\u0001"+
		"\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00da\u0001\u00da\u0001\u00da\u0001"+
		"\u00da\u0003\u00da\u0c19\b\u00da\u0001\u00db\u0001\u00db\u0001\u00db\u0005"+
		"\u00db\u0c1e\b\u00db\n\u00db\f\u00db\u0c21\t\u00db\u0003\u00db\u0c23\b"+
		"\u00db\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001"+
		"\u00dc\u0003\u00dc\u0c2b\b\u00dc\u0003\u00dc\u0c2d\b\u00dc\u0001\u00dc"+
		"\u0003\u00dc\u0c30\b\u00dc\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd"+
		"\u0001\u00dd\u0001\u00dd\u0001\u00de\u0001\u00de\u0003\u00de\u0c3a\b\u00de"+
		"\u0001\u00de\u0001\u00de\u0001\u00de\u0001\u00de\u0003\u00de\u0c40\b\u00de"+
		"\u0001\u00df\u0001\u00df\u0001\u00df\u0001\u00df\u0001\u00df\u0001\u00df"+
		"\u0003\u00df\u0c48\b\u00df\u0003\u00df\u0c4a\b\u00df\u0001\u00e0\u0001"+
		"\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001"+
		"\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0005\u00e0\u0c57\b\u00e0\n"+
		"\u00e0\f\u00e0\u0c5a\t\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e1\u0001"+
		"\u00e1\u0001\u00e1\u0003\u00e1\u0c61\b\u00e1\u0001\u00e2\u0001\u00e2\u0003"+
		"\u00e2\u0c65\b\u00e2\u0001\u00e3\u0003\u00e3\u0c68\b\u00e3\u0001\u00e3"+
		"\u0001\u00e3\u0003\u00e3\u0c6c\b\u00e3\u0001\u00e3\u0003\u00e3\u0c6f\b"+
		"\u00e3\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0003\u00e4\u0c74\b\u00e4\u0001"+
		"\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e6\u0001\u00e6\u0003"+
		"\u00e6\u0c7c\b\u00e6\u0001\u00e6\u0001\u00e6\u0001\u00e6\u0001\u00e6\u0001"+
		"\u00e6\u0005\u00e6\u0c83\b\u00e6\n\u00e6\f\u00e6\u0c86\t\u00e6\u0001\u00e7"+
		"\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0003\u00e7\u0c8d\b\u00e7"+
		"\u0001\u00e7\u0003\u00e7\u0c90\b\u00e7\u0001\u00e7\u0003\u00e7\u0c93\b"+
		"\u00e7\u0001\u00e8\u0003\u00e8\u0c96\b\u00e8\u0001\u00e8\u0001\u00e8\u0001"+
		"\u00e8\u0001\u00e8\u0003\u00e8\u0c9c\b\u00e8\u0001\u00e8\u0001\u00e8\u0003"+
		"\u00e8\u0ca0\b\u00e8\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0005"+
		"\u00e9\u0ca6\b\u00e9\n\u00e9\f\u00e9\u0ca9\t\u00e9\u0001\u00e9\u0001\u00e9"+
		"\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00ea"+
		"\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00eb\u0001\u00eb\u0001\u00eb"+
		"\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0003\u00eb"+
		"\u0cbe\b\u00eb\u0003\u00eb\u0cc0\b\u00eb\u0001\u00ec\u0001\u00ec\u0001"+
		"\u00ec\u0003\u00ec\u0cc5\b\u00ec\u0003\u00ec\u0cc7\b\u00ec\u0001\u00ec"+
		"\u0001\u00ec\u0001\u00ec\u0001\u00ec\u0001\u00ec\u0003\u00ec\u0cce\b\u00ec"+
		"\u0003\u00ec\u0cd0\b\u00ec\u0001\u00ec\u0001\u00ec\u0003\u00ec\u0cd4\b"+
		"\u00ec\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0005\u00ed\u0cda"+
		"\b\u00ed\n\u00ed\f\u00ed\u0cdd\t\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ee"+
		"\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0001\u00ee"+
		"\u0001\u00ee\u0001\u00ee\u0003\u00ee\u0cea\b\u00ee\u0001\u00ee\u0001\u00ee"+
		"\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0003\u00ee"+
		"\u0cf3\b\u00ee\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0001\u00ee"+
		"\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0001\u00ee"+
		"\u0001\u00ee\u0001\u00ee\u0003\u00ee\u0d02\b\u00ee\u0001\u00ee\u0001\u00ee"+
		"\u0001\u00ee\u0001\u00ee\u0003\u00ee\u0d08\b\u00ee\u0001\u00ee\u0001\u00ee"+
		"\u0003\u00ee\u0d0c\b\u00ee\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0001\u00ee"+
		"\u0001\u00ee\u0003\u00ee\u0d13\b\u00ee\u0001\u00ef\u0001\u00ef\u0001\u00ef"+
		"\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef"+
		"\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00f0\u0001\u00f0\u0001\u00f0"+
		"\u0001\u00f0\u0005\u00f0\u0d25\b\u00f0\n\u00f0\f\u00f0\u0d28\t\u00f0\u0001"+
		"\u00f0\u0001\u00f0\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0003"+
		"\u00f1\u0d30\b\u00f1\u0001\u00f1\u0003\u00f1\u0d33\b\u00f1\u0001\u00f1"+
		"\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f2\u0001\u00f2\u0001\u00f2"+
		"\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f3\u0001\u00f3\u0001\u00f3"+
		"\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3"+
		"\u0001\u00f3\u0003\u00f3\u0d49\b\u00f3\u0003\u00f3\u0d4b\b\u00f3\u0001"+
		"\u00f4\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0001"+
		"\u00f4\u0001\u00f4\u0001\u00f4\u0003\u00f4\u0d56\b\u00f4\u0001\u00f5\u0001"+
		"\u00f5\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0001"+
		"\u00f5\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0001"+
		"\u00f5\u0003\u00f5\u0d66\b\u00f5\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0003"+
		"\u00f5\u0d6b\b\u00f5\u0005\u00f5\u0d6d\b\u00f5\n\u00f5\f\u00f5\u0d70\t"+
		"\u00f5\u0001\u00f5\u0001\u00f5\u0003\u00f5\u0d74\b\u00f5\u0001\u00f6\u0001"+
		"\u00f6\u0001\u00f6\u0001\u00f6\u0001\u00f6\u0003\u00f6\u0d7b\b\u00f6\u0001"+
		"\u00f6\u0001\u00f6\u0001\u00f6\u0001\u00f6\u0001\u00f6\u0001\u00f6\u0005"+
		"\u00f6\u0d83\b\u00f6\n\u00f6\f\u00f6\u0d86\t\u00f6\u0001\u00f6\u0001\u00f6"+
		"\u0001\u00f6\u0001\u00f7\u0003\u00f7\u0d8c\b\u00f7\u0001\u00f7\u0003\u00f7"+
		"\u0d8f\b\u00f7\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f8"+
		"\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0003\u00f8\u0d9a\b\u00f8"+
		"\u0001\u00f9\u0001\u00f9\u0003\u00f9\u0d9e\b\u00f9\u0001\u00f9\u0001\u00f9"+
		"\u0001\u00f9\u0003\u00f9\u0da3\b\u00f9\u0001\u00fa\u0001\u00fa\u0001\u00fa"+
		"\u0001\u00fa\u0003\u00fa\u0da9\b\u00fa\u0001\u00fa\u0001\u00fa\u0001\u00fa"+
		"\u0003\u00fa\u0dae\b\u00fa\u0001\u00fa\u0003\u00fa\u0db1\b\u00fa\u0001"+
		"\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fc\u0001\u00fc\u0001"+
		"\u00fc\u0005\u00fc\u0dba\b\u00fc\n\u00fc\f\u00fc\u0dbd\t\u00fc\u0001\u00fd"+
		"\u0001\u00fd\u0001\u00fd\u0001\u00fd\u0001\u00fd\u0001\u00fd\u0003\u00fd"+
		"\u0dc5\b\u00fd\u0001\u00fe\u0001\u00fe\u0003\u00fe\u0dc9\b\u00fe\u0001"+
		"\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00ff\u0001"+
		"\u00ff\u0001\u00ff\u0001\u00ff\u0001\u00ff\u0001\u00ff\u0001\u00ff\u0001"+
		"\u00ff\u0003\u00ff\u0dd8\b\u00ff\u0001\u0100\u0001\u0100\u0001\u0100\u0001"+
		"\u0100\u0001\u0100\u0003\u0100\u0ddf\b\u0100\u0001\u0100\u0001\u0100\u0001"+
		"\u0100\u0001\u0101\u0001\u0101\u0001\u0101\u0001\u0101\u0001\u0101\u0001"+
		"\u0101\u0001\u0101\u0003\u0101\u0deb\b\u0101\u0001\u0101\u0003\u0101\u0dee"+
		"\b\u0101\u0001\u0101\u0001\u0101\u0003\u0101\u0df2\b\u0101\u0001\u0101"+
		"\u0001\u0101\u0003\u0101\u0df6\b\u0101\u0001\u0102\u0001\u0102\u0001\u0102"+
		"\u0001\u0102\u0001\u0102\u0001\u0102\u0001\u0102\u0003\u0102\u0dff\b\u0102"+
		"\u0001\u0103\u0003\u0103\u0e02\b\u0103\u0001\u0103\u0003\u0103\u0e05\b"+
		"\u0103\u0001\u0103\u0001\u0103\u0001\u0103\u0005\u0103\u0e0a\b\u0103\n"+
		"\u0103\f\u0103\u0e0d\t\u0103\u0001\u0104\u0001\u0104\u0003\u0104\u0e11"+
		"\b\u0104\u0001\u0105\u0001\u0105\u0001\u0105\u0001\u0105\u0001\u0105\u0005"+
		"\u0105\u0e18\b\u0105\n\u0105\f\u0105\u0e1b\t\u0105\u0001\u0105\u0001\u0105"+
		"\u0001\u0106\u0001\u0106\u0001\u0106\u0001\u0106\u0001\u0106\u0001\u0106"+
		"\u0001\u0106\u0001\u0106\u0001\u0106\u0001\u0106\u0001\u0106\u0001\u0106"+
		"\u0001\u0106\u0001\u0106\u0001\u0106\u0003\u0106\u0e2e\b\u0106\u0003\u0106"+
		"\u0e30\b\u0106\u0001\u0107\u0001\u0107\u0001\u0108\u0001\u0108\u0003\u0108"+
		"\u0e36\b\u0108\u0001\u0108\u0001\u0108\u0001\u0108\u0005\u0108\u0e3b\b"+
		"\u0108\n\u0108\f\u0108\u0e3e\t\u0108\u0001\u0109\u0001\u0109\u0003\u0109"+
		"\u0e42\b\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0005\u0109\u0e47\b"+
		"\u0109\n\u0109\f\u0109\u0e4a\t\u0109\u0001\u010a\u0003\u010a\u0e4d\b\u010a"+
		"\u0001\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0003\u010a\u0e53\b\u010a"+
		"\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0003\u010b\u0e59\b\u010b"+
		"\u0001\u010c\u0001\u010c\u0001\u010c\u0003\u010c\u0e5e\b\u010c\u0001\u010c"+
		"\u0001\u010c\u0001\u010c\u0001\u010c\u0003\u010c\u0e64\b\u010c\u0001\u010c"+
		"\u0001\u010c\u0001\u010c\u0001\u010c\u0001\u010c\u0003\u010c\u0e6b\b\u010c"+
		"\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0003\u010d\u0e71\b\u010d"+
		"\u0001\u010d\u0001\u010d\u0001\u010e\u0001\u010e\u0001\u010e\u0001\u010e"+
		"\u0001\u010e\u0003\u010e\u0e7a\b\u010e\u0001\u010f\u0001\u010f\u0001\u010f"+
		"\u0001\u010f\u0001\u010f\u0003\u010f\u0e81\b\u010f\u0003\u010f\u0e83\b"+
		"\u010f\u0001\u0110\u0001\u0110\u0001\u0110\u0001\u0110\u0003\u0110\u0e89"+
		"\b\u0110\u0001\u0110\u0003\u0110\u0e8c\b\u0110\u0001\u0110\u0003\u0110"+
		"\u0e8f\b\u0110\u0001\u0110\u0001\u0110\u0001\u0111\u0003\u0111\u0e94\b"+
		"\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0112\u0003"+
		"\u0112\u0e9b\b\u0112\u0001\u0112\u0001\u0112\u0001\u0112\u0001\u0112\u0001"+
		"\u0113\u0001\u0113\u0001\u0113\u0003\u0113\u0ea4\b\u0113\u0001\u0114\u0001"+
		"\u0114\u0001\u0114\u0003\u0114\u0ea9\b\u0114\u0001\u0115\u0001\u0115\u0001"+
		"\u0115\u0001\u0116\u0001\u0116\u0001\u0116\u0001\u0116\u0003\u0116\u0eb2"+
		"\b\u0116\u0003\u0116\u0eb4\b\u0116\u0001\u0117\u0001\u0117\u0001\u0117"+
		"\u0003\u0117\u0eb9\b\u0117\u0001\u0118\u0001\u0118\u0001\u0118\u0001\u0118"+
		"\u0001\u0118\u0001\u0118\u0001\u0118\u0003\u0118\u0ec2\b\u0118\u0003\u0118"+
		"\u0ec4\b\u0118\u0001\u0118\u0003\u0118\u0ec7\b\u0118\u0001\u0119\u0001"+
		"\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0001"+
		"\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0001"+
		"\u0119\u0001\u0119\u0001\u0119\u0003\u0119\u0ed9\b\u0119\u0003\u0119\u0edb"+
		"\b\u0119\u0001\u011a\u0001\u011a\u0001\u011a\u0001\u011a\u0001\u011a\u0001"+
		"\u011a\u0001\u011a\u0001\u011a\u0003\u011a\u0ee5\b\u011a\u0001\u011a\u0001"+
		"\u011a\u0001\u011b\u0001\u011b\u0001\u011b\u0003\u011b\u0eec\b\u011b\u0001"+
		"\u011b\u0003\u011b\u0eef\b\u011b\u0001\u011b\u0001\u011b\u0003\u011b\u0ef3"+
		"\b\u011b\u0001\u011b\u0001\u011b\u0001\u011b\u0001\u011b\u0005\u011b\u0ef9"+
		"\b\u011b\n\u011b\f\u011b\u0efc\t\u011b\u0003\u011b\u0efe\b\u011b\u0001"+
		"\u011c\u0001\u011c\u0003\u011c\u0f02\b\u011c\u0001\u011c\u0001\u011c\u0001"+
		"\u011c\u0005\u011c\u0f07\b\u011c\n\u011c\f\u011c\u0f0a\t\u011c\u0001\u011c"+
		"\u0001\u011c\u0005\u011c\u0f0e\b\u011c\n\u011c\f\u011c\u0f11\t\u011c\u0001"+
		"\u011c\u0001\u011c\u0001\u011d\u0001\u011d\u0001\u011d\u0001\u011d\u0005"+
		"\u011d\u0f19\b\u011d\n\u011d\f\u011d\u0f1c\t\u011d\u0001\u011d\u0001\u011d"+
		"\u0001\u011d\u0001\u011d\u0001\u011d\u0001\u011d\u0001\u011d\u0001\u011d"+
		"\u0001\u011d\u0001\u011d\u0001\u011d\u0001\u011d\u0001\u011d\u0001\u011d"+
		"\u0001\u011d\u0001\u011d\u0001\u011d\u0001\u011d\u0001\u011d\u0001\u011d"+
		"\u0001\u011d\u0001\u011d\u0001\u011d\u0001\u011d\u0001\u011d\u0003\u011d"+
		"\u0f37\b\u011d\u0001\u011e\u0001\u011e\u0001\u011e\u0001\u011e\u0001\u011e"+
		"\u0001\u011e\u0003\u011e\u0f3f\b\u011e\u0001\u011f\u0001\u011f\u0001\u011f"+
		"\u0001\u011f\u0001\u011f\u0001\u011f\u0001\u011f\u0001\u011f\u0001\u011f"+
		"\u0001\u011f\u0001\u011f\u0001\u0120\u0001\u0120\u0001\u0120\u0001\u0120"+
		"\u0001\u0120\u0003\u0120\u0f51\b\u0120\u0003\u0120\u0f53\b\u0120\u0001"+
		"\u0120\u0001\u0120\u0001\u0120\u0001\u0120\u0001\u0120\u0003\u0120\u0f5a"+
		"\b\u0120\u0001\u0120\u0003\u0120\u0f5d\b\u0120\u0003\u0120\u0f5f\b\u0120"+
		"\u0001\u0120\u0001\u0120\u0001\u0120\u0001\u0120\u0001\u0120\u0003\u0120"+
		"\u0f66\b\u0120\u0003\u0120\u0f68\b\u0120\u0001\u0121\u0001\u0121\u0001"+
		"\u0121\u0003\u0121\u0f6d\b\u0121\u0001\u0121\u0001\u0121\u0001\u0121\u0005"+
		"\u0121\u0f72\b\u0121\n\u0121\f\u0121\u0f75\t\u0121\u0001\u0122\u0001\u0122"+
		"\u0003\u0122\u0f79\b\u0122\u0001\u0122\u0003\u0122\u0f7c\b\u0122\u0001"+
		"\u0122\u0001\u0122\u0003\u0122\u0f80\b\u0122\u0001\u0123\u0001\u0123\u0001"+
		"\u0123\u0001\u0123\u0001\u0123\u0005\u0123\u0f87\b\u0123\n\u0123\f\u0123"+
		"\u0f8a\t\u0123\u0003\u0123\u0f8c\b\u0123\u0001\u0124\u0001\u0124\u0001"+
		"\u0124\u0001\u0124\u0005\u0124\u0f92\b\u0124\n\u0124\f\u0124\u0f95\t\u0124"+
		"\u0001\u0124\u0003\u0124\u0f98\b\u0124\u0001\u0125\u0001\u0125\u0003\u0125"+
		"\u0f9c\b\u0125\u0001\u0125\u0001\u0125\u0001\u0125\u0003\u0125\u0fa1\b"+
		"\u0125\u0001\u0125\u0001\u0125\u0001\u0125\u0003\u0125\u0fa6\b\u0125\u0001"+
		"\u0126\u0001\u0126\u0003\u0126\u0faa\b\u0126\u0001\u0126\u0001\u0126\u0001"+
		"\u0127\u0001\u0127\u0001\u0127\u0001\u0127\u0001\u0127\u0005\u0127\u0fb3"+
		"\b\u0127\n\u0127\f\u0127\u0fb6\t\u0127\u0001\u0127\u0001\u0127\u0001\u0128"+
		"\u0001\u0128\u0003\u0128\u0fbc\b\u0128\u0001\u0129\u0001\u0129\u0001\u0129"+
		"\u0001\u0129\u0003\u0129\u0fc2\b\u0129\u0001\u0129\u0001\u0129\u0003\u0129"+
		"\u0fc6\b\u0129\u0001\u0129\u0001\u0129\u0003\u0129\u0fca\b\u0129\u0001"+
		"\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0003"+
		"\u0129\u0fd2\b\u0129\u0003\u0129\u0fd4\b\u0129\u0001\u0129\u0003\u0129"+
		"\u0fd7\b\u0129\u0001\u0129\u0001\u0129\u0001\u012a\u0001\u012a\u0001\u012a"+
		"\u0003\u012a\u0fde\b\u012a\u0001\u012a\u0001\u012a\u0001\u012a\u0003\u012a"+
		"\u0fe3\b\u012a\u0001\u012a\u0001\u012a\u0001\u012a\u0001\u012a\u0001\u012a"+
		"\u0001\u012a\u0001\u012a\u0003\u012a\u0fec\b\u012a\u0001\u012b\u0001\u012b"+
		"\u0001\u012b\u0003\u012b\u0ff1\b\u012b\u0001\u012b\u0001\u012b\u0001\u012b"+
		"\u0001\u012b\u0005\u012b\u0ff7\b\u012b\n\u012b\f\u012b\u0ffa\t\u012b\u0001"+
		"\u012b\u0001\u012b\u0001\u012b\u0001\u012b\u0003\u012b\u1000\b\u012b\u0001"+
		"\u012c\u0001\u012c\u0001\u012c\u0001\u012c\u0001\u012d\u0001\u012d\u0003"+
		"\u012d\u1008\b\u012d\u0001\u012d\u0001\u012d\u0001\u012d\u0001\u012d\u0001"+
		"\u012d\u0001\u012d\u0001\u012d\u0003\u012d\u1011\b\u012d\u0001\u012d\u0001"+
		"\u012d\u0001\u012d\u0001\u012d\u0001\u012d\u0001\u012d\u0001\u012d\u0001"+
		"\u012d\u0001\u012d\u0001\u012d\u0003\u012d\u101d\b\u012d\u0001\u012e\u0001"+
		"\u012e\u0001\u012e\u0001\u012e\u0001\u012e\u0001\u012e\u0001\u012e\u0001"+
		"\u012e\u0001\u012e\u0001\u012e\u0001\u012e\u0001\u012e\u0005\u012e\u102b"+
		"\b\u012e\n\u012e\f\u012e\u102e\t\u012e\u0003\u012e\u1030\b\u012e\u0003"+
		"\u012e\u1032\b\u012e\u0001\u012f\u0003\u012f\u1035\b\u012f\u0001\u012f"+
		"\u0003\u012f\u1038\b\u012f\u0001\u012f\u0003\u012f\u103b\b\u012f\u0001"+
		"\u012f\u0003\u012f\u103e\b\u012f\u0001\u0130\u0001\u0130\u0001\u0130\u0001"+
		"\u0130\u0001\u0130\u0001\u0130\u0001\u0130\u0001\u0130\u0001\u0130\u0001"+
		"\u0130\u0001\u0130\u0001\u0130\u0001\u0130\u0001\u0130\u0001\u0130\u0001"+
		"\u0130\u0003\u0130\u1050\b\u0130\u0001\u0131\u0001\u0131\u0001\u0131\u0003"+
		"\u0131\u1055\b\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0003\u0131\u105a"+
		"\b\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0003\u0131\u105f\b\u0131"+
		"\u0001\u0131\u0003\u0131\u1062\b\u0131\u0005\u0131\u1064\b\u0131\n\u0131"+
		"\f\u0131\u1067\t\u0131\u0001\u0131\u0001\u0131\u0001\u0132\u0001\u0132"+
		"\u0001\u0132\u0003\u0132\u106e\b\u0132\u0001\u0133\u0001\u0133\u0001\u0133"+
		"\u0001\u0133\u0001\u0133\u0001\u0133\u0001\u0133\u0001\u0133\u0005\u0133"+
		"\u1078\b\u0133\n\u0133\f\u0133\u107b\t\u0133\u0003\u0133\u107d\b\u0133"+
		"\u0001\u0133\u0003\u0133\u1080\b\u0133\u0001\u0133\u0001\u0133\u0001\u0133"+
		"\u0001\u0133\u0001\u0133\u0001\u0134\u0001\u0134\u0001\u0134\u0001\u0134"+
		"\u0001\u0134\u0001\u0134\u0005\u0134\u108d\b\u0134\n\u0134\f\u0134\u1090"+
		"\t\u0134\u0003\u0134\u1092\b\u0134\u0001\u0134\u0003\u0134\u1095\b\u0134"+
		"\u0001\u0134\u0001\u0134\u0003\u0134\u1099\b\u0134\u0001\u0134\u0001\u0134"+
		"\u0003\u0134\u109d\b\u0134\u0001\u0135\u0001\u0135\u0001\u0135\u0001\u0135"+
		"\u0001\u0135\u0001\u0135\u0005\u0135\u10a5\b\u0135\n\u0135\f\u0135\u10a8"+
		"\t\u0135\u0003\u0135\u10aa\b\u0135\u0001\u0135\u0003\u0135\u10ad\b\u0135"+
		"\u0001\u0135\u0001\u0135\u0001\u0135\u0001\u0135\u0001\u0135\u0001\u0135"+
		"\u0001\u0135\u0001\u0136\u0001\u0136\u0001\u0136\u0001\u0136\u0003\u0136"+
		"\u10ba\b\u0136\u0001\u0136\u0005\u0136\u10bd\b\u0136\n\u0136\f\u0136\u10c0"+
		"\t\u0136\u0001\u0137\u0005\u0137\u10c3\b\u0137\n\u0137\f\u0137\u10c6\t"+
		"\u0137\u0001\u0138\u0003\u0138\u10c9\b\u0138\u0001\u0138\u0003\u0138\u10cc"+
		"\b\u0138\u0001\u0138\u0001\u0138\u0001\u0138\u0001\u0138\u0001\u0138\u0001"+
		"\u0138\u0001\u0138\u0001\u0138\u0001\u0138\u0003\u0138\u10d7\b\u0138\u0001"+
		"\u0138\u0003\u0138\u10da\b\u0138\u0001\u0138\u0001\u0138\u0001\u0138\u0003"+
		"\u0138\u10df\b\u0138\u0003\u0138\u10e1\b\u0138\u0001\u0139\u0001\u0139"+
		"\u0001\u0139\u0001\u0139\u0001\u0139\u0001\u0139\u0001\u0139\u0001\u0139"+
		"\u0001\u0139\u0001\u0139\u0003\u0139\u10ed\b\u0139\u0001\u0139\u0003\u0139"+
		"\u10f0\b\u0139\u0001\u013a\u0001\u013a\u0001\u013a\u0005\u013a\u10f5\b"+
		"\u013a\n\u013a\f\u013a\u10f8\t\u013a\u0003\u013a\u10fa\b\u013a\u0001\u013b"+
		"\u0001\u013b\u0003\u013b\u10fe\b\u013b\u0001\u013b\u0001\u013b\u0003\u013b"+
		"\u1102\b\u013b\u0001\u013b\u0003\u013b\u1105\b\u013b\u0001\u013c\u0003"+
		"\u013c\u1108\b\u013c\u0001\u013c\u0001\u013c\u0003\u013c\u110c\b\u013c"+
		"\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013d\u0001\u013d\u0001\u013d"+
		"\u0001\u013d\u0005\u013d\u1115\b\u013d\n\u013d\f\u013d\u1118\t\u013d\u0003"+
		"\u013d\u111a\b\u013d\u0001\u013e\u0001\u013e\u0001\u013e\u0001\u013e\u0001"+
		"\u013e\u0003\u013e\u1121\b\u013e\u0001\u013f\u0003\u013f\u1124\b\u013f"+
		"\u0001\u013f\u0001\u013f\u0003\u013f\u1128\b\u013f\u0001\u013f\u0001\u013f"+
		"\u0001\u013f\u0001\u013f\u0001\u013f\u0003\u013f\u112f\b\u013f\u0001\u013f"+
		"\u0001\u013f\u0001\u013f\u0003\u013f\u1134\b\u013f\u0001\u013f\u0001\u013f"+
		"\u0001\u013f\u0001\u013f\u0001\u013f\u0001\u013f\u0001\u013f\u0005\u013f"+
		"\u113d\b\u013f\n\u013f\f\u013f\u1140\t\u013f\u0001\u013f\u0001\u013f\u0003"+
		"\u013f\u1144\b\u013f\u0003\u013f\u1146\b\u013f\u0001\u0140\u0001\u0140"+
		"\u0001\u0140\u0001\u0140\u0001\u0140\u0001\u0140\u0001\u0140\u0001\u0140"+
		"\u0001\u0140\u0001\u0140\u0001\u0140\u0003\u0140\u1153\b\u0140\u0001\u0140"+
		"\u0001\u0140\u0001\u0140\u0001\u0140\u0001\u0140\u0001\u0140\u0001\u0140"+
		"\u0001\u0140\u0001\u0140\u0003\u0140\u115e\b\u0140\u0001\u0141\u0001\u0141"+
		"\u0001\u0141\u0001\u0141\u0005\u0141\u1164\b\u0141\n\u0141\f\u0141\u1167"+
		"\t\u0141\u0003\u0141\u1169\b\u0141\u0001\u0141\u0001\u0141\u0003\u0141"+
		"\u116d\b\u0141\u0001\u0141\u0001\u0141\u0001\u0141\u0001\u0141\u0003\u0141"+
		"\u1173\b\u0141\u0001\u0142\u0001\u0142\u0001\u0143\u0001\u0143\u0001\u0143"+
		"\u0001\u0143\u0005\u0143\u117b\b\u0143\n\u0143\f\u0143\u117e\t\u0143\u0001"+
		"\u0144\u0001\u0144\u0001\u0144\u0001\u0144\u0001\u0144\u0005\u0144\u1185"+
		"\b\u0144\n\u0144\f\u0144\u1188\t\u0144\u0001\u0144\u0001\u0144\u0003\u0144"+
		"\u118c\b\u0144\u0001\u0144\u0001\u0144\u0001\u0144\u0001\u0144\u0001\u0144"+
		"\u0001\u0145\u0001\u0145\u0001\u0145\u0001\u0145\u0001\u0145\u0003\u0145"+
		"\u1198\b\u0145\u0001\u0145\u0001\u0145\u0001\u0145\u0001\u0145\u0003\u0145"+
		"\u119e\b\u0145\u0001\u0145\u0003\u0145\u11a1\b\u0145\u0001\u0145\u0003"+
		"\u0145\u11a4\b\u0145\u0001\u0145\u0003\u0145\u11a7\b\u0145\u0001\u0145"+
		"\u0003\u0145\u11aa\b\u0145\u0001\u0145\u0003\u0145\u11ad\b\u0145\u0001"+
		"\u0145\u0003\u0145\u11b0\b\u0145\u0001\u0145\u0001\u0145\u0003\u0145\u11b4"+
		"\b\u0145\u0001\u0145\u0001\u0145\u0001\u0145\u0003\u0145\u11b9\b\u0145"+
		"\u0001\u0145\u0001\u0145\u0001\u0145\u0001\u0145\u0001\u0145\u0003\u0145"+
		"\u11c0\b\u0145\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0146"+
		"\u0003\u0146\u11c7\b\u0146\u0001\u0147\u0001\u0147\u0001\u0147\u0001\u0147"+
		"\u0001\u0147\u0001\u0147\u0001\u0148\u0001\u0148\u0001\u0148\u0001\u0148"+
		"\u0001\u0148\u0003\u0148\u11d4\b\u0148\u0001\u0149\u0001\u0149\u0001\u0149"+
		"\u0001\u0149\u0001\u0149\u0001\u0149\u0001\u0149\u0001\u0149\u0001\u0149"+
		"\u0001\u0149\u0003\u0149\u11e0\b\u0149\u0001\u0149\u0001\u0149\u0001\u0149"+
		"\u0001\u0149\u0003\u0149\u11e6\b\u0149\u0001\u0149\u0001\u0149\u0001\u0149"+
		"\u0001\u0149\u0001\u0149\u0001\u0149\u0001\u0149\u0003\u0149\u11ef\b\u0149"+
		"\u0001\u0149\u0003\u0149\u11f2\b\u0149\u0001\u014a\u0001\u014a\u0003\u014a"+
		"\u11f6\b\u014a\u0001\u014a\u0001\u014a\u0003\u014a\u11fa\b\u014a\u0001"+
		"\u014a\u0001\u014a\u0001\u014a\u0001\u014a\u0001\u014a\u0005\u014a\u1201"+
		"\b\u014a\n\u014a\f\u014a\u1204\t\u014a\u0001\u014a\u0001\u014a\u0003\u014a"+
		"\u1208\b\u014a\u0001\u014a\u0001\u014a\u0001\u014a\u0001\u014a\u0001\u014a"+
		"\u0001\u014a\u0001\u014a\u0003\u014a\u1211\b\u014a\u0003\u014a\u1213\b"+
		"\u014a\u0001\u014a\u0001\u014a\u0001\u014a\u0003\u014a\u1218\b\u014a\u0003"+
		"\u014a\u121a\b\u014a\u0001\u014b\u0001\u014b\u0001\u014b\u0005\u014b\u121f"+
		"\b\u014b\n\u014b\f\u014b\u1222\t\u014b\u0001\u014c\u0001\u014c\u0001\u014c"+
		"\u0001\u014c\u0001\u014c\u0001\u014c\u0005\u014c\u122a\b\u014c\n\u014c"+
		"\f\u014c\u122d\t\u014c\u0001\u014c\u0001\u014c\u0001\u014c\u0001\u014c"+
		"\u0001\u014c\u0001\u014c\u0003\u014c\u1235\b\u014c\u0001\u014d\u0001\u014d"+
		"\u0001\u014d\u0001\u014d\u0001\u014d\u0003\u014d\u123c\b\u014d\u0003\u014d"+
		"\u123e\b\u014d\u0001\u014d\u0001\u014d\u0001\u014d\u0001\u014d\u0001\u014d"+
		"\u0005\u014d\u1245\b\u014d\n\u014d\f\u014d\u1248\t\u014d\u0001\u014d\u0001"+
		"\u014d\u0003\u014d\u124c\b\u014d\u0001\u014d\u0001\u014d\u0001\u014d\u0001"+
		"\u014d\u0001\u014d\u0003\u014d\u1253\b\u014d\u0001\u014d\u0001\u014d\u0001"+
		"\u014d\u0001\u014d\u0001\u014d\u0003\u014d\u125a\b\u014d\u0001\u014d\u0001"+
		"\u014d\u0001\u014d\u0001\u014d\u0001\u014d\u0001\u014d\u0001\u014d\u0001"+
		"\u014d\u0001\u014d\u0001\u014d\u0001\u014d\u0001\u014d\u0001\u014d\u0001"+
		"\u014d\u0005\u014d\u126a\b\u014d\n\u014d\f\u014d\u126d\t\u014d\u0001\u014d"+
		"\u0001\u014d\u0003\u014d\u1271\b\u014d\u0001\u014d\u0001\u014d\u0003\u014d"+
		"\u1275\b\u014d\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e"+
		"\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e"+
		"\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e"+
		"\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e"+
		"\u0001\u014e\u0001\u014e\u0003\u014e\u1290\b\u014e\u0001\u014e\u0003\u014e"+
		"\u1293\b\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e"+
		"\u0001\u014e\u0001\u014e\u0003\u014e\u129c\b\u014e\u0001\u014e\u0001\u014e"+
		"\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e"+
		"\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e"+
		"\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e"+
		"\u0001\u014e\u0005\u014e\u12b3\b\u014e\n\u014e\f\u014e\u12b6\t\u014e\u0003"+
		"\u014e\u12b8\b\u014e\u0003\u014e\u12ba\b\u014e\u0001\u014f\u0001\u014f"+
		"\u0001\u014f\u0003\u014f\u12bf\b\u014f\u0001\u0150\u0001\u0150\u0001\u0150"+
		"\u0001\u0150\u0001\u0150\u0001\u0150\u0003\u0150\u12c7\b\u0150\u0001\u0151"+
		"\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151"+
		"\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151"+
		"\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151"+
		"\u0003\u0151\u12dc\b\u0151\u0003\u0151\u12de\b\u0151\u0001\u0152\u0001"+
		"\u0152\u0001\u0152\u0001\u0152\u0001\u0152\u0001\u0152\u0001\u0152\u0003"+
		"\u0152\u12e7\b\u0152\u0001\u0152\u0003\u0152\u12ea\b\u0152\u0001\u0153"+
		"\u0001\u0153\u0001\u0153\u0001\u0153\u0001\u0153\u0001\u0153\u0001\u0153"+
		"\u0001\u0153\u0001\u0153\u0001\u0153\u0001\u0153\u0005\u0153\u12f7\b\u0153"+
		"\n\u0153\f\u0153\u12fa\t\u0153\u0001\u0153\u0001\u0153\u0003\u0153\u12fe"+
		"\b\u0153\u0001\u0153\u0001\u0153\u0001\u0153\u0001\u0153\u0001\u0153\u0005"+
		"\u0153\u1305\b\u0153\n\u0153\f\u0153\u1308\t\u0153\u0001\u0153\u0001\u0153"+
		"\u0001\u0153\u0001\u0153\u0001\u0153\u0001\u0153\u0001\u0153\u0001\u0153"+
		"\u0001\u0153\u0001\u0153\u0001\u0153\u0001\u0153\u0001\u0153\u0001\u0153"+
		"\u0001\u0153\u0005\u0153\u1319\b\u0153\n\u0153\f\u0153\u131c\t\u0153\u0003"+
		"\u0153\u131e\b\u0153\u0001\u0153\u0001\u0153\u0003\u0153\u1322\b\u0153"+
		"\u0001\u0154\u0001\u0154\u0001\u0154\u0001\u0154\u0001\u0154\u0001\u0154"+
		"\u0001\u0154\u0001\u0154\u0001\u0154\u0001\u0154\u0003\u0154\u132e\b\u0154"+
		"\u0003\u0154\u1330\b\u0154\u0001\u0155\u0001\u0155\u0001\u0155\u0001\u0155"+
		"\u0001\u0155\u0001\u0155\u0001\u0155\u0001\u0155\u0001\u0155\u0001\u0155"+
		"\u0001\u0155\u0003\u0155\u133d\b\u0155\u0003\u0155\u133f\b\u0155\u0001"+
		"\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001"+
		"\u0156\u0001\u0156\u0003\u0156\u1349\b\u0156\u0001\u0157\u0001\u0157\u0001"+
		"\u0157\u0001\u0157\u0001\u0157\u0001\u0157\u0001\u0157\u0001\u0157\u0001"+
		"\u0157\u0001\u0157\u0001\u0157\u0001\u0157\u0001\u0157\u0001\u0157\u0001"+
		"\u0157\u0001\u0157\u0001\u0157\u0001\u0157\u0001\u0157\u0001\u0157\u0001"+
		"\u0157\u0001\u0157\u0001\u0157\u0001\u0157\u0001\u0157\u0001\u0157\u0001"+
		"\u0157\u0001\u0157\u0001\u0157\u0001\u0157\u0001\u0157\u0001\u0157\u0001"+
		"\u0157\u0001\u0157\u0001\u0157\u0001\u0157\u0001\u0157\u0001\u0157\u0001"+
		"\u0157\u0001\u0157\u0001\u0157\u0001\u0157\u0001\u0157\u0003\u0157\u1376"+
		"\b\u0157\u0001\u0158\u0001\u0158\u0001\u0158\u0001\u0158\u0003\u0158\u137c"+
		"\b\u0158\u0001\u0159\u0001\u0159\u0001\u0159\u0001\u0159\u0001\u0159\u0001"+
		"\u0159\u0001\u0159\u0003\u0159\u1385\b\u0159\u0001\u0159\u0001\u0159\u0001"+
		"\u0159\u0001\u0159\u0001\u0159\u0001\u0159\u0001\u0159\u0001\u0159\u0001"+
		"\u0159\u0001\u0159\u0001\u0159\u0001\u0159\u0001\u0159\u0003\u0159\u1394"+
		"\b\u0159\u0001\u015a\u0001\u015a\u0003\u015a\u1398\b\u015a\u0001\u015b"+
		"\u0001\u015b\u0001\u015b\u0001\u015b\u0001\u015b\u0005\u015b\u139f\b\u015b"+
		"\n\u015b\f\u015b\u13a2\t\u015b\u0001\u015b\u0001\u015b\u0001\u015b\u0003"+
		"\u015b\u13a7\b\u015b\u0001\u015b\u0001\u015b\u0001\u015b\u0001\u015b\u0001"+
		"\u015b\u0001\u015b\u0005\u015b\u13af\b\u015b\n\u015b\f\u015b\u13b2\t\u015b"+
		"\u0001\u015b\u0001\u015b\u0001\u015b\u0001\u015b\u0001\u015b\u0001\u015b"+
		"\u0003\u015b\u13ba\b\u015b\u0001\u015c\u0001\u015c\u0001\u015c\u0001\u015c"+
		"\u0001\u015c\u0001\u015c\u0001\u015c\u0001\u015c\u0001\u015c\u0003\u015c"+
		"\u13c5\b\u015c\u0001\u015d\u0001\u015d\u0001\u015d\u0001\u015d\u0001\u015d"+
		"\u0001\u015d\u0001\u015d\u0001\u015d\u0001\u015d\u0001\u015d\u0003\u015d"+
		"\u13d1\b\u015d\u0003\u015d\u13d3\b\u015d\u0001\u015d\u0001\u015d\u0001"+
		"\u015d\u0001\u015d\u0001\u015d\u0001\u015d\u0003\u015d\u13db\b\u015d\u0001"+
		"\u015e\u0001\u015e\u0001\u015e\u0001\u015e\u0001\u015e\u0001\u015e\u0001"+
		"\u015e\u0001\u015f\u0001\u015f\u0001\u015f\u0001\u015f\u0001\u015f\u0003"+
		"\u015f\u13e9\b\u015f\u0001\u015f\u0001\u015f\u0001\u015f\u0001\u015f\u0005"+
		"\u015f\u13ef\b\u015f\n\u015f\f\u015f\u13f2\t\u015f\u0001\u015f\u0001\u015f"+
		"\u0003\u015f\u13f6\b\u015f\u0003\u015f\u13f8\b\u015f\u0001\u0160\u0001"+
		"\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0003"+
		"\u0160\u1401\b\u0160\u0001\u0161\u0001\u0161\u0001\u0161\u0001\u0161\u0003"+
		"\u0161\u1407\b\u0161\u0001\u0162\u0001\u0162\u0001\u0162\u0001\u0162\u0001"+
		"\u0162\u0001\u0162\u0001\u0162\u0001\u0162\u0001\u0162\u0001\u0162\u0001"+
		"\u0162\u0001\u0162\u0001\u0162\u0001\u0162\u0001\u0162\u0001\u0162\u0001"+
		"\u0162\u0001\u0162\u0001\u0162\u0003\u0162\u141c\b\u0162\u0001\u0163\u0001"+
		"\u0163\u0001\u0163\u0001\u0163\u0001\u0163\u0003\u0163\u1423\b\u0163\u0001"+
		"\u0163\u0001\u0163\u0001\u0163\u0001\u0163\u0005\u0163\u1429\b\u0163\n"+
		"\u0163\f\u0163\u142c\t\u0163\u0001\u0163\u0001\u0163\u0003\u0163\u1430"+
		"\b\u0163\u0003\u0163\u1432\b\u0163\u0001\u0164\u0001\u0164\u0001\u0164"+
		"\u0001\u0164\u0001\u0164\u0001\u0164\u0001\u0164\u0001\u0164\u0001\u0164"+
		"\u0001\u0164\u0001\u0164\u0001\u0164\u0001\u0164\u0001\u0164\u0001\u0164"+
		"\u0001\u0164\u0001\u0164\u0001\u0164\u0001\u0164\u0001\u0164\u0001\u0164"+
		"\u0001\u0164\u0001\u0164\u0001\u0164\u0001\u0164\u0001\u0164\u0001\u0164"+
		"\u0001\u0164\u0001\u0164\u0001\u0164\u0001\u0164\u0001\u0164\u0001\u0164"+
		"\u0001\u0164\u0001\u0164\u0001\u0164\u0001\u0164\u0005\u0164\u1459\b\u0164"+
		"\n\u0164\f\u0164\u145c\t\u0164\u0001\u0164\u0001\u0164\u0003\u0164\u1460"+
		"\b\u0164\u0001\u0165\u0001\u0165\u0001\u0165\u0001\u0165\u0001\u0165\u0001"+
		"\u0165\u0001\u0165\u0001\u0165\u0001\u0165\u0001\u0165\u0001\u0165\u0001"+
		"\u0165\u0001\u0165\u0003\u0165\u146f\b\u0165\u0001\u0166\u0001\u0166\u0001"+
		"\u0166\u0001\u0166\u0001\u0166\u0001\u0166\u0003\u0166\u1477\b\u0166\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0003\u0167\u148e\b\u0167\u0001\u0168\u0001"+
		"\u0168\u0001\u0168\u0001\u0168\u0001\u0168\u0001\u0168\u0001\u0168\u0003"+
		"\u0168\u1497\b\u0168\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001"+
		"\u0169\u0001\u0169\u0003\u0169\u149f\b\u0169\u0001\u016a\u0001\u016a\u0001"+
		"\u016a\u0001\u016a\u0001\u016a\u0001\u016b\u0001\u016b\u0001\u016b\u0001"+
		"\u016b\u0003\u016b\u14aa\b\u016b\u0001\u016b\u0001\u016b\u0001\u016b\u0003"+
		"\u016b\u14af\b\u016b\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0005"+
		"\u016c\u14b5\b\u016c\n\u016c\f\u016c\u14b8\t\u016c\u0001\u016c\u0001\u016c"+
		"\u0001\u016d\u0001\u016d\u0001\u016d\u0001\u016d\u0005\u016d\u14c0\b\u016d"+
		"\n\u016d\f\u016d\u14c3\t\u016d\u0001\u016d\u0001\u016d\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0003\u016e\u14cd"+
		"\b\u016e\u0001\u016f\u0001\u016f\u0001\u016f\u0001\u016f\u0001\u016f\u0001"+
		"\u016f\u0001\u016f\u0003\u016f\u14d6\b\u016f\u0001\u0170\u0001\u0170\u0001"+
		"\u0170\u0001\u0170\u0001\u0170\u0003\u0170\u14dd\b\u0170\u0001\u0171\u0001"+
		"\u0171\u0003\u0171\u14e1\b\u0171\u0001\u0172\u0001\u0172\u0001\u0172\u0001"+
		"\u0172\u0003\u0172\u14e7\b\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001"+
		"\u0172\u0001\u0172\u0001\u0173\u0001\u0173\u0001\u0173\u0001\u0173\u0001"+
		"\u0173\u0001\u0173\u0001\u0173\u0001\u0173\u0001\u0173\u0001\u0173\u0001"+
		"\u0173\u0001\u0173\u0001\u0173\u0001\u0173\u0003\u0173\u14fc\b\u0173\u0001"+
		"\u0173\u0001\u0173\u0001\u0173\u0001\u0174\u0001\u0174\u0001\u0174\u0001"+
		"\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0005\u0174\u1508\b\u0174\n"+
		"\u0174\f\u0174\u150b\t\u0174\u0003\u0174\u150d\b\u0174\u0001\u0174\u0001"+
		"\u0174\u0001\u0175\u0001\u0175\u0001\u0175\u0001\u0175\u0001\u0175\u0005"+
		"\u0175\u1516\b\u0175\n\u0175\f\u0175\u1519\t\u0175\u0001\u0175\u0001\u0175"+
		"\u0003\u0175\u151d\b\u0175\u0001\u0176\u0003\u0176\u1520\b\u0176\u0001"+
		"\u0176\u0001\u0176\u0003\u0176\u1524\b\u0176\u0001\u0176\u0003\u0176\u1527"+
		"\b\u0176\u0001\u0176\u0001\u0176\u0003\u0176\u152b\b\u0176\u0001\u0176"+
		"\u0003\u0176\u152e\b\u0176\u0001\u0176\u0003\u0176\u1531\b\u0176\u0001"+
		"\u0176\u0003\u0176\u1534\b\u0176\u0001\u0176\u0001\u0176\u0001\u0176\u0001"+
		"\u0176\u0003\u0176\u153a\b\u0176\u0001\u0177\u0003\u0177\u153d\b\u0177"+
		"\u0001\u0177\u0003\u0177\u1540\b\u0177\u0001\u0177\u0001\u0177\u0001\u0177"+
		"\u0001\u0178\u0003\u0178\u1546\b\u0178\u0001\u0178\u0003\u0178\u1549\b"+
		"\u0178\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178\u0005\u0178\u154f"+
		"\b\u0178\n\u0178\f\u0178\u1552\t\u0178\u0001\u0179\u0003\u0179\u1555\b"+
		"\u0179\u0001\u0179\u0003\u0179\u1558\b\u0179\u0001\u0179\u0001\u0179\u0001"+
		"\u017a\u0003\u017a\u155d\b\u017a\u0001\u017a\u0001\u017a\u0001\u017b\u0003"+
		"\u017b\u1562\b\u017b\u0001\u017b\u0001\u017b\u0003\u017b\u1566\b\u017b"+
		"\u0001\u017b\u0001\u017b\u0003\u017b\u156a\b\u017b\u0001\u017b\u0003\u017b"+
		"\u156d\b\u017b\u0001\u017b\u0003\u017b\u1570\b\u017b\u0001\u017b\u0003"+
		"\u017b\u1573\b\u017b\u0001\u017b\u0005\u017b\u1576\b\u017b\n\u017b\f\u017b"+
		"\u1579\t\u017b\u0001\u017b\u0003\u017b\u157c\b\u017b\u0001\u017b\u0003"+
		"\u017b\u157f\b\u017b\u0001\u017c\u0003\u017c\u1582\b\u017c\u0001\u017c"+
		"\u0001\u017c\u0001\u017d\u0001\u017d\u0001\u017d\u0003\u017d\u1589\b\u017d"+
		"\u0001\u017d\u0003\u017d\u158c\b\u017d\u0001\u017d\u0001\u017d\u0001\u017d"+
		"\u0001\u017e\u0001\u017e\u0003\u017e\u1593\b\u017e\u0001\u017e\u0001\u017e"+
		"\u0001\u017e\u0001\u017e\u0001\u017e\u0005\u017e\u159a\b\u017e\n\u017e"+
		"\f\u017e\u159d\t\u017e\u0001\u017e\u0001\u017e\u0001\u017e\u0001\u017e"+
		"\u0001\u017e\u0003\u017e\u15a4\b\u017e\u0001\u017f\u0001\u017f\u0001\u017f"+
		"\u0003\u017f\u15a9\b\u017f\u0001\u0180\u0001\u0180\u0001\u0180\u0001\u0180"+
		"\u0001\u0180\u0001\u0180\u0001\u0180\u0003\u0180\u15b2\b\u0180\u0001\u0180"+
		"\u0001\u0180\u0003\u0180\u15b6\b\u0180\u0001\u0180\u0001\u0180\u0001\u0180"+
		"\u0001\u0180\u0001\u0181\u0001\u0181\u0001\u0181\u0001\u0181\u0001\u0181"+
		"\u0001\u0181\u0001\u0181\u0003\u0181\u15c3\b\u0181\u0001\u0181\u0001\u0181"+
		"\u0003\u0181\u15c7\b\u0181\u0001\u0181\u0001\u0181\u0001\u0181\u0001\u0182"+
		"\u0001\u0182\u0001\u0182\u0001\u0182\u0001\u0182\u0003\u0182\u15d1\b\u0182"+
		"\u0001\u0182\u0001\u0182\u0003\u0182\u15d5\b\u0182\u0001\u0182\u0001\u0182"+
		"\u0001\u0182\u0001\u0182\u0003\u0182\u15db\b\u0182\u0001\u0183\u0003\u0183"+
		"\u15de\b\u0183\u0001\u0183\u0001\u0183\u0004\u0183\u15e2\b\u0183\u000b"+
		"\u0183\f\u0183\u15e3\u0001\u0183\u0001\u0183\u0001\u0184\u0001\u0184\u0001"+
		"\u0184\u0001\u0184\u0001\u0184\u0005\u0184\u15ed\b\u0184\n\u0184\f\u0184"+
		"\u15f0\t\u0184\u0003\u0184\u15f2\b\u0184\u0001\u0185\u0003\u0185\u15f5"+
		"\b\u0185\u0001\u0185\u0001\u0185\u0003\u0185\u15f9\b\u0185\u0001\u0185"+
		"\u0001\u0185\u0003\u0185\u15fd\b\u0185\u0001\u0185\u0001\u0185\u0003\u0185"+
		"\u1601\b\u0185\u0001\u0185\u0003\u0185\u1604\b\u0185\u0001\u0185\u0003"+
		"\u0185\u1607\b\u0185\u0001\u0185\u0003\u0185\u160a\b\u0185\u0001\u0186"+
		"\u0001\u0186\u0003\u0186\u160e\b\u0186\u0001\u0186\u0001\u0186\u0003\u0186"+
		"\u1612\b\u0186\u0001\u0186\u0001\u0186\u0001\u0187\u0001\u0187\u0001\u0187"+
		"\u0001\u0187\u0005\u0187\u161a\b\u0187\n\u0187\f\u0187\u161d\t\u0187\u0001"+
		"\u0188\u0001\u0188\u0001\u0188\u0001\u0188\u0005\u0188\u1623\b\u0188\n"+
		"\u0188\f\u0188\u1626\t\u0188\u0001\u0188\u0001\u0188\u0001\u0188\u0001"+
		"\u0188\u0001\u0188\u0003\u0188\u162d\b\u0188\u0001\u0189\u0001\u0189\u0003"+
		"\u0189\u1631\b\u0189\u0001\u018a\u0003\u018a\u1634\b\u018a\u0001\u018a"+
		"\u0001\u018a\u0003\u018a\u1638\b\u018a\u0001\u018a\u0001\u018a\u0003\u018a"+
		"\u163c\b\u018a\u0001\u018a\u0003\u018a\u163f\b\u018a\u0001\u018a\u0003"+
		"\u018a\u1642\b\u018a\u0001\u018a\u0003\u018a\u1645\b\u018a\u0001\u018b"+
		"\u0001\u018b\u0001\u018b\u0001\u018c\u0003\u018c\u164b\b\u018c\u0001\u018c"+
		"\u0003\u018c\u164e\b\u018c\u0001\u018c\u0001\u018c\u0003\u018c\u1652\b"+
		"\u018c\u0001\u018c\u0003\u018c\u1655\b\u018c\u0001\u018c\u0003\u018c\u1658"+
		"\b\u018c\u0001\u018d\u0001\u018d\u0001\u018d\u0001\u018d\u0001\u018d\u0001"+
		"\u018d\u0001\u018d\u0001\u018d\u0001\u018d\u0003\u018d\u1663\b\u018d\u0001"+
		"\u018e\u0001\u018e\u0003\u018e\u1667\b\u018e\u0001\u018e\u0001\u018e\u0001"+
		"\u018e\u0003\u018e\u166c\b\u018e\u0005\u018e\u166e\b\u018e\n\u018e\f\u018e"+
		"\u1671\t\u018e\u0001\u018f\u0001\u018f\u0001\u0190\u0001\u0190\u0001\u0190"+
		"\u0003\u0190\u1678\b\u0190\u0001\u0190\u0001\u0190\u0003\u0190\u167c\b"+
		"\u0190\u0001\u0190\u0005\u0190\u167f\b\u0190\n\u0190\f\u0190\u1682\t\u0190"+
		"\u0001\u0191\u0003\u0191\u1685\b\u0191\u0001\u0191\u0001\u0191\u0003\u0191"+
		"\u1689\b\u0191\u0001\u0191\u0001\u0191\u0003\u0191\u168d\b\u0191\u0001"+
		"\u0191\u0001\u0191\u0003\u0191\u1691\b\u0191\u0001\u0191\u0003\u0191\u1694"+
		"\b\u0191\u0003\u0191\u1696\b\u0191\u0001\u0191\u0003\u0191\u1699\b\u0191"+
		"\u0001\u0191\u0003\u0191\u169c\b\u0191\u0001\u0191\u0003\u0191\u169f\b"+
		"\u0191\u0001\u0191\u0003\u0191\u16a2\b\u0191\u0001\u0191\u0003\u0191\u16a5"+
		"\b\u0191\u0001\u0192\u0001\u0192\u0001\u0193\u0001\u0193\u0001\u0193\u0003"+
		"\u0193\u16ac\b\u0193\u0003\u0193\u16ae\b\u0193\u0001\u0193\u0001\u0193"+
		"\u0005\u0193\u16b2\b\u0193\n\u0193\f\u0193\u16b5\t\u0193\u0001\u0194\u0001"+
		"\u0194\u0001\u0194\u0001\u0194\u0001\u0194\u0003\u0194\u16bc\b\u0194\u0001"+
		"\u0194\u0001\u0194\u0003\u0194\u16c0\b\u0194\u0001\u0194\u0001\u0194\u0003"+
		"\u0194\u16c4\b\u0194\u0001\u0194\u0003\u0194\u16c7\b\u0194\u0001\u0194"+
		"\u0003\u0194\u16ca\b\u0194\u0003\u0194\u16cc\b\u0194\u0001\u0195\u0001"+
		"\u0195\u0003\u0195\u16d0\b\u0195\u0001\u0195\u0001\u0195\u0003\u0195\u16d4"+
		"\b\u0195\u0001\u0195\u0003\u0195\u16d7\b\u0195\u0001\u0195\u0001\u0195"+
		"\u0003\u0195\u16db\b\u0195\u0001\u0195\u0001\u0195\u0001\u0195\u0001\u0195"+
		"\u0001\u0195\u0001\u0195\u0001\u0195\u0001\u0195\u0003\u0195\u16e5\b\u0195"+
		"\u0001\u0195\u0003\u0195\u16e8\b\u0195\u0003\u0195\u16ea\b\u0195\u0001"+
		"\u0196\u0001\u0196\u0003\u0196\u16ee\b\u0196\u0001\u0197\u0001\u0197\u0001"+
		"\u0198\u0001\u0198\u0001\u0198\u0001\u0199\u0001\u0199\u0001\u0199\u0001"+
		"\u019a\u0001\u019a\u0001\u019a\u0001\u019b\u0001\u019b\u0001\u019b\u0005"+
		"\u019b\u16fe\b\u019b\n\u019b\f\u019b\u1701\t\u019b\u0001\u019c\u0001\u019c"+
		"\u0005\u019c\u1705\b\u019c\n\u019c\f\u019c\u1708\t\u019c\u0001\u019d\u0001"+
		"\u019d\u0001\u019d\u0003\u019d\u170d\b\u019d\u0001\u019d\u0003\u019d\u1710"+
		"\b\u019d\u0001\u019d\u0003\u019d\u1713\b\u019d\u0001\u019d\u0001\u019d"+
		"\u0003\u019d\u1717\b\u019d\u0001\u019d\u0001\u019d\u0003\u019d\u171b\b"+
		"\u019d\u0001\u019d\u0001\u019d\u0003\u019d\u171f\b\u019d\u0001\u019d\u0003"+
		"\u019d\u1722\b\u019d\u0001\u019d\u0001\u019d\u0001\u019d\u0001\u019d\u0003"+
		"\u019d\u1728\b\u019d\u0001\u019e\u0003\u019e\u172b\b\u019e\u0001\u019e"+
		"\u0003\u019e\u172e\b\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0001\u019e"+
		"\u0003\u019e\u1734\b\u019e\u0001\u019e\u0003\u019e\u1737\b\u019e\u0001"+
		"\u019e\u0001\u019e\u0003\u019e\u173b\b\u019e\u0001\u019e\u0001\u019e\u0001"+
		"\u019e\u0003\u019e\u1740\b\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0001"+
		"\u019e\u0003\u019e\u1746\b\u019e\u0003\u019e\u1748\b\u019e\u0001\u019f"+
		"\u0001\u019f\u0001\u019f\u0001\u019f\u0003\u019f\u174e\b\u019f\u0001\u01a0"+
		"\u0001\u01a0\u0001\u01a0\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1"+
		"\u0001\u01a1\u0005\u01a1\u1758\b\u01a1\n\u01a1\f\u01a1\u175b\t\u01a1\u0001"+
		"\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0003"+
		"\u01a3\u1763\b\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a4\u0001\u01a4\u0001"+
		"\u01a4\u0001\u01a4\u0001\u01a4\u0001\u01a4\u0001\u01a4\u0001\u01a4\u0001"+
		"\u01a4\u0005\u01a4\u1770\b\u01a4\n\u01a4\f\u01a4\u1773\t\u01a4\u0001\u01a4"+
		"\u0001\u01a4\u0001\u01a4\u0001\u01a4\u0001\u01a5\u0001\u01a5\u0001\u01a5"+
		"\u0001\u01a6\u0001\u01a6\u0001\u01a6\u0005\u01a6\u177f\b\u01a6\n\u01a6"+
		"\f\u01a6\u1782\t\u01a6\u0001\u01a7\u0001\u01a7\u0003\u01a7\u1786\b\u01a7"+
		"\u0001\u01a7\u0001\u01a7\u0001\u01a7\u0001\u01a8\u0001\u01a8\u0001\u01a8"+
		"\u0003\u01a8\u178e\b\u01a8\u0001\u01a8\u0001\u01a8\u0001\u01a8\u0003\u01a8"+
		"\u1793\b\u01a8\u0003\u01a8\u1795\b\u01a8\u0001\u01a9\u0001\u01a9\u0003"+
		"\u01a9\u1799\b\u01a9\u0001\u01a9\u0001\u01a9\u0001\u01a9\u0003\u01a9\u179e"+
		"\b\u01a9\u0005\u01a9\u17a0\b\u01a9\n\u01a9\f\u01a9\u17a3\t\u01a9\u0001"+
		"\u01aa\u0001\u01aa\u0003\u01aa\u17a7\b\u01aa\u0001\u01aa\u0003\u01aa\u17aa"+
		"\b\u01aa\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0003\u01ab\u17b0"+
		"\b\u01ab\u0001\u01ab\u0003\u01ab\u17b3\b\u01ab\u0001\u01ac\u0001\u01ac"+
		"\u0001\u01ac\u0001\u01ad\u0001\u01ad\u0001\u01ae\u0001\u01ae\u0001\u01ae"+
		"\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae"+
		"\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae"+
		"\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae"+
		"\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae"+
		"\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae"+
		"\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae"+
		"\u0001\u01ae\u0005\u01ae\u17e2\b\u01ae\n\u01ae\f\u01ae\u17e5\t\u01ae\u0001"+
		"\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001"+
		"\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001"+
		"\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0005\u01ae\u17f8"+
		"\b\u01ae\n\u01ae\f\u01ae\u17fb\t\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae"+
		"\u0001\u01ae\u0003\u01ae\u1801\b\u01ae\u0001\u01af\u0001\u01af\u0001\u01af"+
		"\u0001\u01af\u0001\u01af\u0001\u01af\u0001\u01af\u0001\u01af\u0001\u01af"+
		"\u0001\u01af\u0001\u01af\u0001\u01af\u0001\u01af\u0001\u01af\u0001\u01af"+
		"\u0001\u01af\u0001\u01af\u0001\u01af\u0001\u01af\u0001\u01af\u0001\u01af"+
		"\u0001\u01af\u0001\u01af\u0001\u01af\u0001\u01af\u0001\u01af\u0001\u01af"+
		"\u0001\u01af\u0001\u01af\u0001\u01af\u0001\u01af\u0001\u01af\u0001\u01af"+
		"\u0001\u01af\u0001\u01af\u0001\u01af\u0001\u01af\u0001\u01af\u0001\u01af"+
		"\u0001\u01af\u0001\u01af\u0001\u01af\u0001\u01af\u0001\u01af\u0001\u01af"+
		"\u0001\u01af\u0001\u01af\u0001\u01af\u0001\u01af\u0001\u01af\u0001\u01af"+
		"\u0001\u01af\u0001\u01af\u0001\u01af\u0003\u01af\u1839\b\u01af\u0001\u01b0"+
		"\u0001\u01b0\u0001\u01b0\u0001\u01b0\u0003\u01b0\u183f\b\u01b0\u0001\u01b1"+
		"\u0001\u01b1\u0001\u01b1\u0001\u01b1\u0001\u01b1\u0001\u01b1\u0003\u01b1"+
		"\u1847\b\u01b1\u0001\u01b1\u0003\u01b1\u184a\b\u01b1\u0001\u01b1\u0001"+
		"\u01b1\u0001\u01b1\u0001\u01b1\u0001\u01b1\u0001\u01b1\u0001\u01b1\u0001"+
		"\u01b1\u0003\u01b1\u1854\b\u01b1\u0003\u01b1\u1856\b\u01b1\u0003\u01b1"+
		"\u1858\b\u01b1\u0001\u01b1\u0001\u01b1\u0001\u01b1\u0003\u01b1\u185d\b"+
		"\u01b1\u0003\u01b1\u185f\b\u01b1\u0003\u01b1\u1861\b\u01b1\u0001\u01b1"+
		"\u0001\u01b1\u0001\u01b1\u0001\u01b1\u0003\u01b1\u1867\b\u01b1\u0003\u01b1"+
		"\u1869\b\u01b1\u0001\u01b1\u0001\u01b1\u0001\u01b1\u0001\u01b1\u0001\u01b1"+
		"\u0003\u01b1\u1870\b\u01b1\u0001\u01b1\u0001\u01b1\u0001\u01b1\u0001\u01b1"+
		"\u0003\u01b1\u1876\b\u01b1\u0003\u01b1\u1878\b\u01b1\u0003\u01b1\u187a"+
		"\b\u01b1\u0003\u01b1\u187c\b\u01b1\u0001\u01b2\u0001\u01b2\u0001\u01b2"+
		"\u0003\u01b2\u1881\b\u01b2\u0001\u01b2\u0001\u01b2\u0003\u01b2\u1885\b"+
		"\u01b2\u0001\u01b2\u0001\u01b2\u0001\u01b2\u0001\u01b2\u0001\u01b2\u0001"+
		"\u01b2\u0003\u01b2\u188d\b\u01b2\u0003\u01b2\u188f\b\u01b2\u0001\u01b3"+
		"\u0001\u01b3\u0001\u01b3\u0001\u01b3\u0001\u01b3\u0001\u01b3\u0001\u01b3"+
		"\u0001\u01b3\u0003\u01b3\u1899\b\u01b3\u0003\u01b3\u189b\b\u01b3\u0001"+
		"\u01b3\u0001\u01b3\u0003\u01b3\u189f\b\u01b3\u0001\u01b3\u0001\u01b3\u0003"+
		"\u01b3\u18a3\b\u01b3\u0003\u01b3\u18a5\b\u01b3\u0001\u01b4\u0001\u01b4"+
		"\u0001\u01b4\u0003\u01b4\u18aa\b\u01b4\u0003\u01b4\u18ac\b\u01b4\u0001"+
		"\u01b4\u0003\u01b4\u18af\b\u01b4\u0001\u01b5\u0001\u01b5\u0001\u01b5\u0001"+
		"\u01b5\u0001\u01b5\u0005\u01b5\u18b6\b\u01b5\n\u01b5\f\u01b5\u18b9\t\u01b5"+
		"\u0001\u01b5\u0001\u01b5\u0001\u01b6\u0001\u01b6\u0001\u01b6\u0001\u01b6"+
		"\u0001\u01b6\u0003\u01b6\u18c2\b\u01b6\u0001\u01b7\u0001\u01b7\u0001\u01b8"+
		"\u0001\u01b8\u0001\u01b9\u0001\u01b9\u0001\u01b9\u0001\u01ba\u0001\u01ba"+
		"\u0001\u01ba\u0003\u01ba\u18ce\b\u01ba\u0001\u01bb\u0001\u01bb\u0001\u01bb"+
		"\u0003\u01bb\u18d3\b\u01bb\u0001\u01bb\u0001\u01bb\u0001\u01bb\u0001\u01bb"+
		"\u0005\u01bb\u18d9\b\u01bb\n\u01bb\f\u01bb\u18dc\t\u01bb\u0001\u01bb\u0001"+
		"\u01bb\u0001\u01bb\u0003\u01bb\u18e1\b\u01bb\u0001\u01bb\u0001\u01bb\u0003"+
		"\u01bb\u18e5\b\u01bb\u0001\u01bc\u0001\u01bc\u0001\u01bc\u0003\u01bc\u18ea"+
		"\b\u01bc\u0001\u01bc\u0001\u01bc\u0001\u01bc\u0001\u01bc\u0005\u01bc\u18f0"+
		"\b\u01bc\n\u01bc\f\u01bc\u18f3\t\u01bc\u0001\u01bc\u0001\u01bc\u0001\u01bc"+
		"\u0003\u01bc\u18f8\b\u01bc\u0001\u01bd\u0001\u01bd\u0003\u01bd\u18fc\b"+
		"\u01bd\u0001\u01bd\u0001\u01bd\u0001\u01bd\u0003\u01bd\u1901\b\u01bd\u0005"+
		"\u01bd\u1903\b\u01bd\n\u01bd\f\u01bd\u1906\t\u01bd\u0001\u01be\u0001\u01be"+
		"\u0001\u01be\u0001\u01be\u0003\u01be\u190c\b\u01be\u0001\u01be\u0001\u01be"+
		"\u0001\u01bf\u0001\u01bf\u0001\u01bf\u0005\u01bf\u1913\b\u01bf\n\u01bf"+
		"\f\u01bf\u1916\t\u01bf\u0001\u01c0\u0001\u01c0\u0001\u01c0\u0001\u01c0"+
		"\u0003\u01c0\u191c\b\u01c0\u0001\u01c0\u0001\u01c0\u0001\u01c1\u0001\u01c1"+
		"\u0001\u01c1\u0003\u01c1\u1923\b\u01c1\u0001\u01c1\u0001\u01c1\u0001\u01c2"+
		"\u0001\u01c2\u0001\u01c3\u0001\u01c3\u0003\u01c3\u192b\b\u01c3\u0001\u01c3"+
		"\u0001\u01c3\u0003\u01c3\u192f\b\u01c3\u0001\u01c4\u0001\u01c4\u0001\u01c4"+
		"\u0003\u01c4\u1934\b\u01c4\u0001\u01c4\u0001\u01c4\u0001\u01c4\u0001\u01c4"+
		"\u0005\u01c4\u193a\b\u01c4\n\u01c4\f\u01c4\u193d\t\u01c4\u0001\u01c4\u0003"+
		"\u01c4\u1940\b\u01c4\u0001\u01c4\u0001\u01c4\u0003\u01c4\u1944\b\u01c4"+
		"\u0001\u01c5\u0001\u01c5\u0001\u01c5\u0003\u01c5\u1949\b\u01c5\u0001\u01c5"+
		"\u0001\u01c5\u0001\u01c5\u0001\u01c5\u0005\u01c5\u194f\b\u01c5\n\u01c5"+
		"\f\u01c5\u1952\t\u01c5\u0001\u01c5\u0003\u01c5\u1955\b\u01c5\u0001\u01c6"+
		"\u0001\u01c6\u0001\u01c6\u0003\u01c6\u195a\b\u01c6\u0001\u01c7\u0001\u01c7"+
		"\u0001\u01c7\u0003\u01c7\u195f\b\u01c7\u0001\u01c7\u0001\u01c7\u0001\u01c7"+
		"\u0001\u01c7\u0005\u01c7\u1965\b\u01c7\n\u01c7\f\u01c7\u1968\t\u01c7\u0001"+
		"\u01c7\u0003\u01c7\u196b\b\u01c7\u0001\u01c7\u0001\u01c7\u0003\u01c7\u196f"+
		"\b\u01c7\u0001\u01c8\u0001\u01c8\u0001\u01c8\u0003\u01c8\u1974\b\u01c8"+
		"\u0001\u01c8\u0001\u01c8\u0001\u01c8\u0001\u01c8\u0005\u01c8\u197a\b\u01c8"+
		"\n\u01c8\f\u01c8\u197d\t\u01c8\u0001\u01c8\u0003\u01c8\u1980\b\u01c8\u0001"+
		"\u01c9\u0001\u01c9\u0001\u01c9\u0001\u01c9\u0001\u01ca\u0001\u01ca\u0003"+
		"\u01ca\u1988\b\u01ca\u0001\u01ca\u0001\u01ca\u0001\u01ca\u0001\u01ca\u0001"+
		"\u01ca\u0001\u01ca\u0001\u01ca\u0001\u01ca\u0001\u01ca\u0001\u01ca\u0001"+
		"\u01ca\u0001\u01ca\u0001\u01ca\u0001\u01ca\u0001\u01ca\u0001\u01ca\u0001"+
		"\u01ca\u0001\u01ca\u0001\u01ca\u0003\u01ca\u199d\b\u01ca\u0001\u01cb\u0001"+
		"\u01cb\u0001\u01cb\u0001\u01cb\u0001\u01cb\u0001\u01cb\u0001\u01cb\u0001"+
		"\u01cb\u0001\u01cb\u0001\u01cb\u0001\u01cb\u0001\u01cb\u0001\u01cb\u0001"+
		"\u01cb\u0001\u01cb\u0001\u01cb\u0003\u01cb\u19af\b\u01cb\u0001\u01cc\u0001"+
		"\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0001"+
		"\u01cc\u0001\u01cc\u0003\u01cc\u19ba\b\u01cc\u0001\u01cc\u0001\u01cc\u0001"+
		"\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0001"+
		"\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0001"+
		"\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0003\u01cc\u19cf"+
		"\b\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0001"+
		"\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0001"+
		"\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0001"+
		"\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0001"+
		"\u01cc\u0003\u01cc\u19e9\b\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0001"+
		"\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0001"+
		"\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0001"+
		"\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0003\u01cc\u19fe\b\u01cc\u0001"+
		"\u01cd\u0001\u01cd\u0003\u01cd\u1a02\b\u01cd\u0001\u01cd\u0001\u01cd\u0001"+
		"\u01cd\u0003\u01cd\u1a07\b\u01cd\u0001\u01cd\u0001\u01cd\u0001\u01cd\u0001"+
		"\u01cd\u0001\u01cd\u0001\u01cd\u0001\u01cd\u0003\u01cd\u1a10\b\u01cd\u0003"+
		"\u01cd\u1a12\b\u01cd\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001"+
		"\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001"+
		"\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0003"+
		"\u01ce\u1a24\b\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001"+
		"\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001"+
		"\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001"+
		"\u01ce\u0001\u01ce\u0003\u01ce\u1a38\b\u01ce\u0001\u01ce\u0001\u01ce\u0001"+
		"\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001"+
		"\u01ce\u0003\u01ce\u1a43\b\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001"+
		"\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001"+
		"\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001"+
		"\u01ce\u0001\u01ce\u0003\u01ce\u1a56\b\u01ce\u0001\u01ce\u0001\u01ce\u0003"+
		"\u01ce\u1a5a\b\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001"+
		"\u01ce\u0001\u01ce\u0003\u01ce\u1a62\b\u01ce\u0001\u01ce\u0001\u01ce\u0003"+
		"\u01ce\u1a66\b\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001"+
		"\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0003\u01ce\u1a71"+
		"\b\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001"+
		"\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001"+
		"\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001"+
		"\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001"+
		"\u01ce\u0001\u01ce\u0001\u01ce\u0003\u01ce\u1a8d\b\u01ce\u0001\u01ce\u0001"+
		"\u01ce\u0001\u01ce\u0001\u01ce\u0003\u01ce\u1a93\b\u01ce\u0001\u01ce\u0001"+
		"\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001"+
		"\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001"+
		"\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001"+
		"\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001"+
		"\u01ce\u0001\u01ce\u0003\u01ce\u1ab0\b\u01ce\u0001\u01ce\u0001\u01ce\u0001"+
		"\u01ce\u0001\u01ce\u0001\u01ce\u0003\u01ce\u1ab7\b\u01ce\u0001\u01ce\u0001"+
		"\u01ce\u0003\u01ce\u1abb\b\u01ce\u0001\u01cf\u0001\u01cf\u0001\u01cf\u0003"+
		"\u01cf\u1ac0\b\u01cf\u0001\u01d0\u0001\u01d0\u0001\u01d0\u0001\u01d0\u0001"+
		"\u01d0\u0001\u01d0\u0001\u01d0\u0001\u01d0\u0003\u01d0\u1aca\b\u01d0\u0001"+
		"\u01d1\u0001\u01d1\u0001\u01d1\u0001\u01d1\u0001\u01d1\u0001\u01d1\u0001"+
		"\u01d1\u0001\u01d1\u0001\u01d1\u0003\u01d1\u1ad5\b\u01d1\u0001\u01d2\u0001"+
		"\u01d2\u0001\u01d2\u0001\u01d2\u0001\u01d2\u0001\u01d2\u0001\u01d2\u0001"+
		"\u01d2\u0003\u01d2\u1adf\b\u01d2\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001"+
		"\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0003\u01d3\u1ae8\b\u01d3\u0001"+
		"\u01d4\u0001\u01d4\u0001\u01d4\u0001\u01d4\u0001\u01d4\u0001\u01d4\u0001"+
		"\u01d4\u0001\u01d4\u0001\u01d4\u0001\u01d4\u0001\u01d4\u0001\u01d4\u0001"+
		"\u01d4\u0001\u01d4\u0001\u01d4\u0001\u01d4\u0001\u01d4\u0001\u01d4\u0001"+
		"\u01d4\u0001\u01d4\u0003\u01d4\u1afe\b\u01d4\u0001\u01d5\u0001\u01d5\u0001"+
		"\u01d5\u0001\u01d5\u0001\u01d5\u0001\u01d5\u0001\u01d5\u0001\u01d5\u0001"+
		"\u01d5\u0001\u01d5\u0001\u01d5\u0003\u01d5\u1b0b\b\u01d5\u0001\u01d6\u0001"+
		"\u01d6\u0001\u01d6\u0001\u01d6\u0001\u01d6\u0003\u01d6\u1b12\b\u01d6\u0001"+
		"\u01d7\u0001\u01d7\u0001\u01d7\u0001\u01d7\u0001\u01d7\u0001\u01d7\u0001"+
		"\u01d7\u0001\u01d7\u0001\u01d7\u0001\u01d7\u0003\u01d7\u1b1e\b\u01d7\u0001"+
		"\u01d8\u0001\u01d8\u0001\u01d8\u0001\u01d8\u0001\u01d8\u0001\u01d8\u0001"+
		"\u01d8\u0001\u01d8\u0001\u01d8\u0001\u01d8\u0001\u01d8\u0003\u01d8\u1b2b"+
		"\b\u01d8\u0001\u01d9\u0001\u01d9\u0001\u01d9\u0001\u01d9\u0001\u01d9\u0001"+
		"\u01d9\u0001\u01d9\u0001\u01d9\u0001\u01d9\u0001\u01d9\u0001\u01d9\u0003"+
		"\u01d9\u1b38\b\u01d9\u0001\u01da\u0001\u01da\u0001\u01da\u0001\u01da\u0001"+
		"\u01da\u0001\u01da\u0001\u01da\u0001\u01da\u0001\u01da\u0003\u01da\u1b43"+
		"\b\u01da\u0001\u01db\u0001\u01db\u0001\u01db\u0001\u01db\u0001\u01db\u0001"+
		"\u01db\u0001\u01db\u0001\u01db\u0001\u01db\u0001\u01db\u0003\u01db\u1b4f"+
		"\b\u01db\u0001\u01dc\u0001\u01dc\u0001\u01dc\u0001\u01dc\u0003\u01dc\u1b55"+
		"\b\u01dc\u0001\u01dc\u0001\u01dc\u0001\u01dc\u0001\u01dc\u0003\u01dc\u1b5b"+
		"\b\u01dc\u0001\u01dc\u0001\u01dc\u0001\u01dc\u0001\u01dc\u0003\u01dc\u1b61"+
		"\b\u01dc\u0001\u01dd\u0001\u01dd\u0001\u01dd\u0001\u01dd\u0001\u01dd\u0001"+
		"\u01dd\u0001\u01dd\u0001\u01dd\u0001\u01dd\u0001\u01dd\u0003\u01dd\u1b6d"+
		"\b\u01dd\u0001\u01de\u0001\u01de\u0001\u01de\u0001\u01de\u0001\u01de\u0001"+
		"\u01de\u0001\u01de\u0001\u01de\u0001\u01de\u0001\u01de\u0001\u01de\u0003"+
		"\u01de\u1b7a\b\u01de\u0001\u01df\u0001\u01df\u0001\u01df\u0001\u01df\u0001"+
		"\u01df\u0001\u01df\u0001\u01df\u0001\u01df\u0001\u01df\u0001\u01df\u0001"+
		"\u01df\u0003\u01df\u1b87\b\u01df\u0001\u01e0\u0001\u01e0\u0001\u01e0\u0001"+
		"\u01e0\u0001\u01e0\u0001\u01e0\u0001\u01e0\u0001\u01e0\u0001\u01e0\u0001"+
		"\u01e0\u0003\u01e0\u1b93\b\u01e0\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001"+
		"\u01e1\u0003\u01e1\u1b99\b\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001"+
		"\u01e1\u0003\u01e1\u1b9f\b\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001"+
		"\u01e1\u0001\u01e1\u0003\u01e1\u1ba6\b\u01e1\u0001\u01e2\u0001\u01e2\u0003"+
		"\u01e2\u1baa\b\u01e2\u0001\u01e3\u0001\u01e3\u0001\u01e3\u0001\u01e3\u0001"+
		"\u01e3\u0001\u01e3\u0001\u01e3\u0001\u01e3\u0001\u01e3\u0001\u01e3\u0001"+
		"\u01e3\u0003\u01e3\u1bb7\b\u01e3\u0001\u01e4\u0001\u01e4\u0001\u01e4\u0001"+
		"\u01e4\u0001\u01e4\u0001\u01e4\u0001\u01e4\u0001\u01e4\u0001\u01e4\u0001"+
		"\u01e4\u0001\u01e4\u0003\u01e4\u1bc4\b\u01e4\u0001\u01e5\u0001\u01e5\u0001"+
		"\u01e5\u0001\u01e5\u0001\u01e5\u0001\u01e5\u0001\u01e5\u0003\u01e5\u1bcd"+
		"\b\u01e5\u0001\u01e6\u0001\u01e6\u0001\u01e6\u0001\u01e6\u0001\u01e6\u0001"+
		"\u01e6\u0001\u01e6\u0001\u01e6\u0003\u01e6\u1bd7\b\u01e6\u0001\u01e7\u0001"+
		"\u01e7\u0001\u01e8\u0001\u01e8\u0001\u01e8\u0001\u01e8\u0001\u01e9\u0001"+
		"\u01e9\u0001\u01e9\u0001\u01e9\u0001\u01e9\u0001\u01e9\u0001\u01e9\u0001"+
		"\u01e9\u0001\u01e9\u0001\u01e9\u0001\u01e9\u0001\u01e9\u0001\u01e9\u0001"+
		"\u01e9\u0001\u01e9\u0001\u01e9\u0001\u01e9\u0001\u01e9\u0001\u01e9\u0001"+
		"\u01e9\u0001\u01e9\u0001\u01e9\u0001\u01e9\u0001\u01e9\u0001\u01e9\u0001"+
		"\u01e9\u0001\u01e9\u0001\u01e9\u0001\u01e9\u0001\u01e9\u0001\u01e9\u0001"+
		"\u01e9\u0001\u01e9\u0001\u01e9\u0001\u01e9\u0001\u01e9\u0001\u01e9\u0001"+
		"\u01e9\u0001\u01e9\u0001\u01e9\u0003\u01e9\u1c07\b\u01e9\u0001\u01ea\u0001"+
		"\u01ea\u0001\u01eb\u0001\u01eb\u0001\u01ec\u0001\u01ec\u0001\u01ec\u0001"+
		"\u01ec\u0003\u01ec\u1c11\b\u01ec\u0003\u01ec\u1c13\b\u01ec\u0001\u01ed"+
		"\u0001\u01ed\u0001\u01ed\u0001\u01ed\u0001\u01ed\u0001\u01ed\u0001\u01ed"+
		"\u0001\u01ed\u0001\u01ed\u0001\u01ed\u0003\u01ed\u1c1f\b\u01ed\u0001\u01ee"+
		"\u0001\u01ee\u0001\u01ee\u0001\u01ee\u0003\u01ee\u1c25\b\u01ee\u0001\u01ee"+
		"\u0001\u01ee\u0001\u01ee\u0001\u01ee\u0005\u01ee\u1c2b\b\u01ee\n\u01ee"+
		"\f\u01ee\u1c2e\t\u01ee\u0003\u01ee\u1c30\b\u01ee\u0001\u01ef\u0001\u01ef"+
		"\u0001\u01ef\u0001\u01ef\u0001\u01ef\u0005\u01ef\u1c37\b\u01ef\n\u01ef"+
		"\f\u01ef\u1c3a\t\u01ef\u0003\u01ef\u1c3c\b\u01ef\u0001\u01ef\u0001\u01ef"+
		"\u0001\u01ef\u0001\u01ef\u0001\u01ef\u0001\u01ef\u0001\u01ef\u0001\u01ef"+
		"\u0001\u01ef\u0005\u01ef\u1c47\b\u01ef\n\u01ef\f\u01ef\u1c4a\t\u01ef\u0003"+
		"\u01ef\u1c4c\b\u01ef\u0001\u01ef\u0001\u01ef\u0001\u01ef\u0001\u01ef\u0001"+
		"\u01ef\u0003\u01ef\u1c53\b\u01ef\u0001\u01f0\u0001\u01f0\u0001\u01f0\u0001"+
		"\u01f0\u0003\u01f0\u1c59\b\u01f0\u0001\u01f0\u0001\u01f0\u0001\u01f0\u0001"+
		"\u01f0\u0001\u01f0\u0003\u01f0\u1c60\b\u01f0\u0001\u01f0\u0001\u01f0\u0001"+
		"\u01f0\u0001\u01f0\u0005\u01f0\u1c66\b\u01f0\n\u01f0\f\u01f0\u1c69\t\u01f0"+
		"\u0003\u01f0\u1c6b\b\u01f0\u0001\u01f1\u0001\u01f1\u0001\u01f1\u0001\u01f1"+
		"\u0001\u01f1\u0001\u01f1\u0001\u01f1\u0005\u01f1\u1c74\b\u01f1\n\u01f1"+
		"\f\u01f1\u1c77\t\u01f1\u0003\u01f1\u1c79\b\u01f1\u0001\u01f1\u0001\u01f1"+
		"\u0001\u01f1\u0001\u01f1\u0001\u01f1\u0001\u01f1\u0001\u01f1\u0003\u01f1"+
		"\u1c82\b\u01f1\u0001\u01f2\u0001\u01f2\u0001\u01f2\u0001\u01f2\u0001\u01f2"+
		"\u0001\u01f2\u0001\u01f2\u0003\u01f2\u1c8b\b\u01f2\u0001\u01f2\u0001\u01f2"+
		"\u0001\u01f2\u0001\u01f2\u0001\u01f2\u0001\u01f2\u0003\u01f2\u1c93\b\u01f2"+
		"\u0003\u01f2\u1c95\b\u01f2\u0001\u01f3\u0001\u01f3\u0001\u01f3\u0001\u01f3"+
		"\u0001\u01f3\u0001\u01f3\u0001\u01f3\u0003\u01f3\u1c9e\b\u01f3\u0001\u01f3"+
		"\u0001\u01f3\u0001\u01f3\u0003\u01f3\u1ca3\b\u01f3\u0003\u01f3\u1ca5\b"+
		"\u01f3\u0001\u01f4\u0001\u01f4\u0001\u01f4\u0001\u01f4\u0003\u01f4\u1cab"+
		"\b\u01f4\u0001\u01f4\u0001\u01f4\u0001\u01f4\u0001\u01f4\u0001\u01f4\u0001"+
		"\u01f4\u0001\u01f4\u0005\u01f4\u1cb4\b\u01f4\n\u01f4\f\u01f4\u1cb7\t\u01f4"+
		"\u0003\u01f4\u1cb9\b\u01f4\u0003\u01f4\u1cbb\b\u01f4\u0001\u01f5\u0001"+
		"\u01f5\u0001\u01f5\u0001\u01f5\u0001\u01f5\u0001\u01f5\u0003\u01f5\u1cc3"+
		"\b\u01f5\u0001\u01f5\u0001\u01f5\u0001\u01f5\u0001\u01f5\u0003\u01f5\u1cc9"+
		"\b\u01f5\u0001\u01f6\u0001\u01f6\u0001\u01f6\u0001\u01f6\u0001\u01f6\u0001"+
		"\u01f6\u0001\u01f6\u0001\u01f6\u0003\u01f6\u1cd3\b\u01f6\u0001\u01f7\u0001"+
		"\u01f7\u0001\u01f8\u0001\u01f8\u0001\u01f9\u0001\u01f9\u0001\u01fa\u0001"+
		"\u01fa\u0001\u01fa\u0003\u01fa\u1cde\b\u01fa\u0001\u01fb\u0001\u01fb\u0001"+
		"\u01fb\u0003\u01fb\u1ce3\b\u01fb\u0001\u01fb\u0001\u01fb\u0001\u01fc\u0001"+
		"\u01fc\u0001\u01fc\u0001\u01fc\u0001\u01fc\u0001\u01fc\u0001\u01fc\u0005"+
		"\u01fc\u1cee\b\u01fc\n\u01fc\f\u01fc\u1cf1\t\u01fc\u0001\u01fc\u0001\u01fc"+
		"\u0001\u01fc\u0003\u01fc\u1cf6\b\u01fc\u0001\u01fd\u0001\u01fd\u0001\u01fd"+
		"\u0001\u01fd\u0001\u01fd\u0001\u01fd\u0001\u01fd\u0003\u01fd\u1cff\b\u01fd"+
		"\u0001\u01fd\u0001\u01fd\u0001\u01fd\u0001\u01fd\u0001\u01fd\u0001\u01fd"+
		"\u0001\u01fd\u0001\u01fd\u0001\u01fd\u0003\u01fd\u1d0a\b\u01fd\u0001\u01fd"+
		"\u0001\u01fd\u0001\u01fd\u0001\u01fd\u0003\u01fd\u1d10\b\u01fd\u0001\u01fd"+
		"\u0001\u01fd\u0001\u01fd\u0003\u01fd\u1d15\b\u01fd\u0003\u01fd\u1d17\b"+
		"\u01fd\u0001\u01fe\u0001\u01fe\u0001\u01fe\u0001\u01fe\u0001\u01fe\u0003"+
		"\u01fe\u1d1e\b\u01fe\u0001\u01ff\u0001\u01ff\u0001\u01ff\u0003\u01ff\u1d23"+
		"\b\u01ff\u0001\u01ff\u0001\u01ff\u0001\u0200\u0001\u0200\u0001\u0200\u0001"+
		"\u0200\u0001\u0200\u0001\u0200\u0001\u0200\u0001\u0200\u0001\u0200\u0001"+
		"\u0200\u0001\u0200\u0001\u0200\u0001\u0200\u0003\u0200\u1d34\b\u0200\u0001"+
		"\u0201\u0001\u0201\u0001\u0201\u0001\u0201\u0001\u0201\u0001\u0201\u0001"+
		"\u0201\u0001\u0201\u0003\u0201\u1d3e\b\u0201\u0001\u0202\u0001\u0202\u0001"+
		"\u0202\u0001\u0202\u0003\u0202\u1d44\b\u0202\u0001\u0203\u0001\u0203\u0001"+
		"\u0203\u0001\u0203\u0001\u0203\u0001\u0203\u0003\u0203\u1d4c\b\u0203\u0001"+
		"\u0203\u0003\u0203\u1d4f\b\u0203\u0001\u0203\u0001\u0203\u0001\u0203\u0001"+
		"\u0203\u0005\u0203\u1d55\b\u0203\n\u0203\f\u0203\u1d58\t\u0203\u0003\u0203"+
		"\u1d5a\b\u0203\u0001\u0204\u0001\u0204\u0001\u0204\u0001\u0204\u0001\u0204"+
		"\u0001\u0204\u0001\u0204\u0001\u0204\u0001\u0204\u0001\u0204\u0001\u0204"+
		"\u0001\u0204\u0001\u0204\u0001\u0204\u0001\u0204\u0001\u0204\u0001\u0204"+
		"\u0001\u0204\u0003\u0204\u1d6e\b\u0204\u0001\u0205\u0001\u0205\u0001\u0206"+
		"\u0001\u0206\u0001\u0207\u0001\u0207\u0001\u0207\u0001\u0207\u0001\u0207"+
		"\u0005\u0207\u1d79\b\u0207\n\u0207\f\u0207\u1d7c\t\u0207\u0003\u0207\u1d7e"+
		"\b\u0207\u0001\u0207\u0001\u0207\u0001\u0207\u0001\u0207\u0001\u0207\u0003"+
		"\u0207\u1d85\b\u0207\u0001\u0208\u0001\u0208\u0001\u0208\u0001\u0208\u0001"+
		"\u0208\u0001\u0208\u0003\u0208\u1d8d\b\u0208\u0001\u0209\u0001\u0209\u0001"+
		"\u0209\u0001\u0209\u0001\u0209\u0001\u0209\u0001\u0209\u0005\u0209\u1d96"+
		"\b\u0209\n\u0209\f\u0209\u1d99\t\u0209\u0003\u0209\u1d9b\b\u0209\u0001"+
		"\u020a\u0001\u020a\u0001\u020a\u0001\u020a\u0001\u020a\u0001\u020a\u0001"+
		"\u020a\u0003\u020a\u1da4\b\u020a\u0001\u020b\u0001\u020b\u0001\u020b\u0003"+
		"\u020b\u1da9\b\u020b\u0001\u020b\u0001\u020b\u0001\u020b\u0001\u020b\u0005"+
		"\u020b\u1daf\b\u020b\n\u020b\f\u020b\u1db2\t\u020b\u0001\u020c\u0001\u020c"+
		"\u0001\u020c\u0001\u020c\u0001\u020c\u0001\u020c\u0001\u020c\u0001\u020c"+
		"\u0001\u020c\u0001\u020c\u0001\u020c\u0001\u020c\u0003\u020c\u1dc0\b\u020c"+
		"\u0001\u020d\u0001\u020d\u0001\u020d\u0001\u020e\u0001\u020e\u0001\u020e"+
		"\u0001\u020e\u0001\u020e\u0001\u020e\u0001\u020e\u0003\u020e\u1dcc\b\u020e"+
		"\u0001\u020f\u0001\u020f\u0001\u020f\u0001\u020f\u0003\u020f\u1dd2\b\u020f"+
		"\u0001\u0210\u0001\u0210\u0001\u0210\u0001\u0210\u0003\u0210\u1dd8\b\u0210"+
		"\u0001\u0210\u0001\u0210\u0001\u0210\u0001\u0210\u0005\u0210\u1dde\b\u0210"+
		"\n\u0210\f\u0210\u1de1\t\u0210\u0003\u0210\u1de3\b\u0210\u0001\u0211\u0001"+
		"\u0211\u0001\u0211\u0001\u0211\u0001\u0211\u0001\u0211\u0003\u0211\u1deb"+
		"\b\u0211\u0001\u0212\u0001\u0212\u0001\u0212\u0001\u0212\u0001\u0213\u0001"+
		"\u0213\u0001\u0213\u0001\u0213\u0001\u0213\u0001\u0213\u0001\u0213\u0001"+
		"\u0213\u0005\u0213\u1df9\b\u0213\n\u0213\f\u0213\u1dfc\t\u0213\u0001\u0213"+
		"\u0003\u0213\u1dff\b\u0213\u0001\u0214\u0001\u0214\u0001\u0215\u0001\u0215"+
		"\u0001\u0215\u0001\u0215\u0001\u0215\u0001\u0215\u0003\u0215\u1e09\b\u0215"+
		"\u0001\u0215\u0001\u0215\u0001\u0215\u0001\u0215\u0001\u0215\u0003\u0215"+
		"\u1e10\b\u0215\u0003\u0215\u1e12\b\u0215\u0001\u0215\u0001\u0215\u0001"+
		"\u0215\u0001\u0215\u0001\u0215\u0001\u0215\u0001\u0215\u0001\u0215\u0001"+
		"\u0215\u0001\u0215\u0001\u0215\u0001\u0215\u0001\u0215\u0001\u0215\u0001"+
		"\u0215\u0001\u0215\u0001\u0215\u0001\u0215\u0001\u0215\u0001\u0215\u0003"+
		"\u0215\u1e28\b\u0215\u0001\u0216\u0001\u0216\u0001\u0217\u0001\u0217\u0001"+
		"\u0217\u0001\u0217\u0001\u0217\u0001\u0217\u0003\u0217\u1e32\b\u0217\u0001"+
		"\u0218\u0001\u0218\u0001\u0218\u0001\u0218\u0001\u0218\u0003\u0218\u1e39"+
		"\b\u0218\u0001\u0218\u0001\u0c58\u0004blrt\u0219\u0000\u0002\u0004\u0006"+
		"\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,."+
		"02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088"+
		"\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0"+
		"\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8"+
		"\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0"+
		"\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8"+
		"\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100"+
		"\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118"+
		"\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130"+
		"\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148"+
		"\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160"+
		"\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178"+
		"\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190"+
		"\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8"+
		"\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0"+
		"\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8"+
		"\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0"+
		"\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208"+
		"\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220"+
		"\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238"+
		"\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250"+
		"\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268"+
		"\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280"+
		"\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298"+
		"\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0"+
		"\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8"+
		"\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0"+
		"\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8"+
		"\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308\u030a\u030c\u030e\u0310"+
		"\u0312\u0314\u0316\u0318\u031a\u031c\u031e\u0320\u0322\u0324\u0326\u0328"+
		"\u032a\u032c\u032e\u0330\u0332\u0334\u0336\u0338\u033a\u033c\u033e\u0340"+
		"\u0342\u0344\u0346\u0348\u034a\u034c\u034e\u0350\u0352\u0354\u0356\u0358"+
		"\u035a\u035c\u035e\u0360\u0362\u0364\u0366\u0368\u036a\u036c\u036e\u0370"+
		"\u0372\u0374\u0376\u0378\u037a\u037c\u037e\u0380\u0382\u0384\u0386\u0388"+
		"\u038a\u038c\u038e\u0390\u0392\u0394\u0396\u0398\u039a\u039c\u039e\u03a0"+
		"\u03a2\u03a4\u03a6\u03a8\u03aa\u03ac\u03ae\u03b0\u03b2\u03b4\u03b6\u03b8"+
		"\u03ba\u03bc\u03be\u03c0\u03c2\u03c4\u03c6\u03c8\u03ca\u03cc\u03ce\u03d0"+
		"\u03d2\u03d4\u03d6\u03d8\u03da\u03dc\u03de\u03e0\u03e2\u03e4\u03e6\u03e8"+
		"\u03ea\u03ec\u03ee\u03f0\u03f2\u03f4\u03f6\u03f8\u03fa\u03fc\u03fe\u0400"+
		"\u0402\u0404\u0406\u0408\u040a\u040c\u040e\u0410\u0412\u0414\u0416\u0418"+
		"\u041a\u041c\u041e\u0420\u0422\u0424\u0426\u0428\u042a\u042c\u042e\u0430"+
		"\u0000i\u0001\u0000ab\u0002\u0000\u010e\u010e\u0149\u0149\u0002\u0000"+
		"\u02df\u02df\u02e6\u02e6\u0001\u0000\u000f\u0010\u0001\u0000\u0087\u0089"+
		"\u0001\u0000mn6\u000056;;==EGRT\\\\bbvv{|\u0080\u0081\u0085\u0085\u0087"+
		"\u0087\u0089\u0099\u009c\u009d\u009f\u009f\u00a1\u00a2\u00a4\u00a6\u00a9"+
		"\u00aa\u00ad\u00ad\u00b0\u00b0\u00b8\u00b8\u00c2\u00c2\u00cb\u00cc\u00d0"+
		"\u00d1\u00d5\u00d5\u00f2\u00f2\u00f8\u00f8\u00fa\u0100\u0102\u0103\u010b"+
		"\u010d\u010f\u0114\u0116\u0117\u0119\u0123\u0125\u012a\u012c\u0134\u0136"+
		"\u014a\u0151\u01c3\u01c5\u01c5\u01cb\u01cb\u01d7\u01d9\u01fe\u020d\u0210"+
		"\u0210\u0212\u0218\u021c\u021c\u0221\u0222\u0224\u0226\u0228\u022a\u022c"+
		"\u0235\u0240\u02a1\u02aa\u02ab\u02af\u02af\u02b3\u02b3\u02c8\u02c8\u02d7"+
		"\u02d7\u0002\u0000\u02dd\u02dd\u02df\u02df\u0002\u0000\u0004\u0004hh\u0002"+
		"\u0000\u0005\u0005ii\u0002\u0000\u0006\u0006kk\u0002\u0000ln\u0101\u0101"+
		"\u0001\u0000rs\u0001\u0000\u0018\u001d\u0004\u0000\u0006\u0007\u000f\u0010"+
		",,\u00f8\u00f8\u0002\u0000==\u0100\u0100\u0001\u0000\u0095\u0099\u0001"+
		"\u0000\u00f3\u00f5\u0001\u0000\u00ed\u00ee\u0001\u0000xy\u0002\u0000R"+
		"R\u02d5\u02d5\u0002\u0000\u0118\u0118\u02d6\u02d6\u0001\u0000\u00ff\u0100"+
		"\u0002\u0000\u00a9\u00a9\u01c5\u01c5\u0002\u0000\u0117\u0117\u0121\u0121"+
		"\b\u0000\u0083\u0083\u0087\u0088\u00ad\u00af\u00b1\u00b9\u00f8\u00f8\u016a"+
		"\u016a\u01c7\u01d6\u02dd\u02dd\u0001\u0000\u00eb\u00ec\u0001\u0000\u02e7"+
		"\u02e8\u0002\u0000\u0100\u0100\u013f\u013f\u0002\u0000\u01a2\u01a2\u01b3"+
		"\u01b3\u0005\u0000\u00ff\u00ff\u0116\u0116\u0135\u0135\u0139\u0139\u019f"+
		"\u019f\t\u0000\u0137\u0137\u0143\u0143\u019b\u019c\u01a2\u01a2\u01ab\u01ac"+
		"\u01b0\u01b1\u01b6\u01b6\u01c2\u01c2\u01f8\u01f8\u0003\u0000\u0112\u0112"+
		"\u0135\u0135\u0146\u0146\u0001\u0000\u014c\u014d\u0002\u0000\u00b0\u00b0"+
		"\u0136\u0136\u0003\u0000\u00d8\u00e8\u0221\u0221\u0224\u0224\u0001\u0000"+
		"HI\u0002\u0000\u00ba\u00ba\u0100\u0100\u0002\u0000\u010d\u010d\u0124\u0124"+
		"\u0002\u0000\u011f\u011f\u013e\u013e\u0001\u0000\u0113\u0114\u0001\u0000"+
		"01\u0002\u0000ll\u009a\u009a\u0003\u0000\u00ff\u00ff\u0135\u0135\u0139"+
		"\u0139\u0002\u0000\u012c\u012d\u013a\u013a\u0001\u0000\u01ae\u01af\u0001"+
		"\u0000[\\\u0002\u0000\u0105\u0105\u0134\u0134\u0001\u0000\u009c\u009d"+
		"\u0003\u0000\u008c\u008c\u008e\u0090\u0119\u011c\u0003\u0000;;\u009d\u009d"+
		"\u0111\u0111\u0002\u0000\u0135\u0135\u01fd\u01fd\u0003\u0000XXbb\u00cb"+
		"\u00cb\u0001\u0000\u0203\u0206\u0002\u0000\r\r\u0203\u0206\u0001\u0000"+
		"\u020d\u020e\u0001\u0000\u020f\u0212\u0002\u0000\u00cb\u00cb\u0213\u0214"+
		"\u0003\u0000\u00d3\u00d3\u01d7\u01d7\u021b\u021b\u0003\u0000\u017b\u017b"+
		"\u0216\u0216\u0226\u0226\u0002\u0000\u010d\u010d\u022f\u022f\u0002\u0000"+
		"rr\u0107\u0107\u0001\u0000\u028f\u0290\u0001\u0000\u0204\u0205\u0003\u0000"+
		"ab\u0233\u0233\u0289\u0289\u0002\u0000\u0137\u0137\u0287\u0288\u0002\u0000"+
		"\u00cb\u00cb\u023e\u023e\u0001\u0000\u0284\u0286\u0002\u0000\u00c9\u00c9"+
		"\u0281\u0282\u0001\u0000\u00c8\u00c9\u0001\u0000\u023b\u023c\u0002\u0000"+
		"\u00d3\u00d3\u023d\u023d\u0002\u0000\u011c\u011d\u0271\u0271\u0002\u0000"+
		"\u00a6\u00a6\u026f\u026f\u0002\u0000bb\u0111\u0111\u0004\u0000rr\u0111"+
		"\u0111\u0135\u0135\u026a\u026a\u0002\u0000\u011c\u011c\u0271\u0271\u0003"+
		"\u0000XX\u00c8\u00c8\u025b\u025b\u0002\u0000\u0135\u0135\u0259\u025a\u0002"+
		"\u0000\u011d\u011d\u0245\u0245\u0002\u0000\r\r\u000f\u0012\u0002\u0000"+
		"OOrr\u0002\u0000YY]]\u0002\u0000XX[\\\u0002\u0000ZZ]]\u0001\u0000\u01d8"+
		"\u01d9\u0002\u0000uu\u0129\u0129\u0003\u0000\u00bf\u00bf\u0129\u0129\u0152"+
		"\u0152\u0002\u0000\u00bf\u00c0\u0129\u0129\u0002\u0000\u009d\u009d\u00c4"+
		"\u00c4\u0001\u0000\u02c2\u02c3\u0002\u0000\u0111\u0111\u02c5\u02c5\u0002"+
		"\u0000UUgg\u0002\u0000\u00cc\u00cc\u0155\u0155\u0002\u0000\u014e\u014e"+
		"\u0166\u0166\u0002\u0000\u00cc\u00cc\u0193\u0193\u0001\u0000\u0158\u0159"+
		"\u0001\u0000\u017b\u017c\u0002\u0000\u00cc\u00cc\u015a\u015a\u0002\u0000"+
		"..\u014c\u014c\u0002\u0000\u0150\u0150\u02ae\u02ae\u0005\u000066\u00cc"+
		"\u00cc\u010b\u010c\u0130\u0130\u0136\u0136\u0002\u0000UUff\u0002\u0000"+
		"\u02e4\u02e4\u02e6\u02e6\u0002\u0000\u02b5\u02b5\u02ba\u02ba\u2256\u0000"+
		"\u046e\u0001\u0000\u0000\u0000\u0002\u0475\u0001\u0000\u0000\u0000\u0004"+
		"\u0483\u0001\u0000\u0000\u0000\u0006\u0485\u0001\u0000\u0000\u0000\b\u0489"+
		"\u0001\u0000\u0000\u0000\n\u048b\u0001\u0000\u0000\u0000\f\u049b\u0001"+
		"\u0000\u0000\u0000\u000e\u04a2\u0001\u0000\u0000\u0000\u0010\u04b2\u0001"+
		"\u0000\u0000\u0000\u0012\u04b6\u0001\u0000\u0000\u0000\u0014\u04be\u0001"+
		"\u0000\u0000\u0000\u0016\u04c2\u0001\u0000\u0000\u0000\u0018\u04c8\u0001"+
		"\u0000\u0000\u0000\u001a\u04d1\u0001\u0000\u0000\u0000\u001c\u04d3\u0001"+
		"\u0000\u0000\u0000\u001e\u04d6\u0001\u0000\u0000\u0000 \u04e1\u0001\u0000"+
		"\u0000\u0000\"\u04e3\u0001\u0000\u0000\u0000$\u04e5\u0001\u0000\u0000"+
		"\u0000&\u04e7\u0001\u0000\u0000\u0000(\u04e9\u0001\u0000\u0000\u0000*"+
		"\u04ed\u0001\u0000\u0000\u0000,\u04f1\u0001\u0000\u0000\u0000.\u04f3\u0001"+
		"\u0000\u0000\u00000\u04f5\u0001\u0000\u0000\u00002\u04f7\u0001\u0000\u0000"+
		"\u00004\u04f9\u0001\u0000\u0000\u00006\u04fe\u0001\u0000\u0000\u00008"+
		"\u0505\u0001\u0000\u0000\u0000:\u050f\u0001\u0000\u0000\u0000<\u0516\u0001"+
		"\u0000\u0000\u0000>\u051d\u0001\u0000\u0000\u0000@\u052a\u0001\u0000\u0000"+
		"\u0000B\u0531\u0001\u0000\u0000\u0000D\u0535\u0001\u0000\u0000\u0000F"+
		"\u0537\u0001\u0000\u0000\u0000H\u0541\u0001\u0000\u0000\u0000J\u0547\u0001"+
		"\u0000\u0000\u0000L\u054c\u0001\u0000\u0000\u0000N\u054e\u0001\u0000\u0000"+
		"\u0000P\u0550\u0001\u0000\u0000\u0000R\u055b\u0001\u0000\u0000\u0000T"+
		"\u0567\u0001\u0000\u0000\u0000V\u0574\u0001\u0000\u0000\u0000X\u0576\u0001"+
		"\u0000\u0000\u0000Z\u0578\u0001\u0000\u0000\u0000\\\u057d\u0001\u0000"+
		"\u0000\u0000^\u057f\u0001\u0000\u0000\u0000`\u058a\u0001\u0000\u0000\u0000"+
		"b\u0597\u0001\u0000\u0000\u0000d\u05aa\u0001\u0000\u0000\u0000f\u05ac"+
		"\u0001\u0000\u0000\u0000h\u05ae\u0001\u0000\u0000\u0000j\u05b5\u0001\u0000"+
		"\u0000\u0000l\u05b7\u0001\u0000\u0000\u0000n\u05d1\u0001\u0000\u0000\u0000"+
		"p\u05fe\u0001\u0000\u0000\u0000r\u0600\u0001\u0000\u0000\u0000t\u0662"+
		"\u0001\u0000\u0000\u0000v\u066f\u0001\u0000\u0000\u0000x\u0671\u0001\u0000"+
		"\u0000\u0000z\u0683\u0001\u0000\u0000\u0000|\u0685\u0001\u0000\u0000\u0000"+
		"~\u0692\u0001\u0000\u0000\u0000\u0080\u06aa\u0001\u0000\u0000\u0000\u0082"+
		"\u06ac\u0001\u0000\u0000\u0000\u0084\u06ae\u0001\u0000\u0000\u0000\u0086"+
		"\u06c0\u0001\u0000\u0000\u0000\u0088\u06c2\u0001\u0000\u0000\u0000\u008a"+
		"\u06c7\u0001\u0000\u0000\u0000\u008c\u06d2\u0001\u0000\u0000\u0000\u008e"+
		"\u06e3\u0001\u0000\u0000\u0000\u0090\u06e5\u0001\u0000\u0000\u0000\u0092"+
		"\u06ec\u0001\u0000\u0000\u0000\u0094\u06f9\u0001\u0000\u0000\u0000\u0096"+
		"\u06fb\u0001\u0000\u0000\u0000\u0098\u070c\u0001\u0000\u0000\u0000\u009a"+
		"\u071b\u0001\u0000\u0000\u0000\u009c\u0725\u0001\u0000\u0000\u0000\u009e"+
		"\u0727\u0001\u0000\u0000\u0000\u00a0\u0737\u0001\u0000\u0000\u0000\u00a2"+
		"\u0742\u0001\u0000\u0000\u0000\u00a4\u074e\u0001\u0000\u0000\u0000\u00a6"+
		"\u0778\u0001\u0000\u0000\u0000\u00a8\u077a\u0001\u0000\u0000\u0000\u00aa"+
		"\u0783\u0001\u0000\u0000\u0000\u00ac\u0785\u0001\u0000\u0000\u0000\u00ae"+
		"\u079e\u0001\u0000\u0000\u0000\u00b0\u07a0\u0001\u0000\u0000\u0000\u00b2"+
		"\u07ae\u0001\u0000\u0000\u0000\u00b4\u07b3\u0001\u0000\u0000\u0000\u00b6"+
		"\u07ba\u0001\u0000\u0000\u0000\u00b8\u07bc\u0001\u0000\u0000\u0000\u00ba"+
		"\u07d6\u0001\u0000\u0000\u0000\u00bc\u07e2\u0001\u0000\u0000\u0000\u00be"+
		"\u07f2\u0001\u0000\u0000\u0000\u00c0\u07f4\u0001\u0000\u0000\u0000\u00c2"+
		"\u07fc\u0001\u0000\u0000\u0000\u00c4\u0808\u0001\u0000\u0000\u0000\u00c6"+
		"\u0815\u0001\u0000\u0000\u0000\u00c8\u081e\u0001\u0000\u0000\u0000\u00ca"+
		"\u0821\u0001\u0000\u0000\u0000\u00cc\u082e\u0001\u0000\u0000\u0000\u00ce"+
		"\u0838\u0001\u0000\u0000\u0000\u00d0\u083d\u0001\u0000\u0000\u0000\u00d2"+
		"\u083f\u0001\u0000\u0000\u0000\u00d4\u0846\u0001\u0000\u0000\u0000\u00d6"+
		"\u084e\u0001\u0000\u0000\u0000\u00d8\u0856\u0001\u0000\u0000\u0000\u00da"+
		"\u0858\u0001\u0000\u0000\u0000\u00dc\u0869\u0001\u0000\u0000\u0000\u00de"+
		"\u086b\u0001\u0000\u0000\u0000\u00e0\u086f\u0001\u0000\u0000\u0000\u00e2"+
		"\u0874\u0001\u0000\u0000\u0000\u00e4\u0877\u0001\u0000\u0000\u0000\u00e6"+
		"\u0879\u0001\u0000\u0000\u0000\u00e8\u087c\u0001\u0000\u0000\u0000\u00ea"+
		"\u0882\u0001\u0000\u0000\u0000\u00ec\u088c\u0001\u0000\u0000\u0000\u00ee"+
		"\u088e\u0001\u0000\u0000\u0000\u00f0\u0892\u0001\u0000\u0000\u0000\u00f2"+
		"\u08a0\u0001\u0000\u0000\u0000\u00f4\u08a7\u0001\u0000\u0000\u0000\u00f6"+
		"\u08a9\u0001\u0000\u0000\u0000\u00f8\u08b1\u0001\u0000\u0000\u0000\u00fa"+
		"\u08b3\u0001\u0000\u0000\u0000\u00fc\u08b5\u0001\u0000\u0000\u0000\u00fe"+
		"\u08bd\u0001\u0000\u0000\u0000\u0100\u08bf\u0001\u0000\u0000\u0000\u0102"+
		"\u08c1\u0001\u0000\u0000\u0000\u0104\u08c3\u0001\u0000\u0000\u0000\u0106"+
		"\u08c5\u0001\u0000\u0000\u0000\u0108\u08c7\u0001\u0000\u0000\u0000\u010a"+
		"\u08ca\u0001\u0000\u0000\u0000\u010c\u08cc\u0001\u0000\u0000\u0000\u010e"+
		"\u08d7\u0001\u0000\u0000\u0000\u0110\u08e5\u0001\u0000\u0000\u0000\u0112"+
		"\u08e7\u0001\u0000\u0000\u0000\u0114\u08ec\u0001\u0000\u0000\u0000\u0116"+
		"\u08f7\u0001\u0000\u0000\u0000\u0118\u091f\u0001\u0000\u0000\u0000\u011a"+
		"\u0927\u0001\u0000\u0000\u0000\u011c\u0937\u0001\u0000\u0000\u0000\u011e"+
		"\u0939\u0001\u0000\u0000\u0000\u0120\u0940\u0001\u0000\u0000\u0000\u0122"+
		"\u094d\u0001\u0000\u0000\u0000\u0124\u094f\u0001\u0000\u0000\u0000\u0126"+
		"\u0951\u0001\u0000\u0000\u0000\u0128\u0953\u0001\u0000\u0000\u0000\u012a"+
		"\u0955\u0001\u0000\u0000\u0000\u012c\u0960\u0001\u0000\u0000\u0000\u012e"+
		"\u0964\u0001\u0000\u0000\u0000\u0130\u0966\u0001\u0000\u0000\u0000\u0132"+
		"\u096c\u0001\u0000\u0000\u0000\u0134\u0975\u0001\u0000\u0000\u0000\u0136"+
		"\u097a\u0001\u0000\u0000\u0000\u0138\u0984\u0001\u0000\u0000\u0000\u013a"+
		"\u098e\u0001\u0000\u0000\u0000\u013c\u0997\u0001\u0000\u0000\u0000\u013e"+
		"\u09a2\u0001\u0000\u0000\u0000\u0140\u09ab\u0001\u0000\u0000\u0000\u0142"+
		"\u09b8\u0001\u0000\u0000\u0000\u0144\u09c1\u0001\u0000\u0000\u0000\u0146"+
		"\u09cc\u0001\u0000\u0000\u0000\u0148\u09d6\u0001\u0000\u0000\u0000\u014a"+
		"\u09e2\u0001\u0000\u0000\u0000\u014c\u09e8\u0001\u0000\u0000\u0000\u014e"+
		"\u09ee\u0001\u0000\u0000\u0000\u0150\u09f3\u0001\u0000\u0000\u0000\u0152"+
		"\u09fa\u0001\u0000\u0000\u0000\u0154\u0a03\u0001\u0000\u0000\u0000\u0156"+
		"\u0a0e\u0001\u0000\u0000\u0000\u0158\u0a17\u0001\u0000\u0000\u0000\u015a"+
		"\u0a1c\u0001\u0000\u0000\u0000\u015c\u0a23\u0001\u0000\u0000\u0000\u015e"+
		"\u0a2c\u0001\u0000\u0000\u0000\u0160\u0a39\u0001\u0000\u0000\u0000\u0162"+
		"\u0a46\u0001\u0000\u0000\u0000\u0164\u0a53\u0001\u0000\u0000\u0000\u0166"+
		"\u0a60\u0001\u0000\u0000\u0000\u0168\u0a75\u0001\u0000\u0000\u0000\u016a"+
		"\u0a82\u0001\u0000\u0000\u0000\u016c\u0a86\u0001\u0000\u0000\u0000\u016e"+
		"\u0a8d\u0001\u0000\u0000\u0000\u0170\u0a91\u0001\u0000\u0000\u0000\u0172"+
		"\u0aa7\u0001\u0000\u0000\u0000\u0174\u0ac8\u0001\u0000\u0000\u0000\u0176"+
		"\u0ace\u0001\u0000\u0000\u0000\u0178\u0adf\u0001\u0000\u0000\u0000\u017a"+
		"\u0ae3\u0001\u0000\u0000\u0000\u017c\u0ae5\u0001\u0000\u0000\u0000\u017e"+
		"\u0ae9\u0001\u0000\u0000\u0000\u0180\u0afd\u0001\u0000\u0000\u0000\u0182"+
		"\u0aff\u0001\u0000\u0000\u0000\u0184\u0b40\u0001\u0000\u0000\u0000\u0186"+
		"\u0b42\u0001\u0000\u0000\u0000\u0188\u0b52\u0001\u0000\u0000\u0000\u018a"+
		"\u0b5b\u0001\u0000\u0000\u0000\u018c\u0b64\u0001\u0000\u0000\u0000\u018e"+
		"\u0b81\u0001\u0000\u0000\u0000\u0190\u0b85\u0001\u0000\u0000\u0000\u0192"+
		"\u0b8c\u0001\u0000\u0000\u0000\u0194\u0b94\u0001\u0000\u0000\u0000\u0196"+
		"\u0b96\u0001\u0000\u0000\u0000\u0198\u0baa\u0001\u0000\u0000\u0000\u019a"+
		"\u0bac\u0001\u0000\u0000\u0000\u019c\u0bb2\u0001\u0000\u0000\u0000\u019e"+
		"\u0bb5\u0001\u0000\u0000\u0000\u01a0\u0bbe\u0001\u0000\u0000\u0000\u01a2"+
		"\u0bc0\u0001\u0000\u0000\u0000\u01a4\u0bc9\u0001\u0000\u0000\u0000\u01a6"+
		"\u0bdf\u0001\u0000\u0000\u0000\u01a8\u0be6\u0001\u0000\u0000\u0000\u01aa"+
		"\u0be8\u0001\u0000\u0000\u0000\u01ac\u0bf2\u0001\u0000\u0000\u0000\u01ae"+
		"\u0c00\u0001\u0000\u0000\u0000\u01b0\u0c0f\u0001\u0000\u0000\u0000\u01b2"+
		"\u0c11\u0001\u0000\u0000\u0000\u01b4\u0c14\u0001\u0000\u0000\u0000\u01b6"+
		"\u0c22\u0001\u0000\u0000\u0000\u01b8\u0c24\u0001\u0000\u0000\u0000\u01ba"+
		"\u0c31\u0001\u0000\u0000\u0000\u01bc\u0c39\u0001\u0000\u0000\u0000\u01be"+
		"\u0c41\u0001\u0000\u0000\u0000\u01c0\u0c4b\u0001\u0000\u0000\u0000\u01c2"+
		"\u0c5d\u0001\u0000\u0000\u0000\u01c4\u0c64\u0001\u0000\u0000\u0000\u01c6"+
		"\u0c67\u0001\u0000\u0000\u0000\u01c8\u0c70\u0001\u0000\u0000\u0000\u01ca"+
		"\u0c75\u0001\u0000\u0000\u0000\u01cc\u0c7b\u0001\u0000\u0000\u0000\u01ce"+
		"\u0c87\u0001\u0000\u0000\u0000\u01d0\u0c9f\u0001\u0000\u0000\u0000\u01d2"+
		"\u0ca1\u0001\u0000\u0000\u0000\u01d4\u0cac\u0001\u0000\u0000\u0000\u01d6"+
		"\u0cbf\u0001\u0000\u0000\u0000\u01d8\u0cc6\u0001\u0000\u0000\u0000\u01da"+
		"\u0cd5\u0001\u0000\u0000\u0000\u01dc\u0d12\u0001\u0000\u0000\u0000\u01de"+
		"\u0d14\u0001\u0000\u0000\u0000\u01e0\u0d20\u0001\u0000\u0000\u0000\u01e2"+
		"\u0d32\u0001\u0000\u0000\u0000\u01e4\u0d38\u0001\u0000\u0000\u0000\u01e6"+
		"\u0d4a\u0001\u0000\u0000\u0000\u01e8\u0d4c\u0001\u0000\u0000\u0000\u01ea"+
		"\u0d73\u0001\u0000\u0000\u0000\u01ec\u0d75\u0001\u0000\u0000\u0000\u01ee"+
		"\u0d8b\u0001\u0000\u0000\u0000\u01f0\u0d99\u0001\u0000\u0000\u0000\u01f2"+
		"\u0d9d\u0001\u0000\u0000\u0000\u01f4\u0da4\u0001\u0000\u0000\u0000\u01f6"+
		"\u0db2\u0001\u0000\u0000\u0000\u01f8\u0db6\u0001\u0000\u0000\u0000\u01fa"+
		"\u0dc4\u0001\u0000\u0000\u0000\u01fc\u0dc8\u0001\u0000\u0000\u0000\u01fe"+
		"\u0dd7\u0001\u0000\u0000\u0000\u0200\u0dd9\u0001\u0000\u0000\u0000\u0202"+
		"\u0de3\u0001\u0000\u0000\u0000\u0204\u0df7\u0001\u0000\u0000\u0000\u0206"+
		"\u0e01\u0001\u0000\u0000\u0000\u0208\u0e0e\u0001\u0000\u0000\u0000\u020a"+
		"\u0e12\u0001\u0000\u0000\u0000\u020c\u0e2f\u0001\u0000\u0000\u0000\u020e"+
		"\u0e31\u0001\u0000\u0000\u0000\u0210\u0e33\u0001\u0000\u0000\u0000\u0212"+
		"\u0e3f\u0001\u0000\u0000\u0000\u0214\u0e4c\u0001\u0000\u0000\u0000\u0216"+
		"\u0e54\u0001\u0000\u0000\u0000\u0218\u0e5a\u0001\u0000\u0000\u0000\u021a"+
		"\u0e6c\u0001\u0000\u0000\u0000\u021c\u0e74\u0001\u0000\u0000\u0000\u021e"+
		"\u0e7b\u0001\u0000\u0000\u0000\u0220\u0e84\u0001\u0000\u0000\u0000\u0222"+
		"\u0e93\u0001\u0000\u0000\u0000\u0224\u0e9a\u0001\u0000\u0000\u0000\u0226"+
		"\u0ea3\u0001\u0000\u0000\u0000\u0228\u0ea5\u0001\u0000\u0000\u0000\u022a"+
		"\u0eaa\u0001\u0000\u0000\u0000\u022c\u0ead\u0001\u0000\u0000\u0000\u022e"+
		"\u0eb8\u0001\u0000\u0000\u0000\u0230\u0eba\u0001\u0000\u0000\u0000\u0232"+
		"\u0eda\u0001\u0000\u0000\u0000\u0234\u0edc\u0001\u0000\u0000\u0000\u0236"+
		"\u0eeb\u0001\u0000\u0000\u0000\u0238\u0eff\u0001\u0000\u0000\u0000\u023a"+
		"\u0f36\u0001\u0000\u0000\u0000\u023c\u0f3e\u0001\u0000\u0000\u0000\u023e"+
		"\u0f40\u0001\u0000\u0000\u0000\u0240\u0f52\u0001\u0000\u0000\u0000\u0242"+
		"\u0f69\u0001\u0000\u0000\u0000\u0244\u0f7f\u0001\u0000\u0000\u0000\u0246"+
		"\u0f8b\u0001\u0000\u0000\u0000\u0248\u0f8d\u0001\u0000\u0000\u0000\u024a"+
		"\u0fa5\u0001\u0000\u0000\u0000\u024c\u0fa7\u0001\u0000\u0000\u0000\u024e"+
		"\u0fad\u0001\u0000\u0000\u0000\u0250\u0fbb\u0001\u0000\u0000\u0000\u0252"+
		"\u0fbd\u0001\u0000\u0000\u0000\u0254\u0feb\u0001\u0000\u0000\u0000\u0256"+
		"\u0fff\u0001\u0000\u0000\u0000\u0258\u1001\u0001\u0000\u0000\u0000\u025a"+
		"\u101c\u0001\u0000\u0000\u0000\u025c\u1031\u0001\u0000\u0000\u0000\u025e"+
		"\u1034\u0001\u0000\u0000\u0000\u0260\u104f\u0001\u0000\u0000\u0000\u0262"+
		"\u1051\u0001\u0000\u0000\u0000\u0264\u106d\u0001\u0000\u0000\u0000\u0266"+
		"\u106f\u0001\u0000\u0000\u0000\u0268\u1086\u0001\u0000\u0000\u0000\u026a"+
		"\u109e\u0001\u0000\u0000\u0000\u026c\u10b9\u0001\u0000\u0000\u0000\u026e"+
		"\u10c4\u0001\u0000\u0000\u0000\u0270\u10e0\u0001\u0000\u0000\u0000\u0272"+
		"\u10ec\u0001\u0000\u0000\u0000\u0274\u10f9\u0001\u0000\u0000\u0000\u0276"+
		"\u10fb\u0001\u0000\u0000\u0000\u0278\u1107\u0001\u0000\u0000\u0000\u027a"+
		"\u1110\u0001\u0000\u0000\u0000\u027c\u1120\u0001\u0000\u0000\u0000\u027e"+
		"\u1145\u0001\u0000\u0000\u0000\u0280\u115d\u0001\u0000\u0000\u0000\u0282"+
		"\u1168\u0001\u0000\u0000\u0000\u0284\u1174\u0001\u0000\u0000\u0000\u0286"+
		"\u1176\u0001\u0000\u0000\u0000\u0288\u117f\u0001\u0000\u0000\u0000\u028a"+
		"\u1197\u0001\u0000\u0000\u0000\u028c\u11c6\u0001\u0000\u0000\u0000\u028e"+
		"\u11c8\u0001\u0000\u0000\u0000\u0290\u11d3\u0001\u0000\u0000\u0000\u0292"+
		"\u11f1\u0001\u0000\u0000\u0000\u0294\u11f5\u0001\u0000\u0000\u0000\u0296"+
		"\u121b\u0001\u0000\u0000\u0000\u0298\u1234\u0001\u0000\u0000\u0000\u029a"+
		"\u1274\u0001\u0000\u0000\u0000\u029c\u12b9\u0001\u0000\u0000\u0000\u029e"+
		"\u12bb\u0001\u0000\u0000\u0000\u02a0\u12c6\u0001\u0000\u0000\u0000\u02a2"+
		"\u12dd\u0001\u0000\u0000\u0000\u02a4\u12e9\u0001\u0000\u0000\u0000\u02a6"+
		"\u1321\u0001\u0000\u0000\u0000\u02a8\u132f\u0001\u0000\u0000\u0000\u02aa"+
		"\u133e\u0001\u0000\u0000\u0000\u02ac\u1348\u0001\u0000\u0000\u0000\u02ae"+
		"\u1375\u0001\u0000\u0000\u0000\u02b0\u137b\u0001\u0000\u0000\u0000\u02b2"+
		"\u1393\u0001\u0000\u0000\u0000\u02b4\u1397\u0001\u0000\u0000\u0000\u02b6"+
		"\u13b9\u0001\u0000\u0000\u0000\u02b8\u13bb\u0001\u0000\u0000\u0000\u02ba"+
		"\u13da\u0001\u0000\u0000\u0000\u02bc\u13dc\u0001\u0000\u0000\u0000\u02be"+
		"\u13e3\u0001\u0000\u0000\u0000\u02c0\u1400\u0001\u0000\u0000\u0000\u02c2"+
		"\u1406\u0001\u0000\u0000\u0000\u02c4\u141b\u0001\u0000\u0000\u0000\u02c6"+
		"\u141d\u0001\u0000\u0000\u0000\u02c8\u145f\u0001\u0000\u0000\u0000\u02ca"+
		"\u146e\u0001\u0000\u0000\u0000\u02cc\u1476\u0001\u0000\u0000\u0000\u02ce"+
		"\u148d\u0001\u0000\u0000\u0000\u02d0\u1496\u0001\u0000\u0000\u0000\u02d2"+
		"\u149e\u0001\u0000\u0000\u0000\u02d4\u14a0\u0001\u0000\u0000\u0000\u02d6"+
		"\u14ae\u0001\u0000\u0000\u0000\u02d8\u14b0\u0001\u0000\u0000\u0000\u02da"+
		"\u14bb\u0001\u0000\u0000\u0000\u02dc\u14cc\u0001\u0000\u0000\u0000\u02de"+
		"\u14d5\u0001\u0000\u0000\u0000\u02e0\u14dc\u0001\u0000\u0000\u0000\u02e2"+
		"\u14e0\u0001\u0000\u0000\u0000\u02e4\u14e2\u0001\u0000\u0000\u0000\u02e6"+
		"\u14ed\u0001\u0000\u0000\u0000\u02e8\u1500\u0001\u0000\u0000\u0000\u02ea"+
		"\u151c\u0001\u0000\u0000\u0000\u02ec\u151f\u0001\u0000\u0000\u0000\u02ee"+
		"\u153c\u0001\u0000\u0000\u0000\u02f0\u1545\u0001\u0000\u0000\u0000\u02f2"+
		"\u1554\u0001\u0000\u0000\u0000\u02f4\u155c\u0001\u0000\u0000\u0000\u02f6"+
		"\u1561\u0001\u0000\u0000\u0000\u02f8\u1581\u0001\u0000\u0000\u0000\u02fa"+
		"\u1585\u0001\u0000\u0000\u0000\u02fc\u1590\u0001\u0000\u0000\u0000\u02fe"+
		"\u15a8\u0001\u0000\u0000\u0000\u0300\u15b1\u0001\u0000\u0000\u0000\u0302"+
		"\u15c2\u0001\u0000\u0000\u0000\u0304\u15cb\u0001\u0000\u0000\u0000\u0306"+
		"\u15dd\u0001\u0000\u0000\u0000\u0308\u15e7\u0001\u0000\u0000\u0000\u030a"+
		"\u15f4\u0001\u0000\u0000\u0000\u030c\u160b\u0001\u0000\u0000\u0000\u030e"+
		"\u1615\u0001\u0000\u0000\u0000\u0310\u162c\u0001\u0000\u0000\u0000\u0312"+
		"\u1630\u0001\u0000\u0000\u0000\u0314\u1633\u0001\u0000\u0000\u0000\u0316"+
		"\u1646\u0001\u0000\u0000\u0000\u0318\u164a\u0001\u0000\u0000\u0000\u031a"+
		"\u1662\u0001\u0000\u0000\u0000\u031c\u1664\u0001\u0000\u0000\u0000\u031e"+
		"\u1672\u0001\u0000\u0000\u0000\u0320\u1674\u0001\u0000\u0000\u0000\u0322"+
		"\u1684\u0001\u0000\u0000\u0000\u0324\u16a6\u0001\u0000\u0000\u0000\u0326"+
		"\u16ad\u0001\u0000\u0000\u0000\u0328\u16cb\u0001\u0000\u0000\u0000\u032a"+
		"\u16cd\u0001\u0000\u0000\u0000\u032c\u16ed\u0001\u0000\u0000\u0000\u032e"+
		"\u16ef\u0001\u0000\u0000\u0000\u0330\u16f1\u0001\u0000\u0000\u0000\u0332"+
		"\u16f4\u0001\u0000\u0000\u0000\u0334\u16f7\u0001\u0000\u0000\u0000\u0336"+
		"\u16fa\u0001\u0000\u0000\u0000\u0338\u1702\u0001\u0000\u0000\u0000\u033a"+
		"\u1727\u0001\u0000\u0000\u0000\u033c\u1747\u0001\u0000\u0000\u0000\u033e"+
		"\u174d\u0001\u0000\u0000\u0000\u0340\u174f\u0001\u0000\u0000\u0000\u0342"+
		"\u1752\u0001\u0000\u0000\u0000\u0344\u175c\u0001\u0000\u0000\u0000\u0346"+
		"\u175f\u0001\u0000\u0000\u0000\u0348\u1766\u0001\u0000\u0000\u0000\u034a"+
		"\u1778\u0001\u0000\u0000\u0000\u034c\u177b\u0001\u0000\u0000\u0000\u034e"+
		"\u1783\u0001\u0000\u0000\u0000\u0350\u178a\u0001\u0000\u0000\u0000\u0352"+
		"\u1798\u0001\u0000\u0000\u0000\u0354\u17a4\u0001\u0000\u0000\u0000\u0356"+
		"\u17ab\u0001\u0000\u0000\u0000\u0358\u17b4\u0001\u0000\u0000\u0000\u035a"+
		"\u17b7\u0001\u0000\u0000\u0000\u035c\u1800\u0001\u0000\u0000\u0000\u035e"+
		"\u1838\u0001\u0000\u0000\u0000\u0360\u183a\u0001\u0000\u0000\u0000\u0362"+
		"\u1840\u0001\u0000\u0000\u0000\u0364\u1880\u0001\u0000\u0000\u0000\u0366"+
		"\u1890\u0001\u0000\u0000\u0000\u0368\u18a6\u0001\u0000\u0000\u0000\u036a"+
		"\u18b0\u0001\u0000\u0000\u0000\u036c\u18c1\u0001\u0000\u0000\u0000\u036e"+
		"\u18c3\u0001\u0000\u0000\u0000\u0370\u18c5\u0001\u0000\u0000\u0000\u0372"+
		"\u18c7\u0001\u0000\u0000\u0000\u0374\u18ca\u0001\u0000\u0000\u0000\u0376"+
		"\u18cf\u0001\u0000\u0000\u0000\u0378\u18e6\u0001\u0000\u0000\u0000\u037a"+
		"\u18f9\u0001\u0000\u0000\u0000\u037c\u190b\u0001\u0000\u0000\u0000\u037e"+
		"\u190f\u0001\u0000\u0000\u0000\u0380\u191b\u0001\u0000\u0000\u0000\u0382"+
		"\u1922\u0001\u0000\u0000\u0000\u0384\u1926\u0001\u0000\u0000\u0000\u0386"+
		"\u1928\u0001\u0000\u0000\u0000\u0388\u1930\u0001\u0000\u0000\u0000\u038a"+
		"\u1945\u0001\u0000\u0000\u0000\u038c\u1956\u0001\u0000\u0000\u0000\u038e"+
		"\u195b\u0001\u0000\u0000\u0000\u0390\u1970\u0001\u0000\u0000\u0000\u0392"+
		"\u1981\u0001\u0000\u0000\u0000\u0394\u199c\u0001\u0000\u0000\u0000\u0396"+
		"\u19ae\u0001\u0000\u0000\u0000\u0398\u19fd\u0001\u0000\u0000\u0000\u039a"+
		"\u1a11\u0001\u0000\u0000\u0000\u039c\u1aba\u0001\u0000\u0000\u0000\u039e"+
		"\u1abf\u0001\u0000\u0000\u0000\u03a0\u1ac9\u0001\u0000\u0000\u0000\u03a2"+
		"\u1ad4\u0001\u0000\u0000\u0000\u03a4\u1ade\u0001\u0000\u0000\u0000\u03a6"+
		"\u1ae7\u0001\u0000\u0000\u0000\u03a8\u1afd\u0001\u0000\u0000\u0000\u03aa"+
		"\u1b0a\u0001\u0000\u0000\u0000\u03ac\u1b11\u0001\u0000\u0000\u0000\u03ae"+
		"\u1b1d\u0001\u0000\u0000\u0000\u03b0\u1b2a\u0001\u0000\u0000\u0000\u03b2"+
		"\u1b37\u0001\u0000\u0000\u0000\u03b4\u1b42\u0001\u0000\u0000\u0000\u03b6"+
		"\u1b4e\u0001\u0000\u0000\u0000\u03b8\u1b60\u0001\u0000\u0000\u0000\u03ba"+
		"\u1b6c\u0001\u0000\u0000\u0000\u03bc\u1b79\u0001\u0000\u0000\u0000\u03be"+
		"\u1b86\u0001\u0000\u0000\u0000\u03c0\u1b92\u0001\u0000\u0000\u0000\u03c2"+
		"\u1ba5\u0001\u0000\u0000\u0000\u03c4\u1ba9\u0001\u0000\u0000\u0000\u03c6"+
		"\u1bb6\u0001\u0000\u0000\u0000\u03c8\u1bc3\u0001\u0000\u0000\u0000\u03ca"+
		"\u1bcc\u0001\u0000\u0000\u0000\u03cc\u1bd6\u0001\u0000\u0000\u0000\u03ce"+
		"\u1bd8\u0001\u0000\u0000\u0000\u03d0\u1bda\u0001\u0000\u0000\u0000\u03d2"+
		"\u1c06\u0001\u0000\u0000\u0000\u03d4\u1c08\u0001\u0000\u0000\u0000\u03d6"+
		"\u1c0a\u0001\u0000\u0000\u0000\u03d8\u1c0c\u0001\u0000\u0000\u0000\u03da"+
		"\u1c14\u0001\u0000\u0000\u0000\u03dc\u1c20\u0001\u0000\u0000\u0000\u03de"+
		"\u1c52\u0001\u0000\u0000\u0000\u03e0\u1c5f\u0001\u0000\u0000\u0000\u03e2"+
		"\u1c6c\u0001\u0000\u0000\u0000\u03e4\u1c94\u0001\u0000\u0000\u0000\u03e6"+
		"\u1ca4\u0001\u0000\u0000\u0000\u03e8\u1cba\u0001\u0000\u0000\u0000\u03ea"+
		"\u1cbc\u0001\u0000\u0000\u0000\u03ec\u1cca\u0001\u0000\u0000\u0000\u03ee"+
		"\u1cd4\u0001\u0000\u0000\u0000\u03f0\u1cd6\u0001\u0000\u0000\u0000\u03f2"+
		"\u1cd8\u0001\u0000\u0000\u0000\u03f4\u1cda\u0001\u0000\u0000\u0000\u03f6"+
		"\u1cdf\u0001\u0000\u0000\u0000\u03f8\u1ce6\u0001\u0000\u0000\u0000\u03fa"+
		"\u1d16\u0001\u0000\u0000\u0000\u03fc\u1d18\u0001\u0000\u0000\u0000\u03fe"+
		"\u1d1f\u0001\u0000\u0000\u0000\u0400\u1d26\u0001\u0000\u0000\u0000\u0402"+
		"\u1d35\u0001\u0000\u0000\u0000\u0404\u1d43\u0001\u0000\u0000\u0000\u0406"+
		"\u1d45\u0001\u0000\u0000\u0000\u0408\u1d6d\u0001\u0000\u0000\u0000\u040a"+
		"\u1d6f\u0001\u0000\u0000\u0000\u040c\u1d71\u0001\u0000\u0000\u0000\u040e"+
		"\u1d84\u0001\u0000\u0000\u0000\u0410\u1d8c\u0001\u0000\u0000\u0000\u0412"+
		"\u1d9a\u0001\u0000\u0000\u0000\u0414\u1d9c\u0001\u0000\u0000\u0000\u0416"+
		"\u1da8\u0001\u0000\u0000\u0000\u0418\u1dbf\u0001\u0000\u0000\u0000\u041a"+
		"\u1dc1\u0001\u0000\u0000\u0000\u041c\u1dc4\u0001\u0000\u0000\u0000\u041e"+
		"\u1dd1\u0001\u0000\u0000\u0000\u0420\u1dd3\u0001\u0000\u0000\u0000\u0422"+
		"\u1dea\u0001\u0000\u0000\u0000\u0424\u1dec\u0001\u0000\u0000\u0000\u0426"+
		"\u1df0\u0001\u0000\u0000\u0000\u0428\u1e00\u0001\u0000\u0000\u0000\u042a"+
		"\u1e27\u0001\u0000\u0000\u0000\u042c\u1e29\u0001\u0000\u0000\u0000\u042e"+
		"\u1e31\u0001\u0000\u0000\u0000\u0430\u1e33\u0001\u0000\u0000\u0000\u0432"+
		"\u046f\u0003\u031e\u018f\u0000\u0433\u046f\u0003\u02ec\u0176\u0000\u0434"+
		"\u046f\u0003\u030a\u0185\u0000\u0435\u046f\u0003\u0314\u018a\u0000\u0436"+
		"\u046f\u0003\u0132\u0099\u0000\u0437\u046f\u0003\u0146\u00a3\u0000\u0438"+
		"\u046f\u0003\u015c\u00ae\u0000\u0439\u046f\u0003\u012e\u0097\u0000\u043a"+
		"\u046f\u0003\u0134\u009a\u0000\u043b\u046f\u0003\u0138\u009c\u0000\u043c"+
		"\u046f\u0003\u013a\u009d\u0000\u043d\u046f\u0003\u013c\u009e\u0000\u043e"+
		"\u046f\u0003\u013e\u009f\u0000\u043f\u046f\u0003\u0140\u00a0\u0000\u0440"+
		"\u046f\u0003\u0142\u00a1\u0000\u0441\u046f\u0003\u0144\u00a2\u0000\u0442"+
		"\u046f\u0003\u0150\u00a8\u0000\u0443\u046f\u0003\u0152\u00a9\u0000\u0444"+
		"\u046f\u0003\u0148\u00a4\u0000\u0445\u046f\u0003\u0154\u00aa\u0000\u0446"+
		"\u046f\u0003\u0156\u00ab\u0000\u0447\u046f\u0003\u014e\u00a7\u0000\u0448"+
		"\u046f\u0003\u015a\u00ad\u0000\u0449\u046f\u0003\u015e\u00af\u0000\u044a"+
		"\u046f\u0003\u0160\u00b0\u0000\u044b\u046f\u0003\u0162\u00b1\u0000\u044c"+
		"\u046f\u0003\u0164\u00b2\u0000\u044d\u046f\u0003\u0166\u00b3\u0000\u044e"+
		"\u046f\u0003\u0168\u00b4\u0000\u044f\u046f\u0003\u016a\u00b5\u0000\u0450"+
		"\u046f\u0003\u016c\u00b6\u0000\u0451\u046f\u0003\u016e\u00b7\u0000\u0452"+
		"\u046f\u0003\u0136\u009b\u0000\u0453\u046f\u0003\u0002\u0001\u0000\u0454"+
		"\u046f\u0003\n\u0005\u0000\u0455\u046f\u0003\f\u0006\u0000\u0456\u046f"+
		"\u0003\u0006\u0003\u0000\u0457\u046f\u0003\u000e\u0007\u0000\u0458\u046f"+
		"\u0003\u0010\b\u0000\u0459\u046f\u0003\u0012\t\u0000\u045a\u046f\u0003"+
		"\u0014\n\u0000\u045b\u046f\u0003\u0016\u000b\u0000\u045c\u046f\u0003\u0374"+
		"\u01ba\u0000\u045d\u046f\u0003\u0386\u01c3\u0000\u045e\u046f\u0003\u038c"+
		"\u01c6\u0000\u045f\u046f\u0003\u03da\u01ed\u0000\u0460\u046f\u0003\u03f6"+
		"\u01fb\u0000\u0461\u046f\u0003\u03f8\u01fc\u0000\u0462\u046f\u0003\u03fc"+
		"\u01fe\u0000\u0463\u046f\u0003\u03fe\u01ff\u0000\u0464\u046f\u0003\u0400"+
		"\u0200\u0000\u0465\u046f\u0003\u0402\u0201\u0000\u0466\u046f\u0003\u0424"+
		"\u0212\u0000\u0467\u046f\u0003\u0426\u0213\u0000\u0468\u046f\u0003\u0128"+
		"\u0094\u0000\u0469\u046f\u0003\u012a\u0095\u0000\u046a\u046f\u0003\u03d8"+
		"\u01ec\u0000\u046b\u046f\u0003\u0430\u0218\u0000\u046c\u046f\u0003\u0170"+
		"\u00b8\u0000\u046d\u046f\u0003\u02f6\u017b\u0000\u046e\u0432\u0001\u0000"+
		"\u0000\u0000\u046e\u0433\u0001\u0000\u0000\u0000\u046e\u0434\u0001\u0000"+
		"\u0000\u0000\u046e\u0435\u0001\u0000\u0000\u0000\u046e\u0436\u0001\u0000"+
		"\u0000\u0000\u046e\u0437\u0001\u0000\u0000\u0000\u046e\u0438\u0001\u0000"+
		"\u0000\u0000\u046e\u0439\u0001\u0000\u0000\u0000\u046e\u043a\u0001\u0000"+
		"\u0000\u0000\u046e\u043b\u0001\u0000\u0000\u0000\u046e\u043c\u0001\u0000"+
		"\u0000\u0000\u046e\u043d\u0001\u0000\u0000\u0000\u046e\u043e\u0001\u0000"+
		"\u0000\u0000\u046e\u043f\u0001\u0000\u0000\u0000\u046e\u0440\u0001\u0000"+
		"\u0000\u0000\u046e\u0441\u0001\u0000\u0000\u0000\u046e\u0442\u0001\u0000"+
		"\u0000\u0000\u046e\u0443\u0001\u0000\u0000\u0000\u046e\u0444\u0001\u0000"+
		"\u0000\u0000\u046e\u0445\u0001\u0000\u0000\u0000\u046e\u0446\u0001\u0000"+
		"\u0000\u0000\u046e\u0447\u0001\u0000\u0000\u0000\u046e\u0448\u0001\u0000"+
		"\u0000\u0000\u046e\u0449\u0001\u0000\u0000\u0000\u046e\u044a\u0001\u0000"+
		"\u0000\u0000\u046e\u044b\u0001\u0000\u0000\u0000\u046e\u044c\u0001\u0000"+
		"\u0000\u0000\u046e\u044d\u0001\u0000\u0000\u0000\u046e\u044e\u0001\u0000"+
		"\u0000\u0000\u046e\u044f\u0001\u0000\u0000\u0000\u046e\u0450\u0001\u0000"+
		"\u0000\u0000\u046e\u0451\u0001\u0000\u0000\u0000\u046e\u0452\u0001\u0000"+
		"\u0000\u0000\u046e\u0453\u0001\u0000\u0000\u0000\u046e\u0454\u0001\u0000"+
		"\u0000\u0000\u046e\u0455\u0001\u0000\u0000\u0000\u046e\u0456\u0001\u0000"+
		"\u0000\u0000\u046e\u0457\u0001\u0000\u0000\u0000\u046e\u0458\u0001\u0000"+
		"\u0000\u0000\u046e\u0459\u0001\u0000\u0000\u0000\u046e\u045a\u0001\u0000"+
		"\u0000\u0000\u046e\u045b\u0001\u0000\u0000\u0000\u046e\u045c\u0001\u0000"+
		"\u0000\u0000\u046e\u045d\u0001\u0000\u0000\u0000\u046e\u045e\u0001\u0000"+
		"\u0000\u0000\u046e\u045f\u0001\u0000\u0000\u0000\u046e\u0460\u0001\u0000"+
		"\u0000\u0000\u046e\u0461\u0001\u0000\u0000\u0000\u046e\u0462\u0001\u0000"+
		"\u0000\u0000\u046e\u0463\u0001\u0000\u0000\u0000\u046e\u0464\u0001\u0000"+
		"\u0000\u0000\u046e\u0465\u0001\u0000\u0000\u0000\u046e\u0466\u0001\u0000"+
		"\u0000\u0000\u046e\u0467\u0001\u0000\u0000\u0000\u046e\u0468\u0001\u0000"+
		"\u0000\u0000\u046e\u0469\u0001\u0000\u0000\u0000\u046e\u046a\u0001\u0000"+
		"\u0000\u0000\u046e\u046b\u0001\u0000\u0000\u0000\u046e\u046c\u0001\u0000"+
		"\u0000\u0000\u046e\u046d\u0001\u0000\u0000\u0000\u046f\u0471\u0001\u0000"+
		"\u0000\u0000\u0470\u0472\u0005+\u0000\u0000\u0471\u0470\u0001\u0000\u0000"+
		"\u0000\u0471\u0472\u0001\u0000\u0000\u0000\u0472\u0473\u0001\u0000\u0000"+
		"\u0000\u0473\u0474\u0005\u0000\u0000\u0001\u0474\u0001\u0001\u0000\u0000"+
		"\u0000\u0475\u0476\u0005:\u0000\u0000\u0476\u0477\u0005\u010e\u0000\u0000"+
		"\u0477\u0478\u0005\u0220\u0000\u0000\u0478\u0479\u0005\u021f\u0000\u0000"+
		"\u0479\u047a\u0003\u0004\u0002\u0000\u047a\u0003\u0001\u0000\u0000\u0000"+
		"\u047b\u047c\u0005\u0223\u0000\u0000\u047c\u0484\u0005\u02ac\u0000\u0000";
	private static final String _serializedATNSegment1 =
		"\u047d\u047e\u0005\u0223\u0000\u0000\u047e\u0484\u0005\u02ad\u0000\u0000"+
		"\u047f\u0480\u0005\u0222\u0000\u0000\u0480\u0484\u0005\u0223\u0000\u0000"+
		"\u0481\u0484\u0005\u0221\u0000\u0000\u0482\u0484\u0005\u0224\u0000\u0000"+
		"\u0483\u047b\u0001\u0000\u0000\u0000\u0483\u047d\u0001\u0000\u0000\u0000"+
		"\u0483\u047f\u0001\u0000\u0000\u0000\u0483\u0481\u0001\u0000\u0000\u0000"+
		"\u0483\u0482\u0001\u0000\u0000\u0000\u0484\u0005\u0001\u0000\u0000\u0000"+
		"\u0485\u0486\u0005:\u0000\u0000\u0486\u0487\u0005\u01b2\u0000\u0000\u0487"+
		"\u0488\u0003\b\u0004\u0000\u0488\u0007\u0001\u0000\u0000\u0000\u0489\u048a"+
		"\u0007\u0000\u0000\u0000\u048a\t\u0001\u0000\u0000\u0000\u048b\u048c\u0005"+
		"}\u0000\u0000\u048c\u0499\u0007\u0001\u0000\u0000\u048d\u0490\u0003\u00fe"+
		"\u007f\u0000\u048e\u0490\u0003\u0100\u0080\u0000\u048f\u048d\u0001\u0000"+
		"\u0000\u0000\u048f\u048e\u0001\u0000\u0000\u0000\u0490\u0497\u0001\u0000"+
		"\u0000\u0000\u0491\u0492\u0005M\u0000\u0000\u0492\u0495\u0005\u0238\u0000"+
		"\u0000\u0493\u0496\u0003\u001c\u000e\u0000\u0494\u0496\u0005\u02e6\u0000"+
		"\u0000\u0495\u0493\u0001\u0000\u0000\u0000\u0495\u0494\u0001\u0000\u0000"+
		"\u0000\u0495\u0496\u0001\u0000\u0000\u0000\u0496\u0498\u0001\u0000\u0000"+
		"\u0000\u0497\u0491\u0001\u0000\u0000\u0000\u0497\u0498\u0001\u0000\u0000"+
		"\u0000\u0498\u049a\u0001\u0000\u0000\u0000\u0499\u048f\u0001\u0000\u0000"+
		"\u0000\u0499\u049a\u0001\u0000\u0000\u0000\u049a\u000b\u0001\u0000\u0000"+
		"\u0000\u049b\u049c\u0005}\u0000\u0000\u049c\u049d\u0005\u0237\u0000\u0000"+
		"\u049d\u04a0\u0007\u0001\u0000\u0000\u049e\u04a1\u0003\u00fe\u007f\u0000"+
		"\u049f\u04a1\u0003\u0100\u0080\u0000\u04a0\u049e\u0001\u0000\u0000\u0000"+
		"\u04a0\u049f\u0001\u0000\u0000\u0000\u04a0\u04a1\u0001\u0000\u0000\u0000"+
		"\u04a1\r\u0001\u0000\u0000\u0000\u04a2\u04a8\u0005~\u0000\u0000\u04a3"+
		"\u04a6\u0007\u0001\u0000\u0000\u04a4\u04a7\u0003\u00fe\u007f\u0000\u04a5"+
		"\u04a7\u0003\u0100\u0080\u0000\u04a6\u04a4\u0001\u0000\u0000\u0000\u04a6"+
		"\u04a5\u0001\u0000\u0000\u0000\u04a6\u04a7\u0001\u0000\u0000\u0000\u04a7"+
		"\u04a9\u0001\u0000\u0000\u0000\u04a8\u04a3\u0001\u0000\u0000\u0000\u04a8"+
		"\u04a9\u0001\u0000\u0000\u0000\u04a9\u04b0\u0001\u0000\u0000\u0000\u04aa"+
		"\u04ab\u0005M\u0000\u0000\u04ab\u04ac\u0005\u001f\u0000\u0000\u04ac\u04ad"+
		"\u0005\u029f\u0000\u0000\u04ad\u04ae\u0005\u0018\u0000\u0000\u04ae\u04af"+
		"\u0007\u0000\u0000\u0000\u04af\u04b1\u0005 \u0000\u0000\u04b0\u04aa\u0001"+
		"\u0000\u0000\u0000\u04b0\u04b1\u0001\u0000\u0000\u0000\u04b1\u000f\u0001"+
		"\u0000\u0000\u0000\u04b2\u04b4\u0005~\u0000\u0000\u04b3\u04b5\u0005\u0239"+
		"\u0000\u0000\u04b4\u04b3\u0001\u0000\u0000\u0000\u04b4\u04b5\u0001\u0000"+
		"\u0000\u0000\u04b5\u0011\u0001\u0000\u0000\u0000\u04b6\u04b7\u0005\u007f"+
		"\u0000\u0000\u04b7\u04bc\u0007\u0001\u0000\u0000\u04b8\u04bd\u0003\u00fe"+
		"\u007f\u0000\u04b9\u04bd\u0003\u0100\u0080\u0000\u04ba\u04bd\u0003\u0102"+
		"\u0081\u0000\u04bb\u04bd\u0003\u0104\u0082\u0000\u04bc\u04b8\u0001\u0000"+
		"\u0000\u0000\u04bc\u04b9\u0001\u0000\u0000\u0000\u04bc\u04ba\u0001\u0000"+
		"\u0000\u0000\u04bc\u04bb\u0001\u0000\u0000\u0000\u04bc\u04bd\u0001\u0000"+
		"\u0000\u0000\u04bd\u0013\u0001\u0000\u0000\u0000\u04be\u04c0\u0005\u007f"+
		"\u0000\u0000\u04bf\u04c1\u0005\u0239\u0000\u0000\u04c0\u04bf\u0001\u0000"+
		"\u0000\u0000\u04c0\u04c1\u0001\u0000\u0000\u0000\u04c1\u0015\u0001\u0000"+
		"\u0000\u0000\u04c2\u04c3\u0005\u0145\u0000\u0000\u04c3\u04c6\u0007\u0001"+
		"\u0000\u0000\u04c4\u04c7\u0003\u0102\u0081\u0000\u04c5\u04c7\u0003\u0104"+
		"\u0082\u0000\u04c6\u04c4\u0001\u0000\u0000\u0000\u04c6\u04c5\u0001\u0000"+
		"\u0000\u0000\u04c7\u0017\u0001\u0000\u0000\u0000\u04c8\u04c9\u0005)\u0000"+
		"\u0000\u04c9\u0019\u0001\u0000\u0000\u0000\u04ca\u04d2\u0003\u001c\u000e"+
		"\u0000\u04cb\u04d2\u0003\u001e\u000f\u0000\u04cc\u04d2\u0003 \u0010\u0000"+
		"\u04cd\u04d2\u0003\"\u0011\u0000\u04ce\u04d2\u0003$\u0012\u0000\u04cf"+
		"\u04d2\u0003&\u0013\u0000\u04d0\u04d2\u0003(\u0014\u0000\u04d1\u04ca\u0001"+
		"\u0000\u0000\u0000\u04d1\u04cb\u0001\u0000\u0000\u0000\u04d1\u04cc\u0001"+
		"\u0000\u0000\u0000\u04d1\u04cd\u0001\u0000\u0000\u0000\u04d1\u04ce\u0001"+
		"\u0000\u0000\u0000\u04d1\u04cf\u0001\u0000\u0000\u0000\u04d1\u04d0\u0001"+
		"\u0000\u0000\u0000\u04d2\u001b\u0001\u0000\u0000\u0000\u04d3\u04d4\u0007"+
		"\u0002\u0000\u0000\u04d4\u001d\u0001\u0000\u0000\u0000\u04d5\u04d7\u0007"+
		"\u0003\u0000\u0000\u04d6\u04d5\u0001\u0000\u0000\u0000\u04d6\u04d7\u0001"+
		"\u0000\u0000\u0000\u04d7\u04d8\u0001\u0000\u0000\u0000\u04d8\u04d9\u0005"+
		"\u02e0\u0000\u0000\u04d9\u001f\u0001\u0000\u0000\u0000\u04da\u04db\u0007"+
		"\u0004\u0000\u0000\u04db\u04e2\u0005\u02df\u0000\u0000\u04dc\u04dd\u0005"+
		"!\u0000\u0000\u04dd\u04de\u0003*\u0015\u0000\u04de\u04df\u0005\u02df\u0000"+
		"\u0000\u04df\u04e0\u0005\"\u0000\u0000\u04e0\u04e2\u0001\u0000\u0000\u0000"+
		"\u04e1\u04da\u0001\u0000\u0000\u0000\u04e1\u04dc\u0001\u0000\u0000\u0000"+
		"\u04e2!\u0001\u0000\u0000\u0000\u04e3\u04e4\u0005\u02e4\u0000\u0000\u04e4"+
		"#\u0001\u0000\u0000\u0000\u04e5\u04e6\u0005\u02e5\u0000\u0000\u04e6%\u0001"+
		"\u0000\u0000\u0000\u04e7\u04e8\u0007\u0005\u0000\u0000\u04e8\'\u0001\u0000"+
		"\u0000\u0000\u04e9\u04ea\u0005l\u0000\u0000\u04ea)\u0001\u0000\u0000\u0000"+
		"\u04eb\u04ee\u0003,\u0016\u0000\u04ec\u04ee\u0003.\u0017\u0000\u04ed\u04eb"+
		"\u0001\u0000\u0000\u0000\u04ed\u04ec\u0001\u0000\u0000\u0000\u04ee+\u0001"+
		"\u0000\u0000\u0000\u04ef\u04f2\u0005\u02dd\u0000\u0000\u04f0\u04f2\u0003"+
		"0\u0018\u0000\u04f1\u04ef\u0001\u0000\u0000\u0000\u04f1\u04f0\u0001\u0000"+
		"\u0000\u0000\u04f2-\u0001\u0000\u0000\u0000\u04f3\u04f4\u0005\u02de\u0000"+
		"\u0000\u04f4/\u0001\u0000\u0000\u0000\u04f5\u04f6\u0007\u0006\u0000\u0000"+
		"\u04f61\u0001\u0000\u0000\u0000\u04f7\u04f8\u0003*\u0015\u0000\u04f83"+
		"\u0001\u0000\u0000\u0000\u04f9\u04fa\u0003*\u0015\u0000\u04fa5\u0001\u0000"+
		"\u0000\u0000\u04fb\u04fc\u0003L&\u0000\u04fc\u04fd\u0005\u0014\u0000\u0000"+
		"\u04fd\u04ff\u0001\u0000\u0000\u0000\u04fe\u04fb\u0001\u0000\u0000\u0000"+
		"\u04fe\u04ff\u0001\u0000\u0000\u0000\u04ff\u0500\u0001\u0000\u0000\u0000"+
		"\u0500\u0501\u0003N\'\u0000\u05017\u0001\u0000\u0000\u0000\u0502\u0503"+
		"\u0003L&\u0000\u0503\u0504\u0005\u0014\u0000\u0000\u0504\u0506\u0001\u0000"+
		"\u0000\u0000\u0505\u0502\u0001\u0000\u0000\u0000\u0505\u0506\u0001\u0000"+
		"\u0000\u0000\u0506\u0507\u0001\u0000\u0000\u0000\u0507\u050a\u0003N\'"+
		"\u0000\u0508\u0509\u0005+\u0000\u0000\u0509\u050b\u0003\u001e\u000f\u0000"+
		"\u050a\u0508\u0001\u0000\u0000\u0000\u050a\u050b\u0001\u0000\u0000\u0000"+
		"\u050b9\u0001\u0000\u0000\u0000\u050c\u050d\u0003L&\u0000\u050d\u050e"+
		"\u0005\u0014\u0000\u0000\u050e\u0510\u0001\u0000\u0000\u0000\u050f\u050c"+
		"\u0001\u0000\u0000\u0000\u050f\u0510\u0001\u0000\u0000\u0000\u0510\u0511"+
		"\u0001\u0000\u0000\u0000\u0511\u0512\u0003N\'\u0000\u0512;\u0001\u0000"+
		"\u0000\u0000\u0513\u0514\u00034\u001a\u0000\u0514\u0515\u0005\u0014\u0000"+
		"\u0000\u0515\u0517\u0001\u0000\u0000\u0000\u0516\u0513\u0001\u0000\u0000"+
		"\u0000\u0516\u0517\u0001\u0000\u0000\u0000\u0517\u0518\u0001\u0000\u0000"+
		"\u0000\u0518\u0519\u0003N\'\u0000\u0519=\u0001\u0000\u0000\u0000\u051a"+
		"\u051b\u00034\u001a\u0000\u051b\u051c\u0005\u0014\u0000\u0000\u051c\u051e"+
		"\u0001\u0000\u0000\u0000\u051d\u051a\u0001\u0000\u0000\u0000\u051d\u051e"+
		"\u0001\u0000\u0000\u0000\u051e\u051f\u0001\u0000\u0000\u0000\u051f\u0520"+
		"\u0003N\'\u0000\u0520?\u0001\u0000\u0000\u0000\u0521\u0522\u00032\u0019"+
		"\u0000\u0522\u0523\u0005\u0014\u0000\u0000\u0523\u0525\u0001\u0000\u0000"+
		"\u0000\u0524\u0521\u0001\u0000\u0000\u0000\u0524\u0525\u0001\u0000\u0000"+
		"\u0000\u0525\u0527\u0001\u0000\u0000\u0000\u0526\u0528\u0003L&\u0000\u0527"+
		"\u0526\u0001\u0000\u0000\u0000\u0527\u0528\u0001\u0000\u0000\u0000\u0528"+
		"\u0529\u0001\u0000\u0000\u0000\u0529\u052b\u0005\u0014\u0000\u0000\u052a"+
		"\u0524\u0001\u0000\u0000\u0000\u052a\u052b\u0001\u0000\u0000\u0000\u052b"+
		"\u052c\u0001\u0000\u0000\u0000\u052c\u052d\u0003N\'\u0000\u052dA\u0001"+
		"\u0000\u0000\u0000\u052e\u052f\u00034\u001a\u0000\u052f\u0530\u0005\u0014"+
		"\u0000\u0000\u0530\u0532\u0001\u0000\u0000\u0000\u0531\u052e\u0001\u0000"+
		"\u0000\u0000\u0531\u0532\u0001\u0000\u0000\u0000\u0532\u0533\u0001\u0000"+
		"\u0000\u0000\u0533\u0534\u0003N\'\u0000\u0534C\u0001\u0000\u0000\u0000"+
		"\u0535\u0536\u0003N\'\u0000\u0536E\u0001\u0000\u0000\u0000\u0537\u0538"+
		"\u0003N\'\u0000\u0538G\u0001\u0000\u0000\u0000\u0539\u053a\u00032\u0019"+
		"\u0000\u053a\u053b\u0005\u0014\u0000\u0000\u053b\u053d\u0001\u0000\u0000"+
		"\u0000\u053c\u0539\u0001\u0000\u0000\u0000\u053c\u053d\u0001\u0000\u0000"+
		"\u0000\u053d\u053e\u0001\u0000\u0000\u0000\u053e\u053f\u0003L&\u0000\u053f"+
		"\u0540\u0005\u0014\u0000\u0000\u0540\u0542\u0001\u0000\u0000\u0000\u0541"+
		"\u053c\u0001\u0000\u0000\u0000\u0541\u0542\u0001\u0000\u0000\u0000\u0542"+
		"\u0545\u0001\u0000\u0000\u0000\u0543\u0546\u0003N\'\u0000\u0544\u0546"+
		"\u0003J%\u0000\u0545\u0543\u0001\u0000\u0000\u0000\u0545\u0544\u0001\u0000"+
		"\u0000\u0000\u0546I\u0001\u0000\u0000\u0000\u0547\u0548\u0005,\u0000\u0000"+
		"\u0548\u0549\u0005\u001f\u0000\u0000\u0549\u054a\u0003N\'\u0000\u054a"+
		"\u054b\u0005 \u0000\u0000\u054bK\u0001\u0000\u0000\u0000\u054c\u054d\u0003"+
		"*\u0015\u0000\u054dM\u0001\u0000\u0000\u0000\u054e\u054f\u0003*\u0015"+
		"\u0000\u054fO\u0001\u0000\u0000\u0000\u0550\u0551\u0005\u001f\u0000\u0000"+
		"\u0551\u0556\u0003H$\u0000\u0552\u0553\u0005%\u0000\u0000\u0553\u0555"+
		"\u0003H$\u0000\u0554\u0552\u0001\u0000\u0000\u0000\u0555\u0558\u0001\u0000"+
		"\u0000\u0000\u0556\u0554\u0001\u0000\u0000\u0000\u0556\u0557\u0001\u0000"+
		"\u0000\u0000\u0557\u0559\u0001\u0000\u0000\u0000\u0558\u0556\u0001\u0000"+
		"\u0000\u0000\u0559\u055a\u0005 \u0000\u0000\u055aQ\u0001\u0000\u0000\u0000"+
		"\u055b\u055c\u0005\u001f\u0000\u0000\u055c\u0561\u0003\u00dam\u0000\u055d"+
		"\u055e\u0005%\u0000\u0000\u055e\u0560\u0003\u00dam\u0000\u055f\u055d\u0001"+
		"\u0000\u0000\u0000\u0560\u0563\u0001\u0000\u0000\u0000\u0561\u055f\u0001"+
		"\u0000\u0000\u0000\u0561\u0562\u0001\u0000\u0000\u0000\u0562\u0564\u0001"+
		"\u0000\u0000\u0000\u0563\u0561\u0001\u0000\u0000\u0000\u0564\u0565\u0005"+
		" \u0000\u0000\u0565S\u0001\u0000\u0000\u0000\u0566\u0568\u0005\u001f\u0000"+
		"\u0000\u0567\u0566\u0001\u0000\u0000\u0000\u0567\u0568\u0001\u0000\u0000"+
		"\u0000\u0568\u0569\u0001\u0000\u0000\u0000\u0569\u056e\u0003@ \u0000\u056a"+
		"\u056b\u0005%\u0000\u0000\u056b\u056d\u0003@ \u0000\u056c\u056a\u0001"+
		"\u0000\u0000\u0000\u056d\u0570\u0001\u0000\u0000\u0000\u056e\u056c\u0001"+
		"\u0000\u0000\u0000\u056e\u056f\u0001\u0000\u0000\u0000\u056f\u0572\u0001"+
		"\u0000\u0000\u0000\u0570\u056e\u0001\u0000\u0000\u0000\u0571\u0573\u0005"+
		" \u0000\u0000\u0572\u0571\u0001\u0000\u0000\u0000\u0572\u0573\u0001\u0000"+
		"\u0000\u0000\u0573U\u0001\u0000\u0000\u0000\u0574\u0575\u0003*\u0015\u0000"+
		"\u0575W\u0001\u0000\u0000\u0000\u0576\u0577\u0003*\u0015\u0000\u0577Y"+
		"\u0001\u0000\u0000\u0000\u0578\u0579\u0007\u0007\u0000\u0000\u0579[\u0001"+
		"\u0000\u0000\u0000\u057a\u057e\u0003*\u0015\u0000\u057b\u057e\u0005\u02df"+
		"\u0000\u0000\u057c\u057e\u0005\u02e6\u0000\u0000\u057d\u057a\u0001\u0000"+
		"\u0000\u0000\u057d\u057b\u0001\u0000\u0000\u0000\u057d\u057c\u0001\u0000"+
		"\u0000\u0000\u057e]\u0001\u0000\u0000\u0000\u057f\u0585\u0005\u001f\u0000"+
		"\u0000\u0580\u0583\u0005\u02e0\u0000\u0000\u0581\u0582\u0005%\u0000\u0000"+
		"\u0582\u0584\u0005\u02e0\u0000\u0000\u0583\u0581\u0001\u0000\u0000\u0000"+
		"\u0583\u0584\u0001\u0000\u0000\u0000\u0584\u0586\u0001\u0000\u0000\u0000"+
		"\u0585\u0580\u0001\u0000\u0000\u0000\u0585\u0586\u0001\u0000\u0000\u0000"+
		"\u0586\u0587\u0001\u0000\u0000\u0000\u0587\u0588\u0005 \u0000\u0000\u0588"+
		"_\u0001\u0000\u0000\u0000\u0589\u058b\u0005@\u0000\u0000\u058a\u0589\u0001"+
		"\u0000\u0000\u0000\u058a\u058b\u0001\u0000\u0000\u0000\u058b\u058c\u0001"+
		"\u0000\u0000\u0000\u058c\u058d\u0005C\u0000\u0000\u058da\u0001\u0000\u0000"+
		"\u0000\u058e\u058f\u00061\uffff\uffff\u0000\u058f\u0598\u0003l6\u0000"+
		"\u0590\u0591\u0003j5\u0000\u0591\u0592\u0003b1\u0002\u0592\u0598\u0001"+
		"\u0000\u0000\u0000\u0593\u0594\u0005\u001f\u0000\u0000\u0594\u0595\u0003"+
		"b1\u0000\u0595\u0596\u0005 \u0000\u0000\u0596\u0598\u0001\u0000\u0000"+
		"\u0000\u0597\u058e\u0001\u0000\u0000\u0000\u0597\u0590\u0001\u0000\u0000"+
		"\u0000\u0597\u0593\u0001\u0000\u0000\u0000\u0598\u05a7\u0001\u0000\u0000"+
		"\u0000\u0599\u059a\n\u0005\u0000\u0000\u059a\u059b\u0003d2\u0000\u059b"+
		"\u059c\u0003b1\u0006\u059c\u05a6\u0001\u0000\u0000\u0000\u059d\u059e\n"+
		"\u0004\u0000\u0000\u059e\u059f\u0003f3\u0000\u059f\u05a0\u0003b1\u0005"+
		"\u05a0\u05a6\u0001\u0000\u0000\u0000\u05a1\u05a2\n\u0003\u0000\u0000\u05a2"+
		"\u05a3\u0003h4\u0000\u05a3\u05a4\u0003b1\u0004\u05a4\u05a6\u0001\u0000"+
		"\u0000\u0000\u05a5\u0599\u0001\u0000\u0000\u0000\u05a5\u059d\u0001\u0000"+
		"\u0000\u0000\u05a5\u05a1\u0001\u0000\u0000\u0000\u05a6\u05a9\u0001\u0000"+
		"\u0000\u0000\u05a7\u05a5\u0001\u0000\u0000\u0000\u05a7\u05a8\u0001\u0000"+
		"\u0000\u0000\u05a8c\u0001\u0000\u0000\u0000\u05a9\u05a7\u0001\u0000\u0000"+
		"\u0000\u05aa\u05ab\u0007\b\u0000\u0000\u05abe\u0001\u0000\u0000\u0000"+
		"\u05ac\u05ad\u0007\t\u0000\u0000\u05adg\u0001\u0000\u0000\u0000\u05ae"+
		"\u05b0\u0005j\u0000\u0000\u05af\u05b1\u0005k\u0000\u0000\u05b0\u05af\u0001"+
		"\u0000\u0000\u0000\u05b0\u05b1\u0001\u0000\u0000\u0000\u05b1\u05b2\u0001"+
		"\u0000\u0000\u0000\u05b2\u05b3\u0005O\u0000\u0000\u05b3\u05b4\u0005U\u0000"+
		"\u0000\u05b4i\u0001\u0000\u0000\u0000\u05b5\u05b6\u0007\n\u0000\u0000"+
		"\u05b6k\u0001\u0000\u0000\u0000\u05b7\u05b8\u00066\uffff\uffff\u0000\u05b8"+
		"\u05b9\u0003p8\u0000\u05b9\u05ce\u0001\u0000\u0000\u0000\u05ba\u05bb\n"+
		"\u0005\u0000\u0000\u05bb\u05bd\u0005j\u0000\u0000\u05bc\u05be\u0005k\u0000"+
		"\u0000\u05bd\u05bc\u0001\u0000\u0000\u0000\u05bd\u05be\u0001\u0000\u0000"+
		"\u0000\u05be\u05bf\u0001\u0000\u0000\u0000\u05bf\u05cd\u0007\u000b\u0000"+
		"\u0000\u05c0\u05c1\n\u0004\u0000\u0000\u05c1\u05c2\u0005\u0016\u0000\u0000"+
		"\u05c2\u05cd\u0003p8\u0000\u05c3\u05c4\n\u0003\u0000\u0000\u05c4\u05c5"+
		"\u0003n7\u0000\u05c5\u05c6\u0003p8\u0000\u05c6\u05cd\u0001\u0000\u0000"+
		"\u0000\u05c7\u05c8\n\u0002\u0000\u0000\u05c8\u05c9\u0003n7\u0000\u05c9"+
		"\u05ca\u0007\f\u0000\u0000\u05ca\u05cb\u0003\u0346\u01a3\u0000\u05cb\u05cd"+
		"\u0001\u0000\u0000\u0000\u05cc\u05ba\u0001\u0000\u0000\u0000\u05cc\u05c0"+
		"\u0001\u0000\u0000\u0000\u05cc\u05c3\u0001\u0000\u0000\u0000\u05cc\u05c7"+
		"\u0001\u0000\u0000\u0000\u05cd\u05d0\u0001\u0000\u0000\u0000\u05ce\u05cc"+
		"\u0001\u0000\u0000\u0000\u05ce\u05cf\u0001\u0000\u0000\u0000\u05cfm\u0001"+
		"\u0000\u0000\u0000\u05d0\u05ce\u0001\u0000\u0000\u0000\u05d1\u05d2\u0007"+
		"\r\u0000\u0000\u05d2o\u0001\u0000\u0000\u0000\u05d3\u05d5\u0003r9\u0000"+
		"\u05d4\u05d6\u0005k\u0000\u0000\u05d5\u05d4\u0001\u0000\u0000\u0000\u05d5"+
		"\u05d6\u0001\u0000\u0000\u0000\u05d6\u05d7\u0001\u0000\u0000\u0000\u05d7"+
		"\u05d8\u0005q\u0000\u0000\u05d8\u05d9\u0003\u0346\u01a3\u0000\u05d9\u05ff"+
		"\u0001\u0000\u0000\u0000\u05da\u05dc\u0003r9\u0000\u05db\u05dd\u0005k"+
		"\u0000\u0000\u05dc\u05db\u0001\u0000\u0000\u0000\u05dc\u05dd\u0001\u0000"+
		"\u0000\u0000\u05dd\u05de\u0001\u0000\u0000\u0000\u05de\u05df\u0005q\u0000"+
		"\u0000\u05df\u05e0\u0005\u001f\u0000\u0000\u05e0\u05e5\u0003b1\u0000\u05e1"+
		"\u05e2\u0005%\u0000\u0000\u05e2\u05e4\u0003b1\u0000\u05e3\u05e1\u0001"+
		"\u0000\u0000\u0000\u05e4\u05e7\u0001\u0000\u0000\u0000\u05e5\u05e3\u0001"+
		"\u0000\u0000\u0000\u05e5\u05e6\u0001\u0000\u0000\u0000\u05e6\u05e8\u0001"+
		"\u0000\u0000\u0000\u05e7\u05e5\u0001\u0000\u0000\u0000\u05e8\u05e9\u0005"+
		" \u0000\u0000\u05e9\u05ff\u0001\u0000\u0000\u0000\u05ea\u05ec\u0003r9"+
		"\u0000\u05eb\u05ed\u0005k\u0000\u0000\u05ec\u05eb\u0001\u0000\u0000\u0000"+
		"\u05ec\u05ed\u0001\u0000\u0000\u0000\u05ed\u05ee\u0001\u0000\u0000\u0000"+
		"\u05ee\u05ef\u0005p\u0000\u0000\u05ef\u05f0\u0003r9\u0000\u05f0\u05f1"+
		"\u0005h\u0000\u0000\u05f1\u05f2\u0003p8\u0000\u05f2\u05ff\u0001\u0000"+
		"\u0000\u0000\u05f3\u05f5\u0003r9\u0000\u05f4\u05f6\u0005k\u0000\u0000"+
		"\u05f5\u05f4\u0001\u0000\u0000\u0000\u05f5\u05f6\u0001\u0000\u0000\u0000"+
		"\u05f6\u05f7\u0001\u0000\u0000\u0000\u05f7\u05f8\u0005t\u0000\u0000\u05f8"+
		"\u05fb\u0003t:\u0000\u05f9\u05fa\u0005\u00f9\u0000\u0000\u05fa\u05fc\u0003"+
		"t:\u0000\u05fb\u05f9\u0001\u0000\u0000\u0000\u05fb\u05fc\u0001\u0000\u0000"+
		"\u0000\u05fc\u05ff\u0001\u0000\u0000\u0000\u05fd\u05ff\u0003r9\u0000\u05fe"+
		"\u05d3\u0001\u0000\u0000\u0000\u05fe\u05da\u0001\u0000\u0000\u0000\u05fe"+
		"\u05ea\u0001\u0000\u0000\u0000\u05fe\u05f3\u0001\u0000\u0000\u0000\u05fe"+
		"\u05fd\u0001\u0000\u0000\u0000\u05ffq\u0001\u0000\u0000\u0000\u0600\u0601"+
		"\u00069\uffff\uffff\u0000\u0601\u0602\u0003t:\u0000\u0602\u0623\u0001"+
		"\u0000\u0000\u0000\u0603\u0604\n\u000b\u0000\u0000\u0604\u0605\u0005\b"+
		"\u0000\u0000\u0605\u0622\u0003r9\f\u0606\u0607\n\n\u0000\u0000\u0607\u0608"+
		"\u0005\t\u0000\u0000\u0608\u0622\u0003r9\u000b\u0609\u060a\n\t\u0000\u0000"+
		"\u060a\u060b\u0005\n\u0000\u0000\u060b\u0622\u0003r9\n\u060c\u060d\n\b"+
		"\u0000\u0000\u060d\u060e\u0005\u000b\u0000\u0000\u060e\u0622\u0003r9\t"+
		"\u060f\u0610\n\u0007\u0000\u0000\u0610\u0611\u0005\u000f\u0000\u0000\u0611"+
		"\u0622\u0003r9\b\u0612\u0613\n\u0006\u0000\u0000\u0613\u0614\u0005\u0010"+
		"\u0000\u0000\u0614\u0622\u0003r9\u0007\u0615\u0616\n\u0005\u0000\u0000"+
		"\u0616\u0617\u0005\u0011\u0000\u0000\u0617\u0622\u0003r9\u0006\u0618\u0619"+
		"\n\u0004\u0000\u0000\u0619\u061a\u0005\u0012\u0000\u0000\u061a\u0622\u0003"+
		"r9\u0005\u061b\u061c\n\u0003\u0000\u0000\u061c\u061d\u0005\r\u0000\u0000"+
		"\u061d\u0622\u0003r9\u0004\u061e\u061f\n\u0002\u0000\u0000\u061f\u0620"+
		"\u0005\f\u0000\u0000\u0620\u0622\u0003r9\u0003\u0621\u0603\u0001\u0000"+
		"\u0000\u0000\u0621\u0606\u0001\u0000\u0000\u0000\u0621\u0609\u0001\u0000"+
		"\u0000\u0000\u0621\u060c\u0001\u0000\u0000\u0000\u0621\u060f\u0001\u0000"+
		"\u0000\u0000\u0621\u0612\u0001\u0000\u0000\u0000\u0621\u0615\u0001\u0000"+
		"\u0000\u0000\u0621\u0618\u0001\u0000\u0000\u0000\u0621\u061b\u0001\u0000"+
		"\u0000\u0000\u0621\u061e\u0001\u0000\u0000\u0000\u0622\u0625\u0001\u0000"+
		"\u0000\u0000\u0623\u0621\u0001\u0000\u0000\u0000\u0623\u0624\u0001\u0000"+
		"\u0000\u0000\u0624s\u0001\u0000\u0000\u0000\u0625\u0623\u0001\u0000\u0000"+
		"\u0000\u0626\u0627\u0006:\uffff\uffff\u0000\u0627\u0663\u0003v;\u0000"+
		"\u0628\u0663\u0003\u0018\f\u0000\u0629\u0663\u0003\u001a\r\u0000\u062a"+
		"\u0663\u0003H$\u0000\u062b\u0663\u0003\u00fa}\u0000\u062c\u062d\u0007"+
		"\u000e\u0000\u0000\u062d\u0663\u0003t:\t\u062e\u062f\u0005\u009b\u0000"+
		"\u0000\u062f\u0631\u0005\u00cf\u0000\u0000\u0630\u0632\u0005\u026f\u0000"+
		"\u0000\u0631\u0630\u0001\u0000\u0000\u0000\u0631\u0632\u0001\u0000\u0000"+
		"\u0000\u0632\u0633\u0001\u0000\u0000\u0000\u0633\u0663\u0003b1\u0000\u0634"+
		"\u0636\u0005\u00ff\u0000\u0000\u0635\u0634\u0001\u0000\u0000\u0000\u0635"+
		"\u0636\u0001\u0000\u0000\u0000\u0636\u0637\u0001\u0000\u0000\u0000\u0637"+
		"\u0638\u0005\u001f\u0000\u0000\u0638\u063d\u0003b1\u0000\u0639\u063a\u0005"+
		"%\u0000\u0000\u063a\u063c\u0003b1\u0000\u063b\u0639\u0001\u0000\u0000"+
		"\u0000\u063c\u063f\u0001\u0000\u0000\u0000\u063d\u063b\u0001\u0000\u0000"+
		"\u0000\u063d\u063e\u0001\u0000\u0000\u0000\u063e\u0640\u0001\u0000\u0000"+
		"\u0000\u063f\u063d\u0001\u0000\u0000\u0000\u0640\u0641\u0005 \u0000\u0000"+
		"\u0641\u0663\u0001\u0000\u0000\u0000\u0642\u0644\u0005o\u0000\u0000\u0643"+
		"\u0642\u0001\u0000\u0000\u0000\u0643\u0644\u0001\u0000\u0000\u0000\u0644"+
		"\u0645\u0001\u0000\u0000\u0000\u0645\u0663\u0003\u0346\u01a3\u0000\u0646"+
		"\u0647\u0005#\u0000\u0000\u0647\u0648\u0003b1\u0000\u0648\u0649\u0005"+
		"$\u0000\u0000\u0649\u0663\u0001\u0000\u0000\u0000\u064a\u064b\u0005!\u0000"+
		"\u0000\u064b\u0650\u0003b1\u0000\u064c\u064d\u0005\u0014\u0000\u0000\u064d"+
		"\u064f\u0003b1\u0000\u064e\u064c\u0001\u0000\u0000\u0000\u064f\u0652\u0001"+
		"\u0000\u0000\u0000\u0650\u064e\u0001\u0000\u0000\u0000\u0650\u0651\u0001"+
		"\u0000\u0000\u0000\u0651\u0657\u0001\u0000\u0000\u0000\u0652\u0650\u0001"+
		"\u0000\u0000\u0000\u0653\u0654\u0005%\u0000\u0000\u0654\u0656\u0003b1"+
		"\u0000\u0655\u0653\u0001\u0000\u0000\u0000\u0656\u0659\u0001\u0000\u0000"+
		"\u0000\u0657\u0655\u0001\u0000\u0000\u0000\u0657\u0658\u0001\u0000\u0000"+
		"\u0000\u0658\u065a\u0001\u0000\u0000\u0000\u0659\u0657\u0001\u0000\u0000"+
		"\u0000\u065a\u065d\u0005\"\u0000\u0000\u065b\u065c\u0005a\u0000\u0000"+
		"\u065c\u065e\u0007\u000f\u0000\u0000\u065d\u065b\u0001\u0000\u0000\u0000"+
		"\u065d\u065e\u0001\u0000\u0000\u0000\u065e\u0663\u0001\u0000\u0000\u0000"+
		"\u065f\u0663\u0003\u00b0X\u0000\u0660\u0663\u0003\u00b6[\u0000\u0661\u0663"+
		"\u0003\u010c\u0086\u0000\u0662\u0626\u0001\u0000\u0000\u0000\u0662\u0628"+
		"\u0001\u0000\u0000\u0000\u0662\u0629\u0001\u0000\u0000\u0000\u0662\u062a"+
		"\u0001\u0000\u0000\u0000\u0662\u062b\u0001\u0000\u0000\u0000\u0662\u062c"+
		"\u0001\u0000\u0000\u0000\u0662\u062e\u0001\u0000\u0000\u0000\u0662\u0635"+
		"\u0001\u0000\u0000\u0000\u0662\u0643\u0001\u0000\u0000\u0000\u0662\u0646"+
		"\u0001\u0000\u0000\u0000\u0662\u064a\u0001\u0000\u0000\u0000\u0662\u065f"+
		"\u0001\u0000\u0000\u0000\u0662\u0660\u0001\u0000\u0000\u0000\u0662\u0661"+
		"\u0001\u0000\u0000\u0000\u0663\u0669\u0001\u0000\u0000\u0000\u0664\u0665"+
		"\n\n\u0000\u0000\u0665\u0666\u0005\u0005\u0000\u0000\u0666\u0668\u0003"+
		"t:\u000b\u0667\u0664\u0001\u0000\u0000\u0000\u0668\u066b\u0001\u0000\u0000"+
		"\u0000\u0669\u0667\u0001\u0000\u0000\u0000\u0669\u066a\u0001\u0000\u0000"+
		"\u0000\u066au\u0001\u0000\u0000\u0000\u066b\u0669\u0001\u0000\u0000\u0000"+
		"\u066c\u0670\u0003x<\u0000\u066d\u0670\u0003~?\u0000\u066e\u0670\u0003"+
		"\u00acV\u0000\u066f\u066c\u0001\u0000\u0000\u0000\u066f\u066d\u0001\u0000"+
		"\u0000\u0000\u066f\u066e\u0001\u0000\u0000\u0000\u0670w\u0001\u0000\u0000"+
		"\u0000\u0671\u0672\u0003z=\u0000\u0672\u0674\u0005\u001f\u0000\u0000\u0673"+
		"\u0675\u0003|>\u0000\u0674\u0673\u0001\u0000\u0000\u0000\u0674\u0675\u0001"+
		"\u0000\u0000\u0000\u0675\u067f\u0001\u0000\u0000\u0000\u0676\u067b\u0003"+
		"b1\u0000\u0677\u0678\u0005%\u0000\u0000\u0678\u067a\u0003b1\u0000\u0679"+
		"\u0677\u0001\u0000\u0000\u0000\u067a\u067d\u0001\u0000\u0000\u0000\u067b"+
		"\u0679\u0001\u0000\u0000\u0000\u067b\u067c\u0001\u0000\u0000\u0000\u067c"+
		"\u0680\u0001\u0000\u0000\u0000\u067d\u067b\u0001\u0000\u0000\u0000\u067e"+
		"\u0680\u0005\u0011\u0000\u0000\u067f\u0676\u0001\u0000\u0000\u0000\u067f"+
		"\u067e\u0001\u0000\u0000\u0000\u067f\u0680\u0001\u0000\u0000\u0000\u0680"+
		"\u0681\u0001\u0000\u0000\u0000\u0681\u0682\u0005 \u0000\u0000\u0682y\u0001"+
		"\u0000\u0000\u0000\u0683\u0684\u0007\u0010\u0000\u0000\u0684{\u0001\u0000"+
		"\u0000\u0000\u0685\u0686\u0005O\u0000\u0000\u0686}\u0001\u0000\u0000\u0000"+
		"\u0687\u0693\u0003\u008eG\u0000\u0688\u0693\u0003\u009eO\u0000\u0689\u0693"+
		"\u0003\u00a0P\u0000\u068a\u0693\u0003\u0094J\u0000\u068b\u0693\u0003\u00a6"+
		"S\u0000\u068c\u0693\u0003\u00c6c\u0000\u068d\u0693\u0003\u008cF\u0000"+
		"\u068e\u0693\u0003\u008aE\u0000\u068f\u0693\u0003\u0088D\u0000\u0690\u0693"+
		"\u0003\u0082A\u0000\u0691\u0693\u0003\u0080@\u0000\u0692\u0687\u0001\u0000"+
		"\u0000\u0000\u0692\u0688\u0001\u0000\u0000\u0000\u0692\u0689\u0001\u0000"+
		"\u0000\u0000\u0692\u068a\u0001\u0000\u0000\u0000\u0692\u068b\u0001\u0000"+
		"\u0000\u0000\u0692\u068c\u0001\u0000\u0000\u0000\u0692\u068d\u0001\u0000"+
		"\u0000\u0000\u0692\u068e\u0001\u0000\u0000\u0000\u0692\u068f\u0001\u0000"+
		"\u0000\u0000\u0692\u0690\u0001\u0000\u0000\u0000\u0692\u0691\u0001\u0000"+
		"\u0000\u0000\u0693\u007f\u0001\u0000\u0000\u0000\u0694\u0695\u0005S\u0000"+
		"\u0000\u0695\u069b\u0005\u001f\u0000\u0000\u0696\u0698\u0007\u0011\u0000"+
		"\u0000\u0697\u0699\u0003b1\u0000\u0698\u0697\u0001\u0000\u0000\u0000\u0698"+
		"\u0699\u0001\u0000\u0000\u0000\u0699\u069a\u0001\u0000\u0000\u0000\u069a"+
		"\u069c\u0005U\u0000\u0000\u069b\u0696\u0001\u0000\u0000\u0000\u069b\u069c"+
		"\u0001\u0000\u0000\u0000\u069c\u069d\u0001\u0000\u0000\u0000\u069d\u069e"+
		"\u0003b1\u0000\u069e\u069f\u0005 \u0000\u0000\u069f\u06ab\u0001\u0000"+
		"\u0000\u0000\u06a0\u06a1\u0005S\u0000\u0000\u06a1\u06a5\u0005\u001f\u0000"+
		"\u0000\u06a2\u06a3\u0003b1\u0000\u06a3\u06a4\u0005U\u0000\u0000\u06a4"+
		"\u06a6\u0001\u0000\u0000\u0000\u06a5\u06a2\u0001\u0000\u0000\u0000\u06a5"+
		"\u06a6\u0001\u0000\u0000\u0000\u06a6\u06a7\u0001\u0000\u0000\u0000\u06a7"+
		"\u06a8\u0003b1\u0000\u06a8\u06a9\u0005 \u0000\u0000\u06a9\u06ab\u0001"+
		"\u0000\u0000\u0000\u06aa\u0694\u0001\u0000\u0000\u0000\u06aa\u06a0\u0001"+
		"\u0000\u0000\u0000\u06ab\u0081\u0001\u0000\u0000\u0000\u06ac\u06ad\u0003"+
		"\u0084B\u0000\u06ad\u0083\u0001\u0000\u0000\u0000\u06ae\u06af\u0003\u0086"+
		"C\u0000\u06af\u06b0\u0005\u001f\u0000\u0000\u06b0\u06b3\u0003b1\u0000"+
		"\u06b1\u06b2\u0005%\u0000\u0000\u06b2\u06b4\u0003b1\u0000\u06b3\u06b1"+
		"\u0001\u0000\u0000\u0000\u06b3\u06b4\u0001\u0000\u0000\u0000\u06b4\u06b5"+
		"\u0001\u0000\u0000\u0000\u06b5\u06b6\u0005 \u0000\u0000\u06b6\u06b7\u0005"+
		"\u00ef\u0000\u0000\u06b7\u06b8\u0005v\u0000\u0000\u06b8\u06b9\u0005\u001f"+
		"\u0000\u0000\u06b9\u06ba\u0005\u02dc\u0000\u0000\u06ba\u06bb\u0005\u02c5"+
		"\u0000\u0000\u06bb\u06bc\u0005 \u0000\u0000\u06bc\u0085\u0001\u0000\u0000"+
		"\u0000\u06bd\u06c1\u0005\u02db\u0000\u0000\u06be\u06c1\u0005\u00ec\u0000"+
		"\u0000\u06bf\u06c1\u0003z=\u0000\u06c0\u06bd\u0001\u0000\u0000\u0000\u06c0"+
		"\u06be\u0001\u0000\u0000\u0000\u06c0\u06bf\u0001\u0000\u0000\u0000\u06c1"+
		"\u0087\u0001\u0000\u0000\u0000\u06c2\u06c3\u0005\u01c3\u0000\u0000\u06c3"+
		"\u06c4\u0005\u001f\u0000\u0000\u06c4\u06c5\u0005 \u0000\u0000\u06c5\u06c6"+
		"\u0003\u00cae\u0000\u06c6\u0089\u0001\u0000\u0000\u0000\u06c7\u06c8\u0005"+
		"\u00f0\u0000\u0000\u06c8\u06c9\u0005\u001f\u0000\u0000\u06c9\u06ca\u0003"+
		"b1\u0000\u06ca\u06cb\u0005%\u0000\u0000\u06cb\u06cc\u0003b1\u0000\u06cc"+
		"\u06cd\u0005 \u0000\u0000\u06cd\u06d0\u0001\u0000\u0000\u0000\u06ce\u06cf"+
		"\u0005\u0014\u0000\u0000\u06cf\u06d1\u0003@ \u0000\u06d0\u06ce\u0001\u0000"+
		"\u0000\u0000\u06d0\u06d1\u0001\u0000\u0000\u0000\u06d1\u008b\u0001\u0000"+
		"\u0000\u0000\u06d2\u06d3\u0007\u0012\u0000\u0000\u06d3\u06d4\u0005\u001f"+
		"\u0000\u0000\u06d4\u06d5\u0003b1\u0000\u06d5\u06d6\u0005 \u0000\u0000"+
		"\u06d6\u06d7\u0005\u00ef\u0000\u0000\u06d7\u06d8\u0005v\u0000\u0000\u06d8"+
		"\u06d9\u0005\u001f\u0000\u0000\u06d9\u06da\u0005u\u0000\u0000\u06da\u06db"+
		"\u0005w\u0000\u0000\u06db\u06dd\u0003b1\u0000\u06dc\u06de\u0007\u0013"+
		"\u0000\u0000\u06dd\u06dc\u0001\u0000\u0000\u0000\u06dd\u06de\u0001\u0000"+
		"\u0000\u0000\u06de\u06df\u0001\u0000\u0000\u0000\u06df\u06e0\u0005 \u0000"+
		"\u0000\u06e0\u008d\u0001\u0000\u0000\u0000\u06e1\u06e4\u0003\u0090H\u0000"+
		"\u06e2\u06e4\u0003\u0092I\u0000\u06e3\u06e1\u0001\u0000\u0000\u0000\u06e3"+
		"\u06e2\u0001\u0000\u0000\u0000\u06e4\u008f\u0001\u0000\u0000\u0000\u06e5"+
		"\u06e6\u0007\u0014\u0000\u0000\u06e6\u06e7\u0005\u001f\u0000\u0000\u06e7"+
		"\u06e8\u0003b1\u0000\u06e8\u06e9\u0005`\u0000\u0000\u06e9\u06ea\u0003"+
		"\u00bc^\u0000\u06ea\u06eb\u0005 \u0000\u0000\u06eb\u0091\u0001\u0000\u0000"+
		"\u0000\u06ec\u06ed\u0007\u0015\u0000\u0000\u06ed\u06ee\u0005\u001f\u0000"+
		"\u0000\u06ee\u06ef\u0003\u00bc^\u0000\u06ef\u06f0\u0005%\u0000\u0000\u06f0"+
		"\u06f3\u0003b1\u0000\u06f1\u06f2\u0005%\u0000\u0000\u06f2\u06f4\u0005"+
		"\u02e0\u0000\u0000\u06f3\u06f1\u0001\u0000\u0000\u0000\u06f3\u06f4\u0001"+
		"\u0000\u0000\u0000\u06f4\u06f5\u0001\u0000\u0000\u0000\u06f5\u06f6\u0005"+
		" \u0000\u0000\u06f6\u0093\u0001\u0000\u0000\u0000\u06f7\u06fa\u0003\u0096"+
		"K\u0000\u06f8\u06fa\u0003\u0098L\u0000\u06f9\u06f7\u0001\u0000\u0000\u0000"+
		"\u06f9\u06f8\u0001\u0000\u0000\u0000\u06fa\u0095\u0001\u0000\u0000\u0000"+
		"\u06fb\u06fc\u0005\u00e9\u0000\u0000\u06fc\u0708\u0005\u001f\u0000\u0000"+
		"\u06fd\u0702\u0003\u009aM\u0000\u06fe\u06ff\u0005%\u0000\u0000\u06ff\u0701"+
		"\u0003\u009aM\u0000\u0700\u06fe\u0001\u0000\u0000\u0000\u0701\u0704\u0001"+
		"\u0000\u0000\u0000\u0702\u0700\u0001\u0000\u0000\u0000\u0702\u0703\u0001"+
		"\u0000\u0000\u0000\u0703\u0706\u0001\u0000\u0000\u0000\u0704\u0702\u0001"+
		"\u0000\u0000\u0000\u0705\u0707\u0003\u009cN\u0000\u0706\u0705\u0001\u0000"+
		"\u0000\u0000\u0706\u0707\u0001\u0000\u0000\u0000\u0707\u0709\u0001\u0000"+
		"\u0000\u0000\u0708\u06fd\u0001\u0000\u0000\u0000\u0708\u0709\u0001\u0000"+
		"\u0000\u0000\u0709\u070a\u0001\u0000\u0000\u0000\u070a\u070b\u0005 \u0000"+
		"\u0000\u070b\u0097\u0001\u0000\u0000\u0000\u070c\u070d\u0005\u00ea\u0000"+
		"\u0000\u070d\u070e\u0005\u001f\u0000\u0000\u070e\u0713\u0003b1\u0000\u070f"+
		"\u0710\u0005%\u0000\u0000\u0710\u0712\u0003b1\u0000\u0711\u070f\u0001"+
		"\u0000\u0000\u0000\u0712\u0715\u0001\u0000\u0000\u0000\u0713\u0711\u0001"+
		"\u0000\u0000\u0000\u0713\u0714\u0001\u0000\u0000\u0000\u0714\u0717\u0001"+
		"\u0000\u0000\u0000\u0715\u0713\u0001\u0000\u0000\u0000\u0716\u0718\u0003"+
		"\u009cN\u0000\u0717\u0716\u0001\u0000\u0000\u0000\u0717\u0718\u0001\u0000"+
		"\u0000\u0000\u0718\u0719\u0001\u0000\u0000\u0000\u0719\u071a\u0005 \u0000"+
		"\u0000\u071a\u0099\u0001\u0000\u0000\u0000\u071b\u071c\u0003b1\u0000\u071c"+
		"\u071d\u0005\u000e\u0000\u0000\u071d\u071e\u0003b1\u0000\u071e\u009b\u0001"+
		"\u0000\u0000\u0000\u071f\u0720\u0005l\u0000\u0000\u0720\u0721\u0005a\u0000"+
		"\u0000\u0721\u0726\u0005l\u0000\u0000\u0722\u0723\u0005\u02c3\u0000\u0000"+
		"\u0723\u0724\u0005a\u0000\u0000\u0724\u0726\u0005l\u0000\u0000\u0725\u071f"+
		"\u0001\u0000\u0000\u0000\u0725\u0722\u0001\u0000\u0000\u0000\u0726\u009d"+
		"\u0001\u0000\u0000\u0000\u0727\u0728\u0005\u0083\u0000\u0000\u0728\u0729"+
		"\u0005\u001f\u0000\u0000\u0729\u072e\u0003b1\u0000\u072a\u072b\u0005%"+
		"\u0000\u0000\u072b\u072d\u0003b1\u0000\u072c\u072a\u0001\u0000\u0000\u0000"+
		"\u072d\u0730\u0001\u0000\u0000\u0000\u072e\u072c\u0001\u0000\u0000\u0000"+
		"\u072e\u072f\u0001\u0000\u0000\u0000\u072f\u0733\u0001\u0000\u0000\u0000"+
		"\u0730\u072e\u0001\u0000\u0000\u0000\u0731\u0732\u0005^\u0000\u0000\u0732"+
		"\u0734\u0003\u00f4z\u0000\u0733\u0731\u0001\u0000\u0000\u0000\u0733\u0734"+
		"\u0001\u0000\u0000\u0000\u0734\u0735\u0001\u0000\u0000\u0000\u0735\u0736"+
		"\u0005 \u0000\u0000\u0736\u009f\u0001\u0000\u0000\u0000\u0737\u0738\u0005"+
		"\u02d3\u0000\u0000\u0738\u0739\u0005\u001f\u0000\u0000\u0739\u073c\u0003"+
		"b1\u0000\u073a\u073b\u0005%\u0000\u0000\u073b\u073d\u0003b1\u0000\u073c"+
		"\u073a\u0001\u0000\u0000\u0000\u073c\u073d\u0001\u0000\u0000\u0000\u073d"+
		"\u073e\u0001\u0000\u0000\u0000\u073e\u0740\u0005 \u0000\u0000\u073f\u0741"+
		"\u0003\u00a2Q\u0000\u0740\u073f\u0001\u0000\u0000\u0000\u0740\u0741\u0001"+
		"\u0000\u0000\u0000\u0741\u00a1\u0001\u0000\u0000\u0000\u0742\u0743\u0005"+
		"M\u0000\u0000\u0743\u0744\u0005\u001f\u0000\u0000\u0744\u0749\u0003\u00a4"+
		"R\u0000\u0745\u0746\u0005%\u0000\u0000\u0746\u0748\u0003\u00a4R\u0000"+
		"\u0747\u0745\u0001\u0000\u0000\u0000\u0748\u074b\u0001\u0000\u0000\u0000"+
		"\u0749\u0747\u0001\u0000\u0000\u0000\u0749\u074a\u0001\u0000\u0000\u0000"+
		"\u074a\u074c\u0001\u0000\u0000\u0000\u074b\u0749\u0001\u0000\u0000\u0000"+
		"\u074c\u074d\u0005 \u0000\u0000\u074d\u00a3\u0001\u0000\u0000\u0000\u074e"+
		"\u074f\u0003H$\u0000\u074f\u0751\u0003\u00bc^\u0000\u0750\u0752\u0003"+
		"b1\u0000\u0751\u0750\u0001\u0000\u0000\u0000\u0751\u0752\u0001\u0000\u0000"+
		"\u0000\u0752\u0755\u0001\u0000\u0000\u0000\u0753\u0754\u0005`\u0000\u0000"+
		"\u0754\u0756\u0005\u02c8\u0000\u0000\u0755\u0753\u0001\u0000\u0000\u0000"+
		"\u0755\u0756\u0001\u0000\u0000\u0000\u0756\u00a5\u0001\u0000\u0000\u0000"+
		"\u0757\u0758\u0005\u02d4\u0000\u0000\u0758\u0759\u0005\u001f\u0000\u0000"+
		"\u0759\u075a\u0003b1\u0000\u075a\u0762\u0005%\u0000\u0000\u075b\u075c"+
		"\u0003b1\u0000\u075c\u075d\u0005+\u0000\u0000\u075d\u075e\u0003b1\u0000"+
		"\u075e\u075f\u0005+\u0000\u0000\u075f\u0760\u0003b1\u0000\u0760\u0763"+
		"\u0001\u0000\u0000\u0000\u0761\u0763\u0003b1\u0000\u0762\u075b\u0001\u0000"+
		"\u0000\u0000\u0762\u0761\u0001\u0000\u0000\u0000\u0763\u0764\u0001\u0000"+
		"\u0000\u0000\u0764\u0767\u0005%\u0000\u0000\u0765\u0768\u0003@ \u0000"+
		"\u0766\u0768\u0003b1\u0000\u0767\u0765\u0001\u0000\u0000\u0000\u0767\u0766"+
		"\u0001\u0000\u0000\u0000\u0768\u0769\u0001\u0000\u0000\u0000\u0769\u076a"+
		"\u0005 \u0000\u0000\u076a\u0779\u0001\u0000\u0000\u0000\u076b\u076c\u0005"+
		"\u02d4\u0000\u0000\u076c\u076d\u0005\u001f\u0000\u0000\u076d\u076e\u0005"+
		"\u0171\u0000\u0000\u076e\u0773\u0003b1\u0000\u076f\u0770\u0005%\u0000"+
		"\u0000\u0770\u0772\u0003b1\u0000\u0771\u076f\u0001\u0000\u0000\u0000\u0772"+
		"\u0775\u0001\u0000\u0000\u0000\u0773\u0771\u0001\u0000\u0000\u0000\u0773"+
		"\u0774\u0001\u0000\u0000\u0000\u0774\u0776\u0001\u0000\u0000\u0000\u0775"+
		"\u0773\u0001\u0000\u0000\u0000\u0776\u0777\u0005 \u0000\u0000\u0777\u0779"+
		"\u0001\u0000\u0000\u0000\u0778\u0757\u0001\u0000\u0000\u0000\u0778\u076b"+
		"\u0001\u0000\u0000\u0000\u0779\u00a7\u0001\u0000\u0000\u0000\u077a\u077b"+
		"\u0005\u02d7\u0000\u0000\u077b\u077c\u0005\u001f\u0000\u0000\u077c\u077d"+
		"\u0003b1\u0000\u077d\u077e\u0005%\u0000\u0000\u077e\u077f\u0003b1\u0000"+
		"\u077f\u0780\u0005 \u0000\u0000\u0780\u00a9\u0001\u0000\u0000\u0000\u0781"+
		"\u0784\u0003\u00a6S\u0000\u0782\u0784\u0003\u00a8T\u0000\u0783\u0781\u0001"+
		"\u0000\u0000\u0000\u0783\u0782\u0001\u0000\u0000\u0000\u0784\u00ab\u0001"+
		"\u0000\u0000\u0000\u0785\u0786\u0003\u00aeW\u0000\u0786\u0790\u0005\u001f"+
		"\u0000\u0000\u0787\u078c\u0003b1\u0000\u0788\u0789\u0005%\u0000\u0000"+
		"\u0789\u078b\u0003b1\u0000\u078a\u0788\u0001\u0000\u0000\u0000\u078b\u078e"+
		"\u0001\u0000\u0000\u0000\u078c\u078a\u0001\u0000\u0000\u0000\u078c\u078d"+
		"\u0001\u0000\u0000\u0000\u078d\u0791\u0001\u0000\u0000\u0000\u078e\u078c"+
		"\u0001\u0000\u0000\u0000\u078f\u0791\u0005\u0011\u0000\u0000\u0790\u0787"+
		"\u0001\u0000\u0000\u0000\u0790\u078f\u0001\u0000\u0000\u0000\u0790\u0791"+
		"\u0001\u0000\u0000\u0000\u0791\u0792\u0001\u0000\u0000\u0000\u0792\u0793"+
		"\u0005 \u0000\u0000\u0793\u00ad\u0001\u0000\u0000\u0000\u0794\u0795\u0003"+
		"L&\u0000\u0795\u0796\u0005\u0014\u0000\u0000\u0796\u0798\u0001\u0000\u0000"+
		"\u0000\u0797\u0794\u0001\u0000\u0000\u0000\u0797\u0798\u0001\u0000\u0000"+
		"\u0000\u0798\u0799\u0001\u0000\u0000\u0000\u0799\u079f\u0003*\u0015\u0000"+
		"\u079a\u079f\u0005c\u0000\u0000\u079b\u079f\u0005\u008a\u0000\u0000\u079c"+
		"\u079f\u0005\u008b\u0000\u0000\u079d\u079f\u0005\u0086\u0000\u0000\u079e"+
		"\u0797\u0001\u0000\u0000\u0000\u079e\u079a\u0001\u0000\u0000\u0000\u079e"+
		"\u079b\u0001\u0000\u0000\u0000\u079e\u079c\u0001\u0000\u0000\u0000\u079e"+
		"\u079d\u0001\u0000\u0000\u0000\u079f\u00af\u0001\u0000\u0000\u0000\u07a0"+
		"\u07a2\u0005P\u0000\u0000\u07a1\u07a3\u0003t:\u0000\u07a2\u07a1\u0001"+
		"\u0000\u0000\u0000\u07a2\u07a3\u0001\u0000\u0000\u0000\u07a3\u07a5\u0001"+
		"\u0000\u0000\u0000\u07a4\u07a6\u0003\u00b2Y\u0000\u07a5\u07a4\u0001\u0000"+
		"\u0000\u0000\u07a6\u07a7\u0001\u0000\u0000\u0000\u07a7\u07a5\u0001\u0000"+
		"\u0000\u0000\u07a7\u07a8\u0001\u0000\u0000\u0000\u07a8\u07aa\u0001\u0000"+
		"\u0000\u0000\u07a9\u07ab\u0003\u00b4Z\u0000\u07aa\u07a9\u0001\u0000\u0000"+
		"\u0000\u07aa\u07ab\u0001\u0000\u0000\u0000\u07ab\u07ac\u0001\u0000\u0000"+
		"\u0000\u07ac\u07ad\u0005\u0124\u0000\u0000\u07ad\u00b1\u0001\u0000\u0000"+
		"\u0000\u07ae\u07af\u0005Q\u0000\u0000\u07af\u07b0\u0003b1\u0000\u07b0"+
		"\u07b1\u0005e\u0000\u0000\u07b1\u07b2\u0003b1\u0000\u07b2\u00b3\u0001"+
		"\u0000\u0000\u0000\u07b3\u07b4\u0005d\u0000\u0000\u07b4\u07b5\u0003b1"+
		"\u0000\u07b5\u00b5\u0001\u0000\u0000\u0000\u07b6\u07bb\u0003\u00c6c\u0000"+
		"\u07b7\u07bb\u0003\u00c0`\u0000\u07b8\u07bb\u0003\u00c2a\u0000\u07b9\u07bb"+
		"\u0003\u00c4b\u0000\u07ba\u07b6\u0001\u0000\u0000\u0000\u07ba\u07b7\u0001"+
		"\u0000\u0000\u0000\u07ba\u07b8\u0001\u0000\u0000\u0000\u07ba\u07b9\u0001"+
		"\u0000\u0000\u0000\u07bb\u00b7\u0001\u0000\u0000\u0000\u07bc\u07bd\u0005"+
		"u\u0000\u0000\u07bd\u07be\u0005w\u0000\u0000\u07be\u07c3\u0003\u00ba]"+
		"\u0000\u07bf\u07c0\u0005%\u0000\u0000\u07c0\u07c2\u0003\u00ba]\u0000\u07c1"+
		"\u07bf\u0001\u0000\u0000\u0000\u07c2\u07c5\u0001\u0000\u0000\u0000\u07c3"+
		"\u07c1\u0001\u0000\u0000\u0000\u07c3\u07c4\u0001\u0000\u0000\u0000\u07c4"+
		"\u07d1\u0001\u0000\u0000\u0000\u07c5\u07c3\u0001\u0000\u0000\u0000\u07c6"+
		"\u07c7\u0005|\u0000\u0000\u07c7\u07c8\u0003b1\u0000\u07c8\u07cf\u0007"+
		"\u0016\u0000\u0000\u07c9\u07ca\u0005\u01c4\u0000\u0000\u07ca\u07cb\u0007"+
		"\u0017\u0000\u0000\u07cb\u07cc\u0003b1\u0000\u07cc\u07cd\u0007\u0016\u0000"+
		"\u0000\u07cd\u07ce\u0005\u01c6\u0000\u0000\u07ce\u07d0\u0001\u0000\u0000"+
		"\u0000\u07cf\u07c9\u0001\u0000\u0000\u0000\u07cf\u07d0\u0001\u0000\u0000"+
		"\u0000\u07d0\u07d2\u0001\u0000\u0000\u0000\u07d1\u07c6\u0001\u0000\u0000"+
		"\u0000\u07d1\u07d2\u0001\u0000\u0000\u0000\u07d2\u00b9\u0001\u0000\u0000"+
		"\u0000\u07d3\u07d7\u0003H$\u0000\u07d4\u07d7\u0003\u001e\u000f\u0000\u07d5"+
		"\u07d7\u0003b1\u0000\u07d6\u07d3\u0001\u0000\u0000\u0000\u07d6\u07d4\u0001"+
		"\u0000\u0000\u0000\u07d6\u07d5\u0001\u0000\u0000\u0000\u07d7\u07da\u0001"+
		"\u0000\u0000\u0000\u07d8\u07d9\u0005\u0115\u0000\u0000\u07d9\u07db\u0003"+
		"*\u0015\u0000\u07da\u07d8\u0001\u0000\u0000\u0000\u07da\u07db\u0001\u0000"+
		"\u0000\u0000\u07db\u07dd\u0001\u0000\u0000\u0000\u07dc\u07de\u0007\u0013"+
		"\u0000\u0000\u07dd\u07dc\u0001\u0000\u0000\u0000\u07dd\u07de\u0001\u0000"+
		"\u0000\u0000\u07de\u00bb\u0001\u0000\u0000\u0000\u07df\u07e0\u0003\u00f4"+
		"z\u0000\u07e0\u07e1\u0005\u0014\u0000\u0000\u07e1\u07e3\u0001\u0000\u0000"+
		"\u0000\u07e2\u07df\u0001\u0000\u0000\u0000\u07e2\u07e3\u0001\u0000\u0000"+
		"\u0000\u07e3\u07e4\u0001\u0000\u0000\u0000\u07e4\u07f0\u0003\u00be_\u0000"+
		"\u07e5\u07f1\u0003^/\u0000\u07e6\u07e7\u0005\u001f\u0000\u0000\u07e7\u07e8"+
		"\u0005\u0095\u0000\u0000\u07e8\u07f1\u0005 \u0000\u0000\u07e9\u07eb\u0005"+
		"\u001f\u0000\u0000\u07ea\u07ec\u0007\u0018\u0000\u0000\u07eb\u07ea\u0001"+
		"\u0000\u0000\u0000\u07eb\u07ec\u0001\u0000\u0000\u0000\u07ec\u07ed\u0001"+
		"\u0000\u0000\u0000\u07ed\u07ee\u0003\u00f4z\u0000\u07ee\u07ef\u0005 \u0000"+
		"\u0000\u07ef\u07f1\u0001\u0000\u0000\u0000\u07f0\u07e5\u0001\u0000\u0000"+
		"\u0000\u07f0\u07e6\u0001\u0000\u0000\u0000\u07f0\u07e9\u0001\u0000\u0000"+
		"\u0000\u07f0\u07f1\u0001\u0000\u0000\u0000\u07f1\u00bd\u0001\u0000\u0000"+
		"\u0000\u07f2\u07f3\u0007\u0019\u0000\u0000\u07f3\u00bf\u0001\u0000\u0000"+
		"\u0000\u07f4\u07f8\u0005\u02dd\u0000\u0000\u07f5\u07f6\u0005M\u0000\u0000"+
		"\u07f6\u07f7\u0005\u0088\u0000\u0000\u07f7\u07f9\u0005\u014b\u0000\u0000"+
		"\u07f8\u07f5\u0001\u0000\u0000\u0000\u07f8\u07f9\u0001\u0000\u0000\u0000"+
		"\u07f9\u07fa\u0001\u0000\u0000\u0000\u07fa\u07fb\u0005\u02df\u0000\u0000"+
		"\u07fb\u00c1\u0001\u0000\u0000\u0000\u07fc\u07fd\u0005R\u0000\u0000\u07fd"+
		"\u07fe\u0005\u001f\u0000\u0000\u07fe\u07ff\u0003b1\u0000\u07ff\u0800\u0005"+
		"`\u0000\u0000\u0800\u0804\u0003\u00bc^\u0000\u0801\u0802\u0005\u001f\u0000"+
		"\u0000\u0802\u0803\u0005\u02e0\u0000\u0000\u0803\u0805\u0005 \u0000\u0000"+
		"\u0804\u0801\u0001\u0000\u0000\u0000\u0804\u0805\u0001\u0000\u0000\u0000"+
		"\u0805\u0806\u0001\u0000\u0000\u0000\u0806\u0807\u0005 \u0000\u0000\u0807"+
		"\u00c3\u0001\u0000\u0000\u0000\u0808\u0809\u0005\u0118\u0000\u0000\u0809"+
		"\u080d\u0003\u00bc^\u0000\u080a\u080b\u0005\u001f\u0000\u0000\u080b\u080c"+
		"\u0005\u02e0\u0000\u0000\u080c\u080e\u0005 \u0000\u0000\u080d\u080a\u0001"+
		"\u0000\u0000\u0000\u080d\u080e\u0001\u0000\u0000\u0000\u080e\u080f\u0001"+
		"\u0000\u0000\u0000\u080f\u0810\u0005%\u0000\u0000\u0810\u0813\u0003b1"+
		"\u0000\u0811\u0812\u0005%\u0000\u0000\u0812\u0814\u0005\u02e0\u0000\u0000"+
		"\u0813\u0811\u0001\u0000\u0000\u0000\u0813\u0814\u0001\u0000\u0000\u0000"+
		"\u0814\u00c5\u0001\u0000\u0000\u0000\u0815\u0816\u0007\u001a\u0000\u0000"+
		"\u0816\u0817\u0005\u001f\u0000\u0000\u0817\u0818\u0003b1\u0000\u0818\u081a"+
		"\u0005 \u0000\u0000\u0819\u081b\u0003\u00c8d\u0000\u081a\u0819\u0001\u0000"+
		"\u0000\u0000\u081a\u081b\u0001\u0000\u0000\u0000\u081b\u081c\u0001\u0000"+
		"\u0000\u0000\u081c\u081d\u0003\u00cae\u0000\u081d\u00c7\u0001\u0000\u0000"+
		"\u0000\u081e\u081f\u0007\u001b\u0000\u0000\u081f\u0820\u0005\u02e9\u0000"+
		"\u0000\u0820\u00c9\u0001\u0000\u0000\u0000\u0821\u0822\u0005\u0138\u0000"+
		"\u0000\u0822\u0824\u0005\u001f\u0000\u0000\u0823\u0825\u0003\u00ccf\u0000"+
		"\u0824\u0823\u0001\u0000\u0000\u0000\u0824\u0825\u0001\u0000\u0000\u0000"+
		"\u0825\u0827\u0001\u0000\u0000\u0000\u0826\u0828\u0003\u00b8\\\u0000\u0827"+
		"\u0826\u0001\u0000\u0000\u0000\u0827\u0828\u0001\u0000\u0000\u0000\u0828"+
		"\u082a\u0001\u0000\u0000\u0000\u0829\u082b\u0003\u00ceg\u0000\u082a\u0829"+
		"\u0001\u0000\u0000\u0000\u082a\u082b\u0001\u0000\u0000\u0000\u082b\u082c"+
		"\u0001\u0000\u0000\u0000\u082c\u082d\u0005 \u0000\u0000\u082d\u00cb\u0001"+
		"\u0000\u0000\u0000\u082e\u082f\u0005\u00fc\u0000\u0000\u082f\u0830\u0005"+
		"w\u0000\u0000\u0830\u0835\u0003b1\u0000\u0831\u0832\u0005%\u0000\u0000"+
		"\u0832\u0834\u0003b1\u0000\u0833\u0831\u0001\u0000\u0000\u0000\u0834\u0837"+
		"\u0001\u0000\u0000\u0000\u0835\u0833\u0001\u0000\u0000\u0000\u0835\u0836"+
		"\u0001\u0000\u0000\u0000\u0836\u00cd\u0001\u0000\u0000\u0000\u0837\u0835"+
		"\u0001\u0000\u0000\u0000\u0838\u0839\u0007\u001c\u0000\u0000\u0839\u083a"+
		"\u0003\u00d0h\u0000\u083a\u00cf\u0001\u0000\u0000\u0000\u083b\u083e\u0003"+
		"\u00d6k\u0000\u083c\u083e\u0003\u00d2i\u0000\u083d\u083b\u0001\u0000\u0000"+
		"\u0000\u083d\u083c\u0001\u0000\u0000\u0000\u083e\u00d1\u0001\u0000\u0000"+
		"\u0000\u083f\u0840\u0005p\u0000\u0000\u0840\u0841\u0003\u00d4j\u0000\u0841"+
		"\u0842\u0005h\u0000\u0000\u0842\u0843\u0003\u00d4j\u0000\u0843\u00d3\u0001"+
		"\u0000\u0000\u0000\u0844\u0847\u0003\u00d6k\u0000\u0845\u0847\u0003\u00d8"+
		"l\u0000\u0846\u0844\u0001\u0000\u0000\u0000\u0846\u0845\u0001\u0000\u0000"+
		"\u0000\u0847\u00d5\u0001\u0000\u0000\u0000\u0848\u0849\u0005\u012e\u0000"+
		"\u0000\u0849\u084f\u0005\u013d\u0000\u0000\u084a\u084b\u0005\u02e0\u0000"+
		"\u0000\u084b\u084f\u0005\u013d\u0000\u0000\u084c\u084d\u0005\u009b\u0000"+
		"\u0000\u084d\u084f\u0005\u00ff\u0000\u0000\u084e\u0848\u0001\u0000\u0000"+
		"\u0000\u084e\u084a\u0001\u0000\u0000\u0000\u084e\u084c\u0001\u0000\u0000"+
		"\u0000\u084f\u00d7\u0001\u0000\u0000\u0000\u0850\u0851\u0005\u012e\u0000"+
		"\u0000\u0851\u0857\u0005\u0128\u0000\u0000\u0852\u0853\u0005\u02e0\u0000"+
		"\u0000\u0853\u0857\u0005\u0128\u0000\u0000\u0854\u0855\u0005\u009b\u0000"+
		"\u0000\u0855\u0857\u0005\u00ff\u0000\u0000\u0856\u0850\u0001\u0000\u0000"+
		"\u0000\u0856\u0852\u0001\u0000\u0000\u0000\u0856\u0854\u0001\u0000\u0000"+
		"\u0000\u0857\u00d9\u0001\u0000\u0000\u0000\u0858\u085a\u0003H$\u0000\u0859"+
		"\u085b\u0007\u0013\u0000\u0000\u085a\u0859\u0001\u0000\u0000\u0000\u085a"+
		"\u085b\u0001\u0000\u0000\u0000\u085b\u00db\u0001\u0000\u0000\u0000\u085c"+
		"\u085d\u0005\u0127\u0000\u0000\u085d\u085e\u0005\u0018\u0000\u0000\u085e"+
		"\u086a\u0005\u02e0\u0000\u0000\u085f\u086a\u0003\u00e2q\u0000\u0860\u0861"+
		"\u0007\u001d\u0000\u0000\u0861\u086a\u0003\u00e0p\u0000\u0862\u0863\u0005"+
		"\u0132\u0000\u0000\u0863\u0864\u0005\u0018\u0000\u0000\u0864\u086a\u0005"+
		"\u02e0\u0000\u0000\u0865\u0867\u0003\u00deo\u0000\u0866\u0868\u0003\u00e8"+
		"t\u0000\u0867\u0866\u0001\u0000\u0000\u0000\u0867\u0868\u0001\u0000\u0000"+
		"\u0000\u0868\u086a\u0001\u0000\u0000\u0000\u0869\u085c\u0001\u0000\u0000"+
		"\u0000\u0869\u085f\u0001\u0000\u0000\u0000\u0869\u0860\u0001\u0000\u0000"+
		"\u0000\u0869\u0862\u0001\u0000\u0000\u0000\u0869\u0865\u0001\u0000\u0000"+
		"\u0000\u086a\u00dd\u0001\u0000\u0000\u0000\u086b\u086c\u0005\u01a4\u0000"+
		"\u0000\u086c\u086d\u0005\u0018\u0000\u0000\u086d\u086e\u0007\u001e\u0000"+
		"\u0000\u086e\u00df\u0001\u0000\u0000\u0000\u086f\u0870\u0005\u0018\u0000"+
		"\u0000\u0870\u0872\u0005\u02e0\u0000\u0000\u0871\u0873\u0005\u011d\u0000"+
		"\u0000\u0872\u0871\u0001\u0000\u0000\u0000\u0872\u0873\u0001\u0000\u0000"+
		"\u0000\u0873\u00e1\u0001\u0000\u0000\u0000\u0874\u0875\u0003\u00e4r\u0000"+
		"\u0875\u0876\u0003\u00e6s\u0000\u0876\u00e3\u0001\u0000\u0000\u0000\u0877"+
		"\u0878\u0007\u001f\u0000\u0000\u0878\u00e5\u0001\u0000\u0000\u0000\u0879"+
		"\u087a\u0005\u0018\u0000\u0000\u087a\u087b\u0007\u0000\u0000\u0000\u087b"+
		"\u00e7\u0001\u0000\u0000\u0000\u087c\u087d\u0005a\u0000\u0000\u087d\u087e"+
		"\u0005\u00fd\u0000\u0000\u087e\u087f\u0005\u001f\u0000\u0000\u087f\u0880"+
		"\u0003\u00eau\u0000\u0880\u0881\u0005 \u0000\u0000\u0881\u00e9\u0001\u0000"+
		"\u0000\u0000\u0882\u0887\u0003\u00ecv\u0000\u0883\u0884\u0005%\u0000\u0000"+
		"\u0884\u0886\u0003\u00ecv\u0000\u0885\u0883\u0001\u0000\u0000\u0000\u0886"+
		"\u0889\u0001\u0000\u0000\u0000\u0887\u0885\u0001\u0000\u0000\u0000\u0887"+
		"\u0888\u0001\u0000\u0000\u0000\u0888\u00eb\u0001\u0000\u0000\u0000\u0889"+
		"\u0887\u0001\u0000\u0000\u0000\u088a\u088d\u0005\u02e0\u0000\u0000\u088b"+
		"\u088d\u0003\u00eew\u0000\u088c\u088a\u0001\u0000\u0000\u0000\u088c\u088b"+
		"\u0001\u0000\u0000\u0000\u088d\u00ed\u0001\u0000\u0000\u0000\u088e\u088f"+
		"\u0005\u02e0\u0000\u0000\u088f\u0890\u0005g\u0000\u0000\u0890\u0891\u0005"+
		"\u02e0\u0000\u0000\u0891\u00ef\u0001\u0000\u0000\u0000\u0892\u0893\u0005"+
		"\u01aa\u0000\u0000\u0893\u0894\u0005\u001f\u0000\u0000\u0894\u0895\u0005"+
		"\u01b3\u0000\u0000\u0895\u0896\u0005\u0018\u0000\u0000\u0896\u0898\u0005"+
		"\u02e0\u0000\u0000\u0897\u0899\u0005\u011d\u0000\u0000\u0898\u0897\u0001"+
		"\u0000\u0000\u0000\u0898\u0899\u0001\u0000\u0000\u0000\u0899\u089a\u0001"+
		"\u0000\u0000\u0000\u089a\u089b\u0005%\u0000\u0000\u089b\u089c\u0005\u019a"+
		"\u0000\u0000\u089c\u089d\u0005\u0018\u0000\u0000\u089d\u089e\u0007 \u0000"+
		"\u0000\u089e\u089f\u0005 \u0000\u0000\u089f\u00f1\u0001\u0000\u0000\u0000"+
		"\u08a0\u08a5\u0005a\u0000\u0000\u08a1\u08a2\u0005\u001f\u0000\u0000\u08a2"+
		"\u08a3\u0003\u00f0x\u0000\u08a3\u08a4\u0005 \u0000\u0000\u08a4\u08a6\u0001"+
		"\u0000\u0000\u0000\u08a5\u08a1\u0001\u0000\u0000\u0000\u08a5\u08a6\u0001"+
		"\u0000\u0000\u0000\u08a6\u00f3\u0001\u0000\u0000\u0000\u08a7\u08a8\u0005"+
		"\u02dd\u0000\u0000\u08a8\u00f5\u0001\u0000\u0000\u0000\u08a9\u08ae\u0003"+
		"\u00f4z\u0000\u08aa\u08ab\u0005%\u0000\u0000\u08ab\u08ad\u0003\u00f4z"+
		"\u0000\u08ac\u08aa\u0001\u0000\u0000\u0000\u08ad\u08b0\u0001\u0000\u0000"+
		"\u0000\u08ae\u08ac\u0001\u0000\u0000\u0000\u08ae\u08af\u0001\u0000\u0000"+
		"\u0000\u08af\u00f7\u0001\u0000\u0000\u0000\u08b0\u08ae\u0001\u0000\u0000"+
		"\u0000\u08b1\u08b2\u0005\u0001\u0000\u0000\u08b2\u00f9\u0001\u0000\u0000"+
		"\u0000\u08b3\u08b4\u0003*\u0015\u0000\u08b4\u00fb\u0001\u0000\u0000\u0000"+
		"\u08b5\u08b6\u0007!\u0000\u0000\u08b6\u08bb\u0005`\u0000\u0000\u08b7\u08bc"+
		"\u0005\u0217\u0000\u0000\u08b8\u08bc\u0005\u0146\u0000\u0000\u08b9\u08bc"+
		"\u0005\u021c\u0000\u0000\u08ba\u08bc\u0003\u001c\u000e\u0000\u08bb\u08b7"+
		"\u0001\u0000\u0000\u0000\u08bb\u08b8\u0001\u0000\u0000\u0000\u08bb\u08b9"+
		"\u0001\u0000\u0000\u0000\u08bb\u08ba\u0001\u0000\u0000\u0000\u08bc\u00fd"+
		"\u0001\u0000\u0000\u0000\u08bd\u08be\u0003*\u0015\u0000\u08be\u00ff\u0001"+
		"\u0000\u0000\u0000\u08bf\u08c0\u0003\u00fa}\u0000\u08c0\u0101\u0001\u0000"+
		"\u0000\u0000\u08c1\u08c2\u0003*\u0015\u0000\u08c2\u0103\u0001\u0000\u0000"+
		"\u0000\u08c3\u08c4\u0003\u00fa}\u0000\u08c4\u0105\u0001\u0000\u0000\u0000"+
		"\u08c5\u08c6\u0007\"\u0000\u0000\u08c6\u0107\u0001\u0000\u0000\u0000\u08c7"+
		"\u08c8\u0005c\u0000\u0000\u08c8\u08c9\u0005o\u0000\u0000\u08c9\u0109\u0001"+
		"\u0000\u0000\u0000\u08ca\u08cb\u0007#\u0000\u0000\u08cb\u010b\u0001\u0000"+
		"\u0000\u0000\u08cc\u08cd\u0005\u02d8\u0000\u0000\u08cd\u08d0\u0005\u001f"+
		"\u0000\u0000\u08ce\u08d1\u0003\u0114\u008a\u0000\u08cf\u08d1\u0003\u010e"+
		"\u0087\u0000\u08d0\u08ce\u0001\u0000\u0000\u0000\u08d0\u08cf\u0001\u0000"+
		"\u0000\u0000\u08d1\u08d2\u0001\u0000\u0000\u0000\u08d2\u08d3\u0005 \u0000"+
		"\u0000\u08d3\u010d\u0001\u0000\u0000\u0000\u08d4\u08d6\u0003\u0110\u0088"+
		"\u0000\u08d5\u08d4\u0001\u0000\u0000\u0000\u08d6\u08d9\u0001\u0000\u0000"+
		"\u0000\u08d7\u08d5\u0001\u0000\u0000\u0000\u08d7\u08d8\u0001\u0000\u0000"+
		"\u0000\u08d8\u08de\u0001\u0000\u0000\u0000\u08d9\u08d7\u0001\u0000\u0000"+
		"\u0000\u08da\u08db\u0005h\u0000\u0000\u08db\u08dd\u0003\u010e\u0087\u0000"+
		"\u08dc\u08da\u0001\u0000\u0000\u0000\u08dd\u08e0\u0001\u0000\u0000\u0000"+
		"\u08de\u08dc\u0001\u0000\u0000\u0000\u08de\u08df\u0001\u0000\u0000\u0000"+
		"\u08df\u010f\u0001\u0000\u0000\u0000\u08e0\u08de\u0001\u0000\u0000\u0000"+
		"\u08e1\u08e6\u0003\u0112\u0089\u0000\u08e2\u08e6\u0003\u0124\u0092\u0000"+
		"\u08e3\u08e6\u0003\u0120\u0090\u0000\u08e4\u08e6\u0003\u011e\u008f\u0000"+
		"\u08e5\u08e1\u0001\u0000\u0000\u0000\u08e5\u08e2\u0001\u0000\u0000\u0000"+
		"\u08e5\u08e3\u0001\u0000\u0000\u0000\u08e5\u08e4\u0001\u0000\u0000\u0000"+
		"\u08e6\u0111\u0001\u0000\u0000\u0000\u08e7\u08e8\u0005\u02d9\u0000\u0000"+
		"\u08e8\u08e9\u0005\u001f\u0000\u0000\u08e9\u08ea\u0003\u0124\u0092\u0000"+
		"\u08ea\u08eb\u0005 \u0000\u0000\u08eb\u0113\u0001\u0000\u0000\u0000\u08ec"+
		"\u08ed\u0005\u02da\u0000\u0000\u08ed\u08ee\u0005\u001f\u0000\u0000\u08ee"+
		"\u08ef\u0003\u0116\u008b\u0000\u08ef\u08f4\u0005 \u0000\u0000\u08f0\u08f1"+
		"\u0005h\u0000\u0000\u08f1\u08f3\u0003\u0116\u008b\u0000\u08f2\u08f0\u0001"+
		"\u0000\u0000\u0000\u08f3\u08f6\u0001\u0000\u0000\u0000\u08f4\u08f2\u0001"+
		"\u0000\u0000\u0000\u08f4\u08f5\u0001\u0000\u0000\u0000\u08f5\u0115\u0001"+
		"\u0000\u0000\u0000\u08f6\u08f4\u0001\u0000\u0000\u0000\u08f7\u08fe\u0003"+
		"\u0118\u008c\u0000\u08f8\u08fa\u0005h\u0000\u0000\u08f9\u08f8\u0001\u0000"+
		"\u0000\u0000\u08f9\u08fa\u0001\u0000\u0000\u0000\u08fa\u08fb\u0001\u0000"+
		"\u0000\u0000\u08fb\u08fd\u0003\u0118\u008c\u0000\u08fc\u08f9\u0001\u0000"+
		"\u0000\u0000\u08fd\u0900\u0001\u0000\u0000\u0000\u08fe\u08fc\u0001\u0000"+
		"\u0000\u0000\u08fe\u08ff\u0001\u0000\u0000\u0000\u08ff\u0117\u0001\u0000"+
		"\u0000\u0000\u0900\u08fe\u0001\u0000\u0000\u0000\u0901\u0904\u0003\u0112"+
		"\u0089\u0000\u0902\u0904\u0003@ \u0000\u0903\u0901\u0001\u0000\u0000\u0000"+
		"\u0903\u0902\u0001\u0000\u0000\u0000\u0904\u0906\u0001\u0000\u0000\u0000"+
		"\u0905\u0907\u0005\u001f\u0000\u0000\u0906\u0905\u0001\u0000\u0000\u0000"+
		"\u0906\u0907\u0001\u0000\u0000\u0000\u0907\u0909\u0001\u0000\u0000\u0000"+
		"\u0908\u090a\u0003\u011a\u008d\u0000\u0909\u0908\u0001\u0000\u0000\u0000"+
		"\u090a\u090b\u0001\u0000\u0000\u0000\u090b\u0909\u0001\u0000\u0000\u0000"+
		"\u090b\u090c\u0001\u0000\u0000\u0000\u090c\u090e\u0001\u0000\u0000\u0000"+
		"\u090d\u090f\u0005 \u0000\u0000\u090e\u090d\u0001\u0000\u0000\u0000\u090e"+
		"\u090f\u0001\u0000\u0000\u0000\u090f\u0911\u0001\u0000\u0000\u0000\u0910"+
		"\u0912\u0003\u0122\u0091\u0000\u0911\u0910\u0001\u0000\u0000\u0000\u0911"+
		"\u0912\u0001\u0000\u0000\u0000\u0912\u0920\u0001\u0000\u0000\u0000\u0913"+
		"\u0915\u0005\u001f\u0000\u0000\u0914\u0916\u0003\u011a\u008d\u0000\u0915"+
		"\u0914\u0001\u0000\u0000\u0000\u0916\u0917\u0001\u0000\u0000\u0000\u0917"+
		"\u0915\u0001\u0000\u0000\u0000\u0917\u0918\u0001\u0000\u0000\u0000\u0918"+
		"\u0919\u0001\u0000\u0000\u0000\u0919\u091a\u0005 \u0000\u0000\u091a\u091d"+
		"\u0003\u0122\u0091\u0000\u091b\u091e\u0003\u0112\u0089\u0000\u091c\u091e"+
		"\u0003@ \u0000\u091d\u091b\u0001\u0000\u0000\u0000\u091d\u091c\u0001\u0000"+
		"\u0000\u0000\u091e\u0920\u0001\u0000\u0000\u0000\u091f\u0903\u0001\u0000"+
		"\u0000\u0000\u091f\u0913\u0001\u0000\u0000\u0000\u0920\u0119\u0001\u0000"+
		"\u0000\u0000\u0921\u0922\u0003\u0124\u0092\u0000\u0922\u0923\u0003\u011c"+
		"\u008e\u0000\u0923\u0928\u0001\u0000\u0000\u0000\u0924\u0925\u0003\u011c"+
		"\u008e\u0000\u0925\u0926\u0003\u0124\u0092\u0000\u0926\u0928\u0001\u0000"+
		"\u0000\u0000\u0927\u0921\u0001\u0000\u0000\u0000\u0927\u0924\u0001\u0000"+
		"\u0000\u0000\u0928\u011b\u0001\u0000\u0000\u0000\u0929\u092a\u0005\u001c"+
		"\u0000\u0000\u092a\u092b\u0005\u0010\u0000\u0000\u092b\u092c\u0005\u001f"+
		"\u0000\u0000\u092c\u092d\u0003\u0126\u0093\u0000\u092d\u092e\u0005 \u0000"+
		"\u0000\u092e\u092f\u0005\u0010\u0000\u0000\u092f\u0938\u0001\u0000\u0000"+
		"\u0000\u0930\u0931\u0005\u0010\u0000\u0000\u0931\u0932\u0005\u001f\u0000"+
		"\u0000\u0932\u0933\u0003\u0126\u0093\u0000\u0933\u0934\u0005 \u0000\u0000"+
		"\u0934\u0935\u0005\u0010\u0000\u0000\u0935\u0936\u0005\u001a\u0000\u0000"+
		"\u0936\u0938\u0001\u0000\u0000\u0000\u0937\u0929\u0001\u0000\u0000\u0000"+
		"\u0937\u0930\u0001\u0000\u0000\u0000\u0938\u011d\u0001\u0000\u0000\u0000"+
		"\u0939\u093a\u0005\u0010\u0000\u0000\u093a\u093b\u0005\u001f\u0000\u0000"+
		"\u093b\u093c\u0003\u0126\u0093\u0000\u093c\u093d\u0005 \u0000\u0000\u093d"+
		"\u093e\u0005\u0010\u0000\u0000\u093e\u093f\u0005\u001a\u0000\u0000\u093f"+
		"\u011f\u0001\u0000\u0000\u0000\u0940\u0941\u0005\u001c\u0000\u0000\u0941"+
		"\u0942\u0005\u0010\u0000\u0000\u0942\u0943\u0005\u001f\u0000\u0000\u0943"+
		"\u0944\u0003\u0126\u0093\u0000\u0944\u0945\u0005 \u0000\u0000\u0945\u0946"+
		"\u0005\u0010\u0000\u0000\u0946\u0121\u0001\u0000\u0000\u0000\u0947\u094e"+
		"\u0005\u000f\u0000\u0000\u0948\u0949\u0005!\u0000\u0000\u0949\u094a\u0005"+
		"\u02e0\u0000\u0000\u094a\u094b\u0005%\u0000\u0000\u094b\u094c\u0005\u02e0"+
		"\u0000\u0000\u094c\u094e\u0005\"\u0000\u0000\u094d\u0947\u0001\u0000\u0000"+
		"\u0000\u094d\u0948\u0001\u0000\u0000\u0000\u094e\u0123\u0001\u0000\u0000"+
		"\u0000\u094f\u0950\u0003@ \u0000\u0950\u0125\u0001\u0000\u0000\u0000\u0951"+
		"\u0952\u0003@ \u0000\u0952\u0127\u0001\u0000\u0000\u0000\u0953\u0954\u0005"+
		"\u009e\u0000\u0000\u0954\u0129\u0001\u0000\u0000\u0000\u0955\u0957\u0005"+
		"\u02a2\u0000\u0000\u0956\u0958\u0005\u02a3\u0000\u0000\u0957\u0956\u0001"+
		"\u0000\u0000\u0000\u0957\u0958\u0001\u0000\u0000\u0000\u0958\u0959\u0001"+
		"\u0000\u0000\u0000\u0959\u095a\u0003\u012c\u0096\u0000\u095a\u012b\u0001"+
		"\u0000\u0000\u0000\u095b\u0961\u0003\u031e\u018f\u0000\u095c\u0961\u0003"+
		"\u02ec\u0176\u0000\u095d\u0961\u0003\u030a\u0185\u0000\u095e\u0961\u0003"+
		"\u0314\u018a\u0000\u095f\u0961\u0003\u02e2\u0171\u0000\u0960\u095b\u0001"+
		"\u0000\u0000\u0000\u0960\u095c\u0001\u0000\u0000\u0000\u0960\u095d\u0001"+
		"\u0000\u0000\u0000\u0960\u095e\u0001\u0000\u0000\u0000\u0960\u095f\u0001"+
		"\u0000\u0000\u0000\u0961\u012d\u0001\u0000\u0000\u0000\u0962\u0965\u0003"+
		"\u0130\u0098\u0000\u0963\u0965\u0003\u02e2\u0171\u0000\u0964\u0962\u0001"+
		"\u0000\u0000\u0000\u0964\u0963\u0001\u0000\u0000\u0000\u0965\u012f\u0001"+
		"\u0000\u0000\u0000\u0966\u0967\u00052\u0000\u0000\u0967\u0968\u0005;\u0000"+
		"\u0000\u0968\u0969\u0003@ \u0000\u0969\u096a\u0003\u017a\u00bd\u0000\u096a"+
		"\u096b\u0003\u017c\u00be\u0000\u096b\u0131\u0001\u0000\u0000\u0000\u096c"+
		"\u096d\u00052\u0000\u0000\u096d\u096e\u0003\u01ee\u00f7\u0000\u096e\u096f"+
		"\u0005>\u0000\u0000\u096f\u0970\u0003V+\u0000\u0970\u0971\u0005a\u0000"+
		"\u0000\u0971\u0972\u0003@ \u0000\u0972\u0973\u0003R)\u0000\u0973\u0974"+
		"\u0003\u0294\u014a\u0000\u0974\u0133\u0001\u0000\u0000\u0000\u0975\u0976"+
		"\u00052\u0000\u0000\u0976\u0977\u0005\u00cc\u0000\u0000\u0977\u0978\u0003"+
		"2\u0019\u0000\u0978\u0979\u0003\u0236\u011b\u0000\u0979\u0135\u0001\u0000"+
		"\u0000\u0000\u097a\u097d\u00052\u0000\u0000\u097b\u097c\u0005i\u0000\u0000"+
		"\u097c\u097e\u00053\u0000\u0000\u097d\u097b\u0001\u0000\u0000\u0000\u097d"+
		"\u097e\u0001\u0000\u0000\u0000\u097e\u097f\u0001\u0000\u0000\u0000\u097f"+
		"\u0980\u0005F\u0000\u0000\u0980\u0981\u00036\u001b\u0000\u0981\u0982\u0003"+
		"\u0262\u0131\u0000\u0982\u0983\u0003\u0264\u0132\u0000\u0983\u0137\u0001"+
		"\u0000\u0000\u0000\u0984\u0987\u00052\u0000\u0000\u0985\u0986\u0005i\u0000"+
		"\u0000\u0986\u0988\u00053\u0000\u0000\u0987\u0985\u0001\u0000\u0000\u0000"+
		"\u0987\u0988\u0001\u0000\u0000\u0000\u0988\u0989\u0001\u0000\u0000\u0000"+
		"\u0989\u098a\u0007$\u0000\u0000\u098a\u098b\u00038\u001c\u0000\u098b\u098c"+
		"\u0003\u0274\u013a\u0000\u098c\u098d\u0003\u0278\u013c\u0000\u098d\u0139"+
		"\u0001\u0000\u0000\u0000\u098e\u0991\u00052\u0000\u0000\u098f\u0990\u0005"+
		"i\u0000\u0000\u0990\u0992\u00053\u0000\u0000\u0991\u098f\u0001\u0000\u0000"+
		"\u0000\u0991\u0992\u0001\u0000\u0000\u0000\u0992\u0993\u0001\u0000\u0000"+
		"\u0000\u0993\u0994\u0005J\u0000\u0000\u0994\u0995\u0003:\u001d\u0000\u0995"+
		"\u0996\u0003\u0282\u0141\u0000\u0996\u013b\u0001\u0000\u0000\u0000\u0997"+
		"\u099a\u00052\u0000\u0000\u0998\u0999\u0005i\u0000\u0000\u0999\u099b\u0005"+
		"3\u0000\u0000\u099a\u0998\u0001\u0000\u0000\u0000\u099a\u099b\u0001\u0000"+
		"\u0000\u0000\u099b\u099c\u0001\u0000\u0000\u0000\u099c\u099d\u0005G\u0000"+
		"\u0000\u099d\u099e\u0003<\u001e\u0000\u099e\u099f\u0005a\u0000\u0000\u099f"+
		"\u09a0\u0003\u0290\u0148\u0000\u09a0\u09a1\u0003\u028a\u0145\u0000\u09a1"+
		"\u013d\u0001\u0000\u0000\u0000\u09a2\u09a3\u00052\u0000\u0000\u09a3\u09a4"+
		"\u0005\u0199\u0000\u0000\u09a4\u09a8\u0003>\u001f\u0000\u09a5\u09a7\u0003"+
		"\u0292\u0149\u0000\u09a6\u09a5\u0001\u0000\u0000\u0000\u09a7\u09aa\u0001"+
		"\u0000\u0000\u0000\u09a8\u09a6\u0001\u0000\u0000\u0000\u09a8\u09a9\u0001"+
		"\u0000\u0000\u0000\u09a9\u013f\u0001\u0000\u0000\u0000\u09aa\u09a8\u0001"+
		"\u0000\u0000\u0000\u09ab\u09ac\u00052\u0000\u0000\u09ac\u09ad\u0005\u0178"+
		"\u0000\u0000\u09ad\u09b0\u0003F#\u0000\u09ae\u09af\u0005\u02a0\u0000\u0000"+
		"\u09af\u09b1\u0005\u02df\u0000\u0000\u09b0\u09ae\u0001\u0000\u0000\u0000"+
		"\u09b0\u09b1\u0001\u0000\u0000\u0000\u09b1\u09b2\u0001\u0000\u0000\u0000"+
		"\u09b2\u09b3\u0005a\u0000\u0000\u09b3\u09b4\u0005\u018c\u0000\u0000\u09b4"+
		"\u09b6\u0003B!\u0000\u09b5\u09b7\u0003\u02d8\u016c\u0000\u09b6\u09b5\u0001"+
		"\u0000\u0000\u0000\u09b6\u09b7\u0001\u0000\u0000\u0000\u09b7\u0141\u0001"+
		"\u0000\u0000\u0000\u09b8\u09b9\u00052\u0000\u0000\u09b9\u09ba\u00056\u0000"+
		"\u0000\u09ba\u09be\u0003\u02de\u016f\u0000\u09bb\u09bd\u0003\u02e0\u0170"+
		"\u0000\u09bc\u09bb\u0001\u0000\u0000\u0000\u09bd\u09c0\u0001\u0000\u0000"+
		"\u0000\u09be\u09bc\u0001\u0000\u0000\u0000\u09be\u09bf\u0001\u0000\u0000"+
		"\u0000\u09bf\u0143\u0001\u0000\u0000\u0000\u09c0\u09be\u0001\u0000\u0000"+
		"\u0000\u09c1\u09c2\u00053\u0000\u0000\u09c2\u09c3\u0005;\u0000\u0000\u09c3"+
		"\u09c4\u0003@ \u0000\u09c4\u09c9\u0003\u01f0\u00f8\u0000\u09c5\u09c6\u0005"+
		"%\u0000\u0000\u09c6\u09c8\u0003\u01f0\u00f8\u0000\u09c7\u09c5\u0001\u0000"+
		"\u0000\u0000\u09c8\u09cb\u0001\u0000\u0000\u0000\u09c9\u09c7\u0001\u0000"+
		"\u0000\u0000\u09c9\u09ca\u0001\u0000\u0000\u0000\u09ca\u0145\u0001\u0000"+
		"\u0000\u0000\u09cb\u09c9\u0001\u0000\u0000\u0000\u09cc\u09cd\u00053\u0000"+
		"\u0000\u09cd\u09d0\u0005>\u0000\u0000\u09ce\u09d1\u0003V+\u0000\u09cf"+
		"\u09d1\u0005r\u0000\u0000\u09d0\u09ce\u0001\u0000\u0000\u0000\u09d0\u09cf"+
		"\u0001\u0000\u0000\u0000\u09d1\u09d2\u0001\u0000\u0000\u0000\u09d2\u09d3"+
		"\u0005a\u0000\u0000\u09d3\u09d4\u0003@ \u0000\u09d4\u09d5\u0003\u029a"+
		"\u014d\u0000\u09d5\u0147\u0001\u0000\u0000\u0000\u09d6\u09d7\u00053\u0000"+
		"\u0000\u09d7\u09da\u0005\u00cc\u0000\u0000\u09d8\u09db\u00032\u0019\u0000"+
		"\u09d9\u09db\u0005\u009b\u0000\u0000\u09da\u09d8\u0001\u0000\u0000\u0000"+
		"\u09da\u09d9\u0001\u0000\u0000\u0000\u09db\u09df\u0001\u0000\u0000\u0000"+
		"\u09dc\u09de\u0003\u02a6\u0153\u0000\u09dd\u09dc\u0001\u0000\u0000\u0000"+
		"\u09de\u09e1\u0001\u0000\u0000\u0000\u09df\u09dd\u0001\u0000\u0000\u0000"+
		"\u09df\u09e0\u0001\u0000\u0000\u0000\u09e0\u0149\u0001\u0000\u0000\u0000"+
		"\u09e1\u09df\u0001\u0000\u0000\u0000\u09e2\u09e3\u00053\u0000\u0000\u09e3"+
		"\u09e4\u0007$\u0000\u0000\u09e4\u09e5\u00038\u001c\u0000\u09e5\u09e6\u0003"+
		"\u0274\u013a\u0000\u09e6\u09e7\u0003\u0278\u013c\u0000\u09e7\u014b\u0001"+
		"\u0000\u0000\u0000\u09e8\u09e9\u00053\u0000\u0000\u09e9\u09ea\u0005F\u0000"+
		"\u0000\u09ea\u09eb\u00036\u001b\u0000\u09eb\u09ec\u0003\u0262\u0131\u0000"+
		"\u09ec\u09ed\u0003\u0264\u0132\u0000\u09ed\u014d\u0001\u0000\u0000\u0000"+
		"\u09ee\u09ef\u00053\u0000\u0000\u09ef\u09f0\u0005J\u0000\u0000\u09f0\u09f1"+
		"\u0003:\u001d\u0000\u09f1\u09f2\u0003\u0282\u0141\u0000\u09f2\u014f\u0001"+
		"\u0000\u0000\u0000\u09f3\u09f4\u00053\u0000\u0000\u09f4\u09f5\u0005G\u0000"+
		"\u0000\u09f5\u09f6\u0003<\u001e\u0000\u09f6\u09f7\u0005a\u0000\u0000\u09f7"+
		"\u09f8\u0003\u0290\u0148\u0000\u09f8\u09f9\u0003\u028a\u0145\u0000\u09f9"+
		"\u0151\u0001\u0000\u0000\u0000\u09fa\u09fb\u00053\u0000\u0000\u09fb\u09fc"+
		"\u0005\u0199\u0000\u0000\u09fc\u0a00\u0003>\u001f\u0000\u09fd\u09ff\u0003"+
		"\u0292\u0149\u0000\u09fe\u09fd\u0001\u0000\u0000\u0000\u09ff\u0a02\u0001"+
		"\u0000\u0000\u0000\u0a00\u09fe\u0001\u0000\u0000\u0000\u0a00\u0a01\u0001"+
		"\u0000\u0000\u0000\u0a01\u0153\u0001\u0000\u0000\u0000\u0a02\u0a00\u0001"+
		"\u0000\u0000\u0000\u0a03\u0a04\u00053\u0000\u0000\u0a04\u0a05\u0005\u0178"+
		"\u0000\u0000\u0a05\u0a09\u0003F#\u0000\u0a06\u0a07\u0005a\u0000\u0000"+
		"\u0a07\u0a08\u0005\u018c\u0000\u0000\u0a08\u0a0a\u0003B!\u0000\u0a09\u0a06"+
		"\u0001\u0000\u0000\u0000\u0a09\u0a0a\u0001\u0000\u0000\u0000\u0a0a\u0a0c"+
		"\u0001\u0000\u0000\u0000\u0a0b\u0a0d\u0003\u02da\u016d\u0000\u0a0c\u0a0b"+
		"\u0001\u0000\u0000\u0000\u0a0c\u0a0d\u0001\u0000\u0000\u0000\u0a0d\u0155"+
		"\u0001\u0000\u0000\u0000\u0a0e\u0a0f\u00053\u0000\u0000\u0a0f\u0a10\u0005"+
		"6\u0000\u0000\u0a10\u0a11\u00034\u001a\u0000\u0a11\u0a13\u0005\u02a1\u0000"+
		"\u0000\u0a12\u0a14\u0003\u03d0\u01e8\u0000\u0a13\u0a12\u0001\u0000\u0000"+
		"\u0000\u0a13\u0a14\u0001\u0000\u0000\u0000\u0a14\u0a15\u0001\u0000\u0000"+
		"\u0000\u0a15\u0a16\u0003\u0158\u00ac\u0000\u0a16\u0157\u0001\u0000\u0000"+
		"\u0000\u0a17\u0a1a\u0003*\u0015\u0000\u0a18\u0a19\u0005\u0014\u0000\u0000"+
		"\u0a19\u0a1b\u0003*\u0015\u0000\u0a1a\u0a18\u0001\u0000\u0000\u0000\u0a1a"+
		"\u0a1b\u0001\u0000\u0000\u0000\u0a1b\u0159\u0001\u0000\u0000\u0000\u0a1c"+
		"\u0a1d\u00054\u0000\u0000\u0a1d\u0a1f\u0005;\u0000\u0000\u0a1e\u0a20\u0003"+
		"\u0108\u0084\u0000\u0a1f\u0a1e\u0001\u0000\u0000\u0000\u0a1f\u0a20\u0001"+
		"\u0000\u0000\u0000\u0a20\u0a21\u0001\u0000\u0000\u0000\u0a21\u0a22\u0003"+
		"T*\u0000\u0a22\u015b\u0001\u0000\u0000\u0000\u0a23\u0a24\u00054\u0000"+
		"\u0000\u0a24\u0a26\u0005>\u0000\u0000\u0a25\u0a27\u0003\u0108\u0084\u0000"+
		"\u0a26\u0a25\u0001\u0000\u0000\u0000\u0a26\u0a27\u0001\u0000\u0000\u0000"+
		"\u0a27\u0a28\u0001\u0000\u0000\u0000\u0a28\u0a29\u0003V+\u0000\u0a29\u0a2a"+
		"\u0005a\u0000\u0000\u0a2a\u0a2b\u0003@ \u0000\u0a2b\u015d\u0001\u0000"+
		"\u0000\u0000\u0a2c\u0a2d\u00054\u0000\u0000\u0a2d\u0a2f\u0005\u00cc\u0000"+
		"\u0000\u0a2e\u0a30\u0003\u0108\u0084\u0000\u0a2f\u0a2e\u0001\u0000\u0000"+
		"\u0000\u0a2f\u0a30\u0001\u0000\u0000\u0000\u0a30\u0a31\u0001\u0000\u0000"+
		"\u0000\u0a31\u0a36\u00032\u0019\u0000\u0a32\u0a33\u0005%\u0000\u0000\u0a33"+
		"\u0a35\u00032\u0019\u0000\u0a34\u0a32\u0001\u0000\u0000\u0000\u0a35\u0a38"+
		"\u0001\u0000\u0000\u0000\u0a36\u0a34\u0001\u0000\u0000\u0000\u0a36\u0a37"+
		"\u0001\u0000\u0000\u0000\u0a37\u015f\u0001\u0000\u0000\u0000\u0a38\u0a36"+
		"\u0001\u0000\u0000\u0000\u0a39\u0a3a\u00054\u0000\u0000\u0a3a\u0a3c\u0005"+
		"F\u0000\u0000\u0a3b\u0a3d\u0003\u0108\u0084\u0000\u0a3c\u0a3b\u0001\u0000"+
		"\u0000\u0000\u0a3c\u0a3d\u0001\u0000\u0000\u0000\u0a3d\u0a3e\u0001\u0000"+
		"\u0000\u0000\u0a3e\u0a43\u00036\u001b\u0000\u0a3f\u0a40\u0005%\u0000\u0000"+
		"\u0a40\u0a42\u00036\u001b\u0000\u0a41\u0a3f\u0001\u0000\u0000\u0000\u0a42"+
		"\u0a45\u0001\u0000\u0000\u0000\u0a43\u0a41\u0001\u0000\u0000\u0000\u0a43"+
		"\u0a44\u0001\u0000\u0000\u0000\u0a44\u0161\u0001\u0000\u0000\u0000\u0a45"+
		"\u0a43\u0001\u0000\u0000\u0000\u0a46\u0a47\u00054\u0000\u0000\u0a47\u0a49"+
		"\u0007$\u0000\u0000\u0a48\u0a4a\u0003\u0108\u0084\u0000\u0a49\u0a48\u0001"+
		"\u0000\u0000\u0000\u0a49\u0a4a\u0001\u0000\u0000\u0000\u0a4a\u0a4b\u0001"+
		"\u0000\u0000\u0000\u0a4b\u0a50\u00038\u001c\u0000\u0a4c\u0a4d\u0005%\u0000"+
		"\u0000\u0a4d\u0a4f\u00038\u001c\u0000\u0a4e\u0a4c\u0001\u0000\u0000\u0000"+
		"\u0a4f\u0a52\u0001\u0000\u0000\u0000\u0a50\u0a4e\u0001\u0000\u0000\u0000"+
		"\u0a50\u0a51\u0001\u0000\u0000\u0000\u0a51\u0163\u0001\u0000\u0000\u0000"+
		"\u0a52\u0a50\u0001\u0000\u0000\u0000\u0a53\u0a54\u00054\u0000\u0000\u0a54"+
		"\u0a56\u0005J\u0000\u0000\u0a55\u0a57\u0003\u0108\u0084\u0000\u0a56\u0a55"+
		"\u0001\u0000\u0000\u0000\u0a56\u0a57\u0001\u0000\u0000\u0000\u0a57\u0a58"+
		"\u0001\u0000\u0000\u0000\u0a58\u0a5d\u0003:\u001d\u0000\u0a59\u0a5a\u0005"+
		"%\u0000\u0000\u0a5a\u0a5c\u0003:\u001d\u0000\u0a5b\u0a59\u0001\u0000\u0000"+
		"\u0000\u0a5c\u0a5f\u0001\u0000\u0000\u0000\u0a5d\u0a5b\u0001\u0000\u0000"+
		"\u0000\u0a5d\u0a5e\u0001\u0000\u0000\u0000\u0a5e\u0165\u0001\u0000\u0000"+
		"\u0000\u0a5f\u0a5d\u0001\u0000\u0000\u0000\u0a60\u0a61\u00054\u0000\u0000"+
		"\u0a61\u0a63\u0005G\u0000\u0000\u0a62\u0a64\u0003\u0108\u0084\u0000\u0a63"+
		"\u0a62\u0001\u0000\u0000\u0000\u0a63\u0a64\u0001\u0000\u0000\u0000\u0a64"+
		"\u0a65\u0001\u0000\u0000\u0000\u0a65\u0a6a\u0003<\u001e\u0000\u0a66\u0a67"+
		"\u0005%\u0000\u0000\u0a67\u0a69\u0003<\u001e\u0000\u0a68\u0a66\u0001\u0000"+
		"\u0000\u0000\u0a69\u0a6c\u0001\u0000\u0000\u0000\u0a6a\u0a68\u0001\u0000"+
		"\u0000\u0000\u0a6a\u0a6b\u0001\u0000\u0000\u0000\u0a6b\u0a73\u0001\u0000"+
		"\u0000\u0000\u0a6c\u0a6a\u0001\u0000\u0000\u0000\u0a6d\u0a71\u0005a\u0000"+
		"\u0000\u0a6e\u0a72\u0005\u00cc\u0000\u0000\u0a6f\u0a70\u0005r\u0000\u0000"+
		"\u0a70\u0a72\u0005\u015a\u0000\u0000\u0a71\u0a6e\u0001\u0000\u0000\u0000"+
		"\u0a71\u0a6f\u0001\u0000\u0000\u0000\u0a72\u0a74\u0001\u0000\u0000\u0000"+
		"\u0a73\u0a6d\u0001\u0000\u0000\u0000\u0a73\u0a74\u0001\u0000\u0000\u0000"+
		"\u0a74\u0167\u0001\u0000\u0000\u0000\u0a75\u0a76\u00054\u0000\u0000\u0a76"+
		"\u0a78\u0005\u0199\u0000\u0000\u0a77\u0a79\u0003\u0108\u0084\u0000\u0a78"+
		"\u0a77\u0001\u0000\u0000\u0000\u0a78\u0a79\u0001\u0000\u0000\u0000\u0a79"+
		"\u0a7a\u0001\u0000\u0000\u0000\u0a7a\u0a7f\u0003>\u001f\u0000\u0a7b\u0a7c"+
		"\u0005%\u0000\u0000\u0a7c\u0a7e\u0003>\u001f\u0000\u0a7d\u0a7b\u0001\u0000"+
		"\u0000\u0000\u0a7e\u0a81\u0001\u0000\u0000\u0000\u0a7f\u0a7d\u0001\u0000"+
		"\u0000\u0000\u0a7f\u0a80\u0001\u0000\u0000\u0000\u0a80\u0169\u0001\u0000"+
		"\u0000\u0000\u0a81\u0a7f\u0001\u0000\u0000\u0000\u0a82\u0a83\u00054\u0000"+
		"\u0000\u0a83\u0a84\u0005\u0178\u0000\u0000\u0a84\u0a85\u0003F#\u0000\u0a85"+
		"\u016b\u0001\u0000\u0000\u0000\u0a86\u0a87\u00054\u0000\u0000\u0a87\u0a89"+
		"\u00056\u0000\u0000\u0a88\u0a8a\u0003\u0108\u0084\u0000\u0a89\u0a88\u0001"+
		"\u0000\u0000\u0000\u0a89\u0a8a\u0001\u0000\u0000\u0000\u0a8a\u0a8b\u0001"+
		"\u0000\u0000\u0000\u0a8b\u0a8c\u00034\u001a\u0000\u0a8c\u016d\u0001\u0000"+
		"\u0000\u0000\u0a8d\u0a8e\u00055\u0000\u0000\u0a8e\u0a8f\u0005;\u0000\u0000"+
		"\u0a8f\u0a90\u0003@ \u0000\u0a90\u016f\u0001\u0000\u0000\u0000\u0a91\u0a92"+
		"\u00050\u0000\u0000\u0a92\u0a93\u0005\u02cc\u0000\u0000\u0a93\u0aa2\u0003"+
		"@ \u0000\u0a94\u0a96\u0005\u001f\u0000\u0000\u0a95\u0a94\u0001\u0000\u0000"+
		"\u0000\u0a95\u0a96\u0001\u0000\u0000\u0000\u0a96\u0a97\u0001\u0000\u0000"+
		"\u0000\u0a97\u0a9c\u0003V+\u0000\u0a98\u0a99\u0005%\u0000\u0000\u0a99"+
		"\u0a9b\u0003V+\u0000\u0a9a\u0a98\u0001\u0000\u0000\u0000\u0a9b\u0a9e\u0001"+
		"\u0000\u0000\u0000\u0a9c\u0a9a\u0001\u0000\u0000\u0000\u0a9c\u0a9d\u0001"+
		"\u0000\u0000\u0000\u0a9d\u0aa0\u0001\u0000\u0000\u0000\u0a9e\u0a9c\u0001"+
		"\u0000\u0000\u0000\u0a9f\u0aa1\u0005 \u0000\u0000\u0aa0\u0a9f\u0001\u0000"+
		"\u0000\u0000\u0aa0\u0aa1\u0001\u0000\u0000\u0000\u0aa1\u0aa3\u0001\u0000"+
		"\u0000\u0000\u0aa2\u0a95\u0001\u0000\u0000\u0000\u0aa2\u0aa3\u0001\u0000"+
		"\u0000\u0000\u0aa3\u0aa5\u0001\u0000\u0000\u0000\u0aa4\u0aa6\u0003\u0172"+
		"\u00b9\u0000\u0aa5\u0aa4\u0001\u0000\u0000\u0000\u0aa5\u0aa6\u0001\u0000"+
		"\u0000\u0000\u0aa6\u0171\u0001\u0000\u0000\u0000\u0aa7\u0aa9\u0005M\u0000"+
		"\u0000\u0aa8\u0aaa\u0003\u0174\u00ba\u0000\u0aa9\u0aa8\u0001\u0000\u0000"+
		"\u0000\u0aa9\u0aaa\u0001\u0000\u0000\u0000\u0aaa\u0aac\u0001\u0000\u0000"+
		"\u0000\u0aab\u0aad\u0003\u0176\u00bb\u0000\u0aac\u0aab\u0001\u0000\u0000"+
		"\u0000\u0aac\u0aad\u0001\u0000\u0000\u0000\u0aad\u0173\u0001\u0000\u0000"+
		"\u0000\u0aae\u0ab3\u0005\u02cd\u0000\u0000\u0aaf\u0ab0\u0005\u02ce\u0000"+
		"\u0000\u0ab0\u0ab1\u0005\u02e0\u0000\u0000\u0ab1\u0ab3\u0007%\u0000\u0000"+
		"\u0ab2\u0aae\u0001\u0000\u0000\u0000\u0ab2\u0aaf\u0001\u0000\u0000\u0000"+
		"\u0ab3\u0ab7\u0001\u0000\u0000\u0000\u0ab4\u0ab5\u0005\u02d2\u0000\u0000"+
		"\u0ab5\u0ab6\u0005\u0018\u0000\u0000\u0ab6\u0ab8\u0007\u0000\u0000\u0000"+
		"\u0ab7\u0ab4\u0001\u0000\u0000\u0000\u0ab7\u0ab8\u0001\u0000\u0000\u0000"+
		"\u0ab8\u0ac9\u0001\u0000\u0000\u0000\u0ab9\u0ac6\u0005\u02cf\u0000\u0000"+
		"\u0aba\u0abb\u0005a\u0000\u0000\u0abb\u0abc\u0005\u00fd\u0000\u0000\u0abc"+
		"\u0abd\u0005\u001f\u0000\u0000\u0abd\u0ac2\u0005\u02e0\u0000\u0000\u0abe"+
		"\u0abf\u0005%\u0000\u0000\u0abf\u0ac1\u0005\u02e0\u0000\u0000\u0ac0\u0abe"+
		"\u0001\u0000\u0000\u0000\u0ac1\u0ac4\u0001\u0000\u0000\u0000\u0ac2\u0ac0"+
		"\u0001\u0000\u0000\u0000\u0ac2\u0ac3\u0001\u0000\u0000\u0000\u0ac3\u0ac5"+
		"\u0001\u0000\u0000\u0000\u0ac4\u0ac2\u0001\u0000\u0000\u0000\u0ac5\u0ac7"+
		"\u0005 \u0000\u0000\u0ac6\u0aba\u0001\u0000\u0000\u0000\u0ac6\u0ac7\u0001"+
		"\u0000\u0000\u0000\u0ac7\u0ac9\u0001\u0000\u0000\u0000\u0ac8\u0ab2\u0001"+
		"\u0000\u0000\u0000\u0ac8\u0ab9\u0001\u0000\u0000\u0000\u0ac9\u0175\u0001"+
		"\u0000\u0000\u0000\u0aca\u0acc\u0005%\u0000\u0000\u0acb\u0aca\u0001\u0000"+
		"\u0000\u0000\u0acb\u0acc\u0001\u0000\u0000\u0000\u0acc\u0acd\u0001\u0000"+
		"\u0000\u0000\u0acd\u0acf\u0003\u0178\u00bc\u0000\u0ace\u0acb\u0001\u0000"+
		"\u0000\u0000\u0acf\u0ad0\u0001\u0000\u0000\u0000\u0ad0\u0ace\u0001\u0000"+
		"\u0000\u0000\u0ad0\u0ad1\u0001\u0000\u0000\u0000\u0ad1\u0177\u0001\u0000"+
		"\u0000\u0000\u0ad2\u0ae0\u0005r\u0000\u0000\u0ad3\u0ae0\u0005=\u0000\u0000"+
		"\u0ad4\u0ae0\u0005>\u0000\u0000\u0ad5\u0ae0\u0005\u02d0\u0000\u0000\u0ad6"+
		"\u0ad7\u0005\u027b\u0000\u0000\u0ad7\u0ad8\u0005\u0018\u0000\u0000\u0ad8"+
		"\u0ae0\u0007\u0000\u0000\u0000\u0ad9\u0ada\u0005\u0132\u0000\u0000\u0ada"+
		"\u0adb\u0005\u0018\u0000\u0000\u0adb\u0ae0\u0005\u02e0\u0000\u0000\u0adc"+
		"\u0add\u0005\u02d1\u0000\u0000\u0add\u0ade\u0005\u0018\u0000\u0000\u0ade"+
		"\u0ae0\u0007\u0000\u0000\u0000\u0adf\u0ad2\u0001\u0000\u0000\u0000\u0adf"+
		"\u0ad3\u0001\u0000\u0000\u0000\u0adf\u0ad4\u0001\u0000\u0000\u0000\u0adf"+
		"\u0ad5\u0001\u0000\u0000\u0000\u0adf\u0ad6\u0001\u0000\u0000\u0000\u0adf"+
		"\u0ad9\u0001\u0000\u0000\u0000\u0adf\u0adc\u0001\u0000\u0000\u0000\u0ae0"+
		"\u0179\u0001\u0000\u0000\u0000\u0ae1\u0ae2\u0005`\u0000\u0000\u0ae2\u0ae4"+
		"\u0005\u0126\u0000\u0000\u0ae3\u0ae1\u0001\u0000\u0000\u0000\u0ae3\u0ae4"+
		"\u0001\u0000\u0000\u0000\u0ae4\u017b\u0001\u0000\u0000\u0000\u0ae5\u0ae6"+
		"\u0003\u017e\u00bf\u0000\u0ae6\u0ae7\u0003\u01d6\u00eb\u0000\u0ae7\u0ae8"+
		"\u0003\u01d8\u00ec\u0000\u0ae8\u017d\u0001\u0000\u0000\u0000\u0ae9\u0aea"+
		"\u0005\u001f\u0000\u0000\u0aea\u0aef\u0003\u0180\u00c0\u0000\u0aeb\u0aec"+
		"\u0005%\u0000\u0000\u0aec\u0aee\u0003\u0180\u00c0\u0000\u0aed\u0aeb\u0001"+
		"\u0000\u0000\u0000\u0aee\u0af1\u0001\u0000\u0000\u0000\u0aef\u0aed\u0001"+
		"\u0000\u0000\u0000\u0aef\u0af0\u0001\u0000\u0000\u0000\u0af0\u0af4\u0001"+
		"\u0000\u0000\u0000\u0af1\u0aef\u0001\u0000\u0000\u0000\u0af2\u0af3\u0005"+
		"%\u0000\u0000\u0af3\u0af5\u0003\u01d4\u00ea\u0000\u0af4\u0af2\u0001\u0000"+
		"\u0000\u0000\u0af4\u0af5\u0001\u0000\u0000\u0000\u0af5\u0af6\u0001\u0000"+
		"\u0000\u0000\u0af6\u0af7\u0005 \u0000\u0000\u0af7\u017f\u0001\u0000\u0000"+
		"\u0000\u0af8\u0afe\u0003\u0182\u00c1\u0000\u0af9\u0afe\u0003\u01b8\u00dc"+
		"\u0000\u0afa\u0afe\u0003\u01ba\u00dd\u0000\u0afb\u0afe\u0003\u01bc\u00de"+
		"\u0000\u0afc\u0afe\u0003\u01ce\u00e7\u0000\u0afd\u0af8\u0001\u0000\u0000"+
		"\u0000\u0afd\u0af9\u0001\u0000\u0000\u0000\u0afd\u0afa\u0001\u0000\u0000"+
		"\u0000\u0afd\u0afb\u0001\u0000\u0000\u0000\u0afd\u0afc\u0001\u0000\u0000"+
		"\u0000\u0afe\u0181\u0001\u0000\u0000\u0000\u0aff\u0b00\u0003H$\u0000\u0b00"+
		"\u0b04\u0003\u00bc^\u0000\u0b01\u0b03\u0003\u0184\u00c2\u0000\u0b02\u0b01"+
		"\u0001\u0000\u0000\u0000\u0b03\u0b06\u0001\u0000\u0000\u0000\u0b04\u0b02"+
		"\u0001\u0000\u0000\u0000\u0b04\u0b05\u0001\u0000\u0000\u0000\u0b05\u0b07"+
		"\u0001\u0000\u0000\u0000\u0b06\u0b04\u0001\u0000\u0000\u0000\u0b07\u0b09"+
		"\u0003\u01b6\u00db\u0000\u0b08\u0b0a\u0003\u01ac\u00d6\u0000\u0b09\u0b08"+
		"\u0001\u0000\u0000\u0000\u0b09\u0b0a\u0001\u0000\u0000\u0000\u0b0a\u0183"+
		"\u0001\u0000\u0000\u0000\u0b0b\u0b41\u0005\u0125\u0000\u0000\u0b0c\u0b0d"+
		"\u0005\u0115\u0000\u0000\u0b0d\u0b41\u0003Z-\u0000\u0b0e\u0b41\u0005\u0147"+
		"\u0000\u0000\u0b0f\u0b10\u0005\u0131\u0000\u0000\u0b10\u0b11\u0005M\u0000"+
		"\u0000\u0b11\u0b12\u0005\u001f\u0000\u0000\u0b12\u0b13\u0005F\u0000\u0000"+
		"\u0b13\u0b14\u0005\u0018\u0000\u0000\u0b14\u0b15\u0005\u02df\u0000\u0000"+
		"\u0b15\u0b41\u0005 \u0000\u0000\u0b16\u0b17\u0005?\u0000\u0000\u0b17\u0b19"+
		"\u0003\u00f4z\u0000\u0b18\u0b16\u0001\u0000\u0000\u0000\u0b18\u0b19\u0001"+
		"\u0000\u0000\u0000\u0b19\u0b1a\u0001\u0000\u0000\u0000\u0b1a\u0b1b\u0005"+
		"\u009a\u0000\u0000\u0b1b\u0b41\u0003b1\u0000\u0b1c\u0b22\u0005\u012b\u0000"+
		"\u0000\u0b1d\u0b1e\u0005\u001f\u0000\u0000\u0b1e\u0b1f\u0005\u02e0\u0000"+
		"\u0000\u0b1f\u0b20\u0005%\u0000\u0000\u0b20\u0b21\u0005\u02e0\u0000\u0000"+
		"\u0b21\u0b23\u0005 \u0000\u0000\u0b22\u0b1d\u0001\u0000\u0000\u0000\u0b22"+
		"\u0b23\u0001\u0000\u0000\u0000\u0b23\u0b41\u0001\u0000\u0000\u0000\u0b24"+
		"\u0b25\u0005k\u0000\u0000\u0b25\u0b26\u0005f\u0000\u0000\u0b26\u0b41\u0005"+
		"\u0142\u0000\u0000\u0b27\u0b28\u0005\u0106\u0000\u0000\u0b28\u0b29\u0005"+
		"\u0103\u0000\u0000\u0b29\u0b2a\u0005`\u0000\u0000\u0b2a\u0b2b\u0005\u00ff"+
		"\u0000\u0000\u0b2b\u0b2d\u0007&\u0000\u0000\u0b2c\u0b2e\u0005\u00fa\u0000"+
		"\u0000\u0b2d\u0b2c\u0001\u0000\u0000\u0000\u0b2d\u0b2e\u0001\u0000\u0000"+
		"\u0000\u0b2e\u0b41\u0001\u0000\u0000\u0000\u0b2f\u0b31\u0005k\u0000\u0000"+
		"\u0b30\u0b2f\u0001\u0000\u0000\u0000\u0b30\u0b31\u0001\u0000\u0000\u0000"+
		"\u0b31\u0b32\u0001\u0000\u0000\u0000\u0b32\u0b41\u0005l\u0000\u0000\u0b33"+
		"\u0b41\u0005\u0144\u0000\u0000\u0b34\u0b35\u0005\u0123\u0000\u0000\u0b35"+
		"\u0b36\u0005M\u0000\u0000\u0b36\u0b41\u0003\u0186\u00c3\u0000\u0b37\u0b3c"+
		"\u0003\u0188\u00c4\u0000\u0b38\u0b39\u0005%\u0000\u0000\u0b39\u0b3b\u0003"+
		"\u0188\u00c4\u0000\u0b3a\u0b38\u0001\u0000\u0000\u0000\u0b3b\u0b3e\u0001"+
		"\u0000\u0000\u0000\u0b3c\u0b3a\u0001\u0000\u0000\u0000\u0b3c\u0b3d\u0001"+
		"\u0000\u0000\u0000\u0b3d\u0b41\u0001\u0000\u0000\u0000\u0b3e\u0b3c\u0001"+
		"\u0000\u0000\u0000\u0b3f\u0b41\u0003\u01ac\u00d6\u0000\u0b40\u0b0b\u0001"+
		"\u0000\u0000\u0000\u0b40\u0b0c\u0001\u0000\u0000\u0000\u0b40\u0b0e\u0001"+
		"\u0000\u0000\u0000\u0b40\u0b0f\u0001\u0000\u0000\u0000\u0b40\u0b18\u0001"+
		"\u0000\u0000\u0000\u0b40\u0b1c\u0001\u0000\u0000\u0000\u0b40\u0b24\u0001"+
		"\u0000\u0000\u0000\u0b40\u0b27\u0001\u0000\u0000\u0000\u0b40\u0b30\u0001"+
		"\u0000\u0000\u0000\u0b40\u0b33\u0001\u0000\u0000\u0000\u0b40\u0b34\u0001"+
		"\u0000\u0000\u0000\u0b40\u0b37\u0001\u0000\u0000\u0000\u0b40\u0b3f\u0001"+
		"\u0000\u0000\u0000\u0b41\u0185\u0001\u0000\u0000\u0000\u0b42\u0b43\u0005"+
		"\u001f\u0000\u0000\u0b43\u0b44\u0005\u01a0\u0000\u0000\u0b44\u0b45\u0005"+
		"\u0018\u0000\u0000\u0b45\u0b46\u0003\u00f4z\u0000\u0b46\u0b47\u0005%\u0000"+
		"\u0000\u0b47\u0b48\u0005\u01a6\u0000\u0000\u0b48\u0b49\u0005\u0018\u0000"+
		"\u0000\u0b49\u0b4a\u0007\'\u0000\u0000\u0b4a\u0b4b\u0005%\u0000\u0000"+
		"\u0b4b\u0b4c\u0005\u0110\u0000\u0000\u0b4c\u0b4d\u0005\u0018\u0000\u0000"+
		"\u0b4d\u0b4e\u0005\u02df\u0000\u0000\u0b4e\u0b4f\u0005 \u0000\u0000\u0b4f"+
		"\u0187\u0001\u0000\u0000\u0000\u0b50\u0b51\u0005?\u0000\u0000\u0b51\u0b53"+
		"\u0003X,\u0000\u0b52\u0b50\u0001\u0000\u0000\u0000\u0b52\u0b53\u0001\u0000"+
		"\u0000\u0000\u0b53\u0b57\u0001\u0000\u0000\u0000\u0b54\u0b58\u0003\u0190"+
		"\u00c8\u0000\u0b55\u0b58\u0003\u01a4\u00d2\u0000\u0b56\u0b58\u0003\u01aa"+
		"\u00d5\u0000\u0b57\u0b54\u0001\u0000\u0000\u0000\u0b57\u0b55\u0001\u0000"+
		"\u0000\u0000\u0b57\u0b56\u0001\u0000\u0000\u0000\u0b58\u0189\u0001\u0000"+
		"\u0000\u0000\u0b59\u0b5a\u0005?\u0000\u0000\u0b5a\u0b5c\u0003X,\u0000"+
		"\u0b5b\u0b59\u0001\u0000\u0000\u0000\u0b5b\u0b5c\u0001\u0000\u0000\u0000"+
		"\u0b5c\u0b60\u0001\u0000\u0000\u0000\u0b5d\u0b61\u0003\u0190\u00c8\u0000"+
		"\u0b5e\u0b61\u0003\u018c\u00c6\u0000\u0b5f\u0b61\u0003\u01aa\u00d5\u0000"+
		"\u0b60\u0b5d\u0001\u0000\u0000\u0000\u0b60\u0b5e\u0001\u0000\u0000\u0000"+
		"\u0b60\u0b5f\u0001\u0000\u0000\u0000\u0b61\u018b\u0001\u0000\u0000\u0000"+
		"\u0b62\u0b63\u0005B\u0000\u0000\u0b63\u0b65\u0005C\u0000\u0000\u0b64\u0b62"+
		"\u0001\u0000\u0000\u0000\u0b64\u0b65\u0001\u0000\u0000\u0000\u0b65\u0b66"+
		"\u0001\u0000\u0000\u0000\u0b66\u0b6b\u0003@ \u0000\u0b67\u0b68\u0005\u001f"+
		"\u0000\u0000\u0b68\u0b69\u0003H$\u0000\u0b69\u0b6a\u0005 \u0000\u0000"+
		"\u0b6a\u0b6c\u0001\u0000\u0000\u0000\u0b6b\u0b67\u0001\u0000\u0000\u0000"+
		"\u0b6b\u0b6c\u0001\u0000\u0000\u0000\u0b6c\u0b70\u0001\u0000\u0000\u0000"+
		"\u0b6d\u0b6f\u0003\u018e\u00c7\u0000\u0b6e\u0b6d\u0001\u0000\u0000\u0000"+
		"\u0b6f\u0b72\u0001\u0000\u0000\u0000\u0b70\u0b6e\u0001\u0000\u0000\u0000"+
		"\u0b70\u0b71\u0001\u0000\u0000\u0000\u0b71\u018d\u0001\u0000\u0000\u0000"+
		"\u0b72\u0b70\u0001\u0000\u0000\u0000\u0b73\u0b74\u0005a\u0000\u0000\u0b74"+
		"\u0b78\u00051\u0000\u0000\u0b75\u0b76\u0005\u0107\u0000\u0000\u0b76\u0b79"+
		"\u0005\u010f\u0000\u0000\u0b77\u0b79\u0005\u0104\u0000\u0000\u0b78\u0b75"+
		"\u0001\u0000\u0000\u0000\u0b78\u0b77\u0001\u0000\u0000\u0000\u0b79\u0b82"+
		"\u0001\u0000\u0000\u0000\u0b7a\u0b7b\u0005a\u0000\u0000\u0b7b\u0b7c\u0005"+
		"0\u0000\u0000\u0b7c\u0b7d\u0005\u0107\u0000\u0000\u0b7d\u0b82\u0005\u010f"+
		"\u0000\u0000\u0b7e\u0b7f\u0005k\u0000\u0000\u0b7f\u0b80\u0005f\u0000\u0000"+
		"\u0b80\u0b82\u0005\u0142\u0000\u0000\u0b81\u0b73\u0001\u0000\u0000\u0000"+
		"\u0b81\u0b7a\u0001\u0000\u0000\u0000\u0b81\u0b7e\u0001\u0000\u0000\u0000"+
		"\u0b82\u018f\u0001\u0000\u0000\u0000\u0b83\u0b86\u0003`0\u0000\u0b84\u0b86"+
		"\u0005A\u0000\u0000\u0b85\u0b83\u0001\u0000\u0000\u0000\u0b85\u0b84\u0001"+
		"\u0000\u0000\u0000\u0b86\u0b89\u0001\u0000\u0000\u0000\u0b87\u0b8a\u0003"+
		"\u0192\u00c9\u0000\u0b88\u0b8a\u0003\u01a0\u00d0\u0000\u0b89\u0b87\u0001"+
		"\u0000\u0000\u0000\u0b89\u0b88\u0001\u0000\u0000\u0000\u0b8a\u0191\u0001"+
		"\u0000\u0000\u0000\u0b8b\u0b8d\u0003\u0194\u00ca\u0000\u0b8c\u0b8b\u0001"+
		"\u0000\u0000\u0000\u0b8c\u0b8d\u0001\u0000\u0000\u0000\u0b8d\u0b8f\u0001"+
		"\u0000\u0000\u0000\u0b8e\u0b90\u0003\u0196\u00cb\u0000\u0b8f\u0b8e\u0001"+
		"\u0000\u0000\u0000\u0b8f\u0b90\u0001\u0000\u0000\u0000\u0b90\u0b92\u0001"+
		"\u0000\u0000\u0000\u0b91\u0b93\u0003\u0198\u00cc\u0000\u0b92\u0b91\u0001"+
		"\u0000\u0000\u0000\u0b92\u0b93\u0001\u0000\u0000\u0000\u0b93\u0193\u0001"+
		"\u0000\u0000\u0000\u0b94\u0b95\u0007(\u0000\u0000\u0b95\u0195\u0001\u0000"+
		"\u0000\u0000\u0b96\u0ba5\u0005M\u0000\u0000\u0b97\u0b98\u0005\u0127\u0000"+
		"\u0000\u0b98\u0b99\u0005\u0018\u0000\u0000\u0b99\u0ba6\u0005\u02e0\u0000"+
		"\u0000\u0b9a\u0b9b\u0005\u001f\u0000\u0000\u0b9b\u0ba0\u0003\u00dcn\u0000"+
		"\u0b9c\u0b9d\u0005%\u0000\u0000\u0b9d\u0b9f\u0003\u00dcn\u0000\u0b9e\u0b9c"+
		"\u0001\u0000\u0000\u0000\u0b9f\u0ba2\u0001\u0000\u0000\u0000\u0ba0\u0b9e"+
		"\u0001\u0000\u0000\u0000\u0ba0\u0ba1\u0001\u0000\u0000\u0000\u0ba1\u0ba3"+
		"\u0001\u0000\u0000\u0000\u0ba2\u0ba0\u0001\u0000\u0000\u0000\u0ba3\u0ba4"+
		"\u0005 \u0000\u0000\u0ba4\u0ba6\u0001\u0000\u0000\u0000\u0ba5\u0b97\u0001"+
		"\u0000\u0000\u0000\u0ba5\u0b9a\u0001\u0000\u0000\u0000\u0ba6\u0197\u0001"+
		"\u0000\u0000\u0000\u0ba7\u0bab\u0003\u019a\u00cd\u0000\u0ba8\u0bab\u0003"+
		"\u019c\u00ce\u0000\u0ba9\u0bab\u0003\u019e\u00cf\u0000\u0baa\u0ba7\u0001"+
		"\u0000\u0000\u0000\u0baa\u0ba8\u0001\u0000\u0000\u0000\u0baa\u0ba9\u0001"+
		"\u0000\u0000\u0000\u0bab\u0199\u0001\u0000\u0000\u0000\u0bac\u0bad\u0005"+
		"a\u0000\u0000\u0bad\u0bae\u00034\u001a\u0000\u0bae\u0baf\u0005\u001f\u0000"+
		"\u0000\u0baf\u0bb0\u0003H$\u0000\u0bb0\u0bb1\u0005 \u0000\u0000\u0bb1"+
		"\u019b\u0001\u0000\u0000\u0000\u0bb2\u0bb3\u0005a\u0000\u0000\u0bb3\u0bb4"+
		"\u0003\u00f4z\u0000\u0bb4\u019d\u0001\u0000\u0000\u0000\u0bb5\u0bb6\u0005"+
		"a\u0000\u0000\u0bb6\u0bb7\u0005\u02df\u0000\u0000\u0bb7\u019f\u0001\u0000"+
		"\u0000\u0000\u0bb8\u0bbf\u0005\u0114\u0000\u0000\u0bb9\u0bba\u0005\u0114"+
		"\u0000\u0000\u0bba\u0bbc\u0005\u0129\u0000\u0000\u0bbb\u0bbd\u0003\u01a2"+
		"\u00d1\u0000\u0bbc\u0bbb\u0001\u0000\u0000\u0000\u0bbc\u0bbd\u0001\u0000"+
		"\u0000\u0000\u0bbd\u0bbf\u0001\u0000\u0000\u0000\u0bbe\u0bb8\u0001\u0000"+
		"\u0000\u0000\u0bbe\u0bb9\u0001\u0000\u0000\u0000\u0bbf\u01a1\u0001\u0000"+
		"\u0000\u0000\u0bc0\u0bc1\u0005M\u0000\u0000\u0bc1\u0bc2\u0005\u001f\u0000"+
		"\u0000\u0bc2\u0bc3\u0005\u019e\u0000\u0000\u0bc3\u0bc4\u0005\u0018\u0000"+
		"\u0000\u0bc4\u0bc5\u0005\u02e0\u0000\u0000\u0bc5\u0bc6\u0005 \u0000\u0000"+
		"\u0bc6\u01a3\u0001\u0000\u0000\u0000\u0bc7\u0bc8\u0005B\u0000\u0000\u0bc8"+
		"\u0bca\u0005C\u0000\u0000\u0bc9\u0bc7\u0001\u0000\u0000\u0000\u0bc9\u0bca"+
		"\u0001\u0000\u0000\u0000\u0bca\u0bcb\u0001\u0000\u0000\u0000\u0bcb\u0bcc"+
		"\u0005\u010a\u0000\u0000\u0bcc\u0bd1\u0003@ \u0000\u0bcd\u0bce\u0005\u001f"+
		"\u0000\u0000\u0bce\u0bcf\u0003H$\u0000\u0bcf\u0bd0\u0005 \u0000\u0000"+
		"\u0bd0\u0bd2\u0001\u0000\u0000\u0000\u0bd1\u0bcd\u0001\u0000\u0000\u0000"+
		"\u0bd1\u0bd2\u0001\u0000\u0000\u0000\u0bd2\u0bd6\u0001\u0000\u0000\u0000"+
		"\u0bd3\u0bd5\u0003\u01a6\u00d3\u0000\u0bd4\u0bd3\u0001\u0000\u0000\u0000"+
		"\u0bd5\u0bd8\u0001\u0000\u0000\u0000\u0bd6\u0bd4\u0001\u0000\u0000\u0000"+
		"\u0bd6\u0bd7\u0001\u0000\u0000\u0000\u0bd7\u01a5\u0001\u0000\u0000\u0000"+
		"\u0bd8\u0bd6\u0001\u0000\u0000\u0000\u0bd9\u0bda\u0005a\u0000\u0000\u0bda"+
		"\u0bdb\u0007)\u0000\u0000\u0bdb\u0be0\u0003\u01a8\u00d4\u0000\u0bdc\u0bdd"+
		"\u0005k\u0000\u0000\u0bdd\u0bde\u0005f\u0000\u0000\u0bde\u0be0\u0005\u0142"+
		"\u0000\u0000\u0bdf\u0bd9\u0001\u0000\u0000\u0000\u0bdf\u0bdc\u0001\u0000"+
		"\u0000\u0000\u0be0\u01a7\u0001\u0000\u0000\u0000\u0be1\u0be2\u0005\u0107"+
		"\u0000\u0000\u0be2\u0be7\u0005\u010f\u0000\u0000\u0be3\u0be7\u0005\u0104"+
		"\u0000\u0000\u0be4\u0be5\u0005:\u0000\u0000\u0be5\u0be7\u0007*\u0000\u0000"+
		"\u0be6\u0be1\u0001\u0000\u0000\u0000\u0be6\u0be3\u0001\u0000\u0000\u0000"+
		"\u0be6\u0be4\u0001\u0000\u0000\u0000\u0be7\u01a9\u0001\u0000\u0000\u0000"+
		"\u0be8\u0bec\u0005\u0105\u0000\u0000\u0be9\u0bea\u0005k\u0000\u0000\u0bea"+
		"\u0beb\u0005f\u0000\u0000\u0beb\u0bed\u0005\u0142\u0000\u0000\u0bec\u0be9"+
		"\u0001\u0000\u0000\u0000\u0bec\u0bed\u0001\u0000\u0000\u0000\u0bed\u0bee"+
		"\u0001\u0000\u0000\u0000\u0bee\u0bef\u0005\u001f\u0000\u0000\u0bef\u0bf0"+
		"\u0003b1\u0000\u0bf0\u0bf1\u0005 \u0000\u0000\u0bf1\u01ab\u0001\u0000"+
		"\u0000\u0000\u0bf2\u0bf3\u0005>\u0000\u0000\u0bf3\u0bf5\u0003V+\u0000"+
		"\u0bf4\u0bf6\u0003\u0194\u00ca\u0000\u0bf5\u0bf4\u0001\u0000\u0000\u0000"+
		"\u0bf5\u0bf6\u0001\u0000\u0000\u0000\u0bf6\u0bf8\u0001\u0000\u0000\u0000"+
		"\u0bf7\u0bf9\u0003\u01ae\u00d7\u0000\u0bf8\u0bf7\u0001\u0000\u0000\u0000"+
		"\u0bf8\u0bf9\u0001\u0000\u0000\u0000\u0bf9\u0bfb\u0001\u0000\u0000\u0000"+
		"\u0bfa\u0bfc\u0003\u01b0\u00d8\u0000\u0bfb\u0bfa\u0001\u0000\u0000\u0000"+
		"\u0bfb\u0bfc\u0001\u0000\u0000\u0000\u0bfc\u0bfe\u0001\u0000\u0000\u0000"+
		"\u0bfd\u0bff\u0003\u01b4\u00da\u0000\u0bfe\u0bfd\u0001\u0000\u0000\u0000"+
		"\u0bfe\u0bff\u0001\u0000\u0000\u0000\u0bff\u01ad\u0001\u0000\u0000\u0000"+
		"\u0c00\u0c01\u0005M\u0000\u0000\u0c01\u0c02\u0005\u001f\u0000\u0000\u0c02"+
		"\u0c07\u0003\u00dcn\u0000\u0c03\u0c04\u0005%\u0000\u0000\u0c04\u0c06\u0003"+
		"\u00dcn\u0000\u0c05\u0c03\u0001\u0000\u0000\u0000\u0c06\u0c09\u0001\u0000"+
		"\u0000\u0000\u0c07\u0c05\u0001\u0000\u0000\u0000\u0c07\u0c08\u0001\u0000"+
		"\u0000\u0000\u0c08\u0c0a\u0001\u0000\u0000\u0000\u0c09\u0c07\u0001\u0000"+
		"\u0000\u0000\u0c0a\u0c0b\u0005 \u0000\u0000\u0c0b\u01af\u0001\u0000\u0000"+
		"\u0000\u0c0c\u0c10\u0003\u019a\u00cd\u0000\u0c0d\u0c10\u0003\u019c\u00ce"+
		"\u0000\u0c0e\u0c10\u0003\u01b2\u00d9\u0000\u0c0f\u0c0c\u0001\u0000\u0000"+
		"\u0000\u0c0f\u0c0d\u0001\u0000\u0000\u0000\u0c0f\u0c0e\u0001\u0000\u0000"+
		"\u0000\u0c10\u01b1\u0001\u0000\u0000\u0000\u0c11\u0c12\u0005a\u0000\u0000"+
		"\u0c12\u0c13\u0005\u009a\u0000\u0000\u0c13\u01b3\u0001\u0000\u0000\u0000"+
		"\u0c14\u0c18\u0005\u01b8\u0000\u0000\u0c15\u0c19\u0003\u00f4z\u0000\u0c16"+
		"\u0c19\u00034\u001a\u0000\u0c17\u0c19\u0005\u02df\u0000\u0000\u0c18\u0c15"+
		"\u0001\u0000\u0000\u0000\u0c18\u0c16\u0001\u0000\u0000\u0000\u0c18\u0c17"+
		"\u0001\u0000\u0000\u0000\u0c19\u01b5\u0001\u0000\u0000\u0000\u0c1a\u0c1f"+
		"\u0003\u0188\u00c4\u0000\u0c1b\u0c1c\u0005%\u0000\u0000\u0c1c\u0c1e\u0003"+
		"\u0188\u00c4\u0000\u0c1d\u0c1b\u0001\u0000\u0000\u0000\u0c1e\u0c21\u0001"+
		"\u0000\u0000\u0000\u0c1f\u0c1d\u0001\u0000\u0000\u0000\u0c1f\u0c20\u0001"+
		"\u0000\u0000\u0000\u0c20\u0c23\u0001\u0000\u0000\u0000\u0c21\u0c1f\u0001"+
		"\u0000\u0000\u0000\u0c22\u0c1a\u0001\u0000\u0000\u0000\u0c22\u0c23\u0001"+
		"\u0000\u0000\u0000\u0c23\u01b7\u0001\u0000\u0000\u0000\u0c24\u0c25\u0003"+
		"H$\u0000\u0c25\u0c26\u0005`\u0000\u0000\u0c26\u0c2c\u0003b1\u0000\u0c27"+
		"\u0c2a\u0005\u013c\u0000\u0000\u0c28\u0c29\u0005k\u0000\u0000\u0c29\u0c2b"+
		"\u0005l\u0000\u0000\u0c2a\u0c28\u0001\u0000\u0000\u0000\u0c2a\u0c2b\u0001"+
		"\u0000\u0000\u0000\u0c2b\u0c2d\u0001\u0000\u0000\u0000\u0c2c\u0c27\u0001"+
		"\u0000\u0000\u0000\u0c2c\u0c2d\u0001\u0000\u0000\u0000\u0c2d\u0c2f\u0001"+
		"\u0000\u0000\u0000\u0c2e\u0c30\u0003\u018a\u00c5\u0000\u0c2f\u0c2e\u0001"+
		"\u0000\u0000\u0000\u0c2f\u0c30\u0001\u0000\u0000\u0000\u0c30\u01b9\u0001"+
		"\u0000\u0000\u0000\u0c31\u0c32\u0003\u00f4z\u0000\u0c32\u0c33\u0005\u02dd"+
		"\u0000\u0000\u0c33\u0c34\u0005\u01a1\u0000\u0000\u0c34\u0c35\u0005f\u0000"+
		"\u0000\u0c35\u0c36\u0005\u019d\u0000\u0000\u0c36\u01bb\u0001\u0000\u0000"+
		"\u0000\u0c37\u0c38\u0005?\u0000\u0000\u0c38\u0c3a\u0003X,\u0000\u0c39"+
		"\u0c37\u0001\u0000\u0000\u0000\u0c39\u0c3a\u0001\u0000\u0000\u0000\u0c3a"+
		"\u0c3f\u0001\u0000\u0000\u0000\u0c3b\u0c40\u0003\u01c2\u00e1\u0000\u0c3c"+
		"\u0c40\u0003\u01cc\u00e6\u0000\u0c3d\u0c40\u0003\u01aa\u00d5\u0000\u0c3e"+
		"\u0c40\u0003\u01be\u00df\u0000\u0c3f\u0c3b\u0001\u0000\u0000\u0000\u0c3f"+
		"\u0c3c\u0001\u0000\u0000\u0000\u0c3f\u0c3d\u0001\u0000\u0000\u0000\u0c3f"+
		"\u0c3e\u0001\u0000\u0000\u0000\u0c40\u01bd\u0001\u0000\u0000\u0000\u0c41"+
		"\u0c49\u0003\u01c0\u00e0\u0000\u0c42\u0c43\u0005a\u0000\u0000\u0c43\u0c47"+
		"\u00051\u0000\u0000\u0c44\u0c45\u0005\u0107\u0000\u0000\u0c45\u0c48\u0005"+
		"\u010f\u0000\u0000\u0c46\u0c48\u0005\u0104\u0000\u0000\u0c47\u0c44\u0001"+
		"\u0000\u0000\u0000\u0c47\u0c46\u0001\u0000\u0000\u0000\u0c48\u0c4a\u0001"+
		"\u0000\u0000\u0000\u0c49\u0c42\u0001\u0000\u0000\u0000\u0c49\u0c4a\u0001"+
		"\u0000\u0000\u0000\u0c4a\u01bf\u0001\u0000\u0000\u0000\u0c4b\u0c4c\u0005"+
		"\u00f6\u0000\u0000\u0c4c\u0c4d\u0005\u001f\u0000\u0000\u0c4d\u0c4e\u0003"+
		"\u0124\u0092\u0000\u0c4e\u0c4f\u0005g\u0000\u0000\u0c4f\u0c50\u0003\u0124"+
		"\u0092\u0000\u0c50\u0c58\u0001\u0000\u0000\u0000\u0c51\u0c52\u0005%\u0000"+
		"\u0000\u0c52\u0c53\u0003\u0124\u0092\u0000\u0c53\u0c54\u0005g\u0000\u0000"+
		"\u0c54\u0c55\u0003\u0124\u0092\u0000\u0c55\u0c57\u0001\u0000\u0000\u0000"+
		"\u0c56\u0c51\u0001\u0000\u0000\u0000\u0c57\u0c5a\u0001\u0000\u0000\u0000"+
		"\u0c58\u0c59\u0001\u0000\u0000\u0000\u0c58\u0c56\u0001\u0000\u0000\u0000"+
		"\u0c59\u0c5b\u0001\u0000\u0000\u0000\u0c5a\u0c58\u0001\u0000\u0000\u0000"+
		"\u0c5b\u0c5c\u0005 \u0000\u0000\u0c5c\u01c1\u0001\u0000\u0000\u0000\u0c5d"+
		"\u0c60\u0003\u01c4\u00e2\u0000\u0c5e\u0c61\u0003\u01c6\u00e3\u0000\u0c5f"+
		"\u0c61\u0003\u01c8\u00e4\u0000\u0c60\u0c5e\u0001\u0000\u0000\u0000\u0c60"+
		"\u0c5f\u0001\u0000\u0000\u0000\u0c61\u01c3\u0001\u0000\u0000\u0000\u0c62"+
		"\u0c65\u0003`0\u0000\u0c63\u0c65\u0005A\u0000\u0000\u0c64\u0c62\u0001"+
		"\u0000\u0000\u0000\u0c64\u0c63\u0001\u0000\u0000\u0000\u0c65\u01c5\u0001"+
		"\u0000\u0000\u0000\u0c66\u0c68\u0003\u0194\u00ca\u0000\u0c67\u0c66\u0001"+
		"\u0000\u0000\u0000\u0c67\u0c68\u0001\u0000\u0000\u0000\u0c68\u0c69\u0001"+
		"\u0000\u0000\u0000\u0c69\u0c6b\u0003P(\u0000\u0c6a\u0c6c\u0003\u0196\u00cb"+
		"\u0000\u0c6b\u0c6a\u0001\u0000\u0000\u0000\u0c6b\u0c6c\u0001\u0000\u0000"+
		"\u0000\u0c6c\u0c6e\u0001\u0000\u0000\u0000\u0c6d\u0c6f\u0003\u0198\u00cc"+
		"\u0000\u0c6e\u0c6d\u0001\u0000\u0000\u0000\u0c6e\u0c6f\u0001\u0000\u0000"+
		"\u0000\u0c6f\u01c7\u0001\u0000\u0000\u0000\u0c70\u0c73\u0005\u0114\u0000"+
		"\u0000\u0c71\u0c74\u0003P(\u0000\u0c72\u0c74\u0003\u01ca\u00e5\u0000\u0c73"+
		"\u0c71\u0001\u0000\u0000\u0000\u0c73\u0c72\u0001\u0000\u0000\u0000\u0c74"+
		"\u01c9\u0001\u0000\u0000\u0000\u0c75\u0c76\u0005\u0129\u0000\u0000\u0c76"+
		"\u0c77\u0003P(\u0000\u0c77\u0c78\u0003\u01a2\u00d1\u0000\u0c78\u01cb\u0001"+
		"\u0000\u0000\u0000\u0c79\u0c7a\u0005B\u0000\u0000\u0c7a\u0c7c\u0005C\u0000"+
		"\u0000\u0c7b\u0c79\u0001\u0000\u0000\u0000\u0c7b\u0c7c\u0001\u0000\u0000"+
		"\u0000\u0c7c\u0c7d\u0001\u0000\u0000\u0000\u0c7d\u0c7e\u0003P(\u0000\u0c7e"+
		"\u0c7f\u0005\u010a\u0000\u0000\u0c7f\u0c80\u0003@ \u0000\u0c80\u0c84\u0003"+
		"P(\u0000\u0c81\u0c83\u0003\u01a6\u00d3\u0000\u0c82\u0c81\u0001\u0000\u0000"+
		"\u0000\u0c83\u0c86\u0001\u0000\u0000\u0000\u0c84\u0c82\u0001\u0000\u0000"+
		"\u0000\u0c84\u0c85\u0001\u0000\u0000\u0000\u0c85\u01cd\u0001\u0000\u0000"+
		"\u0000\u0c86\u0c84\u0001\u0000\u0000\u0000\u0c87\u0c88\u0005>\u0000\u0000"+
		"\u0c88\u0c89\u0003V+\u0000\u0c89\u0c8c\u0003\u01d0\u00e8\u0000\u0c8a\u0c8b"+
		"\u0005M\u0000\u0000\u0c8b\u0c8d\u0003\u01d2\u00e9\u0000\u0c8c\u0c8a\u0001"+
		"\u0000\u0000\u0000\u0c8c\u0c8d\u0001\u0000\u0000\u0000\u0c8d\u0c8f\u0001"+
		"\u0000\u0000\u0000\u0c8e\u0c90\u0003\u01b0\u00d8\u0000\u0c8f\u0c8e\u0001"+
		"\u0000\u0000\u0000\u0c8f\u0c90\u0001\u0000\u0000\u0000\u0c90\u0c92\u0001"+
		"\u0000\u0000\u0000\u0c91\u0c93\u0003\u01b4\u00da\u0000\u0c92\u0c91\u0001"+
		"\u0000\u0000\u0000\u0c92\u0c93\u0001\u0000\u0000\u0000\u0c93\u01cf\u0001"+
		"\u0000\u0000\u0000\u0c94\u0c96\u0003\u0194\u00ca\u0000\u0c95\u0c94\u0001"+
		"\u0000\u0000\u0000\u0c95\u0c96\u0001\u0000\u0000\u0000\u0c96\u0c97\u0001"+
		"\u0000\u0000\u0000\u0c97\u0ca0\u0003P(\u0000\u0c98\u0c99\u0005\u0113\u0000"+
		"\u0000\u0c99\u0ca0\u0005\u0116\u0000\u0000\u0c9a\u0c9c\u0005\u0114\u0000"+
		"\u0000\u0c9b\u0c9a\u0001\u0000\u0000\u0000\u0c9b\u0c9c\u0001\u0000\u0000"+
		"\u0000\u0c9c\u0c9d\u0001\u0000\u0000\u0000\u0c9d\u0c9e\u0005\u0116\u0000"+
		"\u0000\u0c9e\u0ca0\u0003P(\u0000\u0c9f\u0c95\u0001\u0000\u0000\u0000\u0c9f"+
		"\u0c98\u0001\u0000\u0000\u0000\u0c9f\u0c9b\u0001\u0000\u0000\u0000\u0ca0"+
		"\u01d1\u0001\u0000\u0000\u0000\u0ca1\u0ca2\u0005\u001f\u0000\u0000\u0ca2"+
		"\u0ca7\u0003\u00dcn\u0000\u0ca3\u0ca4\u0005%\u0000\u0000\u0ca4\u0ca6\u0003"+
		"\u00dcn\u0000\u0ca5\u0ca3\u0001\u0000\u0000\u0000\u0ca6\u0ca9\u0001\u0000"+
		"\u0000\u0000\u0ca7\u0ca5\u0001\u0000\u0000\u0000\u0ca7\u0ca8\u0001\u0000"+
		"\u0000\u0000\u0ca8\u0caa\u0001\u0000\u0000\u0000\u0ca9\u0ca7\u0001\u0000"+
		"\u0000\u0000\u0caa\u0cab\u0005 \u0000\u0000\u0cab\u01d3\u0001\u0000\u0000"+
		"\u0000\u0cac\u0cad\u0005\u013b\u0000\u0000\u0cad\u0cae\u0005f\u0000\u0000"+
		"\u0cae\u0caf\u0005\u01a7\u0000\u0000\u0caf\u0cb0\u0005\u001f\u0000\u0000"+
		"\u0cb0\u0cb1\u0003H$\u0000\u0cb1\u0cb2\u0005%\u0000\u0000\u0cb2\u0cb3"+
		"\u0003H$\u0000\u0cb3\u0cb4\u0005 \u0000\u0000\u0cb4\u01d5\u0001\u0000"+
		"\u0000\u0000\u0cb5\u0cbd\u0005a\u0000\u0000\u0cb6\u0cb7\u00034\u001a\u0000"+
		"\u0cb7\u0cb8\u0005\u001f\u0000\u0000\u0cb8\u0cb9\u0003H$\u0000\u0cb9\u0cba"+
		"\u0005 \u0000\u0000\u0cba\u0cbe\u0001\u0000\u0000\u0000\u0cbb\u0cbe\u0003"+
		"\u00f4z\u0000\u0cbc\u0cbe\u0005\u02df\u0000\u0000\u0cbd\u0cb6\u0001\u0000"+
		"\u0000\u0000\u0cbd\u0cbb\u0001\u0000\u0000\u0000\u0cbd\u0cbc\u0001\u0000"+
		"\u0000\u0000\u0cbe\u0cc0\u0001\u0000\u0000\u0000\u0cbf\u0cb5\u0001\u0000"+
		"\u0000\u0000\u0cbf\u0cc0\u0001\u0000\u0000\u0000\u0cc0\u01d7\u0001\u0000"+
		"\u0000\u0000\u0cc1\u0cc4\u0005\u01a9\u0000\u0000\u0cc2\u0cc5\u0003\u00f4"+
		"z\u0000\u0cc3\u0cc5\u0005\u02df\u0000\u0000\u0cc4\u0cc2\u0001\u0000\u0000"+
		"\u0000\u0cc4\u0cc3\u0001\u0000\u0000\u0000\u0cc5\u0cc7\u0001\u0000\u0000"+
		"\u0000\u0cc6\u0cc1\u0001\u0000\u0000\u0000\u0cc6\u0cc7\u0001\u0000\u0000"+
		"\u0000\u0cc7\u0ccf\u0001\u0000\u0000\u0000\u0cc8\u0cc9\u0005\u01b8\u0000"+
		"\u0000\u0cc9\u0cce\u00034\u001a\u0000\u0cca\u0ccb\u0003\u00f4z\u0000\u0ccb"+
		"\u0ccc\u0005\u02df\u0000\u0000\u0ccc\u0cce\u0001\u0000\u0000\u0000\u0ccd"+
		"\u0cc8\u0001\u0000\u0000\u0000\u0ccd\u0cca\u0001\u0000\u0000\u0000\u0cce"+
		"\u0cd0\u0001\u0000\u0000\u0000\u0ccf\u0ccd\u0001\u0000\u0000\u0000\u0ccf"+
		"\u0cd0\u0001\u0000\u0000\u0000\u0cd0\u0cd3\u0001\u0000\u0000\u0000\u0cd1"+
		"\u0cd2\u0005M\u0000\u0000\u0cd2\u0cd4\u0003\u01da\u00ed\u0000\u0cd3\u0cd1"+
		"\u0001\u0000\u0000\u0000\u0cd3\u0cd4\u0001\u0000\u0000\u0000\u0cd4\u01d9"+
		"\u0001\u0000\u0000\u0000\u0cd5\u0cd6\u0005\u001f\u0000\u0000\u0cd6\u0cdb"+
		"\u0003\u01dc\u00ee\u0000\u0cd7\u0cd8\u0005%\u0000\u0000\u0cd8\u0cda\u0003"+
		"\u01dc\u00ee\u0000\u0cd9\u0cd7\u0001\u0000\u0000\u0000\u0cda\u0cdd\u0001"+
		"\u0000\u0000\u0000\u0cdb\u0cd9\u0001\u0000\u0000\u0000\u0cdb\u0cdc\u0001"+
		"\u0000\u0000\u0000\u0cdc\u0cde\u0001\u0000\u0000\u0000\u0cdd\u0cdb\u0001"+
		"\u0000\u0000\u0000\u0cde\u0cdf\u0005 \u0000\u0000\u0cdf\u01db\u0001\u0000"+
		"\u0000\u0000\u0ce0\u0ce1\u0005\u01a4\u0000\u0000\u0ce1\u0ce2\u0005\u0018"+
		"\u0000\u0000\u0ce2\u0ce9\u0007+\u0000\u0000\u0ce3\u0ce4\u0005a\u0000\u0000"+
		"\u0ce4\u0ce5\u0005\u00fd\u0000\u0000\u0ce5\u0ce6\u0005\u001f\u0000\u0000"+
		"\u0ce6\u0ce7\u0003\u00eau\u0000\u0ce7\u0ce8\u0005 \u0000\u0000\u0ce8\u0cea"+
		"\u0001\u0000\u0000\u0000\u0ce9\u0ce3\u0001\u0000\u0000\u0000\u0ce9\u0cea"+
		"\u0001\u0000\u0000\u0000\u0cea\u0d13\u0001\u0000\u0000\u0000\u0ceb\u0cec"+
		"\u0005\u01ba\u0000\u0000\u0cec\u0ced\u0005\u0018\u0000\u0000\u0ced\u0d13"+
		"\u0003\u00f4z\u0000\u0cee\u0cef\u0005\u01b9\u0000\u0000\u0cef\u0cf2\u0005"+
		"\u0018\u0000\u0000\u0cf0\u0cf3\u0003Z-\u0000\u0cf1\u0cf3\u0005\u01a3\u0000"+
		"\u0000\u0cf2\u0cf0\u0001\u0000\u0000\u0000\u0cf2\u0cf1\u0001\u0000\u0000"+
		"\u0000\u0cf3\u0d13\u0001\u0000\u0000\u0000\u0cf4\u0cf5\u0005\u01bc\u0000"+
		"\u0000\u0cf5\u0cf6\u0005\u0018\u0000\u0000\u0cf6\u0d13\u0003\u00f4z\u0000"+
		"\u0cf7\u0cf8\u0005\u01bd\u0000\u0000\u0cf8\u0cf9\u0005\u0018\u0000\u0000"+
		"\u0cf9\u0d13\u0003\u00f4z\u0000\u0cfa\u0cfb\u0005\u01bb\u0000\u0000\u0cfb"+
		"\u0cfc\u0005\u0018\u0000\u0000\u0cfc\u0d13\u0003\u00f4z\u0000\u0cfd\u0cfe"+
		"\u0005\u01a8\u0000\u0000\u0cfe\u0cff\u0005\u0018\u0000\u0000\u0cff\u0d01"+
		"\u0005a\u0000\u0000\u0d00\u0d02\u0003\u0234\u011a\u0000\u0d01\u0d00\u0001"+
		"\u0000\u0000\u0000\u0d01\u0d02\u0001\u0000\u0000\u0000\u0d02\u0d13\u0001"+
		"\u0000\u0000\u0000\u0d03\u0d04\u0005\u01b7\u0000\u0000\u0d04\u0d0b\u0005"+
		"\u0018\u0000\u0000\u0d05\u0d07\u0005a\u0000\u0000\u0d06\u0d08\u0003\u01e0"+
		"\u00f0\u0000\u0d07\u0d06\u0001\u0000\u0000\u0000\u0d07\u0d08\u0001\u0000"+
		"\u0000\u0000\u0d08\u0d0c\u0001\u0000\u0000\u0000\u0d09\u0d0a\u0005b\u0000"+
		"\u0000\u0d0a\u0d0c\u0003\u01e4\u00f2\u0000\u0d0b\u0d05\u0001\u0000\u0000"+
		"\u0000\u0d0b\u0d09\u0001\u0000\u0000\u0000\u0d0c\u0d13\u0001\u0000\u0000"+
		"\u0000\u0d0d\u0d13\u0003\u01e6\u00f3\u0000\u0d0e\u0d13\u0003\u01e8\u00f4"+
		"\u0000\u0d0f\u0d13\u0003\u01ea\u00f5\u0000\u0d10\u0d13\u0003\u01de\u00ef"+
		"\u0000\u0d11\u0d13\u0003\u01ec\u00f6\u0000\u0d12\u0ce0\u0001\u0000\u0000"+
		"\u0000\u0d12\u0ceb\u0001\u0000\u0000\u0000\u0d12\u0cee\u0001\u0000\u0000"+
		"\u0000\u0d12\u0cf4\u0001\u0000\u0000\u0000\u0d12\u0cf7\u0001\u0000\u0000"+
		"\u0000\u0d12\u0cfa\u0001\u0000\u0000\u0000\u0d12\u0cfd\u0001\u0000\u0000"+
		"\u0000\u0d12\u0d03\u0001\u0000\u0000\u0000\u0d12\u0d0d\u0001\u0000\u0000"+
		"\u0000\u0d12\u0d0e\u0001\u0000\u0000\u0000\u0d12\u0d0f\u0001\u0000\u0000"+
		"\u0000\u0d12\u0d10\u0001\u0000\u0000\u0000\u0d12\u0d11\u0001\u0000\u0000"+
		"\u0000\u0d13\u01dd\u0001\u0000\u0000\u0000\u0d14\u0d15\u0005\u01f9\u0000"+
		"\u0000\u0d15\u0d16\u0005\u0018\u0000\u0000\u0d16\u0d17\u0005a\u0000\u0000"+
		"\u0d17\u0d18\u0005\u001f\u0000\u0000\u0d18\u0d19\u0005\u01fa\u0000\u0000"+
		"\u0d19\u0d1a\u0005\u0018\u0000\u0000\u0d1a\u0d1b\u0003H$\u0000\u0d1b\u0d1c"+
		"\u0005%\u0000\u0000\u0d1c\u0d1d\u0005\u01fb\u0000\u0000\u0d1d\u0d1e\u0005"+
		"\u0018\u0000\u0000\u0d1e\u0d1f\u0003\u0226\u0113\u0000\u0d1f\u01df\u0001"+
		"\u0000\u0000\u0000\u0d20\u0d21\u0005\u001f\u0000\u0000\u0d21\u0d26\u0003"+
		"\u01e2\u00f1\u0000\u0d22\u0d23\u0005%\u0000\u0000\u0d23\u0d25\u0003\u01e2"+
		"\u00f1\u0000\u0d24\u0d22\u0001\u0000\u0000\u0000\u0d25\u0d28\u0001\u0000"+
		"\u0000\u0000\u0d26\u0d24\u0001\u0000\u0000\u0000\u0d26\u0d27\u0001\u0000"+
		"\u0000\u0000\u0d27\u0d29\u0001\u0000\u0000\u0000\u0d28\u0d26\u0001\u0000"+
		"\u0000\u0000\u0d29\u0d2a\u0005 \u0000\u0000\u0d2a\u01e1\u0001\u0000\u0000"+
		"\u0000\u0d2b\u0d2c\u0005\u01be\u0000\u0000\u0d2c\u0d2f\u0005\u0018\u0000"+
		"\u0000\u0d2d\u0d30\u0005l\u0000\u0000\u0d2e\u0d30\u0003v;\u0000\u0d2f"+
		"\u0d2d\u0001\u0000\u0000\u0000\u0d2f\u0d2e\u0001\u0000\u0000\u0000\u0d30"+
		"\u0d31\u0001\u0000\u0000\u0000\u0d31\u0d33\u0005%\u0000\u0000\u0d32\u0d2b"+
		"\u0001\u0000\u0000\u0000\u0d32\u0d33\u0001\u0000\u0000\u0000\u0d33\u0d34"+
		"\u0001\u0000\u0000\u0000\u0d34\u0d35\u0005\u01b5\u0000\u0000\u0d35\u0d36"+
		"\u0005\u0018\u0000\u0000\u0d36\u0d37\u0007,\u0000\u0000\u0d37\u01e3\u0001"+
		"\u0000\u0000\u0000\u0d38\u0d39\u0005\u001f\u0000\u0000\u0d39\u0d3a\u0005"+
		"\u01b5\u0000\u0000\u0d3a\u0d3b\u0005\u0018\u0000\u0000\u0d3b\u0d3c\u0005"+
		"\u013a\u0000\u0000\u0d3c\u0d3d\u0005 \u0000\u0000\u0d3d\u01e5\u0001\u0000"+
		"\u0000\u0000\u0d3e\u0d3f\u0005\u01b4\u0000\u0000\u0d3f\u0d40\u0005\u0018"+
		"\u0000\u0000\u0d40\u0d4b\u0005a\u0000\u0000\u0d41\u0d42\u0005\u0122\u0000"+
		"\u0000\u0d42\u0d43\u0005\u0018\u0000\u0000\u0d43\u0d4b\u0007-\u0000\u0000"+
		"\u0d44\u0d45\u0005\u01a8\u0000\u0000\u0d45\u0d46\u0005\u0018\u0000\u0000"+
		"\u0d46\u0d48\u0005a\u0000\u0000\u0d47\u0d49\u0003\u0234\u011a\u0000\u0d48"+
		"\u0d47\u0001\u0000\u0000\u0000\u0d48\u0d49\u0001\u0000\u0000\u0000\u0d49"+
		"\u0d4b\u0001\u0000\u0000\u0000\u0d4a\u0d3e\u0001\u0000\u0000\u0000\u0d4a"+
		"\u0d41\u0001\u0000\u0000\u0000\u0d4a\u0d44\u0001\u0000\u0000\u0000\u0d4b"+
		"\u01e7\u0001\u0000\u0000\u0000\u0d4c\u0d4d\u0005\u0120\u0000\u0000\u0d4d"+
		"\u0d55\u0005\u0018\u0000\u0000\u0d4e\u0d4f\u0005\u0129\u0000\u0000\u0d4f"+
		"\u0d50\u0005\u001f\u0000\u0000\u0d50\u0d51\u0003H$\u0000\u0d51\u0d52\u0005"+
		" \u0000\u0000\u0d52\u0d56\u0001\u0000\u0000\u0000\u0d53\u0d56\u0005\u01ad"+
		"\u0000\u0000\u0d54\u0d56\u0005\u0141\u0000\u0000\u0d55\u0d4e\u0001\u0000"+
		"\u0000\u0000\u0d55\u0d53\u0001\u0000\u0000\u0000\u0d55\u0d54\u0001\u0000"+
		"\u0000\u0000\u0d56\u01e9\u0001\u0000\u0000\u0000\u0d57\u0d58\u0005\u0113"+
		"\u0000\u0000\u0d58\u0d59\u0005\u0116\u0000\u0000\u0d59\u0d74\u0005>\u0000"+
		"\u0000\u0d5a\u0d5b\u0005\u0113\u0000\u0000\u0d5b\u0d5c\u0005\u0116\u0000"+
		"\u0000\u0d5c\u0d5d\u0005>\u0000\u0000\u0d5d\u0d5e\u0005u\u0000\u0000\u0d5e"+
		"\u0d74\u0003P(\u0000\u0d5f\u0d74\u0005\u012a\u0000\u0000\u0d60\u0d61\u0005"+
		"\u0113\u0000\u0000\u0d61\u0d62\u0005>\u0000\u0000\u0d62\u0d63\u0005\u001f"+
		"\u0000\u0000\u0d63\u0d65\u0003H$\u0000\u0d64\u0d66\u0007\u0013\u0000\u0000"+
		"\u0d65\u0d64\u0001\u0000\u0000\u0000\u0d65\u0d66\u0001\u0000\u0000\u0000"+
		"\u0d66\u0d6e\u0001\u0000\u0000\u0000\u0d67\u0d68\u0005%\u0000\u0000\u0d68"+
		"\u0d6a\u0003H$\u0000\u0d69\u0d6b\u0007\u0013\u0000\u0000\u0d6a\u0d69\u0001"+
		"\u0000\u0000\u0000\u0d6a\u0d6b\u0001\u0000\u0000\u0000\u0d6b\u0d6d\u0001"+
		"\u0000\u0000\u0000\u0d6c\u0d67\u0001\u0000\u0000\u0000\u0d6d\u0d70\u0001"+
		"\u0000\u0000\u0000\u0d6e\u0d6c\u0001\u0000\u0000\u0000\u0d6e\u0d6f\u0001"+
		"\u0000\u0000\u0000\u0d6f\u0d71\u0001\u0000\u0000\u0000\u0d70\u0d6e\u0001"+
		"\u0000\u0000\u0000\u0d71\u0d72\u0005 \u0000\u0000\u0d72\u0d74\u0001\u0000"+
		"\u0000\u0000\u0d73\u0d57\u0001\u0000\u0000\u0000\u0d73\u0d5a\u0001\u0000"+
		"\u0000\u0000\u0d73\u0d5f\u0001\u0000\u0000\u0000\u0d73\u0d60\u0001\u0000"+
		"\u0000\u0000\u0d74\u01eb\u0001\u0000\u0000\u0000\u0d75\u0d76\u0005\u00fc"+
		"\u0000\u0000\u0d76\u0d77\u0005\u001f\u0000\u0000\u0d77\u0d78\u0003H$\u0000"+
		"\u0d78\u0d7a\u0005\u013f\u0000\u0000\u0d79\u0d7b\u0007.\u0000\u0000\u0d7a"+
		"\u0d79\u0001\u0000\u0000\u0000\u0d7a\u0d7b\u0001\u0000\u0000\u0000\u0d7b"+
		"\u0d7c\u0001\u0000\u0000\u0000\u0d7c\u0d7d\u0005f\u0000\u0000\u0d7d\u0d7e"+
		"\u0005L\u0000\u0000\u0d7e\u0d7f\u0005\u001f\u0000\u0000\u0d7f\u0d84\u0003"+
		"t:\u0000\u0d80\u0d81\u0005%\u0000\u0000\u0d81\u0d83\u0003t:\u0000\u0d82"+
		"\u0d80\u0001\u0000\u0000\u0000\u0d83\u0d86\u0001\u0000\u0000\u0000\u0d84"+
		"\u0d82\u0001\u0000\u0000\u0000\u0d84\u0d85\u0001\u0000\u0000\u0000\u0d85"+
		"\u0d87\u0001\u0000\u0000\u0000\u0d86\u0d84\u0001\u0000\u0000\u0000\u0d87"+
		"\u0d88\u0005 \u0000\u0000\u0d88\u0d89\u0005 \u0000\u0000\u0d89\u01ed\u0001"+
		"\u0000\u0000\u0000\u0d8a\u0d8c\u0005A\u0000\u0000\u0d8b\u0d8a\u0001\u0000"+
		"\u0000\u0000\u0d8b\u0d8c\u0001\u0000\u0000\u0000\u0d8c\u0d8e\u0001\u0000"+
		"\u0000\u0000\u0d8d\u0d8f\u0003\u0194\u00ca\u0000\u0d8e\u0d8d\u0001\u0000"+
		"\u0000\u0000\u0d8e\u0d8f\u0001\u0000\u0000\u0000\u0d8f\u01ef\u0001\u0000"+
		"\u0000\u0000\u0d90\u0d9a\u0003\u01f2\u00f9\u0000\u0d91\u0d9a\u0003\u01f4"+
		"\u00fa\u0000\u0d92\u0d9a\u0003\u0204\u0102\u0000\u0d93\u0d9a\u0003\u0214"+
		"\u010a\u0000\u0d94\u0d9a\u0003\u0216\u010b\u0000\u0d95\u0d9a\u0003\u0218"+
		"\u010c\u0000\u0d96\u0d9a\u0003\u021a\u010d\u0000\u0d97\u0d9a\u0003\u0232"+
		"\u0119\u0000\u0d98\u0d9a\u0005\u0140\u0000\u0000\u0d99\u0d90\u0001\u0000"+
		"\u0000\u0000\u0d99\u0d91\u0001\u0000\u0000\u0000\u0d99\u0d92\u0001\u0000"+
		"\u0000\u0000\u0d99\u0d93\u0001\u0000\u0000\u0000\u0d99\u0d94\u0001\u0000"+
		"\u0000\u0000\u0d99\u0d95\u0001\u0000\u0000\u0000\u0d99\u0d96\u0001\u0000"+
		"\u0000\u0000\u0d99\u0d97\u0001\u0000\u0000\u0000\u0d99\u0d98\u0001\u0000"+
		"\u0000\u0000\u0d9a\u01f1\u0001\u0000\u0000\u0000\u0d9b\u0d9c\u0005M\u0000"+
		"\u0000\u0d9c\u0d9e\u0007/\u0000\u0000\u0d9d\u0d9b\u0001\u0000\u0000\u0000"+
		"\u0d9d\u0d9e\u0001\u0000\u0000\u0000\u0d9e\u0d9f\u0001\u0000\u0000\u0000"+
		"\u0d9f\u0da2\u00059\u0000\u0000\u0da0\u0da3\u0003\u01f8\u00fc\u0000\u0da1"+
		"\u0da3\u0003\u01fe\u00ff\u0000\u0da2\u0da0\u0001\u0000\u0000\u0000\u0da2"+
		"\u0da1\u0001\u0000\u0000\u0000\u0da3\u01f3\u0001\u0000\u0000\u0000\u0da4"+
		"\u0da5\u0003\u01f6\u00fb\u0000\u0da5\u0da8\u0003\u00bc^\u0000\u0da6\u0da7"+
		"\u0005\u0115\u0000\u0000\u0da7\u0da9\u0003Z-\u0000\u0da8\u0da6\u0001\u0000"+
		"\u0000\u0000\u0da8\u0da9\u0001\u0000\u0000\u0000\u0da9\u0dad\u0001\u0000"+
		"\u0000\u0000\u0daa\u0dae\u0005l\u0000\u0000\u0dab\u0dac\u0005k\u0000\u0000"+
		"\u0dac\u0dae\u0005l\u0000\u0000\u0dad\u0daa\u0001\u0000\u0000\u0000\u0dad"+
		"\u0dab\u0001\u0000\u0000\u0000\u0dad\u0dae\u0001\u0000\u0000\u0000\u0dae"+
		"\u0db0\u0001\u0000\u0000\u0000\u0daf\u0db1\u0005\u0147\u0000\u0000\u0db0"+
		"\u0daf\u0001\u0000\u0000\u0000\u0db0\u0db1\u0001\u0000\u0000\u0000\u0db1"+
		"\u01f5\u0001\u0000\u0000\u0000\u0db2\u0db3\u00053\u0000\u0000\u0db3\u0db4"+
		"\u0005<\u0000\u0000\u0db4\u0db5\u0003H$\u0000\u0db5\u01f7\u0001\u0000"+
		"\u0000\u0000\u0db6\u0dbb\u0003\u01fa\u00fd\u0000\u0db7\u0db8\u0005%\u0000"+
		"\u0000\u0db8\u0dba\u0003\u01fa\u00fd\u0000\u0db9\u0db7\u0001\u0000\u0000"+
		"\u0000\u0dba\u0dbd\u0001\u0000\u0000\u0000\u0dbb\u0db9\u0001\u0000\u0000"+
		"\u0000\u0dbb\u0dbc\u0001\u0000\u0000\u0000\u0dbc\u01f9\u0001\u0000\u0000"+
		"\u0000\u0dbd\u0dbb\u0001\u0000\u0000\u0000\u0dbe\u0dc5\u0003\u0182\u00c1"+
		"\u0000\u0dbf\u0dc5\u0003\u01b8\u00dc\u0000\u0dc0\u0dc5\u0003\u01ba\u00dd"+
		"\u0000\u0dc1\u0dc5\u0003\u01bc\u00de\u0000\u0dc2\u0dc5\u0003\u0228\u0114"+
		"\u0000\u0dc3\u0dc5\u0003\u01fc\u00fe\u0000\u0dc4\u0dbe\u0001\u0000\u0000"+
		"\u0000\u0dc4\u0dbf\u0001\u0000\u0000\u0000\u0dc4\u0dc0\u0001\u0000\u0000"+
		"\u0000\u0dc4\u0dc1\u0001\u0000\u0000\u0000\u0dc4\u0dc2\u0001\u0000\u0000"+
		"\u0000\u0dc4\u0dc3\u0001\u0000\u0000\u0000\u0dc5\u01fb\u0001\u0000\u0000"+
		"\u0000\u0dc6\u0dc7\u0005?\u0000\u0000\u0dc7\u0dc9\u0003X,\u0000\u0dc8"+
		"\u0dc6\u0001\u0000\u0000\u0000\u0dc8\u0dc9\u0001\u0000\u0000\u0000\u0dc9"+
		"\u0dca\u0001\u0000\u0000\u0000\u0dca\u0dcb\u0005\u009a\u0000\u0000\u0dcb"+
		"\u0dcc\u0003t:\u0000\u0dcc\u0dcd\u0005f\u0000\u0000\u0dcd\u0dce\u0003"+
		"H$\u0000\u0dce\u01fd\u0001\u0000\u0000\u0000\u0dcf\u0dd0\u0003\u0200\u0100"+
		"\u0000\u0dd0\u0dd1\u0005%\u0000\u0000\u0dd1\u0dd2\u0003\u01d4\u00ea\u0000"+
		"\u0dd2\u0dd8\u0001\u0000\u0000\u0000\u0dd3\u0dd4\u0003\u01d4\u00ea\u0000"+
		"\u0dd4\u0dd5\u0005%\u0000\u0000\u0dd5\u0dd6\u0003\u0200\u0100\u0000\u0dd6"+
		"\u0dd8\u0001\u0000\u0000\u0000\u0dd7\u0dcf\u0001\u0000\u0000\u0000\u0dd7"+
		"\u0dd3\u0001\u0000\u0000\u0000\u0dd8\u01ff\u0001\u0000\u0000\u0000\u0dd9"+
		"\u0dda\u0003\u0202\u0101\u0000\u0dda\u0ddb\u0005\u009a\u0000\u0000\u0ddb"+
		"\u0dde\u0003t:\u0000\u0ddc\u0ddd\u0005M\u0000\u0000\u0ddd\u0ddf\u0005"+
		"L\u0000\u0000\u0dde\u0ddc\u0001\u0000\u0000\u0000\u0dde\u0ddf\u0001\u0000"+
		"\u0000\u0000\u0ddf\u0de0\u0001\u0000\u0000\u0000\u0de0\u0de1\u0005%\u0000"+
		"\u0000\u0de1\u0de2\u0003\u0202\u0101\u0000\u0de2\u0201\u0001\u0000\u0000"+
		"\u0000\u0de3\u0de4\u0003H$\u0000\u0de4\u0de5\u0003\u00be_\u0000\u0de5"+
		"\u0de6\u0005\u0106\u0000\u0000\u0de6\u0de7\u0005\u0103\u0000\u0000\u0de7"+
		"\u0de8\u0005`\u0000\u0000\u0de8\u0dea\u0005\u00ff\u0000\u0000\u0de9\u0deb"+
		"\u0007&\u0000\u0000\u0dea\u0de9\u0001\u0000\u0000\u0000\u0dea\u0deb\u0001"+
		"\u0000\u0000\u0000\u0deb\u0ded\u0001\u0000\u0000\u0000\u0dec\u0dee\u0005"+
		"\u00fa\u0000\u0000\u0ded\u0dec\u0001\u0000\u0000\u0000\u0ded\u0dee\u0001"+
		"\u0000\u0000\u0000\u0dee\u0df1\u0001\u0000\u0000\u0000\u0def\u0df0\u0005"+
		"k\u0000\u0000\u0df0\u0df2\u0005l\u0000\u0000\u0df1\u0def\u0001\u0000\u0000"+
		"\u0000\u0df1\u0df2\u0001\u0000\u0000\u0000\u0df2\u0df5\u0001\u0000\u0000"+
		"\u0000\u0df3\u0df4\u0005?\u0000\u0000\u0df4\u0df6\u0003\u00f4z\u0000\u0df5"+
		"\u0df3\u0001\u0000\u0000\u0000\u0df5\u0df6\u0001\u0000\u0000\u0000\u0df6"+
		"\u0203\u0001\u0000\u0000\u0000\u0df7\u0dfe\u00054\u0000\u0000\u0df8\u0dff"+
		"\u0003\u0206\u0103\u0000\u0df9\u0dff\u0003\u0210\u0108\u0000\u0dfa\u0dff"+
		"\u0003\u0212\u0109\u0000\u0dfb\u0dfc\u0005\u013b\u0000\u0000\u0dfc\u0dfd"+
		"\u0005f\u0000\u0000\u0dfd\u0dff\u0005\u01a7\u0000\u0000\u0dfe\u0df8\u0001"+
		"\u0000\u0000\u0000\u0dfe\u0df9\u0001\u0000\u0000\u0000\u0dfe\u0dfa\u0001"+
		"\u0000\u0000\u0000\u0dfe\u0dfb\u0001\u0000\u0000\u0000\u0dff\u0205\u0001"+
		"\u0000\u0000\u0000\u0e00\u0e02\u0005?\u0000\u0000\u0e01\u0e00\u0001\u0000"+
		"\u0000\u0000\u0e01\u0e02\u0001\u0000\u0000\u0000\u0e02\u0e04\u0001\u0000"+
		"\u0000\u0000\u0e03\u0e05\u0003\u0108\u0084\u0000\u0e04\u0e03\u0001\u0000"+
		"\u0000\u0000\u0e04\u0e05\u0001\u0000\u0000\u0000\u0e05\u0e06\u0001\u0000"+
		"\u0000\u0000\u0e06\u0e0b\u0003\u0208\u0104\u0000\u0e07\u0e08\u0005%\u0000"+
		"\u0000\u0e08\u0e0a\u0003\u0208\u0104\u0000\u0e09\u0e07\u0001\u0000\u0000"+
		"\u0000\u0e0a\u0e0d\u0001\u0000\u0000\u0000\u0e0b\u0e09\u0001\u0000\u0000"+
		"\u0000\u0e0b\u0e0c\u0001\u0000\u0000\u0000\u0e0c\u0207\u0001\u0000\u0000"+
		"\u0000\u0e0d\u0e0b\u0001\u0000\u0000\u0000\u0e0e\u0e10\u0003X,\u0000\u0e0f"+
		"\u0e11\u0003\u020a\u0105\u0000\u0e10\u0e0f\u0001\u0000\u0000\u0000\u0e10"+
		"\u0e11\u0001\u0000\u0000\u0000\u0e11\u0209\u0001\u0000\u0000\u0000\u0e12"+
		"\u0e13\u0005M\u0000\u0000\u0e13\u0e14\u0005\u001f\u0000\u0000\u0e14\u0e19"+
		"\u0003\u020c\u0106\u0000\u0e15\u0e16\u0005%\u0000\u0000\u0e16\u0e18\u0003"+
		"\u020c\u0106\u0000\u0e17\u0e15\u0001\u0000\u0000\u0000\u0e18\u0e1b\u0001"+
		"\u0000\u0000\u0000\u0e19\u0e17\u0001\u0000\u0000\u0000\u0e19\u0e1a\u0001"+
		"\u0000\u0000\u0000\u0e1a\u0e1c\u0001\u0000\u0000\u0000\u0e1b\u0e19\u0001"+
		"\u0000\u0000\u0000\u0e1c\u0e1d\u0005 \u0000\u0000\u0e1d\u020b\u0001\u0000"+
		"\u0000\u0000\u0e1e\u0e1f\u0005\u0132\u0000\u0000\u0e1f\u0e20\u0005\u0018"+
		"\u0000\u0000\u0e20\u0e30\u0005\u02e0\u0000\u0000\u0e21\u0e22\u0005\u0137"+
		"\u0000\u0000\u0e22\u0e23\u0005\u0018\u0000\u0000\u0e23\u0e30\u0003\u020e"+
		"\u0107\u0000\u0e24\u0e25\u0005\u0133\u0000\u0000\u0e25\u0e2d\u0005g\u0000"+
		"\u0000\u0e26\u0e27\u00034\u001a\u0000\u0e27\u0e28\u0005\u001f\u0000\u0000"+
		"\u0e28\u0e29\u0003H$\u0000\u0e29\u0e2a\u0005 \u0000\u0000\u0e2a\u0e2e"+
		"\u0001\u0000\u0000\u0000\u0e2b\u0e2e\u0003\u00f4z\u0000\u0e2c\u0e2e\u0005"+
		"\u02df\u0000\u0000\u0e2d\u0e26\u0001\u0000\u0000\u0000\u0e2d\u0e2b\u0001"+
		"\u0000\u0000\u0000\u0e2d\u0e2c\u0001\u0000\u0000\u0000\u0e2e\u0e30\u0001"+
		"\u0000\u0000\u0000\u0e2f\u0e1e\u0001\u0000\u0000\u0000\u0e2f\u0e21\u0001"+
		"\u0000\u0000\u0000\u0e2f\u0e24\u0001\u0000\u0000\u0000\u0e30\u020d\u0001"+
		"\u0000\u0000\u0000\u0e31\u0e32\u0007\u0000\u0000\u0000\u0e32\u020f\u0001"+
		"\u0000\u0000\u0000\u0e33\u0e35\u0005<\u0000\u0000\u0e34\u0e36\u0003\u0108"+
		"\u0084\u0000\u0e35\u0e34\u0001\u0000\u0000\u0000\u0e35\u0e36\u0001\u0000"+
		"\u0000\u0000\u0e36\u0e37\u0001\u0000\u0000\u0000\u0e37\u0e3c\u0003H$\u0000"+
		"\u0e38\u0e39\u0005%\u0000\u0000\u0e39\u0e3b\u0003H$\u0000\u0e3a\u0e38"+
		"\u0001\u0000\u0000\u0000\u0e3b\u0e3e\u0001\u0000\u0000\u0000\u0e3c\u0e3a"+
		"\u0001\u0000\u0000\u0000\u0e3c\u0e3d\u0001\u0000\u0000\u0000\u0e3d\u0211"+
		"\u0001\u0000\u0000\u0000\u0e3e\u0e3c\u0001\u0000\u0000\u0000\u0e3f\u0e41"+
		"\u0005>\u0000\u0000\u0e40\u0e42\u0003\u0108\u0084\u0000\u0e41\u0e40\u0001"+
		"\u0000\u0000\u0000\u0e41\u0e42\u0001\u0000\u0000\u0000\u0e42\u0e43\u0001"+
		"\u0000\u0000\u0000\u0e43\u0e48\u0003V+\u0000\u0e44\u0e45\u0005%\u0000"+
		"\u0000\u0e45\u0e47\u0003V+\u0000\u0e46\u0e44\u0001\u0000\u0000\u0000\u0e47"+
		"\u0e4a\u0001\u0000\u0000\u0000\u0e48\u0e46\u0001\u0000\u0000\u0000\u0e48"+
		"\u0e49\u0001\u0000\u0000\u0000\u0e49\u0213\u0001\u0000\u0000\u0000\u0e4a"+
		"\u0e48\u0001\u0000\u0000\u0000\u0e4b\u0e4d\u0005M\u0000\u0000\u0e4c\u0e4b"+
		"\u0001\u0000\u0000\u0000\u0e4c\u0e4d\u0001\u0000\u0000\u0000\u0e4d\u0e4e"+
		"\u0001\u0000\u0000\u0000\u0e4e\u0e4f\u0007/\u0000\u0000\u0e4f\u0e52\u0005"+
		"?\u0000\u0000\u0e50\u0e53\u0005r\u0000\u0000\u0e51\u0e53\u0003X,\u0000"+
		"\u0e52\u0e50\u0001\u0000\u0000\u0000\u0e52\u0e51\u0001\u0000\u0000\u0000"+
		"\u0e53\u0215\u0001\u0000\u0000\u0000\u0e54\u0e55\u00070\u0000\u0000\u0e55"+
		"\u0e58\u0005G\u0000\u0000\u0e56\u0e59\u0005r\u0000\u0000\u0e57\u0e59\u0003"+
		"\u00f6{\u0000\u0e58\u0e56\u0001\u0000\u0000\u0000\u0e58\u0e57\u0001\u0000"+
		"\u0000\u0000\u0e59\u0217\u0001\u0000\u0000\u0000\u0e5a\u0e5d\u0005\u0148"+
		"\u0000\u0000\u0e5b\u0e5c\u0005\u00fc\u0000\u0000\u0e5c\u0e5e\u0003b1\u0000"+
		"\u0e5d\u0e5b\u0001\u0000\u0000\u0000\u0e5d\u0e5e\u0001\u0000\u0000\u0000"+
		"\u0e5e\u0e5f\u0001\u0000\u0000\u0000\u0e5f\u0e60\u0005g\u0000\u0000\u0e60"+
		"\u0e63\u0003@ \u0000\u0e61\u0e62\u0005\u00fc\u0000\u0000\u0e62\u0e64\u0003"+
		"b1\u0000\u0e63\u0e61\u0001\u0000\u0000\u0000\u0e63\u0e64\u0001\u0000\u0000"+
		"\u0000\u0e64\u0e6a\u0001\u0000\u0000\u0000\u0e65\u0e66\u0005M\u0000\u0000"+
		"\u0e66\u0e67\u0005\u001f\u0000\u0000\u0e67\u0e68\u0003\u00f0x\u0000\u0e68"+
		"\u0e69\u0005 \u0000\u0000\u0e69\u0e6b\u0001\u0000\u0000\u0000\u0e6a\u0e65"+
		"\u0001\u0000\u0000\u0000\u0e6a\u0e6b\u0001\u0000\u0000\u0000\u0e6b\u0219"+
		"\u0001\u0000\u0000\u0000\u0e6c\u0e6d\u0005:\u0000\u0000\u0e6d\u0e70\u0005"+
		"\u001f\u0000\u0000\u0e6e\u0e71\u0003\u021c\u010e\u0000\u0e6f\u0e71\u0003"+
		"\u021e\u010f\u0000\u0e70\u0e6e\u0001\u0000\u0000\u0000\u0e70\u0e6f\u0001"+
		"\u0000\u0000\u0000\u0e71\u0e72\u0001\u0000\u0000\u0000\u0e72\u0e73\u0005"+
		" \u0000\u0000\u0e73\u021b\u0001\u0000\u0000\u0000\u0e74\u0e75\u0005\u01b8"+
		"\u0000\u0000\u0e75\u0e79\u0005\u0018\u0000\u0000\u0e76\u0e7a\u00034\u001a"+
		"\u0000\u0e77\u0e7a\u0003\u00f4z\u0000\u0e78\u0e7a\u0005\u02df\u0000\u0000"+
		"\u0e79\u0e76\u0001\u0000\u0000\u0000\u0e79\u0e77\u0001\u0000\u0000\u0000"+
		"\u0e79\u0e78\u0001\u0000\u0000\u0000\u0e7a\u021d\u0001\u0000\u0000\u0000"+
		"\u0e7b\u0e7c\u0005\u01a8\u0000\u0000\u0e7c\u0e82\u0005\u0018\u0000\u0000"+
		"\u0e7d\u0e83\u0005b\u0000\u0000\u0e7e\u0e80\u0005a\u0000\u0000\u0e7f\u0e81"+
		"\u0003\u0220\u0110\u0000\u0e80\u0e7f\u0001\u0000\u0000\u0000\u0e80\u0e81"+
		"\u0001\u0000\u0000\u0000\u0e81\u0e83\u0001\u0000\u0000\u0000\u0e82\u0e7d"+
		"\u0001\u0000\u0000\u0000\u0e82\u0e7e\u0001\u0000\u0000\u0000\u0e83\u021f"+
		"\u0001\u0000\u0000\u0000\u0e84\u0e88\u0005\u001f\u0000\u0000\u0e85\u0e86"+
		"\u0005\u01c0\u0000\u0000\u0e86\u0e87\u0005\u0018\u0000\u0000\u0e87\u0e89"+
		"\u0003@ \u0000\u0e88\u0e85\u0001\u0000\u0000\u0000\u0e88\u0e89\u0001\u0000"+
		"\u0000\u0000\u0e89\u0e8b\u0001\u0000\u0000\u0000\u0e8a\u0e8c\u0003\u0222"+
		"\u0111\u0000\u0e8b\u0e8a\u0001\u0000\u0000\u0000\u0e8b\u0e8c\u0001\u0000"+
		"\u0000\u0000\u0e8c\u0e8e\u0001\u0000\u0000\u0000\u0e8d\u0e8f\u0003\u0224"+
		"\u0112\u0000\u0e8e\u0e8d\u0001\u0000\u0000\u0000\u0e8e\u0e8f\u0001\u0000"+
		"\u0000\u0000\u0e8f\u0e90\u0001\u0000\u0000\u0000\u0e90\u0e91\u0005 \u0000"+
		"\u0000\u0e91\u0221\u0001\u0000\u0000\u0000\u0e92\u0e94\u0005%\u0000\u0000"+
		"\u0e93\u0e92\u0001\u0000\u0000\u0000\u0e93\u0e94\u0001\u0000\u0000\u0000"+
		"\u0e94\u0e95\u0001\u0000\u0000\u0000\u0e95\u0e96\u0005\u01a5\u0000\u0000"+
		"\u0e96\u0e97\u0005\u0018\u0000\u0000\u0e97\u0e98\u0003\u020e\u0107\u0000"+
		"\u0e98\u0223\u0001\u0000\u0000\u0000\u0e99\u0e9b\u0005%\u0000\u0000\u0e9a"+
		"\u0e99\u0001\u0000\u0000\u0000\u0e9a\u0e9b\u0001\u0000\u0000\u0000\u0e9b"+
		"\u0e9c\u0001\u0000\u0000\u0000\u0e9c\u0e9d\u0005\u01bf\u0000\u0000\u0e9d"+
		"\u0e9e\u0005\u0018\u0000\u0000\u0e9e\u0e9f\u0003\u0226\u0113\u0000\u0e9f"+
		"\u0225\u0001\u0000\u0000\u0000\u0ea0\u0ea4\u0005\u012f\u0000\u0000\u0ea1"+
		"\u0ea2\u0005\u02e0\u0000\u0000\u0ea2\u0ea4\u00071\u0000\u0000\u0ea3\u0ea0"+
		"\u0001\u0000\u0000\u0000\u0ea3\u0ea1\u0001\u0000\u0000\u0000\u0ea4\u0227"+
		"\u0001\u0000\u0000\u0000\u0ea5\u0ea8\u0003\u022a\u0115\u0000\u0ea6\u0ea9"+
		"\u0003\u022c\u0116\u0000\u0ea7\u0ea9\u0003\u0230\u0118\u0000\u0ea8\u0ea6"+
		"\u0001\u0000\u0000\u0000\u0ea8\u0ea7\u0001\u0000\u0000\u0000\u0ea9\u0229"+
		"\u0001\u0000\u0000\u0000\u0eaa\u0eab\u0005>\u0000\u0000\u0eab\u0eac\u0003"+
		"V+\u0000\u0eac\u022b\u0001\u0000\u0000\u0000\u0ead\u0eb3\u0005\u0114\u0000"+
		"\u0000\u0eae\u0eb4\u0003\u01ca\u00e5\u0000\u0eaf\u0eb1\u0003R)\u0000\u0eb0"+
		"\u0eb2\u0003\u022e\u0117\u0000\u0eb1\u0eb0\u0001\u0000\u0000\u0000\u0eb1"+
		"\u0eb2\u0001\u0000\u0000\u0000\u0eb2\u0eb4\u0001\u0000\u0000\u0000\u0eb3"+
		"\u0eae\u0001\u0000\u0000\u0000\u0eb3\u0eaf\u0001\u0000\u0000\u0000\u0eb4"+
		"\u022d\u0001\u0000\u0000\u0000\u0eb5\u0eb6\u0005a\u0000\u0000\u0eb6\u0eb9"+
		"\u0003\u00f4z\u0000\u0eb7\u0eb9\u0005\u009a\u0000\u0000\u0eb8\u0eb5\u0001"+
		"\u0000\u0000\u0000\u0eb8\u0eb7\u0001\u0000\u0000\u0000\u0eb9\u022f\u0001"+
		"\u0000\u0000\u0000\u0eba\u0ebb\u0005\u0113\u0000\u0000\u0ebb\u0ec3\u0005"+
		"\u0116\u0000\u0000\u0ebc\u0ebd\u0005M\u0000\u0000\u0ebd\u0ebe\u0005\u01a2"+
		"\u0000\u0000\u0ebe\u0ebf\u0005\u0018\u0000\u0000\u0ebf\u0ec1\u0005\u02e0"+
		"\u0000\u0000\u0ec0\u0ec2\u0005\u011d\u0000\u0000\u0ec1\u0ec0\u0001\u0000"+
		"\u0000\u0000\u0ec1\u0ec2\u0001\u0000\u0000\u0000\u0ec2\u0ec4\u0001\u0000"+
		"\u0000\u0000\u0ec3\u0ebc\u0001\u0000\u0000\u0000\u0ec3\u0ec4\u0001\u0000"+
		"\u0000\u0000\u0ec4\u0ec6\u0001\u0000\u0000\u0000\u0ec5\u0ec7\u0003\u01b0"+
		"\u00d8\u0000\u0ec6\u0ec5\u0001\u0000\u0000\u0000\u0ec6\u0ec7\u0001\u0000"+
		"\u0000\u0000\u0ec7\u0231\u0001\u0000\u0000\u0000\u0ec8\u0ec9\u0005:\u0000"+
		"\u0000\u0ec9\u0eca\u0005\u001f\u0000\u0000\u0eca\u0ecb\u0005\u01c1\u0000"+
		"\u0000\u0ecb\u0ecc\u0005\u0018\u0000\u0000\u0ecc\u0ecd\u00072\u0000\u0000"+
		"\u0ecd\u0edb\u0005 \u0000\u0000\u0ece\u0ecf\u0005\u01b4\u0000\u0000\u0ecf"+
		"\u0ed0\u0005\u0018\u0000\u0000\u0ed0\u0edb\u0005a\u0000\u0000\u0ed1\u0ed2"+
		"\u0005\u0122\u0000\u0000\u0ed2\u0ed3\u0005\u0018\u0000\u0000\u0ed3\u0edb"+
		"\u0007-\u0000\u0000\u0ed4\u0ed5\u0005\u01a8\u0000\u0000\u0ed5\u0ed6\u0005"+
		"\u0018\u0000\u0000\u0ed6\u0ed8\u0005a\u0000\u0000\u0ed7\u0ed9\u0003\u0234"+
		"\u011a\u0000\u0ed8\u0ed7\u0001\u0000\u0000\u0000\u0ed8\u0ed9\u0001\u0000"+
		"\u0000\u0000\u0ed9\u0edb\u0001\u0000\u0000\u0000\u0eda\u0ec8\u0001\u0000"+
		"\u0000\u0000\u0eda\u0ece\u0001\u0000\u0000\u0000\u0eda\u0ed1\u0001\u0000"+
		"\u0000\u0000\u0eda\u0ed4\u0001\u0000\u0000\u0000\u0edb\u0233\u0001\u0000"+
		"\u0000\u0000\u0edc\u0edd\u0005\u001f\u0000\u0000\u0edd\u0ede\u0005\u01c0"+
		"\u0000\u0000\u0ede\u0edf\u0005\u0018\u0000\u0000\u0edf\u0ee4\u0003@ \u0000"+
		"\u0ee0\u0ee1\u0005%\u0000\u0000\u0ee1\u0ee2\u0005\u01a5\u0000\u0000\u0ee2"+
		"\u0ee3\u0005\u0018\u0000\u0000\u0ee3\u0ee5\u0003\u020e\u0107\u0000\u0ee4"+
		"\u0ee0\u0001\u0000\u0000\u0000\u0ee4\u0ee5\u0001\u0000\u0000\u0000\u0ee5"+
		"\u0ee6\u0001\u0000\u0000\u0000\u0ee6\u0ee7\u0005 \u0000\u0000\u0ee7\u0235"+
		"\u0001\u0000\u0000\u0000\u0ee8\u0ee9\u0005\u01fc\u0000\u0000\u0ee9\u0eea"+
		"\u0005\u0018\u0000\u0000\u0eea\u0eec\u00073\u0000\u0000\u0eeb\u0ee8\u0001"+
		"\u0000\u0000\u0000\u0eeb\u0eec\u0001\u0000\u0000\u0000\u0eec\u0eee\u0001"+
		"\u0000\u0000\u0000\u0eed\u0eef\u0003\u0238\u011c\u0000\u0eee\u0eed\u0001"+
		"\u0000\u0000\u0000\u0eee\u0eef\u0001\u0000\u0000\u0000\u0eef\u0ef2\u0001"+
		"\u0000\u0000\u0000\u0ef0\u0ef1\u0005\u0115\u0000\u0000\u0ef1\u0ef3\u0003"+
		"\u00f4z\u0000\u0ef2\u0ef0\u0001\u0000\u0000\u0000\u0ef2\u0ef3\u0001\u0000"+
		"\u0000\u0000\u0ef3\u0efd\u0001\u0000\u0000\u0000\u0ef4\u0ef5\u0005M\u0000"+
		"\u0000\u0ef5\u0efa\u0003\u023a\u011d\u0000\u0ef6\u0ef7\u0005%\u0000\u0000"+
		"\u0ef7\u0ef9\u0003\u023a\u011d\u0000\u0ef8\u0ef6\u0001\u0000\u0000\u0000"+
		"\u0ef9\u0efc\u0001\u0000\u0000\u0000\u0efa\u0ef8\u0001\u0000\u0000\u0000"+
		"\u0efa\u0efb\u0001\u0000\u0000\u0000\u0efb\u0efe\u0001\u0000\u0000\u0000"+
		"\u0efc\u0efa\u0001\u0000\u0000\u0000\u0efd\u0ef4\u0001\u0000\u0000\u0000"+
		"\u0efd\u0efe\u0001\u0000\u0000\u0000\u0efe\u0237\u0001\u0000\u0000\u0000"+
		"\u0eff\u0f01\u0005a\u0000\u0000\u0f00\u0f02\u0005@\u0000\u0000\u0f01\u0f00"+
		"\u0001\u0000\u0000\u0000\u0f01\u0f02\u0001\u0000\u0000\u0000\u0f02\u0f03"+
		"\u0001\u0000\u0000\u0000\u0f03\u0f08\u0003\u023e\u011f\u0000\u0f04\u0f05"+
		"\u0005%\u0000\u0000\u0f05\u0f07\u0003\u023e\u011f\u0000\u0f06\u0f04\u0001"+
		"\u0000\u0000\u0000\u0f07\u0f0a\u0001\u0000\u0000\u0000\u0f08\u0f06\u0001"+
		"\u0000\u0000\u0000\u0f08\u0f09\u0001\u0000\u0000\u0000\u0f09\u0f0f\u0001"+
		"\u0000\u0000\u0000\u0f0a\u0f08\u0001\u0000\u0000\u0000\u0f0b\u0f0c\u0005"+
		"%\u0000\u0000\u0f0c\u0f0e\u0003\u0242\u0121\u0000\u0f0d\u0f0b\u0001\u0000"+
		"\u0000\u0000\u0f0e\u0f11\u0001\u0000\u0000\u0000\u0f0f\u0f0d\u0001\u0000"+
		"\u0000\u0000\u0f0f\u0f10\u0001\u0000\u0000\u0000\u0f10\u0f12\u0001\u0000"+
		"\u0000\u0000\u0f11\u0f0f\u0001\u0000\u0000\u0000\u0f12\u0f13\u0003\u0246"+
		"\u0123\u0000\u0f13\u0239\u0001\u0000\u0000\u0000\u0f14\u0f15\u0005\u0125"+
		"\u0000\u0000\u0f15\u0f1a\u0003\u023c\u011e\u0000\u0f16\u0f17\u0005%\u0000"+
		"\u0000\u0f17\u0f19\u0003\u023c\u011e\u0000\u0f18\u0f16\u0001\u0000\u0000"+
		"\u0000\u0f19\u0f1c\u0001\u0000\u0000\u0000\u0f1a\u0f18\u0001\u0000\u0000"+
		"\u0000\u0f1a\u0f1b\u0001\u0000\u0000\u0000\u0f1b\u0f37\u0001\u0000\u0000"+
		"\u0000\u0f1c\u0f1a\u0001\u0000\u0000\u0000\u0f1d\u0f1e\u0005\u0296\u0000"+
		"\u0000\u0f1e\u0f1f\u0005\u0018\u0000\u0000\u0f1f\u0f37\u0003\u00f4z\u0000"+
		"\u0f20\u0f21\u0005\u0297\u0000\u0000\u0f21\u0f22\u0005\u0018\u0000\u0000"+
		"\u0f22\u0f37\u0003\u00f4z\u0000\u0f23\u0f24\u0005\u0299\u0000\u0000\u0f24"+
		"\u0f25\u0005\u0018\u0000\u0000\u0f25\u0f37\u0007\u0000\u0000\u0000\u0f26"+
		"\u0f27\u0005\u029a\u0000\u0000\u0f27\u0f28\u0005\u0018\u0000\u0000\u0f28"+
		"\u0f37\u0007\u0000\u0000\u0000\u0f29\u0f2a\u0005\u029b\u0000\u0000\u0f2a"+
		"\u0f2b\u0005\u0018\u0000\u0000\u0f2b\u0f37\u0003\u00f4z\u0000\u0f2c\u0f2d"+
		"\u0005\u020b\u0000\u0000\u0f2d\u0f37\u0007\u0000\u0000\u0000\u0f2e\u0f2f"+
		"\u0005\u020c\u0000\u0000\u0f2f\u0f37\u0007\u0000\u0000\u0000\u0f30\u0f31"+
		"\u0005\u029c\u0000\u0000\u0f31\u0f32\u0005\u0018\u0000\u0000\u0f32\u0f33"+
		"\u0005a\u0000\u0000\u0f33\u0f34\u0005\u029d\u0000\u0000\u0f34\u0f35\u0005"+
		"\u0018\u0000\u0000\u0f35\u0f37\u0003\u00f4z\u0000\u0f36\u0f14\u0001\u0000"+
		"\u0000\u0000\u0f36\u0f1d\u0001\u0000\u0000\u0000\u0f36\u0f20\u0001\u0000"+
		"\u0000\u0000\u0f36\u0f23\u0001\u0000\u0000\u0000\u0f36\u0f26\u0001\u0000"+
		"\u0000\u0000\u0f36\u0f29\u0001\u0000\u0000\u0000\u0f36\u0f2c\u0001\u0000"+
		"\u0000\u0000\u0f36\u0f2e\u0001\u0000\u0000\u0000\u0f36\u0f30\u0001\u0000"+
		"\u0000\u0000\u0f37\u023b\u0001\u0000\u0000\u0000\u0f38\u0f39\u0005\u020a"+
		"\u0000\u0000\u0f39\u0f3a\u0005\u0018\u0000\u0000\u0f3a\u0f3f\u00074\u0000"+
		"\u0000\u0f3b\u0f3c\u0005\u029d\u0000\u0000\u0f3c\u0f3d\u0005\u0018\u0000"+
		"\u0000\u0f3d\u0f3f\u0003\u00f4z\u0000\u0f3e\u0f38\u0001\u0000\u0000\u0000"+
		"\u0f3e\u0f3b\u0001\u0000\u0000\u0000\u0f3f\u023d\u0001\u0000\u0000\u0000"+
		"\u0f40\u0f41\u0005\u001f\u0000\u0000\u0f41\u0f42\u0005\u00aa\u0000\u0000"+
		"\u0f42\u0f43\u0005\u0018\u0000\u0000\u0f43\u0f44\u0003\u00f4z\u0000\u0f44"+
		"\u0f45\u0005%\u0000\u0000\u0f45\u0f46\u0005\u01fe\u0000\u0000\u0f46\u0f47"+
		"\u0005\u0018\u0000\u0000\u0f47\u0f48\u0005\u02df\u0000\u0000\u0f48\u0f49"+
		"\u0003\u0240\u0120\u0000\u0f49\u0f4a\u0005 \u0000\u0000\u0f4a\u023f\u0001"+
		"\u0000\u0000\u0000\u0f4b\u0f4c\u0005%\u0000\u0000\u0f4c\u0f4d\u0005\u01ff"+
		"\u0000\u0000\u0f4d\u0f4e\u0005\u0018\u0000\u0000\u0f4e\u0f50\u0003\u001e"+
		"\u000f\u0000\u0f4f\u0f51\u00075\u0000\u0000\u0f50\u0f4f\u0001\u0000\u0000"+
		"\u0000\u0f50\u0f51\u0001\u0000\u0000\u0000\u0f51\u0f53\u0001\u0000\u0000"+
		"\u0000\u0f52\u0f4b\u0001\u0000\u0000\u0000\u0f52\u0f53\u0001\u0000\u0000"+
		"\u0000\u0f53\u0f5e\u0001\u0000\u0000\u0000\u0f54\u0f55\u0005%\u0000\u0000"+
		"\u0f55\u0f56\u0005\u0200\u0000\u0000\u0f56\u0f5c\u0005\u0018\u0000\u0000"+
		"\u0f57\u0f59\u0003\u001e\u000f\u0000\u0f58\u0f5a\u00075\u0000\u0000\u0f59"+
		"\u0f58\u0001\u0000\u0000\u0000\u0f59\u0f5a\u0001\u0000\u0000\u0000\u0f5a"+
		"\u0f5d\u0001\u0000\u0000\u0000\u0f5b\u0f5d\u0005\u0202\u0000\u0000\u0f5c"+
		"\u0f57\u0001\u0000\u0000\u0000\u0f5c\u0f5b\u0001\u0000\u0000\u0000\u0f5d"+
		"\u0f5f\u0001\u0000\u0000\u0000\u0f5e\u0f54\u0001\u0000\u0000\u0000\u0f5e"+
		"\u0f5f\u0001\u0000\u0000\u0000\u0f5f\u0f67\u0001\u0000\u0000\u0000\u0f60"+
		"\u0f61\u0005%\u0000\u0000\u0f61\u0f62\u0005\u0201\u0000\u0000\u0f62\u0f63"+
		"\u0005\u0018\u0000\u0000\u0f63\u0f65\u0003\u001e\u000f\u0000\u0f64\u0f66"+
		"\u00076\u0000\u0000\u0f65\u0f64\u0001\u0000\u0000\u0000\u0f65\u0f66\u0001"+
		"\u0000\u0000\u0000\u0f66\u0f68\u0001\u0000\u0000\u0000\u0f67\u0f60\u0001"+
		"\u0000\u0000\u0000\u0f67\u0f68\u0001\u0000\u0000\u0000\u0f68\u0241\u0001"+
		"\u0000\u0000\u0000\u0f69\u0f6a\u0005\u0209\u0000\u0000\u0f6a\u0f6c\u0003"+
		"\u00f4z\u0000\u0f6b\u0f6d\u0003\u0244\u0122\u0000\u0f6c\u0f6b\u0001\u0000"+
		"\u0000\u0000\u0f6c\u0f6d\u0001\u0000\u0000\u0000\u0f6d\u0f6e\u0001\u0000"+
		"\u0000\u0000\u0f6e\u0f73\u0003\u023e\u011f\u0000\u0f6f\u0f70\u0005%\u0000"+
		"\u0000\u0f70\u0f72\u0003\u023e\u011f\u0000\u0f71\u0f6f\u0001\u0000\u0000"+
		"\u0000\u0f72\u0f75\u0001\u0000\u0000\u0000\u0f73\u0f71\u0001\u0000\u0000"+
		"\u0000\u0f73\u0f74\u0001\u0000\u0000\u0000\u0f74\u0243\u0001\u0000\u0000"+
		"\u0000\u0f75\u0f73\u0001\u0000\u0000\u0000\u0f76\u0f77\u0005\u0207\u0000"+
		"\u0000\u0f77\u0f79\u0005\u0125\u0000\u0000\u0f78\u0f76\u0001\u0000\u0000"+
		"\u0000\u0f78\u0f79\u0001\u0000\u0000\u0000\u0f79\u0f7b\u0001\u0000\u0000"+
		"\u0000\u0f7a\u0f7c\u0005\u009a\u0000\u0000\u0f7b\u0f7a\u0001\u0000\u0000"+
		"\u0000\u0f7b\u0f7c\u0001\u0000\u0000\u0000\u0f7c\u0f80\u0001\u0000\u0000"+
		"\u0000\u0f7d\u0f7e\u0005\u0207\u0000\u0000\u0f7e\u0f80\u0005\u0208\u0000"+
		"\u0000\u0f7f\u0f78\u0001\u0000\u0000\u0000\u0f7f\u0f7d\u0001\u0000\u0000"+
		"\u0000\u0f80\u0245\u0001\u0000\u0000\u0000\u0f81\u0f82\u0005\u0193\u0000"+
		"\u0000\u0f82\u0f83\u0005a\u0000\u0000\u0f83\u0f88\u0003\u023e\u011f\u0000"+
		"\u0f84\u0f85\u0005%\u0000\u0000\u0f85\u0f87\u0003\u023e\u011f\u0000\u0f86"+
		"\u0f84\u0001\u0000\u0000\u0000\u0f87\u0f8a\u0001\u0000\u0000\u0000\u0f88"+
		"\u0f86\u0001\u0000\u0000\u0000\u0f88\u0f89\u0001\u0000\u0000\u0000\u0f89"+
		"\u0f8c\u0001\u0000\u0000\u0000\u0f8a\u0f88\u0001\u0000\u0000\u0000\u0f8b"+
		"\u0f81\u0001\u0000\u0000\u0000\u0f8b\u0f8c\u0001\u0000\u0000\u0000\u0f8c"+
		"\u0247\u0001\u0000\u0000\u0000\u0f8d\u0f97\u0005\u00cd\u0000\u0000\u0f8e"+
		"\u0f93\u0003\u024a\u0125\u0000\u0f8f\u0f90\u0005%\u0000\u0000\u0f90\u0f92"+
		"\u0003\u024a\u0125\u0000\u0f91\u0f8f\u0001\u0000\u0000\u0000\u0f92\u0f95"+
		"\u0001\u0000\u0000\u0000\u0f93\u0f91\u0001\u0000\u0000\u0000\u0f93\u0f94"+
		"\u0001\u0000\u0000\u0000\u0f94\u0f98\u0001\u0000\u0000\u0000\u0f95\u0f93"+
		"\u0001\u0000\u0000\u0000\u0f96\u0f98\u0003\u024c\u0126\u0000\u0f97\u0f8e"+
		"\u0001\u0000\u0000\u0000\u0f97\u0f96\u0001\u0000\u0000\u0000\u0f98\u0249"+
		"\u0001\u0000\u0000\u0000\u0f99\u0f9b\u0003\u00fa}\u0000\u0f9a\u0f9c\u0005"+
		"`\u0000\u0000\u0f9b\u0f9a\u0001\u0000\u0000\u0000\u0f9b\u0f9c\u0001\u0000"+
		"\u0000\u0000\u0f9c\u0f9d\u0001\u0000\u0000\u0000\u0f9d\u0fa0\u0003\u00bc"+
		"^\u0000\u0f9e\u0f9f\u0005\u0018\u0000\u0000\u0f9f\u0fa1\u0003t:\u0000"+
		"\u0fa0\u0f9e\u0001\u0000\u0000\u0000\u0fa0\u0fa1\u0001\u0000\u0000\u0000"+
		"\u0fa1\u0fa6\u0001\u0000\u0000\u0000\u0fa2\u0fa3\u0003\u00fa}\u0000\u0fa3"+
		"\u0fa4\u0005\u00ce\u0000\u0000\u0fa4\u0fa6\u0001\u0000\u0000\u0000\u0fa5"+
		"\u0f99\u0001\u0000\u0000\u0000\u0fa5\u0fa2\u0001\u0000\u0000\u0000\u0fa6"+
		"\u024b\u0001\u0000\u0000\u0000\u0fa7\u0fa9\u0003\u00fa}\u0000\u0fa8\u0faa"+
		"\u0005`\u0000\u0000\u0fa9\u0fa8\u0001\u0000\u0000\u0000\u0fa9\u0faa\u0001"+
		"\u0000\u0000\u0000\u0faa\u0fab\u0001\u0000\u0000\u0000\u0fab\u0fac\u0003"+
		"\u024e\u0127\u0000\u0fac\u024d\u0001\u0000\u0000\u0000\u0fad\u0fae\u0005"+
		";\u0000\u0000\u0fae\u0faf\u0005\u001f\u0000\u0000\u0faf\u0fb4\u0003\u0250"+
		"\u0128\u0000\u0fb0\u0fb1\u0005%\u0000\u0000\u0fb1\u0fb3\u0003\u0250\u0128"+
		"\u0000\u0fb2\u0fb0\u0001\u0000\u0000\u0000\u0fb3\u0fb6\u0001\u0000\u0000"+
		"\u0000\u0fb4\u0fb2\u0001\u0000\u0000\u0000\u0fb4\u0fb5\u0001\u0000\u0000"+
		"\u0000\u0fb5\u0fb7\u0001\u0000\u0000\u0000\u0fb6\u0fb4\u0001\u0000\u0000"+
		"\u0000\u0fb7\u0fb8\u0005 \u0000\u0000\u0fb8\u024f\u0001\u0000\u0000\u0000"+
		"\u0fb9\u0fbc\u0003\u0252\u0129\u0000\u0fba\u0fbc\u0003\u0256\u012b\u0000"+
		"\u0fbb\u0fb9\u0001\u0000\u0000\u0000\u0fbb\u0fba\u0001\u0000\u0000\u0000"+
		"\u0fbc\u0251\u0001\u0000\u0000\u0000\u0fbd\u0fc1\u0003H$\u0000\u0fbe\u0fc2"+
		"\u0003\u00be_\u0000\u0fbf\u0fc0\u0005`\u0000\u0000\u0fc0\u0fc2\u0003b"+
		"1\u0000\u0fc1\u0fbe\u0001\u0000\u0000\u0000\u0fc1\u0fbf\u0001\u0000\u0000"+
		"\u0000\u0fc2\u0fc5\u0001\u0000\u0000\u0000\u0fc3\u0fc4\u0005\u0115\u0000"+
		"\u0000\u0fc4\u0fc6\u0003Z-\u0000\u0fc5\u0fc3\u0001\u0000\u0000\u0000\u0fc5"+
		"\u0fc6\u0001\u0000\u0000\u0000\u0fc6\u0fd3\u0001\u0000\u0000\u0000\u0fc7"+
		"\u0fc8\u0005\u009a\u0000\u0000\u0fc8\u0fca\u0003b1\u0000\u0fc9\u0fc7\u0001"+
		"\u0000\u0000\u0000\u0fc9\u0fca\u0001\u0000\u0000\u0000\u0fca\u0fd4\u0001"+
		"\u0000\u0000\u0000\u0fcb\u0fd1\u0005\u012b\u0000\u0000\u0fcc\u0fcd\u0005"+
		"\u001f\u0000\u0000\u0fcd\u0fce\u0005\u02e0\u0000\u0000\u0fce\u0fcf\u0005"+
		"%\u0000\u0000\u0fcf\u0fd0\u0005\u02e0\u0000\u0000\u0fd0\u0fd2\u0005 \u0000"+
		"\u0000\u0fd1\u0fcc\u0001\u0000\u0000\u0000\u0fd1\u0fd2\u0001\u0000\u0000"+
		"\u0000\u0fd2\u0fd4\u0001\u0000\u0000\u0000\u0fd3\u0fc9\u0001\u0000\u0000"+
		"\u0000\u0fd3\u0fcb\u0001\u0000\u0000\u0000\u0fd4\u0fd6\u0001\u0000\u0000"+
		"\u0000\u0fd5\u0fd7\u0005\u0144\u0000\u0000\u0fd6\u0fd5\u0001\u0000\u0000"+
		"\u0000\u0fd6\u0fd7\u0001\u0000\u0000\u0000\u0fd7\u0fd8\u0001\u0000\u0000"+
		"\u0000\u0fd8\u0fd9\u0003\u0254\u012a\u0000\u0fd9\u0253\u0001\u0000\u0000"+
		"\u0000\u0fda\u0fde\u0005l\u0000\u0000\u0fdb\u0fdc\u0005k\u0000\u0000\u0fdc"+
		"\u0fde\u0005l\u0000\u0000\u0fdd\u0fda\u0001\u0000\u0000\u0000\u0fdd\u0fdb"+
		"\u0001\u0000\u0000\u0000\u0fdd\u0fde\u0001\u0000\u0000\u0000\u0fde\u0fec"+
		"\u0001\u0000\u0000\u0000\u0fdf\u0fe0\u0005@\u0000\u0000\u0fe0\u0fe3\u0005"+
		"C\u0000\u0000\u0fe1\u0fe3\u0005A\u0000\u0000\u0fe2\u0fdf\u0001\u0000\u0000"+
		"\u0000\u0fe2\u0fe1\u0001\u0000\u0000\u0000\u0fe2\u0fe3\u0001\u0000\u0000"+
		"\u0000\u0fe3\u0fec\u0001\u0000\u0000\u0000\u0fe4\u0fe5\u0005\u0105\u0000"+
		"\u0000\u0fe5\u0fe6\u0005\u001f\u0000\u0000\u0fe6\u0fe7\u0003b1\u0000\u0fe7"+
		"\u0fe8\u0005 \u0000\u0000\u0fe8\u0fec\u0001\u0000\u0000\u0000\u0fe9\u0fea"+
		"\u0005M\u0000\u0000\u0fea\u0fec\u0003\u00dcn\u0000\u0feb\u0fdd\u0001\u0000"+
		"\u0000\u0000\u0feb\u0fe2\u0001\u0000\u0000\u0000\u0feb\u0fe4\u0001\u0000"+
		"\u0000\u0000\u0feb\u0fe9\u0001\u0000\u0000\u0000\u0fec\u0255\u0001\u0000"+
		"\u0000\u0000\u0fed\u0fee\u0005@\u0000\u0000\u0fee\u0ff1\u0005C\u0000\u0000"+
		"\u0fef\u0ff1\u0005A\u0000\u0000\u0ff0\u0fed\u0001\u0000\u0000\u0000\u0ff0"+
		"\u0fef\u0001\u0000\u0000\u0000\u0ff1\u0ff2\u0001\u0000\u0000\u0000\u0ff2"+
		"\u0ff3\u0005\u001f\u0000\u0000\u0ff3\u0ff8\u0003H$\u0000\u0ff4\u0ff5\u0005"+
		"%\u0000\u0000\u0ff5\u0ff7\u0003H$\u0000\u0ff6\u0ff4\u0001\u0000\u0000"+
		"\u0000\u0ff7\u0ffa\u0001\u0000\u0000\u0000\u0ff8\u0ff6\u0001\u0000\u0000"+
		"\u0000\u0ff8\u0ff9\u0001\u0000\u0000\u0000\u0ff9\u0ffb\u0001\u0000\u0000"+
		"\u0000\u0ffa\u0ff8\u0001\u0000\u0000\u0000\u0ffb\u0ffc\u0005 \u0000\u0000"+
		"\u0ffc\u1000\u0001\u0000\u0000\u0000\u0ffd\u0ffe\u0005\u0105\u0000\u0000"+
		"\u0ffe\u1000\u0003b1\u0000\u0fff\u0ff0\u0001\u0000\u0000\u0000\u0fff\u0ffd"+
		"\u0001\u0000\u0000\u0000\u1000\u0257\u0001\u0000\u0000\u0000\u1001\u1002"+
		"\u0005:\u0000\u0000\u1002\u1003\u0003\u00fa}\u0000\u1003\u1004\u0003\u025a"+
		"\u012d\u0000\u1004\u0259\u0001\u0000\u0000\u0000\u1005\u1006\u0005\u0014"+
		"\u0000\u0000\u1006\u1008\u0003*\u0015\u0000\u1007\u1005\u0001\u0000\u0000"+
		"\u0000\u1007\u1008\u0001\u0000\u0000\u0000\u1008\u1009\u0001\u0000\u0000"+
		"\u0000\u1009\u1010\u0005\u0018\u0000\u0000\u100a\u1011\u0003b1\u0000\u100b"+
		"\u100c\u0003*\u0015\u0000\u100c\u100d\u0005\u0014\u0000\u0000\u100d\u100e"+
		"\u0003*\u0015\u0000\u100e\u1011\u0001\u0000\u0000\u0000\u100f\u1011\u0005"+
		"\u02e6\u0000\u0000\u1010\u100a\u0001\u0000\u0000\u0000\u1010\u100b\u0001"+
		"\u0000\u0000\u0000\u1010\u100f\u0001\u0000\u0000\u0000\u1011\u101d\u0001"+
		"\u0000\u0000\u0000\u1012\u1013\u0003\u0260\u0130\u0000\u1013\u1014\u0003"+
		"b1\u0000\u1014\u101d\u0001\u0000\u0000\u0000\u1015\u1016\u0005\u0018\u0000"+
		"\u0000\u1016\u101d\u0003\u025c\u012e\u0000\u1017\u1018\u0005\u0018\u0000"+
		"\u0000\u1018\u1019\u0005\u001f\u0000\u0000\u1019\u101a\u0003\u031e\u018f"+
		"\u0000\u101a\u101b\u0005 \u0000\u0000\u101b\u101d\u0001\u0000\u0000\u0000"+
		"\u101c\u1007\u0001\u0000\u0000\u0000\u101c\u1012\u0001\u0000\u0000\u0000"+
		"\u101c\u1015\u0001\u0000\u0000\u0000\u101c\u1017\u0001\u0000\u0000\u0000"+
		"\u101d\u025b\u0001\u0000\u0000\u0000\u101e\u1032\u0003\u00fa}\u0000\u101f"+
		"\u1020\u0005\u00ce\u0000\u0000\u1020\u1021\u0003\u025e\u012f\u0000\u1021"+
		"\u1022\u0005f\u0000\u0000\u1022\u1023\u0003\u031e\u018f\u0000\u1023\u102f"+
		"\u0005f\u0000\u0000\u1024\u1030\u0005\u00cb\u0000\u0000\u1025\u1026\u0005"+
		"0\u0000\u0000\u1026\u1027\u0005\u00cf\u0000\u0000\u1027\u102c\u0003N\'"+
		"\u0000\u1028\u1029\u0005%\u0000\u0000\u1029\u102b\u0003N\'\u0000\u102a"+
		"\u1028\u0001\u0000\u0000\u0000\u102b\u102e\u0001\u0000\u0000\u0000\u102c"+
		"\u102a\u0001\u0000\u0000\u0000\u102c\u102d\u0001\u0000\u0000\u0000\u102d"+
		"\u1030\u0001\u0000\u0000\u0000\u102e\u102c\u0001\u0000\u0000\u0000\u102f"+
		"\u1024\u0001\u0000\u0000\u0000\u102f\u1025\u0001\u0000\u0000\u0000\u1030"+
		"\u1032\u0001\u0000\u0000\u0000\u1031\u101e\u0001\u0000\u0000\u0000\u1031"+
		"\u101f\u0001\u0000\u0000\u0000\u1032\u025d\u0001\u0000\u0000\u0000\u1033"+
		"\u1035\u00077\u0000\u0000\u1034\u1033\u0001\u0000\u0000\u0000\u1034\u1035"+
		"\u0001\u0000\u0000\u0000\u1035\u1037\u0001\u0000\u0000\u0000\u1036\u1038"+
		"\u00078\u0000\u0000\u1037\u1036\u0001\u0000\u0000\u0000\u1037\u1038\u0001"+
		"\u0000\u0000\u0000\u1038\u103a\u0001\u0000\u0000\u0000\u1039\u103b\u0007"+
		"9\u0000\u0000\u103a\u1039\u0001\u0000\u0000\u0000\u103a\u103b\u0001\u0000"+
		"\u0000\u0000\u103b\u103d\u0001\u0000\u0000\u0000\u103c\u103e\u0005\u0215"+
		"\u0000\u0000\u103d\u103c\u0001\u0000\u0000\u0000\u103d\u103e\u0001\u0000"+
		"\u0000\u0000\u103e\u025f\u0001\u0000\u0000\u0000\u103f\u1040\u0005\u000f"+
		"\u0000\u0000\u1040\u1050\u0005\u0018\u0000\u0000\u1041\u1042\u0005\u0010"+
		"\u0000\u0000\u1042\u1050\u0005\u0018\u0000\u0000\u1043\u1044\u0005\u0011"+
		"\u0000\u0000\u1044\u1050\u0005\u0018\u0000\u0000\u1045\u1046\u0005\u0012"+
		"\u0000\u0000\u1046\u1050\u0005\u0018\u0000\u0000\u1047\u1048\u0005\r\u0000"+
		"\u0000\u1048\u1050\u0005\u0018\u0000\u0000\u1049\u104a\u0005\t\u0000\u0000"+
		"\u104a\u1050\u0005\u0018\u0000\u0000\u104b\u104c\u0005\f\u0000\u0000\u104c"+
		"\u1050\u0005\u0018\u0000\u0000\u104d\u104e\u0005\b\u0000\u0000\u104e\u1050"+
		"\u0005\u0018\u0000\u0000\u104f\u103f\u0001\u0000\u0000\u0000\u104f\u1041"+
		"\u0001\u0000\u0000\u0000\u104f\u1043\u0001\u0000\u0000\u0000\u104f\u1045"+
		"\u0001\u0000\u0000\u0000\u104f\u1047\u0001\u0000\u0000\u0000\u104f\u1049"+
		"\u0001\u0000\u0000\u0000\u104f\u104b\u0001\u0000\u0000\u0000\u104f\u104d"+
		"\u0001\u0000\u0000\u0000\u1050\u0261\u0001\u0000\u0000\u0000\u1051\u1065"+
		"\u0005\u001f\u0000\u0000\u1052\u1054\u0003\u00fa}\u0000\u1053\u1055\u0005"+
		"`\u0000\u0000\u1054\u1053\u0001\u0000\u0000\u0000\u1054\u1055\u0001\u0000"+
		"\u0000\u0000\u1055\u1059\u0001\u0000\u0000\u0000\u1056\u1057\u0003L&\u0000"+
		"\u1057\u1058\u0005\u0014\u0000\u0000\u1058\u105a\u0001\u0000\u0000\u0000"+
		"\u1059\u1056\u0001\u0000\u0000\u0000\u1059\u105a\u0001\u0000\u0000\u0000"+
		"\u105a\u105b\u0001\u0000\u0000\u0000\u105b\u105e\u0003\u00bc^\u0000\u105c"+
		"\u105d\u0005\u0018\u0000\u0000\u105d\u105f\u0003\u00f4z\u0000\u105e\u105c"+
		"\u0001\u0000\u0000\u0000\u105e\u105f\u0001\u0000\u0000\u0000\u105f\u1061"+
		"\u0001\u0000\u0000\u0000\u1060\u1062\u0005\u00d3\u0000\u0000\u1061\u1060"+
		"\u0001\u0000\u0000\u0000\u1061\u1062\u0001\u0000\u0000\u0000\u1062\u1064"+
		"\u0001\u0000\u0000\u0000\u1063\u1052\u0001\u0000\u0000\u0000\u1064\u1067"+
		"\u0001\u0000\u0000\u0000\u1065\u1063\u0001\u0000\u0000\u0000\u1065\u1066"+
		"\u0001\u0000\u0000\u0000\u1066\u1068\u0001\u0000\u0000\u0000\u1067\u1065"+
		"\u0001\u0000\u0000\u0000\u1068\u1069\u0005 \u0000\u0000\u1069\u0263\u0001"+
		"\u0000\u0000\u0000\u106a\u106e\u0003\u026a\u0135\u0000\u106b\u106e\u0003"+
		"\u0268\u0134\u0000\u106c\u106e\u0003\u0266\u0133\u0000\u106d\u106a\u0001"+
		"\u0000\u0000\u0000\u106d\u106b\u0001\u0000\u0000\u0000\u106d\u106c\u0001"+
		"\u0000\u0000\u0000\u106e\u0265\u0001\u0000\u0000\u0000\u106f\u1070\u0005"+
		"\u00d0\u0000\u0000\u1070";
	private static final String _serializedATNSegment2 =
		"\u1071\u0003\u00fa}\u0000\u1071\u1072\u0005;\u0000\u0000\u1072\u107c\u0003"+
		"\u017e\u00bf\u0000\u1073\u1074\u0005M\u0000\u0000\u1074\u1079\u0003\u0270"+
		"\u0138\u0000\u1075\u1076\u0005%\u0000\u0000\u1076\u1078\u0003\u0270\u0138"+
		"\u0000\u1077\u1075\u0001\u0000\u0000\u0000\u1078\u107b\u0001\u0000\u0000"+
		"\u0000\u1079\u1077\u0001\u0000\u0000\u0000\u1079\u107a\u0001\u0000\u0000"+
		"\u0000\u107a\u107d\u0001\u0000\u0000\u0000\u107b\u1079\u0001\u0000\u0000"+
		"\u0000\u107c\u1073\u0001\u0000\u0000\u0000\u107c\u107d\u0001\u0000\u0000"+
		"\u0000\u107d\u107f\u0001\u0000\u0000\u0000\u107e\u1080\u0005`\u0000\u0000"+
		"\u107f\u107e\u0001\u0000\u0000\u0000\u107f\u1080\u0001\u0000\u0000\u0000"+
		"\u1080\u1081\u0001\u0000\u0000\u0000\u1081\u1082\u0005}\u0000\u0000\u1082"+
		"\u1083\u0003\u026e\u0137\u0000\u1083\u1084\u0005\u00d2\u0000\u0000\u1084"+
		"\u1085\u0005\u0124\u0000\u0000\u1085\u0267\u0001\u0000\u0000\u0000\u1086"+
		"\u1087\u0005\u00d0\u0000\u0000\u1087\u1091\u0005;\u0000\u0000\u1088\u1089"+
		"\u0005M\u0000\u0000\u1089\u108e\u0003\u0270\u0138\u0000\u108a\u108b\u0005"+
		"%\u0000\u0000\u108b\u108d\u0003\u0270\u0138\u0000\u108c\u108a\u0001\u0000"+
		"\u0000\u0000\u108d\u1090\u0001\u0000\u0000\u0000\u108e\u108c\u0001\u0000"+
		"\u0000\u0000\u108e\u108f\u0001\u0000\u0000\u0000\u108f\u1092\u0001\u0000"+
		"\u0000\u0000\u1090\u108e\u0001\u0000\u0000\u0000\u1091\u1088\u0001\u0000"+
		"\u0000\u0000\u1091\u1092\u0001\u0000\u0000\u0000\u1092\u1094\u0001\u0000"+
		"\u0000\u0000\u1093\u1095\u0005`\u0000\u0000\u1094\u1093\u0001\u0000\u0000"+
		"\u0000\u1094\u1095\u0001\u0000\u0000\u0000\u1095\u1096\u0001\u0000\u0000"+
		"\u0000\u1096\u1098\u0005\u00d2\u0000\u0000\u1097\u1099\u0005\u001f\u0000"+
		"\u0000\u1098\u1097\u0001\u0000\u0000\u0000\u1098\u1099\u0001\u0000\u0000"+
		"\u0000\u1099\u109a\u0001\u0000\u0000\u0000\u109a\u109c\u0003\u031e\u018f"+
		"\u0000\u109b\u109d\u0005 \u0000\u0000\u109c\u109b\u0001\u0000\u0000\u0000"+
		"\u109c\u109d\u0001\u0000\u0000\u0000\u109d\u0269\u0001\u0000\u0000\u0000"+
		"\u109e\u109f\u0005\u00d0\u0000\u0000\u109f\u10a9\u0003\u00bc^\u0000\u10a0"+
		"\u10a1\u0005M\u0000\u0000\u10a1\u10a6\u0003\u0270\u0138\u0000\u10a2\u10a3"+
		"\u0005%\u0000\u0000\u10a3\u10a5\u0003\u0270\u0138\u0000\u10a4\u10a2\u0001"+
		"\u0000\u0000\u0000\u10a5\u10a8\u0001\u0000\u0000\u0000\u10a6\u10a4\u0001"+
		"\u0000\u0000\u0000\u10a6\u10a7\u0001\u0000\u0000\u0000\u10a7\u10aa\u0001"+
		"\u0000\u0000\u0000\u10a8\u10a6\u0001\u0000\u0000\u0000\u10a9\u10a0\u0001"+
		"\u0000\u0000\u0000\u10a9\u10aa\u0001\u0000\u0000\u0000\u10aa\u10ac\u0001"+
		"\u0000\u0000\u0000\u10ab\u10ad\u0005`\u0000\u0000\u10ac\u10ab\u0001\u0000"+
		"\u0000\u0000\u10ac\u10ad\u0001\u0000\u0000\u0000\u10ad\u10ae\u0001\u0000"+
		"\u0000\u0000\u10ae\u10af\u0005}\u0000\u0000\u10af\u10b0\u0003\u026e\u0137"+
		"\u0000\u10b0\u10b1\u0005\u00d2\u0000\u0000\u10b1\u10b2\u0003b1\u0000\u10b2"+
		"\u10b3\u0005+\u0000\u0000\u10b3\u10b4\u0005\u0124\u0000\u0000\u10b4\u026b"+
		"\u0001\u0000\u0000\u0000\u10b5\u10b6\u0003\u0182\u00c1\u0000\u10b6\u10b7"+
		"\u0003\u0188\u00c4\u0000\u10b7\u10ba\u0001\u0000\u0000\u0000\u10b8\u10ba"+
		"\u0003\u01b8\u00dc\u0000\u10b9\u10b5\u0001\u0000\u0000\u0000\u10b9\u10b8"+
		"\u0001\u0000\u0000\u0000\u10ba\u10be\u0001\u0000\u0000\u0000\u10bb\u10bd"+
		"\u0003\u01bc\u00de\u0000\u10bc\u10bb\u0001\u0000\u0000\u0000\u10bd\u10c0"+
		"\u0001\u0000\u0000\u0000\u10be\u10bc\u0001\u0000\u0000\u0000\u10be\u10bf"+
		"\u0001\u0000\u0000\u0000\u10bf\u026d\u0001\u0000\u0000\u0000\u10c0\u10be"+
		"\u0001\u0000\u0000\u0000\u10c1\u10c3\u0003\u0272\u0139\u0000\u10c2\u10c1"+
		"\u0001\u0000\u0000\u0000\u10c3\u10c6\u0001\u0000\u0000\u0000\u10c4\u10c2"+
		"\u0001\u0000\u0000\u0000\u10c4\u10c5\u0001\u0000\u0000\u0000\u10c5\u026f"+
		"\u0001\u0000\u0000\u0000\u10c6\u10c4\u0001\u0000\u0000\u0000\u10c7\u10c9"+
		"\u0005\u017b\u0000\u0000\u10c8\u10c7\u0001\u0000\u0000\u0000\u10c8\u10c9"+
		"\u0001\u0000\u0000\u0000\u10c9\u10e1\u0001\u0000\u0000\u0000\u10ca\u10cc"+
		"\u0005\u0216\u0000\u0000\u10cb\u10ca\u0001\u0000\u0000\u0000\u10cb\u10cc"+
		"\u0001\u0000\u0000\u0000\u10cc\u10e1\u0001\u0000\u0000\u0000\u10cd\u10ce"+
		"\u0005\u00d0\u0000\u0000\u10ce\u10cf\u0005l\u0000\u0000\u10cf\u10d0\u0005"+
		"a\u0000\u0000\u10d0\u10d1\u0005l\u0000\u0000\u10d1\u10d7\u0005\u0218\u0000"+
		"\u0000\u10d2\u10d3\u0005\u0219\u0000\u0000\u10d3\u10d4\u0005a\u0000\u0000"+
		"\u10d4\u10d5\u0005l\u0000\u0000\u10d5\u10d7\u0005\u0218\u0000\u0000\u10d6"+
		"\u10cd\u0001\u0000\u0000\u0000\u10d6\u10d2\u0001\u0000\u0000\u0000\u10d6"+
		"\u10d7\u0001\u0000\u0000\u0000\u10d7\u10e1\u0001\u0000\u0000\u0000\u10d8"+
		"\u10da\u0003\u00fc~\u0000\u10d9\u10d8\u0001\u0000\u0000\u0000\u10d9\u10da"+
		"\u0001\u0000\u0000\u0000\u10da\u10e1\u0001\u0000\u0000\u0000\u10db\u10dc"+
		"\u0005\u0298\u0000\u0000\u10dc\u10dd\u0005\u0018\u0000\u0000\u10dd\u10df"+
		"\u0007\u0000\u0000\u0000\u10de\u10db\u0001\u0000\u0000\u0000\u10de\u10df"+
		"\u0001\u0000\u0000\u0000\u10df\u10e1\u0001\u0000\u0000\u0000\u10e0\u10c8"+
		"\u0001\u0000\u0000\u0000\u10e0\u10cb\u0001\u0000\u0000\u0000\u10e0\u10d6"+
		"\u0001\u0000\u0000\u0000\u10e0\u10d9\u0001\u0000\u0000\u0000\u10e0\u10de"+
		"\u0001\u0000\u0000\u0000\u10e1\u0271\u0001\u0000\u0000\u0000\u10e2\u10ed"+
		"\u0003\u012e\u0097\u0000\u10e3\u10ed\u0003\u0144\u00a2\u0000\u10e4\u10ed"+
		"\u0003\u015a\u00ad\u0000\u10e5\u10ed\u0003\u016e\u00b7\u0000\u10e6\u10ed"+
		"\u0003\u02ec\u0176\u0000\u10e7\u10ed\u0003\u030a\u0185\u0000\u10e8\u10ed"+
		"\u0003\u0314\u018a\u0000\u10e9\u10ed\u0003\u031e\u018f\u0000\u10ea\u10ed"+
		"\u0003\u0258\u012c\u0000\u10eb\u10ed\u0003\u0248\u0124\u0000\u10ec\u10e2"+
		"\u0001\u0000\u0000\u0000\u10ec\u10e3\u0001\u0000\u0000\u0000\u10ec\u10e4"+
		"\u0001\u0000\u0000\u0000\u10ec\u10e5\u0001\u0000\u0000\u0000\u10ec\u10e6"+
		"\u0001\u0000\u0000\u0000\u10ec\u10e7\u0001\u0000\u0000\u0000\u10ec\u10e8"+
		"\u0001\u0000\u0000\u0000\u10ec\u10e9\u0001\u0000\u0000\u0000\u10ec\u10ea"+
		"\u0001\u0000\u0000\u0000\u10ec\u10eb\u0001\u0000\u0000\u0000\u10ed\u10ef"+
		"\u0001\u0000\u0000\u0000\u10ee\u10f0\u0005+\u0000\u0000\u10ef\u10ee\u0001"+
		"\u0000\u0000\u0000\u10ef\u10f0\u0001\u0000\u0000\u0000\u10f0\u0273\u0001"+
		"\u0000\u0000\u0000\u10f1\u10f6\u0003\u0276\u013b\u0000\u10f2\u10f3\u0005"+
		"%\u0000\u0000\u10f3\u10f5\u0003\u0276\u013b\u0000\u10f4\u10f2\u0001\u0000"+
		"\u0000\u0000\u10f5\u10f8\u0001\u0000\u0000\u0000\u10f6\u10f4\u0001\u0000"+
		"\u0000\u0000\u10f6\u10f7\u0001\u0000\u0000\u0000\u10f7\u10fa\u0001\u0000"+
		"\u0000\u0000\u10f8\u10f6\u0001\u0000\u0000\u0000\u10f9\u10f1\u0001\u0000"+
		"\u0000\u0000\u10f9\u10fa\u0001\u0000\u0000\u0000\u10fa\u0275\u0001\u0000"+
		"\u0000\u0000\u10fb\u10fd\u0003\u024a\u0125\u0000\u10fc\u10fe\u0005\u021a"+
		"\u0000\u0000\u10fd\u10fc\u0001\u0000\u0000\u0000\u10fd\u10fe\u0001\u0000"+
		"\u0000\u0000\u10fe\u1101\u0001\u0000\u0000\u0000\u10ff\u1100\u0005\u0018"+
		"\u0000\u0000\u1100\u1102\u0003\u001a\r\u0000\u1101\u10ff\u0001\u0000\u0000"+
		"\u0000\u1101\u1102\u0001\u0000\u0000\u0000\u1102\u1104\u0001\u0000\u0000"+
		"\u0000\u1103\u1105\u0007:\u0000\u0000\u1104\u1103\u0001\u0000\u0000\u0000"+
		"\u1104\u1105\u0001\u0000\u0000\u0000\u1105\u0277\u0001\u0000\u0000\u0000"+
		"\u1106\u1108\u0003\u027a\u013d\u0000\u1107\u1106\u0001\u0000\u0000\u0000"+
		"\u1107\u1108\u0001\u0000\u0000\u0000\u1108\u110b\u0001\u0000\u0000\u0000"+
		"\u1109\u110a\u0005f\u0000\u0000\u110a\u110c\u0005\u0142\u0000\u0000\u110b"+
		"\u1109\u0001\u0000\u0000\u0000\u110b\u110c\u0001\u0000\u0000\u0000\u110c"+
		"\u110d\u0001\u0000\u0000\u0000\u110d\u110e\u0005`\u0000\u0000\u110e\u110f"+
		"\u0003\u027e\u013f\u0000\u110f\u0279\u0001\u0000\u0000\u0000\u1110\u1119"+
		"\u0005M\u0000\u0000\u1111\u1116\u0003\u027c\u013e\u0000\u1112\u1113\u0005"+
		"%\u0000\u0000\u1113\u1115\u0003\u027c\u013e\u0000\u1114\u1112\u0001\u0000"+
		"\u0000\u0000\u1115\u1118\u0001\u0000\u0000\u0000\u1116\u1114\u0001\u0000"+
		"\u0000\u0000\u1116\u1117\u0001\u0000\u0000\u0000\u1117\u111a\u0001\u0000"+
		"\u0000\u0000\u1118\u1116\u0001\u0000\u0000\u0000\u1119\u1111\u0001\u0000"+
		"\u0000\u0000\u1119\u111a\u0001\u0000\u0000\u0000\u111a\u027b\u0001\u0000"+
		"\u0000\u0000\u111b\u1121\u0005\u017b\u0000\u0000\u111c\u1121\u0005\u01f6"+
		"\u0000\u0000\u111d\u1121\u0003\u00fc~\u0000\u111e\u1121\u0005\u0225\u0000"+
		"\u0000\u111f\u1121\u0005\u0216\u0000\u0000\u1120\u111b\u0001\u0000\u0000"+
		"\u0000\u1120\u111c\u0001\u0000\u0000\u0000\u1120\u111d\u0001\u0000\u0000"+
		"\u0000\u1120\u111e\u0001\u0000\u0000\u0000\u1120\u111f\u0001\u0000\u0000"+
		"\u0000\u1121\u027d\u0001\u0000\u0000\u0000\u1122\u1124\u0005}\u0000\u0000"+
		"\u1123\u1122\u0001\u0000\u0000\u0000\u1123\u1124\u0001\u0000\u0000\u0000"+
		"\u1124\u1125\u0001\u0000\u0000\u0000\u1125\u1127\u0003\u026e\u0137\u0000"+
		"\u1126\u1128\u0005\u0124\u0000\u0000\u1127\u1126\u0001\u0000\u0000\u0000"+
		"\u1127\u1128\u0001\u0000\u0000\u0000\u1128\u1146\u0001\u0000\u0000\u0000"+
		"\u1129\u112a\u0005\u016e\u0000\u0000\u112a\u112e\u0005\u00aa\u0000\u0000"+
		"\u112b\u112c\u0003L&\u0000\u112c\u112d\u0005\u0014\u0000\u0000\u112d\u112f"+
		"\u0001\u0000\u0000\u0000\u112e\u112b\u0001\u0000\u0000\u0000\u112e\u112f"+
		"\u0001\u0000\u0000\u0000\u112f\u1133\u0001\u0000\u0000\u0000\u1130\u1131"+
		"\u0003L&\u0000\u1131\u1132\u0005\u0014\u0000\u0000\u1132\u1134\u0001\u0000"+
		"\u0000\u0000\u1133\u1130\u0001\u0000\u0000\u0000\u1133\u1134\u0001\u0000"+
		"\u0000\u0000\u1134\u1135\u0001\u0000\u0000\u0000\u1135\u1146\u0003N\'"+
		"\u0000\u1136\u1137\u0005}\u0000\u0000\u1137\u1138\u0005\u021d\u0000\u0000"+
		"\u1138\u1139\u0005M\u0000\u0000\u1139\u113e\u0003\u0280\u0140\u0000\u113a"+
		"\u113b\u0005%\u0000\u0000\u113b\u113d\u0003\u0280\u0140\u0000\u113c\u113a"+
		"\u0001\u0000\u0000\u0000\u113d\u1140\u0001\u0000\u0000\u0000\u113e\u113c"+
		"\u0001\u0000\u0000\u0000\u113e\u113f\u0001\u0000\u0000\u0000\u113f\u1141"+
		"\u0001\u0000\u0000\u0000\u1140\u113e\u0001\u0000\u0000\u0000\u1141\u1143"+
		"\u0003\u026e\u0137\u0000\u1142\u1144\u0005\u0124\u0000\u0000\u1143\u1142"+
		"\u0001\u0000\u0000\u0000\u1143\u1144\u0001\u0000\u0000\u0000\u1144\u1146"+
		"\u0001\u0000\u0000\u0000\u1145\u1123\u0001\u0000\u0000\u0000\u1145\u1129"+
		"\u0001\u0000\u0000\u0000\u1145\u1136\u0001\u0000\u0000\u0000\u1146\u027f"+
		"\u0001\u0000\u0000\u0000\u1147\u1148\u0005\u021e\u0000\u0000\u1148\u1149"+
		"\u0005\u0018\u0000\u0000\u1149\u115e\u0003\u001c\u000e\u0000\u114a\u114b"+
		"\u0005\u010e\u0000\u0000\u114b\u114c\u0005\u0220\u0000\u0000\u114c\u114d"+
		"\u0005\u021f\u0000\u0000\u114d\u1152\u0005\u0018\u0000\u0000\u114e\u1153"+
		"\u0005\u0221\u0000\u0000\u114f\u1150\u0005\u0222\u0000\u0000\u1150\u1153"+
		"\u0005\u0223\u0000\u0000\u1151\u1153\u0005\u0224\u0000\u0000\u1152\u114e"+
		"\u0001\u0000\u0000\u0000\u1152\u114f\u0001\u0000\u0000\u0000\u1152\u1151"+
		"\u0001\u0000\u0000\u0000\u1153\u115e\u0001\u0000\u0000\u0000\u1154\u1155"+
		"\u0005\u0291\u0000\u0000\u1155\u1156\u0005\u0018\u0000\u0000\u1156\u115e"+
		"\u0003\u001e\u000f\u0000\u1157\u1158\u0005\u029e\u0000\u0000\u1158\u1159"+
		"\u0005\u0018\u0000\u0000\u1159\u115e\u0003\u001c\u000e\u0000\u115a\u115b"+
		"\u0005\u029f\u0000\u0000\u115b\u115c\u0005\u0018\u0000\u0000\u115c\u115e"+
		"\u0007\u0000\u0000\u0000\u115d\u1147\u0001\u0000\u0000\u0000\u115d\u114a"+
		"\u0001\u0000\u0000\u0000\u115d\u1154\u0001\u0000\u0000\u0000\u115d\u1157"+
		"\u0001\u0000\u0000\u0000\u115d\u115a\u0001\u0000\u0000\u0000\u115e\u0281"+
		"\u0001\u0000\u0000\u0000\u115f\u1160\u0005M\u0000\u0000\u1160\u1165\u0003"+
		"\u0284\u0142\u0000\u1161\u1162\u0005%\u0000\u0000\u1162\u1164\u0003\u0284"+
		"\u0142\u0000\u1163\u1161\u0001\u0000\u0000\u0000\u1164\u1167\u0001\u0000"+
		"\u0000\u0000\u1165\u1163\u0001\u0000\u0000\u0000\u1165\u1166\u0001\u0000"+
		"\u0000\u0000\u1166\u1169\u0001\u0000\u0000\u0000\u1167\u1165\u0001\u0000"+
		"\u0000\u0000\u1168\u115f\u0001\u0000\u0000\u0000\u1168\u1169\u0001\u0000"+
		"\u0000\u0000\u1169\u116a\u0001\u0000\u0000\u0000\u116a\u116c\u0005`\u0000"+
		"\u0000\u116b\u116d\u0003\u0286\u0143\u0000\u116c\u116b\u0001\u0000\u0000"+
		"\u0000\u116c\u116d\u0001\u0000\u0000\u0000\u116d\u116e\u0001\u0000\u0000"+
		"\u0000\u116e\u1172\u0003\u031e\u018f\u0000\u116f\u1170\u0005M\u0000\u0000"+
		"\u1170\u1171\u0005\u0105\u0000\u0000\u1171\u1173\u0005\u0108\u0000\u0000"+
		"\u1172\u116f\u0001\u0000\u0000\u0000\u1172\u1173\u0001\u0000\u0000\u0000"+
		"\u1173\u0283\u0001\u0000\u0000\u0000\u1174\u1175\u0007;\u0000\u0000\u1175"+
		"\u0285\u0001\u0000\u0000\u0000\u1176\u1177\u0005M\u0000\u0000\u1177\u117c"+
		"\u0003\u0288\u0144\u0000\u1178\u1179\u0005%\u0000\u0000\u1179\u117b\u0003"+
		"\u0288\u0144\u0000\u117a\u1178\u0001\u0000\u0000\u0000\u117b\u117e\u0001"+
		"\u0000\u0000\u0000\u117c\u117a\u0001\u0000\u0000\u0000\u117c\u117d\u0001"+
		"\u0000\u0000\u0000\u117d\u0287\u0001\u0000\u0000\u0000\u117e\u117c\u0001"+
		"\u0000\u0000\u0000\u117f\u118b\u0003N\'\u0000\u1180\u1181\u0005\u001f"+
		"\u0000\u0000\u1181\u1186\u0003H$\u0000\u1182\u1183\u0005%\u0000\u0000"+
		"\u1183\u1185\u0003H$\u0000\u1184\u1182\u0001\u0000\u0000\u0000\u1185\u1188"+
		"\u0001\u0000\u0000\u0000\u1186\u1184\u0001\u0000\u0000\u0000\u1186\u1187"+
		"\u0001\u0000\u0000\u0000\u1187\u1189\u0001\u0000\u0000\u0000\u1188\u1186"+
		"\u0001\u0000\u0000\u0000\u1189\u118a\u0005 \u0000\u0000\u118a\u118c\u0001"+
		"\u0000\u0000\u0000\u118b\u1180\u0001\u0000\u0000\u0000\u118b\u118c\u0001"+
		"\u0000\u0000\u0000\u118c\u118d\u0001\u0000\u0000\u0000\u118d\u118e\u0005"+
		"`\u0000\u0000\u118e\u118f\u0005\u001f\u0000\u0000\u118f\u1190\u0003\u031e"+
		"\u018f\u0000\u1190\u1191\u0005 \u0000\u0000\u1191\u0289\u0001\u0000\u0000"+
		"\u0000\u1192\u1193\u0005M\u0000\u0000\u1193\u1194\u0003\u028c\u0146\u0000"+
		"\u1194\u1195\u0005%\u0000\u0000\u1195\u1196\u0003\u028c\u0146\u0000\u1196"+
		"\u1198\u0001\u0000\u0000\u0000\u1197\u1192\u0001\u0000\u0000\u0000\u1197"+
		"\u1198\u0001\u0000\u0000\u0000\u1198\u119d\u0001\u0000\u0000\u0000\u1199"+
		"\u119e\u0005f\u0000\u0000\u119a\u119e\u0005\u0227\u0000\u0000\u119b\u119c"+
		"\u0005\u0228\u0000\u0000\u119c\u119e\u0005\u00cf\u0000\u0000\u119d\u1199"+
		"\u0001\u0000\u0000\u0000\u119d\u119a\u0001\u0000\u0000\u0000\u119d\u119b"+
		"\u0001\u0000\u0000\u0000\u119e\u11a0\u0001\u0000\u0000\u0000\u119f\u11a1"+
		"\u0005/\u0000\u0000\u11a0\u119f\u0001\u0000\u0000\u0000\u11a0\u11a1\u0001"+
		"\u0000\u0000\u0000\u11a1\u11a3\u0001\u0000\u0000\u0000\u11a2\u11a4\u0005"+
		"%\u0000\u0000\u11a3\u11a2\u0001\u0000\u0000\u0000\u11a3\u11a4\u0001\u0000"+
		"\u0000\u0000\u11a4\u11a6\u0001\u0000\u0000\u0000\u11a5\u11a7\u00050\u0000"+
		"\u0000\u11a6\u11a5\u0001\u0000\u0000\u0000\u11a6\u11a7\u0001\u0000\u0000"+
		"\u0000\u11a7\u11a9\u0001\u0000\u0000\u0000\u11a8\u11aa\u0005%\u0000\u0000"+
		"\u11a9\u11a8\u0001\u0000\u0000\u0000\u11a9\u11aa\u0001\u0000\u0000\u0000"+
		"\u11aa\u11ac\u0001\u0000\u0000\u0000\u11ab\u11ad\u00051\u0000\u0000\u11ac"+
		"\u11ab\u0001\u0000\u0000\u0000\u11ac\u11ad\u0001\u0000\u0000\u0000\u11ad"+
		"\u11af\u0001\u0000\u0000\u0000\u11ae\u11b0\u0005%\u0000\u0000\u11af\u11ae"+
		"\u0001\u0000\u0000\u0000\u11af\u11b0\u0001\u0000\u0000\u0000\u11b0\u11b3"+
		"\u0001\u0000\u0000\u0000\u11b1\u11b2\u0005M\u0000\u0000\u11b2\u11b4\u0005"+
		"\u0229\u0000\u0000\u11b3\u11b1\u0001\u0000\u0000\u0000\u11b3\u11b4\u0001"+
		"\u0000\u0000\u0000\u11b4\u11b8\u0001\u0000\u0000\u0000\u11b5\u11b6\u0005"+
		"k\u0000\u0000\u11b6\u11b7\u0005f\u0000\u0000\u11b7\u11b9\u0005\u0142\u0000"+
		"\u0000\u11b8\u11b5\u0001\u0000\u0000\u0000\u11b8\u11b9\u0001\u0000\u0000"+
		"\u0000\u11b9\u11ba\u0001\u0000\u0000\u0000\u11ba\u11bf\u0005`\u0000\u0000"+
		"\u11bb\u11c0\u0003\u026e\u0137\u0000\u11bc\u11bd\u0005\u016e\u0000\u0000"+
		"\u11bd\u11be\u0005\u00aa\u0000\u0000\u11be\u11c0\u0003\u028e\u0147\u0000"+
		"\u11bf\u11bb\u0001\u0000\u0000\u0000\u11bf\u11bc\u0001\u0000\u0000\u0000"+
		"\u11c0\u028b\u0001\u0000\u0000\u0000\u11c1\u11c7\u0005\u017b\u0000\u0000"+
		"\u11c2\u11c7\u0003\u00fc~\u0000\u11c3\u11c7\u0005\u0225\u0000\u0000\u11c4"+
		"\u11c7\u0005\u0216\u0000\u0000\u11c5\u11c7\u0001\u0000\u0000\u0000\u11c6"+
		"\u11c1\u0001\u0000\u0000\u0000\u11c6\u11c2\u0001\u0000\u0000\u0000\u11c6"+
		"\u11c3\u0001\u0000\u0000\u0000\u11c6\u11c4\u0001\u0000\u0000\u0000\u11c6"+
		"\u11c5\u0001\u0000\u0000\u0000\u11c7\u028d\u0001\u0000\u0000\u0000\u11c8"+
		"\u11c9\u0003N\'\u0000\u11c9\u11ca\u0005\u0014\u0000\u0000\u11ca\u11cb"+
		"\u0003N\'\u0000\u11cb\u11cc\u0005\u0014\u0000\u0000\u11cc\u11cd\u0003"+
		"N\'\u0000\u11cd\u028f\u0001\u0000\u0000\u0000\u11ce\u11d4\u0003@ \u0000"+
		"\u11cf\u11d4\u0003:\u001d\u0000\u11d0\u11d1\u0005r\u0000\u0000\u11d1\u11d4"+
		"\u0005\u015a\u0000\u0000\u11d2\u11d4\u0005\u00cc\u0000\u0000\u11d3\u11ce"+
		"\u0001\u0000\u0000\u0000\u11d3\u11cf\u0001\u0000\u0000\u0000\u11d3\u11d0"+
		"\u0001\u0000\u0000\u0000\u11d3\u11d2\u0001\u0000\u0000\u0000\u11d4\u0291"+
		"\u0001\u0000\u0000\u0000\u11d5\u11d6\u0005`\u0000\u0000\u11d6\u11f2\u0003"+
		"\u00bc^\u0000\u11d7\u11d8\u0007<\u0000\u0000\u11d8\u11d9\u0005M\u0000"+
		"\u0000\u11d9\u11f2\u0003b1\u0000\u11da\u11db\u0005\u022a\u0000\u0000\u11db"+
		"\u11dc\u0005w\u0000\u0000\u11dc\u11f2\u0003b1\u0000\u11dd\u11df\u0005"+
		"\u022d\u0000\u0000\u11de\u11e0\u0003b1\u0000\u11df\u11de\u0001\u0000\u0000"+
		"\u0000\u11df\u11e0\u0001\u0000\u0000\u0000\u11e0\u11f2\u0001\u0000\u0000"+
		"\u0000\u11e1\u11e2\u0005\u0107\u0000\u0000\u11e2\u11f2\u0005\u022d\u0000"+
		"\u0000\u11e3\u11e5\u0005\u022e\u0000\u0000\u11e4\u11e6\u0003b1\u0000\u11e5"+
		"\u11e4\u0001\u0000\u0000\u0000\u11e5\u11e6\u0001\u0000\u0000\u0000\u11e6"+
		"\u11f2\u0001\u0000\u0000\u0000\u11e7\u11e8\u0005\u0107\u0000\u0000\u11e8"+
		"\u11f2\u0005\u022e\u0000\u0000\u11e9\u11ea\u0005\u022c\u0000\u0000\u11ea"+
		"\u11f2\u0003b1\u0000\u11eb\u11ec\u0005\u0107\u0000\u0000\u11ec\u11f2\u0005"+
		"\u022c\u0000\u0000\u11ed\u11ef\u0005\u0107\u0000\u0000\u11ee\u11ed\u0001"+
		"\u0000\u0000\u0000\u11ee\u11ef\u0001\u0000\u0000\u0000\u11ef\u11f0\u0001"+
		"\u0000\u0000\u0000\u11f0\u11f2\u0005\u022b\u0000\u0000\u11f1\u11d5\u0001"+
		"\u0000\u0000\u0000\u11f1\u11d7\u0001\u0000\u0000\u0000\u11f1\u11da\u0001"+
		"\u0000\u0000\u0000\u11f1\u11dd\u0001\u0000\u0000\u0000\u11f1\u11e1\u0001"+
		"\u0000\u0000\u0000\u11f1\u11e3\u0001\u0000\u0000\u0000\u11f1\u11e7\u0001"+
		"\u0000\u0000\u0000\u11f1\u11e9\u0001\u0000\u0000\u0000\u11f1\u11eb\u0001"+
		"\u0000\u0000\u0000\u11f1\u11ee\u0001\u0000\u0000\u0000\u11f2\u0293\u0001"+
		"\u0000\u0000\u0000\u11f3\u11f4\u0005\u0236\u0000\u0000\u11f4\u11f6\u0003"+
		"R)\u0000\u11f5\u11f3\u0001\u0000\u0000\u0000\u11f5\u11f6\u0001\u0000\u0000"+
		"\u0000\u11f6\u11f9\u0001\u0000\u0000\u0000\u11f7\u11f8\u0005_\u0000\u0000"+
		"\u11f8\u11fa\u0003\u0296\u014b\u0000\u11f9\u11f7\u0001\u0000\u0000\u0000"+
		"\u11f9\u11fa\u0001\u0000\u0000\u0000\u11fa\u1207\u0001\u0000\u0000\u0000"+
		"\u11fb\u11fc\u0005M\u0000\u0000\u11fc\u11fd\u0005\u001f\u0000\u0000\u11fd"+
		"\u1202\u0003\u029c\u014e\u0000\u11fe\u11ff\u0005%\u0000\u0000\u11ff\u1201"+
		"\u0003\u029c\u014e\u0000\u1200\u11fe\u0001\u0000\u0000\u0000\u1201\u1204"+
		"\u0001\u0000\u0000\u0000\u1202\u1200\u0001\u0000\u0000\u0000\u1202\u1203"+
		"\u0001\u0000\u0000\u0000\u1203\u1205\u0001\u0000\u0000\u0000\u1204\u1202"+
		"\u0001\u0000\u0000\u0000\u1205\u1206\u0005 \u0000\u0000\u1206\u1208\u0001"+
		"\u0000\u0000\u0000\u1207\u11fb\u0001\u0000\u0000\u0000\u1207\u1208\u0001"+
		"\u0000\u0000\u0000\u1208\u1212\u0001\u0000\u0000\u0000\u1209\u1210\u0005"+
		"a\u0000\u0000\u120a\u120b\u00034\u001a\u0000\u120b\u120c\u0005\u001f\u0000"+
		"\u0000\u120c\u120d\u0003H$\u0000\u120d\u120e\u0005 \u0000\u0000\u120e"+
		"\u1211\u0001\u0000\u0000\u0000\u120f\u1211\u0003N\'\u0000\u1210\u120a"+
		"\u0001\u0000\u0000\u0000\u1210\u120f\u0001\u0000\u0000\u0000\u1211\u1213"+
		"\u0001\u0000\u0000\u0000\u1212\u1209\u0001\u0000\u0000\u0000\u1212\u1213"+
		"\u0001\u0000\u0000\u0000\u1213\u1219\u0001\u0000\u0000\u0000\u1214\u1217"+
		"\u0005\u01b8\u0000\u0000\u1215\u1218\u0003N\'\u0000\u1216\u1218\u0003"+
		"\u001c\u000e\u0000\u1217\u1215\u0001\u0000\u0000\u0000\u1217\u1216\u0001"+
		"\u0000\u0000\u0000\u1218\u121a\u0001\u0000\u0000\u0000\u1219\u1214\u0001"+
		"\u0000\u0000\u0000\u1219\u121a\u0001\u0000\u0000\u0000\u121a\u0295\u0001"+
		"\u0000\u0000\u0000\u121b\u1220\u0003\u0298\u014c\u0000\u121c\u121d\u0005"+
		"h\u0000\u0000\u121d\u121f\u0003\u0298\u014c\u0000\u121e\u121c\u0001\u0000"+
		"\u0000\u0000\u121f\u1222\u0001\u0000\u0000\u0000\u1220\u121e\u0001\u0000"+
		"\u0000\u0000\u1220\u1221\u0001\u0000\u0000\u0000\u1221\u0297\u0001\u0000"+
		"\u0000\u0000\u1222\u1220\u0001\u0000\u0000\u0000\u1223\u1224\u0003H$\u0000"+
		"\u1224\u1225\u0005q\u0000\u0000\u1225\u1226\u0005\u001f\u0000\u0000\u1226"+
		"\u122b\u0003b1\u0000\u1227\u1228\u0005%\u0000\u0000\u1228\u122a\u0003"+
		"b1\u0000\u1229\u1227\u0001\u0000\u0000\u0000\u122a\u122d\u0001\u0000\u0000"+
		"\u0000\u122b\u1229\u0001\u0000\u0000\u0000\u122b\u122c\u0001\u0000\u0000"+
		"\u0000\u122c\u122e\u0001\u0000\u0000\u0000\u122d\u122b\u0001\u0000\u0000"+
		"\u0000\u122e\u122f\u0005 \u0000\u0000\u122f\u1235\u0001\u0000\u0000\u0000"+
		"\u1230\u1231\u0003H$\u0000\u1231\u1232\u0003n7\u0000\u1232\u1233\u0003"+
		"b1\u0000\u1233\u1235\u0001\u0000\u0000\u0000\u1234\u1223\u0001\u0000\u0000"+
		"\u0000\u1234\u1230\u0001\u0000\u0000\u0000\u1235\u0299\u0001\u0000\u0000"+
		"\u0000\u1236\u123d\u0005\u0140\u0000\u0000\u1237\u1238\u0005\u00fc\u0000"+
		"\u0000\u1238\u123b\u0005\u0018\u0000\u0000\u1239\u123c\u0005r\u0000\u0000"+
		"\u123a\u123c\u0003b1\u0000\u123b\u1239\u0001\u0000\u0000\u0000\u123b\u123a"+
		"\u0001\u0000\u0000\u0000\u123c\u123e\u0001\u0000\u0000\u0000\u123d\u1237"+
		"\u0001\u0000\u0000\u0000\u123d\u123e\u0001\u0000\u0000\u0000\u123e\u124b"+
		"\u0001\u0000\u0000\u0000\u123f\u1240\u0005M\u0000\u0000\u1240\u1241\u0005"+
		"\u001f\u0000\u0000\u1241\u1246\u0003\u029c\u014e\u0000\u1242\u1243\u0005"+
		"%\u0000\u0000\u1243\u1245\u0003\u029c\u014e\u0000\u1244\u1242\u0001\u0000"+
		"\u0000\u0000\u1245\u1248\u0001\u0000\u0000\u0000\u1246\u1244\u0001\u0000"+
		"\u0000\u0000\u1246\u1247\u0001\u0000\u0000\u0000\u1247\u1249\u0001\u0000"+
		"\u0000\u0000\u1248\u1246\u0001\u0000\u0000\u0000\u1249\u124a\u0005 \u0000"+
		"\u0000\u124a\u124c\u0001\u0000\u0000\u0000\u124b\u123f\u0001\u0000\u0000"+
		"\u0000\u124b\u124c\u0001\u0000\u0000\u0000\u124c\u1275\u0001\u0000\u0000"+
		"\u0000\u124d\u1275\u0005\u009d\u0000\u0000\u124e\u1252\u0005\u0232\u0000"+
		"\u0000\u124f\u1250\u0005\u00fc\u0000\u0000\u1250\u1251\u0005\u0018\u0000"+
		"\u0000\u1251\u1253\u0003b1\u0000\u1252\u124f\u0001\u0000\u0000\u0000\u1252"+
		"\u1253\u0001\u0000\u0000\u0000\u1253\u1259\u0001\u0000\u0000\u0000\u1254"+
		"\u1255\u0005M\u0000\u0000\u1255\u1256\u0005\u001f\u0000\u0000\u1256\u1257"+
		"\u0003\u02a0\u0150\u0000\u1257\u1258\u0005 \u0000\u0000\u1258\u125a\u0001"+
		"\u0000\u0000\u0000\u1259\u1254\u0001\u0000\u0000\u0000\u1259\u125a\u0001"+
		"\u0000\u0000\u0000\u125a\u1275\u0001\u0000\u0000\u0000\u125b\u125c\u0005"+
		":\u0000\u0000\u125c\u125d\u0005\u001f\u0000\u0000\u125d\u125e\u0003\u02a2"+
		"\u0151\u0000\u125e\u125f\u0005%\u0000\u0000\u125f\u1260\u0003\u02a2\u0151"+
		"\u0000\u1260\u1261\u0001\u0000\u0000\u0000\u1261\u1262\u0005 \u0000\u0000"+
		"\u1262\u1275\u0001\u0000\u0000\u0000\u1263\u1270\u0005\u0233\u0000\u0000"+
		"\u1264\u1265\u0005M\u0000\u0000\u1265\u1266\u0005\u001f\u0000\u0000\u1266"+
		"\u126b\u0003\u02a4\u0152\u0000\u1267\u1268\u0005%\u0000\u0000\u1268\u126a"+
		"\u0003\u02a4\u0152\u0000\u1269\u1267\u0001\u0000\u0000\u0000\u126a\u126d"+
		"\u0001\u0000\u0000\u0000\u126b\u1269\u0001\u0000\u0000\u0000\u126b\u126c"+
		"\u0001\u0000\u0000\u0000\u126c\u126e\u0001\u0000\u0000\u0000\u126d\u126b"+
		"\u0001\u0000\u0000\u0000\u126e\u126f\u0005 \u0000\u0000\u126f\u1271\u0001"+
		"\u0000\u0000\u0000\u1270\u1264\u0001\u0000\u0000\u0000\u1270\u1271\u0001"+
		"\u0000\u0000\u0000\u1271\u1275\u0001\u0000\u0000\u0000\u1272\u1275\u0005"+
		"\u0234\u0000\u0000\u1273\u1275\u0005\u0235\u0000\u0000\u1274\u1236\u0001"+
		"\u0000\u0000\u0000\u1274\u124d\u0001\u0000\u0000\u0000\u1274\u124e\u0001"+
		"\u0000\u0000\u0000\u1274\u125b\u0001\u0000\u0000\u0000\u1274\u1263\u0001"+
		"\u0000\u0000\u0000\u1274\u1272\u0001\u0000\u0000\u0000\u1274\u1273\u0001"+
		"\u0000\u0000\u0000\u1275\u029b\u0001\u0000\u0000\u0000\u1276\u1277\u0005"+
		"\u01b6\u0000\u0000\u1277\u1278\u0005\u0018\u0000\u0000\u1278\u12ba\u0007"+
		"\u0000\u0000\u0000\u1279\u127a\u0005\u0127\u0000\u0000\u127a\u127b\u0005"+
		"\u0018\u0000\u0000\u127b\u12ba\u0003b1\u0000\u127c\u127d\u0005\u01b0\u0000"+
		"\u0000\u127d\u127e\u0005\u0018\u0000\u0000\u127e\u12ba\u0007\u0000\u0000"+
		"\u0000\u127f\u1280\u0005\u01b1\u0000\u0000\u1280\u1281\u0005\u0018\u0000"+
		"\u0000\u1281\u12ba\u0007\u0000\u0000\u0000\u1282\u1283\u0005\u01ac\u0000"+
		"\u0000\u1283\u1284\u0005\u0018\u0000\u0000\u1284\u12ba\u0007\u0000\u0000"+
		"\u0000\u1285\u1286\u0005\u01ab\u0000\u0000\u1286\u1287\u0005\u0018\u0000"+
		"\u0000\u1287\u12ba\u0007\u0000\u0000\u0000\u1288\u1289\u0005\u01c2\u0000"+
		"\u0000\u1289\u128a\u0005\u0018\u0000\u0000\u128a\u12ba\u0007\u0000\u0000"+
		"\u0000\u128b\u128c\u0005\u0137\u0000\u0000\u128c\u1292\u0005\u0018\u0000"+
		"\u0000\u128d\u128f\u0005a\u0000\u0000\u128e\u1290\u0003\u00f0x\u0000\u128f"+
		"\u128e\u0001\u0000\u0000\u0000\u128f\u1290\u0001\u0000\u0000\u0000\u1290"+
		"\u1293\u0001\u0000\u0000\u0000\u1291\u1293\u0005b\u0000\u0000\u1292\u128d"+
		"\u0001\u0000\u0000\u0000\u1292\u1291\u0001\u0000\u0000\u0000\u1293\u12ba"+
		"\u0001\u0000\u0000\u0000\u1294\u1295\u0005\u0143\u0000\u0000\u1295\u1296"+
		"\u0005\u0018\u0000\u0000\u1296\u12ba\u0007\u0000\u0000\u0000\u1297\u1298"+
		"\u0005\u01b3\u0000\u0000\u1298\u1299\u0005\u0018\u0000\u0000\u1299\u129b"+
		"\u0003b1\u0000\u129a\u129c\u0005\u011d\u0000\u0000\u129b\u129a\u0001\u0000"+
		"\u0000\u0000\u129b\u129c\u0001\u0000\u0000\u0000\u129c\u12ba\u0001\u0000"+
		"\u0000\u0000\u129d\u129e\u0005\u019c\u0000\u0000\u129e\u129f\u0005\u0018"+
		"\u0000\u0000\u129f\u12ba\u0007\u0000\u0000\u0000\u12a0\u12a1\u0005\u019b"+
		"\u0000\u0000\u12a1\u12a2\u0005\u0018\u0000\u0000\u12a2\u12ba\u0007\u0000"+
		"\u0000\u0000\u12a3\u12a4\u0005\u01f8\u0000\u0000\u12a4\u12a5\u0005\u0018"+
		"\u0000\u0000\u12a5\u12ba\u0007\u0000\u0000\u0000\u12a6\u12a7\u0005\u0132"+
		"\u0000\u0000\u12a7\u12a8\u0005\u0018\u0000\u0000\u12a8\u12ba\u0003b1\u0000"+
		"\u12a9\u12aa\u0005\u01a4\u0000\u0000\u12aa\u12ab\u0005\u0018\u0000\u0000"+
		"\u12ab\u12b7\u0007\u001e\u0000\u0000\u12ac\u12ad\u0005a\u0000\u0000\u12ad"+
		"\u12ae\u0005\u00fd\u0000\u0000\u12ae\u12af\u0005\u001f\u0000\u0000\u12af"+
		"\u12b4\u0003\u029e\u014f\u0000\u12b0\u12b1\u0005%\u0000\u0000\u12b1\u12b3"+
		"\u0003\u029e\u014f\u0000\u12b2\u12b0\u0001\u0000\u0000\u0000\u12b3\u12b6"+
		"\u0001\u0000\u0000\u0000\u12b4\u12b2\u0001\u0000\u0000\u0000\u12b4\u12b5"+
		"\u0001\u0000\u0000\u0000\u12b5\u12b8\u0001\u0000\u0000\u0000\u12b6\u12b4"+
		"\u0001\u0000\u0000\u0000\u12b7\u12ac\u0001\u0000\u0000\u0000\u12b7\u12b8"+
		"\u0001\u0000\u0000\u0000\u12b8\u12ba\u0001\u0000\u0000\u0000\u12b9\u1276"+
		"\u0001\u0000\u0000\u0000\u12b9\u1279\u0001\u0000\u0000\u0000\u12b9\u127c"+
		"\u0001\u0000\u0000\u0000\u12b9\u127f\u0001\u0000\u0000\u0000\u12b9\u1282"+
		"\u0001\u0000\u0000\u0000\u12b9\u1285\u0001\u0000\u0000\u0000\u12b9\u1288"+
		"\u0001\u0000\u0000\u0000\u12b9\u128b\u0001\u0000\u0000\u0000\u12b9\u1294"+
		"\u0001\u0000\u0000\u0000\u12b9\u1297\u0001\u0000\u0000\u0000\u12b9\u129d"+
		"\u0001\u0000\u0000\u0000\u12b9\u12a0\u0001\u0000\u0000\u0000\u12b9\u12a3"+
		"\u0001\u0000\u0000\u0000\u12b9\u12a6\u0001\u0000\u0000\u0000\u12b9\u12a9"+
		"\u0001\u0000\u0000\u0000\u12ba\u029d\u0001\u0000\u0000\u0000\u12bb\u12be"+
		"\u0003b1\u0000\u12bc\u12bd\u0005g\u0000\u0000\u12bd\u12bf\u0003b1\u0000"+
		"\u12be\u12bc\u0001\u0000\u0000\u0000\u12be\u12bf\u0001\u0000\u0000\u0000"+
		"\u12bf\u029f\u0001\u0000\u0000\u0000\u12c0\u12c1\u0005\u0230\u0000\u0000"+
		"\u12c1\u12c2\u0005\u0018\u0000\u0000\u12c2\u12c7\u0007\u0000\u0000\u0000"+
		"\u12c3\u12c4\u0005\u0231\u0000\u0000\u12c4\u12c5\u0005\u0018\u0000\u0000"+
		"\u12c5\u12c7\u0007\u0000\u0000\u0000\u12c6\u12c0\u0001\u0000\u0000\u0000"+
		"\u12c6\u12c3\u0001\u0000\u0000\u0000\u12c7\u02a1\u0001\u0000\u0000\u0000"+
		"\u12c8\u12c9\u0005\u019c\u0000\u0000\u12c9\u12ca\u0005\u0018\u0000\u0000"+
		"\u12ca\u12de\u0007\u0000\u0000\u0000\u12cb\u12cc\u0005\u019b\u0000\u0000"+
		"\u12cc\u12cd\u0005\u0018\u0000\u0000\u12cd\u12de\u0007\u0000\u0000\u0000"+
		"\u12ce\u12cf\u0005\u01f8\u0000\u0000\u12cf\u12d0\u0005\u0018\u0000\u0000"+
		"\u12d0\u12de\u0007\u0000\u0000\u0000\u12d1\u12d2\u0005\u01b1\u0000\u0000"+
		"\u12d2\u12d3\u0005\u0018\u0000\u0000\u12d3\u12de\u0007\u0000\u0000\u0000"+
		"\u12d4\u12d5\u0005\u01ac\u0000\u0000\u12d5\u12d6\u0005\u0018\u0000\u0000"+
		"\u12d6\u12de\u0007\u0000\u0000\u0000\u12d7\u12d8\u0005\u01a2\u0000\u0000"+
		"\u12d8\u12d9\u0005\u0018\u0000\u0000\u12d9\u12db\u0003b1\u0000\u12da\u12dc"+
		"\u0005\u011d\u0000\u0000\u12db\u12da\u0001\u0000\u0000\u0000\u12db\u12dc"+
		"\u0001\u0000\u0000\u0000\u12dc\u12de\u0001\u0000\u0000\u0000\u12dd\u12c8"+
		"\u0001\u0000\u0000\u0000\u12dd\u12cb\u0001\u0000\u0000\u0000\u12dd\u12ce"+
		"\u0001\u0000\u0000\u0000\u12dd\u12d1\u0001\u0000\u0000\u0000\u12dd\u12d4"+
		"\u0001\u0000\u0000\u0000\u12dd\u12d7\u0001\u0000\u0000\u0000\u12de\u02a3"+
		"\u0001\u0000\u0000\u0000\u12df\u12e0\u0005\u0132\u0000\u0000\u12e0\u12e1"+
		"\u0005\u0018\u0000\u0000\u12e1\u12ea\u0003b1\u0000\u12e2\u12e3\u0005\u01b3"+
		"\u0000\u0000\u12e3\u12e4\u0005\u0018\u0000\u0000\u12e4\u12e6\u0003b1\u0000"+
		"\u12e5\u12e7\u0005\u011d\u0000\u0000\u12e6\u12e5\u0001\u0000\u0000\u0000"+
		"\u12e6\u12e7\u0001\u0000\u0000\u0000\u12e7\u12ea\u0001\u0000\u0000\u0000"+
		"\u12e8\u12ea\u0003\u00f0x\u0000\u12e9\u12df\u0001\u0000\u0000\u0000\u12e9"+
		"\u12e2\u0001\u0000\u0000\u0000\u12e9\u12e8\u0001\u0000\u0000\u0000\u12ea"+
		"\u02a5\u0001\u0000\u0000\u0000\u12eb\u12ec\u0005\u023f\u0000\u0000\u12ec"+
		"\u12ed\u0005\u00aa\u0000\u0000\u12ed\u12ee\u0005\u0018\u0000\u0000\u12ee"+
		"\u1322\u00032\u0019\u0000\u12ef\u12f0\u0005\u0115\u0000\u0000\u12f0\u1322"+
		"\u0003\u00f4z\u0000\u12f1\u1322\u0003\u02b0\u0158\u0000\u12f2\u12f3\u0005"+
		":\u0000\u0000\u12f3\u12f8\u0003\u02ae\u0157\u0000\u12f4\u12f5\u0005%\u0000"+
		"\u0000\u12f5\u12f7\u0003\u02ae\u0157\u0000\u12f6\u12f4\u0001\u0000\u0000"+
		"\u0000\u12f7\u12fa\u0001\u0000\u0000\u0000\u12f8\u12f6\u0001\u0000\u0000"+
		"\u0000\u12f8\u12f9\u0001\u0000\u0000\u0000\u12f9\u12fd\u0001\u0000\u0000"+
		"\u0000\u12fa\u12f8\u0001\u0000\u0000\u0000\u12fb\u12fc\u0005M\u0000\u0000"+
		"\u12fc\u12fe\u0003\u02d6\u016b\u0000\u12fd\u12fb\u0001\u0000\u0000\u0000"+
		"\u12fd\u12fe\u0001\u0000\u0000\u0000\u12fe\u1322\u0001\u0000\u0000\u0000"+
		"\u12ff\u1300\u0005\u023f\u0000\u0000\u1300\u1301\u0005\u001f\u0000\u0000"+
		"\u1301\u1306\u0003\u02aa\u0155\u0000\u1302\u1303\u0005%\u0000\u0000\u1303"+
		"\u1305\u0003\u02aa\u0155\u0000\u1304\u1302\u0001\u0000\u0000\u0000\u1305"+
		"\u1308\u0001\u0000\u0000\u0000\u1306\u1304\u0001\u0000\u0000\u0000\u1306"+
		"\u1307\u0001\u0000\u0000\u0000\u1307\u1309\u0001\u0000\u0000\u0000\u1308"+
		"\u1306\u0001\u0000\u0000\u0000\u1309\u130a\u0005 \u0000\u0000\u130a\u1322"+
		"\u0001\u0000\u0000\u0000\u130b\u130c\u0005\u023f\u0000\u0000\u130c\u130d"+
		"\u0005\u0292\u0000\u0000\u130d\u130e\u0005\u0018\u0000\u0000\u130e\u1322"+
		"\u0005\u02df\u0000\u0000\u130f\u1310\u00059\u0000\u0000\u1310\u1311\u0005"+
		"\u0294\u0000\u0000\u1311\u1312\u0005a\u0000\u0000\u1312\u1313\u0005\u015a"+
		"\u0000\u0000\u1313\u131d\u0003\u00f4z\u0000\u1314\u1315\u0005M\u0000\u0000"+
		"\u1315\u131a\u0003\u02a8\u0154\u0000\u1316\u1317\u0005%\u0000\u0000\u1317"+
		"\u1319\u0003\u02a8\u0154\u0000\u1318\u1316\u0001\u0000\u0000\u0000\u1319"+
		"\u131c\u0001\u0000\u0000\u0000\u131a\u1318\u0001\u0000\u0000\u0000\u131a"+
		"\u131b\u0001\u0000\u0000\u0000\u131b\u131e\u0001\u0000\u0000\u0000\u131c"+
		"\u131a\u0001\u0000\u0000\u0000\u131d\u1314\u0001\u0000\u0000\u0000\u131d"+
		"\u131e\u0001\u0000\u0000\u0000\u131e\u1322\u0001\u0000\u0000\u0000\u131f"+
		"\u1322\u0005\u0295\u0000\u0000\u1320\u1322\u0005\u0293\u0000\u0000\u1321"+
		"\u12eb\u0001\u0000\u0000\u0000\u1321\u12ef\u0001\u0000\u0000\u0000\u1321"+
		"\u12f1\u0001\u0000\u0000\u0000\u1321\u12f2\u0001\u0000\u0000\u0000\u1321"+
		"\u12ff\u0001\u0000\u0000\u0000\u1321\u130b\u0001\u0000\u0000\u0000\u1321"+
		"\u130f\u0001\u0000\u0000\u0000\u1321\u131f\u0001\u0000\u0000\u0000\u1321"+
		"\u1320\u0001\u0000\u0000\u0000\u1322\u02a7\u0001\u0000\u0000\u0000\u1323"+
		"\u1324\u0005\u028e\u0000\u0000\u1324\u1325\u0005\u0018\u0000\u0000\u1325"+
		"\u1330\u0007=\u0000\u0000\u1326\u1327\u0005\u028c\u0000\u0000\u1327\u132d"+
		"\u0005\u0018\u0000\u0000\u1328\u132e\u0003\u02ac\u0156\u0000\u1329\u132a"+
		"\u0005\u028d\u0000\u0000\u132a\u132b\u0005\u0018\u0000\u0000\u132b\u132e"+
		"\u00032\u0019\u0000\u132c\u132e\u0007>\u0000\u0000\u132d\u1328\u0001\u0000"+
		"\u0000\u0000\u132d\u1329\u0001\u0000\u0000\u0000\u132d\u132c\u0001\u0000"+
		"\u0000\u0000\u132e\u1330\u0001\u0000\u0000\u0000\u132f\u1323\u0001\u0000"+
		"\u0000\u0000\u132f\u1326\u0001\u0000\u0000\u0000\u1330\u02a9\u0001\u0000"+
		"\u0000\u0000\u1331\u1332\u0005\u0200\u0000\u0000\u1332\u1333\u0005\u0018"+
		"\u0000\u0000\u1333\u1334\u0005\u02e0\u0000\u0000\u1334\u133f\u0007?\u0000"+
		"\u0000\u1335\u1336\u0005\u027f\u0000\u0000\u1336\u1337\u0005\u0018\u0000"+
		"\u0000\u1337\u133f\u0005\u02df\u0000\u0000\u1338\u1339\u0005\u028c\u0000"+
		"\u0000\u1339\u133c\u0005\u0018\u0000\u0000\u133a\u133d\u0005\u02df\u0000"+
		"\u0000\u133b\u133d\u0003\u02ac\u0156\u0000\u133c\u133a\u0001\u0000\u0000"+
		"\u0000\u133c\u133b\u0001\u0000\u0000\u0000\u133d\u133f\u0001\u0000\u0000"+
		"\u0000\u133e\u1331\u0001\u0000\u0000\u0000\u133e\u1335\u0001\u0000\u0000"+
		"\u0000\u133e\u1338\u0001\u0000\u0000\u0000\u133f\u02ab\u0001\u0000\u0000"+
		"\u0000\u1340\u1349\u0005\u02df\u0000\u0000\u1341\u1342\u0005\u028b\u0000"+
		"\u0000\u1342\u1343\u0005\u001f\u0000\u0000\u1343\u1344\u0003\u00f4z\u0000"+
		"\u1344\u1345\u0005\u0018\u0000\u0000\u1345\u1346\u0005\u02df\u0000\u0000"+
		"\u1346\u1347\u0005 \u0000\u0000\u1347\u1349\u0001\u0000\u0000\u0000\u1348"+
		"\u1340\u0001\u0000\u0000\u0000\u1348\u1341\u0001\u0000\u0000\u0000\u1349"+
		"\u02ad\u0001\u0000\u0000\u0000\u134a\u1376\u0003\u02b8\u015c\u0000\u134b"+
		"\u1376\u0003\u02ba\u015d\u0000\u134c\u1376\u0003\u02bc\u015e\u0000\u134d"+
		"\u1376\u0003\u02be\u015f\u0000\u134e\u134f\u0005\u01fc\u0000\u0000\u134f"+
		"\u1350\u0005\u0018\u0000\u0000\u1350\u1376\u00073\u0000\u0000\u1351\u1376"+
		"\u0003\u02c2\u0161\u0000\u1352\u1353\u0005\u028a\u0000\u0000\u1353\u1376"+
		"\u0007\u0000\u0000\u0000\u1354\u1355\u0005\u017b\u0000\u0000\u1355\u1376"+
		"\u0007@\u0000\u0000\u1356\u1376\u0007A\u0000\u0000\u1357\u1376\u0007B"+
		"\u0000\u0000\u1358\u1376\u0007C\u0000\u0000\u1359\u135a\u0005\u029f\u0000"+
		"\u0000\u135a\u135b\u0005\u0018\u0000\u0000\u135b\u1376\u0007D\u0000\u0000"+
		"\u135c\u1376\u0003\u02c4\u0162\u0000\u135d\u135e\u0005\u0125\u0000\u0000"+
		"\u135e\u135f\u0005\u001f\u0000\u0000\u135f\u1360\u0003\u023c\u011e\u0000"+
		"\u1360\u1361\u0005 \u0000\u0000\u1361\u1376\u0001\u0000\u0000\u0000\u1362"+
		"\u1363\u00053\u0000\u0000\u1363\u1364\u0005\u00cc\u0000\u0000\u1364\u1365"+
		"\u0005:\u0000\u0000\u1365\u1376\u0005\u0283\u0000\u0000\u1366\u1367\u0005"+
		"\u0280\u0000\u0000\u1367\u1376\u0007\u0000\u0000\u0000\u1368\u1369\u0005"+
		"\u01f4\u0000\u0000\u1369\u1376\u0007E\u0000\u0000\u136a\u1376\u0003\u02c6"+
		"\u0163\u0000\u136b\u1376\u0003\u02cc\u0166\u0000\u136c\u1376\u0003\u02d2"+
		"\u0169\u0000\u136d\u1376\u0003\u02d0\u0168\u0000\u136e\u1376\u0003\u02ce"+
		"\u0167\u0000\u136f\u1376\u0003\u02d4\u016a\u0000\u1370\u1376\u0003\u02d6"+
		"\u016b\u0000\u1371\u1372\u0005\u027e\u0000\u0000\u1372\u1376\u0007\u0000"+
		"\u0000\u0000\u1373\u1374\u0005\u027d\u0000\u0000\u1374\u1376\u0007\u0000"+
		"\u0000\u0000\u1375\u134a\u0001\u0000\u0000\u0000\u1375\u134b\u0001\u0000"+
		"\u0000\u0000\u1375\u134c\u0001\u0000\u0000\u0000\u1375\u134d\u0001\u0000"+
		"\u0000\u0000\u1375\u134e\u0001\u0000\u0000\u0000\u1375\u1351\u0001\u0000"+
		"\u0000\u0000\u1375\u1352\u0001\u0000\u0000\u0000\u1375\u1354\u0001\u0000"+
		"\u0000\u0000\u1375\u1356\u0001\u0000\u0000\u0000\u1375\u1357\u0001\u0000"+
		"\u0000\u0000\u1375\u1358\u0001\u0000\u0000\u0000\u1375\u1359\u0001\u0000"+
		"\u0000\u0000\u1375\u135c\u0001\u0000\u0000\u0000\u1375\u135d\u0001\u0000"+
		"\u0000\u0000\u1375\u1362\u0001\u0000\u0000\u0000\u1375\u1366\u0001\u0000"+
		"\u0000\u0000\u1375\u1368\u0001\u0000\u0000\u0000\u1375\u136a\u0001\u0000"+
		"\u0000\u0000\u1375\u136b\u0001\u0000\u0000\u0000\u1375\u136c\u0001\u0000"+
		"\u0000\u0000\u1375\u136d\u0001\u0000\u0000\u0000\u1375\u136e\u0001\u0000"+
		"\u0000\u0000\u1375\u136f\u0001\u0000\u0000\u0000\u1375\u1370\u0001\u0000"+
		"\u0000\u0000\u1375\u1371\u0001\u0000\u0000\u0000\u1375\u1373\u0001\u0000"+
		"\u0000\u0000\u1376\u02af\u0001\u0000\u0000\u0000\u1377\u137c\u0003\u02b6"+
		"\u015b\u0000\u1378\u137c\u0003\u023e\u011f\u0000\u1379\u137c\u0003\u02b2"+
		"\u0159\u0000\u137a\u137c\u0003\u02b4\u015a\u0000\u137b\u1377\u0001\u0000"+
		"\u0000\u0000\u137b\u1378\u0001\u0000\u0000\u0000\u137b\u1379\u0001\u0000"+
		"\u0000\u0000\u137b\u137a\u0001\u0000\u0000\u0000\u137c\u02b1\u0001\u0000"+
		"\u0000\u0000\u137d\u137e\u00059\u0000\u0000\u137e\u137f\u0005\u0209\u0000"+
		"\u0000\u137f\u1384\u0003\u00f4z\u0000\u1380\u1381\u0005\u0207\u0000\u0000"+
		"\u1381\u1385\u0005\u0125\u0000\u0000\u1382\u1383\u0005\u0207\u0000\u0000"+
		"\u1383\u1385\u0005\u0208\u0000\u0000\u1384\u1380\u0001\u0000\u0000\u0000"+
		"\u1384\u1382\u0001\u0000\u0000\u0000\u1384\u1385\u0001\u0000\u0000\u0000"+
		"\u1385\u1394\u0001\u0000\u0000\u0000\u1386\u1387\u0005\u023a\u0000\u0000"+
		"\u1387\u1388\u0005\u0209\u0000\u0000\u1388\u1394\u0003\u00f4z\u0000\u1389"+
		"\u138a\u0005\u023f\u0000\u0000\u138a\u138b\u0005\u0209\u0000\u0000\u138b"+
		"\u138c\u0003\u00f4z\u0000\u138c\u138d\u0003\u02b4\u015a\u0000\u138d\u1394"+
		"\u0001\u0000\u0000\u0000\u138e\u1394\u0005\u009a\u0000\u0000\u138f\u1390"+
		"\u0005\u00aa\u0000\u0000\u1390\u1391\u0005\u0018\u0000\u0000\u1391\u1394"+
		"\u0003\u00f4z\u0000\u1392\u1394\u0007F\u0000\u0000\u1393\u137d\u0001\u0000"+
		"\u0000\u0000\u1393\u1386\u0001\u0000\u0000\u0000\u1393\u1389\u0001\u0000"+
		"\u0000\u0000\u1393\u138e\u0001\u0000\u0000\u0000\u1393\u138f\u0001\u0000"+
		"\u0000\u0000\u1393\u1392\u0001\u0000\u0000\u0000\u1394\u02b3\u0001\u0000"+
		"\u0000\u0000\u1395\u1398\u0007G\u0000\u0000\u1396\u1398\u0007B\u0000\u0000"+
		"\u1397\u1395\u0001\u0000\u0000\u0000\u1397\u1396\u0001\u0000\u0000\u0000"+
		"\u1398\u02b5\u0001\u0000\u0000\u0000\u1399\u139a\u00059\u0000\u0000\u139a"+
		"\u139b\u0005\u017f\u0000\u0000\u139b\u13a0\u0003\u023e\u011f\u0000\u139c"+
		"\u139d\u0005%\u0000\u0000\u139d\u139f\u0003\u023e\u011f\u0000\u139e\u139c"+
		"\u0001\u0000\u0000\u0000\u139f\u13a2\u0001\u0000\u0000\u0000\u13a0\u139e"+
		"\u0001\u0000\u0000\u0000\u13a0\u13a1\u0001\u0000\u0000\u0000\u13a1\u13a6"+
		"\u0001\u0000\u0000\u0000\u13a2\u13a0\u0001\u0000\u0000\u0000\u13a3\u13a4"+
		"\u0005g\u0000\u0000\u13a4\u13a5\u0005\u0209\u0000\u0000\u13a5\u13a7\u0003"+
		"\u00f4z\u0000\u13a6\u13a3\u0001\u0000\u0000\u0000\u13a6\u13a7\u0001\u0000"+
		"\u0000\u0000\u13a7\u13ba\u0001\u0000\u0000\u0000\u13a8\u13a9\u00059\u0000"+
		"\u0000\u13a9\u13aa\u0005\u0193\u0000\u0000\u13aa\u13ab\u0005\u017f\u0000"+
		"\u0000\u13ab\u13b0\u0003\u023e\u011f\u0000\u13ac\u13ad\u0005%\u0000\u0000"+
		"\u13ad\u13af\u0003\u023e\u011f\u0000\u13ae\u13ac\u0001\u0000\u0000\u0000"+
		"\u13af\u13b2\u0001\u0000\u0000\u0000\u13b0\u13ae\u0001\u0000\u0000\u0000"+
		"\u13b0\u13b1\u0001\u0000\u0000\u0000\u13b1\u13ba\u0001\u0000\u0000\u0000"+
		"\u13b2\u13b0\u0001\u0000\u0000\u0000\u13b3\u13b4\u0005\u023a\u0000\u0000"+
		"\u13b4\u13b5\u0005\u017f\u0000\u0000\u13b5\u13ba\u0005\u02df\u0000\u0000"+
		"\u13b6\u13b7\u0005\u023f\u0000\u0000\u13b7\u13b8\u0005\u017f\u0000\u0000"+
		"\u13b8\u13ba\u0003\u023e\u011f\u0000\u13b9\u1399\u0001\u0000\u0000\u0000"+
		"\u13b9\u13a8\u0001\u0000\u0000\u0000\u13b9\u13b3\u0001\u0000\u0000\u0000"+
		"\u13b9\u13b6\u0001\u0000\u0000\u0000\u13ba\u02b7\u0001\u0000\u0000\u0000"+
		"\u13bb\u13bc\u0005\u0240\u0000\u0000\u13bc\u13bd\u0005\u0018\u0000\u0000"+
		"\u13bd\u13c4\u0007\u0000\u0000\u0000\u13be\u13bf\u0005\u001f\u0000\u0000"+
		"\u13bf\u13c0\u0005\u0241\u0000\u0000\u13c0\u13c1\u0005\u0018\u0000\u0000"+
		"\u13c1\u13c2\u0003\u00f4z\u0000\u13c2\u13c3\u0005 \u0000\u0000\u13c3\u13c5"+
		"\u0001\u0000\u0000\u0000\u13c4\u13be\u0001\u0000\u0000\u0000\u13c4\u13c5"+
		"\u0001\u0000\u0000\u0000\u13c5\u02b9\u0001\u0000\u0000\u0000\u13c6\u13c7"+
		"\u0005\u027c\u0000\u0000\u13c7\u13db\u0007\u0000\u0000\u0000\u13c8\u13d2"+
		"\u0005\u027a\u0000\u0000\u13c9\u13d3\u0005b\u0000\u0000\u13ca\u13d0\u0005"+
		"a\u0000\u0000\u13cb\u13cc\u0005\u001f\u0000\u0000\u13cc\u13cd\u0005\u027b"+
		"\u0000\u0000\u13cd\u13ce\u0005\u0018\u0000\u0000\u13ce\u13cf\u0007\u0000"+
		"\u0000\u0000\u13cf\u13d1\u0005 \u0000\u0000\u13d0\u13cb\u0001\u0000\u0000"+
		"\u0000\u13d0\u13d1\u0001\u0000\u0000\u0000\u13d1\u13d3\u0001\u0000\u0000"+
		"\u0000\u13d2\u13c9\u0001\u0000\u0000\u0000\u13d2\u13ca\u0001\u0000\u0000"+
		"\u0000\u13d3\u13db\u0001\u0000\u0000\u0000\u13d4\u13d5\u0005\u0279\u0000"+
		"\u0000\u13d5\u13db\u0007\u0000\u0000\u0000\u13d6\u13d7\u0005\u0278\u0000"+
		"\u0000\u13d7\u13db\u0007\u0000\u0000\u0000\u13d8\u13d9\u0005\u0277\u0000"+
		"\u0000\u13d9\u13db\u0007\u0000\u0000\u0000\u13da\u13c6\u0001\u0000\u0000"+
		"\u0000\u13da\u13c8\u0001\u0000\u0000\u0000\u13da\u13d4\u0001\u0000\u0000"+
		"\u0000\u13da\u13d6\u0001\u0000\u0000\u0000\u13da\u13d8\u0001\u0000\u0000"+
		"\u0000\u13db\u02bb\u0001\u0000\u0000\u0000\u13dc\u13dd\u0005\u0275\u0000"+
		"\u0000\u13dd\u13de\u0005\u001f\u0000\u0000\u13de\u13df\u0005\u0276\u0000"+
		"\u0000\u13df\u13e0\u0005\u0018\u0000\u0000\u13e0\u13e1\u0007\u0000\u0000"+
		"\u0000\u13e1\u13e2\u0005 \u0000\u0000\u13e2\u02bd\u0001\u0000\u0000\u0000"+
		"\u13e3\u13f7\u0005\u0274\u0000\u0000\u13e4\u13e5\u0005\u0018\u0000\u0000"+
		"\u13e5\u13f8\u0005b\u0000\u0000\u13e6\u13e7\u0005\u0018\u0000\u0000\u13e7"+
		"\u13e9\u0005a\u0000\u0000\u13e8\u13e6\u0001\u0000\u0000\u0000\u13e8\u13e9"+
		"\u0001\u0000\u0000\u0000\u13e9\u13f5\u0001\u0000\u0000\u0000\u13ea\u13eb"+
		"\u0005\u001f\u0000\u0000\u13eb\u13f0\u0003\u02c0\u0160\u0000\u13ec\u13ed"+
		"\u0005%\u0000\u0000\u13ed\u13ef\u0003\u02c0\u0160\u0000\u13ee\u13ec\u0001"+
		"\u0000\u0000\u0000\u13ef\u13f2\u0001\u0000\u0000\u0000\u13f0\u13ee\u0001"+
		"\u0000\u0000\u0000\u13f0\u13f1\u0001\u0000\u0000\u0000\u13f1\u13f3\u0001"+
		"\u0000\u0000\u0000\u13f2\u13f0\u0001\u0000\u0000\u0000\u13f3\u13f4\u0005"+
		" \u0000\u0000\u13f4\u13f6\u0001\u0000\u0000\u0000\u13f5\u13ea\u0001\u0000"+
		"\u0000\u0000\u13f5\u13f6\u0001\u0000\u0000\u0000\u13f6\u13f8\u0001\u0000"+
		"\u0000\u0000\u13f7\u13e4\u0001\u0000\u0000\u0000\u13f7\u13e8\u0001\u0000"+
		"\u0000\u0000\u13f8\u02bf\u0001\u0000\u0000\u0000\u13f9\u13fa\u0005\u0273"+
		"\u0000\u0000\u13fa\u13fb\u0005\u0018\u0000\u0000\u13fb\u1401\u0007\u0000"+
		"\u0000\u0000\u13fc\u13fd\u0005\u0272\u0000\u0000\u13fd\u13fe\u0005\u0018"+
		"\u0000\u0000\u13fe\u13ff\u0005\u02e0\u0000\u0000\u13ff\u1401\u0007H\u0000"+
		"\u0000\u1400\u13f9\u0001\u0000\u0000\u0000\u1400\u13fc\u0001\u0000\u0000"+
		"\u0000\u1401\u02c1\u0001\u0000\u0000\u0000\u1402\u1403\u0005\u0270\u0000"+
		"\u0000\u1403\u1407\u0007\u0000\u0000\u0000\u1404\u1405\u0005\u026e\u0000"+
		"\u0000\u1405\u1407\u0007I\u0000\u0000\u1406\u1402\u0001\u0000\u0000\u0000"+
		"\u1406\u1404\u0001\u0000\u0000\u0000\u1407\u02c3\u0001\u0000\u0000\u0000"+
		"\u1408\u1409\u0005\u020b\u0000\u0000\u1409\u141c\u0007\u0000\u0000\u0000"+
		"\u140a\u140b\u0005\u020c\u0000\u0000\u140b\u141c\u0007\u0000\u0000\u0000"+
		"\u140c\u140d\u0005\u0296\u0000\u0000\u140d\u140e\u0005\u0018\u0000\u0000"+
		"\u140e\u141c\u0005\u02df\u0000\u0000\u140f\u1410\u0005\u0297\u0000\u0000"+
		"\u1410\u1411\u0005\u0018\u0000\u0000\u1411\u141c\u0005\u02df\u0000\u0000"+
		"\u1412\u1413\u0005\u0299\u0000\u0000\u1413\u1414\u0005\u0018\u0000\u0000"+
		"\u1414\u141c\u0007\u0000\u0000\u0000\u1415\u1416\u0005\u029a\u0000\u0000"+
		"\u1416\u1417\u0005\u0018\u0000\u0000\u1417\u141c\u0007\u0000\u0000\u0000"+
		"\u1418\u1419\u0005\u029b\u0000\u0000\u1419\u141a\u0005\u0018\u0000\u0000"+
		"\u141a\u141c\u0005\u02e0\u0000\u0000\u141b\u1408\u0001\u0000\u0000\u0000"+
		"\u141b\u140a\u0001\u0000\u0000\u0000\u141b\u140c\u0001\u0000\u0000\u0000"+
		"\u141b\u140f\u0001\u0000\u0000\u0000\u141b\u1412\u0001\u0000\u0000\u0000"+
		"\u141b\u1415\u0001\u0000\u0000\u0000\u141b\u1418\u0001\u0000\u0000\u0000"+
		"\u141c\u02c5\u0001\u0000\u0000\u0000\u141d\u1431\u0005\u026d\u0000\u0000"+
		"\u141e\u141f\u0005\u0018\u0000\u0000\u141f\u1432\u0005b\u0000\u0000\u1420"+
		"\u1421\u0005\u0018\u0000\u0000\u1421\u1423\u0005a\u0000\u0000\u1422\u1420"+
		"\u0001\u0000\u0000\u0000\u1422\u1423\u0001\u0000\u0000\u0000\u1423\u142f"+
		"\u0001\u0000\u0000\u0000\u1424\u1425\u0005\u001f\u0000\u0000\u1425\u142a"+
		"\u0003\u02c8\u0164\u0000\u1426\u1427\u0005%\u0000\u0000\u1427\u1429\u0003"+
		"\u02c8\u0164\u0000\u1428\u1426\u0001\u0000\u0000\u0000\u1429\u142c\u0001"+
		"\u0000\u0000\u0000\u142a\u1428\u0001\u0000\u0000\u0000\u142a\u142b\u0001"+
		"\u0000\u0000\u0000\u142b\u142d\u0001\u0000\u0000\u0000\u142c\u142a\u0001"+
		"\u0000\u0000\u0000\u142d\u142e\u0005 \u0000\u0000\u142e\u1430\u0001\u0000"+
		"\u0000\u0000\u142f\u1424\u0001\u0000\u0000\u0000\u142f\u1430\u0001\u0000"+
		"\u0000\u0000\u1430\u1432\u0001\u0000\u0000\u0000\u1431\u141e\u0001\u0000"+
		"\u0000\u0000\u1431\u1422\u0001\u0000\u0000\u0000\u1432\u02c7\u0001\u0000"+
		"\u0000\u0000\u1433\u1434\u0005\u026c\u0000\u0000\u1434\u1435\u0005\u0018"+
		"\u0000\u0000\u1435\u1460\u0007B\u0000\u0000\u1436\u1437\u0005\u0269\u0000"+
		"\u0000\u1437\u1438\u0005\u0018\u0000\u0000\u1438\u1439\u0005\u001f\u0000"+
		"\u0000\u1439\u143a\u0005\u026b\u0000\u0000\u143a\u143b\u0005\u0018\u0000"+
		"\u0000\u143b\u143c\u0005\u02e0\u0000\u0000\u143c\u1460\u0005 \u0000\u0000"+
		"\u143d\u143e\u0005\u0268\u0000\u0000\u143e\u143f\u0005\u0018\u0000\u0000"+
		"\u143f\u1460\u0005\u02e0\u0000\u0000\u1440\u1441\u0005\u0267\u0000\u0000"+
		"\u1441\u1442\u0005\u0018\u0000\u0000\u1442\u1460\u0005\u02e0\u0000\u0000"+
		"\u1443\u1444\u0005\u0266\u0000\u0000\u1444\u1445\u0005\u0018\u0000\u0000"+
		"\u1445\u1460\u0005\u02e0\u0000\u0000\u1446\u1447\u0005\u0265\u0000\u0000"+
		"\u1447\u1448\u0005\u0018\u0000\u0000\u1448\u1460\u0007J\u0000\u0000\u1449"+
		"\u144a\u0005\u0264\u0000\u0000\u144a\u144b\u0005\u0018\u0000\u0000\u144b"+
		"\u1460\u0007K\u0000\u0000\u144c\u144d\u0005\u0263\u0000\u0000\u144d\u144e"+
		"\u0005\u0018\u0000\u0000\u144e\u1460\u0005\u02e0\u0000\u0000\u144f\u1450"+
		"\u0005\u0262\u0000\u0000\u1450\u1451\u0005\u0018\u0000\u0000\u1451\u1460"+
		"\u0007\u0000\u0000\u0000\u1452\u1453\u0005\u0261\u0000\u0000\u1453\u1454"+
		"\u0005\u0018\u0000\u0000\u1454\u1455\u0005\u001f\u0000\u0000\u1455\u145a"+
		"\u0003\u02ca\u0165\u0000\u1456\u1457\u0005%\u0000\u0000\u1457\u1459\u0003"+
		"\u02ca\u0165\u0000\u1458\u1456\u0001\u0000\u0000\u0000\u1459\u145c\u0001"+
		"\u0000\u0000\u0000\u145a\u1458\u0001\u0000\u0000\u0000\u145a\u145b\u0001"+
		"\u0000\u0000\u0000\u145b\u145d\u0001\u0000\u0000\u0000\u145c\u145a\u0001"+
		"\u0000\u0000\u0000\u145d\u145e\u0005 \u0000\u0000\u145e\u1460\u0001\u0000"+
		"\u0000\u0000\u145f\u1433\u0001\u0000\u0000\u0000\u145f\u1436\u0001\u0000"+
		"\u0000\u0000\u145f\u143d\u0001\u0000\u0000\u0000\u145f\u1440\u0001\u0000"+
		"\u0000\u0000\u145f\u1443\u0001\u0000\u0000\u0000\u145f\u1446\u0001\u0000"+
		"\u0000\u0000\u145f\u1449\u0001\u0000\u0000\u0000\u145f\u144c\u0001\u0000"+
		"\u0000\u0000\u145f\u144f\u0001\u0000\u0000\u0000\u145f\u1452\u0001\u0000"+
		"\u0000\u0000\u1460\u02c9\u0001\u0000\u0000\u0000\u1461\u1462\u0005\u025f"+
		"\u0000\u0000\u1462\u1463\u0005\u0018\u0000\u0000\u1463\u1464\u0005\u02e0"+
		"\u0000\u0000\u1464\u146f\u0007L\u0000\u0000\u1465\u1466\u0005\u0260\u0000"+
		"\u0000\u1466\u1467\u0005\u0018\u0000\u0000\u1467\u146f\u0005\u02e0\u0000"+
		"\u0000\u1468\u1469\u0005\u025e\u0000\u0000\u1469\u146a\u0005\u0018\u0000"+
		"\u0000\u146a\u146f\u0005\u02e0\u0000\u0000\u146b\u146c\u0005\u025d\u0000"+
		"\u0000\u146c\u146d\u0005\u0018\u0000\u0000\u146d\u146f\u0005\u02e0\u0000"+
		"\u0000\u146e\u1461\u0001\u0000\u0000\u0000\u146e\u1465\u0001\u0000\u0000"+
		"\u0000\u146e\u1468\u0001\u0000\u0000\u0000\u146e\u146b\u0001\u0000\u0000"+
		"\u0000\u146f\u02cb\u0001\u0000\u0000\u0000\u1470\u1471\u0005\u025c\u0000"+
		"\u0000\u1471\u1477\u0007M\u0000\u0000\u1472\u1473\u0005\u025a\u0000\u0000"+
		"\u1473\u1477\u0007\u0000\u0000\u0000\u1474\u1475\u0005\u0258\u0000\u0000"+
		"\u1475\u1477\u0007N\u0000\u0000\u1476\u1470\u0001\u0000\u0000\u0000\u1476"+
		"\u1472\u0001\u0000\u0000\u0000\u1476\u1474\u0001\u0000\u0000\u0000\u1477"+
		"\u02cd\u0001\u0000\u0000\u0000\u1478\u1479\u0005\u0257\u0000\u0000\u1479"+
		"\u148e\u0007\u0000\u0000\u0000\u147a\u147b\u0005\u0256\u0000\u0000\u147b"+
		"\u148e\u0007\u0000\u0000\u0000\u147c\u147d\u0005\u0255\u0000\u0000\u147d"+
		"\u148e\u0007\u0000\u0000\u0000\u147e\u147f\u0005\u0254\u0000\u0000\u147f"+
		"\u148e\u0007\u0000\u0000\u0000\u1480\u1481\u0005\u0253\u0000\u0000\u1481"+
		"\u148e\u0007\u0000\u0000\u0000\u1482\u1483\u0005\u0252\u0000\u0000\u1483"+
		"\u1484\u0005\u0018\u0000\u0000\u1484\u148e\u0005\u02e0\u0000\u0000\u1485"+
		"\u1486\u0005\u0251\u0000\u0000\u1486\u148e\u0007\u0000\u0000\u0000\u1487"+
		"\u1488\u0005\u0250\u0000\u0000\u1488\u148e\u0007\u0000\u0000\u0000\u1489"+
		"\u148a\u0005\u024f\u0000\u0000\u148a\u148e\u0007\u0000\u0000\u0000\u148b"+
		"\u148c\u0005\u024e\u0000\u0000\u148c\u148e\u0007\u0000\u0000\u0000\u148d"+
		"\u1478\u0001\u0000\u0000\u0000\u148d\u147a\u0001\u0000\u0000\u0000\u148d"+
		"\u147c\u0001\u0000\u0000\u0000\u148d\u147e\u0001\u0000\u0000\u0000\u148d"+
		"\u1480\u0001\u0000\u0000\u0000\u148d\u1482\u0001\u0000\u0000\u0000\u148d"+
		"\u1485\u0001\u0000\u0000\u0000\u148d\u1487\u0001\u0000\u0000\u0000\u148d"+
		"\u1489\u0001\u0000\u0000\u0000\u148d\u148b\u0001\u0000\u0000\u0000\u148e"+
		"\u02cf\u0001\u0000\u0000\u0000\u148f\u1490\u0005\u024d\u0000\u0000\u1490"+
		"\u1497\u0007\u0000\u0000\u0000\u1491\u1492\u0005\u024c\u0000\u0000\u1492"+
		"\u1497\u0007\u0000\u0000\u0000\u1493\u1494\u0005\u024b\u0000\u0000\u1494"+
		"\u1495\u0005\u0018\u0000\u0000\u1495\u1497\u0007\u0000\u0000\u0000\u1496"+
		"\u148f\u0001\u0000\u0000\u0000\u1496\u1491\u0001\u0000\u0000\u0000\u1496"+
		"\u1493\u0001\u0000\u0000\u0000\u1497\u02d1\u0001\u0000\u0000\u0000\u1498"+
		"\u149f\u0005\u024a\u0000\u0000\u1499\u149f\u0005\u0249\u0000\u0000\u149a"+
		"\u149f\u0005\u0248\u0000\u0000\u149b\u149f\u0005\u0247\u0000\u0000\u149c"+
		"\u149d\u0005\u0246\u0000\u0000\u149d\u149f\u0007\u0000\u0000\u0000\u149e"+
		"\u1498\u0001\u0000\u0000\u0000\u149e\u1499\u0001\u0000\u0000\u0000\u149e"+
		"\u149a\u0001\u0000\u0000\u0000\u149e\u149b\u0001\u0000\u0000\u0000\u149e"+
		"\u149c\u0001\u0000\u0000\u0000\u149f\u02d3\u0001\u0000\u0000\u0000\u14a0"+
		"\u14a1\u0005\u0244\u0000\u0000\u14a1\u14a2\u0005\u0018\u0000\u0000\u14a2"+
		"\u14a3\u0005\u02e0\u0000\u0000\u14a3\u14a4\u0007O\u0000\u0000\u14a4\u02d5"+
		"\u0001\u0000\u0000\u0000\u14a5\u14a6\u0005\u007f\u0000\u0000\u14a6\u14a7"+
		"\u0005\u0227\u0000\u0000\u14a7\u14a9\u0005\u02e0\u0000\u0000\u14a8\u14aa"+
		"\u0005\u0245\u0000\u0000\u14a9\u14a8\u0001\u0000\u0000\u0000\u14a9\u14aa"+
		"\u0001\u0000\u0000\u0000\u14aa\u14af\u0001\u0000\u0000\u0000\u14ab\u14ac"+
		"\u0005\u007f\u0000\u0000\u14ac\u14af\u0005\u0242\u0000\u0000\u14ad\u14af"+
		"\u0005\u0243\u0000\u0000\u14ae\u14a5\u0001\u0000\u0000\u0000\u14ae\u14ab"+
		"\u0001\u0000\u0000\u0000\u14ae\u14ad\u0001\u0000\u0000\u0000\u14af\u02d7"+
		"\u0001\u0000\u0000\u0000\u14b0\u14b1\u0005\u001f\u0000\u0000\u14b1\u14b6"+
		"\u0003D\"\u0000\u14b2\u14b3\u0005%\u0000\u0000\u14b3\u14b5\u0003D\"\u0000"+
		"\u14b4\u14b2\u0001\u0000\u0000\u0000\u14b5\u14b8\u0001\u0000\u0000\u0000"+
		"\u14b6\u14b4\u0001\u0000\u0000\u0000\u14b6\u14b7\u0001\u0000\u0000\u0000"+
		"\u14b7\u14b9\u0001\u0000\u0000\u0000\u14b8\u14b6\u0001\u0000\u0000\u0000"+
		"\u14b9\u14ba\u0005 \u0000\u0000\u14ba\u02d9\u0001\u0000\u0000\u0000\u14bb"+
		"\u14bc\u0005\u001f\u0000\u0000\u14bc\u14c1\u0003\u02dc\u016e\u0000\u14bd"+
		"\u14be\u0005%\u0000\u0000\u14be\u14c0\u0003\u02dc\u016e\u0000\u14bf\u14bd"+
		"\u0001\u0000\u0000\u0000\u14c0\u14c3\u0001\u0000\u0000\u0000\u14c1\u14bf"+
		"\u0001\u0000\u0000\u0000\u14c1\u14c2\u0001\u0000\u0000\u0000\u14c2\u14c4"+
		"\u0001\u0000\u0000\u0000\u14c3\u14c1\u0001\u0000\u0000\u0000\u14c4\u14c5"+
		"\u0005 \u0000\u0000\u14c5\u02db\u0001\u0000\u0000\u0000\u14c6\u14c7\u0005"+
		"9\u0000\u0000\u14c7\u14c8\u0005\u017a\u0000\u0000\u14c8\u14cd\u0003D\""+
		"\u0000\u14c9\u14ca\u00054\u0000\u0000\u14ca\u14cb\u0005\u017a\u0000\u0000"+
		"\u14cb\u14cd\u0003D\"\u0000\u14cc\u14c6\u0001\u0000\u0000\u0000\u14cc"+
		"\u14c9\u0001\u0000\u0000\u0000\u14cd\u02dd\u0001\u0000\u0000\u0000\u14ce"+
		"\u14d6\u00034\u001a\u0000\u14cf\u14d0\u0005\u02a0\u0000\u0000\u14d0\u14d6"+
		"\u0003\u00f4z\u0000\u14d1\u14d2\u00034\u001a\u0000\u14d2\u14d3\u0005\u02a0"+
		"\u0000\u0000\u14d3\u14d4\u0003\u00f4z\u0000\u14d4\u14d6\u0001\u0000\u0000"+
		"\u0000\u14d5\u14ce\u0001\u0000\u0000\u0000\u14d5\u14cf\u0001\u0000\u0000"+
		"\u0000\u14d5\u14d1\u0001\u0000\u0000\u0000\u14d6\u02df\u0001\u0000\u0000"+
		"\u0000\u14d7\u14dd\u0003\u012e\u0097\u0000\u14d8\u14dd\u0003\u013a\u009d"+
		"\u0000\u14d9\u14dd\u0003\u0374\u01ba\u0000\u14da\u14dd\u0003\u0386\u01c3"+
		"\u0000\u14db\u14dd\u0003\u038c\u01c6\u0000\u14dc\u14d7\u0001\u0000\u0000"+
		"\u0000\u14dc\u14d8\u0001\u0000\u0000\u0000\u14dc\u14d9\u0001\u0000\u0000"+
		"\u0000\u14dc\u14da\u0001\u0000\u0000\u0000\u14dc\u14db\u0001\u0000\u0000"+
		"\u0000\u14dd\u02e1\u0001\u0000\u0000\u0000\u14de\u14e1\u0003\u02e4\u0172"+
		"\u0000\u14df\u14e1\u0003\u02e6\u0173\u0000\u14e0\u14de\u0001\u0000\u0000"+
		"\u0000\u14e0\u14df\u0001\u0000\u0000\u0000\u14e1\u02e3\u0001\u0000\u0000"+
		"\u0000\u14e2\u14e3\u00052\u0000\u0000\u14e3\u14e4\u0005;\u0000\u0000\u14e4"+
		"\u14e6\u0003@ \u0000\u14e5\u14e7\u0003P(\u0000\u14e6\u14e5\u0001\u0000"+
		"\u0000\u0000\u14e6\u14e7\u0001\u0000\u0000\u0000\u14e7\u14e8\u0001\u0000"+
		"\u0000\u0000\u14e8\u14e9\u0003\u02e8\u0174\u0000\u14e9\u14ea\u0005`\u0000"+
		"\u0000\u14ea\u14eb\u0003\u031e\u018f\u0000\u14eb\u14ec\u0003\u02ea\u0175"+
		"\u0000\u14ec\u02e5\u0001\u0000\u0000\u0000\u14ed\u14ee\u00052\u0000\u0000"+
		"\u14ee\u14ef\u0005\u0186\u0000\u0000\u14ef\u14f0\u0005;\u0000\u0000\u14f0"+
		"\u14f1\u0003@ \u0000\u14f1\u14f2\u0005\u00d4\u0000\u0000\u14f2\u14f3\u0005"+
		"\u001f\u0000\u0000\u14f3\u14f4\u0003\u001c\u000e\u0000\u14f4\u14fb\u0005"+
		" \u0000\u0000\u14f5\u14f6\u0005M\u0000\u0000\u14f6\u14f7\u0005\u001f\u0000"+
		"\u0000\u14f7\u14f8\u0005\u02a4\u0000\u0000\u14f8\u14f9\u0005\u0018\u0000"+
		"\u0000\u14f9\u14fa\u0005\u02e1\u0000\u0000\u14fa\u14fc\u0005 \u0000\u0000"+
		"\u14fb\u14f5\u0001\u0000\u0000\u0000\u14fb\u14fc\u0001\u0000\u0000\u0000"+
		"\u14fc\u14fd\u0001\u0000\u0000\u0000\u14fd\u14fe\u0005`\u0000\u0000\u14fe"+
		"\u14ff\u0003\u031e\u018f\u0000\u14ff\u02e7\u0001\u0000\u0000\u0000\u1500"+
		"\u1501\u0005M\u0000\u0000\u1501\u1502\u0005\u001f\u0000\u0000\u1502\u150c"+
		"\u0003\u01e8\u00f4\u0000\u1503\u1504\u0005%\u0000\u0000\u1504\u1509\u0003"+
		"\u01dc\u00ee\u0000\u1505\u1506\u0005%\u0000\u0000\u1506\u1508\u0003\u01dc"+
		"\u00ee\u0000\u1507\u1505\u0001\u0000\u0000\u0000\u1508\u150b\u0001\u0000"+
		"\u0000\u0000\u1509\u1507\u0001\u0000\u0000\u0000\u1509\u150a\u0001\u0000"+
		"\u0000\u0000\u150a\u150d\u0001\u0000\u0000\u0000\u150b\u1509\u0001\u0000"+
		"\u0000\u0000\u150c\u1503\u0001\u0000\u0000\u0000\u150c\u150d\u0001\u0000"+
		"\u0000\u0000\u150d\u150e\u0001\u0000\u0000\u0000\u150e\u150f\u0005 \u0000"+
		"\u0000\u150f\u02e9\u0001\u0000\u0000\u0000\u1510\u1511\u0005\u0108\u0000"+
		"\u0000\u1511\u1512\u0005\u001f\u0000\u0000\u1512\u1517\u0003\u035c\u01ae"+
		"\u0000\u1513\u1514\u0005%\u0000\u0000\u1514\u1516\u0003\u035c\u01ae\u0000"+
		"\u1515\u1513\u0001\u0000\u0000\u0000\u1516\u1519\u0001\u0000\u0000\u0000"+
		"\u1517\u1515\u0001\u0000\u0000\u0000\u1517\u1518\u0001\u0000\u0000\u0000"+
		"\u1518\u151a\u0001\u0000\u0000\u0000\u1519\u1517\u0001\u0000\u0000\u0000"+
		"\u151a\u151b\u0005 \u0000\u0000\u151b\u151d\u0001\u0000\u0000\u0000\u151c"+
		"\u1510\u0001\u0000\u0000\u0000\u151c\u151d\u0001\u0000\u0000\u0000\u151d"+
		"\u02eb\u0001\u0000\u0000\u0000\u151e\u1520\u0003\u034a\u01a5\u0000\u151f"+
		"\u151e\u0001\u0000\u0000\u0000\u151f\u1520\u0001\u0000\u0000\u0000\u1520"+
		"\u1521\u0001\u0000\u0000\u0000\u1521\u1523\u0005/\u0000\u0000\u1522\u1524"+
		"\u0003\u032a\u0195\u0000\u1523\u1522\u0001\u0000\u0000\u0000\u1523\u1524"+
		"\u0001\u0000\u0000\u0000\u1524\u1526\u0001\u0000\u0000\u0000\u1525\u1527"+
		"\u0005K\u0000\u0000\u1526\u1525\u0001\u0000\u0000\u0000\u1526\u1527\u0001"+
		"\u0000\u0000\u0000\u1527\u152a\u0001\u0000\u0000\u0000\u1528\u152b\u0003"+
		"@ \u0000\u1529\u152b\u0003\u00aaU\u0000\u152a\u1528\u0001\u0000\u0000"+
		"\u0000\u152a\u1529\u0001\u0000\u0000\u0000\u152b\u1530\u0001\u0000\u0000"+
		"\u0000\u152c\u152e\u0005`\u0000\u0000\u152d\u152c\u0001\u0000\u0000\u0000"+
		"\u152d\u152e\u0001\u0000\u0000\u0000\u152e\u152f\u0001\u0000\u0000\u0000"+
		"\u152f\u1531\u0003\\.\u0000\u1530\u152d\u0001\u0000\u0000\u0000\u1530"+
		"\u1531\u0001\u0000\u0000\u0000\u1531\u1533\u0001\u0000\u0000\u0000\u1532"+
		"\u1534\u0003\u0306\u0183\u0000\u1533\u1532\u0001\u0000\u0000\u0000\u1533"+
		"\u1534\u0001\u0000\u0000\u0000\u1534\u1539\u0001\u0000\u0000\u0000\u1535"+
		"\u153a\u0003\u02ee\u0177\u0000\u1536\u153a\u0003\u02f0\u0178\u0000\u1537"+
		"\u153a\u0003\u02f2\u0179\u0000\u1538\u153a\u0003\u02f4\u017a\u0000\u1539"+
		"\u1535\u0001\u0000\u0000\u0000\u1539\u1536\u0001\u0000\u0000\u0000\u1539"+
		"\u1537\u0001\u0000\u0000\u0000\u1539\u1538\u0001\u0000\u0000\u0000\u153a"+
		"\u02ed\u0001\u0000\u0000\u0000\u153b\u153d\u0003P(\u0000\u153c\u153b\u0001"+
		"\u0000\u0000\u0000\u153c\u153d\u0001\u0000\u0000\u0000\u153d\u153f\u0001"+
		"\u0000\u0000\u0000\u153e\u1540\u0003\u0350\u01a8\u0000\u153f\u153e\u0001"+
		"\u0000\u0000\u0000\u153f\u1540\u0001\u0000\u0000\u0000\u1540\u1541\u0001"+
		"\u0000\u0000\u0000\u1541\u1542\u0005\u009a\u0000\u0000\u1542\u1543\u0005"+
		"L\u0000\u0000\u1543\u02ef\u0001\u0000\u0000\u0000\u1544\u1546\u0003P("+
		"\u0000\u1545\u1544\u0001\u0000\u0000\u0000\u1545\u1546\u0001\u0000\u0000"+
		"\u0000\u1546\u1548\u0001\u0000\u0000\u0000\u1547\u1549\u0003\u0350\u01a8"+
		"\u0000\u1548\u1547\u0001\u0000\u0000\u0000\u1548\u1549\u0001\u0000\u0000"+
		"\u0000\u1549\u154a\u0001\u0000\u0000\u0000\u154a\u154b\u0005L\u0000\u0000"+
		"\u154b\u1550\u0003\u0310\u0188\u0000\u154c\u154d\u0005%\u0000\u0000\u154d"+
		"\u154f\u0003\u0310\u0188\u0000\u154e\u154c\u0001\u0000\u0000\u0000\u154f"+
		"\u1552\u0001\u0000\u0000\u0000\u1550\u154e\u0001\u0000\u0000\u0000\u1550"+
		"\u1551\u0001\u0000\u0000\u0000\u1551\u02f1\u0001\u0000\u0000\u0000\u1552"+
		"\u1550\u0001\u0000\u0000\u0000\u1553\u1555\u0003P(\u0000\u1554\u1553\u0001"+
		"\u0000\u0000\u0000\u1554\u1555\u0001\u0000\u0000\u0000\u1555\u1557\u0001"+
		"\u0000\u0000\u0000\u1556\u1558\u0003\u0350\u01a8\u0000\u1557\u1556\u0001"+
		"\u0000\u0000\u0000\u1557\u1558\u0001\u0000\u0000\u0000\u1558\u1559\u0001"+
		"\u0000\u0000\u0000\u1559\u155a\u0003\u031e\u018f\u0000\u155a\u02f3\u0001"+
		"\u0000\u0000\u0000\u155b\u155d\u0003P(\u0000\u155c\u155b\u0001\u0000\u0000"+
		"\u0000\u155c\u155d\u0001\u0000\u0000\u0000\u155d\u155e\u0001\u0000\u0000"+
		"\u0000\u155e\u155f\u0003\u0308\u0184\u0000\u155f\u02f5\u0001\u0000\u0000"+
		"\u0000\u1560\u1562\u0003\u034a\u01a5\u0000\u1561\u1560\u0001\u0000\u0000"+
		"\u0000\u1561\u1562\u0001\u0000\u0000\u0000\u1562\u1563\u0001\u0000\u0000"+
		"\u0000\u1563\u1565\u0005\u00bf\u0000\u0000\u1564\u1566\u0003\u032a\u0195"+
		"\u0000\u1565\u1564\u0001\u0000\u0000\u0000\u1565\u1566\u0001\u0000\u0000"+
		"\u0000\u1566\u1567\u0001\u0000\u0000\u0000\u1567\u1569\u0003\u02f8\u017c"+
		"\u0000\u1568\u156a\u0003\u02fc\u017e\u0000\u1569\u1568\u0001\u0000\u0000"+
		"\u0000\u1569\u156a\u0001\u0000\u0000\u0000\u156a\u156f\u0001\u0000\u0000"+
		"\u0000\u156b\u156d\u0005`\u0000\u0000\u156c\u156b\u0001\u0000\u0000\u0000"+
		"\u156c\u156d\u0001\u0000\u0000\u0000\u156d\u156e\u0001\u0000\u0000\u0000"+
		"\u156e\u1570\u0003\\.\u0000\u156f\u156c\u0001\u0000\u0000\u0000\u156f"+
		"\u1570\u0001\u0000\u0000\u0000\u1570\u1572\u0001\u0000\u0000\u0000\u1571"+
		"\u1573\u0003\u02fa\u017d\u0000\u1572\u1571\u0001\u0000\u0000\u0000\u1572"+
		"\u1573\u0001\u0000\u0000\u0000\u1573\u1577\u0001\u0000\u0000\u0000\u1574"+
		"\u1576\u0003\u02fe\u017f\u0000\u1575\u1574\u0001\u0000\u0000\u0000\u1576"+
		"\u1579\u0001\u0000\u0000\u0000\u1577\u1575\u0001\u0000\u0000\u0000\u1577"+
		"\u1578\u0001\u0000\u0000\u0000\u1578\u157b\u0001\u0000\u0000\u0000\u1579"+
		"\u1577\u0001\u0000\u0000\u0000\u157a\u157c\u0003\u0350\u01a8\u0000\u157b"+
		"\u157a\u0001\u0000\u0000\u0000\u157b\u157c\u0001\u0000\u0000\u0000\u157c"+
		"\u157e\u0001\u0000\u0000\u0000\u157d\u157f\u0003\u0316\u018b\u0000\u157e"+
		"\u157d\u0001\u0000\u0000\u0000\u157e\u157f\u0001\u0000\u0000\u0000\u157f"+
		"\u02f7\u0001\u0000\u0000\u0000\u1580\u1582\u0005K\u0000\u0000\u1581\u1580"+
		"\u0001\u0000\u0000\u0000\u1581\u1582\u0001\u0000\u0000\u0000\u1582\u1583"+
		"\u0001\u0000\u0000\u0000\u1583\u1584\u0003\u0336\u019b\u0000\u1584\u02f9"+
		"\u0001\u0000\u0000\u0000\u1585\u1586\u0005^\u0000\u0000\u1586\u158b\u0003"+
		"\u0336\u019b\u0000\u1587\u1589\u0005`\u0000\u0000\u1588\u1587\u0001\u0000"+
		"\u0000\u0000\u1588\u1589\u0001\u0000\u0000\u0000\u1589\u158a\u0001\u0000"+
		"\u0000\u0000\u158a\u158c\u0003\\.\u0000\u158b\u1588\u0001\u0000\u0000"+
		"\u0000\u158b\u158c\u0001\u0000\u0000\u0000\u158c\u158d\u0001\u0000\u0000"+
		"\u0000\u158d\u158e\u0005a\u0000\u0000\u158e\u158f\u0003b1\u0000\u158f"+
		"\u02fb\u0001\u0000\u0000\u0000\u1590\u15a3\u0003\u0306\u0183\u0000\u1591"+
		"\u1593\u0005%\u0000\u0000\u1592\u1591\u0001\u0000\u0000\u0000\u1592\u1593"+
		"\u0001\u0000\u0000\u0000\u1593\u1594\u0001\u0000\u0000\u0000\u1594\u1595"+
		"\u0005>\u0000\u0000\u1595\u1596\u0005\u001f\u0000\u0000\u1596\u159b\u0003"+
		"V+\u0000\u1597\u1598\u0005%\u0000\u0000\u1598\u159a\u0003V+\u0000\u1599"+
		"\u1597\u0001\u0000\u0000\u0000\u159a\u159d\u0001\u0000\u0000\u0000\u159b"+
		"\u1599\u0001\u0000\u0000\u0000\u159b\u159c\u0001\u0000\u0000\u0000\u159c"+
		"\u159e\u0001\u0000\u0000\u0000\u159d\u159b\u0001\u0000\u0000\u0000\u159e"+
		"\u159f\u0005 \u0000\u0000\u159f\u15a4\u0001\u0000\u0000\u0000\u15a0\u15a1"+
		"\u0005>\u0000\u0000\u15a1\u15a2\u0005\u0018\u0000\u0000\u15a2\u15a4\u0003"+
		"V+\u0000\u15a3\u1592\u0001\u0000\u0000\u0000\u15a3\u15a0\u0001\u0000\u0000"+
		"\u0000\u15a3\u15a4\u0001\u0000\u0000\u0000\u15a4\u02fd\u0001\u0000\u0000"+
		"\u0000\u15a5\u15a9\u0003\u0300\u0180\u0000\u15a6\u15a9\u0003\u0302\u0181"+
		"\u0000\u15a7\u15a9\u0003\u0304\u0182\u0000\u15a8\u15a5\u0001\u0000\u0000"+
		"\u0000\u15a8\u15a6\u0001\u0000\u0000\u0000\u15a8\u15a7\u0001\u0000\u0000"+
		"\u0000\u15a9\u02ff\u0001\u0000\u0000\u0000\u15aa\u15ab\u0005Q\u0000\u0000"+
		"\u15ab\u15b2\u0005\u00f1\u0000\u0000\u15ac\u15ad\u0005Q\u0000\u0000\u15ad"+
		"\u15ae\u0005k\u0000\u0000\u15ae\u15af\u0005\u00f1\u0000\u0000\u15af\u15b0"+
		"\u0005w\u0000\u0000\u15b0\u15b2\u0005\u017e\u0000\u0000\u15b1\u15aa\u0001"+
		"\u0000\u0000\u0000\u15b1\u15ac\u0001\u0000\u0000\u0000\u15b2\u15b5\u0001"+
		"\u0000\u0000\u0000\u15b3\u15b4\u0005h\u0000\u0000\u15b4\u15b6\u0003b1"+
		"\u0000\u15b5\u15b3\u0001\u0000\u0000\u0000\u15b5\u15b6\u0001\u0000\u0000"+
		"\u0000\u15b6\u15b7\u0001\u0000\u0000\u0000\u15b7\u15b8\u0005e\u0000\u0000"+
		"\u15b8\u15b9\u00050\u0000\u0000\u15b9\u15ba\u0003\u030e\u0187\u0000\u15ba"+
		"\u0301\u0001\u0000\u0000\u0000\u15bb\u15bc\u0005Q\u0000\u0000\u15bc\u15c3"+
		"\u0005\u00f1\u0000\u0000\u15bd\u15be\u0005Q\u0000\u0000\u15be\u15bf\u0005"+
		"k\u0000\u0000\u15bf\u15c0\u0005\u00f1\u0000\u0000\u15c0\u15c1\u0005w\u0000"+
		"\u0000\u15c1\u15c3\u0005\u017e\u0000\u0000\u15c2\u15bb\u0001\u0000\u0000"+
		"\u0000\u15c2\u15bd\u0001\u0000\u0000\u0000\u15c3\u15c6\u0001\u0000\u0000"+
		"\u0000\u15c4\u15c5\u0005h\u0000\u0000\u15c5\u15c7\u0003b1\u0000\u15c6"+
		"\u15c4\u0001\u0000\u0000\u0000\u15c6\u15c7\u0001\u0000\u0000\u0000\u15c7"+
		"\u15c8\u0001\u0000\u0000\u0000\u15c8\u15c9\u0005e\u0000\u0000\u15c9\u15ca"+
		"\u00051\u0000\u0000\u15ca\u0303\u0001\u0000\u0000\u0000\u15cb\u15cc\u0005"+
		"Q\u0000\u0000\u15cc\u15cd\u0005k\u0000\u0000\u15cd\u15d0\u0005\u00f1\u0000"+
		"\u0000\u15ce\u15cf\u0005w\u0000\u0000\u15cf\u15d1\u0005\u00f2\u0000\u0000"+
		"\u15d0\u15ce\u0001\u0000\u0000\u0000\u15d0\u15d1\u0001\u0000\u0000\u0000"+
		"\u15d1\u15d4\u0001\u0000\u0000\u0000\u15d2\u15d3\u0005h\u0000\u0000\u15d3"+
		"\u15d5\u0003b1\u0000\u15d4\u15d2\u0001\u0000\u0000\u0000\u15d4\u15d5\u0001"+
		"\u0000\u0000\u0000\u15d5\u15d6\u0001\u0000\u0000\u0000\u15d6\u15d7\u0005"+
		"e\u0000\u0000\u15d7\u15da\u0005/\u0000\u0000\u15d8\u15db\u0003\u02ee\u0177"+
		"\u0000\u15d9\u15db\u0003\u02f0\u0178\u0000\u15da\u15d8\u0001\u0000\u0000"+
		"\u0000\u15da\u15d9\u0001\u0000\u0000\u0000\u15db\u0305\u0001\u0000\u0000"+
		"\u0000\u15dc\u15de\u0005M\u0000\u0000\u15dd\u15dc\u0001\u0000\u0000\u0000"+
		"\u15dd\u15de\u0001\u0000\u0000\u0000\u15de\u15df\u0001\u0000\u0000\u0000"+
		"\u15df\u15e1\u0005\u001f\u0000\u0000\u15e0\u15e2\u0003\u010a\u0085\u0000"+
		"\u15e1\u15e0\u0001\u0000\u0000\u0000\u15e2\u15e3\u0001\u0000\u0000\u0000"+
		"\u15e3\u15e1\u0001\u0000\u0000\u0000\u15e3\u15e4\u0001\u0000\u0000\u0000"+
		"\u15e4\u15e5\u0001\u0000\u0000\u0000\u15e5\u15e6\u0005 \u0000\u0000\u15e6"+
		"\u0307\u0001\u0000\u0000\u0000\u15e7\u15e8\u0007!\u0000\u0000\u15e8\u15f1"+
		"\u00038\u001c\u0000\u15e9\u15ee\u0003b1\u0000\u15ea\u15eb\u0005%\u0000"+
		"\u0000\u15eb\u15ed\u0003b1\u0000\u15ec\u15ea\u0001\u0000\u0000\u0000\u15ed"+
		"\u15f0\u0001\u0000\u0000\u0000\u15ee\u15ec\u0001\u0000\u0000\u0000\u15ee"+
		"\u15ef\u0001\u0000\u0000\u0000\u15ef\u15f2\u0001\u0000\u0000\u0000\u15f0"+
		"\u15ee\u0001\u0000\u0000\u0000\u15f1\u15e9\u0001\u0000\u0000\u0000\u15f1"+
		"\u15f2\u0001\u0000\u0000\u0000\u15f2\u0309\u0001\u0000\u0000\u0000\u15f3"+
		"\u15f5\u0003\u034a\u01a5\u0000\u15f4\u15f3\u0001\u0000\u0000\u0000\u15f4"+
		"\u15f5\u0001\u0000\u0000\u0000\u15f5\u15f6\u0001\u0000\u0000\u0000\u15f6"+
		"\u15f8\u00050\u0000\u0000\u15f7\u15f9\u0003\u032a\u0195\u0000\u15f8\u15f7"+
		"\u0001\u0000\u0000\u0000\u15f8\u15f9\u0001\u0000\u0000\u0000\u15f9\u15fa"+
		"\u0001\u0000\u0000\u0000\u15fa\u15fc\u0003\u0336\u019b\u0000\u15fb\u15fd"+
		"\u0003\u0306\u0183\u0000\u15fc\u15fb\u0001\u0000\u0000\u0000\u15fc\u15fd"+
		"\u0001\u0000\u0000\u0000\u15fd\u15fe\u0001\u0000\u0000\u0000\u15fe\u1600"+
		"\u0003\u030e\u0187\u0000\u15ff\u1601\u0003\u0334\u019a\u0000\u1600\u15ff"+
		"\u0001\u0000\u0000\u0000\u1600\u1601\u0001\u0000\u0000\u0000\u1601\u1603"+
		"\u0001\u0000\u0000\u0000\u1602\u1604\u0003\u0350\u01a8\u0000\u1603\u1602"+
		"\u0001\u0000\u0000\u0000\u1603\u1604\u0001\u0000\u0000\u0000\u1604\u1606"+
		"\u0001\u0000\u0000\u0000\u1605\u1607\u0003\u0340\u01a0\u0000\u1606\u1605"+
		"\u0001\u0000\u0000\u0000\u1606\u1607\u0001\u0000\u0000\u0000\u1607\u1609"+
		"\u0001\u0000\u0000\u0000\u1608\u160a\u0003\u0316\u018b\u0000\u1609\u1608"+
		"\u0001\u0000\u0000\u0000\u1609\u160a\u0001\u0000\u0000\u0000\u160a\u030b"+
		"\u0001\u0000\u0000\u0000\u160b\u1611\u0003H$\u0000\u160c\u160e\u0007P"+
		"\u0000\u0000\u160d\u160c\u0001\u0000\u0000\u0000\u160d\u160e\u0001\u0000"+
		"\u0000\u0000\u160e\u160f\u0001\u0000\u0000\u0000\u160f\u1612\u0005\u0018"+
		"\u0000\u0000\u1610\u1612\u0005\u0014\u0000\u0000\u1611\u160d\u0001\u0000"+
		"\u0000\u0000\u1611\u1610\u0001\u0000\u0000\u0000\u1612\u1613\u0001\u0000"+
		"\u0000\u0000\u1613\u1614\u0003\u0312\u0189\u0000\u1614\u030d\u0001\u0000"+
		"\u0000\u0000\u1615\u1616\u0005:\u0000\u0000\u1616\u161b\u0003\u030c\u0186"+
		"\u0000\u1617\u1618\u0005%\u0000\u0000\u1618\u161a\u0003\u030c\u0186\u0000"+
		"\u1619\u1617\u0001\u0000\u0000\u0000\u161a\u161d\u0001\u0000\u0000\u0000"+
		"\u161b\u1619\u0001\u0000\u0000\u0000\u161b\u161c\u0001\u0000\u0000\u0000"+
		"\u161c\u030f\u0001\u0000\u0000\u0000\u161d\u161b\u0001\u0000\u0000\u0000"+
		"\u161e\u161f\u0005\u001f\u0000\u0000\u161f\u1624\u0003\u0312\u0189\u0000"+
		"\u1620\u1621\u0005%\u0000\u0000\u1621\u1623\u0003\u0312\u0189\u0000\u1622"+
		"\u1620\u0001\u0000\u0000\u0000\u1623\u1626\u0001\u0000\u0000\u0000\u1624"+
		"\u1622\u0001\u0000\u0000\u0000\u1624\u1625\u0001\u0000\u0000\u0000\u1625"+
		"\u1627\u0001\u0000\u0000\u0000\u1626\u1624\u0001\u0000\u0000\u0000\u1627"+
		"\u1628\u0005 \u0000\u0000\u1628\u162d\u0001\u0000\u0000\u0000\u1629\u162d"+
		"\u0003\u0312\u0189\u0000\u162a\u162b\u0005\u001f\u0000\u0000\u162b\u162d"+
		"\u0005 \u0000\u0000\u162c\u161e\u0001\u0000\u0000\u0000\u162c\u1629\u0001"+
		"\u0000\u0000\u0000\u162c\u162a\u0001\u0000\u0000\u0000\u162d\u0311\u0001"+
		"\u0000\u0000\u0000\u162e\u1631\u0003b1\u0000\u162f\u1631\u0005\u009a\u0000"+
		"\u0000\u1630\u162e\u0001\u0000\u0000\u0000\u1630\u162f\u0001\u0000\u0000"+
		"\u0000\u1631\u0313\u0001\u0000\u0000\u0000\u1632\u1634\u0003\u034a\u01a5"+
		"\u0000\u1633\u1632\u0001\u0000\u0000\u0000\u1633\u1634\u0001\u0000\u0000"+
		"\u0000\u1634\u1635\u0001\u0000\u0000\u0000\u1635\u1637\u00051\u0000\u0000"+
		"\u1636\u1638\u0003\u032a\u0195\u0000\u1637\u1636\u0001\u0000\u0000\u0000"+
		"\u1637\u1638\u0001\u0000\u0000\u0000\u1638\u163b\u0001\u0000\u0000\u0000"+
		"\u1639\u163c\u0003\u0318\u018c\u0000\u163a\u163c\u0003\u031a\u018d\u0000"+
		"\u163b\u1639\u0001\u0000\u0000\u0000\u163b\u163a\u0001\u0000\u0000\u0000"+
		"\u163c\u163e\u0001\u0000\u0000\u0000\u163d\u163f\u0003\u0350\u01a8\u0000"+
		"\u163e\u163d\u0001\u0000\u0000\u0000\u163e\u163f\u0001\u0000\u0000\u0000"+
		"\u163f\u1641\u0001\u0000\u0000\u0000\u1640\u1642\u0003\u0340\u01a0\u0000"+
		"\u1641\u1640\u0001\u0000\u0000\u0000\u1641\u1642\u0001\u0000\u0000\u0000"+
		"\u1642\u1644\u0001\u0000\u0000\u0000\u1643\u1645\u0003\u0316\u018b\u0000"+
		"\u1644\u1643\u0001\u0000\u0000\u0000\u1644\u1645\u0001\u0000\u0000\u0000"+
		"\u1645\u0315\u0001\u0000\u0000\u0000\u1646\u1647\u0005\u0108\u0000\u0000"+
		"\u1647\u1648\u0003\u035c\u01ae\u0000\u1648\u0317\u0001\u0000\u0000\u0000"+
		"\u1649\u164b\u0005U\u0000\u0000\u164a\u1649\u0001\u0000\u0000\u0000\u164a"+
		"\u164b\u0001\u0000\u0000\u0000\u164b\u164d\u0001\u0000\u0000\u0000\u164c"+
		"\u164e\u0005\u001f\u0000\u0000\u164d\u164c\u0001\u0000\u0000\u0000\u164d"+
		"\u164e\u0001\u0000\u0000\u0000\u164e\u164f\u0001\u0000\u0000\u0000\u164f"+
		"\u1651\u0003@ \u0000\u1650\u1652\u0005 \u0000\u0000\u1651\u1650\u0001"+
		"\u0000\u0000\u0000\u1651\u1652\u0001\u0000\u0000\u0000\u1652\u1657\u0001"+
		"\u0000\u0000\u0000\u1653\u1655\u0005`\u0000\u0000\u1654\u1653\u0001\u0000"+
		"\u0000\u0000\u1654\u1655\u0001\u0000\u0000\u0000\u1655\u1656\u0001\u0000"+
		"\u0000\u0000\u1656\u1658\u0003\\.\u0000\u1657\u1654\u0001\u0000\u0000"+
		"\u0000\u1657\u1658\u0001\u0000\u0000\u0000\u1658\u0319\u0001\u0000\u0000"+
		"\u0000\u1659\u165a\u0003\u031c\u018e\u0000\u165a\u165b\u0005U\u0000\u0000"+
		"\u165b\u165c\u0003\u0336\u019b\u0000\u165c\u1663\u0001\u0000\u0000\u0000"+
		"\u165d\u165e\u0005U\u0000\u0000\u165e\u165f\u0003\u031c\u018e\u0000\u165f"+
		"\u1660\u0005^\u0000\u0000\u1660\u1661\u0003\u0336\u019b\u0000\u1661\u1663"+
		"\u0001\u0000\u0000\u0000\u1662\u1659\u0001\u0000\u0000\u0000\u1662\u165d"+
		"\u0001\u0000\u0000\u0000\u1663\u031b\u0001\u0000\u0000\u0000\u1664\u1666"+
		"\u0003@ \u0000\u1665\u1667\u0005\u0015\u0000\u0000\u1666\u1665\u0001\u0000"+
		"\u0000\u0000\u1666\u1667\u0001\u0000\u0000\u0000\u1667\u166f\u0001\u0000"+
		"\u0000\u0000\u1668\u1669\u0005%\u0000\u0000\u1669\u166b\u0003@ \u0000"+
		"\u166a\u166c\u0005\u0015\u0000\u0000\u166b\u166a\u0001\u0000\u0000\u0000"+
		"\u166b\u166c\u0001\u0000\u0000\u0000\u166c\u166e\u0001\u0000\u0000\u0000"+
		"\u166d\u1668\u0001\u0000\u0000\u0000\u166e\u1671\u0001\u0000\u0000\u0000"+
		"\u166f\u166d\u0001\u0000\u0000\u0000\u166f\u1670\u0001\u0000\u0000\u0000"+
		"\u1670\u031d\u0001\u0000\u0000\u0000\u1671\u166f\u0001\u0000\u0000\u0000"+
		"\u1672\u1673\u0003\u0320\u0190\u0000\u1673\u031f\u0001\u0000\u0000\u0000"+
		"\u1674\u1680\u0003\u0322\u0191\u0000\u1675\u1677\u0005N\u0000\u0000\u1676"+
		"\u1678\u0005r\u0000\u0000\u1677\u1676\u0001\u0000\u0000\u0000\u1677\u1678"+
		"\u0001\u0000\u0000\u0000\u1678\u167c\u0001\u0000\u0000\u0000\u1679\u167c"+
		"\u0005\u00bc\u0000\u0000\u167a\u167c\u0005\u00bd\u0000\u0000\u167b\u1675"+
		"\u0001\u0000\u0000\u0000\u167b\u1679\u0001\u0000\u0000\u0000\u167b\u167a"+
		"\u0001\u0000\u0000\u0000\u167c\u167d\u0001\u0000\u0000\u0000\u167d\u167f"+
		"\u0003\u0322\u0191\u0000\u167e\u167b\u0001\u0000\u0000\u0000\u167f\u1682"+
		"\u0001\u0000\u0000\u0000\u1680\u167e\u0001\u0000\u0000\u0000\u1680\u1681"+
		"\u0001\u0000\u0000\u0000\u1681\u0321\u0001\u0000\u0000\u0000\u1682\u1680"+
		"\u0001\u0000\u0000\u0000\u1683\u1685\u0003\u0368\u01b4\u0000\u1684\u1683"+
		"\u0001\u0000\u0000\u0000\u1684\u1685\u0001\u0000\u0000\u0000\u1685\u1686"+
		"\u0001\u0000\u0000\u0000\u1686\u1688\u0005.\u0000\u0000\u1687\u1689\u0003"+
		"\u0324\u0192\u0000\u1688\u1687\u0001\u0000\u0000\u0000\u1688\u1689\u0001"+
		"\u0000\u0000\u0000\u1689\u168a\u0001\u0000\u0000\u0000\u168a\u168c\u0003"+
		"\u0326\u0193\u0000\u168b\u168d\u0003\u0332\u0199\u0000\u168c\u168b\u0001"+
		"\u0000\u0000\u0000\u168c\u168d\u0001\u0000\u0000\u0000\u168d\u1695\u0001"+
		"\u0000\u0000\u0000\u168e\u1690\u0003\u0334\u019a\u0000\u168f\u1691\u0003"+
		"\u0348\u01a4\u0000\u1690\u168f\u0001\u0000\u0000\u0000\u1690\u1691\u0001"+
		"\u0000\u0000\u0000\u1691\u1693\u0001\u0000\u0000\u0000\u1692\u1694\u0003"+
		"\u0306\u0183\u0000\u1693\u1692\u0001\u0000\u0000\u0000\u1693\u1694\u0001"+
		"\u0000\u0000\u0000\u1694\u1696\u0001\u0000\u0000\u0000\u1695\u168e\u0001"+
		"\u0000\u0000\u0000\u1695\u1696\u0001\u0000\u0000\u0000\u1696\u1698\u0001"+
		"\u0000\u0000\u0000\u1697\u1699\u0003\u0340\u01a0\u0000\u1698\u1697\u0001"+
		"\u0000\u0000\u0000\u1698\u1699\u0001\u0000\u0000\u0000\u1699\u169b\u0001"+
		"\u0000\u0000\u0000\u169a\u169c\u0003\u0342\u01a1\u0000\u169b\u169a\u0001"+
		"\u0000\u0000\u0000\u169b\u169c\u0001\u0000\u0000\u0000\u169c\u169e\u0001"+
		"\u0000\u0000\u0000\u169d\u169f\u0003\u0344\u01a2\u0000\u169e\u169d\u0001"+
		"\u0000\u0000\u0000\u169e\u169f\u0001\u0000\u0000\u0000\u169f\u16a1\u0001"+
		"\u0000\u0000\u0000\u16a0\u16a2\u0003\u00b8\\\u0000\u16a1\u16a0\u0001\u0000"+
		"\u0000\u0000\u16a1\u16a2\u0001\u0000\u0000\u0000\u16a2\u16a4\u0001\u0000"+
		"\u0000\u0000\u16a3\u16a5\u0003\u0360\u01b0\u0000\u16a4\u16a3\u0001\u0000"+
		"\u0000\u0000\u16a4\u16a5\u0001\u0000\u0000\u0000\u16a5\u0323\u0001\u0000"+
		"\u0000\u0000\u16a6\u16a7\u0007Q\u0000\u0000\u16a7\u0325\u0001\u0000\u0000"+
		"\u0000\u16a8\u16ae\u0003\u0328\u0194\u0000\u16a9\u16ab\u0003\u032a\u0195"+
		"\u0000\u16aa\u16ac\u0003\u0328\u0194\u0000\u16ab\u16aa\u0001\u0000\u0000"+
		"\u0000\u16ab\u16ac\u0001\u0000\u0000\u0000\u16ac\u16ae\u0001\u0000\u0000"+
		"\u0000\u16ad\u16a8\u0001\u0000\u0000\u0000\u16ad\u16a9\u0001\u0000\u0000"+
		"\u0000\u16ae\u16b3\u0001\u0000\u0000\u0000\u16af\u16b0\u0005%\u0000\u0000"+
		"\u16b0\u16b2\u0003\u0328\u0194\u0000\u16b1\u16af\u0001\u0000\u0000\u0000"+
		"\u16b2\u16b5\u0001\u0000\u0000\u0000\u16b3\u16b1\u0001\u0000\u0000\u0000"+
		"\u16b3\u16b4\u0001\u0000\u0000\u0000\u16b4\u0327\u0001\u0000\u0000\u0000"+
		"\u16b5\u16b3\u0001\u0000\u0000\u0000\u16b6\u16cc\u0003\u0330\u0198\u0000"+
		"\u16b7\u16cc\u0003\u032e\u0197\u0000\u16b8\u16b9\u0003\\.\u0000\u16b9"+
		"\u16ba\u0005\u0018\u0000\u0000\u16ba\u16bc\u0001\u0000\u0000\u0000\u16bb"+
		"\u16b8\u0001\u0000\u0000\u0000\u16bb\u16bc\u0001\u0000\u0000\u0000\u16bc"+
		"\u16bf\u0001\u0000\u0000\u0000\u16bd\u16c0\u0003H$\u0000\u16be\u16c0\u0003"+
		"b1\u0000\u16bf\u16bd\u0001\u0000\u0000\u0000\u16bf\u16be\u0001\u0000\u0000"+
		"\u0000\u16c0\u16cc\u0001\u0000\u0000\u0000\u16c1\u16c4\u0003H$\u0000\u16c2"+
		"\u16c4\u0003b1\u0000\u16c3\u16c1\u0001\u0000\u0000\u0000\u16c3\u16c2\u0001"+
		"\u0000\u0000\u0000\u16c4\u16c9\u0001\u0000\u0000\u0000\u16c5\u16c7\u0005"+
		"`\u0000\u0000\u16c6\u16c5\u0001\u0000\u0000\u0000\u16c6\u16c7\u0001\u0000"+
		"\u0000\u0000\u16c7\u16c8\u0001\u0000\u0000\u0000\u16c8\u16ca\u0003\\."+
		"\u0000\u16c9\u16c6\u0001\u0000\u0000\u0000\u16c9\u16ca\u0001\u0000\u0000"+
		"\u0000\u16ca\u16cc\u0001\u0000\u0000\u0000\u16cb\u16b6\u0001\u0000\u0000"+
		"\u0000\u16cb\u16b7\u0001\u0000\u0000\u0000\u16cb\u16bb\u0001\u0000\u0000"+
		"\u0000\u16cb\u16c3\u0001\u0000\u0000\u0000\u16cc\u0329\u0001\u0000\u0000"+
		"\u0000\u16cd\u16cf\u0005\u00fe\u0000\u0000\u16ce\u16d0\u0005\u001f\u0000"+
		"\u0000\u16cf\u16ce\u0001\u0000\u0000\u0000\u16cf\u16d0\u0001\u0000\u0000"+
		"\u0000\u16d0\u16d1\u0001\u0000\u0000\u0000\u16d1\u16d3\u0003\u032c\u0196"+
		"\u0000\u16d2\u16d4\u0005 \u0000\u0000\u16d3\u16d2\u0001\u0000\u0000\u0000"+
		"\u16d3\u16d4\u0001\u0000\u0000\u0000\u16d4\u16d6\u0001\u0000\u0000\u0000"+
		"\u16d5\u16d7\u0005\u00ba\u0000\u0000\u16d6\u16d5\u0001\u0000\u0000\u0000"+
		"\u16d6\u16d7\u0001\u0000\u0000\u0000\u16d7\u16da\u0001\u0000\u0000\u0000"+
		"\u16d8\u16d9\u0005M\u0000\u0000\u16d9\u16db\u0005\u00bb\u0000\u0000\u16da"+
		"\u16d8\u0001\u0000\u0000\u0000\u16da\u16db\u0001\u0000\u0000\u0000\u16db"+
		"\u16e9\u0001\u0000\u0000\u0000\u16dc\u16dd\u0005\u01c3\u0000\u0000\u16dd"+
		"\u16de\u0005\u001f\u0000\u0000\u16de\u16df\u0005 \u0000\u0000\u16df\u16e0"+
		"\u0005\u0138\u0000\u0000\u16e0\u16e1\u0005\u001f\u0000\u0000\u16e1\u16e2"+
		"\u0003\u00b8\\\u0000\u16e2\u16e7\u0005 \u0000\u0000\u16e3\u16e5\u0005"+
		"`\u0000\u0000\u16e4\u16e3\u0001\u0000\u0000\u0000\u16e4\u16e5\u0001\u0000"+
		"\u0000\u0000\u16e5\u16e6\u0001\u0000\u0000\u0000\u16e6\u16e8\u0003\\."+
		"\u0000\u16e7\u16e4\u0001\u0000\u0000\u0000\u16e7\u16e8\u0001\u0000\u0000"+
		"\u0000\u16e8\u16ea\u0001\u0000\u0000\u0000\u16e9\u16dc\u0001\u0000\u0000"+
		"\u0000\u16e9\u16ea\u0001\u0000\u0000\u0000\u16ea\u032b\u0001\u0000\u0000"+
		"\u0000\u16eb\u16ee\u0003\u001e\u000f\u0000\u16ec\u16ee\u0003\u0018\f\u0000"+
		"\u16ed\u16eb\u0001\u0000\u0000\u0000\u16ed\u16ec\u0001\u0000\u0000\u0000"+
		"\u16ee\u032d\u0001\u0000\u0000\u0000\u16ef\u16f0\u0005\u0011\u0000\u0000"+
		"\u16f0\u032f\u0001\u0000\u0000\u0000\u16f1\u16f2\u0003*\u0015\u0000\u16f2"+
		"\u16f3\u0005\u0015\u0000\u0000\u16f3\u0331\u0001\u0000\u0000\u0000\u16f4"+
		"\u16f5\u0005K\u0000\u0000\u16f5\u16f6\u0003@ \u0000\u16f6\u0333\u0001"+
		"\u0000\u0000\u0000\u16f7\u16f8\u0005U\u0000\u0000\u16f8\u16f9\u0003\u0336"+
		"\u019b\u0000\u16f9\u0335\u0001\u0000\u0000\u0000\u16fa\u16ff\u0003\u0338"+
		"\u019c\u0000\u16fb\u16fc\u0005%\u0000\u0000\u16fc\u16fe\u0003\u0338\u019c"+
		"\u0000\u16fd\u16fb\u0001\u0000\u0000\u0000\u16fe\u1701\u0001\u0000\u0000"+
		"\u0000\u16ff\u16fd\u0001\u0000\u0000\u0000\u16ff\u1700\u0001\u0000\u0000"+
		"\u0000\u1700\u0337\u0001\u0000\u0000\u0000\u1701\u16ff\u0001\u0000\u0000"+
		"\u0000\u1702\u1706\u0003\u033a\u019d\u0000\u1703\u1705\u0003\u033c\u019e"+
		"\u0000\u1704\u1703\u0001\u0000\u0000\u0000\u1705\u1708\u0001\u0000\u0000"+
		"\u0000\u1706\u1704\u0001\u0000\u0000\u0000\u1706\u1707\u0001\u0000\u0000"+
		"\u0000\u1707\u0339\u0001\u0000\u0000\u0000\u1708\u1706\u0001\u0000\u0000"+
		"\u0000\u1709\u170c\u0003@ \u0000\u170a\u170b\u0005f\u0000\u0000\u170b"+
		"\u170d\u0005\u02c5\u0000\u0000\u170c\u170a\u0001\u0000\u0000\u0000\u170c"+
		"\u170d\u0001\u0000\u0000\u0000\u170d\u1712\u0001\u0000\u0000\u0000\u170e"+
		"\u1710\u0005`\u0000\u0000\u170f\u170e\u0001\u0000\u0000\u0000\u170f\u1710"+
		"\u0001\u0000\u0000\u0000\u1710\u1711\u0001\u0000\u0000\u0000\u1711\u1713"+
		"\u0003\\.\u0000\u1712\u170f\u0001\u0000\u0000\u0000\u1712\u1713\u0001"+
		"\u0000\u0000\u0000\u1713\u1728\u0001\u0000\u0000\u0000\u1714\u1716\u0003"+
		"\u0346\u01a3\u0000\u1715\u1717\u0005`\u0000\u0000\u1716\u1715\u0001\u0000"+
		"\u0000\u0000\u1716\u1717\u0001\u0000\u0000\u0000\u1717\u1718\u0001\u0000"+
		"\u0000\u0000\u1718\u171a\u0003\\.\u0000\u1719\u171b\u0003P(\u0000\u171a"+
		"\u1719\u0001\u0000\u0000\u0000\u171a\u171b\u0001\u0000\u0000\u0000\u171b"+
		"\u1728\u0001\u0000\u0000\u0000\u171c\u1721\u0003b1\u0000\u171d\u171f\u0005"+
		"`\u0000\u0000\u171e\u171d\u0001\u0000\u0000\u0000\u171e\u171f\u0001\u0000"+
		"\u0000\u0000\u171f\u1720\u0001\u0000\u0000\u0000\u1720\u1722\u0003\\."+
		"\u0000\u1721\u171e\u0001\u0000\u0000\u0000\u1721\u1722\u0001\u0000\u0000"+
		"\u0000\u1722\u1728\u0001\u0000\u0000\u0000\u1723\u1724\u0005\u001f\u0000"+
		"\u0000\u1724\u1725\u0003\u0336\u019b\u0000\u1725\u1726\u0005 \u0000\u0000"+
		"\u1726\u1728\u0001\u0000\u0000\u0000\u1727\u1709\u0001\u0000\u0000\u0000"+
		"\u1727\u1714\u0001\u0000\u0000\u0000\u1727\u171c\u0001\u0000\u0000\u0000"+
		"\u1727\u1723\u0001\u0000\u0000\u0000\u1728\u033b\u0001\u0000\u0000\u0000"+
		"\u1729\u172b\u0005V\u0000\u0000\u172a\u1729\u0001\u0000\u0000\u0000\u172a"+
		"\u172b\u0001\u0000\u0000\u0000\u172b\u172d\u0001\u0000\u0000\u0000\u172c"+
		"\u172e\u0007R\u0000\u0000\u172d\u172c\u0001\u0000\u0000\u0000\u172d\u172e"+
		"\u0001\u0000\u0000\u0000\u172e\u172f\u0001\u0000\u0000\u0000\u172f\u1730"+
		"\u0005W\u0000\u0000\u1730\u1731\u0001\u0000\u0000\u0000\u1731\u1733\u0003"+
		"\u033a\u019d\u0000\u1732\u1734\u0003\u033e\u019f\u0000\u1733\u1732\u0001"+
		"\u0000\u0000\u0000\u1733\u1734\u0001\u0000\u0000\u0000\u1734\u1748\u0001"+
		"\u0000\u0000\u0000\u1735\u1737\u0005V\u0000\u0000\u1736\u1735\u0001\u0000"+
		"\u0000\u0000\u1736\u1737\u0001\u0000\u0000\u0000\u1737\u1738\u0001\u0000"+
		"\u0000\u0000\u1738\u173a\u0007S\u0000\u0000\u1739\u173b\u0005Z\u0000\u0000"+
		"\u173a\u1739\u0001\u0000\u0000\u0000\u173a\u173b\u0001\u0000\u0000\u0000"+
		"\u173b\u173c\u0001\u0000\u0000\u0000\u173c\u173d\u0005W\u0000\u0000\u173d"+
		"\u173f\u0003\u033a\u019d\u0000\u173e\u1740\u0003\u033e\u019f\u0000\u173f"+
		"\u173e\u0001\u0000\u0000\u0000\u173f\u1740\u0001\u0000\u0000\u0000\u1740"+
		"\u1748\u0001\u0000\u0000\u0000\u1741\u1742\u0007T\u0000\u0000\u1742\u1743"+
		"\u0005\u00d7\u0000\u0000\u1743\u1745\u0003\u033a\u019d\u0000\u1744\u1746"+
		"\u0003\u033e\u019f\u0000\u1745\u1744\u0001\u0000\u0000\u0000\u1745\u1746"+
		"\u0001\u0000\u0000\u0000\u1746\u1748\u0001\u0000\u0000\u0000\u1747\u172a"+
		"\u0001\u0000\u0000\u0000\u1747\u1736\u0001\u0000\u0000\u0000\u1747\u1741"+
		"\u0001\u0000\u0000\u0000\u1748\u033d\u0001\u0000\u0000\u0000\u1749\u174a"+
		"\u0005a\u0000\u0000\u174a\u174e\u0003b1\u0000\u174b\u174c\u0005^\u0000"+
		"\u0000\u174c\u174e\u0003P(\u0000\u174d\u1749\u0001\u0000\u0000\u0000\u174d"+
		"\u174b\u0001\u0000\u0000\u0000\u174e\u033f\u0001\u0000\u0000\u0000\u174f"+
		"\u1750\u0005_\u0000\u0000\u1750\u1751\u0003b1\u0000\u1751\u0341\u0001"+
		"\u0000\u0000\u0000\u1752\u1753\u0005v\u0000\u0000\u1753\u1754\u0005w\u0000"+
		"\u0000\u1754\u1759\u0003\u00ba]\u0000\u1755\u1756\u0005%\u0000\u0000\u1756"+
		"\u1758\u0003\u00ba]\u0000\u1757\u1755\u0001\u0000\u0000\u0000\u1758\u175b"+
		"\u0001\u0000\u0000\u0000\u1759\u1757\u0001\u0000\u0000\u0000\u1759\u175a"+
		"\u0001\u0000\u0000\u0000\u175a\u0343\u0001\u0000\u0000\u0000\u175b\u1759"+
		"\u0001\u0000\u0000\u0000\u175c\u175d\u0005z\u0000\u0000\u175d\u175e\u0003"+
		"b1\u0000\u175e\u0345\u0001\u0000\u0000\u0000\u175f\u1762\u0005\u001f\u0000"+
		"\u0000\u1760\u1763\u0003\u0320\u0190\u0000\u1761\u1763\u0003\u02f6\u017b"+
		"\u0000\u1762\u1760\u0001\u0000\u0000\u0000\u1762\u1761\u0001\u0000\u0000"+
		"\u0000\u1763\u1764\u0001\u0000\u0000\u0000\u1764\u1765\u0005 \u0000\u0000"+
		"\u1765\u0347\u0001\u0000\u0000\u0000\u1766\u1767\u0005M\u0000\u0000\u1767"+
		"\u1768\u0005\u001f\u0000\u0000\u1768\u1769\u0003H$\u0000\u1769\u176a\u0003"+
		"\u00bc^\u0000\u176a\u1771\u0001\u0000\u0000\u0000\u176b\u176c\u0005%\u0000"+
		"\u0000\u176c\u176d\u0003H$\u0000\u176d\u176e\u0003\u00bc^\u0000\u176e"+
		"\u1770\u0001\u0000\u0000\u0000\u176f\u176b\u0001\u0000\u0000\u0000\u1770"+
		"\u1773\u0001\u0000\u0000\u0000\u1771\u176f\u0001\u0000\u0000\u0000\u1771"+
		"\u1772\u0001\u0000\u0000\u0000\u1772\u1774\u0001\u0000\u0000\u0000\u1773"+
		"\u1771\u0001\u0000\u0000\u0000\u1774\u1775\u0005 \u0000\u0000\u1775\u1776"+
		"\u0005`\u0000\u0000\u1776\u1777\u0003\\.\u0000\u1777\u0349\u0001\u0000"+
		"\u0000\u0000\u1778\u1779\u0005M\u0000\u0000\u1779\u177a\u0003\u034c\u01a6"+
		"\u0000\u177a\u034b\u0001\u0000\u0000\u0000\u177b\u1780\u0003\u034e\u01a7"+
		"\u0000\u177c\u177d\u0005%\u0000\u0000\u177d\u177f\u0003\u034e\u01a7\u0000"+
		"\u177e\u177c\u0001\u0000\u0000\u0000\u177f\u1782\u0001\u0000\u0000\u0000"+
		"\u1780\u177e\u0001\u0000\u0000\u0000\u1780\u1781\u0001\u0000\u0000\u0000"+
		"\u1781\u034d\u0001\u0000\u0000\u0000\u1782\u1780\u0001\u0000\u0000\u0000"+
		"\u1783\u1785\u0003\\.\u0000\u1784\u1786\u0003P(\u0000\u1785\u1784\u0001"+
		"\u0000\u0000\u0000\u1785\u1786\u0001\u0000\u0000\u0000\u1786\u1787\u0001"+
		"\u0000\u0000\u0000\u1787\u1788\u0005`\u0000\u0000\u1788\u1789\u0003\u0346"+
		"\u01a3\u0000\u1789\u034f\u0001\u0000\u0000\u0000\u178a\u178d\u0005\u01d7"+
		"\u0000\u0000\u178b\u178e\u0003\u0352\u01a9\u0000\u178c\u178e\u0003\u0358"+
		"\u01ac\u0000\u178d\u178b\u0001\u0000\u0000\u0000\u178d\u178c\u0001\u0000"+
		"\u0000\u0000\u178e\u1794\u0001\u0000\u0000\u0000\u178f\u1790\u0005K\u0000"+
		"\u0000\u1790\u1792\u0003\u035a\u01ad\u0000\u1791\u1793\u0003P(\u0000\u1792"+
		"\u1791\u0001\u0000\u0000\u0000\u1792\u1793\u0001\u0000\u0000\u0000\u1793"+
		"\u1795\u0001\u0000\u0000\u0000\u1794\u178f\u0001\u0000\u0000\u0000\u1794"+
		"\u1795\u0001\u0000\u0000\u0000\u1795\u0351\u0001\u0000\u0000\u0000\u1796"+
		"\u1799\u0003\u0356\u01ab\u0000\u1797\u1799\u0003\u0354\u01aa\u0000\u1798"+
		"\u1796\u0001\u0000\u0000\u0000\u1798\u1797\u0001\u0000\u0000\u0000\u1799"+
		"\u17a1\u0001\u0000\u0000\u0000\u179a\u179d\u0005%\u0000\u0000\u179b\u179e"+
		"\u0003\u0356\u01ab\u0000\u179c\u179e\u0003\u0354\u01aa\u0000\u179d\u179b"+
		"\u0001\u0000\u0000\u0000\u179d\u179c\u0001\u0000\u0000\u0000\u179e\u17a0"+
		"\u0001\u0000\u0000\u0000\u179f\u179a\u0001\u0000\u0000\u0000\u17a0\u17a3"+
		"\u0001\u0000\u0000\u0000\u17a1\u179f\u0001\u0000\u0000\u0000\u17a1\u17a2"+
		"\u0001\u0000\u0000\u0000\u17a2\u0353\u0001\u0000\u0000\u0000\u17a3\u17a1"+
		"\u0001\u0000\u0000\u0000\u17a4\u17a9\u0003b1\u0000\u17a5\u17a7\u0005`"+
		"\u0000\u0000\u17a6\u17a5\u0001\u0000\u0000\u0000\u17a6\u17a7\u0001\u0000"+
		"\u0000\u0000\u17a7\u17a8\u0001\u0000\u0000\u0000\u17a8\u17aa\u0003\\."+
		"\u0000\u17a9\u17a6\u0001\u0000\u0000\u0000\u17a9\u17aa\u0001\u0000\u0000"+
		"\u0000\u17aa\u0355\u0001\u0000\u0000\u0000\u17ab\u17ac\u0007U\u0000\u0000"+
		"\u17ac\u17ad\u0005\u0014\u0000\u0000\u17ad\u17b2\u0003N\'\u0000\u17ae"+
		"\u17b0\u0005`\u0000\u0000\u17af\u17ae\u0001\u0000\u0000\u0000\u17af\u17b0"+
		"\u0001\u0000\u0000\u0000\u17b0\u17b1\u0001\u0000\u0000\u0000\u17b1\u17b3"+
		"\u0003\\.\u0000\u17b2\u17af\u0001\u0000\u0000\u0000\u17b2\u17b3\u0001"+
		"\u0000\u0000\u0000\u17b3\u0357\u0001\u0000\u0000\u0000\u17b4\u17b5\u0007"+
		"U\u0000\u0000\u17b5\u17b6\u0005\u0015\u0000\u0000\u17b6\u0359\u0001\u0000"+
		"\u0000\u0000\u17b7\u17b8\u0003@ \u0000\u17b8\u035b\u0001\u0000\u0000\u0000"+
		"\u17b9\u17ba\u0007V\u0000\u0000\u17ba\u1801\u0005v\u0000\u0000\u17bb\u17bc"+
		"\u0007W\u0000\u0000\u17bc\u1801\u0005N\u0000\u0000\u17bd\u17be\u0007X"+
		"\u0000\u0000\u17be\u1801\u0005W\u0000\u0000\u17bf\u17c0\u0005\u00c1\u0000"+
		"\u0000\u17c0\u1801\u0005\u00c2\u0000\u0000\u17c1\u17c2\u0005\u00c3\u0000"+
		"\u0000\u17c2\u1801\u0005\u02e1\u0000\u0000\u17c3\u17c4\u0005\u00c4\u0000"+
		"\u0000\u17c4\u1801\u0005u\u0000\u0000\u17c5\u17c6\u0007Y\u0000\u0000\u17c6"+
		"\u1801\u0005\u01ec\u0000\u0000\u17c7\u17c8\u0007Y\u0000\u0000\u17c8\u1801"+
		"\u0005\u01ed\u0000\u0000\u17c9\u1801\u0005\u01ee\u0000\u0000\u17ca\u17cb"+
		"\u0005\u00c5\u0000\u0000\u17cb\u1801\u0005\u00c6\u0000\u0000\u17cc\u17cd"+
		"\u0005\u01ef\u0000\u0000\u17cd\u1801\u0005\u00c6\u0000\u0000\u17ce\u17cf"+
		"\u0005\u01f0\u0000\u0000\u17cf\u17d0\u0005\u0018\u0000\u0000\u17d0\u1801"+
		"\u0005\u02e3\u0000\u0000\u17d1\u17d2\u0005\u01f1\u0000\u0000\u17d2\u17d3"+
		"\u0005\u0018\u0000\u0000\u17d3\u1801\u0005\u02e3\u0000\u0000\u17d4\u17d5"+
		"\u0005\u0132\u0000\u0000\u17d5\u1801\u0005\u02e1\u0000\u0000\u17d6\u17d7"+
		"\u0005\u01f2\u0000\u0000\u17d7\u1801\u0005\u02e1\u0000\u0000\u17d8\u1801"+
		"\u0005\u01f3\u0000\u0000\u17d9\u17da\u0005\u001f\u0000\u0000\u17da\u17db"+
		"\u0005\u00c7\u0000\u0000\u17db\u17dc\u0005f\u0000\u0000\u17dc\u17dd\u0005"+
		"\u001f\u0000\u0000\u17dd\u17e3\u0003\u00fa}\u0000\u17de\u17e2\u0005\u0101"+
		"\u0000\u0000\u17df\u17e0\u0005\u0018\u0000\u0000\u17e0\u17e2\u0003\u001a"+
		"\r\u0000\u17e1\u17de\u0001\u0000\u0000\u0000\u17e1\u17df\u0001\u0000\u0000"+
		"\u0000\u17e2\u17e5\u0001\u0000\u0000\u0000\u17e3\u17e1\u0001\u0000\u0000"+
		"\u0000\u17e3\u17e4\u0001\u0000\u0000\u0000\u17e4\u17e6\u0001\u0000\u0000"+
		"\u0000\u17e5\u17e3\u0001\u0000\u0000\u0000\u17e6\u17e7\u0005 \u0000\u0000"+
		"\u17e7\u17e8\u0005 \u0000\u0000\u17e8\u1801\u0001\u0000\u0000\u0000\u17e9"+
		"\u17ea\u0005\u00c7\u0000\u0000\u17ea\u17eb\u0005f\u0000\u0000\u17eb\u1801"+
		"\u0005\u0101\u0000\u0000\u17ec\u17ed\u0005\u01f4\u0000\u0000\u17ed\u1801"+
		"\u0007E\u0000\u0000\u17ee\u17ef\u0005\u01f5\u0000\u0000\u17ef\u1801\u0005"+
		"\u02e1\u0000\u0000\u17f0\u1801\u0005\u01f6\u0000\u0000\u17f1\u17f2\u0005"+
		"\u01f7\u0000\u0000\u17f2\u1801\u0005\u00c6\u0000\u0000\u17f3\u17f4\u0005"+
		"\u00be\u0000\u0000\u17f4\u17f5\u0005\u00ca\u0000\u0000\u17f5\u17f9\u0005"+
		"\u001f\u0000\u0000\u17f6\u17f8\u0003\u035e\u01af\u0000\u17f7\u17f6\u0001"+
		"\u0000\u0000\u0000\u17f8\u17fb\u0001\u0000\u0000\u0000\u17f9\u17f7\u0001"+
		"\u0000\u0000\u0000\u17f9\u17fa\u0001\u0000\u0000\u0000\u17fa\u17fc\u0001"+
		"\u0000\u0000\u0000\u17fb\u17f9\u0001\u0000\u0000\u0000\u17fc\u1801\u0005"+
		" \u0000\u0000\u17fd\u17fe\u0005\u00be\u0000\u0000\u17fe\u17ff\u0005\u00c6"+
		"\u0000\u0000\u17ff\u1801\u0005\u02e6\u0000\u0000\u1800\u17b9\u0001\u0000"+
		"\u0000\u0000\u1800\u17bb\u0001\u0000\u0000\u0000\u1800\u17bd\u0001\u0000"+
		"\u0000\u0000\u1800\u17bf\u0001\u0000\u0000\u0000\u1800\u17c1\u0001\u0000"+
		"\u0000\u0000\u1800\u17c3\u0001\u0000\u0000\u0000\u1800\u17c5\u0001\u0000"+
		"\u0000\u0000\u1800\u17c7\u0001\u0000\u0000\u0000\u1800\u17c9\u0001\u0000"+
		"\u0000\u0000\u1800\u17ca\u0001\u0000\u0000\u0000\u1800\u17cc\u0001\u0000"+
		"\u0000\u0000\u1800\u17ce\u0001\u0000\u0000\u0000\u1800\u17d1\u0001\u0000"+
		"\u0000\u0000\u1800\u17d4\u0001\u0000\u0000\u0000\u1800\u17d6\u0001\u0000"+
		"\u0000\u0000\u1800\u17d8\u0001\u0000\u0000\u0000\u1800\u17d9\u0001\u0000"+
		"\u0000\u0000\u1800\u17e9\u0001\u0000\u0000\u0000\u1800\u17ec\u0001\u0000"+
		"\u0000\u0000\u1800\u17ee\u0001\u0000\u0000\u0000\u1800\u17f0\u0001\u0000"+
		"\u0000\u0000\u1800\u17f1\u0001\u0000\u0000\u0000\u1800\u17f3\u0001\u0000"+
		"\u0000\u0000\u1800\u17fd\u0001\u0000\u0000\u0000\u1801\u035d\u0001\u0000"+
		"\u0000\u0000\u1802\u1803\u0005\'\u0000\u0000\u1803\u1804\u0005\u01da\u0000"+
		"\u0000\u1804\u1839\u0005\'\u0000\u0000\u1805\u1806\u0005\'\u0000\u0000"+
		"\u1806\u1807\u0005\u01db\u0000\u0000\u1807\u1839\u0005\'\u0000\u0000\u1808"+
		"\u1809\u0005\'\u0000\u0000\u1809\u180a\u0005\u01dc\u0000\u0000\u180a\u1839"+
		"\u0005\'\u0000\u0000\u180b\u180c\u0005\'\u0000\u0000\u180c\u180d\u0005"+
		"\u01dd\u0000\u0000\u180d\u1839\u0005\'\u0000\u0000\u180e\u180f\u0005\'"+
		"\u0000\u0000\u180f\u1810\u0005\u01de\u0000\u0000\u1810\u1839\u0005\'\u0000"+
		"\u0000\u1811\u1812\u0005\'\u0000\u0000\u1812\u1813\u0005\u01df\u0000\u0000"+
		"\u1813\u1839\u0005\'\u0000\u0000\u1814\u1815\u0005\'\u0000\u0000\u1815"+
		"\u1816\u0005\u01e0\u0000\u0000\u1816\u1839\u0005\'\u0000\u0000\u1817\u1818"+
		"\u0005\'\u0000\u0000\u1818\u1819\u0005\u01e1\u0000\u0000\u1819\u1839\u0005"+
		"\'\u0000\u0000\u181a\u181b\u0005\'\u0000\u0000\u181b\u181c\u0005\u01e2"+
		"\u0000\u0000\u181c\u1839\u0005\'\u0000\u0000\u181d\u181e\u0005\'\u0000"+
		"\u0000\u181e\u181f\u0005\u01e3\u0000\u0000\u181f\u1839\u0005\'\u0000\u0000"+
		"\u1820\u1821\u0005\'\u0000\u0000\u1821\u1822\u0005\u01e4\u0000\u0000\u1822"+
		"\u1839\u0005\'\u0000\u0000\u1823\u1824\u0005\'\u0000\u0000\u1824\u1825"+
		"\u0005\u01e5\u0000\u0000\u1825\u1839\u0005\'\u0000\u0000\u1826\u1827\u0005"+
		"\'\u0000\u0000\u1827\u1828\u0005\u01e6\u0000\u0000\u1828\u1839\u0005\'"+
		"\u0000\u0000\u1829\u182a\u0005\'\u0000\u0000\u182a\u182b\u0005\u01e7\u0000"+
		"\u0000\u182b\u1839\u0005\'\u0000\u0000\u182c\u182d\u0005\'\u0000\u0000"+
		"\u182d\u182e\u0005\u01e8\u0000\u0000\u182e\u1839\u0005\'\u0000\u0000\u182f"+
		"\u1830\u0005\'\u0000\u0000\u1830\u1831\u0005\u01e9\u0000\u0000\u1831\u1839"+
		"\u0005\'\u0000\u0000\u1832\u1833\u0005\'\u0000\u0000\u1833\u1834\u0005"+
		"\u01ea\u0000\u0000\u1834\u1839\u0005\'\u0000\u0000\u1835\u1836\u0005\'"+
		"\u0000\u0000\u1836\u1837\u0005\u01eb\u0000\u0000\u1837\u1839\u0005\'\u0000"+
		"\u0000\u1838\u1802\u0001\u0000\u0000\u0000\u1838\u1805\u0001\u0000\u0000"+
		"\u0000\u1838\u1808\u0001\u0000\u0000\u0000\u1838\u180b\u0001\u0000\u0000"+
		"\u0000\u1838\u180e\u0001\u0000\u0000\u0000\u1838\u1811\u0001\u0000\u0000"+
		"\u0000\u1838\u1814\u0001\u0000\u0000\u0000\u1838\u1817\u0001\u0000\u0000"+
		"\u0000\u1838\u181a\u0001\u0000\u0000\u0000\u1838\u181d\u0001\u0000\u0000"+
		"\u0000\u1838\u1820\u0001\u0000\u0000\u0000\u1838\u1823\u0001\u0000\u0000"+
		"\u0000\u1838\u1826\u0001\u0000\u0000\u0000\u1838\u1829\u0001\u0000\u0000"+
		"\u0000\u1838\u182c\u0001\u0000\u0000\u0000\u1838\u182f\u0001\u0000\u0000"+
		"\u0000\u1838\u1832\u0001\u0000\u0000\u0000\u1838\u1835\u0001\u0000\u0000"+
		"\u0000\u1839\u035f\u0001\u0000\u0000\u0000\u183a\u183e\u0005f\u0000\u0000"+
		"\u183b\u183f\u0005\u02bd\u0000\u0000\u183c\u183f\u0003\u0362\u01b1\u0000"+
		"\u183d\u183f\u0003\u0366\u01b3\u0000\u183e\u183b\u0001\u0000\u0000\u0000"+
		"\u183e\u183c\u0001\u0000\u0000\u0000\u183e\u183d\u0001\u0000\u0000\u0000"+
		"\u183f\u0361\u0001\u0000\u0000\u0000\u1840\u187b\u0005\u016a\u0000\u0000"+
		"\u1841\u1846\u0005\u02be\u0000\u0000\u1842\u1843\u0005\u001f\u0000\u0000"+
		"\u1843\u1844\u0003\u001c\u000e\u0000\u1844\u1845\u0005 \u0000\u0000\u1845"+
		"\u1847\u0001\u0000\u0000\u0000\u1846\u1842\u0001\u0000\u0000\u0000\u1846"+
		"\u1847\u0001\u0000\u0000\u0000\u1847\u184a\u0001\u0000\u0000\u0000\u1848"+
		"\u184a\u0005\u0111\u0000\u0000\u1849\u1841\u0001\u0000\u0000\u0000\u1849"+
		"\u1848\u0001\u0000\u0000\u0000\u184a\u1860\u0001\u0000\u0000\u0000\u184b"+
		"\u1857\u0003\u0364\u01b2\u0000\u184c\u1855\u0005%\u0000\u0000\u184d\u1856"+
		"\u0005\u02bf\u0000\u0000\u184e\u1853\u0005\u02c0\u0000\u0000\u184f\u1850"+
		"\u0005\u001f\u0000\u0000\u1850\u1851\u0003\u001c\u000e\u0000\u1851\u1852"+
		"\u0005 \u0000\u0000\u1852\u1854\u0001\u0000\u0000\u0000\u1853\u184f\u0001"+
		"\u0000\u0000\u0000\u1853\u1854\u0001\u0000\u0000\u0000\u1854\u1856\u0001"+
		"\u0000\u0000\u0000\u1855\u184d\u0001\u0000\u0000\u0000\u1855\u184e\u0001"+
		"\u0000\u0000\u0000\u1856\u1858\u0001\u0000\u0000\u0000\u1857\u184c\u0001"+
		"\u0000\u0000\u0000\u1857\u1858\u0001\u0000\u0000\u0000\u1858\u185e\u0001"+
		"\u0000\u0000\u0000\u1859\u185a\u0005%\u0000\u0000\u185a\u185c\u0005\u02c1"+
		"\u0000\u0000\u185b\u185d\u0007Z\u0000\u0000\u185c\u185b\u0001\u0000\u0000"+
		"\u0000\u185c\u185d\u0001\u0000\u0000\u0000\u185d\u185f\u0001\u0000\u0000"+
		"\u0000\u185e\u1859\u0001\u0000\u0000\u0000\u185e\u185f\u0001\u0000\u0000"+
		"\u0000\u185f\u1861\u0001\u0000\u0000\u0000\u1860\u184b\u0001\u0000\u0000"+
		"\u0000\u1860\u1861\u0001\u0000\u0000\u0000\u1861\u187c\u0001\u0000\u0000"+
		"\u0000\u1862\u1868\u0005\u02c4\u0000\u0000\u1863\u1866\u0003\u0364\u01b2"+
		"\u0000\u1864\u1865\u0005%\u0000\u0000\u1865\u1867\u0005\u02bf\u0000\u0000"+
		"\u1866\u1864\u0001\u0000\u0000\u0000\u1866\u1867\u0001\u0000\u0000\u0000"+
		"\u1867\u1869\u0001\u0000\u0000\u0000\u1868\u1863\u0001\u0000\u0000\u0000"+
		"\u1868\u1869\u0001\u0000\u0000\u0000\u1869\u187c\u0001\u0000\u0000\u0000"+
		"\u186a\u186f\u0005\u02c5\u0000\u0000\u186b\u186c\u0005\u001f\u0000\u0000"+
		"\u186c\u186d\u0003\u001c\u000e\u0000\u186d\u186e\u0005 \u0000\u0000\u186e"+
		"\u1870\u0001\u0000\u0000\u0000\u186f\u186b\u0001\u0000\u0000\u0000\u186f"+
		"\u1870\u0001\u0000\u0000\u0000\u1870\u1879\u0001\u0000\u0000\u0000\u1871"+
		"\u1877\u0003\u0364\u01b2\u0000\u1872\u1873\u0005%\u0000\u0000\u1873\u1875"+
		"\u0005\u02c1\u0000\u0000\u1874\u1876\u0007Z\u0000\u0000\u1875\u1874\u0001"+
		"\u0000\u0000\u0000\u1875\u1876\u0001\u0000\u0000\u0000\u1876\u1878\u0001"+
		"\u0000\u0000\u0000\u1877\u1872\u0001\u0000\u0000\u0000\u1877\u1878\u0001"+
		"\u0000\u0000\u0000\u1878\u187a\u0001\u0000\u0000\u0000\u1879\u1871\u0001"+
		"\u0000\u0000\u0000\u1879\u187a\u0001\u0000\u0000\u0000\u187a\u187c\u0001"+
		"\u0000\u0000\u0000\u187b\u1849\u0001\u0000\u0000\u0000\u187b\u1862\u0001"+
		"\u0000\u0000\u0000\u187b\u186a\u0001\u0000\u0000\u0000\u187c\u0363\u0001"+
		"\u0000\u0000\u0000\u187d\u187e\u0005%\u0000\u0000\u187e\u187f\u0005\u00f8"+
		"\u0000\u0000\u187f\u1881\u0005\u02c6\u0000\u0000\u1880\u187d\u0001\u0000"+
		"\u0000\u0000\u1880\u1881\u0001\u0000\u0000\u0000\u1881\u1884\u0001\u0000"+
		"\u0000\u0000\u1882\u1883\u0005%\u0000\u0000\u1883\u1885\u0005\u00b0\u0000"+
		"\u0000\u1884\u1882\u0001\u0000\u0000\u0000\u1884\u1885\u0001\u0000\u0000"+
		"\u0000\u1885\u188e\u0001\u0000\u0000\u0000\u1886\u1887\u0005%\u0000\u0000"+
		"\u1887\u188c\u0005\u02c7\u0000\u0000\u1888\u1889\u0005\u001f\u0000\u0000"+
		"\u1889\u188a\u0003\u001c\u000e\u0000\u188a\u188b\u0005 \u0000\u0000\u188b"+
		"\u188d\u0001\u0000\u0000\u0000\u188c\u1888\u0001\u0000\u0000\u0000\u188c"+
		"\u188d\u0001\u0000\u0000\u0000\u188d\u188f\u0001\u0000\u0000\u0000\u188e"+
		"\u1886\u0001\u0000\u0000\u0000\u188e\u188f\u0001\u0000\u0000\u0000\u188f"+
		"\u0365\u0001\u0000\u0000\u0000\u1890\u1891\u0005\u02c8\u0000\u0000\u1891"+
		"\u18a4\u0007[\u0000\u0000\u1892\u1893\u0005%\u0000\u0000\u1893\u1898\u0005"+
		"\u02c7\u0000\u0000\u1894\u1895\u0005\u001f\u0000\u0000\u1895\u1896\u0003"+
		"\u001c\u000e\u0000\u1896\u1897\u0005 \u0000\u0000\u1897\u1899\u0001\u0000"+
		"\u0000\u0000\u1898\u1894\u0001\u0000\u0000\u0000\u1898\u1899\u0001\u0000"+
		"\u0000\u0000\u1899\u189b\u0001\u0000\u0000\u0000\u189a\u1892\u0001\u0000"+
		"\u0000\u0000\u189a\u189b\u0001\u0000\u0000\u0000\u189b\u189e\u0001\u0000"+
		"\u0000\u0000\u189c\u189d\u0005%\u0000\u0000\u189d\u189f\u0005\u02c9\u0000"+
		"\u0000\u189e\u189c\u0001\u0000\u0000\u0000\u189e\u189f\u0001\u0000\u0000"+
		"\u0000\u189f\u18a2\u0001\u0000\u0000\u0000\u18a0\u18a1\u0005%\u0000\u0000"+
		"\u18a1\u18a3\u0005\u02ca\u0000\u0000\u18a2\u18a0\u0001\u0000\u0000\u0000"+
		"\u18a2\u18a3\u0001\u0000\u0000\u0000\u18a3\u18a5\u0001\u0000\u0000\u0000"+
		"\u18a4\u189a\u0001\u0000\u0000\u0000\u18a4\u18a5\u0001\u0000\u0000\u0000"+
		"\u18a5\u0367\u0001\u0000\u0000\u0000\u18a6\u18ab\u0005M\u0000\u0000\u18a7"+
		"\u18a9\u0003\u036a\u01b5\u0000\u18a8\u18aa\u0005%\u0000\u0000\u18a9\u18a8"+
		"\u0001\u0000\u0000\u0000\u18a9\u18aa\u0001\u0000\u0000\u0000\u18aa\u18ac"+
		"\u0001\u0000\u0000\u0000\u18ab\u18a7\u0001\u0000\u0000\u0000\u18ab\u18ac"+
		"\u0001\u0000\u0000\u0000\u18ac\u18ae\u0001\u0000\u0000\u0000\u18ad\u18af"+
		"\u0003\u034c\u01a6\u0000\u18ae\u18ad\u0001\u0000\u0000\u0000\u18ae\u18af"+
		"\u0001\u0000\u0000\u0000\u18af\u0369\u0001\u0000\u0000\u0000\u18b0\u18b1"+
		"\u0005\u02cb\u0000\u0000\u18b1\u18b2\u0005\u001f\u0000\u0000\u18b2\u18b7"+
		"\u0003\u036c\u01b6\u0000\u18b3\u18b4\u0005%\u0000\u0000\u18b4\u18b6\u0003"+
		"\u036c\u01b6\u0000\u18b5\u18b3\u0001\u0000\u0000\u0000\u18b6\u18b9\u0001"+
		"\u0000\u0000\u0000\u18b7\u18b5\u0001\u0000\u0000\u0000\u18b7\u18b8\u0001"+
		"\u0000\u0000\u0000\u18b8\u18ba\u0001\u0000\u0000\u0000\u18b9\u18b7\u0001"+
		"\u0000\u0000\u0000\u18ba\u18bb\u0005 \u0000\u0000\u18bb\u036b\u0001\u0000"+
		"\u0000\u0000\u18bc\u18bd\u0003\u036e\u01b7\u0000\u18bd\u18be\u0005`\u0000"+
		"\u0000\u18be\u18bf\u0003\u0370\u01b8\u0000\u18bf\u18c2\u0001\u0000\u0000"+
		"\u0000\u18c0\u18c2\u0003\u0372\u01b9\u0000\u18c1\u18bc\u0001\u0000\u0000"+
		"\u0000\u18c1\u18c0\u0001\u0000\u0000\u0000\u18c2\u036d\u0001\u0000\u0000"+
		"\u0000\u18c3\u18c4\u0003\u001c\u000e\u0000\u18c4\u036f\u0001\u0000\u0000"+
		"\u0000\u18c5\u18c6\u0003*\u0015\u0000\u18c6\u0371\u0001\u0000\u0000\u0000"+
		"\u18c7\u18c8\u0005\u009a\u0000\u0000\u18c8\u18c9\u0003\u036e\u01b7\u0000"+
		"\u18c9\u0373\u0001\u0000\u0000\u0000\u18ca\u18cd\u00057\u0000\u0000\u18cb"+
		"\u18ce\u0003\u0376\u01bb\u0000\u18cc\u18ce\u0003\u0378\u01bc\u0000\u18cd"+
		"\u18cb\u0001\u0000\u0000\u0000\u18cd\u18cc\u0001\u0000\u0000\u0000\u18ce"+
		"\u0375\u0001\u0000\u0000\u0000\u18cf\u18d2\u0003\u037a\u01bd\u0000\u18d0"+
		"\u18d1\u0005a\u0000\u0000\u18d1\u18d3\u0003\u037c\u01be\u0000\u18d2\u18d0"+
		"\u0001\u0000\u0000\u0000\u18d2\u18d3\u0001\u0000\u0000\u0000\u18d3\u18d4"+
		"\u0001\u0000\u0000\u0000\u18d4\u18d5\u0005g\u0000\u0000\u18d5\u18da\u0003"+
		"\u0384\u01c2\u0000\u18d6\u18d7\u0005%\u0000\u0000\u18d7\u18d9\u0003\u0384"+
		"\u01c2\u0000\u18d8\u18d6\u0001\u0000\u0000\u0000\u18d9\u18dc\u0001\u0000"+
		"\u0000\u0000\u18da\u18d8\u0001\u0000\u0000\u0000\u18da\u18db\u0001\u0000"+
		"\u0000\u0000\u18db\u18e0\u0001\u0000\u0000\u0000\u18dc\u18da\u0001\u0000"+
		"\u0000\u0000\u18dd\u18de\u0005M\u0000\u0000\u18de\u18df\u00057\u0000\u0000"+
		"\u18df\u18e1\u0005\u0108\u0000\u0000\u18e0\u18dd\u0001\u0000\u0000\u0000"+
		"\u18e0\u18e1\u0001\u0000\u0000\u0000\u18e1\u18e4\u0001\u0000\u0000\u0000"+
		"\u18e2\u18e3\u0005`\u0000\u0000\u18e3\u18e5\u0003\u0384\u01c2\u0000\u18e4"+
		"\u18e2\u0001\u0000\u0000\u0000\u18e4\u18e5\u0001\u0000\u0000\u0000\u18e5"+
		"\u0377\u0001\u0000\u0000\u0000\u18e6\u18e9\u0003\u037e\u01bf\u0000\u18e7"+
		"\u18e8\u0005a\u0000\u0000\u18e8\u18ea\u0003\u0380\u01c0\u0000\u18e9\u18e7"+
		"\u0001\u0000\u0000\u0000\u18e9\u18ea\u0001\u0000\u0000\u0000\u18ea\u18eb"+
		"\u0001\u0000\u0000\u0000\u18eb\u18ec\u0005g\u0000\u0000\u18ec\u18f1\u0003"+
		"\u0384\u01c2\u0000\u18ed\u18ee\u0005%\u0000\u0000\u18ee\u18f0\u0003\u0384"+
		"\u01c2\u0000\u18ef\u18ed\u0001\u0000\u0000\u0000\u18f0\u18f3\u0001\u0000"+
		"\u0000\u0000\u18f1\u18ef\u0001\u0000\u0000\u0000\u18f1\u18f2\u0001\u0000"+
		"\u0000\u0000\u18f2\u18f7\u0001\u0000\u0000\u0000\u18f3\u18f1\u0001\u0000"+
		"\u0000\u0000\u18f4\u18f5\u0005M\u0000\u0000\u18f5\u18f6\u00057\u0000\u0000"+
		"\u18f6\u18f8\u0005\u0108\u0000\u0000\u18f7\u18f4\u0001\u0000\u0000\u0000"+
		"\u18f7\u18f8\u0001\u0000\u0000\u0000\u18f8\u0379\u0001\u0000\u0000\u0000"+
		"\u18f9\u18fb\u0003\u0394\u01ca\u0000\u18fa\u18fc\u0003P(\u0000\u18fb\u18fa"+
		"\u0001\u0000\u0000\u0000\u18fb\u18fc\u0001\u0000\u0000\u0000\u18fc\u1904"+
		"\u0001\u0000\u0000\u0000\u18fd\u18fe\u0005%\u0000\u0000\u18fe\u1900\u0003"+
		"\u0394\u01ca\u0000\u18ff\u1901\u0003P(\u0000\u1900\u18ff\u0001\u0000\u0000"+
		"\u0000\u1900\u1901\u0001\u0000\u0000\u0000\u1901\u1903\u0001\u0000\u0000"+
		"\u0000\u1902\u18fd\u0001\u0000\u0000\u0000\u1903\u1906\u0001\u0000\u0000"+
		"\u0000\u1904\u1902\u0001\u0000\u0000\u0000\u1904\u1905\u0001\u0000\u0000"+
		"\u0000\u1905\u037b\u0001\u0000\u0000\u0000\u1906\u1904\u0001\u0000\u0000"+
		"\u0000\u1907\u1908\u0003\u03d2\u01e9\u0000\u1908\u1909\u0005\u000e\u0000"+
		"\u0000\u1909\u190a\u0005\u000e\u0000\u0000\u190a\u190c\u0001\u0000\u0000"+
		"\u0000\u190b\u1907\u0001\u0000\u0000\u0000\u190b\u190c\u0001\u0000\u0000"+
		"\u0000\u190c\u190d\u0001\u0000\u0000\u0000\u190d\u190e\u0003\u0382\u01c1"+
		"\u0000\u190e\u037d\u0001\u0000\u0000\u0000\u190f\u1914\u0003\u0394\u01ca"+
		"\u0000\u1910\u1911\u0005%\u0000\u0000\u1911\u1913\u0003\u0394\u01ca\u0000"+
		"\u1912\u1910\u0001\u0000\u0000\u0000\u1913\u1916\u0001\u0000\u0000\u0000"+
		"\u1914\u1912\u0001\u0000\u0000\u0000\u1914\u1915\u0001\u0000\u0000\u0000"+
		"\u1915\u037f\u0001\u0000\u0000\u0000\u1916\u1914\u0001\u0000\u0000\u0000"+
		"\u1917\u1918\u0003\u03d4\u01ea\u0000\u1918\u1919\u0005\u000e\u0000\u0000"+
		"\u1919\u191a\u0005\u000e\u0000\u0000\u191a\u191c\u0001\u0000\u0000\u0000"+
		"\u191b\u1917\u0001\u0000\u0000\u0000\u191b\u191c\u0001\u0000\u0000\u0000"+
		"\u191c\u191d\u0001\u0000\u0000\u0000\u191d\u191e\u0003\u0382\u01c1\u0000"+
		"\u191e\u0381\u0001\u0000\u0000\u0000\u191f\u1920\u0003L&\u0000\u1920\u1921"+
		"\u0005\u0014\u0000\u0000\u1921\u1923\u0001\u0000\u0000\u0000\u1922\u191f"+
		"\u0001\u0000\u0000\u0000\u1922\u1923\u0001\u0000\u0000\u0000\u1923\u1924"+
		"\u0001\u0000\u0000\u0000\u1924\u1925\u0003N\'\u0000\u1925\u0383\u0001"+
		"\u0000\u0000\u0000\u1926\u1927\u0003\u03f2\u01f9\u0000\u1927\u0385\u0001"+
		"\u0000\u0000\u0000\u1928\u192e\u00058\u0000\u0000\u1929\u192b\u0003\u0392"+
		"\u01c9\u0000\u192a\u1929\u0001\u0000\u0000\u0000\u192a\u192b\u0001\u0000"+
		"\u0000\u0000\u192b\u192c\u0001\u0000\u0000\u0000\u192c\u192f\u0003\u0388"+
		"\u01c4\u0000\u192d\u192f\u0003\u038a\u01c5\u0000\u192e\u192a\u0001\u0000"+
		"\u0000\u0000\u192e\u192d\u0001\u0000\u0000\u0000\u192f\u0387\u0001\u0000"+
		"\u0000\u0000\u1930\u1933\u0003\u037a\u01bd\u0000\u1931\u1932\u0005a\u0000"+
		"\u0000\u1932\u1934\u0003\u037c\u01be\u0000\u1933\u1931\u0001\u0000\u0000"+
		"\u0000\u1933\u1934\u0001\u0000\u0000\u0000\u1934\u1935\u0001\u0000\u0000"+
		"\u0000\u1935\u1936\u0007\\\u0000\u0000\u1936\u193b\u0003\u0384\u01c2\u0000"+
		"\u1937\u1938\u0005%\u0000\u0000\u1938\u193a\u0003\u0384\u01c2\u0000\u1939"+
		"\u1937\u0001\u0000\u0000\u0000\u193a\u193d\u0001\u0000\u0000\u0000\u193b"+
		"\u1939\u0001\u0000\u0000\u0000\u193b\u193c\u0001\u0000\u0000\u0000\u193c"+
		"\u193f\u0001\u0000\u0000\u0000\u193d\u193b\u0001\u0000\u0000\u0000\u193e"+
		"\u1940\u0005\u0104\u0000\u0000\u193f\u193e\u0001\u0000\u0000\u0000\u193f"+
		"\u1940\u0001\u0000\u0000\u0000\u1940\u1943\u0001\u0000\u0000\u0000\u1941"+
		"\u1942\u0005`\u0000\u0000\u1942\u1944\u0003\u0384\u01c2\u0000\u1943\u1941"+
		"\u0001\u0000\u0000\u0000\u1943\u1944\u0001\u0000\u0000\u0000\u1944\u0389"+
		"\u0001\u0000\u0000\u0000\u1945\u1948\u0003\u037e\u01bf\u0000\u1946\u1947"+
		"\u0005a\u0000\u0000\u1947\u1949\u0003\u0380\u01c0\u0000\u1948\u1946\u0001"+
		"\u0000\u0000\u0000\u1948\u1949\u0001\u0000\u0000\u0000\u1949\u194a\u0001"+
		"\u0000\u0000\u0000\u194a\u194b\u0007\\\u0000\u0000\u194b\u1950\u0003\u0384"+
		"\u01c2\u0000\u194c\u194d\u0005%\u0000\u0000\u194d\u194f\u0003\u0384\u01c2"+
		"\u0000\u194e\u194c\u0001\u0000\u0000\u0000\u194f\u1952\u0001\u0000\u0000"+
		"\u0000\u1950\u194e\u0001\u0000\u0000\u0000\u1950\u1951\u0001\u0000\u0000"+
		"\u0000\u1951\u1954\u0001\u0000\u0000\u0000\u1952\u1950\u0001\u0000\u0000"+
		"\u0000\u1953\u1955\u0005\u0104\u0000\u0000\u1954\u1953\u0001\u0000\u0000"+
		"\u0000\u1954\u1955\u0001\u0000\u0000\u0000\u1955\u038b\u0001\u0000\u0000"+
		"\u0000\u1956\u1959\u0005\u011e\u0000\u0000\u1957\u195a\u0003\u038e\u01c7"+
		"\u0000\u1958\u195a\u0003\u0390\u01c8\u0000\u1959\u1957\u0001\u0000\u0000"+
		"\u0000\u1959\u1958\u0001\u0000\u0000\u0000\u195a\u038d\u0001\u0000\u0000"+
		"\u0000\u195b\u195e\u0003\u037a\u01bd\u0000\u195c\u195d\u0005a\u0000\u0000"+
		"\u195d\u195f\u0003\u037c\u01be\u0000\u195e\u195c\u0001\u0000\u0000\u0000"+
		"\u195e\u195f\u0001\u0000\u0000\u0000\u195f\u1960\u0001\u0000\u0000\u0000"+
		"\u1960\u1961\u0005g\u0000\u0000\u1961\u1966\u0003\u0384\u01c2\u0000\u1962"+
		"\u1963\u0005%\u0000\u0000\u1963\u1965\u0003\u0384\u01c2\u0000\u1964\u1962"+
		"\u0001\u0000\u0000\u0000\u1965\u1968\u0001\u0000\u0000\u0000\u1966\u1964"+
		"\u0001\u0000\u0000\u0000\u1966\u1967\u0001\u0000\u0000\u0000\u1967\u196a"+
		"\u0001\u0000\u0000\u0000\u1968\u1966\u0001\u0000\u0000\u0000\u1969\u196b"+
		"\u0005\u0104\u0000\u0000\u196a\u1969\u0001\u0000\u0000\u0000\u196a\u196b"+
		"\u0001\u0000\u0000\u0000\u196b\u196e\u0001\u0000\u0000\u0000\u196c\u196d"+
		"\u0005`\u0000\u0000\u196d\u196f\u0003\u0384\u01c2\u0000\u196e\u196c\u0001"+
		"\u0000\u0000\u0000\u196e\u196f\u0001\u0000\u0000\u0000\u196f\u038f\u0001"+
		"\u0000\u0000\u0000\u1970\u1973\u0003\u037e\u01bf\u0000\u1971\u1972\u0005"+
		"a\u0000\u0000\u1972\u1974\u0003\u0380\u01c0\u0000\u1973\u1971\u0001\u0000"+
		"\u0000\u0000\u1973\u1974\u0001\u0000\u0000\u0000\u1974\u1975\u0001\u0000"+
		"\u0000\u0000\u1975\u1976\u0005g\u0000\u0000\u1976\u197b\u0003\u0384\u01c2"+
		"\u0000\u1977\u1978\u0005%\u0000\u0000\u1978\u197a\u0003\u0384\u01c2\u0000"+
		"\u1979\u1977\u0001\u0000\u0000\u0000\u197a\u197d\u0001\u0000\u0000\u0000"+
		"\u197b\u1979\u0001\u0000\u0000\u0000\u197b\u197c\u0001\u0000\u0000\u0000"+
		"\u197c\u197f\u0001\u0000\u0000\u0000\u197d\u197b\u0001\u0000\u0000\u0000"+
		"\u197e\u1980\u0005\u0104\u0000\u0000\u197f\u197e\u0001\u0000\u0000\u0000"+
		"\u197f\u1980\u0001\u0000\u0000\u0000\u1980\u0391\u0001\u0000\u0000\u0000"+
		"\u1981\u1982\u00057\u0000\u0000\u1982\u1983\u0005\u0108\u0000\u0000\u1983"+
		"\u1984\u0005f\u0000\u0000\u1984\u0393\u0001\u0000\u0000\u0000\u1985\u1987"+
		"\u0005r\u0000\u0000\u1986\u1988\u0005\u0109\u0000\u0000\u1987\u1986\u0001"+
		"\u0000\u0000\u0000\u1987\u1988\u0001\u0000\u0000\u0000\u1988\u199d\u0001"+
		"\u0000\u0000\u0000\u1989\u199d\u0003\u03c0\u01e0\u0000\u198a\u199d\u0003"+
		"\u03be\u01df\u0000\u198b\u199d\u0003\u03c2\u01e1\u0000\u198c\u199d\u0003"+
		"\u03ba\u01dd\u0000\u198d\u199d\u0003\u0396\u01cb\u0000\u198e\u199d\u0003"+
		"\u03ce\u01e7\u0000\u198f\u199d\u0003\u039c\u01ce\u0000\u1990\u199d\u0003"+
		"\u039e\u01cf\u0000\u1991\u199d\u0003\u03a6\u01d3\u0000\u1992\u199d\u0003"+
		"\u03b8\u01dc\u0000\u1993\u199d\u0003\u03c4\u01e2\u0000\u1994\u199d\u0003"+
		"\u03a8\u01d4\u0000\u1995\u199d\u0003\u03aa\u01d5\u0000\u1996\u199d\u0003"+
		"\u0398\u01cc\u0000\u1997\u199d\u0003\u039a\u01cd\u0000\u1998\u199d\u0003"+
		"\u03ac\u01d6\u0000\u1999\u199d\u0003\u03bc\u01de\u0000\u199a\u199d\u0003"+
		"\u03ca\u01e5\u0000\u199b\u199d\u0003\u03cc\u01e6\u0000\u199c\u1985\u0001"+
		"\u0000\u0000\u0000\u199c\u1989\u0001\u0000\u0000\u0000\u199c\u198a\u0001"+
		"\u0000\u0000\u0000\u199c\u198b\u0001\u0000\u0000\u0000\u199c\u198c\u0001"+
		"\u0000\u0000\u0000\u199c\u198d\u0001\u0000\u0000\u0000\u199c\u198e\u0001"+
		"\u0000\u0000\u0000\u199c\u198f\u0001\u0000\u0000\u0000\u199c\u1990\u0001"+
		"\u0000\u0000\u0000\u199c\u1991\u0001\u0000\u0000\u0000\u199c\u1992\u0001"+
		"\u0000\u0000\u0000\u199c\u1993\u0001\u0000\u0000\u0000\u199c\u1994\u0001"+
		"\u0000\u0000\u0000\u199c\u1995\u0001\u0000\u0000\u0000\u199c\u1996\u0001"+
		"\u0000\u0000\u0000\u199c\u1997\u0001\u0000\u0000\u0000\u199c\u1998\u0001"+
		"\u0000\u0000\u0000\u199c\u1999\u0001\u0000\u0000\u0000\u199c\u199a\u0001"+
		"\u0000\u0000\u0000\u199c\u199b\u0001\u0000\u0000\u0000\u199d\u0395\u0001"+
		"\u0000\u0000\u0000\u199e\u19af\u00053\u0000\u0000\u199f\u19af\u0005\u0151"+
		"\u0000\u0000\u19a0\u19af\u00051\u0000\u0000\u19a1\u19af\u0005\u014c\u0000"+
		"\u0000\u19a2\u19af\u0005/\u0000\u0000\u19a3\u19af\u0005\u015b\u0000\u0000"+
		"\u19a4\u19af\u0005\u010a\u0000\u0000\u19a5\u19af\u0005.\u0000\u0000\u19a6"+
		"\u19a7\u0005\u0153\u0000\u0000\u19a7\u19af\u0005\u0154\u0000\u0000\u19a8"+
		"\u19af\u00050\u0000\u0000\u19a9\u19aa\u0005J\u0000\u0000\u19aa\u19ab\u0005"+
		"\u015c\u0000\u0000\u19ab\u19af\u0005\u015e\u0000\u0000\u19ac\u19ad\u0005"+
		"J\u0000\u0000\u19ad\u19af\u0005\u0155\u0000\u0000\u19ae\u199e\u0001\u0000"+
		"\u0000\u0000\u19ae\u199f\u0001\u0000\u0000\u0000\u19ae\u19a0\u0001\u0000"+
		"\u0000\u0000\u19ae\u19a1\u0001\u0000\u0000\u0000\u19ae\u19a2\u0001\u0000"+
		"\u0000\u0000\u19ae\u19a3\u0001\u0000\u0000\u0000\u19ae\u19a4\u0001\u0000"+
		"\u0000\u0000\u19ae\u19a5\u0001\u0000\u0000\u0000\u19ae\u19a6\u0001\u0000"+
		"\u0000\u0000\u19ae\u19a8\u0001\u0000\u0000\u0000\u19ae\u19a9\u0001\u0000"+
		"\u0000\u0000\u19ae\u19ac\u0001\u0000\u0000\u0000\u19af\u0397\u0001\u0000"+
		"\u0000\u0000\u19b0\u19b1\u0005\u0170\u0000\u0000\u19b1\u19b2\u0005\u0171"+
		"\u0000\u0000\u19b2\u19fe\u0005\u0172\u0000\u0000\u19b3\u19b9\u00053\u0000"+
		"\u0000\u19b4\u19ba\u0005\u015f\u0000\u0000\u19b5\u19ba\u0005\u0160\u0000"+
		"\u0000\u19b6\u19ba\u0005\u015d\u0000\u0000\u19b7\u19b8\u0005\u015a\u0000"+
		"\u0000\u19b8\u19ba\u0005\u0161\u0000\u0000\u19b9\u19b4\u0001\u0000\u0000"+
		"\u0000\u19b9\u19b5\u0001\u0000\u0000\u0000\u19b9\u19b6\u0001\u0000\u0000"+
		"\u0000\u19b9\u19b7\u0001\u0000\u0000\u0000\u19ba\u19fe\u0001\u0000\u0000"+
		"\u0000\u19bb\u19bc\u00053\u0000\u0000\u19bc\u19ce\u0005s\u0000\u0000\u19bd"+
		"\u19be\u0005\u0162\u0000\u0000\u19be\u19cf\u0005v\u0000\u0000\u19bf\u19cf"+
		"\u0005\u00f6\u0000\u0000\u19c0\u19cf\u0005\u0163\u0000\u0000\u19c1\u19cf"+
		"\u0005\u00cc\u0000\u0000\u19c2\u19cf\u0005\u0164\u0000\u0000\u19c3\u19c4"+
		"\u0005\u0165\u0000\u0000\u19c4\u19cf\u0005\u0166\u0000\u0000\u19c5\u19c6"+
		"\u0005\u0165\u0000\u0000\u19c6\u19cf\u0005\u014e\u0000\u0000\u19c7\u19c8"+
		"\u0005\u0167\u0000\u0000\u19c8\u19cf\u0005\u015a\u0000\u0000\u19c9\u19cf"+
		"\u0005\u0130\u0000\u0000\u19ca\u19cb\u0005\u015a\u0000\u0000\u19cb\u19cf"+
		"\u0005\u0168\u0000\u0000\u19cc\u19cd\u0005\u015a\u0000\u0000\u19cd\u19cf"+
		"\u0005\u010c\u0000\u0000\u19ce\u19bd\u0001\u0000\u0000\u0000\u19ce\u19bf"+
		"\u0001\u0000\u0000\u0000\u19ce\u19c0\u0001\u0000\u0000\u0000\u19ce\u19c1"+
		"\u0001\u0000\u0000\u0000\u19ce\u19c2\u0001\u0000\u0000\u0000\u19ce\u19c3"+
		"\u0001\u0000\u0000\u0000\u19ce\u19c5\u0001\u0000\u0000\u0000\u19ce\u19c7"+
		"\u0001\u0000\u0000\u0000\u19ce\u19c9\u0001\u0000\u0000\u0000\u19ce\u19ca"+
		"\u0001\u0000\u0000\u0000\u19ce\u19cc\u0001\u0000\u0000\u0000\u19cf\u19fe"+
		"\u0001\u0000\u0000\u0000\u19d0\u19d1\u0005\u016d\u0000\u0000\u19d1\u19fe"+
		"\u0005\u015a\u0000\u0000\u19d2\u19d3\u0005\u014f\u0000\u0000\u19d3\u19d4"+
		"\u0005s\u0000\u0000\u19d4\u19fe\u0005\u00cc\u0000\u0000\u19d5\u19d6\u0005"+
		"\u014f\u0000\u0000\u19d6\u19fe\u0005\u00a4\u0000\u0000\u19d7\u19d8\u0005"+
		"\u0151\u0000\u0000\u19d8\u19fe\u0005\u015a\u0000\u0000\u19d9\u19da\u0005"+
		"2\u0000\u0000\u19da\u19db\u0005s\u0000\u0000\u19db\u19fe\u0005\u00cc\u0000"+
		"\u0000\u19dc\u19e8\u00052\u0000\u0000\u19dd\u19de\u0005\u0162\u0000\u0000"+
		"\u19de\u19e9\u0005v\u0000\u0000\u19df\u19e0\u0005\u0169\u0000\u0000\u19e0"+
		"\u19e1\u0005\u0165\u0000\u0000\u19e1\u19e9\u0005\u0166\u0000\u0000\u19e2"+
		"\u19e9\u0005\u0164\u0000\u0000\u19e3\u19e4\u0005\u015a\u0000\u0000\u19e4"+
		"\u19e9\u0005\u010c\u0000\u0000\u19e5\u19e6\u0005\u015d\u0000\u0000\u19e6"+
		"\u19e7\u0005\u0165\u0000\u0000\u19e7\u19e9\u0005\u0166\u0000\u0000\u19e8"+
		"\u19dd\u0001\u0000\u0000\u0000\u19e8\u19df\u0001\u0000\u0000\u0000\u19e8"+
		"\u19e2\u0001\u0000\u0000\u0000\u19e8\u19e3\u0001\u0000\u0000\u0000\u19e8"+
		"\u19e5\u0001\u0000\u0000\u0000\u19e9\u19fe\u0001\u0000\u0000\u0000\u19ea"+
		"\u19eb\u0005\u016e\u0000\u0000\u19eb\u19ec\u0005\u016f\u0000\u0000\u19ec"+
		"\u19fe\u0005\u0157\u0000\u0000\u19ed\u19ee\u0005\u016b\u0000\u0000\u19ee"+
		"\u19ef\u0005s\u0000\u0000\u19ef\u19fe\u0005\u0130\u0000\u0000\u19f0\u19f1"+
		"\u0005.\u0000\u0000\u19f1\u19f2\u0005r\u0000\u0000\u19f2\u19f3\u0005\u010b"+
		"\u0000\u0000\u19f3\u19fe\u0005\u016c\u0000\u0000\u19f4\u19fe\u0005\u0174"+
		"\u0000\u0000\u19f5\u19f6\u0005\u0173\u0000\u0000\u19f6\u19fe\u0005\u0157"+
		"\u0000\u0000\u19f7\u19f8\u0005J\u0000\u0000\u19f8\u19f9\u0005s\u0000\u0000"+
		"\u19f9\u19fe\u0007]\u0000\u0000\u19fa\u19fb\u0005J\u0000\u0000\u19fb\u19fc"+
		"\u0005\u015a\u0000\u0000\u19fc\u19fe\u0005\u0161\u0000\u0000\u19fd\u19b0"+
		"\u0001\u0000\u0000\u0000\u19fd\u19b3\u0001\u0000\u0000\u0000\u19fd\u19bb"+
		"\u0001\u0000\u0000\u0000\u19fd\u19d0\u0001\u0000\u0000\u0000\u19fd\u19d2"+
		"\u0001\u0000\u0000\u0000\u19fd\u19d5\u0001\u0000\u0000\u0000\u19fd\u19d7"+
		"\u0001\u0000\u0000\u0000\u19fd\u19d9\u0001\u0000\u0000\u0000\u19fd\u19dc"+
		"\u0001\u0000\u0000\u0000\u19fd\u19ea\u0001\u0000\u0000\u0000\u19fd\u19ed"+
		"\u0001\u0000\u0000\u0000\u19fd\u19f0\u0001\u0000\u0000\u0000\u19fd\u19f4"+
		"\u0001\u0000\u0000\u0000\u19fd\u19f5\u0001\u0000\u0000\u0000\u19fd\u19f7"+
		"\u0001\u0000\u0000\u0000\u19fd\u19fa\u0001\u0000\u0000\u0000\u19fe\u0399"+
		"\u0001\u0000\u0000\u0000\u19ff\u1a01\u0005\u0151\u0000\u0000\u1a00\u1a02"+
		"\u0005\u015a\u0000\u0000\u1a01\u1a00\u0001\u0000\u0000\u0000\u1a01\u1a02"+
		"\u0001\u0000\u0000\u0000\u1a02\u1a12\u0001\u0000\u0000\u0000\u1a03\u1a12"+
		"\u0005\u016b\u0000\u0000\u1a04\u1a06\u0005J\u0000\u0000\u1a05\u1a07\u0005"+
		"s\u0000\u0000\u1a06\u1a05\u0001\u0000\u0000\u0000\u1a06\u1a07\u0001\u0000"+
		"\u0000\u0000\u1a07\u1a08\u0001\u0000\u0000\u0000\u1a08\u1a12\u0005\u0155"+
		"\u0000\u0000\u1a09\u1a12\u00053\u0000\u0000\u1a0a\u1a0b\u00053\u0000\u0000"+
		"\u1a0b\u1a0f\u0005s\u0000\u0000\u1a0c\u1a10\u0005\u0130\u0000\u0000\u1a0d"+
		"\u1a0e\u0005\u015a\u0000\u0000\u1a0e\u1a10\u0005\u010c\u0000\u0000\u1a0f"+
		"\u1a0c\u0001\u0000\u0000\u0000\u1a0f\u1a0d\u0001\u0000\u0000\u0000\u1a10"+
		"\u1a12\u0001\u0000\u0000\u0000\u1a11\u19ff\u0001\u0000\u0000\u0000\u1a11"+
		"\u1a03\u0001\u0000\u0000\u0000\u1a11\u1a04\u0001\u0000\u0000\u0000\u1a11"+
		"\u1a09\u0001\u0000\u0000\u0000\u1a11\u1a0a\u0001\u0000\u0000\u0000\u1a12"+
		"\u039b\u0001\u0000\u0000\u0000\u1a13\u1a14\u0005\u0170\u0000\u0000\u1a14"+
		"\u1a15\u0005\u00cc\u0000\u0000\u1a15\u1a16\u0005\u0171\u0000\u0000\u1a16"+
		"\u1abb\u0005\u0172\u0000\u0000\u1a17\u1abb\u00053\u0000\u0000\u1a18\u1a19"+
		"\u00053\u0000\u0000\u1a19\u1abb\u0005\u015d\u0000\u0000\u1a1a\u1a1b\u0005"+
		"3\u0000\u0000\u1a1b\u1a55\u0005s\u0000\u0000\u1a1c\u1a1d\u0005\u0156\u0000"+
		"\u0000\u1a1d\u1a56\u0005\u010c\u0000\u0000\u1a1e\u1a56\u0005\u0157\u0000"+
		"\u0000\u1a1f\u1a24\u0005\u0158\u0000\u0000\u1a20\u1a24\u0005\u0159\u0000"+
		"\u0000\u1a21\u1a22\u0005<\u0000\u0000\u1a22\u1a24\u0005\u017b\u0000\u0000"+
		"\u1a23\u1a1f\u0001\u0000\u0000\u0000\u1a23\u1a20\u0001\u0000\u0000\u0000"+
		"\u1a23\u1a21\u0001\u0000\u0000\u0000\u1a24\u1a25\u0001\u0000\u0000\u0000"+
		"\u1a25\u1a56\u0005C\u0000\u0000\u1a26\u1a56\u0005\u0179\u0000\u0000\u1a27"+
		"\u1a56\u0005\u00f6\u0000\u0000\u1a28\u1a29\u0005<\u0000\u0000\u1a29\u1a2a"+
		"\u0005\u017c\u0000\u0000\u1a2a\u1a2b\u0005C\u0000\u0000\u1a2b\u1a56\u0005"+
		"\u0155\u0000\u0000\u1a2c\u1a56\u0005\u017a\u0000\u0000\u1a2d\u1a37\u0005"+
		"\u00cc\u0000\u0000\u1a2e\u1a38\u0005\u0168\u0000\u0000\u1a2f\u1a30\u0005"+
		"\u0169\u0000\u0000\u1a30\u1a38\u0005G\u0000\u0000\u1a31\u1a32\u0005\u0165"+
		"\u0000\u0000\u1a32\u1a38\u0005\u0166\u0000\u0000\u1a33\u1a34\u0005\u0165"+
		"\u0000\u0000\u1a34\u1a38\u0005\u014e\u0000\u0000\u1a35\u1a36\u0005\u0175"+
		"\u0000\u0000\u1a36\u1a38\u0005\u0176\u0000\u0000\u1a37\u1a2e\u0001\u0000"+
		"\u0000\u0000\u1a37\u1a2f\u0001\u0000\u0000\u0000\u1a37\u1a31\u0001\u0000"+
		"\u0000\u0000\u1a37\u1a33\u0001\u0000\u0000\u0000\u1a37\u1a35\u0001\u0000"+
		"\u0000\u0000\u1a37\u1a38\u0001\u0000\u0000\u0000\u1a38\u1a56\u0001\u0000"+
		"\u0000\u0000\u1a39\u1a56\u0005\u0177\u0000\u0000\u1a3a\u1a3b\u0005\u0165"+
		"\u0000\u0000\u1a3b\u1a56\u0007^\u0000\u0000\u1a3c\u1a42\u0005\u016e\u0000"+
		"\u0000\u1a3d\u1a3e\u0005\u017d\u0000\u0000\u1a3e\u1a43\u0005\u017e\u0000"+
		"\u0000\u1a3f\u1a40\u0005\u017f\u0000\u0000\u1a40\u1a43\u0005\u0180\u0000"+
		"\u0000\u1a41\u1a43\u0005\u0181\u0000\u0000\u1a42\u1a3d\u0001\u0000\u0000"+
		"\u0000\u1a42\u1a3f\u0001\u0000\u0000\u0000\u1a42\u1a41\u0001\u0000\u0000"+
		"\u0000\u1a43\u1a56\u0001\u0000\u0000\u0000\u1a44\u1a45\u0005\u0182\u0000"+
		"\u0000\u1a45\u1a56\u0005\u0150\u0000\u0000\u1a46\u1a56\u0005\u0183\u0000"+
		"\u0000\u1a47\u1a48\u0005\u0185\u0000\u0000\u1a48\u1a56\u0005\u00b0\u0000"+
		"\u0000\u1a49\u1a4a\u0005\u0186\u0000\u0000\u1a4a\u1a4b\u0005\u0178\u0000"+
		"\u0000\u1a4b\u1a56\u0005\u0187\u0000\u0000\u1a4c\u1a56\u0005\u010c\u0000"+
		"\u0000\u1a4d\u1a56\u0005\u0188\u0000\u0000\u1a4e\u1a4f\u0005\u015a\u0000"+
		"\u0000\u1a4f\u1a56\u0005\u0168\u0000\u0000\u1a50\u1a56\u00056\u0000\u0000"+
		"\u1a51\u1a52\u0005\u0189\u0000\u0000\u1a52\u1a56\u0005\u018a\u0000\u0000"+
		"\u1a53\u1a56\u0005\u0178\u0000\u0000\u1a54\u1a56\u0005\u010b\u0000\u0000"+
		"\u1a55\u1a1c\u0001\u0000\u0000\u0000\u1a55\u1a1e\u0001\u0000\u0000\u0000"+
		"\u1a55\u1a23\u0001\u0000\u0000\u0000\u1a55\u1a26\u0001\u0000\u0000\u0000"+
		"\u1a55\u1a27\u0001\u0000\u0000\u0000\u1a55\u1a28\u0001\u0000\u0000\u0000"+
		"\u1a55\u1a2c\u0001\u0000\u0000\u0000\u1a55\u1a2d\u0001\u0000\u0000\u0000"+
		"\u1a55\u1a39\u0001\u0000\u0000\u0000\u1a55\u1a3a\u0001\u0000\u0000\u0000"+
		"\u1a55\u1a3c\u0001\u0000\u0000\u0000\u1a55\u1a44\u0001\u0000\u0000\u0000"+
		"\u1a55\u1a46\u0001\u0000\u0000\u0000\u1a55\u1a47\u0001\u0000\u0000\u0000"+
		"\u1a55\u1a49\u0001\u0000\u0000\u0000\u1a55\u1a4c\u0001\u0000\u0000\u0000"+
		"\u1a55\u1a4d\u0001\u0000\u0000\u0000\u1a55\u1a4e\u0001\u0000\u0000\u0000"+
		"\u1a55\u1a50\u0001\u0000\u0000\u0000\u1a55\u1a51\u0001\u0000\u0000\u0000"+
		"\u1a55\u1a53\u0001\u0000\u0000\u0000\u1a55\u1a54\u0001\u0000\u0000\u0000"+
		"\u1a56\u1abb\u0001\u0000\u0000\u0000\u1a57\u1a59\u0005\u016d\u0000\u0000"+
		"\u1a58\u1a5a\u0005\u015a\u0000\u0000\u1a59\u1a58\u0001\u0000\u0000\u0000"+
		"\u1a59\u1a5a\u0001\u0000\u0000\u0000\u1a5a\u1abb\u0001\u0000\u0000\u0000"+
		"\u1a5b\u1a5c\u0005\u0192\u0000\u0000\u1a5c\u1abb\u0007_\u0000\u0000\u1a5d"+
		"\u1abb\u0005\u0198\u0000\u0000\u1a5e\u1abb\u0005\u014f\u0000\u0000\u1a5f"+
		"\u1a61\u0005\u014f\u0000\u0000\u1a60\u1a62\u0005\u0142\u0000\u0000\u1a61"+
		"\u1a60\u0001\u0000\u0000\u0000\u1a61\u1a62\u0001\u0000\u0000\u0000\u1a62"+
		"\u1abb\u0001\u0000\u0000\u0000\u1a63\u1a65\u0005\u0151\u0000\u0000\u1a64"+
		"\u1a66\u0005\u015a\u0000\u0000\u1a65\u1a64\u0001\u0000\u0000\u0000\u1a65"+
		"\u1a66\u0001\u0000\u0000\u0000\u1a66\u1abb\u0001\u0000\u0000\u0000\u1a67"+
		"\u1a8c\u00052\u0000\u0000\u1a68\u1a8d\u0005\u018b\u0000\u0000\u1a69\u1a8d"+
		"\u0005\u0157\u0000\u0000\u1a6a\u1a6b\u0007`\u0000\u0000\u1a6b\u1a8d\u0005"+
		"C\u0000\u0000\u1a6c\u1a8d\u0005\u0179\u0000\u0000\u1a6d\u1a8d\u0005\u017a"+
		"\u0000\u0000\u1a6e\u1a8d\u0005\u00cc\u0000\u0000\u1a6f\u1a71\u0005\u00cc"+
		"\u0000\u0000\u1a70\u1a6f\u0001\u0000\u0000\u0000\u1a70\u1a71\u0001\u0000"+
		"\u0000\u0000\u1a71\u1a72\u0001\u0000\u0000\u0000\u1a72\u1a73\u0005\u0169"+
		"\u0000\u0000\u1a73\u1a74\u0005\u0165\u0000\u0000\u1a74\u1a8d\u0005\u0166"+
		"\u0000\u0000\u1a75\u1a8d\u0005\u009a\u0000\u0000\u1a76\u1a77\u0005\u0182"+
		"\u0000\u0000\u1a77\u1a8d\u0005\u0150\u0000\u0000\u1a78\u1a8d\u0005F\u0000"+
		"\u0000\u1a79\u1a7a\u0005\u0185\u0000\u0000\u1a7a\u1a8d\u0005\u00b0\u0000"+
		"\u0000\u1a7b\u1a8d\u0005H\u0000\u0000\u1a7c\u1a8d\u0005\u018c\u0000\u0000"+
		"\u1a7d\u1a7e\u0005\u0186\u0000\u0000\u1a7e\u1a7f\u0005\u0178\u0000\u0000"+
		"\u1a7f\u1a8d\u0005\u0187\u0000\u0000\u1a80\u1a8d\u0005\u010c\u0000\u0000"+
		"\u1a81\u1a8d\u0005\u0188\u0000\u0000\u1a82\u1a8d\u0005\u018d\u0000\u0000"+
		"\u1a83\u1a8d\u00056\u0000\u0000\u1a84\u1a8d\u0005\u0178\u0000\u0000\u1a85"+
		"\u1a8d\u0005\u018e\u0000\u0000\u1a86\u1a8d\u0005;\u0000\u0000\u1a87\u1a8d"+
		"\u0005\u00b0\u0000\u0000\u1a88\u1a8d\u0005J\u0000\u0000\u1a89\u1a8a\u0005"+
		"\u016a\u0000\u0000\u1a8a\u1a8b\u00056\u0000\u0000\u1a8b\u1a8d\u0005\u018f"+
		"\u0000\u0000\u1a8c\u1a68\u0001\u0000\u0000\u0000\u1a8c\u1a69\u0001\u0000"+
		"\u0000\u0000\u1a8c\u1a6a\u0001\u0000\u0000\u0000\u1a8c\u1a6c\u0001\u0000"+
		"\u0000\u0000\u1a8c\u1a6d\u0001\u0000\u0000\u0000\u1a8c\u1a6e\u0001\u0000"+
		"\u0000\u0000\u1a8c\u1a70\u0001\u0000\u0000\u0000\u1a8c\u1a75\u0001\u0000"+
		"\u0000\u0000\u1a8c\u1a76\u0001\u0000\u0000\u0000\u1a8c\u1a78\u0001\u0000"+
		"\u0000\u0000\u1a8c\u1a79\u0001\u0000\u0000\u0000\u1a8c\u1a7b\u0001\u0000"+
		"\u0000\u0000\u1a8c\u1a7c\u0001\u0000\u0000\u0000\u1a8c\u1a7d\u0001\u0000"+
		"\u0000\u0000\u1a8c\u1a80\u0001\u0000\u0000\u0000\u1a8c\u1a81\u0001\u0000"+
		"\u0000\u0000\u1a8c\u1a82\u0001\u0000\u0000\u0000\u1a8c\u1a83\u0001\u0000"+
		"\u0000\u0000\u1a8c\u1a84\u0001\u0000\u0000\u0000\u1a8c\u1a85\u0001\u0000"+
		"\u0000\u0000\u1a8c\u1a86\u0001\u0000\u0000\u0000\u1a8c\u1a87\u0001\u0000"+
		"\u0000\u0000\u1a8c\u1a88\u0001\u0000\u0000\u0000\u1a8c\u1a89\u0001\u0000"+
		"\u0000\u0000\u1a8d\u1abb\u0001\u0000\u0000\u0000\u1a8e\u1abb\u00051\u0000"+
		"\u0000\u1a8f\u1abb\u0005\u014c\u0000\u0000\u1a90\u1a92\u0005\u014c\u0000"+
		"\u0000\u1a91\u1a93\u0005s\u0000\u0000\u1a92\u1a91\u0001\u0000\u0000\u0000"+
		"\u1a92\u1a93\u0001\u0000\u0000\u0000\u1a93\u1a94\u0001\u0000\u0000\u0000"+
		"\u1a94\u1a95\u0005\u016e\u0000\u0000\u1a95\u1abb\u0005\u0190\u0000\u0000"+
		"\u1a96\u1abb\u0005/\u0000\u0000\u1a97\u1a98\u0005\u0191\u0000\u0000\u1a98"+
		"\u1a99\u0005\u00cc\u0000\u0000\u1a99\u1abb\u0005\u00f6\u0000\u0000\u1a9a"+
		"\u1abb\u0005\u010a\u0000\u0000\u1a9b\u1abb\u0005.\u0000\u0000\u1a9c\u1abb"+
		"\u0005\u0194\u0000\u0000\u1a9d\u1a9e\u0005\u0195\u0000\u0000\u1a9e\u1a9f"+
		"\u0005\u0196\u0000\u0000\u1a9f\u1abb\u0005\u0197\u0000\u0000\u1aa0\u1aa1"+
		"\u0005\u0153\u0000\u0000\u1aa1\u1abb\u0005\u0154\u0000\u0000\u1aa2\u1abb"+
		"\u0005\u0184\u0000\u0000\u1aa3\u1abb\u00050\u0000\u0000\u1aa4\u1aa5\u0005"+
		"J\u0000\u0000\u1aa5\u1aa6\u0005s\u0000\u0000\u1aa6\u1aa7\u0005<\u0000"+
		"\u0000\u1aa7\u1aa8\u0007a\u0000\u0000\u1aa8\u1aa9\u0005C\u0000\u0000\u1aa9"+
		"\u1abb\u0005\u0155\u0000\u0000\u1aaa\u1aab\u00052\u0000\u0000\u1aab\u1aaf"+
		"\u0005s\u0000\u0000\u1aac\u1ab0\u0005\u00cc\u0000\u0000\u1aad\u1aae\u0005"+
		"\u016e\u0000\u0000\u1aae\u1ab0\u0005\u0181\u0000\u0000\u1aaf\u1aac\u0001"+
		"\u0000\u0000\u0000\u1aaf\u1aad\u0001\u0000\u0000\u0000\u1ab0\u1abb\u0001"+
		"\u0000\u0000\u0000\u1ab1\u1ab2\u0005J\u0000\u0000\u1ab2\u1ab3\u0007b\u0000"+
		"\u0000\u1ab3\u1abb\u0005\u0161\u0000\u0000\u1ab4\u1ab6\u0005J\u0000\u0000"+
		"\u1ab5\u1ab7\u0005s\u0000\u0000\u1ab6\u1ab5\u0001\u0000\u0000\u0000\u1ab6"+
		"\u1ab7\u0001\u0000\u0000\u0000\u1ab7\u1ab8\u0001\u0000\u0000\u0000\u1ab8"+
		"\u1abb\u0005\u0155\u0000\u0000\u1ab9\u1abb\u0001\u0000\u0000\u0000\u1aba"+
		"\u1a13\u0001\u0000\u0000\u0000\u1aba\u1a17\u0001\u0000\u0000\u0000\u1aba"+
		"\u1a18\u0001\u0000\u0000\u0000\u1aba\u1a1a\u0001\u0000\u0000\u0000\u1aba"+
		"\u1a57\u0001\u0000\u0000\u0000\u1aba\u1a5b\u0001\u0000\u0000\u0000\u1aba"+
		"\u1a5d\u0001\u0000\u0000\u0000\u1aba\u1a5e\u0001\u0000\u0000\u0000\u1aba"+
		"\u1a5f\u0001\u0000\u0000\u0000\u1aba\u1a63\u0001\u0000\u0000\u0000\u1aba"+
		"\u1a67\u0001\u0000\u0000\u0000\u1aba\u1a8e\u0001\u0000\u0000\u0000\u1aba"+
		"\u1a8f\u0001\u0000\u0000\u0000\u1aba\u1a90\u0001\u0000\u0000\u0000\u1aba"+
		"\u1a96\u0001\u0000\u0000\u0000\u1aba\u1a97\u0001\u0000\u0000\u0000\u1aba"+
		"\u1a9a\u0001\u0000\u0000\u0000\u1aba\u1a9b\u0001\u0000\u0000\u0000\u1aba"+
		"\u1a9c\u0001\u0000\u0000\u0000\u1aba\u1a9d\u0001\u0000\u0000\u0000\u1aba"+
		"\u1aa0\u0001\u0000\u0000\u0000\u1aba\u1aa2\u0001\u0000\u0000\u0000\u1aba"+
		"\u1aa3\u0001\u0000\u0000\u0000\u1aba\u1aa4\u0001\u0000\u0000\u0000\u1aba"+
		"\u1aaa\u0001\u0000\u0000\u0000\u1aba\u1ab1\u0001\u0000\u0000\u0000\u1aba"+
		"\u1ab4\u0001\u0000\u0000\u0000\u1aba\u1ab9\u0001\u0000\u0000\u0000\u1abb"+
		"\u039d\u0001\u0000\u0000\u0000\u1abc\u1ac0\u0003\u03a0\u01d0\u0000\u1abd"+
		"\u1ac0\u0003\u03a2\u01d1\u0000\u1abe\u1ac0\u0003\u03a4\u01d2\u0000\u1abf"+
		"\u1abc\u0001\u0000\u0000\u0000\u1abf\u1abd\u0001\u0000\u0000\u0000\u1abf"+
		"\u1abe\u0001\u0000\u0000\u0000\u1ac0\u039f\u0001\u0000\u0000\u0000\u1ac1"+
		"\u1aca\u0005\u0151\u0000\u0000\u1ac2\u1aca\u0005\u016b\u0000\u0000\u1ac3"+
		"\u1aca\u00053\u0000\u0000\u1ac4\u1ac5\u0005J\u0000\u0000\u1ac5\u1aca\u0005"+
		"\u0155\u0000\u0000\u1ac6\u1ac7\u00053\u0000\u0000\u1ac7\u1ac8\u0005s\u0000"+
		"\u0000\u1ac8\u1aca\u0005\u010b\u0000\u0000\u1ac9\u1ac1\u0001\u0000\u0000"+
		"\u0000\u1ac9\u1ac2\u0001\u0000\u0000\u0000\u1ac9\u1ac3\u0001\u0000\u0000"+
		"\u0000\u1ac9\u1ac4\u0001\u0000\u0000\u0000\u1ac9\u1ac6\u0001\u0000\u0000"+
		"\u0000\u1aca\u03a1\u0001\u0000\u0000\u0000\u1acb\u1ad5\u0005\u0151\u0000"+
		"\u0000\u1acc\u1acd\u0005\u0153\u0000\u0000\u1acd\u1ad5\u0005\u0154\u0000"+
		"\u0000\u1ace\u1ad5\u00053\u0000\u0000\u1acf\u1ad0\u0005J\u0000\u0000\u1ad0"+
		"\u1ad5\u0005\u0155\u0000\u0000\u1ad1\u1ad2\u00053\u0000\u0000\u1ad2\u1ad3"+
		"\u0005s\u0000\u0000\u1ad3\u1ad5\u0005\u010c\u0000\u0000\u1ad4\u1acb\u0001"+
		"\u0000\u0000\u0000\u1ad4\u1acc\u0001\u0000\u0000\u0000\u1ad4\u1ace\u0001"+
		"\u0000\u0000\u0000\u1ad4\u1acf\u0001\u0000\u0000\u0000\u1ad4\u1ad1\u0001"+
		"\u0000\u0000\u0000\u1ad5\u03a3\u0001\u0000\u0000\u0000\u1ad6\u1adf\u0005"+
		"\u0151\u0000\u0000\u1ad7\u1adf\u00053\u0000\u0000\u1ad8\u1ad9\u0005J\u0000"+
		"\u0000\u1ad9\u1adf\u0005\u0155\u0000\u0000\u1ada\u1adb\u00053\u0000\u0000"+
		"\u1adb\u1adc\u0005s\u0000\u0000\u1adc\u1add\u0005\u0156\u0000\u0000\u1add"+
		"\u1adf\u0005\u010c\u0000\u0000\u1ade\u1ad6\u0001\u0000\u0000\u0000\u1ade"+
		"\u1ad7\u0001\u0000\u0000\u0000\u1ade\u1ad8\u0001\u0000\u0000\u0000\u1ade"+
		"\u1ada\u0001\u0000\u0000\u0000\u1adf\u03a5\u0001\u0000\u0000\u0000\u1ae0"+
		"\u1ae8\u0005\u0151\u0000\u0000\u1ae1\u1ae2\u0005\u0153\u0000\u0000\u1ae2"+
		"\u1ae8\u0005\u0154\u0000\u0000\u1ae3\u1ae8\u00053\u0000\u0000\u1ae4\u1ae8"+
		"\u0005\u010a\u0000\u0000\u1ae5\u1ae6\u0005J\u0000\u0000\u1ae6\u1ae8\u0005"+
		"\u0155\u0000\u0000\u1ae7\u1ae0\u0001\u0000\u0000\u0000\u1ae7\u1ae1\u0001"+
		"\u0000\u0000\u0000\u1ae7\u1ae3\u0001\u0000\u0000\u0000\u1ae7\u1ae4\u0001"+
		"\u0000\u0000\u0000\u1ae7\u1ae5\u0001\u0000\u0000\u0000\u1ae8\u03a7\u0001"+
		"\u0000\u0000\u0000\u1ae9\u1afe\u00053\u0000\u0000\u1aea\u1afe\u0005\u0151"+
		"\u0000\u0000\u1aeb\u1aec\u00052\u0000\u0000\u1aec\u1afe\u0005\u0199\u0000"+
		"\u0000\u1aed\u1afe\u00051\u0000\u0000\u1aee\u1afe\u0005\u014c\u0000\u0000"+
		"\u1aef\u1afe\u0005/\u0000\u0000\u1af0\u1afe\u0005\u010a\u0000\u0000\u1af1"+
		"\u1afe\u0005.\u0000\u0000\u1af2\u1af3\u0005\u0153\u0000\u0000\u1af3\u1afe"+
		"\u0005\u0154\u0000\u0000\u1af4\u1afe\u00050\u0000\u0000\u1af5\u1af6\u0005"+
		"J\u0000\u0000\u1af6\u1af7\u0005\u015c\u0000\u0000\u1af7\u1afe\u0005\u015e"+
		"\u0000\u0000\u1af8\u1af9\u0005J\u0000\u0000\u1af9\u1afe\u0005\u0155\u0000"+
		"\u0000\u1afa\u1afb\u00053\u0000\u0000\u1afb\u1afc\u0005s\u0000\u0000\u1afc"+
		"\u1afe\u00056\u0000\u0000\u1afd\u1ae9\u0001\u0000\u0000\u0000\u1afd\u1aea"+
		"\u0001\u0000\u0000\u0000\u1afd\u1aeb\u0001\u0000\u0000\u0000\u1afd\u1aed"+
		"\u0001\u0000\u0000\u0000\u1afd\u1aee\u0001\u0000\u0000\u0000\u1afd\u1aef"+
		"\u0001\u0000\u0000\u0000\u1afd\u1af0\u0001\u0000\u0000\u0000\u1afd\u1af1"+
		"\u0001\u0000\u0000\u0000\u1afd\u1af2\u0001\u0000\u0000\u0000\u1afd\u1af4"+
		"\u0001\u0000\u0000\u0000\u1afd\u1af5\u0001\u0000\u0000\u0000\u1afd\u1af8"+
		"\u0001\u0000\u0000\u0000\u1afd\u1afa\u0001\u0000\u0000\u0000\u1afe\u03a9"+
		"\u0001\u0000\u0000\u0000\u1aff\u1b0b\u00053\u0000\u0000\u1b00\u1b0b\u0005"+
		"\u0151\u0000\u0000\u1b01\u1b0b\u0005\u010a\u0000\u0000\u1b02\u1b03\u0005"+
		"\u0153\u0000\u0000\u1b03\u1b0b\u0005\u0154\u0000\u0000\u1b04\u1b05\u0005"+
		"J\u0000\u0000\u1b05\u1b0b\u0005\u0155\u0000\u0000\u1b06\u1b07\u00053\u0000"+
		"\u0000\u1b07\u1b08\u0005s\u0000\u0000\u1b08\u1b09\u0005\u0182\u0000\u0000"+
		"\u1b09\u1b0b\u0005\u0150\u0000\u0000\u1b0a\u1aff\u0001\u0000\u0000\u0000"+
		"\u1b0a\u1b00\u0001\u0000\u0000\u0000\u1b0a\u1b01\u0001\u0000\u0000\u0000"+
		"\u1b0a\u1b02\u0001\u0000\u0000\u0000\u1b0a\u1b04\u0001\u0000\u0000\u0000"+
		"\u1b0a\u1b06\u0001\u0000\u0000\u0000\u1b0b\u03ab\u0001\u0000\u0000\u0000"+
		"\u1b0c\u1b12\u0003\u03ae\u01d7\u0000\u1b0d\u1b12\u0003\u03b0\u01d8\u0000"+
		"\u1b0e\u1b12\u0003\u03b2\u01d9\u0000\u1b0f\u1b12\u0003\u03b4\u01da\u0000"+
		"\u1b10\u1b12\u0003\u03b6\u01db\u0000\u1b11\u1b0c\u0001\u0000\u0000\u0000"+
		"\u1b11\u1b0d\u0001\u0000\u0000\u0000\u1b11\u1b0e\u0001\u0000\u0000\u0000"+
		"\u1b11\u1b0f\u0001\u0000\u0000\u0000\u1b11\u1b10\u0001\u0000\u0000\u0000"+
		"\u1b12\u03ad\u0001\u0000\u0000\u0000\u1b13\u1b1e\u0005\u0151\u0000\u0000"+
		"\u1b14\u1b15\u0005\u0153\u0000\u0000\u1b15\u1b1e\u0005\u0154\u0000\u0000"+
		"\u1b16\u1b1e\u00053\u0000\u0000\u1b17\u1b1e\u0005\u010a\u0000\u0000\u1b18"+
		"\u1b19\u0005J\u0000\u0000\u1b19\u1b1e\u0005\u0155\u0000\u0000\u1b1a\u1b1b"+
		"\u00053\u0000\u0000\u1b1b\u1b1c\u0005s\u0000\u0000\u1b1c\u1b1e\u0005\u017a"+
		"\u0000\u0000\u1b1d\u1b13\u0001\u0000\u0000\u0000\u1b1d\u1b14\u0001\u0000"+
		"\u0000\u0000\u1b1d\u1b16\u0001\u0000\u0000\u0000\u1b1d\u1b17\u0001\u0000"+
		"\u0000\u0000\u1b1d\u1b18\u0001\u0000\u0000\u0000\u1b1d\u1b1a\u0001\u0000"+
		"\u0000\u0000\u1b1e\u03af\u0001\u0000\u0000\u0000\u1b1f\u1b2b\u0005\u0151"+
		"\u0000\u0000\u1b20\u1b21\u0005\u0153\u0000\u0000\u1b21\u1b2b\u0005\u0154"+
		"\u0000\u0000\u1b22\u1b2b\u00053\u0000\u0000\u1b23\u1b2b\u0005\u010a\u0000"+
		"\u0000\u1b24\u1b25\u0005J\u0000\u0000\u1b25\u1b2b\u0005\u0155\u0000\u0000"+
		"\u1b26\u1b27\u00053\u0000\u0000\u1b27\u1b28\u0005s\u0000\u0000\u1b28\u1b29"+
		"\u0005\u0185\u0000\u0000\u1b29\u1b2b\u0005\u00b0\u0000\u0000\u1b2a\u1b1f"+
		"\u0001\u0000\u0000\u0000\u1b2a\u1b20\u0001\u0000\u0000\u0000\u1b2a\u1b22"+
		"\u0001\u0000\u0000\u0000\u1b2a\u1b23\u0001\u0000\u0000\u0000\u1b2a\u1b24"+
		"\u0001\u0000\u0000\u0000\u1b2a\u1b26\u0001\u0000\u0000\u0000\u1b2b\u03b1"+
		"\u0001\u0000\u0000\u0000\u1b2c\u1b38\u0005\u0151\u0000\u0000\u1b2d\u1b2e"+
		"\u0005\u0153\u0000\u0000\u1b2e\u1b38\u0005\u0154\u0000\u0000\u1b2f\u1b38"+
		"\u00053\u0000\u0000\u1b30\u1b31\u0005J\u0000\u0000\u1b31\u1b38\u0005\u0155"+
		"\u0000\u0000\u1b32\u1b33\u00053\u0000\u0000\u1b33\u1b34\u0005s\u0000\u0000"+
		"\u1b34\u1b35\u0005\u0186\u0000\u0000\u1b35\u1b36\u0005\u0178\u0000\u0000"+
		"\u1b36\u1b38\u0005\u0187\u0000\u0000\u1b37\u1b2c\u0001\u0000\u0000\u0000"+
		"\u1b37\u1b2d\u0001\u0000\u0000\u0000\u1b37\u1b2f\u0001\u0000\u0000\u0000"+
		"\u1b37\u1b30\u0001\u0000\u0000\u0000\u1b37\u1b32\u0001\u0000\u0000\u0000"+
		"\u1b38\u03b3\u0001\u0000\u0000\u0000\u1b39\u1b43\u0005\u0151\u0000\u0000"+
		"\u1b3a\u1b3b\u0005\u0153\u0000\u0000\u1b3b\u1b43\u0005\u0154\u0000\u0000"+
		"\u1b3c\u1b43\u00053\u0000\u0000\u1b3d\u1b3e\u0005J\u0000\u0000\u1b3e\u1b43"+
		"\u0005\u0155\u0000\u0000\u1b3f\u1b40\u00053\u0000\u0000\u1b40\u1b41\u0005"+
		"s\u0000\u0000\u1b41\u1b43\u0005\u0188\u0000\u0000\u1b42\u1b39\u0001\u0000"+
		"\u0000\u0000\u1b42\u1b3a\u0001\u0000\u0000\u0000\u1b42\u1b3c\u0001\u0000"+
		"\u0000\u0000\u1b42\u1b3d\u0001\u0000\u0000\u0000\u1b42\u1b3f\u0001\u0000"+
		"\u0000\u0000\u1b43\u03b5\u0001\u0000\u0000\u0000\u1b44\u1b4f\u0005\u0151"+
		"\u0000\u0000\u1b45\u1b46\u0005\u0153\u0000\u0000\u1b46\u1b4f\u0005\u0154"+
		"\u0000\u0000\u1b47\u1b4f\u0005\u02b2\u0000\u0000\u1b48\u1b4f\u00053\u0000"+
		"\u0000\u1b49\u1b4a\u0005J\u0000\u0000\u1b4a\u1b4f\u0005\u0155\u0000\u0000"+
		"\u1b4b\u1b4c\u00053\u0000\u0000\u1b4c\u1b4d\u0005s\u0000\u0000\u1b4d\u1b4f"+
		"\u0005\u0178\u0000\u0000\u1b4e\u1b44\u0001\u0000\u0000\u0000\u1b4e\u1b45"+
		"\u0001\u0000\u0000\u0000\u1b4e\u1b47\u0001\u0000\u0000\u0000\u1b4e\u1b48"+
		"\u0001\u0000\u0000\u0000\u1b4e\u1b49\u0001\u0000\u0000\u0000\u1b4e\u1b4b"+
		"\u0001\u0000\u0000\u0000\u1b4f\u03b7\u0001\u0000\u0000\u0000\u1b50\u1b61"+
		"\u00053\u0000\u0000\u1b51\u1b61\u0005\u014f\u0000\u0000\u1b52\u1b54\u0005"+
		"\u0151\u0000\u0000\u1b53\u1b55\u0005\u015a\u0000\u0000\u1b54\u1b53\u0001"+
		"\u0000\u0000\u0000\u1b54\u1b55\u0001\u0000\u0000\u0000\u1b55\u1b61\u0001"+
		"\u0000\u0000\u0000\u1b56\u1b57\u0005\u0153\u0000\u0000\u1b57\u1b61\u0005"+
		"\u0154\u0000\u0000\u1b58\u1b5a\u0005J\u0000\u0000\u1b59\u1b5b\u0005s\u0000"+
		"\u0000\u1b5a\u1b59\u0001\u0000\u0000\u0000\u1b5a\u1b5b\u0001\u0000\u0000"+
		"\u0000\u1b5b\u1b5c\u0001\u0000\u0000\u0000\u1b5c\u1b61\u0005\u0155\u0000"+
		"\u0000\u1b5d\u1b5e\u00053\u0000\u0000\u1b5e\u1b5f\u0005s\u0000\u0000\u1b5f"+
		"\u1b61\u0005\u0164\u0000\u0000\u1b60\u1b50\u0001\u0000\u0000\u0000\u1b60"+
		"\u1b51\u0001\u0000\u0000\u0000\u1b60\u1b52\u0001\u0000\u0000\u0000\u1b60"+
		"\u1b56\u0001\u0000\u0000\u0000\u1b60\u1b58\u0001\u0000\u0000\u0000\u1b60"+
		"\u1b5d\u0001\u0000\u0000\u0000\u1b61\u03b9\u0001\u0000\u0000\u0000\u1b62"+
		"\u1b6d\u0005\u0151\u0000\u0000\u1b63\u1b64\u0005\u0153\u0000\u0000\u1b64"+
		"\u1b6d\u0005\u0154\u0000\u0000\u1b65\u1b6d\u00053\u0000\u0000\u1b66\u1b6d"+
		"\u0005\u010a\u0000\u0000\u1b67\u1b68\u0005J\u0000\u0000\u1b68\u1b6d\u0005"+
		"\u0155\u0000\u0000\u1b69\u1b6a\u00053\u0000\u0000\u1b6a\u1b6b\u0005s\u0000"+
		"\u0000\u1b6b\u1b6d\u0005\u0179\u0000\u0000\u1b6c\u1b62\u0001\u0000\u0000"+
		"\u0000\u1b6c\u1b63\u0001\u0000\u0000\u0000\u1b6c\u1b65\u0001\u0000\u0000"+
		"\u0000\u1b6c\u1b66\u0001\u0000\u0000\u0000\u1b6c\u1b67\u0001\u0000\u0000"+
		"\u0000\u1b6c\u1b69\u0001\u0000\u0000\u0000\u1b6d\u03bb\u0001\u0000\u0000"+
		"\u0000\u1b6e\u1b7a\u00053\u0000\u0000\u1b6f\u1b7a\u0005\u0151\u0000\u0000"+
		"\u1b70\u1b7a\u0005\u010a\u0000\u0000\u1b71\u1b72\u0005\u0153\u0000\u0000"+
		"\u1b72\u1b7a\u0005\u0154\u0000\u0000\u1b73\u1b74\u0005J\u0000\u0000\u1b74"+
		"\u1b7a\u0005\u0155\u0000\u0000\u1b75\u1b76\u00053\u0000\u0000\u1b76\u1b77"+
		"\u0005s\u0000\u0000\u1b77\u1b78\u0005\u0158\u0000\u0000\u1b78\u1b7a\u0005"+
		"C\u0000\u0000\u1b79\u1b6e\u0001\u0000\u0000\u0000\u1b79\u1b6f\u0001\u0000"+
		"\u0000\u0000\u1b79\u1b70\u0001\u0000\u0000\u0000\u1b79\u1b71\u0001\u0000"+
		"\u0000\u0000\u1b79\u1b73\u0001\u0000\u0000\u0000\u1b79\u1b75\u0001\u0000"+
		"\u0000\u0000\u1b7a\u03bd\u0001\u0000\u0000\u0000\u1b7b\u1b87\u0005\u0151"+
		"\u0000\u0000\u1b7c\u1b7d\u0005\u0153\u0000\u0000\u1b7d\u1b87\u0005\u0154"+
		"\u0000\u0000\u1b7e\u1b87\u00053\u0000\u0000\u1b7f\u1b87\u0005\u010a\u0000"+
		"\u0000\u1b80\u1b81\u0005J\u0000\u0000\u1b81\u1b87\u0005\u0155\u0000\u0000"+
		"\u1b82\u1b83\u00053\u0000\u0000\u1b83\u1b84\u0005s\u0000\u0000\u1b84\u1b85"+
		"\u0005\u0159\u0000\u0000\u1b85\u1b87\u0005C\u0000\u0000\u1b86\u1b7b\u0001"+
		"\u0000\u0000\u0000\u1b86\u1b7c\u0001\u0000\u0000\u0000\u1b86\u1b7e\u0001"+
		"\u0000\u0000\u0000\u1b86\u1b7f\u0001\u0000\u0000\u0000\u1b86\u1b80\u0001"+
		"\u0000\u0000\u0000\u1b86\u1b82\u0001\u0000\u0000\u0000\u1b87\u03bf\u0001"+
		"\u0000\u0000\u0000\u1b88\u1b93\u0005\u0151\u0000\u0000\u1b89\u1b8a\u0005"+
		"\u0153\u0000\u0000\u1b8a\u1b93\u0005\u0154\u0000\u0000\u1b8b\u1b93\u0005"+
		"3\u0000\u0000\u1b8c\u1b93\u0005\u010a\u0000\u0000\u1b8d\u1b8e\u0005J\u0000"+
		"\u0000\u1b8e\u1b93\u0005\u0155\u0000\u0000\u1b8f\u1b90\u00053\u0000\u0000"+
		"\u1b90\u1b91\u0005s\u0000\u0000\u1b91\u1b93\u0005\u0157\u0000\u0000\u1b92"+
		"\u1b88\u0001\u0000\u0000\u0000\u1b92\u1b89\u0001\u0000\u0000\u0000\u1b92"+
		"\u1b8b\u0001\u0000\u0000\u0000\u1b92\u1b8c\u0001\u0000\u0000\u0000\u1b92"+
		"\u1b8d\u0001\u0000\u0000\u0000\u1b92\u1b8f\u0001\u0000\u0000\u0000\u1b93"+
		"\u03c1\u0001\u0000\u0000\u0000\u1b94\u1ba6\u00053\u0000\u0000\u1b95\u1ba6"+
		"\u0005\u014f\u0000\u0000";
	private static final String _serializedATNSegment3 =
		"\u1b96\u1b98\u0005\u0151\u0000\u0000\u1b97\u1b99\u0005\u015a\u0000\u0000"+
		"\u1b98\u1b97\u0001\u0000\u0000\u0000\u1b98\u1b99\u0001\u0000\u0000\u0000"+
		"\u1b99\u1ba6\u0001\u0000\u0000\u0000\u1b9a\u1b9b\u0005\u0153\u0000\u0000"+
		"\u1b9b\u1ba6\u0005\u0154\u0000\u0000\u1b9c\u1b9e\u0005J\u0000\u0000\u1b9d"+
		"\u1b9f\u0005s\u0000\u0000\u1b9e\u1b9d\u0001\u0000\u0000\u0000\u1b9e\u1b9f"+
		"\u0001\u0000\u0000\u0000\u1b9f\u1ba0\u0001\u0000\u0000\u0000\u1ba0\u1ba6"+
		"\u0005\u0155\u0000\u0000\u1ba1\u1ba2\u00053\u0000\u0000\u1ba2\u1ba3\u0005"+
		"s\u0000\u0000\u1ba3\u1ba4\u0005\u0162\u0000\u0000\u1ba4\u1ba6\u0005v\u0000"+
		"\u0000\u1ba5\u1b94\u0001\u0000\u0000\u0000\u1ba5\u1b95\u0001\u0000\u0000"+
		"\u0000\u1ba5\u1b96\u0001\u0000\u0000\u0000\u1ba5\u1b9a\u0001\u0000\u0000"+
		"\u0000\u1ba5\u1b9c\u0001\u0000\u0000\u0000\u1ba5\u1ba1\u0001\u0000\u0000"+
		"\u0000\u1ba6\u03c3\u0001\u0000\u0000\u0000\u1ba7\u1baa\u0003\u03c6\u01e3"+
		"\u0000\u1ba8\u1baa\u0003\u03c8\u01e4\u0000\u1ba9\u1ba7\u0001\u0000\u0000"+
		"\u0000\u1ba9\u1ba8\u0001\u0000\u0000\u0000\u1baa\u03c5\u0001\u0000\u0000"+
		"\u0000\u1bab\u1bb7\u0005\u0151\u0000\u0000\u1bac\u1bad\u0005\u0153\u0000"+
		"\u0000\u1bad\u1bb7\u0005\u0154\u0000\u0000\u1bae\u1bb7\u00053\u0000\u0000"+
		"\u1baf\u1bb7\u0005\u010a\u0000\u0000\u1bb0\u1bb1\u0005J\u0000\u0000\u1bb1"+
		"\u1bb7\u0005\u0155\u0000\u0000\u1bb2\u1bb3\u00053\u0000\u0000\u1bb3\u1bb4"+
		"\u0005s\u0000\u0000\u1bb4\u1bb5\u0005\u0182\u0000\u0000\u1bb5\u1bb7\u0005"+
		"\u0150\u0000\u0000\u1bb6\u1bab\u0001\u0000\u0000\u0000\u1bb6\u1bac\u0001"+
		"\u0000\u0000\u0000\u1bb6\u1bae\u0001\u0000\u0000\u0000\u1bb6\u1baf\u0001"+
		"\u0000\u0000\u0000\u1bb6\u1bb0\u0001\u0000\u0000\u0000\u1bb6\u1bb2\u0001"+
		"\u0000\u0000\u0000\u1bb7\u03c7\u0001\u0000\u0000\u0000\u1bb8\u1bc4\u0005"+
		"3\u0000\u0000\u1bb9\u1bc4\u0005\u0151\u0000\u0000\u1bba\u1bc4\u0005\u010a"+
		"\u0000\u0000\u1bbb\u1bbc\u0005\u0153\u0000\u0000\u1bbc\u1bc4\u0005\u0154"+
		"\u0000\u0000\u1bbd\u1bbe\u0005J\u0000\u0000\u1bbe\u1bc4\u0005\u0155\u0000"+
		"\u0000\u1bbf\u1bc0\u00053\u0000\u0000\u1bc0\u1bc1\u0005s\u0000\u0000\u1bc1"+
		"\u1bc2\u0005\u0182\u0000\u0000\u1bc2\u1bc4\u0005\u0150\u0000\u0000\u1bc3"+
		"\u1bb8\u0001\u0000\u0000\u0000\u1bc3\u1bb9\u0001\u0000\u0000\u0000\u1bc3"+
		"\u1bba\u0001\u0000\u0000\u0000\u1bc3\u1bbb\u0001\u0000\u0000\u0000\u1bc3"+
		"\u1bbd\u0001\u0000\u0000\u0000\u1bc3\u1bbf\u0001\u0000\u0000\u0000\u1bc4"+
		"\u03c9\u0001\u0000\u0000\u0000\u1bc5\u1bcd\u0005\u0151\u0000\u0000\u1bc6"+
		"\u1bcd\u0005\u014c\u0000\u0000\u1bc7\u1bcd\u0005\u010a\u0000\u0000\u1bc8"+
		"\u1bc9\u0005\u0153\u0000\u0000\u1bc9\u1bcd\u0005\u0154\u0000\u0000\u1bca"+
		"\u1bcb\u0005J\u0000\u0000\u1bcb\u1bcd\u0005\u0155\u0000\u0000\u1bcc\u1bc5"+
		"\u0001\u0000\u0000\u0000\u1bcc\u1bc6\u0001\u0000\u0000\u0000\u1bcc\u1bc7"+
		"\u0001\u0000\u0000\u0000\u1bcc\u1bc8\u0001\u0000\u0000\u0000\u1bcc\u1bca"+
		"\u0001\u0000\u0000\u0000\u1bcd\u03cb\u0001\u0000\u0000\u0000\u1bce\u1bd7"+
		"\u00053\u0000\u0000\u1bcf\u1bd7\u0005\u0151\u0000\u0000\u1bd0\u1bd7\u0005"+
		"\u014c\u0000\u0000\u1bd1\u1bd7\u0005\u010a\u0000\u0000\u1bd2\u1bd3\u0005"+
		"\u0153\u0000\u0000\u1bd3\u1bd7\u0005\u0154\u0000\u0000\u1bd4\u1bd5\u0005"+
		"J\u0000\u0000\u1bd5\u1bd7\u0005\u0155\u0000\u0000\u1bd6\u1bce\u0001\u0000"+
		"\u0000\u0000\u1bd6\u1bcf\u0001\u0000\u0000\u0000\u1bd6\u1bd0\u0001\u0000"+
		"\u0000\u0000\u1bd6\u1bd1\u0001\u0000\u0000\u0000\u1bd6\u1bd2\u0001\u0000"+
		"\u0000\u0000\u1bd6\u1bd4\u0001\u0000\u0000\u0000\u1bd7\u03cd\u0001\u0000"+
		"\u0000\u0000\u1bd8\u1bd9\u0007c\u0000\u0000\u1bd9\u03cf\u0001\u0000\u0000"+
		"\u0000\u1bda\u1bdb\u0005\u02dd\u0000\u0000\u1bdb\u1bdc\u0005\u000e\u0000"+
		"\u0000\u1bdc\u1bdd\u0005\u000e\u0000\u0000\u1bdd\u03d1\u0001\u0000\u0000"+
		"\u0000\u1bde\u1c07\u0005\u0157\u0000\u0000\u1bdf\u1be0\u0005\u0159\u0000"+
		"\u0000\u1be0\u1c07\u0005C\u0000\u0000\u1be1\u1be2\u0005\u0162\u0000\u0000"+
		"\u1be2\u1c07\u0005v\u0000\u0000\u1be3\u1c07\u0005\u0179\u0000\u0000\u1be4"+
		"\u1c07\u0005\u010b\u0000\u0000\u1be5\u1c07\u0005\u010c\u0000\u0000\u1be6"+
		"\u1be7\u0005\u0156\u0000\u0000\u1be7\u1c07\u0005\u010c\u0000\u0000\u1be8"+
		"\u1be9\u0005\u00cc\u0000\u0000\u1be9\u1bea\u0005\u0175\u0000\u0000\u1bea"+
		"\u1c07\u0005\u0163\u0000\u0000\u1beb\u1c07\u0005\u0164\u0000\u0000\u1bec"+
		"\u1bed\u0005\u0182\u0000\u0000\u1bed\u1c07\u0007d\u0000\u0000\u1bee\u1c07"+
		"\u0005\u0136\u0000\u0000\u1bef\u1c07\u00056\u0000\u0000\u1bf0\u1bf1\u0005"+
		"\u02af\u0000\u0000\u1bf1\u1bf2\u0005\u02b0\u0000\u0000\u1bf2\u1c07\u0005"+
		"\u02b1\u0000\u0000\u1bf3\u1c07\u0005\u0130\u0000\u0000\u1bf4\u1bf5\u0005"+
		"\u015a\u0000\u0000\u1bf5\u1c07\u0005\u010c\u0000\u0000\u1bf6\u1c07\u0005"+
		"\u017a\u0000\u0000\u1bf7\u1bf8\u0005\u0185\u0000\u0000\u1bf8\u1c07\u0005"+
		"\u00b0\u0000\u0000\u1bf9\u1bfa\u0005\u0186\u0000\u0000\u1bfa\u1bfb\u0005"+
		"\u0178\u0000\u0000\u1bfb\u1c07\u0005\u0187\u0000\u0000\u1bfc\u1c07\u0005"+
		"\u0188\u0000\u0000\u1bfd\u1c07\u0005\u0178\u0000\u0000\u1bfe\u1bff\u0005"+
		"\u0158\u0000\u0000\u1bff\u1c07\u0005C\u0000\u0000\u1c00\u1c07\u0005.\u0000"+
		"\u0000\u1c01\u1c07\u0005\u014c\u0000\u0000\u1c02\u1c07\u0005\u00b0\u0000"+
		"\u0000\u1c03\u1c04\u0005\u016a\u0000\u0000\u1c04\u1c05\u00056\u0000\u0000"+
		"\u1c05\u1c07\u0005\u018f\u0000\u0000\u1c06\u1bde\u0001\u0000\u0000\u0000"+
		"\u1c06\u1bdf\u0001\u0000\u0000\u0000\u1c06\u1be1\u0001\u0000\u0000\u0000"+
		"\u1c06\u1be3\u0001\u0000\u0000\u0000\u1c06\u1be4\u0001\u0000\u0000\u0000"+
		"\u1c06\u1be5\u0001\u0000\u0000\u0000\u1c06\u1be6\u0001\u0000\u0000\u0000"+
		"\u1c06\u1be8\u0001\u0000\u0000\u0000\u1c06\u1beb\u0001\u0000\u0000\u0000"+
		"\u1c06\u1bec\u0001\u0000\u0000\u0000\u1c06\u1bee\u0001\u0000\u0000\u0000"+
		"\u1c06\u1bef\u0001\u0000\u0000\u0000\u1c06\u1bf0\u0001\u0000\u0000\u0000"+
		"\u1c06\u1bf3\u0001\u0000\u0000\u0000\u1c06\u1bf4\u0001\u0000\u0000\u0000"+
		"\u1c06\u1bf6\u0001\u0000\u0000\u0000\u1c06\u1bf7\u0001\u0000\u0000\u0000"+
		"\u1c06\u1bf9\u0001\u0000\u0000\u0000\u1c06\u1bfc\u0001\u0000\u0000\u0000"+
		"\u1c06\u1bfd\u0001\u0000\u0000\u0000\u1c06\u1bfe\u0001\u0000\u0000\u0000"+
		"\u1c06\u1c00\u0001\u0000\u0000\u0000\u1c06\u1c01\u0001\u0000\u0000\u0000"+
		"\u1c06\u1c02\u0001\u0000\u0000\u0000\u1c06\u1c03\u0001\u0000\u0000\u0000"+
		"\u1c07\u03d3\u0001\u0000\u0000\u0000\u1c08\u1c09\u0007e\u0000\u0000\u1c09"+
		"\u03d5\u0001\u0000\u0000\u0000\u1c0a\u1c0b\u0003\u00f6{\u0000\u1c0b\u03d7"+
		"\u0001\u0000\u0000\u0000\u1c0c\u1c12\u0005\u02a5\u0000\u0000\u1c0d\u1c10"+
		"\u0003\u001c\u000e\u0000\u1c0e\u1c0f\u0005M\u0000\u0000\u1c0f\u1c11\u0005"+
		"\u02a6\u0000\u0000\u1c10\u1c0e\u0001\u0000\u0000\u0000\u1c10\u1c11\u0001"+
		"\u0000\u0000\u0000\u1c11\u1c13\u0001\u0000\u0000\u0000\u1c12\u1c0d\u0001"+
		"\u0000\u0000\u0000\u1c12\u1c13\u0001\u0000\u0000\u0000\u1c13\u03d9\u0001"+
		"\u0000\u0000\u0000\u1c14\u1c15\u00052\u0000\u0000\u1c15\u1c1e\u0005\u010b"+
		"\u0000\u0000\u1c16\u1c1f\u0003\u03dc\u01ee\u0000\u1c17\u1c1f\u0003\u03de"+
		"\u01ef\u0000\u1c18\u1c1f\u0003\u03e0\u01f0\u0000\u1c19\u1c1f\u0003\u03e2"+
		"\u01f1\u0000\u1c1a\u1c1f\u0003\u03e8\u01f4\u0000\u1c1b\u1c1f\u0003\u03ea"+
		"\u01f5\u0000\u1c1c\u1c1f\u0003\u03ec\u01f6\u0000\u1c1d\u1c1f\u0003\u03f2"+
		"\u01f9\u0000\u1c1e\u1c16\u0001\u0000\u0000\u0000\u1c1e\u1c17\u0001\u0000"+
		"\u0000\u0000\u1c1e\u1c18\u0001\u0000\u0000\u0000\u1c1e\u1c19\u0001\u0000"+
		"\u0000\u0000\u1c1e\u1c1a\u0001\u0000\u0000\u0000\u1c1e\u1c1b\u0001\u0000"+
		"\u0000\u0000\u1c1e\u1c1c\u0001\u0000\u0000\u0000\u1c1e\u1c1d\u0001\u0000"+
		"\u0000\u0000\u1c1e\u1c1f\u0001\u0000\u0000\u0000\u1c1f\u03db\u0001\u0000"+
		"\u0000\u0000\u1c20\u1c24\u0003\u03f2\u01f9\u0000\u1c21\u1c22\u0007f\u0000"+
		"\u0000\u1c22\u1c23\u0005\u0130\u0000\u0000\u1c23\u1c25\u0003*\u0015\u0000"+
		"\u1c24\u1c21\u0001\u0000\u0000\u0000\u1c24\u1c25\u0001\u0000\u0000\u0000"+
		"\u1c25\u1c2f\u0001\u0000\u0000\u0000\u1c26\u1c27\u0005M\u0000\u0000\u1c27"+
		"\u1c2c\u0003\u03e6\u01f3\u0000\u1c28\u1c29\u0005%\u0000\u0000\u1c29\u1c2b"+
		"\u0003\u03e6\u01f3\u0000\u1c2a\u1c28\u0001\u0000\u0000\u0000\u1c2b\u1c2e"+
		"\u0001\u0000\u0000\u0000\u1c2c\u1c2a\u0001\u0000\u0000\u0000\u1c2c\u1c2d"+
		"\u0001\u0000\u0000\u0000\u1c2d\u1c30\u0001\u0000\u0000\u0000\u1c2e\u1c2c"+
		"\u0001\u0000\u0000\u0000\u1c2f\u1c26\u0001\u0000\u0000\u0000\u1c2f\u1c30"+
		"\u0001\u0000\u0000\u0000\u1c30\u03dd\u0001\u0000\u0000\u0000\u1c31\u1c3b"+
		"\u0003\u03ee\u01f7\u0000\u1c32\u1c33\u0005M\u0000\u0000\u1c33\u1c38\u0003"+
		"\u03e4\u01f2\u0000\u1c34\u1c35\u0005%\u0000\u0000\u1c35\u1c37\u0003\u03e4"+
		"\u01f2\u0000\u1c36\u1c34\u0001\u0000\u0000\u0000\u1c37\u1c3a\u0001\u0000"+
		"\u0000\u0000\u1c38\u1c36\u0001\u0000\u0000\u0000\u1c38\u1c39\u0001\u0000"+
		"\u0000\u0000\u1c39\u1c3c\u0001\u0000\u0000\u0000\u1c3a\u1c38\u0001\u0000"+
		"\u0000\u0000\u1c3b\u1c32\u0001\u0000\u0000\u0000\u1c3b\u1c3c\u0001\u0000"+
		"\u0000\u0000\u1c3c\u1c53\u0001\u0000\u0000\u0000\u1c3d\u1c3e\u0003\u03f2"+
		"\u01f9\u0000\u1c3e\u1c3f\u0005M\u0000\u0000\u1c3f\u1c40\u0005\u00d5\u0000"+
		"\u0000\u1c40\u1c41\u0005\u0018\u0000\u0000\u1c41\u1c4b\u0003\u001c\u000e"+
		"\u0000\u1c42\u1c43\u0005%\u0000\u0000\u1c43\u1c48\u0003\u03e4\u01f2\u0000"+
		"\u1c44\u1c45\u0005%\u0000\u0000\u1c45\u1c47\u0003\u03e4\u01f2\u0000\u1c46"+
		"\u1c44\u0001\u0000\u0000\u0000\u1c47\u1c4a\u0001\u0000\u0000\u0000\u1c48"+
		"\u1c46\u0001\u0000\u0000\u0000\u1c48\u1c49\u0001\u0000\u0000\u0000\u1c49"+
		"\u1c4c\u0001\u0000\u0000\u0000\u1c4a\u1c48\u0001\u0000\u0000\u0000\u1c4b"+
		"\u1c42\u0001\u0000\u0000\u0000\u1c4b\u1c4c\u0001\u0000\u0000\u0000\u1c4c"+
		"\u1c53\u0001\u0000\u0000\u0000\u1c4d\u1c4e\u0003\u03f0\u01f8\u0000\u1c4e"+
		"\u1c4f\u0005U\u0000\u0000\u1c4f\u1c50\u0005\u016e\u0000\u0000\u1c50\u1c51"+
		"\u0005\u02aa\u0000\u0000\u1c51\u1c53\u0001\u0000\u0000\u0000\u1c52\u1c31"+
		"\u0001\u0000\u0000\u0000\u1c52\u1c3d\u0001\u0000\u0000\u0000\u1c52\u1c4d"+
		"\u0001\u0000\u0000\u0000\u1c53\u03df\u0001\u0000\u0000\u0000\u1c54\u1c58"+
		"\u0003\u03ee\u01f7\u0000\u1c55\u1c56\u0007f\u0000\u0000\u1c56\u1c57\u0005"+
		"\u0130\u0000\u0000\u1c57\u1c59\u0003\u03ee\u01f7\u0000\u1c58\u1c55\u0001"+
		"\u0000\u0000\u0000\u1c58\u1c59\u0001\u0000\u0000\u0000\u1c59\u1c60\u0001"+
		"\u0000\u0000\u0000\u1c5a\u1c5b\u0003\u03f2\u01f9\u0000\u1c5b\u1c5c\u0007"+
		"f\u0000\u0000\u1c5c\u1c5d\u0005\u0130\u0000\u0000\u1c5d\u1c5e\u0003\u03ee"+
		"\u01f7\u0000\u1c5e\u1c60\u0001\u0000\u0000\u0000\u1c5f\u1c54\u0001\u0000"+
		"\u0000\u0000\u1c5f\u1c5a\u0001\u0000\u0000\u0000\u1c60\u1c6a\u0001\u0000"+
		"\u0000\u0000\u1c61\u1c62\u0005M\u0000\u0000\u1c62\u1c67\u0003\u03e6\u01f3"+
		"\u0000\u1c63\u1c64\u0005%\u0000\u0000\u1c64\u1c66\u0003\u03e6\u01f3\u0000"+
		"\u1c65\u1c63\u0001\u0000\u0000\u0000\u1c66\u1c69\u0001\u0000\u0000\u0000"+
		"\u1c67\u1c65\u0001\u0000\u0000\u0000\u1c67\u1c68\u0001\u0000\u0000\u0000"+
		"\u1c68\u1c6b\u0001\u0000\u0000\u0000\u1c69\u1c67\u0001\u0000\u0000\u0000"+
		"\u1c6a\u1c61\u0001\u0000\u0000\u0000\u1c6a\u1c6b\u0001\u0000\u0000\u0000"+
		"\u1c6b\u03e1\u0001\u0000\u0000\u0000\u1c6c\u1c81\u0003\u03f2\u01f9\u0000"+
		"\u1c6d\u1c6e\u0005\u00d6\u0000\u0000\u1c6e\u1c78\u0005\u0130\u0000\u0000"+
		"\u1c6f\u1c70\u0005M\u0000\u0000\u1c70\u1c75\u0003\u03e6\u01f3\u0000\u1c71"+
		"\u1c72\u0005%\u0000\u0000\u1c72\u1c74\u0003\u03e6\u01f3\u0000\u1c73\u1c71"+
		"\u0001\u0000\u0000\u0000\u1c74\u1c77\u0001\u0000\u0000\u0000\u1c75\u1c73"+
		"\u0001\u0000\u0000\u0000\u1c75\u1c76\u0001\u0000\u0000\u0000\u1c76\u1c79"+
		"\u0001\u0000\u0000\u0000\u1c77\u1c75\u0001\u0000\u0000\u0000\u1c78\u1c6f"+
		"\u0001\u0000\u0000\u0000\u1c78\u1c79\u0001\u0000\u0000\u0000\u1c79\u1c82"+
		"\u0001\u0000\u0000\u0000\u1c7a\u1c7b\u0007f\u0000\u0000\u1c7b\u1c7c\u0005"+
		"\u0179\u0000\u0000\u1c7c\u1c82\u0003*\u0015\u0000\u1c7d\u1c7e\u0007f\u0000"+
		"\u0000\u1c7e\u1c7f\u0005\u0159\u0000\u0000\u1c7f\u1c80\u0005C\u0000\u0000"+
		"\u1c80\u1c82\u0003*\u0015\u0000\u1c81\u1c6d\u0001\u0000\u0000\u0000\u1c81"+
		"\u1c7a\u0001\u0000\u0000\u0000\u1c81\u1c7d\u0001\u0000\u0000\u0000\u1c82"+
		"\u03e3\u0001\u0000\u0000\u0000\u1c83\u1c84\u0005\u02a7\u0000\u0000\u1c84"+
		"\u1c85\u0005\u0018\u0000\u0000\u1c85\u1c95\u00034\u001a\u0000\u1c86\u1c87"+
		"\u0005\u0297\u0000\u0000\u1c87\u1c8a\u0005\u0018\u0000\u0000\u1c88\u1c8b"+
		"\u0005\u0135\u0000\u0000\u1c89\u1c8b\u0003*\u0015\u0000\u1c8a\u1c88\u0001"+
		"\u0000\u0000\u0000\u1c8a\u1c89\u0001\u0000\u0000\u0000\u1c8b\u1c95\u0001"+
		"\u0000\u0000\u0000\u1c8c\u1c8d\u0005\u02ab\u0000\u0000\u1c8d\u1c8e\u0005"+
		"\u0018\u0000\u0000\u1c8e\u1c95\u0003\u040c\u0206\u0000\u1c8f\u1c90\u0005"+
		"\u02a8\u0000\u0000\u1c90\u1c92\u0005\u0018\u0000\u0000\u1c91\u1c93\u0007"+
		"\u0000\u0000\u0000\u1c92\u1c91\u0001\u0000\u0000\u0000\u1c92\u1c93\u0001"+
		"\u0000\u0000\u0000\u1c93\u1c95\u0001\u0000\u0000\u0000\u1c94\u1c83\u0001"+
		"\u0000\u0000\u0000\u1c94\u1c86\u0001\u0000\u0000\u0000\u1c94\u1c8c\u0001"+
		"\u0000\u0000\u0000\u1c94\u1c8f\u0001\u0000\u0000\u0000\u1c95\u03e5\u0001"+
		"\u0000\u0000\u0000\u1c96\u1c97\u0005\u02a7\u0000\u0000\u1c97\u1c98\u0005"+
		"\u0018\u0000\u0000\u1c98\u1ca5\u00034\u001a\u0000\u1c99\u1c9a\u0005\u0297"+
		"\u0000\u0000\u1c9a\u1c9d\u0005\u0018\u0000\u0000\u1c9b\u1c9e\u0005\u0135"+
		"\u0000\u0000\u1c9c\u1c9e\u0003*\u0015\u0000\u1c9d\u1c9b\u0001\u0000\u0000"+
		"\u0000\u1c9d\u1c9c\u0001\u0000\u0000\u0000\u1c9e\u1ca5\u0001\u0000\u0000"+
		"\u0000\u1c9f\u1ca0\u0005\u02a8\u0000\u0000\u1ca0\u1ca2\u0005\u0018\u0000"+
		"\u0000\u1ca1\u1ca3\u0007\u0000\u0000\u0000\u1ca2\u1ca1\u0001\u0000\u0000"+
		"\u0000\u1ca2\u1ca3\u0001\u0000\u0000\u0000\u1ca3\u1ca5\u0001\u0000\u0000"+
		"\u0000\u1ca4\u1c96\u0001\u0000\u0000\u0000\u1ca4\u1c99\u0001\u0000\u0000"+
		"\u0000\u1ca4\u1c9f\u0001\u0000\u0000\u0000\u1ca5\u03e7\u0001\u0000\u0000"+
		"\u0000\u1ca6\u1caa\u0003\u03f2\u01f9\u0000\u1ca7\u1ca8\u0007f\u0000\u0000"+
		"\u1ca8\u1ca9\u0005\u0130\u0000\u0000\u1ca9\u1cab\u0003*\u0015\u0000\u1caa"+
		"\u1ca7\u0001\u0000\u0000\u0000\u1caa\u1cab\u0001\u0000\u0000\u0000\u1cab"+
		"\u1cbb\u0001\u0000\u0000\u0000\u1cac\u1cad\u0005U\u0000\u0000\u1cad\u1cae"+
		"\u0005\u016e\u0000\u0000\u1cae\u1cb8\u0005\u02aa\u0000\u0000\u1caf\u1cb0"+
		"\u0005M\u0000\u0000\u1cb0\u1cb5\u0003\u03e6\u01f3\u0000\u1cb1\u1cb2\u0005"+
		"%\u0000\u0000\u1cb2\u1cb4\u0003\u03e6\u01f3\u0000\u1cb3\u1cb1\u0001\u0000"+
		"\u0000\u0000\u1cb4\u1cb7\u0001\u0000\u0000\u0000\u1cb5\u1cb3\u0001\u0000"+
		"\u0000\u0000\u1cb5\u1cb6\u0001\u0000\u0000\u0000\u1cb6\u1cb9\u0001\u0000"+
		"\u0000\u0000\u1cb7\u1cb5\u0001\u0000\u0000\u0000\u1cb8\u1caf\u0001\u0000"+
		"\u0000\u0000\u1cb8\u1cb9\u0001\u0000\u0000\u0000\u1cb9\u1cbb\u0001\u0000"+
		"\u0000\u0000\u1cba\u1ca6\u0001\u0000\u0000\u0000\u1cba\u1cac\u0001\u0000"+
		"\u0000\u0000\u1cbb\u03e9\u0001\u0000\u0000\u0000\u1cbc\u1cc2\u0003\u03f2"+
		"\u01f9\u0000\u1cbd\u1cbe\u0007f\u0000\u0000\u1cbe\u1cbf\u0005\u0130\u0000"+
		"\u0000\u1cbf\u1cc3\u0003*\u0015\u0000\u1cc0\u1cc1\u0005\u00d6\u0000\u0000"+
		"\u1cc1\u1cc3\u0005\u0130\u0000\u0000\u1cc2\u1cbd\u0001\u0000\u0000\u0000"+
		"\u1cc2\u1cc0\u0001\u0000\u0000\u0000\u1cc2\u1cc3\u0001\u0000\u0000\u0000"+
		"\u1cc3\u1cc8\u0001\u0000\u0000\u0000\u1cc4\u1cc5\u0005M\u0000\u0000\u1cc5"+
		"\u1cc6\u0005\u02a7\u0000\u0000\u1cc6\u1cc7\u0005\u0018\u0000\u0000\u1cc7"+
		"\u1cc9\u00034\u001a\u0000\u1cc8\u1cc4\u0001\u0000\u0000\u0000\u1cc8\u1cc9"+
		"\u0001\u0000\u0000\u0000\u1cc9\u03eb\u0001\u0000\u0000\u0000\u1cca\u1ccb"+
		"\u0003\u03f0\u01f8\u0000\u1ccb\u1ccc\u0005U\u0000\u0000\u1ccc\u1ccd\u0005"+
		"\u016e\u0000\u0000\u1ccd\u1cd2\u0005\u02aa\u0000\u0000\u1cce\u1ccf\u0005"+
		"M\u0000\u0000\u1ccf\u1cd0\u0005\u02a7\u0000\u0000\u1cd0\u1cd1\u0005\u0018"+
		"\u0000\u0000\u1cd1\u1cd3\u00034\u001a\u0000\u1cd2\u1cce\u0001\u0000\u0000"+
		"\u0000\u1cd2\u1cd3\u0001\u0000\u0000\u0000\u1cd3\u03ed\u0001\u0000\u0000"+
		"\u0000\u1cd4\u1cd5\u0003\u03f2\u01f9\u0000\u1cd5\u03ef\u0001\u0000\u0000"+
		"\u0000\u1cd6\u1cd7\u0003\u03f2\u01f9\u0000\u1cd7\u03f1\u0001\u0000\u0000"+
		"\u0000\u1cd8\u1cd9\u0003\u03f4\u01fa\u0000\u1cd9\u03f3\u0001\u0000\u0000"+
		"\u0000\u1cda\u1cdd\u0003*\u0015\u0000\u1cdb\u1cdc\u0005\u0014\u0000\u0000"+
		"\u1cdc\u1cde\u0003*\u0015\u0000\u1cdd\u1cdb\u0001\u0000\u0000\u0000\u1cdd"+
		"\u1cde\u0001\u0000\u0000\u0000\u1cde\u03f5\u0001\u0000\u0000\u0000\u1cdf"+
		"\u1ce0\u00054\u0000\u0000\u1ce0\u1ce2\u0005\u010b\u0000\u0000\u1ce1\u1ce3"+
		"\u0003\u0108\u0084\u0000\u1ce2\u1ce1\u0001\u0000\u0000\u0000\u1ce2\u1ce3"+
		"\u0001\u0000\u0000\u0000\u1ce3\u1ce4\u0001\u0000\u0000\u0000\u1ce4\u1ce5"+
		"\u0003\u03f2\u01f9\u0000\u1ce5\u03f7\u0001\u0000\u0000\u0000\u1ce6\u1ce7"+
		"\u00053\u0000\u0000\u1ce7\u1ce8\u0005\u010b\u0000\u0000\u1ce8\u1cf5\u0003"+
		"\u03f2\u01f9\u0000\u1ce9\u1cea\u0005M\u0000\u0000\u1cea\u1cef\u0003\u03fa"+
		"\u01fd\u0000\u1ceb\u1cec\u0005%\u0000\u0000\u1cec\u1cee\u0003\u03fa\u01fd"+
		"\u0000\u1ced\u1ceb\u0001\u0000\u0000\u0000\u1cee\u1cf1\u0001\u0000\u0000"+
		"\u0000\u1cef\u1ced\u0001\u0000\u0000\u0000\u1cef\u1cf0\u0001\u0000\u0000"+
		"\u0000\u1cf0\u1cf6\u0001\u0000\u0000\u0000\u1cf1\u1cef\u0001\u0000\u0000"+
		"\u0000\u1cf2\u1cf3\u0005U\u0000\u0000\u1cf3\u1cf4\u0005\u016e\u0000\u0000"+
		"\u1cf4\u1cf6\u0005\u02aa\u0000\u0000\u1cf5\u1ce9\u0001\u0000\u0000\u0000"+
		"\u1cf5\u1cf2\u0001\u0000\u0000\u0000\u1cf6\u03f9\u0001\u0000\u0000\u0000"+
		"\u1cf7\u1cf8\u0005\u00aa\u0000\u0000\u1cf8\u1cf9\u0005\u0018\u0000\u0000"+
		"\u1cf9\u1d17\u0003\u03f2\u01f9\u0000\u1cfa\u1cfb\u0005\u02a7\u0000\u0000"+
		"\u1cfb\u1cfe\u0005\u0018\u0000\u0000\u1cfc\u1cff\u00034\u001a\u0000\u1cfd"+
		"\u1cff\u0005l\u0000\u0000\u1cfe\u1cfc\u0001\u0000\u0000\u0000\u1cfe\u1cfd"+
		"\u0001\u0000\u0000\u0000\u1cff\u1d17\u0001\u0000\u0000\u0000\u1d00\u1d01"+
		"\u0005\u0130\u0000\u0000\u1d01\u1d02\u0005\u0018\u0000\u0000\u1d02\u1d17"+
		"\u0003\u03f2\u01f9\u0000\u1d03\u1d04\u0005\u00d5\u0000\u0000\u1d04\u1d05"+
		"\u0005\u0018\u0000\u0000\u1d05\u1d09\u0003\u001c\u000e\u0000\u1d06\u1d07"+
		"\u0005\u02a9\u0000\u0000\u1d07\u1d08\u0005\u0018\u0000\u0000\u1d08\u1d0a"+
		"\u0003\u001c\u000e\u0000\u1d09\u1d06\u0001\u0000\u0000\u0000\u1d09\u1d0a"+
		"\u0001\u0000\u0000\u0000\u1d0a\u1d17\u0001\u0000\u0000\u0000\u1d0b\u1d0c"+
		"\u0005\u0297\u0000\u0000\u1d0c\u1d0f\u0005\u0018\u0000\u0000\u1d0d\u1d10"+
		"\u0005\u0135\u0000\u0000\u1d0e\u1d10\u0003*\u0015\u0000\u1d0f\u1d0d\u0001"+
		"\u0000\u0000\u0000\u1d0f\u1d0e\u0001\u0000\u0000\u0000\u1d10\u1d17\u0001"+
		"\u0000\u0000\u0000\u1d11\u1d12\u0005\u02a8\u0000\u0000\u1d12\u1d14\u0005"+
		"\u0018\u0000\u0000\u1d13\u1d15\u0007\u0000\u0000\u0000\u1d14\u1d13\u0001"+
		"\u0000\u0000\u0000\u1d14\u1d15\u0001\u0000\u0000\u0000\u1d15\u1d17\u0001"+
		"\u0000\u0000\u0000\u1d16\u1cf7\u0001\u0000\u0000\u0000\u1d16\u1cfa\u0001"+
		"\u0000\u0000\u0000\u1d16\u1d00\u0001\u0000\u0000\u0000\u1d16\u1d03\u0001"+
		"\u0000\u0000\u0000\u1d16\u1d0b\u0001\u0000\u0000\u0000\u1d16\u1d11\u0001"+
		"\u0000\u0000\u0000\u1d17\u03fb\u0001\u0000\u0000\u0000\u1d18\u1d19\u0005"+
		"2\u0000\u0000\u1d19\u1d1a\u0005\u010c\u0000\u0000\u1d1a\u1d1d\u0003N\'"+
		"\u0000\u1d1b\u1d1c\u0005\u02a0\u0000\u0000\u1d1c\u1d1e\u0003N\'\u0000"+
		"\u1d1d\u1d1b\u0001\u0000\u0000\u0000\u1d1d\u1d1e\u0001\u0000\u0000\u0000"+
		"\u1d1e\u03fd\u0001\u0000\u0000\u0000\u1d1f\u1d20\u00054\u0000\u0000\u1d20"+
		"\u1d22\u0005\u010c\u0000\u0000\u1d21\u1d23\u0003\u0108\u0084\u0000\u1d22"+
		"\u1d21\u0001\u0000\u0000\u0000\u1d22\u1d23\u0001\u0000\u0000\u0000\u1d23"+
		"\u1d24\u0001\u0000\u0000\u0000\u1d24\u1d25\u0003N\'\u0000\u1d25\u03ff"+
		"\u0001\u0000\u0000\u0000\u1d26\u1d27\u00053\u0000\u0000\u1d27\u1d28\u0005"+
		"\u010c\u0000\u0000\u1d28\u1d33\u0003N\'\u0000\u1d29\u1d2a\u00059\u0000"+
		"\u0000\u1d2a\u1d2b\u0005\u02b3\u0000\u0000\u1d2b\u1d34\u0003\u0384\u01c2"+
		"\u0000\u1d2c\u1d2d\u00054\u0000\u0000\u1d2d\u1d2e\u0005\u02b3\u0000\u0000"+
		"\u1d2e\u1d34\u0003\u0384\u01c2\u0000\u1d2f\u1d30\u0005M\u0000\u0000\u1d30"+
		"\u1d31\u0005\u00aa\u0000\u0000\u1d31\u1d32\u0005\u0018\u0000\u0000\u1d32"+
		"\u1d34\u0003N\'\u0000\u1d33\u1d29\u0001\u0000\u0000\u0000\u1d33\u1d2c"+
		"\u0001\u0000\u0000\u0000\u1d33\u1d2f\u0001\u0000\u0000\u0000\u1d34\u0401"+
		"\u0001\u0000\u0000\u0000\u1d35\u1d36\u00052\u0000\u0000\u1d36\u1d37\u0005"+
		"\u0130\u0000\u0000\u1d37\u1d3d\u0003\u03f4\u01fa\u0000\u1d38\u1d3e\u0003"+
		"\u0404\u0202\u0000\u1d39\u1d3e\u0003\u0412\u0209\u0000\u1d3a\u1d3e\u0003"+
		"\u0416\u020b\u0000\u1d3b\u1d3e\u0003\u041a\u020d\u0000\u1d3c\u1d3e\u0003"+
		"\u041e\u020f\u0000\u1d3d\u1d38\u0001\u0000\u0000\u0000\u1d3d\u1d39\u0001"+
		"\u0000\u0000\u0000\u1d3d\u1d3a\u0001\u0000\u0000\u0000\u1d3d\u1d3b\u0001"+
		"\u0000\u0000\u0000\u1d3d\u1d3c\u0001\u0000\u0000\u0000\u1d3e\u0403\u0001"+
		"\u0000\u0000\u0000\u1d3f\u1d40\u0005M\u0000\u0000\u1d40\u1d44\u0003\u0406"+
		"\u0203\u0000\u1d41\u1d42\u0005U\u0000\u0000\u1d42\u1d44\u0003\u040e\u0207"+
		"\u0000\u1d43\u1d3f\u0001\u0000\u0000\u0000\u1d43\u1d41\u0001\u0000\u0000"+
		"\u0000\u1d44\u0405\u0001\u0000\u0000\u0000\u1d45\u1d46\u0005\u00d5\u0000"+
		"\u0000\u1d46\u1d4b\u0005\u0018\u0000\u0000\u1d47\u1d4c\u0003\u001c\u000e"+
		"\u0000\u1d48\u1d49\u0003\u040a\u0205\u0000\u1d49\u1d4a\u0005\u02b4\u0000"+
		"\u0000\u1d4a\u1d4c\u0001\u0000\u0000\u0000\u1d4b\u1d47\u0001\u0000\u0000"+
		"\u0000\u1d4b\u1d48\u0001\u0000\u0000\u0000\u1d4c\u1d4e\u0001\u0000\u0000"+
		"\u0000\u1d4d\u1d4f\u0005\u02b5\u0000\u0000\u1d4e\u1d4d\u0001\u0000\u0000"+
		"\u0000\u1d4e\u1d4f\u0001\u0000\u0000\u0000\u1d4f\u1d59\u0001\u0000\u0000"+
		"\u0000\u1d50\u1d51\u0005%\u0000\u0000\u1d51\u1d56\u0003\u0408\u0204\u0000"+
		"\u1d52\u1d53\u0005%\u0000\u0000\u1d53\u1d55\u0003\u0408\u0204\u0000\u1d54"+
		"\u1d52\u0001\u0000\u0000\u0000\u1d55\u1d58\u0001\u0000\u0000\u0000\u1d56"+
		"\u1d54\u0001\u0000\u0000\u0000\u1d56\u1d57\u0001\u0000\u0000\u0000\u1d57"+
		"\u1d5a\u0001\u0000\u0000\u0000\u1d58\u1d56\u0001\u0000\u0000\u0000\u1d59"+
		"\u1d50\u0001\u0000\u0000\u0000\u1d59\u1d5a\u0001\u0000\u0000\u0000\u1d5a"+
		"\u0407\u0001\u0000\u0000\u0000\u1d5b\u1d5c\u0005\u02ab\u0000\u0000\u1d5c"+
		"\u1d5d\u0005\u0018\u0000\u0000\u1d5d\u1d6e\u0003\u040c\u0206\u0000\u1d5e"+
		"\u1d5f\u0005\u02b6\u0000\u0000\u1d5f\u1d60\u0005\u0018\u0000\u0000\u1d60"+
		"\u1d6e\u00032\u0019\u0000\u1d61\u1d62\u0005\u0297\u0000\u0000\u1d62\u1d63"+
		"\u0005\u0018\u0000\u0000\u1d63\u1d6e\u0003*\u0015\u0000\u1d64\u1d65\u0005"+
		"\u02b7\u0000\u0000\u1d65\u1d66\u0005\u0018\u0000\u0000\u1d66\u1d6e\u0007"+
		"\u0000\u0000\u0000\u1d67\u1d68\u0005\u02b8\u0000\u0000\u1d68\u1d69\u0005"+
		"\u0018\u0000\u0000\u1d69\u1d6e\u0007\u0000\u0000\u0000\u1d6a\u1d6b\u0005"+
		"\u0163\u0000\u0000\u1d6b\u1d6c\u0005\u0018\u0000\u0000\u1d6c\u1d6e\u0003"+
		"*\u0015\u0000\u1d6d\u1d5b\u0001\u0000\u0000\u0000\u1d6d\u1d5e\u0001\u0000"+
		"\u0000\u0000\u1d6d\u1d61\u0001\u0000\u0000\u0000\u1d6d\u1d64\u0001\u0000"+
		"\u0000\u0000\u1d6d\u1d67\u0001\u0000\u0000\u0000\u1d6d\u1d6a\u0001\u0000"+
		"\u0000\u0000\u1d6e\u0409\u0001\u0000\u0000\u0000\u1d6f\u1d70\u0005\u02e4"+
		"\u0000\u0000\u1d70\u040b\u0001\u0000\u0000\u0000\u1d71\u1d72\u0007g\u0000"+
		"\u0000\u1d72\u040d\u0001\u0000\u0000\u0000\u1d73\u1d7d\u0005\u02b9\u0000"+
		"\u0000\u1d74\u1d75\u0005M\u0000\u0000\u1d75\u1d7a\u0003\u0410\u0208\u0000"+
		"\u1d76\u1d77\u0005%\u0000\u0000\u1d77\u1d79\u0003\u0410\u0208\u0000\u1d78"+
		"\u1d76\u0001\u0000\u0000\u0000\u1d79\u1d7c\u0001\u0000\u0000\u0000\u1d7a"+
		"\u1d78\u0001\u0000\u0000\u0000\u1d7a\u1d7b\u0001\u0000\u0000\u0000\u1d7b"+
		"\u1d7e\u0001\u0000\u0000\u0000\u1d7c\u1d7a\u0001\u0000\u0000\u0000\u1d7d"+
		"\u1d74\u0001\u0000\u0000\u0000\u1d7d\u1d7e\u0001\u0000\u0000\u0000\u1d7e"+
		"\u1d85\u0001\u0000\u0000\u0000\u1d7f\u1d80\u0005\u0179\u0000\u0000\u1d80"+
		"\u1d85\u0003*\u0015\u0000\u1d81\u1d82\u0005\u0159\u0000\u0000\u1d82\u1d83"+
		"\u0005C\u0000\u0000\u1d83\u1d85\u0003*\u0015\u0000\u1d84\u1d73\u0001\u0000"+
		"\u0000\u0000\u1d84\u1d7f\u0001\u0000\u0000\u0000\u1d84\u1d81\u0001\u0000"+
		"\u0000\u0000\u1d85\u040f\u0001\u0000\u0000\u0000\u1d86\u1d87\u0005\u02b6"+
		"\u0000\u0000\u1d87\u1d88\u0005\u0018\u0000\u0000\u1d88\u1d8d\u00032\u0019"+
		"\u0000\u1d89\u1d8a\u0005\u0297\u0000\u0000\u1d8a\u1d8b\u0005\u0018\u0000"+
		"\u0000\u1d8b\u1d8d\u0003*\u0015\u0000\u1d8c\u1d86\u0001\u0000\u0000\u0000"+
		"\u1d8c\u1d89\u0001\u0000\u0000\u0000\u1d8d\u0411\u0001\u0000\u0000\u0000"+
		"\u1d8e\u1d8f\u0005U\u0000\u0000\u1d8f\u1d90\u0005\u016e\u0000\u0000\u1d90"+
		"\u1d9b\u0005\u02aa\u0000\u0000\u1d91\u1d92\u0005M\u0000\u0000\u1d92\u1d97"+
		"\u0003\u0414\u020a\u0000\u1d93\u1d94\u0005%\u0000\u0000\u1d94\u1d96\u0003"+
		"\u0414\u020a\u0000\u1d95\u1d93\u0001\u0000\u0000\u0000\u1d96\u1d99\u0001"+
		"\u0000\u0000\u0000\u1d97\u1d95\u0001\u0000\u0000\u0000\u1d97\u1d98\u0001"+
		"\u0000\u0000\u0000\u1d98\u1d9b\u0001\u0000\u0000\u0000\u1d99\u1d97\u0001"+
		"\u0000\u0000\u0000\u1d9a\u1d8e\u0001\u0000\u0000\u0000\u1d9a\u1d91\u0001"+
		"\u0000\u0000\u0000\u1d9b\u0413\u0001\u0000\u0000\u0000\u1d9c\u1d9d\u0005"+
		"\u00d5\u0000\u0000\u1d9d\u1d9e\u0005\u0018\u0000\u0000\u1d9e\u1da3\u0003"+
		"\u001c\u000e\u0000\u1d9f\u1da0\u0005%\u0000\u0000\u1da0\u1da1\u0005\u02ab"+
		"\u0000\u0000\u1da1\u1da2\u0005\u0018\u0000\u0000\u1da2\u1da4\u0003\u040c"+
		"\u0206\u0000\u1da3\u1d9f\u0001\u0000\u0000\u0000\u1da3\u1da4\u0001\u0000"+
		"\u0000\u0000\u1da4\u0415\u0001\u0000\u0000\u0000\u1da5\u1da6\u0005U\u0000"+
		"\u0000\u1da6\u1da7\u0005\u016e\u0000\u0000\u1da7\u1da9\u0005\u02aa\u0000"+
		"\u0000\u1da8\u1da5\u0001\u0000\u0000\u0000\u1da8\u1da9\u0001\u0000\u0000"+
		"\u0000\u1da9\u1daa\u0001\u0000\u0000\u0000\u1daa\u1dab\u0005M\u0000\u0000"+
		"\u1dab\u1db0\u0003\u0418\u020c\u0000\u1dac\u1dad\u0005%\u0000\u0000\u1dad"+
		"\u1daf\u0003\u0418\u020c\u0000\u1dae\u1dac\u0001\u0000\u0000\u0000\u1daf"+
		"\u1db2\u0001\u0000\u0000\u0000\u1db0\u1dae\u0001\u0000\u0000\u0000\u1db0"+
		"\u1db1\u0001\u0000\u0000\u0000\u1db1\u0417\u0001\u0000\u0000\u0000\u1db2"+
		"\u1db0\u0001\u0000\u0000\u0000\u1db3\u1db4\u0005\u00d5\u0000\u0000\u1db4"+
		"\u1db5\u0005\u0018\u0000\u0000\u1db5\u1dc0\u0003\u001c\u000e\u0000\u1db6"+
		"\u1db7\u0005\u02ab\u0000\u0000\u1db7\u1db8\u0005\u0018\u0000\u0000\u1db8"+
		"\u1dc0\u0003\u040c\u0206\u0000\u1db9\u1dba\u0005\u02b6\u0000\u0000\u1dba"+
		"\u1dbb\u0005\u0018\u0000\u0000\u1dbb\u1dc0\u00032\u0019\u0000\u1dbc\u1dbd"+
		"\u0005\u0297\u0000\u0000\u1dbd\u1dbe\u0005\u0018\u0000\u0000\u1dbe\u1dc0"+
		"\u0003*\u0015\u0000\u1dbf\u1db3\u0001\u0000\u0000\u0000\u1dbf\u1db6\u0001"+
		"\u0000\u0000\u0000\u1dbf\u1db9\u0001\u0000\u0000\u0000\u1dbf\u1dbc\u0001"+
		"\u0000\u0000\u0000\u1dc0\u0419\u0001\u0000\u0000\u0000\u1dc1\u1dc2\u0005"+
		"M\u0000\u0000\u1dc2\u1dc3\u0003\u041c\u020e\u0000\u1dc3\u041b\u0001\u0000"+
		"\u0000\u0000\u1dc4\u1dc5\u0005\u00d5\u0000\u0000\u1dc5\u1dc6\u0005\u0018"+
		"\u0000\u0000\u1dc6\u1dcb\u0003\u001c\u000e\u0000\u1dc7\u1dc8\u0005%\u0000"+
		"\u0000\u1dc8\u1dc9\u0005\u02ab\u0000\u0000\u1dc9\u1dca\u0005\u0018\u0000"+
		"\u0000\u1dca\u1dcc\u0003\u040c\u0206\u0000\u1dcb\u1dc7\u0001\u0000\u0000"+
		"\u0000\u1dcb\u1dcc\u0001\u0000\u0000\u0000\u1dcc\u041d\u0001\u0000\u0000"+
		"\u0000\u1dcd\u1dce\u0005M\u0000\u0000\u1dce\u1dd2\u0003\u0420\u0210\u0000"+
		"\u1dcf\u1dd0\u0005U\u0000\u0000\u1dd0\u1dd2\u0005\u02b9\u0000\u0000\u1dd1"+
		"\u1dcd\u0001\u0000\u0000\u0000\u1dd1\u1dcf\u0001\u0000\u0000\u0000\u1dd2"+
		"\u041f\u0001\u0000\u0000\u0000\u1dd3\u1dd4\u0005\u00d5\u0000\u0000\u1dd4"+
		"\u1dd5\u0005\u0018\u0000\u0000\u1dd5\u1dd7\u0003\u001c\u000e\u0000\u1dd6"+
		"\u1dd8\u0005\u02b5\u0000\u0000\u1dd7\u1dd6\u0001\u0000\u0000\u0000\u1dd7"+
		"\u1dd8\u0001\u0000\u0000\u0000\u1dd8\u1de2\u0001\u0000\u0000\u0000\u1dd9"+
		"\u1dda\u0005%\u0000\u0000\u1dda\u1ddf\u0003\u0422\u0211\u0000\u1ddb\u1ddc"+
		"\u0005%\u0000\u0000\u1ddc\u1dde\u0003\u0422\u0211\u0000\u1ddd\u1ddb\u0001"+
		"\u0000\u0000\u0000\u1dde\u1de1\u0001\u0000\u0000\u0000\u1ddf\u1ddd\u0001"+
		"\u0000\u0000\u0000\u1ddf\u1de0\u0001\u0000\u0000\u0000\u1de0\u1de3\u0001"+
		"\u0000\u0000\u0000\u1de1\u1ddf\u0001\u0000\u0000\u0000\u1de2\u1dd9\u0001"+
		"\u0000\u0000\u0000\u1de2\u1de3\u0001\u0000\u0000\u0000\u1de3\u0421\u0001"+
		"\u0000\u0000\u0000\u1de4\u1de5\u0005\u02b7\u0000\u0000\u1de5\u1de6\u0005"+
		"\u0018\u0000\u0000\u1de6\u1deb\u0007\u0000\u0000\u0000\u1de7\u1de8\u0005"+
		"\u02b8\u0000\u0000\u1de8\u1de9\u0005\u0018\u0000\u0000\u1de9\u1deb\u0007"+
		"\u0000\u0000\u0000\u1dea\u1de4\u0001\u0000\u0000\u0000\u1dea\u1de7\u0001"+
		"\u0000\u0000\u0000\u1deb\u0423\u0001\u0000\u0000\u0000\u1dec\u1ded\u0005"+
		"4\u0000\u0000\u1ded\u1dee\u0005\u0130\u0000\u0000\u1dee\u1def\u0003\u03f4"+
		"\u01fa\u0000\u1def\u0425\u0001\u0000\u0000\u0000\u1df0\u1df1\u00053\u0000"+
		"\u0000\u1df1\u1df2\u0005\u0130\u0000\u0000\u1df2\u1dfe\u0003\u03f4\u01fa"+
		"\u0000\u1df3\u1dff\u0003\u0428\u0214\u0000\u1df4\u1df5\u0005M\u0000\u0000"+
		"\u1df5\u1dfa\u0003\u042a\u0215\u0000\u1df6\u1df7\u0005%\u0000\u0000\u1df7"+
		"\u1df9\u0003\u042a\u0215\u0000\u1df8\u1df6\u0001\u0000\u0000\u0000\u1df9"+
		"\u1dfc\u0001\u0000\u0000\u0000\u1dfa\u1df8\u0001\u0000\u0000\u0000\u1dfa"+
		"\u1dfb\u0001\u0000\u0000\u0000\u1dfb\u1dff\u0001\u0000\u0000\u0000\u1dfc"+
		"\u1dfa\u0001\u0000\u0000\u0000\u1dfd\u1dff\u0003\u042e\u0217\u0000\u1dfe"+
		"\u1df3\u0001\u0000\u0000\u0000\u1dfe\u1df4\u0001\u0000\u0000\u0000\u1dfe"+
		"\u1dfd\u0001\u0000\u0000\u0000\u1dff\u0427\u0001\u0000\u0000\u0000\u1e00"+
		"\u1e01\u00070\u0000\u0000\u1e01\u0429\u0001\u0000\u0000\u0000\u1e02\u1e03"+
		"\u0005\u00d5\u0000\u0000\u1e03\u1e08\u0005\u0018\u0000\u0000\u1e04\u1e09"+
		"\u0003\u001c\u000e\u0000\u1e05\u1e06\u0003\u040a\u0205\u0000\u1e06\u1e07"+
		"\u0005\u02b4\u0000\u0000\u1e07\u1e09\u0001\u0000\u0000\u0000\u1e08\u1e04"+
		"\u0001\u0000\u0000\u0000\u1e08\u1e05\u0001\u0000\u0000\u0000\u1e09\u1e11"+
		"\u0001\u0000\u0000\u0000\u1e0a\u1e0b\u0005\u02a9\u0000\u0000\u1e0b\u1e0c"+
		"\u0005\u0018\u0000\u0000\u1e0c\u1e12\u0003\u001c\u000e\u0000\u1e0d\u1e0f"+
		"\u0003\u042c\u0216\u0000\u1e0e\u1e10\u0003\u042c\u0216\u0000\u1e0f\u1e0e"+
		"\u0001\u0000\u0000\u0000\u1e0f\u1e10\u0001\u0000\u0000\u0000\u1e10\u1e12"+
		"\u0001\u0000\u0000\u0000\u1e11\u1e0a\u0001\u0000\u0000\u0000\u1e11\u1e0d"+
		"\u0001\u0000\u0000\u0000\u1e11\u1e12\u0001\u0000\u0000\u0000\u1e12\u1e28"+
		"\u0001\u0000\u0000\u0000\u1e13\u1e14\u0005\u02b6\u0000\u0000\u1e14\u1e15"+
		"\u0005\u0018\u0000\u0000\u1e15\u1e28\u00032\u0019\u0000\u1e16\u1e17\u0005"+
		"\u0297\u0000\u0000\u1e17\u1e18\u0005\u0018\u0000\u0000\u1e18\u1e28\u0003"+
		"*\u0015\u0000\u1e19\u1e1a\u0005\u00aa\u0000\u0000\u1e1a\u1e1b\u0005\u0018"+
		"\u0000\u0000\u1e1b\u1e28\u0003\u03f4\u01fa\u0000\u1e1c\u1e1d\u0005\u02b8"+
		"\u0000\u0000\u1e1d\u1e1e\u0005\u0018\u0000\u0000\u1e1e\u1e28\u0007\u0000"+
		"\u0000\u0000\u1e1f\u1e20\u0005\u02b7\u0000\u0000\u1e20\u1e21\u0005\u0018"+
		"\u0000\u0000\u1e21\u1e28\u0007\u0000\u0000\u0000\u1e22\u1e23\u0005\u0163"+
		"\u0000\u0000\u1e23\u1e24\u0005\u0018\u0000\u0000\u1e24\u1e28\u0003*\u0015"+
		"\u0000\u1e25\u1e26\u0005\u0107\u0000\u0000\u1e26\u1e28\u0005\u0163\u0000"+
		"\u0000\u1e27\u1e02\u0001\u0000\u0000\u0000\u1e27\u1e13\u0001\u0000\u0000"+
		"\u0000\u1e27\u1e16\u0001\u0000\u0000\u0000\u1e27\u1e19\u0001\u0000\u0000"+
		"\u0000\u1e27\u1e1c\u0001\u0000\u0000\u0000\u1e27\u1e1f\u0001\u0000\u0000"+
		"\u0000\u1e27\u1e22\u0001\u0000\u0000\u0000\u1e27\u1e25\u0001\u0000\u0000"+
		"\u0000\u1e28\u042b\u0001\u0000\u0000\u0000\u1e29\u1e2a\u0007h\u0000\u0000"+
		"\u1e2a\u042d\u0001\u0000\u0000\u0000\u1e2b\u1e2c\u00059\u0000\u0000\u1e2c"+
		"\u1e2d\u0005\u0163\u0000\u0000\u1e2d\u1e32\u0003*\u0015\u0000\u1e2e\u1e2f"+
		"\u00054\u0000\u0000\u1e2f\u1e30\u0005\u0163\u0000\u0000\u1e30\u1e32\u0003"+
		"*\u0015\u0000\u1e31\u1e2b\u0001\u0000\u0000\u0000\u1e31\u1e2e\u0001\u0000"+
		"\u0000\u0000\u1e32\u042f\u0001\u0000\u0000\u0000\u1e33\u1e38\u0005\u02bb"+
		"\u0000\u0000\u1e34\u1e35\u0005M\u0000\u0000\u1e35\u1e36\u0005\u02bc\u0000"+
		"\u0000\u1e36\u1e37\u0005\u0018\u0000\u0000\u1e37\u1e39\u0003\u00fa}\u0000"+
		"\u1e38\u1e34\u0001\u0000\u0000\u0000\u1e38\u1e39\u0001\u0000\u0000\u0000"+
		"\u1e39\u0431\u0001\u0000\u0000\u0000\u038a\u046e\u0471\u0483\u048f\u0495"+
		"\u0497\u0499\u04a0\u04a6\u04a8\u04b0\u04b4\u04bc\u04c0\u04c6\u04d1\u04d6"+
		"\u04e1\u04ed\u04f1\u04fe\u0505\u050a\u050f\u0516\u051d\u0524\u0527\u052a"+
		"\u0531\u053c\u0541\u0545\u0556\u0561\u0567\u056e\u0572\u057d\u0583\u0585"+
		"\u058a\u0597\u05a5\u05a7\u05b0\u05bd\u05cc\u05ce\u05d5\u05dc\u05e5\u05ec"+
		"\u05f5\u05fb\u05fe\u0621\u0623\u0631\u0635\u063d\u0643\u0650\u0657\u065d"+
		"\u0662\u0669\u066f\u0674\u067b\u067f\u0692\u0698\u069b\u06a5\u06aa\u06b3"+
		"\u06c0\u06d0\u06dd\u06e3\u06f3\u06f9\u0702\u0706\u0708\u0713\u0717\u0725"+
		"\u072e\u0733\u073c\u0740\u0749\u0751\u0755\u0762\u0767\u0773\u0778\u0783"+
		"\u078c\u0790\u0797\u079e\u07a2\u07a7\u07aa\u07ba\u07c3\u07cf\u07d1\u07d6"+
		"\u07da\u07dd\u07e2\u07eb\u07f0\u07f8\u0804\u080d\u0813\u081a\u0824\u0827"+
		"\u082a\u0835\u083d\u0846\u084e\u0856\u085a\u0867\u0869\u0872\u0887\u088c"+
		"\u0898\u08a5\u08ae\u08bb\u08d0\u08d7\u08de\u08e5\u08f4\u08f9\u08fe\u0903"+
		"\u0906\u090b\u090e\u0911\u0917\u091d\u091f\u0927\u0937\u094d\u0957\u0960"+
		"\u0964\u097d\u0987\u0991\u099a\u09a8\u09b0\u09b6\u09be\u09c9\u09d0\u09da"+
		"\u09df\u0a00\u0a09\u0a0c\u0a13\u0a1a\u0a1f\u0a26\u0a2f\u0a36\u0a3c\u0a43"+
		"\u0a49\u0a50\u0a56\u0a5d\u0a63\u0a6a\u0a71\u0a73\u0a78\u0a7f\u0a89\u0a95"+
		"\u0a9c\u0aa0\u0aa2\u0aa5\u0aa9\u0aac\u0ab2\u0ab7\u0ac2\u0ac6\u0ac8\u0acb"+
		"\u0ad0\u0adf\u0ae3\u0aef\u0af4\u0afd\u0b04\u0b09\u0b18\u0b22\u0b2d\u0b30"+
		"\u0b3c\u0b40\u0b52\u0b57\u0b5b\u0b60\u0b64\u0b6b\u0b70\u0b78\u0b81\u0b85"+
		"\u0b89\u0b8c\u0b8f\u0b92\u0ba0\u0ba5\u0baa\u0bbc\u0bbe\u0bc9\u0bd1\u0bd6"+
		"\u0bdf\u0be6\u0bec\u0bf5\u0bf8\u0bfb\u0bfe\u0c07\u0c0f\u0c18\u0c1f\u0c22"+
		"\u0c2a\u0c2c\u0c2f\u0c39\u0c3f\u0c47\u0c49\u0c58\u0c60\u0c64\u0c67\u0c6b"+
		"\u0c6e\u0c73\u0c7b\u0c84\u0c8c\u0c8f\u0c92\u0c95\u0c9b\u0c9f\u0ca7\u0cbd"+
		"\u0cbf\u0cc4\u0cc6\u0ccd\u0ccf\u0cd3\u0cdb\u0ce9\u0cf2\u0d01\u0d07\u0d0b"+
		"\u0d12\u0d26\u0d2f\u0d32\u0d48\u0d4a\u0d55\u0d65\u0d6a\u0d6e\u0d73\u0d7a"+
		"\u0d84\u0d8b\u0d8e\u0d99\u0d9d\u0da2\u0da8\u0dad\u0db0\u0dbb\u0dc4\u0dc8"+
		"\u0dd7\u0dde\u0dea\u0ded\u0df1\u0df5\u0dfe\u0e01\u0e04\u0e0b\u0e10\u0e19"+
		"\u0e2d\u0e2f\u0e35\u0e3c\u0e41\u0e48\u0e4c\u0e52\u0e58\u0e5d\u0e63\u0e6a"+
		"\u0e70\u0e79\u0e80\u0e82\u0e88\u0e8b\u0e8e\u0e93\u0e9a\u0ea3\u0ea8\u0eb1"+
		"\u0eb3\u0eb8\u0ec1\u0ec3\u0ec6\u0ed8\u0eda\u0ee4\u0eeb\u0eee\u0ef2\u0efa"+
		"\u0efd\u0f01\u0f08\u0f0f\u0f1a\u0f36\u0f3e\u0f50\u0f52\u0f59\u0f5c\u0f5e"+
		"\u0f65\u0f67\u0f6c\u0f73\u0f78\u0f7b\u0f7f\u0f88\u0f8b\u0f93\u0f97\u0f9b"+
		"\u0fa0\u0fa5\u0fa9\u0fb4\u0fbb\u0fc1\u0fc5\u0fc9\u0fd1\u0fd3\u0fd6\u0fdd"+
		"\u0fe2\u0feb\u0ff0\u0ff8\u0fff\u1007\u1010\u101c\u102c\u102f\u1031\u1034"+
		"\u1037\u103a\u103d\u104f\u1054\u1059\u105e\u1061\u1065\u106d\u1079\u107c"+
		"\u107f\u108e\u1091\u1094\u1098\u109c\u10a6\u10a9\u10ac\u10b9\u10be\u10c4"+
		"\u10c8\u10cb\u10d6\u10d9\u10de\u10e0\u10ec\u10ef\u10f6\u10f9\u10fd\u1101"+
		"\u1104\u1107\u110b\u1116\u1119\u1120\u1123\u1127\u112e\u1133\u113e\u1143"+
		"\u1145\u1152\u115d\u1165\u1168\u116c\u1172\u117c\u1186\u118b\u1197\u119d"+
		"\u11a0\u11a3\u11a6\u11a9\u11ac\u11af\u11b3\u11b8\u11bf\u11c6\u11d3\u11df"+
		"\u11e5\u11ee\u11f1\u11f5\u11f9\u1202\u1207\u1210\u1212\u1217\u1219\u1220"+
		"\u122b\u1234\u123b\u123d\u1246\u124b\u1252\u1259\u126b\u1270\u1274\u128f"+
		"\u1292\u129b\u12b4\u12b7\u12b9\u12be\u12c6\u12db\u12dd\u12e6\u12e9\u12f8"+
		"\u12fd\u1306\u131a\u131d\u1321\u132d\u132f\u133c\u133e\u1348\u1375\u137b"+
		"\u1384\u1393\u1397\u13a0\u13a6\u13b0\u13b9\u13c4\u13d0\u13d2\u13da\u13e8"+
		"\u13f0\u13f5\u13f7\u1400\u1406\u141b\u1422\u142a\u142f\u1431\u145a\u145f"+
		"\u146e\u1476\u148d\u1496\u149e\u14a9\u14ae\u14b6\u14c1\u14cc\u14d5\u14dc"+
		"\u14e0\u14e6\u14fb\u1509\u150c\u1517\u151c\u151f\u1523\u1526\u152a\u152d"+
		"\u1530\u1533\u1539\u153c\u153f\u1545\u1548\u1550\u1554\u1557\u155c\u1561"+
		"\u1565\u1569\u156c\u156f\u1572\u1577\u157b\u157e\u1581\u1588\u158b\u1592"+
		"\u159b\u15a3\u15a8\u15b1\u15b5\u15c2\u15c6\u15d0\u15d4\u15da\u15dd\u15e3"+
		"\u15ee\u15f1\u15f4\u15f8\u15fc\u1600\u1603\u1606\u1609\u160d\u1611\u161b"+
		"\u1624\u162c\u1630\u1633\u1637\u163b\u163e\u1641\u1644\u164a\u164d\u1651"+
		"\u1654\u1657\u1662\u1666\u166b\u166f\u1677\u167b\u1680\u1684\u1688\u168c"+
		"\u1690\u1693\u1695\u1698\u169b\u169e\u16a1\u16a4\u16ab\u16ad\u16b3\u16bb"+
		"\u16bf\u16c3\u16c6\u16c9\u16cb\u16cf\u16d3\u16d6\u16da\u16e4\u16e7\u16e9"+
		"\u16ed\u16ff\u1706\u170c\u170f\u1712\u1716\u171a\u171e\u1721\u1727\u172a"+
		"\u172d\u1733\u1736\u173a\u173f\u1745\u1747\u174d\u1759\u1762\u1771\u1780"+
		"\u1785\u178d\u1792\u1794\u1798\u179d\u17a1\u17a6\u17a9\u17af\u17b2\u17e1"+
		"\u17e3\u17f9\u1800\u1838\u183e\u1846\u1849\u1853\u1855\u1857\u185c\u185e"+
		"\u1860\u1866\u1868\u186f\u1875\u1877\u1879\u187b\u1880\u1884\u188c\u188e"+
		"\u1898\u189a\u189e\u18a2\u18a4\u18a9\u18ab\u18ae\u18b7\u18c1\u18cd\u18d2"+
		"\u18da\u18e0\u18e4\u18e9\u18f1\u18f7\u18fb\u1900\u1904\u190b\u1914\u191b"+
		"\u1922\u192a\u192e\u1933\u193b\u193f\u1943\u1948\u1950\u1954\u1959\u195e"+
		"\u1966\u196a\u196e\u1973\u197b\u197f\u1987\u199c\u19ae\u19b9\u19ce\u19e8"+
		"\u19fd\u1a01\u1a06\u1a0f\u1a11\u1a23\u1a37\u1a42\u1a55\u1a59\u1a61\u1a65"+
		"\u1a70\u1a8c\u1a92\u1aaf\u1ab6\u1aba\u1abf\u1ac9\u1ad4\u1ade\u1ae7\u1afd"+
		"\u1b0a\u1b11\u1b1d\u1b2a\u1b37\u1b42\u1b4e\u1b54\u1b5a\u1b60\u1b6c\u1b79"+
		"\u1b86\u1b92\u1b98\u1b9e\u1ba5\u1ba9\u1bb6\u1bc3\u1bcc\u1bd6\u1c06\u1c10"+
		"\u1c12\u1c1e\u1c24\u1c2c\u1c2f\u1c38\u1c3b\u1c48\u1c4b\u1c52\u1c58\u1c5f"+
		"\u1c67\u1c6a\u1c75\u1c78\u1c81\u1c8a\u1c92\u1c94\u1c9d\u1ca2\u1ca4\u1caa"+
		"\u1cb5\u1cb8\u1cba\u1cc2\u1cc8\u1cd2\u1cdd\u1ce2\u1cef\u1cf5\u1cfe\u1d09"+
		"\u1d0f\u1d14\u1d16\u1d1d\u1d22\u1d33\u1d3d\u1d43\u1d4b\u1d4e\u1d56\u1d59"+
		"\u1d6d\u1d7a\u1d7d\u1d84\u1d8c\u1d97\u1d9a\u1da3\u1da8\u1db0\u1dbf\u1dcb"+
		"\u1dd1\u1dd7\u1ddf\u1de2\u1dea\u1dfa\u1dfe\u1e08\u1e0f\u1e11\u1e27\u1e31"+
		"\u1e38";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}